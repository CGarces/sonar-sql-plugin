// Generated from java-escape by ANTLR 4.11.1
package org.antlr.sql.dialects.psqlv1;
import java.util.List;

import org.antlr.v4.runtime.FailedPredicateException;
import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuleContext;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class PostgreSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WHITESPACE=1, BLOCK_COMMENT=2, LINE_COMMENT=3, A_=4, ABORT=5, ABS=6, ABSOLUTE=7, 
		ACCESS=8, ACTION=9, ADA=10, ADD=11, ADMIN=12, AFTER=13, AGGREGATE=14, 
		ALIAS=15, ALL=16, ALLOCATE=17, ALSO=18, ALTER=19, ALWAYS=20, ANALYSE=21, 
		ANALYZE=22, AND=23, ANY=24, ARE=25, ARRAY=26, AS=27, ASC=28, ASENSITIVE=29, 
		ASSERTION=30, ASSIGNMENT=31, ASYMMETRIC=32, AT=33, ATOMIC=34, ATTRIBUTE=35, 
		ATTRIBUTES=36, AUTHORIZATION=37, AVG=38, BACKWARD=39, BEFORE=40, BEGIN=41, 
		BERNOULLI=42, BETWEEN=43, BIGINT=44, BINARY=45, BIT=46, BIT_LENGTH=47, 
		BITVAR=48, BLOB=49, BOOLEAN=50, BOTH=51, BREADTH=52, BUFFERS=53, BY=54, 
		C_=55, CACHE=56, CALL=57, CALLED=58, CARDINALITY=59, CASCADE=60, CASCADED=61, 
		CASE=62, CAST=63, CATALOG=64, CATALOG_NAME=65, CEIL=66, CEILING=67, CHAIN=68, 
		CHAR=69, CHAR_LENGTH=70, CHARACTER=71, CHARACTER_LENGTH=72, CHARACTER_SET_CATALOG=73, 
		CHARACTER_SET_NAME=74, CHARACTER_SET_SCHEMA=75, CHARACTERISTICS=76, CHARACTERS=77, 
		CHECK=78, CHECKED=79, CHECKPOINT=80, CLASS=81, CLASS_ORIGIN=82, CLOB=83, 
		CLOSE=84, CLUSTER=85, COALESCE=86, COBOL=87, COLLATE=88, COLLATION=89, 
		COLLATION_CATALOG=90, COLLATION_NAME=91, COLLATION_SCHEMA=92, COLLECT=93, 
		COLUMN=94, COLUMN_NAME=95, COMMAND_FUNCTION=96, COMMAND_FUNCTION_CODE=97, 
		COMMENT=98, COMMIT=99, COMMITTED=100, COMPLETION=101, CONDITION=102, CONDITION_NUMBER=103, 
		CONFIGURATION=104, CONFLICT=105, CONNECT=106, CONNECTION=107, CONNECTION_NAME=108, 
		CONSTRAINT=109, CONSTRAINT_CATALOG=110, CONSTRAINT_NAME=111, CONSTRAINT_SCHEMA=112, 
		CONSTRAINTS=113, CONSTRUCTOR=114, CONTAINS=115, CONTINUE=116, CONVERSION=117, 
		CONVERT=118, COPY=119, CORR=120, CORRESPONDING=121, COSTS=122, COUNT=123, 
		COVAR_POP=124, COVAR_SAMP=125, CREATE=126, CREATEDB=127, CREATEUSER=128, 
		CROSS=129, CSV=130, CUBE=131, CUME_DIST=132, CURRENT=133, CURRENT_DATE=134, 
		CURRENT_DEFAULT_TRANSFORM_GROUP=135, CURRENT_PATH=136, CURRENT_ROLE=137, 
		CURRENT_TIME=138, CURRENT_TIMESTAMP=139, CURRENT_TRANSFORM_GROUP_FOR_TYPE=140, 
		CURRENT_USER=141, CURSOR=142, CURSOR_NAME=143, CYCLE=144, DATA=145, DATABASE=146, 
		DATE=147, DATETIME_INTERVAL_CODE=148, DATETIME_INTERVAL_PRECISION=149, 
		DAY=150, DEALLOCATE=151, DEC=152, DECIMAL=153, DECLARE=154, DEFAULT=155, 
		DEFAULTS=156, DEFERABLE=157, DEFERRABLE=158, DEFERRED=159, DEFINED=160, 
		DEFINER=161, DEGREE=162, DELETE=163, DELIMITER=164, DELIMITERS=165, DENSE_RANK=166, 
		DEPENDS=167, DEPTH=168, DEREF=169, DERIVED=170, DESC=171, DESCRIBE=172, 
		DESCRIPTOR=173, DESTROY=174, DESTRUCTOR=175, DETERMINISTIC=176, DIAGNOSTICS=177, 
		DICTIONARY=178, DISABLE=179, DISABLE_PAGE_SKIPPING=180, DISCARD=181, DISCONNECT=182, 
		DISPATCH=183, DISTINCT=184, DO=185, DOMAIN=186, DOUBLE=187, DROP=188, 
		DYNAMIC=189, DYNAMIC_FUNCTION=190, DYNAMIC_FUNCTION_CODE=191, EACH=192, 
		ELEMENT=193, ELSE=194, ENABLE=195, ENCODING=196, ENCRYPTED=197, END=198, 
		END_EXEC=199, EQUALS=200, ESCAPE=201, EVERY=202, EXCEPT=203, EXCEPTION=204, 
		EXCLUDE=205, EXCLUDING=206, EXCLUSIVE=207, EXEC=208, EXECUTE=209, EXISTING=210, 
		EXISTS=211, EXP=212, EXPLAIN=213, EXTENDED=214, EXTENSION=215, EXTERNAL=216, 
		EXTRACT=217, FALSE=218, FETCH=219, FIELDS=220, FILTER=221, FINAL=222, 
		FIRST=223, FLOAT=224, FLOOR=225, FOLLOWING=226, FOR=227, FORCE=228, FOREIGN=229, 
		FORMAT=230, FORTRAN=231, FORWARD=232, FOUND=233, FREE=234, FREEZE=235, 
		FROM=236, FULL=237, FUNCTION=238, FUSION=239, G_=240, GENERAL=241, GENERATED=242, 
		GET=243, GLOBAL=244, GO=245, GOTO=246, GRANT=247, GRANTED=248, GREATEST=249, 
		GROUP=250, GROUPING=251, HANDLER=252, HAVING=253, HIERARCHY=254, HOLD=255, 
		HOST=256, HOUR=257, IDENTITY=258, IGNORE=259, ILIKE=260, IMMEDIATE=261, 
		IMMUTABLE=262, IMPLEMENTATION=263, IMPLICIT=264, IN=265, INCLUDING=266, 
		INCREMENT=267, INDEX=268, INDICATOR=269, INFIX=270, INHERITS=271, INITIALIZE=272, 
		INITIALLY=273, INNER=274, INOUT=275, INPUT=276, INSENSITIVE=277, INSERT=278, 
		INSTANCE=279, INSTANTIABLE=280, INSTEAD=281, INT=282, INTEGER=283, INTERSECT=284, 
		INTERSECTION=285, INTERVAL=286, INTO=287, INVOKER=288, IS=289, ISOLATION=290, 
		ITERATE=291, JOIN=292, K_=293, KEY=294, KEY_MEMBER=295, KEY_TYPE=296, 
		LABEL=297, LANCOMPILER=298, LANGUAGE=299, LARGE=300, LAST=301, LATERAL=302, 
		LEADING=303, LEAST=304, LEFT=305, LENGTH=306, LESS=307, LEVEL=308, LIKE=309, 
		LIMIT=310, LISTEN=311, LN=312, LOAD=313, LOCAL=314, LOCALTIME=315, LOCALTIMESTAMP=316, 
		LOCATION=317, LOCATOR=318, LOCK=319, LOCKED=320, LOWER=321, M_=322, MAIN=323, 
		MAP=324, MAPPING=325, MATCH=326, MATCH_SIMPLE=327, MATCHED=328, MAX=329, 
		MAXVALUE=330, MEMBER=331, MERGE=332, MESSAGE_LENGTH=333, MESSAGE_OCTET_LENGTH=334, 
		MESSAGE_TEXT=335, METHOD=336, MIN=337, MINUTE=338, MINVALUE=339, MOD=340, 
		MODE=341, MODIFIES=342, MODIFY=343, MODULE=344, MONTH=345, MORE_=346, 
		MOVE=347, MULTISET=348, MUMPS=349, NAME=350, NAMES=351, NATIONAL=352, 
		NATURAL=353, NCHAR=354, NCLOB=355, NESTING=356, NEW=357, NEXT=358, NO=359, 
		NOCREATEDB=360, NOCREATEUSER=361, NONE=362, NORMALIZE=363, NORMALIZED=364, 
		NOT=365, NOTHING=366, NOTIFY=367, NOTNULL=368, NOWAIT=369, NULL=370, NULLABLE=371, 
		NULLIF=372, NULLS=373, NUMBER=374, NUMERIC=375, OBJECT=376, OCTET_LENGTH=377, 
		OCTETS=378, OF=379, OFF=380, OFFSET=381, OIDS=382, OLD=383, ON=384, ONLY=385, 
		OPEN=386, OPERATION=387, OPERATOR=388, OPTION=389, OPTIONS=390, OR=391, 
		ORDER=392, ORDERING=393, ORDINALITY=394, OTHERS=395, OUT=396, OUTER=397, 
		OUTPUT=398, OVER=399, OVERLAPS=400, OVERLAY=401, OVERRIDING=402, OWNER=403, 
		PAD=404, PARAMETER=405, PARAMETER_MODE=406, PARAMETER_NAME=407, PARAMETER_ORDINAL_POSITION=408, 
		PARAMETER_SPECIFIC_CATALOG=409, PARAMETER_SPECIFIC_NAME=410, PARAMETER_SPECIFIC_SCHEMA=411, 
		PARAMETERS=412, PARSER=413, PARTIAL=414, PARTITION=415, PASCAL=416, PASSWORD=417, 
		PATH=418, PERCENT_RANK=419, PERCENTILE_CONT=420, PERCENTILE_DISC=421, 
		PLACING=422, PLAIN=423, PLANS=424, PLI=425, POSITION=426, POSTFIX=427, 
		POWER=428, PRECEDING=429, PRECISION=430, PREFIX=431, PREORDER=432, PREPARE=433, 
		PREPARED=434, PRESERVE=435, PRIMARY=436, PRIOR=437, PRIVILEGES=438, PROCEDURAL=439, 
		PROCEDURE=440, PUBLIC=441, PUBLICATION=442, QUOTE=443, RANGE=444, RANK=445, 
		READ=446, READS=447, REAL=448, REASSIGN=449, RECHECK=450, RECURSIVE=451, 
		REF=452, REFERENCES=453, REFERENCING=454, REFRESH=455, REGR_AVGX=456, 
		REGR_AVGY=457, REGR_COUNT=458, REGR_INTERCEPT=459, REGR_R2=460, REGR_SLOPE=461, 
		REGR_SXX=462, REGR_SXY=463, REGR_SYY=464, REINDEX=465, RELATIVE=466, RELEASE=467, 
		RENAME=468, REPEATABLE=469, REPLACE=470, REPLICA=471, RESET=472, RESTART=473, 
		RESTRICT=474, RESULT=475, RETURN=476, RETURNED_CARDINALITY=477, RETURNED_LENGTH=478, 
		RETURNED_OCTET_LENGTH=479, RETURNED_SQLSTATE=480, RETURNING=481, RETURNS=482, 
		REVOKE=483, RIGHT=484, ROLE=485, ROLLBACK=486, ROLLUP=487, ROUTINE=488, 
		ROUTINE_CATALOG=489, ROUTINE_NAME=490, ROUTINE_SCHEMA=491, ROW=492, ROW_COUNT=493, 
		ROW_NUMBER=494, ROWS=495, RULE=496, SAVEPOINT=497, SCALE=498, SCHEMA=499, 
		SCHEMA_NAME=500, SCOPE=501, SCOPE_CATALOG=502, SCOPE_NAME=503, SCOPE_SCHEMA=504, 
		SCROLL=505, SEARCH=506, SECOND=507, SECTION=508, SECURITY=509, SELECT=510, 
		SELF=511, SENSITIVE=512, SEQUENCE=513, SEQUENCES=514, SERIALIZABLE=515, 
		SERVER_NAME=516, SESSION=517, SESSION_USER=518, SET=519, SETOF=520, SETS=521, 
		SHARE=522, SHOW=523, SIMILAR=524, SIMPLE=525, SIZE=526, SKIP_=527, SMALLINT=528, 
		SNAPSHOT=529, SOME=530, SOURCE=531, SPACE=532, SPECIFIC=533, SPECIFIC_NAME=534, 
		SPECIFICTYPE=535, SQL=536, SQLCODE=537, SQLERROR=538, SQLEXCEPTION=539, 
		SQLSTATE=540, SQLWARNING=541, SQRT=542, STABLE=543, START=544, STATE=545, 
		STATEMENT=546, STATIC=547, STATISTICS=548, STDDEV_POP=549, STDDEV_SAMP=550, 
		STDIN=551, STDOUT=552, STORAGE=553, STRICT=554, STRUCTURE=555, STYLE=556, 
		SUBCLASS_ORIGIN=557, SUBLIST=558, SUBMULTISET=559, SUBSCRIPTION=560, SUBSTRING=561, 
		SUM=562, SYMMETRIC=563, SYSID=564, SYSTEM=565, SYSTEM_USER=566, TABLE=567, 
		TABLE_NAME=568, TABLESAMPLE=569, TABLESPACE=570, TEMP=571, TEMPLATE=572, 
		TEMPORARY=573, TERMINATE=574, THAN=575, THEN=576, TIES=577, TIME=578, 
		TIMESTAMP=579, TIMEZONE_HOUR=580, TIMEZONE_MINUTE=581, TIMING=582, TO=583, 
		TOAST=584, TOP_LEVEL_COUNT=585, TRAILING=586, TRANSACTION=587, TRANSACTION_ACTIVE=588, 
		TRANSACTIONS_COMMITTED=589, TRANSACTIONS_ROLLED_BACK=590, TRANSFORM=591, 
		TRANSFORMS=592, TRANSLATE=593, TRANSLATION=594, TREAT=595, TRIGGER=596, 
		TRIGGER_CATALOG=597, TRIGGER_NAME=598, TRIGGER_SCHEMA=599, TRIM=600, TRUE=601, 
		TRUNCATE=602, TRUSTED=603, TYPE=604, UESCAPE=605, UNBOUNDED=606, UNCOMMITTED=607, 
		UNDER=608, UNENCRYPTED=609, UNION=610, UNIQUE=611, UNKNOWN=612, UNLISTEN=613, 
		UNNAMED=614, UNNEST=615, UNTIL=616, UPDATE=617, UPPER=618, USAGE=619, 
		USER=620, USER_DEFINED_TYPE_CATALOG=621, USER_DEFINED_TYPE_CODE=622, USER_DEFINED_TYPE_NAME=623, 
		USER_DEFINED_TYPE_SCHEMA=624, USING=625, VACUUM=626, VALID=627, VALIDATE=628, 
		VALIDATOR=629, VALUE=630, VALUES=631, VAR_POP=632, VAR_SAMP=633, VARCHAR=634, 
		VARIABLE=635, VARIADIC=636, VARYING=637, VERBOSE=638, VIEW=639, VOLATILE=640, 
		WHEN=641, WHENEVER=642, WHERE=643, WIDTH_BUCKET=644, WINDOW=645, WITH=646, 
		WITHIN=647, WITHOUT=648, WORK=649, WRITE=650, YAML=651, YEAR=652, YES=653, 
		ZONE=654, SUPERUSER=655, NOSUPERUSER=656, CREATEROLE=657, NOCREATEROLE=658, 
		INHERIT=659, NOINHERIT=660, LOGIN=661, NOLOGIN=662, REPLICATION=663, NOREPLICATION=664, 
		BYPASSRLS=665, NOBYPASSRLS=666, SFUNC=667, STYPE=668, SSPACE=669, FINALFUNC=670, 
		FINALFUNC_EXTRA=671, COMBINEFUNC=672, SERIALFUNC=673, DESERIALFUNC=674, 
		INITCOND=675, MSFUNC=676, MINVFUNC=677, MSTYPE=678, MSSPACE=679, MFINALFUNC=680, 
		MFINALFUNC_EXTRA=681, MINITCOND=682, SORTOP=683, PARALLEL=684, HYPOTHETICAL=685, 
		SAFE=686, RESTRICTED=687, UNSAFE=688, BASETYPE=689, IF=690, LOCALE=691, 
		LC_COLLATE=692, LC_CTYPE=693, PROVIDER=694, VERSION=695, ALLOW_CONNECTIONS=696, 
		IS_TEMPLATE=697, EVENT=698, WRAPPER=699, SERVER=700, BTREE=701, HASH_=702, 
		GIST=703, SPGIST=704, GIN=705, BRIN=706, CONCURRENTLY=707, INLINE=708, 
		MATERIALIZED=709, LEFTARG=710, RIGHTARG=711, COMMUTATOR=712, NEGATOR=713, 
		HASHES=714, MERGES=715, FAMILY=716, POLICY=717, OWNED=718, ABSTIME=719, 
		BIGSERIAL=720, BIT_VARYING=721, BOOL=722, BOX=723, BYTEA=724, CHARACTER_VARYING=725, 
		CIDR=726, CIRCLE=727, FLOAT4=728, FLOAT8=729, INET=730, INT2=731, INT4=732, 
		INT8=733, JSON=734, JSONB=735, LINE=736, LSEG=737, MACADDR=738, MACADDR8=739, 
		MONEY=740, PG_LSN=741, POINT=742, POLYGON=743, RELTIME=744, SERIAL=745, 
		SERIAL2=746, SERIAL4=747, SERIAL8=748, SMALLSERIAL=749, STSTEM=750, TEXT=751, 
		TIMESTAMPTZ=752, TIMETZ=753, TSQUERY=754, TSVECTOR=755, TXID_SNAPSHOT=756, 
		UUID=757, VARBIT=758, XML=759, COMMA=760, COLON=761, COLON_COLON=762, 
		DOLLAR=763, DOLLAR_DOLLAR=764, STAR=765, OPEN_PAREN=766, CLOSE_PAREN=767, 
		OPEN_BRACKET=768, CLOSE_BRACKET=769, BIT_STRING=770, REGEX_STRING=771, 
		NUMERIC_LITERAL=772, INTEGER_LITERAL=773, HEX_INTEGER_LITERAL=774, DOT=775, 
		SINGLEQ_STRING_LITERAL=776, DOUBLEQ_STRING_LITERAL=777, IDENTIFIER=778, 
		DOLLAR_DEC=779, IDENTIFIER_UNICODE=780, AMP=781, AMP_AMP=782, AMP_LT=783, 
		AT_AT=784, AT_GT=785, AT_SIGN=786, BANG=787, BANG_BANG=788, BANG_EQUAL=789, 
		CARET=790, EQUAL=791, EQUAL_GT=792, GT=793, GTE=794, GT_GT=795, HASH=796, 
		HASH_EQ=797, HASH_GT=798, HASH_GT_GT=799, HASH_HASH=800, HYPHEN_GT=801, 
		HYPHEN_GT_GT=802, HYPHEN_PIPE_HYPHEN=803, LT=804, LTE=805, LT_AT=806, 
		LT_CARET=807, LT_GT=808, LT_HYPHEN_GT=809, LT_LT=810, LT_LT_EQ=811, LT_QMARK_GT=812, 
		MINUS=813, PERCENT=814, PIPE=815, PIPE_PIPE=816, PIPE_PIPE_SLASH=817, 
		PIPE_SLASH=818, PLUS=819, QMARK=820, QMARK_AMP=821, QMARK_HASH=822, QMARK_HYPHEN=823, 
		QMARK_PIPE=824, SLASH=825, TIL=826, TIL_EQ=827, TIL_GTE_TIL=828, TIL_GT_TIL=829, 
		TIL_LTE_TIL=830, TIL_LT_TIL=831, TIL_STAR=832, TIL_TIL=833, SEMI=834, 
		UNLOGGED=835;
	public static final int
		RULE_root = 0, RULE_stmt = 1, RULE_abort_stmt = 2, RULE_alter_stmt = 3, 
		RULE_alter_aggregate_stmt = 4, RULE_alter_collation_stmt = 5, RULE_alter_conversion_stmt = 6, 
		RULE_alter_database_stmt = 7, RULE_alter_default_privileges_stmt = 8, 
		RULE_alter_domain_stmt = 9, RULE_alter_event_trigger_stmt = 10, RULE_alter_extension_stmt = 11, 
		RULE_alter_foreign_data_wrapper_stmt = 12, RULE_alter_foreign_table_action = 13, 
		RULE_alter_foreign_table_action_list = 14, RULE_alter_foreign_table_stmt = 15, 
		RULE_alter_function_stmt = 16, RULE_alter_group_stmt = 17, RULE_alter_index_stmt = 18, 
		RULE_alter_language_stmt = 19, RULE_alter_large_object_stmt = 20, RULE_alter_materialize_view_stmt = 21, 
		RULE_alter_operator_stmt = 22, RULE_alter_operator_class_stmt = 23, RULE_alter_operator_family_stmt = 24, 
		RULE_alter_policy_stmt = 25, RULE_alter_publication_stmt = 26, RULE_alter_role_options = 27, 
		RULE_alter_role_stmt = 28, RULE_alter_rule_stmt = 29, RULE_alter_schema_stmt = 30, 
		RULE_alter_sequence_stmt = 31, RULE_alter_server_options_list = 32, RULE_alter_server_stmt = 33, 
		RULE_alter_statistics_stmt = 34, RULE_alter_subscription_stmt = 35, RULE_alter_system_stmt = 36, 
		RULE_alter_table_stmt = 37, RULE_alter_tablespace_stmt = 38, RULE_alter_text_search_config_stmt = 39, 
		RULE_alter_text_search_dict_stmt = 40, RULE_alter_text_search_parser_stmt = 41, 
		RULE_alter_text_search_template_stmt = 42, RULE_alter_trigger_stmt = 43, 
		RULE_alter_type_stmt = 44, RULE_alter_user_stmt = 45, RULE_alter_user_mapping_stmt = 46, 
		RULE_alter_view_stmt = 47, RULE_analyze_stmt = 48, RULE_close_stmt = 49, 
		RULE_cluster_stmt = 50, RULE_comment_stmt = 51, RULE_commit_stmt = 52, 
		RULE_commit_prepared_stmt = 53, RULE_copy_stmt = 54, RULE_create_stmt = 55, 
		RULE_create_access_method_stmt = 56, RULE_create_aggregate_stmt = 57, 
		RULE_create_cast_stmt = 58, RULE_create_collation_opt = 59, RULE_create_collation_opt_list = 60, 
		RULE_create_collation_stmt = 61, RULE_create_conversion_stmt = 62, RULE_create_database_stmt = 63, 
		RULE_domain_constraint = 64, RULE_create_domain_stmt = 65, RULE_create_event_trigger_cond = 66, 
		RULE_create_event_trigger_stmt = 67, RULE_create_foreign_data_options = 68, 
		RULE_create_foreign_data_stmt = 69, RULE_create_foreign_table_stmt = 70, 
		RULE_create_function_stmt = 71, RULE_create_group_stmt = 72, RULE_create_index_stmt = 73, 
		RULE_create_language_stmt = 74, RULE_create_materialized_view_stmt = 75, 
		RULE_create_operator_stmt = 76, RULE_create_operator_class_opt = 77, RULE_create_operator_class_stmt = 78, 
		RULE_create_operator_family_stmt = 79, RULE_create_policy_stmt = 80, RULE_create_role_stmt = 81, 
		RULE_create_rule_event = 82, RULE_create_rule_stmt = 83, RULE_create_schema_stmt = 84, 
		RULE_create_sequence_stmt = 85, RULE_create_server_stmt = 86, RULE_create_statistics_stmt = 87, 
		RULE_create_subscription_stmt = 88, RULE_create_table_stmt = 89, RULE_create_table_as_stmt = 90, 
		RULE_create_tablespace_stmt = 91, RULE_create_text_search_config_stmt = 92, 
		RULE_create_text_search_dict_stmt = 93, RULE_create_text_search_parser_stmt = 94, 
		RULE_create_text_search_template_stmt = 95, RULE_create_transform_stmt = 96, 
		RULE_create_trigger_stmt = 97, RULE_create_type_stmt = 98, RULE_create_user_stmt = 99, 
		RULE_create_user_mapping_stmt = 100, RULE_create_view_stmt = 101, RULE_deallocate_stmt = 102, 
		RULE_declare_stmt = 103, RULE_delete_stmt = 104, RULE_discard_stmt = 105, 
		RULE_drop_stmt = 106, RULE_drop_access_method_stmt = 107, RULE_drop_aggregate_stmt = 108, 
		RULE_drop_cast_stmt = 109, RULE_drop_collation_stmt = 110, RULE_drop_conversion_stmt = 111, 
		RULE_drop_database_stmt = 112, RULE_drop_domain_stmt = 113, RULE_drop_event_trigger_stmt = 114, 
		RULE_drop_extension_stmt = 115, RULE_drop_foreign_data_wrapper_stmt = 116, 
		RULE_drop_foreign_table_stmt = 117, RULE_drop_function_stmt = 118, RULE_drop_group_stmt = 119, 
		RULE_drop_index_stmt = 120, RULE_drop_language_stmt = 121, RULE_drop_materialized_view_stmt = 122, 
		RULE_drop_operator_stmt = 123, RULE_drop_operator_class_stmt = 124, RULE_drop_operator_family_stmt = 125, 
		RULE_drop_owned_stmt = 126, RULE_drop_policy_stmt = 127, RULE_drop_publication_stmt = 128, 
		RULE_drop_role_stmt = 129, RULE_drop_rule_stmt = 130, RULE_drop_schema_stmt = 131, 
		RULE_drop_sequence_stmt = 132, RULE_drop_server_stmt = 133, RULE_drop_statistics_stmt = 134, 
		RULE_drop_subscription_stmt = 135, RULE_drop_table_stmt = 136, RULE_drop_tablespace_stmt = 137, 
		RULE_drop_text_search_config_stmt = 138, RULE_drop_text_search_dict_stmt = 139, 
		RULE_drop_text_search_parser_stmt = 140, RULE_drop_text_search_template_stmt = 141, 
		RULE_drop_transform_stmt = 142, RULE_drop_trigger_stmt = 143, RULE_drop_type_stmt = 144, 
		RULE_drop_user_stmt = 145, RULE_drop_user_mapping_stmt = 146, RULE_drop_view_stmt = 147, 
		RULE_execute_stmt = 148, RULE_explain_stmt = 149, RULE_fetch_stmt = 150, 
		RULE_grant_stmt = 151, RULE_import_foreign_schema_stmt = 152, RULE_insert_stmt = 153, 
		RULE_listen_stmt = 154, RULE_load_stmt = 155, RULE_lock_stmt = 156, RULE_move_stmt = 157, 
		RULE_notify_stmt = 158, RULE_prepare_stmt = 159, RULE_prepare_transaction_stmt = 160, 
		RULE_reassign_owned_stmt = 161, RULE_refresh_materialized_view_stmt = 162, 
		RULE_reindex_stmt = 163, RULE_release_savepoint_stmt = 164, RULE_reset_stmt = 165, 
		RULE_revoke_stmt = 166, RULE_rollback_stmt = 167, RULE_rollback_prepared_stmt = 168, 
		RULE_rollback_to_savepoint_stmt = 169, RULE_savepoint_stmt = 170, RULE_security_label_stmt = 171, 
		RULE_select_stmt = 172, RULE_select_into_stmt = 173, RULE_with_clause = 174, 
		RULE_with_expr = 175, RULE_set_stmt = 176, RULE_set_constraints_stmt = 177, 
		RULE_set_role_stmt = 178, RULE_set_session_authorization_stmt = 179, RULE_transaction_mode = 180, 
		RULE_transaction_mode_list = 181, RULE_set_transaction_stmt = 182, RULE_show_stmt = 183, 
		RULE_truncate_stmt = 184, RULE_unlisten_stmt = 185, RULE_update_stmt = 186, 
		RULE_vacuum_opt = 187, RULE_vacuum_opt_list = 188, RULE_vacuum_stmt = 189, 
		RULE_values_stmt = 190, RULE_selector_clause = 191, RULE_from_clause = 192, 
		RULE_where_clause = 193, RULE_group_by_clause = 194, RULE_grouping_elem = 195, 
		RULE_grouping_elem_list = 196, RULE_having_clause = 197, RULE_column_list = 198, 
		RULE_explain_parameter = 199, RULE_frame = 200, RULE_frame_start = 201, 
		RULE_frame_end = 202, RULE_frame_clause = 203, RULE_window_definition = 204, 
		RULE_window_clause = 205, RULE_combine_clause = 206, RULE_order_by_clause = 207, 
		RULE_order_by_item = 208, RULE_limit_clause = 209, RULE_offset_clause = 210, 
		RULE_fetch_clause = 211, RULE_for_clause = 212, RULE_updater_clause = 213, 
		RULE_updater_expr = 214, RULE_returning_clause = 215, RULE_expr = 216, 
		RULE_bool_expr = 217, RULE_case_expr = 218, RULE_expr_list = 219, RULE_expr_list_list = 220, 
		RULE_func_sig_arg = 221, RULE_func_sig_arg_list = 222, RULE_func_sig = 223, 
		RULE_func_sig_list = 224, RULE_type_name = 225, RULE_timezone = 226, RULE_oper = 227, 
		RULE_aggregate = 228, RULE_name_ = 229, RULE_name_list = 230, RULE_identifier_list = 231, 
		RULE_option_expr = 232, RULE_option_list = 233, RULE_table_name_ = 234, 
		RULE_data_type = 235, RULE_data_type_list = 236, RULE_index_method = 237, 
		RULE_func_name = 238, RULE_func_call = 239, RULE_array_cons_expr = 240, 
		RULE_from_item = 241, RULE_with_column_alias = 242, RULE_join_type = 243, 
		RULE_join_clause = 244, RULE_predicate = 245, RULE_aggregate_signature = 246, 
		RULE_column_constraint = 247, RULE_column_constraints = 248, RULE_index_parameters = 249, 
		RULE_exclude_element = 250, RULE_table_constraint = 251, RULE_role_name = 252, 
		RULE_role_name_list = 253, RULE_param_value = 254, RULE_non_reserved_keyword = 255, 
		RULE_identifier = 256, RULE_todo_fill_in = 257, RULE_todo_implement = 258, 
		RULE_correlation_name = 259, RULE_column_name = 260, RULE_alias = 261, 
		RULE_column_alias = 262, RULE_column_definition = 263, RULE_window_name = 264;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "stmt", "abort_stmt", "alter_stmt", "alter_aggregate_stmt", "alter_collation_stmt", 
			"alter_conversion_stmt", "alter_database_stmt", "alter_default_privileges_stmt", 
			"alter_domain_stmt", "alter_event_trigger_stmt", "alter_extension_stmt", 
			"alter_foreign_data_wrapper_stmt", "alter_foreign_table_action", "alter_foreign_table_action_list", 
			"alter_foreign_table_stmt", "alter_function_stmt", "alter_group_stmt", 
			"alter_index_stmt", "alter_language_stmt", "alter_large_object_stmt", 
			"alter_materialize_view_stmt", "alter_operator_stmt", "alter_operator_class_stmt", 
			"alter_operator_family_stmt", "alter_policy_stmt", "alter_publication_stmt", 
			"alter_role_options", "alter_role_stmt", "alter_rule_stmt", "alter_schema_stmt", 
			"alter_sequence_stmt", "alter_server_options_list", "alter_server_stmt", 
			"alter_statistics_stmt", "alter_subscription_stmt", "alter_system_stmt", 
			"alter_table_stmt", "alter_tablespace_stmt", "alter_text_search_config_stmt", 
			"alter_text_search_dict_stmt", "alter_text_search_parser_stmt", "alter_text_search_template_stmt", 
			"alter_trigger_stmt", "alter_type_stmt", "alter_user_stmt", "alter_user_mapping_stmt", 
			"alter_view_stmt", "analyze_stmt", "close_stmt", "cluster_stmt", "comment_stmt", 
			"commit_stmt", "commit_prepared_stmt", "copy_stmt", "create_stmt", "create_access_method_stmt", 
			"create_aggregate_stmt", "create_cast_stmt", "create_collation_opt", 
			"create_collation_opt_list", "create_collation_stmt", "create_conversion_stmt", 
			"create_database_stmt", "domain_constraint", "create_domain_stmt", "create_event_trigger_cond", 
			"create_event_trigger_stmt", "create_foreign_data_options", "create_foreign_data_stmt", 
			"create_foreign_table_stmt", "create_function_stmt", "create_group_stmt", 
			"create_index_stmt", "create_language_stmt", "create_materialized_view_stmt", 
			"create_operator_stmt", "create_operator_class_opt", "create_operator_class_stmt", 
			"create_operator_family_stmt", "create_policy_stmt", "create_role_stmt", 
			"create_rule_event", "create_rule_stmt", "create_schema_stmt", "create_sequence_stmt", 
			"create_server_stmt", "create_statistics_stmt", "create_subscription_stmt", 
			"create_table_stmt", "create_table_as_stmt", "create_tablespace_stmt", 
			"create_text_search_config_stmt", "create_text_search_dict_stmt", "create_text_search_parser_stmt", 
			"create_text_search_template_stmt", "create_transform_stmt", "create_trigger_stmt", 
			"create_type_stmt", "create_user_stmt", "create_user_mapping_stmt", "create_view_stmt", 
			"deallocate_stmt", "declare_stmt", "delete_stmt", "discard_stmt", "drop_stmt", 
			"drop_access_method_stmt", "drop_aggregate_stmt", "drop_cast_stmt", "drop_collation_stmt", 
			"drop_conversion_stmt", "drop_database_stmt", "drop_domain_stmt", "drop_event_trigger_stmt", 
			"drop_extension_stmt", "drop_foreign_data_wrapper_stmt", "drop_foreign_table_stmt", 
			"drop_function_stmt", "drop_group_stmt", "drop_index_stmt", "drop_language_stmt", 
			"drop_materialized_view_stmt", "drop_operator_stmt", "drop_operator_class_stmt", 
			"drop_operator_family_stmt", "drop_owned_stmt", "drop_policy_stmt", "drop_publication_stmt", 
			"drop_role_stmt", "drop_rule_stmt", "drop_schema_stmt", "drop_sequence_stmt", 
			"drop_server_stmt", "drop_statistics_stmt", "drop_subscription_stmt", 
			"drop_table_stmt", "drop_tablespace_stmt", "drop_text_search_config_stmt", 
			"drop_text_search_dict_stmt", "drop_text_search_parser_stmt", "drop_text_search_template_stmt", 
			"drop_transform_stmt", "drop_trigger_stmt", "drop_type_stmt", "drop_user_stmt", 
			"drop_user_mapping_stmt", "drop_view_stmt", "execute_stmt", "explain_stmt", 
			"fetch_stmt", "grant_stmt", "import_foreign_schema_stmt", "insert_stmt", 
			"listen_stmt", "load_stmt", "lock_stmt", "move_stmt", "notify_stmt", 
			"prepare_stmt", "prepare_transaction_stmt", "reassign_owned_stmt", "refresh_materialized_view_stmt", 
			"reindex_stmt", "release_savepoint_stmt", "reset_stmt", "revoke_stmt", 
			"rollback_stmt", "rollback_prepared_stmt", "rollback_to_savepoint_stmt", 
			"savepoint_stmt", "security_label_stmt", "select_stmt", "select_into_stmt", 
			"with_clause", "with_expr", "set_stmt", "set_constraints_stmt", "set_role_stmt", 
			"set_session_authorization_stmt", "transaction_mode", "transaction_mode_list", 
			"set_transaction_stmt", "show_stmt", "truncate_stmt", "unlisten_stmt", 
			"update_stmt", "vacuum_opt", "vacuum_opt_list", "vacuum_stmt", "values_stmt", 
			"selector_clause", "from_clause", "where_clause", "group_by_clause", 
			"grouping_elem", "grouping_elem_list", "having_clause", "column_list", 
			"explain_parameter", "frame", "frame_start", "frame_end", "frame_clause", 
			"window_definition", "window_clause", "combine_clause", "order_by_clause", 
			"order_by_item", "limit_clause", "offset_clause", "fetch_clause", "for_clause", 
			"updater_clause", "updater_expr", "returning_clause", "expr", "bool_expr", 
			"case_expr", "expr_list", "expr_list_list", "func_sig_arg", "func_sig_arg_list", 
			"func_sig", "func_sig_list", "type_name", "timezone", "oper", "aggregate", 
			"name_", "name_list", "identifier_list", "option_expr", "option_list", 
			"table_name_", "data_type", "data_type_list", "index_method", "func_name", 
			"func_call", "array_cons_expr", "from_item", "with_column_alias", "join_type", 
			"join_clause", "predicate", "aggregate_signature", "column_constraint", 
			"column_constraints", "index_parameters", "exclude_element", "table_constraint", 
			"role_name", "role_name_list", "param_value", "non_reserved_keyword", 
			"identifier", "todo_fill_in", "todo_implement", "correlation_name", "column_name", 
			"alias", "column_alias", "column_definition", "window_name"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, "','", "':'", "'::'", "'$'", "'$$'", "'*'", "'('", 
			"')'", "'['", "']'", null, null, null, null, null, "'.'", null, null, 
			null, null, null, "'&'", "'&&'", "'&<'", "'@@'", "'@>'", "'@'", "'!'", 
			"'!!'", "'!='", "'^'", "'='", "'=>'", "'>'", "'>='", "'>>'", "'#'", "'#='", 
			"'#>'", "'#>>'", "'##'", "'->'", "'->>'", "'-|-'", "'<'", "'<='", "'<@'", 
			"'<^'", "'<>'", "'<->'", "'<<'", "'<<='", "'<?>'", "'-'", "'%'", "'|'", 
			"'||'", "'||/'", "'|/'", "'+'", "'?'", "'?&'", "'?#'", "'?-'", "'?|'", 
			"'/'", "'~'", "'~='", "'~>=~'", "'~>~'", "'~<=~'", "'~<~'", "'~*'", "'~~'", 
			"';'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "A_", "ABORT", "ABS", 
			"ABSOLUTE", "ACCESS", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", "AGGREGATE", 
			"ALIAS", "ALL", "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSERTION", 
			"ASSIGNMENT", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", 
			"AUTHORIZATION", "AVG", "BACKWARD", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", 
			"BIGINT", "BINARY", "BIT", "BIT_LENGTH", "BITVAR", "BLOB", "BOOLEAN", 
			"BOTH", "BREADTH", "BUFFERS", "BY", "C_", "CACHE", "CALL", "CALLED", 
			"CARDINALITY", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", 
			"CEIL", "CEILING", "CHAIN", "CHAR", "CHAR_LENGTH", "CHARACTER", "CHARACTER_LENGTH", 
			"CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", 
			"CHARACTERISTICS", "CHARACTERS", "CHECK", "CHECKED", "CHECKPOINT", "CLASS", 
			"CLASS_ORIGIN", "CLOB", "CLOSE", "CLUSTER", "COALESCE", "COBOL", "COLLATE", 
			"COLLATION", "COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", 
			"COLLECT", "COLUMN", "COLUMN_NAME", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
			"COMMENT", "COMMIT", "COMMITTED", "COMPLETION", "CONDITION", "CONDITION_NUMBER", 
			"CONFIGURATION", "CONFLICT", "CONNECT", "CONNECTION", "CONNECTION_NAME", 
			"CONSTRAINT", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", 
			"CONSTRAINTS", "CONSTRUCTOR", "CONTAINS", "CONTINUE", "CONVERSION", "CONVERT", 
			"COPY", "CORR", "CORRESPONDING", "COSTS", "COUNT", "COVAR_POP", "COVAR_SAMP", 
			"CREATE", "CREATEDB", "CREATEUSER", "CROSS", "CSV", "CUBE", "CUME_DIST", 
			"CURRENT", "CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", 
			"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", 
			"CURRENT_USER", "CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", 
			"DATE", "DATETIME_INTERVAL_CODE", "DATETIME_INTERVAL_PRECISION", "DAY", 
			"DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERABLE", 
			"DEFERRABLE", "DEFERRED", "DEFINED", "DEFINER", "DEGREE", "DELETE", "DELIMITER", 
			"DELIMITERS", "DENSE_RANK", "DEPENDS", "DEPTH", "DEREF", "DERIVED", "DESC", 
			"DESCRIBE", "DESCRIPTOR", "DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", 
			"DICTIONARY", "DISABLE", "DISABLE_PAGE_SKIPPING", "DISCARD", "DISCONNECT", 
			"DISPATCH", "DISTINCT", "DO", "DOMAIN", "DOUBLE", "DROP", "DYNAMIC", 
			"DYNAMIC_FUNCTION", "DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", "ELSE", 
			"ENABLE", "ENCODING", "ENCRYPTED", "END", "END_EXEC", "EQUALS", "ESCAPE", 
			"EVERY", "EXCEPT", "EXCEPTION", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", 
			"EXEC", "EXECUTE", "EXISTING", "EXISTS", "EXP", "EXPLAIN", "EXTENDED", 
			"EXTENSION", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", 
			"FINAL", "FIRST", "FLOAT", "FLOOR", "FOLLOWING", "FOR", "FORCE", "FOREIGN", 
			"FORMAT", "FORTRAN", "FORWARD", "FOUND", "FREE", "FREEZE", "FROM", "FULL", 
			"FUNCTION", "FUSION", "G_", "GENERAL", "GENERATED", "GET", "GLOBAL", 
			"GO", "GOTO", "GRANT", "GRANTED", "GREATEST", "GROUP", "GROUPING", "HANDLER", 
			"HAVING", "HIERARCHY", "HOLD", "HOST", "HOUR", "IDENTITY", "IGNORE", 
			"ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLEMENTATION", "IMPLICIT", "IN", 
			"INCLUDING", "INCREMENT", "INDEX", "INDICATOR", "INFIX", "INHERITS", 
			"INITIALIZE", "INITIALLY", "INNER", "INOUT", "INPUT", "INSENSITIVE", 
			"INSERT", "INSTANCE", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", 
			"INTERSECTION", "INTERVAL", "INTO", "INVOKER", "IS", "ISOLATION", "ITERATE", 
			"JOIN", "K_", "KEY", "KEY_MEMBER", "KEY_TYPE", "LABEL", "LANCOMPILER", 
			"LANGUAGE", "LARGE", "LAST", "LATERAL", "LEADING", "LEAST", "LEFT", "LENGTH", 
			"LESS", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LN", "LOAD", "LOCAL", "LOCALTIME", 
			"LOCALTIMESTAMP", "LOCATION", "LOCATOR", "LOCK", "LOCKED", "LOWER", "M_", 
			"MAIN", "MAP", "MAPPING", "MATCH", "MATCH_SIMPLE", "MATCHED", "MAX", 
			"MAXVALUE", "MEMBER", "MERGE", "MESSAGE_LENGTH", "MESSAGE_OCTET_LENGTH", 
			"MESSAGE_TEXT", "METHOD", "MIN", "MINUTE", "MINVALUE", "MOD", "MODE", 
			"MODIFIES", "MODIFY", "MODULE", "MONTH", "MORE_", "MOVE", "MULTISET", 
			"MUMPS", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NCLOB", "NESTING", 
			"NEW", "NEXT", "NO", "NOCREATEDB", "NOCREATEUSER", "NONE", "NORMALIZE", 
			"NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL", 
			"NULLABLE", "NULLIF", "NULLS", "NUMBER", "NUMERIC", "OBJECT", "OCTET_LENGTH", 
			"OCTETS", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPEN", 
			"OPERATION", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDERING", 
			"ORDINALITY", "OTHERS", "OUT", "OUTER", "OUTPUT", "OVER", "OVERLAPS", 
			"OVERLAY", "OVERRIDING", "OWNER", "PAD", "PARAMETER", "PARAMETER_MODE", 
			"PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION", "PARAMETER_SPECIFIC_CATALOG", 
			"PARAMETER_SPECIFIC_NAME", "PARAMETER_SPECIFIC_SCHEMA", "PARAMETERS", 
			"PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSWORD", "PATH", "PERCENT_RANK", 
			"PERCENTILE_CONT", "PERCENTILE_DISC", "PLACING", "PLAIN", "PLANS", "PLI", 
			"POSITION", "POSTFIX", "POWER", "PRECEDING", "PRECISION", "PREFIX", "PREORDER", 
			"PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", 
			"PROCEDURAL", "PROCEDURE", "PUBLIC", "PUBLICATION", "QUOTE", "RANGE", 
			"RANK", "READ", "READS", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", 
			"REF", "REFERENCES", "REFERENCING", "REFRESH", "REGR_AVGX", "REGR_AVGY", 
			"REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
			"REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT", "RESULT", "RETURN", 
			"RETURNED_CARDINALITY", "RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", 
			"RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROUTINE", "ROUTINE_CATALOG", "ROUTINE_NAME", "ROUTINE_SCHEMA", "ROW", 
			"ROW_COUNT", "ROW_NUMBER", "ROWS", "RULE", "SAVEPOINT", "SCALE", "SCHEMA", 
			"SCHEMA_NAME", "SCOPE", "SCOPE_CATALOG", "SCOPE_NAME", "SCOPE_SCHEMA", 
			"SCROLL", "SEARCH", "SECOND", "SECTION", "SECURITY", "SELECT", "SELF", 
			"SENSITIVE", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER_NAME", 
			"SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", 
			"SIMPLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SOURCE", 
			"SPACE", "SPECIFIC", "SPECIFIC_NAME", "SPECIFICTYPE", "SQL", "SQLCODE", 
			"SQLERROR", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STABLE", 
			"START", "STATE", "STATEMENT", "STATIC", "STATISTICS", "STDDEV_POP", 
			"STDDEV_SAMP", "STDIN", "STDOUT", "STORAGE", "STRICT", "STRUCTURE", "STYLE", 
			"SUBCLASS_ORIGIN", "SUBLIST", "SUBMULTISET", "SUBSCRIPTION", "SUBSTRING", 
			"SUM", "SYMMETRIC", "SYSID", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLE_NAME", 
			"TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TERMINATE", 
			"THAN", "THEN", "TIES", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
			"TIMING", "TO", "TOAST", "TOP_LEVEL_COUNT", "TRAILING", "TRANSACTION", 
			"TRANSACTION_ACTIVE", "TRANSACTIONS_COMMITTED", "TRANSACTIONS_ROLLED_BACK", 
			"TRANSFORM", "TRANSFORMS", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", 
			"TRIGGER_CATALOG", "TRIGGER_NAME", "TRIGGER_SCHEMA", "TRIM", "TRUE", 
			"TRUNCATE", "TRUSTED", "TYPE", "UESCAPE", "UNBOUNDED", "UNCOMMITTED", 
			"UNDER", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNNAMED", 
			"UNNEST", "UNTIL", "UPDATE", "UPPER", "USAGE", "USER", "USER_DEFINED_TYPE_CATALOG", 
			"USER_DEFINED_TYPE_CODE", "USER_DEFINED_TYPE_NAME", "USER_DEFINED_TYPE_SCHEMA", 
			"USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VALUES", 
			"VAR_POP", "VAR_SAMP", "VARCHAR", "VARIABLE", "VARIADIC", "VARYING", 
			"VERBOSE", "VIEW", "VOLATILE", "WHEN", "WHENEVER", "WHERE", "WIDTH_BUCKET", 
			"WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRITE", "YAML", "YEAR", 
			"YES", "ZONE", "SUPERUSER", "NOSUPERUSER", "CREATEROLE", "NOCREATEROLE", 
			"INHERIT", "NOINHERIT", "LOGIN", "NOLOGIN", "REPLICATION", "NOREPLICATION", 
			"BYPASSRLS", "NOBYPASSRLS", "SFUNC", "STYPE", "SSPACE", "FINALFUNC", 
			"FINALFUNC_EXTRA", "COMBINEFUNC", "SERIALFUNC", "DESERIALFUNC", "INITCOND", 
			"MSFUNC", "MINVFUNC", "MSTYPE", "MSSPACE", "MFINALFUNC", "MFINALFUNC_EXTRA", 
			"MINITCOND", "SORTOP", "PARALLEL", "HYPOTHETICAL", "SAFE", "RESTRICTED", 
			"UNSAFE", "BASETYPE", "IF", "LOCALE", "LC_COLLATE", "LC_CTYPE", "PROVIDER", 
			"VERSION", "ALLOW_CONNECTIONS", "IS_TEMPLATE", "EVENT", "WRAPPER", "SERVER", 
			"BTREE", "HASH_", "GIST", "SPGIST", "GIN", "BRIN", "CONCURRENTLY", "INLINE", 
			"MATERIALIZED", "LEFTARG", "RIGHTARG", "COMMUTATOR", "NEGATOR", "HASHES", 
			"MERGES", "FAMILY", "POLICY", "OWNED", "ABSTIME", "BIGSERIAL", "BIT_VARYING", 
			"BOOL", "BOX", "BYTEA", "CHARACTER_VARYING", "CIDR", "CIRCLE", "FLOAT4", 
			"FLOAT8", "INET", "INT2", "INT4", "INT8", "JSON", "JSONB", "LINE", "LSEG", 
			"MACADDR", "MACADDR8", "MONEY", "PG_LSN", "POINT", "POLYGON", "RELTIME", 
			"SERIAL", "SERIAL2", "SERIAL4", "SERIAL8", "SMALLSERIAL", "STSTEM", "TEXT", 
			"TIMESTAMPTZ", "TIMETZ", "TSQUERY", "TSVECTOR", "TXID_SNAPSHOT", "UUID", 
			"VARBIT", "XML", "COMMA", "COLON", "COLON_COLON", "DOLLAR", "DOLLAR_DOLLAR", 
			"STAR", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
			"BIT_STRING", "REGEX_STRING", "NUMERIC_LITERAL", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
			"DOT", "SINGLEQ_STRING_LITERAL", "DOUBLEQ_STRING_LITERAL", "IDENTIFIER", 
			"DOLLAR_DEC", "IDENTIFIER_UNICODE", "AMP", "AMP_AMP", "AMP_LT", "AT_AT", 
			"AT_GT", "AT_SIGN", "BANG", "BANG_BANG", "BANG_EQUAL", "CARET", "EQUAL", 
			"EQUAL_GT", "GT", "GTE", "GT_GT", "HASH", "HASH_EQ", "HASH_GT", "HASH_GT_GT", 
			"HASH_HASH", "HYPHEN_GT", "HYPHEN_GT_GT", "HYPHEN_PIPE_HYPHEN", "LT", 
			"LTE", "LT_AT", "LT_CARET", "LT_GT", "LT_HYPHEN_GT", "LT_LT", "LT_LT_EQ", 
			"LT_QMARK_GT", "MINUS", "PERCENT", "PIPE", "PIPE_PIPE", "PIPE_PIPE_SLASH", 
			"PIPE_SLASH", "PLUS", "QMARK", "QMARK_AMP", "QMARK_HASH", "QMARK_HYPHEN", 
			"QMARK_PIPE", "SLASH", "TIL", "TIL_EQ", "TIL_GTE_TIL", "TIL_GT_TIL", 
			"TIL_LTE_TIL", "TIL_LT_TIL", "TIL_STAR", "TIL_TIL", "SEMI", "UNLOGGED"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "java-escape"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public List<TerminalNode> SEMI() { return getTokens(PostgreSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(PostgreSQLParser.SEMI, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(530);
			stmt();
			setState(539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(533); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(531);
						match(SEMI);
						setState(532);
						stmt();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(535); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,0,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(537);
				match(SEMI);
				}
			}

			setState(541);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StmtContext extends ParserRuleContext {
		public Abort_stmtContext abort_stmt() {
			return getRuleContext(Abort_stmtContext.class,0);
		}
		public Alter_stmtContext alter_stmt() {
			return getRuleContext(Alter_stmtContext.class,0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return getRuleContext(Analyze_stmtContext.class,0);
		}
		public Create_stmtContext create_stmt() {
			return getRuleContext(Create_stmtContext.class,0);
		}
		public Close_stmtContext close_stmt() {
			return getRuleContext(Close_stmtContext.class,0);
		}
		public Cluster_stmtContext cluster_stmt() {
			return getRuleContext(Cluster_stmtContext.class,0);
		}
		public Comment_stmtContext comment_stmt() {
			return getRuleContext(Comment_stmtContext.class,0);
		}
		public Commit_stmtContext commit_stmt() {
			return getRuleContext(Commit_stmtContext.class,0);
		}
		public Commit_prepared_stmtContext commit_prepared_stmt() {
			return getRuleContext(Commit_prepared_stmtContext.class,0);
		}
		public Copy_stmtContext copy_stmt() {
			return getRuleContext(Copy_stmtContext.class,0);
		}
		public Deallocate_stmtContext deallocate_stmt() {
			return getRuleContext(Deallocate_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Discard_stmtContext discard_stmt() {
			return getRuleContext(Discard_stmtContext.class,0);
		}
		public Drop_stmtContext drop_stmt() {
			return getRuleContext(Drop_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Explain_stmtContext explain_stmt() {
			return getRuleContext(Explain_stmtContext.class,0);
		}
		public Fetch_stmtContext fetch_stmt() {
			return getRuleContext(Fetch_stmtContext.class,0);
		}
		public Grant_stmtContext grant_stmt() {
			return getRuleContext(Grant_stmtContext.class,0);
		}
		public Import_foreign_schema_stmtContext import_foreign_schema_stmt() {
			return getRuleContext(Import_foreign_schema_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Listen_stmtContext listen_stmt() {
			return getRuleContext(Listen_stmtContext.class,0);
		}
		public Load_stmtContext load_stmt() {
			return getRuleContext(Load_stmtContext.class,0);
		}
		public Lock_stmtContext lock_stmt() {
			return getRuleContext(Lock_stmtContext.class,0);
		}
		public Move_stmtContext move_stmt() {
			return getRuleContext(Move_stmtContext.class,0);
		}
		public Notify_stmtContext notify_stmt() {
			return getRuleContext(Notify_stmtContext.class,0);
		}
		public Prepare_stmtContext prepare_stmt() {
			return getRuleContext(Prepare_stmtContext.class,0);
		}
		public Prepare_transaction_stmtContext prepare_transaction_stmt() {
			return getRuleContext(Prepare_transaction_stmtContext.class,0);
		}
		public Reassign_owned_stmtContext reassign_owned_stmt() {
			return getRuleContext(Reassign_owned_stmtContext.class,0);
		}
		public Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() {
			return getRuleContext(Refresh_materialized_view_stmtContext.class,0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return getRuleContext(Reindex_stmtContext.class,0);
		}
		public Release_savepoint_stmtContext release_savepoint_stmt() {
			return getRuleContext(Release_savepoint_stmtContext.class,0);
		}
		public Reset_stmtContext reset_stmt() {
			return getRuleContext(Reset_stmtContext.class,0);
		}
		public Revoke_stmtContext revoke_stmt() {
			return getRuleContext(Revoke_stmtContext.class,0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return getRuleContext(Rollback_stmtContext.class,0);
		}
		public Rollback_prepared_stmtContext rollback_prepared_stmt() {
			return getRuleContext(Rollback_prepared_stmtContext.class,0);
		}
		public Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() {
			return getRuleContext(Rollback_to_savepoint_stmtContext.class,0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return getRuleContext(Savepoint_stmtContext.class,0);
		}
		public Security_label_stmtContext security_label_stmt() {
			return getRuleContext(Security_label_stmtContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Select_into_stmtContext select_into_stmt() {
			return getRuleContext(Select_into_stmtContext.class,0);
		}
		public Set_stmtContext set_stmt() {
			return getRuleContext(Set_stmtContext.class,0);
		}
		public Set_constraints_stmtContext set_constraints_stmt() {
			return getRuleContext(Set_constraints_stmtContext.class,0);
		}
		public Set_role_stmtContext set_role_stmt() {
			return getRuleContext(Set_role_stmtContext.class,0);
		}
		public Set_session_authorization_stmtContext set_session_authorization_stmt() {
			return getRuleContext(Set_session_authorization_stmtContext.class,0);
		}
		public Set_transaction_stmtContext set_transaction_stmt() {
			return getRuleContext(Set_transaction_stmtContext.class,0);
		}
		public Show_stmtContext show_stmt() {
			return getRuleContext(Show_stmtContext.class,0);
		}
		public Truncate_stmtContext truncate_stmt() {
			return getRuleContext(Truncate_stmtContext.class,0);
		}
		public Unlisten_stmtContext unlisten_stmt() {
			return getRuleContext(Unlisten_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return getRuleContext(Vacuum_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				setState(543);
				abort_stmt();
				}
				break;
			case 2:
				{
				setState(544);
				alter_stmt();
				}
				break;
			case 3:
				{
				setState(545);
				analyze_stmt();
				}
				break;
			case 4:
				{
				setState(546);
				create_stmt();
				}
				break;
			case 5:
				{
				setState(547);
				close_stmt();
				}
				break;
			case 6:
				{
				setState(548);
				cluster_stmt();
				}
				break;
			case 7:
				{
				setState(549);
				comment_stmt();
				}
				break;
			case 8:
				{
				setState(550);
				commit_stmt();
				}
				break;
			case 9:
				{
				setState(551);
				commit_prepared_stmt();
				}
				break;
			case 10:
				{
				setState(552);
				copy_stmt();
				}
				break;
			case 11:
				{
				setState(553);
				deallocate_stmt();
				}
				break;
			case 12:
				{
				setState(554);
				declare_stmt();
				}
				break;
			case 13:
				{
				setState(555);
				delete_stmt();
				}
				break;
			case 14:
				{
				setState(556);
				discard_stmt();
				}
				break;
			case 15:
				{
				setState(557);
				drop_stmt();
				}
				break;
			case 16:
				{
				setState(558);
				execute_stmt();
				}
				break;
			case 17:
				{
				setState(559);
				explain_stmt();
				}
				break;
			case 18:
				{
				setState(560);
				fetch_stmt();
				}
				break;
			case 19:
				{
				setState(561);
				grant_stmt();
				}
				break;
			case 20:
				{
				setState(562);
				import_foreign_schema_stmt();
				}
				break;
			case 21:
				{
				setState(563);
				insert_stmt();
				}
				break;
			case 22:
				{
				setState(564);
				listen_stmt();
				}
				break;
			case 23:
				{
				setState(565);
				load_stmt();
				}
				break;
			case 24:
				{
				setState(566);
				lock_stmt();
				}
				break;
			case 25:
				{
				setState(567);
				move_stmt();
				}
				break;
			case 26:
				{
				setState(568);
				notify_stmt();
				}
				break;
			case 27:
				{
				setState(569);
				prepare_stmt();
				}
				break;
			case 28:
				{
				setState(570);
				prepare_transaction_stmt();
				}
				break;
			case 29:
				{
				setState(571);
				reassign_owned_stmt();
				}
				break;
			case 30:
				{
				setState(572);
				refresh_materialized_view_stmt();
				}
				break;
			case 31:
				{
				setState(573);
				reindex_stmt();
				}
				break;
			case 32:
				{
				setState(574);
				release_savepoint_stmt();
				}
				break;
			case 33:
				{
				setState(575);
				reset_stmt();
				}
				break;
			case 34:
				{
				setState(576);
				revoke_stmt();
				}
				break;
			case 35:
				{
				setState(577);
				rollback_stmt();
				}
				break;
			case 36:
				{
				setState(578);
				rollback_prepared_stmt();
				}
				break;
			case 37:
				{
				setState(579);
				rollback_to_savepoint_stmt();
				}
				break;
			case 38:
				{
				setState(580);
				savepoint_stmt();
				}
				break;
			case 39:
				{
				setState(581);
				security_label_stmt();
				}
				break;
			case 40:
				{
				setState(582);
				select_stmt();
				}
				break;
			case 41:
				{
				setState(583);
				select_into_stmt();
				}
				break;
			case 42:
				{
				setState(584);
				set_stmt();
				}
				break;
			case 43:
				{
				setState(585);
				set_constraints_stmt();
				}
				break;
			case 44:
				{
				setState(586);
				set_role_stmt();
				}
				break;
			case 45:
				{
				setState(587);
				set_session_authorization_stmt();
				}
				break;
			case 46:
				{
				setState(588);
				set_transaction_stmt();
				}
				break;
			case 47:
				{
				setState(589);
				show_stmt();
				}
				break;
			case 48:
				{
				setState(590);
				truncate_stmt();
				}
				break;
			case 49:
				{
				setState(591);
				unlisten_stmt();
				}
				break;
			case 50:
				{
				setState(592);
				update_stmt();
				}
				break;
			case 51:
				{
				setState(593);
				vacuum_stmt();
				}
				break;
			case 52:
				{
				setState(594);
				values_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Abort_stmtContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Abort_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abort_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAbort_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAbort_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAbort_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Abort_stmtContext abort_stmt() throws RecognitionException {
		Abort_stmtContext _localctx = new Abort_stmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_abort_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(597);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_stmtContext extends ParserRuleContext {
		public Alter_aggregate_stmtContext alter_aggregate_stmt() {
			return getRuleContext(Alter_aggregate_stmtContext.class,0);
		}
		public Alter_collation_stmtContext alter_collation_stmt() {
			return getRuleContext(Alter_collation_stmtContext.class,0);
		}
		public Alter_conversion_stmtContext alter_conversion_stmt() {
			return getRuleContext(Alter_conversion_stmtContext.class,0);
		}
		public Alter_database_stmtContext alter_database_stmt() {
			return getRuleContext(Alter_database_stmtContext.class,0);
		}
		public Alter_default_privileges_stmtContext alter_default_privileges_stmt() {
			return getRuleContext(Alter_default_privileges_stmtContext.class,0);
		}
		public Alter_domain_stmtContext alter_domain_stmt() {
			return getRuleContext(Alter_domain_stmtContext.class,0);
		}
		public Alter_event_trigger_stmtContext alter_event_trigger_stmt() {
			return getRuleContext(Alter_event_trigger_stmtContext.class,0);
		}
		public Alter_extension_stmtContext alter_extension_stmt() {
			return getRuleContext(Alter_extension_stmtContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() {
			return getRuleContext(Alter_foreign_data_wrapper_stmtContext.class,0);
		}
		public Alter_foreign_table_stmtContext alter_foreign_table_stmt() {
			return getRuleContext(Alter_foreign_table_stmtContext.class,0);
		}
		public Alter_function_stmtContext alter_function_stmt() {
			return getRuleContext(Alter_function_stmtContext.class,0);
		}
		public Alter_group_stmtContext alter_group_stmt() {
			return getRuleContext(Alter_group_stmtContext.class,0);
		}
		public Alter_index_stmtContext alter_index_stmt() {
			return getRuleContext(Alter_index_stmtContext.class,0);
		}
		public Alter_language_stmtContext alter_language_stmt() {
			return getRuleContext(Alter_language_stmtContext.class,0);
		}
		public Alter_large_object_stmtContext alter_large_object_stmt() {
			return getRuleContext(Alter_large_object_stmtContext.class,0);
		}
		public Alter_materialize_view_stmtContext alter_materialize_view_stmt() {
			return getRuleContext(Alter_materialize_view_stmtContext.class,0);
		}
		public Alter_operator_stmtContext alter_operator_stmt() {
			return getRuleContext(Alter_operator_stmtContext.class,0);
		}
		public Alter_operator_class_stmtContext alter_operator_class_stmt() {
			return getRuleContext(Alter_operator_class_stmtContext.class,0);
		}
		public Alter_operator_family_stmtContext alter_operator_family_stmt() {
			return getRuleContext(Alter_operator_family_stmtContext.class,0);
		}
		public Alter_policy_stmtContext alter_policy_stmt() {
			return getRuleContext(Alter_policy_stmtContext.class,0);
		}
		public Alter_publication_stmtContext alter_publication_stmt() {
			return getRuleContext(Alter_publication_stmtContext.class,0);
		}
		public Alter_role_stmtContext alter_role_stmt() {
			return getRuleContext(Alter_role_stmtContext.class,0);
		}
		public Alter_rule_stmtContext alter_rule_stmt() {
			return getRuleContext(Alter_rule_stmtContext.class,0);
		}
		public Alter_schema_stmtContext alter_schema_stmt() {
			return getRuleContext(Alter_schema_stmtContext.class,0);
		}
		public Alter_sequence_stmtContext alter_sequence_stmt() {
			return getRuleContext(Alter_sequence_stmtContext.class,0);
		}
		public Alter_server_stmtContext alter_server_stmt() {
			return getRuleContext(Alter_server_stmtContext.class,0);
		}
		public Alter_statistics_stmtContext alter_statistics_stmt() {
			return getRuleContext(Alter_statistics_stmtContext.class,0);
		}
		public Alter_subscription_stmtContext alter_subscription_stmt() {
			return getRuleContext(Alter_subscription_stmtContext.class,0);
		}
		public Alter_system_stmtContext alter_system_stmt() {
			return getRuleContext(Alter_system_stmtContext.class,0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return getRuleContext(Alter_table_stmtContext.class,0);
		}
		public Alter_tablespace_stmtContext alter_tablespace_stmt() {
			return getRuleContext(Alter_tablespace_stmtContext.class,0);
		}
		public Alter_text_search_config_stmtContext alter_text_search_config_stmt() {
			return getRuleContext(Alter_text_search_config_stmtContext.class,0);
		}
		public Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() {
			return getRuleContext(Alter_text_search_dict_stmtContext.class,0);
		}
		public Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() {
			return getRuleContext(Alter_text_search_parser_stmtContext.class,0);
		}
		public Alter_text_search_template_stmtContext alter_text_search_template_stmt() {
			return getRuleContext(Alter_text_search_template_stmtContext.class,0);
		}
		public Alter_trigger_stmtContext alter_trigger_stmt() {
			return getRuleContext(Alter_trigger_stmtContext.class,0);
		}
		public Alter_type_stmtContext alter_type_stmt() {
			return getRuleContext(Alter_type_stmtContext.class,0);
		}
		public Alter_user_stmtContext alter_user_stmt() {
			return getRuleContext(Alter_user_stmtContext.class,0);
		}
		public Alter_user_mapping_stmtContext alter_user_mapping_stmt() {
			return getRuleContext(Alter_user_mapping_stmtContext.class,0);
		}
		public Alter_view_stmtContext alter_view_stmt() {
			return getRuleContext(Alter_view_stmtContext.class,0);
		}
		public Alter_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_stmtContext alter_stmt() throws RecognitionException {
		Alter_stmtContext _localctx = new Alter_stmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_stmt);
		try {
			setState(639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(599);
				alter_aggregate_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(600);
				alter_collation_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(601);
				alter_conversion_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(602);
				alter_database_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(603);
				alter_default_privileges_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(604);
				alter_domain_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(605);
				alter_event_trigger_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(606);
				alter_extension_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(607);
				alter_foreign_data_wrapper_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(608);
				alter_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(609);
				alter_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(610);
				alter_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(611);
				alter_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(612);
				alter_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(613);
				alter_large_object_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(614);
				alter_materialize_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(615);
				alter_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(616);
				alter_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(617);
				alter_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(618);
				alter_policy_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(619);
				alter_publication_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(620);
				alter_role_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(621);
				alter_rule_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(622);
				alter_schema_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(623);
				alter_sequence_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(624);
				alter_server_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(625);
				alter_statistics_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(626);
				alter_subscription_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(627);
				alter_system_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(628);
				alter_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(629);
				alter_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(630);
				alter_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(631);
				alter_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(632);
				alter_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(633);
				alter_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(634);
				alter_trigger_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(635);
				alter_type_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(636);
				alter_user_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(637);
				alter_user_mapping_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(638);
				alter_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_aggregate_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_aggregate_stmtContext alter_aggregate_stmt() throws RecognitionException {
		Alter_aggregate_stmtContext _localctx = new Alter_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_aggregate_stmt);
		try {
			setState(671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(641);
				match(ALTER);
				setState(642);
				match(AGGREGATE);
				setState(643);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(644);
				match(OPEN_PAREN);
				setState(645);
				aggregate_signature();
				setState(646);
				match(CLOSE_PAREN);
				setState(647);
				match(RENAME);
				setState(648);
				match(TO);
				setState(649);
				((Alter_aggregate_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(651);
				match(ALTER);
				setState(652);
				match(AGGREGATE);
				setState(653);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(654);
				match(OPEN_PAREN);
				setState(655);
				aggregate_signature();
				setState(656);
				match(CLOSE_PAREN);
				setState(657);
				match(OWNER);
				setState(658);
				match(TO);
				setState(659);
				((Alter_aggregate_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(661);
				match(ALTER);
				setState(662);
				match(AGGREGATE);
				setState(663);
				((Alter_aggregate_stmtContext)_localctx).name = identifier(0);
				setState(664);
				match(OPEN_PAREN);
				setState(665);
				aggregate_signature();
				setState(666);
				match(CLOSE_PAREN);
				setState(667);
				match(SET);
				setState(668);
				match(SCHEMA);
				setState(669);
				((Alter_aggregate_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_collation_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLParser.VERSION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collation_stmtContext alter_collation_stmt() throws RecognitionException {
		Alter_collation_stmtContext _localctx = new Alter_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_collation_stmt);
		try {
			setState(700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(673);
				match(ALTER);
				setState(674);
				match(COLLATION);
				setState(675);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(676);
				match(REFRESH);
				setState(677);
				match(VERSION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(679);
				match(ALTER);
				setState(680);
				match(COLLATION);
				setState(681);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(682);
				match(RENAME);
				setState(683);
				match(TO);
				setState(684);
				((Alter_collation_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(686);
				match(ALTER);
				setState(687);
				match(COLLATION);
				setState(688);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(689);
				match(OWNER);
				setState(690);
				match(TO);
				setState(691);
				((Alter_collation_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(693);
				match(ALTER);
				setState(694);
				match(COLLATION);
				setState(695);
				((Alter_collation_stmtContext)_localctx).name = name_();
				setState(696);
				match(SET);
				setState(697);
				match(SCHEMA);
				setState(698);
				((Alter_collation_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_conversion_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_conversion_stmtContext alter_conversion_stmt() throws RecognitionException {
		Alter_conversion_stmtContext _localctx = new Alter_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_conversion_stmt);
		try {
			setState(723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(702);
				match(ALTER);
				setState(703);
				match(CONVERSION);
				setState(704);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(705);
				match(RENAME);
				setState(706);
				match(TO);
				setState(707);
				((Alter_conversion_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(709);
				match(ALTER);
				setState(710);
				match(CONVERSION);
				setState(711);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(712);
				match(OWNER);
				setState(713);
				match(TO);
				setState(714);
				((Alter_conversion_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(716);
				match(ALTER);
				setState(717);
				match(CONVERSION);
				setState(718);
				((Alter_conversion_stmtContext)_localctx).name = identifier(0);
				setState(719);
				match(SET);
				setState(720);
				match(SCHEMA);
				setState(721);
				((Alter_conversion_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_database_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_stmtContext alter_database_stmt() throws RecognitionException {
		Alter_database_stmtContext _localctx = new Alter_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_database_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(725);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_default_privileges_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_default_privileges_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_default_privileges_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_default_privileges_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_default_privileges_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_default_privileges_stmtContext alter_default_privileges_stmt() throws RecognitionException {
		Alter_default_privileges_stmtContext _localctx = new Alter_default_privileges_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_default_privileges_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(727);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_domain_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext constraint_name;
		public IdentifierContext new_constraint_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public Domain_constraintContext domain_constraint() {
			return getRuleContext(Domain_constraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_stmtContext alter_domain_stmt() throws RecognitionException {
		Alter_domain_stmtContext _localctx = new Alter_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_domain_stmt);
		int _la;
		try {
			setState(805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(729);
				match(ALTER);
				setState(730);
				match(DOMAIN);
				setState(731);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(737);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(732);
					match(SET);
					setState(733);
					match(DEFAULT);
					setState(734);
					expr(0);
					}
					break;
				case DROP:
					{
					setState(735);
					match(DROP);
					setState(736);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(739);
				match(ALTER);
				setState(740);
				match(DOMAIN);
				setState(741);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(742);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(743);
				match(NOT);
				setState(744);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(746);
				match(ALTER);
				setState(747);
				match(DOMAIN);
				setState(748);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(749);
				match(ADD);
				setState(750);
				domain_constraint();
				setState(753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(751);
					match(NOT);
					setState(752);
					match(VALID);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(755);
				match(ALTER);
				setState(756);
				match(DOMAIN);
				setState(757);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(758);
				match(DROP);
				setState(759);
				match(CONSTRAINT);
				setState(762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(760);
					match(IF);
					setState(761);
					match(EXISTS);
					}
				}

				setState(764);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				setState(766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(765);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(768);
				match(ALTER);
				setState(769);
				match(DOMAIN);
				setState(770);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(771);
				match(RENAME);
				setState(772);
				match(CONSTRAINT);
				setState(773);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				setState(774);
				match(TO);
				setState(775);
				((Alter_domain_stmtContext)_localctx).new_constraint_name = identifier(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(777);
				match(ALTER);
				setState(778);
				match(DOMAIN);
				setState(779);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(780);
				match(VALIDATE);
				setState(781);
				match(CONSTRAINT);
				setState(782);
				((Alter_domain_stmtContext)_localctx).constraint_name = identifier(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(784);
				match(ALTER);
				setState(785);
				match(DOMAIN);
				setState(786);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(787);
				match(OWNER);
				setState(788);
				match(TO);
				setState(789);
				((Alter_domain_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(791);
				match(ALTER);
				setState(792);
				match(DOMAIN);
				setState(793);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(794);
				match(RENAME);
				setState(795);
				match(TO);
				setState(796);
				((Alter_domain_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(798);
				match(ALTER);
				setState(799);
				match(DOMAIN);
				setState(800);
				((Alter_domain_stmtContext)_localctx).name = identifier(0);
				setState(801);
				match(SET);
				setState(802);
				match(SCHEMA);
				setState(803);
				((Alter_domain_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_owner;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLParser.DISABLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(PostgreSQLParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public Alter_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_event_trigger_stmtContext alter_event_trigger_stmt() throws RecognitionException {
		Alter_event_trigger_stmtContext _localctx = new Alter_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_event_trigger_stmt);
		int _la;
		try {
			setState(840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(807);
				match(ALTER);
				setState(808);
				match(EVENT);
				setState(809);
				match(TRIGGER);
				setState(810);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(811);
				match(DISABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(813);
				match(ALTER);
				setState(814);
				match(EVENT);
				setState(815);
				match(TRIGGER);
				setState(816);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(817);
				match(ENABLE);
				setState(819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS || _la==REPLICA) {
					{
					setState(818);
					_la = _input.LA(1);
					if ( !(_la==ALWAYS || _la==REPLICA) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(821);
				match(ALTER);
				setState(822);
				match(EVENT);
				setState(823);
				match(TRIGGER);
				setState(824);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(825);
				match(OWNER);
				setState(826);
				match(TO);
				setState(830);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(827);
					((Alter_event_trigger_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(828);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(829);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(832);
				match(ALTER);
				setState(833);
				match(EVENT);
				setState(834);
				match(TRIGGER);
				setState(835);
				((Alter_event_trigger_stmtContext)_localctx).name = identifier(0);
				setState(836);
				match(RENAME);
				setState(837);
				match(TO);
				setState(838);
				((Alter_event_trigger_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_extension_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_version;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_stmtContext alter_extension_stmt() throws RecognitionException {
		Alter_extension_stmtContext _localctx = new Alter_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_extension_stmt);
		int _la;
		try {
			setState(857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(842);
				match(ALTER);
				setState(843);
				match(EXTENSION);
				setState(844);
				((Alter_extension_stmtContext)_localctx).name = identifier(0);
				setState(845);
				match(UPDATE);
				setState(848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(846);
					match(TO);
					setState(847);
					((Alter_extension_stmtContext)_localctx).new_version = identifier(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(850);
				match(ALTER);
				setState(851);
				match(EXTENSION);
				setState(852);
				((Alter_extension_stmtContext)_localctx).name = identifier(0);
				setState(853);
				match(SET);
				setState(854);
				match(SCHEMA);
				setState(855);
				((Alter_extension_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_data_wrapper_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_data_wrapper_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() throws RecognitionException {
		Alter_foreign_data_wrapper_stmtContext _localctx = new Alter_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_foreign_data_wrapper_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(859);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_actionContext extends ParserRuleContext {
		public Column_nameContext column_name_;
		public Data_typeContext data_type_;
		public IdentifierContext collation;
		public Column_constraintsContext column_constraints_;
		public Option_listContext attribute_values;
		public Identifier_listContext attributes;
		public Todo_fill_inContext constraint_name;
		public Todo_fill_inContext trigger_name;
		public IdentifierContext parent_table;
		public Role_nameContext new_owner;
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_constraintsContext column_constraints() {
			return getRuleContext(Column_constraintsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSQLParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(PostgreSQLParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(PostgreSQLParser.MAIN, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(PostgreSQLParser.VALIDATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(PostgreSQLParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(PostgreSQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Alter_foreign_table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_table_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_table_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_table_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_table_actionContext alter_foreign_table_action() throws RecognitionException {
		Alter_foreign_table_actionContext _localctx = new Alter_foreign_table_actionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_foreign_table_action);
		int _la;
		try {
			setState(1033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(861);
				match(ADD);
				setState(863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(862);
					match(COLUMN);
					}
				}

				setState(865);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(866);
				((Alter_foreign_table_actionContext)_localctx).data_type_ = data_type();
				setState(869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(867);
					match(COLLATE);
					setState(868);
					((Alter_foreign_table_actionContext)_localctx).collation = identifier(0);
					}
				}

				setState(872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(871);
					((Alter_foreign_table_actionContext)_localctx).column_constraints_ = column_constraints();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(874);
				match(DROP);
				setState(876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(875);
					match(COLUMN);
					}
				}

				setState(880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(878);
					match(IF);
					setState(879);
					match(EXISTS);
					}
				}

				setState(882);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(883);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(886);
				match(ALTER);
				setState(888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(887);
					match(COLUMN);
					}
				}

				setState(890);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(891);
					match(SET);
					setState(892);
					match(DATA);
					}
				}

				setState(895);
				match(TYPE);
				setState(896);
				((Alter_foreign_table_actionContext)_localctx).data_type_ = data_type();
				setState(899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(897);
					match(COLLATE);
					setState(898);
					((Alter_foreign_table_actionContext)_localctx).collation = identifier(0);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(901);
				match(ALTER);
				setState(903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(902);
					match(COLUMN);
					}
				}

				setState(905);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(906);
				match(SET);
				setState(907);
				match(DEFAULT);
				setState(908);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(910);
				match(ALTER);
				setState(912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(911);
					match(COLUMN);
					}
				}

				setState(914);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(915);
				match(DROP);
				setState(916);
				match(DEFAULT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(918);
				match(ALTER);
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(919);
					match(COLUMN);
					}
				}

				setState(922);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(923);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(924);
				match(NOT);
				setState(925);
				match(NULL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(927);
				match(ALTER);
				setState(929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(928);
					match(COLUMN);
					}
				}

				setState(931);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(932);
				match(SET);
				setState(933);
				match(STATISTICS);
				setState(934);
				match(INTEGER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(936);
				match(ALTER);
				setState(938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(937);
					match(COLUMN);
					}
				}

				setState(940);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(941);
				match(SET);
				setState(942);
				match(OPEN_PAREN);
				setState(943);
				((Alter_foreign_table_actionContext)_localctx).attribute_values = option_list();
				setState(944);
				match(CLOSE_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(946);
				match(ALTER);
				setState(948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(947);
					match(COLUMN);
					}
				}

				setState(950);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(951);
				match(RESET);
				setState(952);
				match(OPEN_PAREN);
				setState(953);
				((Alter_foreign_table_actionContext)_localctx).attributes = identifier_list();
				setState(954);
				match(CLOSE_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(956);
				match(ALTER);
				setState(958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(957);
					match(COLUMN);
					}
				}

				setState(960);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(961);
				match(SET);
				setState(962);
				match(STORAGE);
				setState(963);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==EXTERNAL || _la==MAIN || _la==PLAIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(965);
				match(ALTER);
				setState(967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(966);
					match(COLUMN);
					}
				}

				setState(969);
				((Alter_foreign_table_actionContext)_localctx).column_name_ = column_name();
				setState(970);
				match(OPTIONS);
				{
				setState(972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SET) {
					{
					setState(971);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(974);
				match(ADD);
				setState(975);
				table_constraint();
				setState(978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(976);
					match(NOT);
					setState(977);
					match(VALID);
					}
				}

				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(980);
				match(VALIDATE);
				setState(981);
				match(CONSTRAINT);
				setState(982);
				((Alter_foreign_table_actionContext)_localctx).constraint_name = todo_fill_in();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(983);
				match(DROP);
				setState(984);
				match(CONSTRAINT);
				setState(987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(985);
					match(IF);
					setState(986);
					match(EXISTS);
					}
					break;
				}
				setState(989);
				((Alter_foreign_table_actionContext)_localctx).constraint_name = todo_fill_in();
				setState(991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(990);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(993);
				match(DISABLE);
				setState(994);
				match(TRIGGER);
				setState(998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(995);
					((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
					}
					break;
				case 2:
					{
					setState(996);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(997);
					match(USER);
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1000);
				match(ENABLE);
				setState(1001);
				match(TRIGGER);
				setState(1005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(1002);
					((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
					}
					break;
				case 2:
					{
					setState(1003);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(1004);
					match(USER);
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1007);
				match(ENABLE);
				setState(1008);
				match(REPLICA);
				setState(1009);
				match(TRIGGER);
				setState(1010);
				((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1011);
				match(ENABLE);
				setState(1012);
				match(ALWAYS);
				setState(1013);
				match(TRIGGER);
				setState(1014);
				((Alter_foreign_table_actionContext)_localctx).trigger_name = todo_fill_in();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1015);
				match(SET);
				setState(1016);
				match(WITH);
				setState(1017);
				match(OIDS);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1018);
				match(SET);
				setState(1019);
				match(WITHOUT);
				setState(1020);
				match(OIDS);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1021);
				match(INHERIT);
				setState(1022);
				((Alter_foreign_table_actionContext)_localctx).parent_table = identifier(0);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1023);
				match(NO);
				setState(1024);
				match(INHERIT);
				setState(1025);
				((Alter_foreign_table_actionContext)_localctx).parent_table = identifier(0);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1026);
				match(OWNER);
				setState(1027);
				match(TO);
				setState(1028);
				((Alter_foreign_table_actionContext)_localctx).new_owner = role_name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1029);
				match(OPTIONS);
				{
				setState(1031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SET) {
					{
					setState(1030);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_action_listContext extends ParserRuleContext {
		public List<Alter_foreign_table_actionContext> alter_foreign_table_action() {
			return getRuleContexts(Alter_foreign_table_actionContext.class);
		}
		public Alter_foreign_table_actionContext alter_foreign_table_action(int i) {
			return getRuleContext(Alter_foreign_table_actionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Alter_foreign_table_action_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_action_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_table_action_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_table_action_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_table_action_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_table_action_listContext alter_foreign_table_action_list() throws RecognitionException {
		Alter_foreign_table_action_listContext _localctx = new Alter_foreign_table_action_listContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_foreign_table_action_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1035);
			alter_foreign_table_action();
			setState(1040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1036);
				match(COMMA);
				setState(1037);
				alter_foreign_table_action();
				}
				}
				setState(1042);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_foreign_table_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Alter_foreign_table_action_listContext actions;
		public Column_nameContext column_name_;
		public IdentifierContext new_column_name;
		public IdentifierContext new_name;
		public IdentifierContext new_schama;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Alter_foreign_table_action_listContext alter_foreign_table_action_list() {
			return getRuleContext(Alter_foreign_table_action_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_table_stmtContext alter_foreign_table_stmt() throws RecognitionException {
		Alter_foreign_table_stmtContext _localctx = new Alter_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_foreign_table_stmt);
		int _la;
		try {
			setState(1105);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1043);
				match(ALTER);
				setState(1044);
				match(FOREIGN);
				setState(1045);
				match(TABLE);
				setState(1048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1046);
					match(IF);
					setState(1047);
					match(EXISTS);
					}
				}

				setState(1051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1050);
					match(ONLY);
					}
				}

				setState(1053);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(1054);
					match(STAR);
					}
				}

				setState(1057);
				((Alter_foreign_table_stmtContext)_localctx).actions = alter_foreign_table_action_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1059);
				match(ALTER);
				setState(1060);
				match(FOREIGN);
				setState(1061);
				match(TABLE);
				setState(1064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1062);
					match(IF);
					setState(1063);
					match(EXISTS);
					}
				}

				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1066);
					match(ONLY);
					}
				}

				setState(1069);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(1070);
					match(STAR);
					}
				}

				setState(1073);
				match(RENAME);
				setState(1075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1074);
					match(COLUMN);
					}
				}

				setState(1077);
				((Alter_foreign_table_stmtContext)_localctx).column_name_ = column_name();
				setState(1078);
				match(TO);
				setState(1079);
				((Alter_foreign_table_stmtContext)_localctx).new_column_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1081);
				match(ALTER);
				setState(1082);
				match(FOREIGN);
				setState(1083);
				match(TABLE);
				setState(1086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1084);
					match(IF);
					setState(1085);
					match(EXISTS);
					}
				}

				setState(1088);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1089);
				match(RENAME);
				setState(1090);
				match(TO);
				setState(1091);
				((Alter_foreign_table_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1093);
				match(ALTER);
				setState(1094);
				match(FOREIGN);
				setState(1095);
				match(TABLE);
				setState(1098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1096);
					match(IF);
					setState(1097);
					match(EXISTS);
					}
				}

				setState(1100);
				((Alter_foreign_table_stmtContext)_localctx).name = identifier(0);
				setState(1101);
				match(SET);
				setState(1102);
				match(SCHEMA);
				setState(1103);
				((Alter_foreign_table_stmtContext)_localctx).new_schama = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_function_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_stmtContext alter_function_stmt() throws RecognitionException {
		Alter_function_stmtContext _localctx = new Alter_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_function_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1107);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_group_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public Identifier_listContext users;
		public IdentifierContext group_name;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Alter_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_group_stmtContext alter_group_stmt() throws RecognitionException {
		Alter_group_stmtContext _localctx = new Alter_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_group_stmt);
		try {
			setState(1130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1109);
				match(ALTER);
				setState(1110);
				match(GROUP);
				setState(1111);
				((Alter_group_stmtContext)_localctx).role = role_name();
				setState(1112);
				match(ADD);
				setState(1113);
				match(USER);
				setState(1114);
				((Alter_group_stmtContext)_localctx).users = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1116);
				match(ALTER);
				setState(1117);
				match(GROUP);
				setState(1118);
				((Alter_group_stmtContext)_localctx).role = role_name();
				setState(1119);
				match(DROP);
				setState(1120);
				match(USER);
				setState(1121);
				((Alter_group_stmtContext)_localctx).users = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1123);
				match(ALTER);
				setState(1124);
				match(GROUP);
				setState(1125);
				((Alter_group_stmtContext)_localctx).group_name = identifier(0);
				setState(1126);
				match(RENAME);
				setState(1127);
				match(TO);
				setState(1128);
				((Alter_group_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_index_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext tablespace_name;
		public IdentifierContext extension_name;
		public Identifier_listContext roles;
		public IdentifierContext new_tablespace;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(PostgreSQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(PostgreSQLParser.TABLESPACE, i);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public Alter_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_index_stmtContext alter_index_stmt() throws RecognitionException {
		Alter_index_stmtContext _localctx = new Alter_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_index_stmt);
		int _la;
		try {
			setState(1202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1132);
				match(ALTER);
				setState(1133);
				match(INDEX);
				setState(1136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1134);
					match(IF);
					setState(1135);
					match(EXISTS);
					}
				}

				setState(1138);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1139);
				match(RENAME);
				setState(1140);
				match(TO);
				setState(1141);
				((Alter_index_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1143);
				match(ALTER);
				setState(1144);
				match(INDEX);
				setState(1147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1145);
					match(IF);
					setState(1146);
					match(EXISTS);
					}
				}

				setState(1149);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1150);
				match(SET);
				setState(1151);
				match(TABLESPACE);
				setState(1152);
				((Alter_index_stmtContext)_localctx).tablespace_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1154);
				match(ALTER);
				setState(1155);
				match(INDEX);
				setState(1156);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1157);
				match(DEPENDS);
				setState(1158);
				match(ON);
				setState(1159);
				match(EXTENSION);
				setState(1160);
				((Alter_index_stmtContext)_localctx).extension_name = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1162);
				match(ALTER);
				setState(1163);
				match(INDEX);
				setState(1166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1164);
					match(IF);
					setState(1165);
					match(EXISTS);
					}
				}

				setState(1168);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1169);
				match(SET);
				setState(1170);
				match(OPEN_PAREN);
				setState(1171);
				option_list();
				setState(1172);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1174);
				match(ALTER);
				setState(1175);
				match(INDEX);
				setState(1178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1176);
					match(IF);
					setState(1177);
					match(EXISTS);
					}
				}

				setState(1180);
				match(RESET);
				setState(1181);
				match(OPEN_PAREN);
				setState(1182);
				identifier_list();
				setState(1183);
				match(CLOSE_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1185);
				match(ALTER);
				setState(1186);
				match(INDEX);
				setState(1187);
				match(ALL);
				setState(1188);
				match(IN);
				setState(1189);
				match(TABLESPACE);
				setState(1190);
				((Alter_index_stmtContext)_localctx).name = identifier(0);
				setState(1194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1191);
					match(OWNED);
					setState(1192);
					match(BY);
					setState(1193);
					((Alter_index_stmtContext)_localctx).roles = identifier_list();
					}
				}

				setState(1196);
				match(SET);
				setState(1197);
				match(TABLESPACE);
				setState(1198);
				((Alter_index_stmtContext)_localctx).new_tablespace = identifier(0);
				setState(1200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1199);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_language_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public Alter_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_language_stmtContext alter_language_stmt() throws RecognitionException {
		Alter_language_stmtContext _localctx = new Alter_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_language_stmt);
		int _la;
		try {
			setState(1227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1204);
				match(ALTER);
				setState(1206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1205);
					match(PROCEDURAL);
					}
				}

				setState(1208);
				match(LANGUAGE);
				setState(1209);
				((Alter_language_stmtContext)_localctx).name = identifier(0);
				setState(1210);
				match(RENAME);
				setState(1211);
				match(TO);
				setState(1212);
				((Alter_language_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1214);
				match(ALTER);
				setState(1216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1215);
					match(PROCEDURAL);
					}
				}

				setState(1218);
				match(LANGUAGE);
				setState(1219);
				((Alter_language_stmtContext)_localctx).name = identifier(0);
				setState(1220);
				match(OWNER);
				setState(1221);
				match(TO);
				setState(1225);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1222);
					((Alter_language_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1223);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1224);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_large_object_stmtContext extends ParserRuleContext {
		public Token large_object_oid;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLParser.OBJECT, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_large_object_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_large_object_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_large_object_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_large_object_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_large_object_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_large_object_stmtContext alter_large_object_stmt() throws RecognitionException {
		Alter_large_object_stmtContext _localctx = new Alter_large_object_stmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_large_object_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1229);
			match(ALTER);
			setState(1230);
			match(LARGE);
			setState(1231);
			match(OBJECT);
			setState(1232);
			((Alter_large_object_stmtContext)_localctx).large_object_oid = match(INTEGER_LITERAL);
			setState(1233);
			match(OWNER);
			setState(1234);
			match(TO);
			setState(1238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(1235);
				((Alter_large_object_stmtContext)_localctx).new_owner = identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(1236);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(1237);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_materialize_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_materialize_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_materialize_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_materialize_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_materialize_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_materialize_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_materialize_view_stmtContext alter_materialize_view_stmt() throws RecognitionException {
		Alter_materialize_view_stmtContext _localctx = new Alter_materialize_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_materialize_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1240);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_stmtContext alter_operator_stmt() throws RecognitionException {
		Alter_operator_stmtContext _localctx = new Alter_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1242);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_class_stmtContext alter_operator_class_stmt() throws RecognitionException {
		Alter_operator_class_stmtContext _localctx = new Alter_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_operator_class_stmt);
		try {
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1244);
				match(ALTER);
				setState(1245);
				match(OPERATOR);
				setState(1246);
				match(CLASS);
				setState(1247);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1248);
				match(USING);
				setState(1249);
				index_method();
				setState(1250);
				match(RENAME);
				setState(1251);
				match(TO);
				setState(1252);
				((Alter_operator_class_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1254);
				match(ALTER);
				setState(1255);
				match(OPERATOR);
				setState(1256);
				match(CLASS);
				setState(1257);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1258);
				match(USING);
				setState(1259);
				index_method();
				setState(1260);
				match(OWNER);
				setState(1261);
				match(TO);
				setState(1265);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1262);
					((Alter_operator_class_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1263);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1264);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1267);
				match(ALTER);
				setState(1268);
				match(OPERATOR);
				setState(1269);
				match(CLASS);
				setState(1270);
				((Alter_operator_class_stmtContext)_localctx).name = identifier(0);
				setState(1271);
				match(USING);
				setState(1272);
				index_method();
				setState(1273);
				match(SET);
				setState(1274);
				match(SCHEMA);
				setState(1275);
				((Alter_operator_class_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_operator_family_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_family_stmtContext alter_operator_family_stmt() throws RecognitionException {
		Alter_operator_family_stmtContext _localctx = new Alter_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public IdentifierContext new_name;
		public Role_name_listContext roles;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public Role_name_listContext role_name_list() {
			return getRuleContext(Role_name_listContext.class,0);
		}
		public Alter_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_policy_stmtContext alter_policy_stmt() throws RecognitionException {
		Alter_policy_stmtContext _localctx = new Alter_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_policy_stmt);
		int _la;
		try {
			setState(1308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1281);
				match(ALTER);
				setState(1282);
				match(POLICY);
				setState(1283);
				((Alter_policy_stmtContext)_localctx).name = identifier(0);
				setState(1284);
				match(ON);
				setState(1285);
				((Alter_policy_stmtContext)_localctx).table_name = identifier(0);
				setState(1286);
				match(RENAME);
				setState(1287);
				match(TO);
				setState(1288);
				((Alter_policy_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1290);
				match(ALTER);
				setState(1291);
				match(POLICY);
				setState(1292);
				((Alter_policy_stmtContext)_localctx).name = identifier(0);
				setState(1293);
				match(ON);
				setState(1294);
				((Alter_policy_stmtContext)_localctx).table_name = identifier(0);
				setState(1297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(1295);
					match(TO);
					setState(1296);
					((Alter_policy_stmtContext)_localctx).roles = role_name_list();
					}
				}

				setState(1301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1299);
					match(USING);
					setState(1300);
					predicate(0);
					}
				}

				setState(1306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1303);
					match(WITH);
					setState(1304);
					match(CHECK);
					setState(1305);
					predicate(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_publication_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Identifier_listContext table_names;
		public Role_nameContext new_owner;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Alter_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_publication_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_publication_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_publication_stmtContext alter_publication_stmt() throws RecognitionException {
		Alter_publication_stmtContext _localctx = new Alter_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_publication_stmt);
		int _la;
		try {
			setState(1362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1310);
				match(ALTER);
				setState(1311);
				match(PUBLICATION);
				setState(1312);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1313);
				match(ADD);
				setState(1314);
				match(TABLE);
				setState(1316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1315);
					match(ONLY);
					}
				}

				setState(1318);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1320);
				match(ALTER);
				setState(1321);
				match(PUBLICATION);
				setState(1322);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1323);
				match(SET);
				setState(1324);
				match(TABLE);
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1325);
					match(ONLY);
					}
				}

				setState(1328);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1330);
				match(ALTER);
				setState(1331);
				match(PUBLICATION);
				setState(1332);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1333);
				match(DROP);
				setState(1334);
				match(TABLE);
				setState(1336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(1335);
					match(ONLY);
					}
				}

				setState(1338);
				((Alter_publication_stmtContext)_localctx).table_names = identifier_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1340);
				match(ALTER);
				setState(1341);
				match(PUBLICATION);
				setState(1342);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1343);
				match(SET);
				setState(1344);
				match(OPEN_PAREN);
				setState(1345);
				option_list();
				setState(1346);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1348);
				match(ALTER);
				setState(1349);
				match(PUBLICATION);
				setState(1350);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1351);
				match(OWNER);
				setState(1352);
				match(TO);
				setState(1353);
				((Alter_publication_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1355);
				match(ALTER);
				setState(1356);
				match(PUBLICATION);
				setState(1357);
				((Alter_publication_stmtContext)_localctx).name = identifier(0);
				setState(1358);
				match(RENAME);
				setState(1359);
				match(TO);
				setState(1360);
				((Alter_publication_stmtContext)_localctx).new_name = name_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_role_optionsContext extends ParserRuleContext {
		public Token connlimit;
		public TerminalNode SUPERUSER() { return getToken(PostgreSQLParser.SUPERUSER, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(PostgreSQLParser.NOSUPERUSER, 0); }
		public TerminalNode CREATEDB() { return getToken(PostgreSQLParser.CREATEDB, 0); }
		public TerminalNode NOCREATEDB() { return getToken(PostgreSQLParser.NOCREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(PostgreSQLParser.CREATEROLE, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(PostgreSQLParser.NOCREATEROLE, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode NOINHERIT() { return getToken(PostgreSQLParser.NOINHERIT, 0); }
		public TerminalNode LOGIN() { return getToken(PostgreSQLParser.LOGIN, 0); }
		public TerminalNode NOLOGIN() { return getToken(PostgreSQLParser.NOLOGIN, 0); }
		public TerminalNode REPLICATION() { return getToken(PostgreSQLParser.REPLICATION, 0); }
		public TerminalNode NOREPLICATION() { return getToken(PostgreSQLParser.NOREPLICATION, 0); }
		public TerminalNode BYPASSRLS() { return getToken(PostgreSQLParser.BYPASSRLS, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(PostgreSQLParser.NOBYPASSRLS, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public Alter_role_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_role_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_role_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_role_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_optionsContext alter_role_options() throws RecognitionException {
		Alter_role_optionsContext _localctx = new Alter_role_optionsContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_role_options);
		int _la;
		try {
			setState(1389);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364);
				match(SUPERUSER);
				}
				break;
			case NOSUPERUSER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365);
				match(NOSUPERUSER);
				}
				break;
			case CREATEDB:
				enterOuterAlt(_localctx, 3);
				{
				setState(1366);
				match(CREATEDB);
				}
				break;
			case NOCREATEDB:
				enterOuterAlt(_localctx, 4);
				{
				setState(1367);
				match(NOCREATEDB);
				}
				break;
			case CREATEROLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1368);
				match(CREATEROLE);
				}
				break;
			case NOCREATEROLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1369);
				match(NOCREATEROLE);
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1370);
				match(INHERIT);
				}
				break;
			case NOINHERIT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1371);
				match(NOINHERIT);
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(1372);
				match(LOGIN);
				}
				break;
			case NOLOGIN:
				enterOuterAlt(_localctx, 10);
				{
				setState(1373);
				match(NOLOGIN);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 11);
				{
				setState(1374);
				match(REPLICATION);
				}
				break;
			case NOREPLICATION:
				enterOuterAlt(_localctx, 12);
				{
				setState(1375);
				match(NOREPLICATION);
				}
				break;
			case BYPASSRLS:
				enterOuterAlt(_localctx, 13);
				{
				setState(1376);
				match(BYPASSRLS);
				}
				break;
			case NOBYPASSRLS:
				enterOuterAlt(_localctx, 14);
				{
				setState(1377);
				match(NOBYPASSRLS);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 15);
				{
				setState(1378);
				match(CONNECTION);
				setState(1379);
				match(LIMIT);
				setState(1380);
				((Alter_role_optionsContext)_localctx).connlimit = match(INTEGER);
				}
				break;
			case ENCRYPTED:
			case PASSWORD:
				enterOuterAlt(_localctx, 16);
				{
				setState(1382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTED) {
					{
					setState(1381);
					match(ENCRYPTED);
					}
				}

				setState(1384);
				match(PASSWORD);
				setState(1385);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 17);
				{
				setState(1386);
				match(VALID);
				setState(1387);
				match(UNTIL);
				setState(1388);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public Alter_role_optionsContext options;
		public Name_Context name;
		public Name_Context new_name;
		public Name_Context database_name;
		public IdentifierContext configuration_parameter;
		public Param_valueContext value;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<Alter_role_optionsContext> alter_role_options() {
			return getRuleContexts(Alter_role_optionsContext.class);
		}
		public Alter_role_optionsContext alter_role_options(int i) {
			return getRuleContext(Alter_role_optionsContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public List<TerminalNode> ALL() { return getTokens(PostgreSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PostgreSQLParser.ALL, i);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Alter_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_stmtContext alter_role_stmt() throws RecognitionException {
		Alter_role_stmtContext _localctx = new Alter_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_role_stmt);
		int _la;
		try {
			setState(1469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1391);
				match(ALTER);
				setState(1392);
				match(ROLE);
				setState(1393);
				((Alter_role_stmtContext)_localctx).role = role_name();
				setState(1395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1394);
					match(WITH);
					}
				}

				setState(1398); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1397);
					((Alter_role_stmtContext)_localctx).options = alter_role_options();
					}
					}
					setState(1400); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==NOCREATEDB || _la==PASSWORD || (((_la - 627)) & ~0x3f) == 0 && ((1L << (_la - 627)) & 1099243192321L) != 0 );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1402);
				match(ALTER);
				setState(1403);
				match(ROLE);
				setState(1404);
				((Alter_role_stmtContext)_localctx).name = name_();
				setState(1405);
				match(RENAME);
				setState(1406);
				match(TO);
				setState(1407);
				((Alter_role_stmtContext)_localctx).new_name = name_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1409);
				match(ALTER);
				setState(1410);
				match(ROLE);
				setState(1413);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1411);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1412);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1415);
					match(IN);
					setState(1416);
					match(DATABASE);
					setState(1417);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1420);
				match(SET);
				setState(1421);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(1422);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1425);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FALSE:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case ON:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case YES:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1423);
					((Alter_role_stmtContext)_localctx).value = param_value();
					}
					break;
				case DEFAULT:
					{
					setState(1424);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1427);
				match(ALTER);
				setState(1428);
				match(ROLE);
				setState(1431);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1429);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1430);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1433);
					match(IN);
					setState(1434);
					match(DATABASE);
					setState(1435);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1438);
				match(SET);
				setState(1439);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(1440);
				match(FROM);
				setState(1441);
				match(CURRENT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1443);
				match(ALTER);
				setState(1444);
				match(ROLE);
				setState(1447);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1445);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1446);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1449);
					match(IN);
					setState(1450);
					match(DATABASE);
					setState(1451);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1454);
				match(RESET);
				setState(1455);
				((Alter_role_stmtContext)_localctx).configuration_parameter = identifier(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1456);
				match(ALTER);
				setState(1457);
				match(ROLE);
				setState(1460);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURRENT_USER:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SESSION_USER:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1458);
					((Alter_role_stmtContext)_localctx).role = role_name();
					}
					break;
				case ALL:
					{
					setState(1459);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1462);
					match(IN);
					setState(1463);
					match(DATABASE);
					setState(1464);
					((Alter_role_stmtContext)_localctx).database_name = name_();
					}
				}

				setState(1467);
				match(RESET);
				setState(1468);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext table_name;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alter_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_rule_stmtContext alter_rule_stmt() throws RecognitionException {
		Alter_rule_stmtContext _localctx = new Alter_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_rule_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			match(ALTER);
			setState(1472);
			match(RULE);
			setState(1473);
			((Alter_rule_stmtContext)_localctx).name = name_();
			setState(1474);
			match(ON);
			setState(1475);
			((Alter_rule_stmtContext)_localctx).table_name = identifier(0);
			setState(1476);
			match(RENAME);
			setState(1477);
			match(TO);
			setState(1478);
			((Alter_rule_stmtContext)_localctx).new_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_schema_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public Alter_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_stmtContext alter_schema_stmt() throws RecognitionException {
		Alter_schema_stmtContext _localctx = new Alter_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_schema_stmt);
		try {
			setState(1497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1480);
				match(ALTER);
				setState(1481);
				match(SCHEMA);
				setState(1482);
				((Alter_schema_stmtContext)_localctx).name = identifier(0);
				setState(1483);
				match(RENAME);
				setState(1484);
				match(TO);
				setState(1485);
				((Alter_schema_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1487);
				match(ALTER);
				setState(1488);
				match(SCHEMA);
				setState(1489);
				((Alter_schema_stmtContext)_localctx).name = identifier(0);
				setState(1490);
				match(OWNER);
				setState(1491);
				match(TO);
				setState(1495);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1492);
					((Alter_schema_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1493);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1494);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequence_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequence_stmtContext alter_sequence_stmt() throws RecognitionException {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			match(ALTER);
			setState(1500);
			match(SEQUENCE);
			setState(1503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1501);
				match(IF);
				setState(1502);
				match(EXISTS);
				}
			}

			setState(1505);
			((Alter_sequence_stmtContext)_localctx).name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_server_options_listContext extends ParserRuleContext {
		public IdentifierContext option;
		public Param_valueContext value;
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<TerminalNode> ADD() { return getTokens(PostgreSQLParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(PostgreSQLParser.ADD, i);
		}
		public List<TerminalNode> SET() { return getTokens(PostgreSQLParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PostgreSQLParser.SET, i);
		}
		public List<TerminalNode> DROP() { return getTokens(PostgreSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(PostgreSQLParser.DROP, i);
		}
		public List<Param_valueContext> param_value() {
			return getRuleContexts(Param_valueContext.class);
		}
		public Param_valueContext param_value(int i) {
			return getRuleContext(Param_valueContext.class,i);
		}
		public Alter_server_options_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_options_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_server_options_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_server_options_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_server_options_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_options_listContext alter_server_options_list() throws RecognitionException {
		Alter_server_options_listContext _localctx = new Alter_server_options_listContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_server_options_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1507);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1510);
			((Alter_server_options_listContext)_localctx).option = identifier(0);
			setState(1512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 59L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3341673120384679935L) != 0) {
				{
				setState(1511);
				((Alter_server_options_listContext)_localctx).value = param_value();
				}
			}

			}
			setState(1524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1514);
				match(COMMA);
				setState(1516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
				case 1:
					{
					setState(1515);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1518);
				((Alter_server_options_listContext)_localctx).option = identifier(0);
				setState(1520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 59L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3341673120384679935L) != 0) {
					{
					setState(1519);
					((Alter_server_options_listContext)_localctx).value = param_value();
					}
				}

				}
				}
				setState(1526);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_server_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Role_nameContext new_owner;
		public Name_Context new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(PostgreSQLParser.VERSION, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_server_options_listContext alter_server_options_list() {
			return getRuleContext(Alter_server_options_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Alter_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_stmtContext alter_server_stmt() throws RecognitionException {
		Alter_server_stmtContext _localctx = new Alter_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_server_stmt);
		int _la;
		try {
			setState(1557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1527);
				match(ALTER);
				setState(1528);
				match(SERVER);
				setState(1529);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					{
					setState(1530);
					match(VERSION);
					setState(1531);
					match(SINGLEQ_STRING_LITERAL);
					}
					}
					break;
				case 2:
					{
					{
					setState(1534);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VERSION) {
						{
						setState(1532);
						match(VERSION);
						setState(1533);
						match(SINGLEQ_STRING_LITERAL);
						}
					}

					{
					setState(1536);
					match(OPTIONS);
					setState(1537);
					match(OPEN_PAREN);
					setState(1538);
					alter_server_options_list();
					setState(1539);
					match(CLOSE_PAREN);
					}
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1543);
				match(ALTER);
				setState(1544);
				match(SERVER);
				setState(1545);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1546);
				match(OWNER);
				setState(1547);
				match(TO);
				setState(1548);
				((Alter_server_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1550);
				match(ALTER);
				setState(1551);
				match(SERVER);
				setState(1552);
				((Alter_server_stmtContext)_localctx).name = identifier(0);
				setState(1553);
				match(RENAME);
				setState(1554);
				match(TO);
				setState(1555);
				((Alter_server_stmtContext)_localctx).new_name = name_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_statistics_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_owner;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_statistics_stmtContext alter_statistics_stmt() throws RecognitionException {
		Alter_statistics_stmtContext _localctx = new Alter_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_statistics_stmt);
		try {
			setState(1583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1559);
				match(ALTER);
				setState(1560);
				match(STATISTICS);
				setState(1561);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1562);
				match(OWNER);
				setState(1563);
				match(TO);
				setState(1567);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1564);
					((Alter_statistics_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1565);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1566);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1569);
				match(ALTER);
				setState(1570);
				match(STATISTICS);
				setState(1571);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1572);
				match(RENAME);
				setState(1573);
				match(TO);
				setState(1574);
				((Alter_statistics_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1576);
				match(ALTER);
				setState(1577);
				match(STATISTICS);
				setState(1578);
				((Alter_statistics_stmtContext)_localctx).name = identifier(0);
				setState(1579);
				match(SET);
				setState(1580);
				match(SCHEMA);
				setState(1581);
				((Alter_statistics_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_subscription_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Param_valueContext conninfo;
		public Name_listContext publication_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode ENABLE() { return getToken(PostgreSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PostgreSQLParser.DISABLE, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public Alter_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_subscription_stmtContext alter_subscription_stmt() throws RecognitionException {
		Alter_subscription_stmtContext _localctx = new Alter_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_subscription_stmt);
		int _la;
		try {
			setState(1648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1585);
				match(ALTER);
				setState(1586);
				match(SUBSCRIPTION);
				setState(1587);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1588);
				match(CONNECTION);
				setState(1589);
				((Alter_subscription_stmtContext)_localctx).conninfo = param_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1591);
				match(ALTER);
				setState(1592);
				match(SUBSCRIPTION);
				setState(1593);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1594);
				match(SET);
				setState(1595);
				match(PUBLICATION);
				setState(1596);
				((Alter_subscription_stmtContext)_localctx).publication_name = name_list();
				setState(1602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1597);
					match(WITH);
					setState(1598);
					match(OPEN_PAREN);
					setState(1599);
					option_list();
					setState(1600);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1604);
				match(ALTER);
				setState(1605);
				match(SUBSCRIPTION);
				setState(1606);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1607);
				match(REFRESH);
				setState(1608);
				match(PUBLICATION);
				setState(1614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1609);
					match(WITH);
					setState(1610);
					match(OPEN_PAREN);
					setState(1611);
					option_list();
					setState(1612);
					match(CLOSE_PAREN);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1616);
				match(ALTER);
				setState(1617);
				match(SUBSCRIPTION);
				setState(1618);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1619);
				match(ENABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1621);
				match(ALTER);
				setState(1622);
				match(SUBSCRIPTION);
				setState(1623);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1624);
				match(DISABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1626);
				match(ALTER);
				setState(1627);
				match(SUBSCRIPTION);
				setState(1628);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1629);
				match(SET);
				setState(1630);
				match(OPEN_PAREN);
				setState(1631);
				option_list();
				setState(1632);
				match(CLOSE_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1634);
				match(ALTER);
				setState(1635);
				match(SUBSCRIPTION);
				setState(1636);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1637);
				match(OWNER);
				setState(1638);
				match(TO);
				setState(1639);
				((Alter_subscription_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1641);
				match(ALTER);
				setState(1642);
				match(SUBSCRIPTION);
				setState(1643);
				((Alter_subscription_stmtContext)_localctx).name = identifier(0);
				setState(1644);
				match(RENAME);
				setState(1645);
				match(TO);
				setState(1646);
				((Alter_subscription_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_system_stmtContext extends ParserRuleContext {
		public Token param;
		public Param_valueContext value;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PostgreSQLParser.IDENTIFIER, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Alter_system_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_system_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_system_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_system_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_system_stmtContext alter_system_stmt() throws RecognitionException {
		Alter_system_stmtContext _localctx = new Alter_system_stmtContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_system_stmt);
		int _la;
		try {
			setState(1664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1650);
				match(ALTER);
				setState(1651);
				match(SYSTEM);
				setState(1652);
				match(SET);
				setState(1653);
				((Alter_system_stmtContext)_localctx).param = match(IDENTIFIER);
				setState(1654);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1655);
				((Alter_system_stmtContext)_localctx).value = param_value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1656);
				match(ALTER);
				setState(1657);
				match(SYSTEM);
				setState(1658);
				match(RESET);
				setState(1659);
				((Alter_system_stmtContext)_localctx).param = match(IDENTIFIER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1660);
				match(ALTER);
				setState(1661);
				match(SYSTEM);
				setState(1662);
				match(RESET);
				setState(1663);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_stmtContext alter_table_stmt() throws RecognitionException {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1666);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tablespace_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Alter_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tablespace_stmtContext alter_tablespace_stmt() throws RecognitionException {
		Alter_tablespace_stmtContext _localctx = new Alter_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_tablespace_stmt);
		try {
			setState(1701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1668);
				match(ALTER);
				setState(1669);
				match(TABLESPACE);
				setState(1670);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1671);
				match(RENAME);
				setState(1672);
				match(TO);
				setState(1673);
				((Alter_tablespace_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1675);
				match(ALTER);
				setState(1676);
				match(TABLESPACE);
				setState(1677);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1678);
				match(OWNER);
				setState(1679);
				match(TO);
				setState(1683);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(1680);
					((Alter_tablespace_stmtContext)_localctx).new_owner = identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(1681);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(1682);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1685);
				match(ALTER);
				setState(1686);
				match(TABLESPACE);
				setState(1687);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1688);
				match(SET);
				setState(1689);
				match(OPEN_PAREN);
				setState(1690);
				option_list();
				setState(1691);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1693);
				match(ALTER);
				setState(1694);
				match(TABLESPACE);
				setState(1695);
				((Alter_tablespace_stmtContext)_localctx).name = identifier(0);
				setState(1696);
				match(RESET);
				setState(1697);
				match(OPEN_PAREN);
				setState(1698);
				identifier_list();
				setState(1699);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_config_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Identifier_listContext token_types;
		public Identifier_listContext dictionary_names;
		public IdentifierContext old_dictionary;
		public IdentifierContext new_dictionary;
		public IdentifierContext new_name;
		public Role_nameContext new_owner;
		public IdentifierContext new_schema;
		public List<TerminalNode> ALTER() { return getTokens(PostgreSQLParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(PostgreSQLParser.ALTER, i);
		}
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_config_stmtContext alter_text_search_config_stmt() throws RecognitionException {
		Alter_text_search_config_stmtContext _localctx = new Alter_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_text_search_config_stmt);
		int _la;
		try {
			setState(1794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1703);
				match(ALTER);
				setState(1704);
				match(TEXT);
				setState(1705);
				match(SEARCH);
				setState(1706);
				match(CONFIGURATION);
				setState(1707);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1708);
				match(ADD);
				setState(1709);
				match(MAPPING);
				setState(1710);
				match(FOR);
				setState(1711);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1712);
				match(WITH);
				setState(1713);
				((Alter_text_search_config_stmtContext)_localctx).dictionary_names = identifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1715);
				match(ALTER);
				setState(1716);
				match(TEXT);
				setState(1717);
				match(SEARCH);
				setState(1718);
				match(CONFIGURATION);
				setState(1719);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1720);
				match(ALTER);
				setState(1721);
				match(MAPPING);
				setState(1722);
				match(FOR);
				setState(1723);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1724);
				match(WITH);
				setState(1725);
				((Alter_text_search_config_stmtContext)_localctx).dictionary_names = identifier_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1727);
				match(ALTER);
				setState(1728);
				match(TEXT);
				setState(1729);
				match(SEARCH);
				setState(1730);
				match(CONFIGURATION);
				setState(1731);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1732);
				match(ALTER);
				setState(1733);
				match(MAPPING);
				setState(1734);
				match(REPLACE);
				setState(1735);
				((Alter_text_search_config_stmtContext)_localctx).old_dictionary = identifier(0);
				setState(1736);
				match(WITH);
				setState(1737);
				((Alter_text_search_config_stmtContext)_localctx).new_dictionary = identifier(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1739);
				match(ALTER);
				setState(1740);
				match(TEXT);
				setState(1741);
				match(SEARCH);
				setState(1742);
				match(CONFIGURATION);
				setState(1743);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1744);
				match(ALTER);
				setState(1745);
				match(MAPPING);
				setState(1746);
				match(FOR);
				setState(1747);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				setState(1748);
				match(REPLACE);
				setState(1749);
				((Alter_text_search_config_stmtContext)_localctx).old_dictionary = identifier(0);
				setState(1750);
				match(WITH);
				setState(1751);
				((Alter_text_search_config_stmtContext)_localctx).new_dictionary = identifier(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1753);
				match(ALTER);
				setState(1754);
				match(TEXT);
				setState(1755);
				match(SEARCH);
				setState(1756);
				match(CONFIGURATION);
				setState(1757);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1758);
				match(DROP);
				setState(1759);
				match(MAPPING);
				setState(1762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1760);
					match(IF);
					setState(1761);
					match(EXISTS);
					}
				}

				setState(1764);
				match(FOR);
				setState(1765);
				((Alter_text_search_config_stmtContext)_localctx).token_types = identifier_list();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1767);
				match(ALTER);
				setState(1768);
				match(TEXT);
				setState(1769);
				match(SEARCH);
				setState(1770);
				match(CONFIGURATION);
				setState(1771);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1772);
				match(RENAME);
				setState(1773);
				match(TO);
				setState(1774);
				((Alter_text_search_config_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1776);
				match(ALTER);
				setState(1777);
				match(TEXT);
				setState(1778);
				match(SEARCH);
				setState(1779);
				match(CONFIGURATION);
				setState(1780);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1781);
				match(OWNER);
				setState(1782);
				match(TO);
				setState(1783);
				((Alter_text_search_config_stmtContext)_localctx).new_owner = role_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1785);
				match(ALTER);
				setState(1786);
				match(TEXT);
				setState(1787);
				match(SEARCH);
				setState(1788);
				match(CONFIGURATION);
				setState(1789);
				((Alter_text_search_config_stmtContext)_localctx).name = identifier(0);
				setState(1790);
				match(SET);
				setState(1791);
				match(SCHEMA);
				setState(1792);
				((Alter_text_search_config_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() throws RecognitionException {
		Alter_text_search_dict_stmtContext _localctx = new Alter_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1796);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() throws RecognitionException {
		Alter_text_search_parser_stmtContext _localctx = new Alter_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_text_search_template_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_schema;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Alter_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_template_stmtContext alter_text_search_template_stmt() throws RecognitionException {
		Alter_text_search_template_stmtContext _localctx = new Alter_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_text_search_template_stmt);
		try {
			setState(1818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1800);
				match(ALTER);
				setState(1801);
				match(TEXT);
				setState(1802);
				match(SEARCH);
				setState(1803);
				match(TEMPLATE);
				setState(1804);
				((Alter_text_search_template_stmtContext)_localctx).name = identifier(0);
				setState(1805);
				match(RENAME);
				setState(1806);
				match(TO);
				setState(1807);
				((Alter_text_search_template_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1809);
				match(ALTER);
				setState(1810);
				match(TEXT);
				setState(1811);
				match(SEARCH);
				setState(1812);
				match(TEMPLATE);
				setState(1813);
				((Alter_text_search_template_stmtContext)_localctx).name = identifier(0);
				setState(1814);
				match(SET);
				setState(1815);
				match(SCHEMA);
				setState(1816);
				((Alter_text_search_template_stmtContext)_localctx).new_schema = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public IdentifierContext new_name;
		public IdentifierContext extension_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEPENDS() { return getToken(PostgreSQLParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public Alter_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_trigger_stmtContext alter_trigger_stmt() throws RecognitionException {
		Alter_trigger_stmtContext _localctx = new Alter_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_trigger_stmt);
		try {
			setState(1839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1820);
				match(ALTER);
				setState(1821);
				match(TRIGGER);
				setState(1822);
				((Alter_trigger_stmtContext)_localctx).name = identifier(0);
				setState(1823);
				match(ON);
				setState(1824);
				((Alter_trigger_stmtContext)_localctx).table_name = identifier(0);
				setState(1825);
				match(RENAME);
				setState(1826);
				match(TO);
				setState(1827);
				((Alter_trigger_stmtContext)_localctx).new_name = identifier(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1829);
				match(ALTER);
				setState(1830);
				match(TRIGGER);
				setState(1831);
				((Alter_trigger_stmtContext)_localctx).name = identifier(0);
				setState(1832);
				match(ON);
				setState(1833);
				((Alter_trigger_stmtContext)_localctx).table_name = identifier(0);
				setState(1834);
				match(DEPENDS);
				setState(1835);
				match(ON);
				setState(1836);
				match(EXTENSION);
				setState(1837);
				((Alter_trigger_stmtContext)_localctx).extension_name = identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_stmtContext alter_type_stmt() throws RecognitionException {
		Alter_type_stmtContext _localctx = new Alter_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1841);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_stmtContext alter_user_stmt() throws RecognitionException {
		Alter_user_stmtContext _localctx = new Alter_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alter_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1843);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_mapping_stmtContext extends ParserRuleContext {
		public Role_nameContext user;
		public IdentifierContext server_name;
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Alter_server_options_listContext alter_server_options_list() {
			return getRuleContext(Alter_server_options_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Alter_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_mapping_stmtContext alter_user_mapping_stmt() throws RecognitionException {
		Alter_user_mapping_stmtContext _localctx = new Alter_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			match(ALTER);
			setState(1846);
			match(USER);
			setState(1847);
			match(MAPPING);
			setState(1848);
			match(FOR);
			setState(1849);
			((Alter_user_mapping_stmtContext)_localctx).user = role_name();
			setState(1850);
			match(SERVER);
			setState(1851);
			((Alter_user_mapping_stmtContext)_localctx).server_name = identifier(0);
			setState(1852);
			match(OPTIONS);
			{
			setState(1853);
			match(OPEN_PAREN);
			setState(1854);
			alter_server_options_list();
			setState(1855);
			match(CLOSE_PAREN);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_view_stmtContext alter_view_stmt() throws RecognitionException {
		Alter_view_stmtContext _localctx = new Alter_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Analyze_stmtContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_stmtContext analyze_stmt() throws RecognitionException {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_analyze_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1859);
			match(ANALYZE);
			setState(1861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(1860);
				match(VERBOSE);
				}
			}

			setState(1863);
			table_name_();
			setState(1868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1864);
				match(OPEN_PAREN);
				setState(1865);
				name_list();
				setState(1866);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Close_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Close_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClose_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClose_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClose_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_stmtContext close_stmt() throws RecognitionException {
		Close_stmtContext _localctx = new Close_stmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_close_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_stmtContext cluster_stmt() throws RecognitionException {
		Cluster_stmtContext _localctx = new Cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_cluster_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1872);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Comment_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_stmtContext comment_stmt() throws RecognitionException {
		Comment_stmtContext _localctx = new Comment_stmtContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_comment_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommit_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommit_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_stmtContext commit_stmt() throws RecognitionException {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_commit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1876);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_prepared_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommit_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommit_prepared_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommit_prepared_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_prepared_stmtContext commit_prepared_stmt() throws RecognitionException {
		Commit_prepared_stmtContext _localctx = new Commit_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_commit_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1878);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Copy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_stmtContext copy_stmt() throws RecognitionException {
		Copy_stmtContext _localctx = new Copy_stmtContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_copy_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1880);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_stmtContext extends ParserRuleContext {
		public Create_access_method_stmtContext create_access_method_stmt() {
			return getRuleContext(Create_access_method_stmtContext.class,0);
		}
		public Create_aggregate_stmtContext create_aggregate_stmt() {
			return getRuleContext(Create_aggregate_stmtContext.class,0);
		}
		public Create_cast_stmtContext create_cast_stmt() {
			return getRuleContext(Create_cast_stmtContext.class,0);
		}
		public Create_collation_stmtContext create_collation_stmt() {
			return getRuleContext(Create_collation_stmtContext.class,0);
		}
		public Create_conversion_stmtContext create_conversion_stmt() {
			return getRuleContext(Create_conversion_stmtContext.class,0);
		}
		public Create_database_stmtContext create_database_stmt() {
			return getRuleContext(Create_database_stmtContext.class,0);
		}
		public Create_domain_stmtContext create_domain_stmt() {
			return getRuleContext(Create_domain_stmtContext.class,0);
		}
		public Create_event_trigger_stmtContext create_event_trigger_stmt() {
			return getRuleContext(Create_event_trigger_stmtContext.class,0);
		}
		public Create_foreign_data_stmtContext create_foreign_data_stmt() {
			return getRuleContext(Create_foreign_data_stmtContext.class,0);
		}
		public Create_foreign_table_stmtContext create_foreign_table_stmt() {
			return getRuleContext(Create_foreign_table_stmtContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Create_group_stmtContext create_group_stmt() {
			return getRuleContext(Create_group_stmtContext.class,0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return getRuleContext(Create_index_stmtContext.class,0);
		}
		public Create_language_stmtContext create_language_stmt() {
			return getRuleContext(Create_language_stmtContext.class,0);
		}
		public Create_materialized_view_stmtContext create_materialized_view_stmt() {
			return getRuleContext(Create_materialized_view_stmtContext.class,0);
		}
		public Create_operator_stmtContext create_operator_stmt() {
			return getRuleContext(Create_operator_stmtContext.class,0);
		}
		public Create_operator_class_stmtContext create_operator_class_stmt() {
			return getRuleContext(Create_operator_class_stmtContext.class,0);
		}
		public Create_operator_family_stmtContext create_operator_family_stmt() {
			return getRuleContext(Create_operator_family_stmtContext.class,0);
		}
		public Create_policy_stmtContext create_policy_stmt() {
			return getRuleContext(Create_policy_stmtContext.class,0);
		}
		public Create_role_stmtContext create_role_stmt() {
			return getRuleContext(Create_role_stmtContext.class,0);
		}
		public Create_rule_stmtContext create_rule_stmt() {
			return getRuleContext(Create_rule_stmtContext.class,0);
		}
		public Create_schema_stmtContext create_schema_stmt() {
			return getRuleContext(Create_schema_stmtContext.class,0);
		}
		public Create_sequence_stmtContext create_sequence_stmt() {
			return getRuleContext(Create_sequence_stmtContext.class,0);
		}
		public Create_server_stmtContext create_server_stmt() {
			return getRuleContext(Create_server_stmtContext.class,0);
		}
		public Create_statistics_stmtContext create_statistics_stmt() {
			return getRuleContext(Create_statistics_stmtContext.class,0);
		}
		public Create_subscription_stmtContext create_subscription_stmt() {
			return getRuleContext(Create_subscription_stmtContext.class,0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return getRuleContext(Create_table_stmtContext.class,0);
		}
		public Create_table_as_stmtContext create_table_as_stmt() {
			return getRuleContext(Create_table_as_stmtContext.class,0);
		}
		public Create_tablespace_stmtContext create_tablespace_stmt() {
			return getRuleContext(Create_tablespace_stmtContext.class,0);
		}
		public Create_text_search_config_stmtContext create_text_search_config_stmt() {
			return getRuleContext(Create_text_search_config_stmtContext.class,0);
		}
		public Create_text_search_dict_stmtContext create_text_search_dict_stmt() {
			return getRuleContext(Create_text_search_dict_stmtContext.class,0);
		}
		public Create_text_search_parser_stmtContext create_text_search_parser_stmt() {
			return getRuleContext(Create_text_search_parser_stmtContext.class,0);
		}
		public Create_text_search_template_stmtContext create_text_search_template_stmt() {
			return getRuleContext(Create_text_search_template_stmtContext.class,0);
		}
		public Create_transform_stmtContext create_transform_stmt() {
			return getRuleContext(Create_transform_stmtContext.class,0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return getRuleContext(Create_trigger_stmtContext.class,0);
		}
		public Create_type_stmtContext create_type_stmt() {
			return getRuleContext(Create_type_stmtContext.class,0);
		}
		public Create_user_stmtContext create_user_stmt() {
			return getRuleContext(Create_user_stmtContext.class,0);
		}
		public Create_user_mapping_stmtContext create_user_mapping_stmt() {
			return getRuleContext(Create_user_mapping_stmtContext.class,0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return getRuleContext(Create_view_stmtContext.class,0);
		}
		public Create_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_stmtContext create_stmt() throws RecognitionException {
		Create_stmtContext _localctx = new Create_stmtContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_create_stmt);
		try {
			setState(1921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1882);
				create_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1883);
				create_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1884);
				create_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1885);
				create_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1886);
				create_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1887);
				create_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1888);
				create_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1889);
				create_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1890);
				create_foreign_data_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1891);
				create_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1892);
				create_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1893);
				create_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1894);
				create_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1895);
				create_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1896);
				create_materialized_view_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1897);
				create_operator_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1898);
				create_operator_class_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1899);
				create_operator_family_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1900);
				create_policy_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1901);
				create_role_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1902);
				create_rule_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1903);
				create_schema_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1904);
				create_sequence_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1905);
				create_server_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1906);
				create_statistics_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1907);
				create_subscription_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1908);
				create_table_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1909);
				create_table_as_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1910);
				create_tablespace_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1911);
				create_text_search_config_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1912);
				create_text_search_dict_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1913);
				create_text_search_parser_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1914);
				create_text_search_template_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1915);
				create_transform_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1916);
				create_trigger_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1917);
				create_type_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1918);
				create_user_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1919);
				create_user_mapping_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1920);
				create_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_access_method_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Create_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_access_method_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_access_method_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_access_method_stmtContext create_access_method_stmt() throws RecognitionException {
		Create_access_method_stmtContext _localctx = new Create_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_access_method_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923);
			match(CREATE);
			setState(1924);
			match(ACCESS);
			setState(1925);
			match(METHOD);
			setState(1926);
			name_();
			setState(1927);
			match(TYPE);
			setState(1928);
			match(INDEX);
			setState(1929);
			match(HANDLER);
			setState(1930);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_aggregate_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Data_type_listContext> data_type_list() {
			return getRuleContexts(Data_type_listContext.class);
		}
		public Data_type_listContext data_type_list(int i) {
			return getRuleContext(Data_type_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode SFUNC() { return getToken(PostgreSQLParser.SFUNC, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode STYPE() { return getToken(PostgreSQLParser.STYPE, 0); }
		public TerminalNode SSPACE() { return getToken(PostgreSQLParser.SSPACE, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode FINALFUNC() { return getToken(PostgreSQLParser.FINALFUNC, 0); }
		public TerminalNode FINALFUNC_EXTRA() { return getToken(PostgreSQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(PostgreSQLParser.COMBINEFUNC, 0); }
		public TerminalNode SERIALFUNC() { return getToken(PostgreSQLParser.SERIALFUNC, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(PostgreSQLParser.DESERIALFUNC, 0); }
		public TerminalNode INITCOND() { return getToken(PostgreSQLParser.INITCOND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MSFUNC() { return getToken(PostgreSQLParser.MSFUNC, 0); }
		public TerminalNode MINVFUNC() { return getToken(PostgreSQLParser.MINVFUNC, 0); }
		public TerminalNode MSTYPE() { return getToken(PostgreSQLParser.MSTYPE, 0); }
		public TerminalNode MSSPACE() { return getToken(PostgreSQLParser.MSSPACE, 0); }
		public TerminalNode MFINALFUNC() { return getToken(PostgreSQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(PostgreSQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MINITCOND() { return getToken(PostgreSQLParser.MINITCOND, 0); }
		public TerminalNode SORTOP() { return getToken(PostgreSQLParser.SORTOP, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSQLParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSQLParser.VARIADIC, i);
		}
		public TerminalNode SAFE() { return getToken(PostgreSQLParser.SAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PostgreSQLParser.RESTRICTED, 0); }
		public TerminalNode UNSAFE() { return getToken(PostgreSQLParser.UNSAFE, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(PostgreSQLParser.HYPOTHETICAL, 0); }
		public TerminalNode BASETYPE() { return getToken(PostgreSQLParser.BASETYPE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Create_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_aggregate_stmtContext create_aggregate_stmt() throws RecognitionException {
		Create_aggregate_stmtContext _localctx = new Create_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_create_aggregate_stmt);
		int _la;
		try {
			setState(2214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1932);
				match(CREATE);
				setState(1933);
				match(AGGREGATE);
				setState(1934);
				name_();
				setState(1935);
				match(OPEN_PAREN);
				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(1936);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1940);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1939);
					name_();
					}
					break;
				}
				setState(1942);
				data_type_list();
				setState(1943);
				match(CLOSE_PAREN);
				setState(1944);
				match(OPEN_PAREN);
				setState(1945);
				match(SFUNC);
				setState(1946);
				match(EQUAL);
				setState(1947);
				identifier(0);
				setState(1948);
				match(COMMA);
				setState(1949);
				match(STYPE);
				setState(1950);
				match(EQUAL);
				setState(1951);
				identifier(0);
				setState(1956);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
				case 1:
					{
					setState(1952);
					match(COMMA);
					setState(1953);
					match(SSPACE);
					setState(1954);
					match(EQUAL);
					setState(1955);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(1962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1958);
					match(COMMA);
					setState(1959);
					match(FINALFUNC);
					setState(1960);
					match(EQUAL);
					setState(1961);
					identifier(0);
					}
					break;
				}
				setState(1966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1964);
					match(COMMA);
					setState(1965);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(1972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					setState(1968);
					match(COMMA);
					setState(1969);
					match(COMBINEFUNC);
					setState(1970);
					match(EQUAL);
					setState(1971);
					identifier(0);
					}
					break;
				}
				setState(1978);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					setState(1974);
					match(COMMA);
					setState(1975);
					match(SERIALFUNC);
					setState(1976);
					match(EQUAL);
					setState(1977);
					identifier(0);
					}
					break;
				}
				setState(1984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
				case 1:
					{
					setState(1980);
					match(COMMA);
					setState(1981);
					match(DESERIALFUNC);
					setState(1982);
					match(EQUAL);
					setState(1983);
					identifier(0);
					}
					break;
				}
				setState(1990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					setState(1986);
					match(COMMA);
					setState(1987);
					match(INITCOND);
					setState(1988);
					match(EQUAL);
					setState(1989);
					expr(0);
					}
					break;
				}
				setState(1996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1992);
					match(COMMA);
					setState(1993);
					match(MSFUNC);
					setState(1994);
					match(EQUAL);
					setState(1995);
					identifier(0);
					}
					break;
				}
				setState(2002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(1998);
					match(COMMA);
					setState(1999);
					match(MINVFUNC);
					setState(2000);
					match(EQUAL);
					setState(2001);
					identifier(0);
					}
					break;
				}
				setState(2008);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(2004);
					match(COMMA);
					setState(2005);
					match(MSTYPE);
					setState(2006);
					match(EQUAL);
					setState(2007);
					identifier(0);
					}
					break;
				}
				setState(2014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(2010);
					match(COMMA);
					setState(2011);
					match(MSSPACE);
					setState(2012);
					match(EQUAL);
					setState(2013);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(2016);
					match(COMMA);
					setState(2017);
					match(MFINALFUNC);
					setState(2018);
					match(EQUAL);
					setState(2019);
					identifier(0);
					}
					break;
				}
				setState(2024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
				case 1:
					{
					setState(2022);
					match(COMMA);
					setState(2023);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(2030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(2026);
					match(COMMA);
					setState(2027);
					match(MINITCOND);
					setState(2028);
					match(EQUAL);
					setState(2029);
					identifier(0);
					}
					break;
				}
				setState(2036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(2032);
					match(COMMA);
					setState(2033);
					match(SORTOP);
					setState(2034);
					match(EQUAL);
					setState(2035);
					identifier(0);
					}
					break;
				}
				setState(2042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2038);
					match(COMMA);
					setState(2039);
					match(PARALLEL);
					setState(2040);
					match(EQUAL);
					setState(2041);
					_la = _input.LA(1);
					if ( !((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & 7L) != 0) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2044);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2046);
				match(CREATE);
				setState(2047);
				match(AGGREGATE);
				setState(2048);
				name_();
				setState(2049);
				match(OPEN_PAREN);
				setState(2057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513601L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3829195513236815875L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3314651522620456959L) != 0) {
					{
					setState(2051);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IN || _la==VARIADIC) {
						{
						setState(2050);
						_la = _input.LA(1);
						if ( !(_la==IN || _la==VARIADIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2054);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
					case 1:
						{
						setState(2053);
						name_();
						}
						break;
					}
					setState(2056);
					data_type_list();
					}
				}

				setState(2059);
				match(ORDER);
				setState(2060);
				match(BY);
				setState(2062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(2061);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(2064);
					name_();
					}
					break;
				}
				setState(2067);
				data_type_list();
				setState(2068);
				match(CLOSE_PAREN);
				setState(2069);
				match(OPEN_PAREN);
				setState(2070);
				match(SFUNC);
				setState(2071);
				match(EQUAL);
				setState(2072);
				identifier(0);
				setState(2073);
				match(COMMA);
				setState(2074);
				match(STYPE);
				setState(2075);
				match(EQUAL);
				setState(2076);
				identifier(0);
				setState(2081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(2077);
					match(COMMA);
					setState(2078);
					match(SSPACE);
					setState(2079);
					match(EQUAL);
					setState(2080);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(2083);
					match(COMMA);
					setState(2084);
					match(FINALFUNC);
					setState(2085);
					match(EQUAL);
					setState(2086);
					identifier(0);
					}
					break;
				}
				setState(2091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(2089);
					match(COMMA);
					setState(2090);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(2097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(2093);
					match(COMMA);
					setState(2094);
					match(INITCOND);
					setState(2095);
					match(EQUAL);
					setState(2096);
					expr(0);
					}
					break;
				}
				setState(2103);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(2099);
					match(COMMA);
					setState(2100);
					match(PARALLEL);
					setState(2101);
					match(EQUAL);
					setState(2102);
					_la = _input.LA(1);
					if ( !((((_la - 686)) & ~0x3f) == 0 && ((1L << (_la - 686)) & 7L) != 0) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2105);
					match(COMMA);
					setState(2106);
					match(HYPOTHETICAL);
					}
				}

				setState(2109);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2111);
				match(CREATE);
				setState(2112);
				match(AGGREGATE);
				setState(2113);
				name_();
				setState(2114);
				match(OPEN_PAREN);
				setState(2115);
				match(BASETYPE);
				setState(2116);
				match(EQUAL);
				setState(2117);
				data_type();
				setState(2118);
				match(COMMA);
				setState(2119);
				match(SFUNC);
				setState(2120);
				match(EQUAL);
				setState(2121);
				identifier(0);
				setState(2122);
				match(COMMA);
				setState(2123);
				match(STYPE);
				setState(2124);
				match(EQUAL);
				setState(2125);
				identifier(0);
				setState(2130);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(2126);
					match(COMMA);
					setState(2127);
					match(SSPACE);
					setState(2128);
					match(EQUAL);
					setState(2129);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(2132);
					match(COMMA);
					setState(2133);
					match(FINALFUNC);
					setState(2134);
					match(EQUAL);
					setState(2135);
					identifier(0);
					}
					break;
				}
				setState(2140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					setState(2138);
					match(COMMA);
					setState(2139);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(2146);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(2142);
					match(COMMA);
					setState(2143);
					match(COMBINEFUNC);
					setState(2144);
					match(EQUAL);
					setState(2145);
					identifier(0);
					}
					break;
				}
				setState(2152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(2148);
					match(COMMA);
					setState(2149);
					match(SERIALFUNC);
					setState(2150);
					match(EQUAL);
					setState(2151);
					identifier(0);
					}
					break;
				}
				setState(2158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(2154);
					match(COMMA);
					setState(2155);
					match(DESERIALFUNC);
					setState(2156);
					match(EQUAL);
					setState(2157);
					identifier(0);
					}
					break;
				}
				setState(2164);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(2160);
					match(COMMA);
					setState(2161);
					match(INITCOND);
					setState(2162);
					match(EQUAL);
					setState(2163);
					expr(0);
					}
					break;
				}
				setState(2170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(2166);
					match(COMMA);
					setState(2167);
					match(MSFUNC);
					setState(2168);
					match(EQUAL);
					setState(2169);
					identifier(0);
					}
					break;
				}
				setState(2176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					setState(2172);
					match(COMMA);
					setState(2173);
					match(MINVFUNC);
					setState(2174);
					match(EQUAL);
					setState(2175);
					identifier(0);
					}
					break;
				}
				setState(2182);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(2178);
					match(COMMA);
					setState(2179);
					match(MSTYPE);
					setState(2180);
					match(EQUAL);
					setState(2181);
					identifier(0);
					}
					break;
				}
				setState(2188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(2184);
					match(COMMA);
					setState(2185);
					match(MSSPACE);
					setState(2186);
					match(EQUAL);
					setState(2187);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(2194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2190);
					match(COMMA);
					setState(2191);
					match(MFINALFUNC);
					setState(2192);
					match(EQUAL);
					setState(2193);
					identifier(0);
					}
					break;
				}
				setState(2198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(2196);
					match(COMMA);
					setState(2197);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(2204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(2200);
					match(COMMA);
					setState(2201);
					match(MINITCOND);
					setState(2202);
					match(EQUAL);
					setState(2203);
					identifier(0);
					}
					break;
				}
				setState(2210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2206);
					match(COMMA);
					setState(2207);
					match(SORTOP);
					setState(2208);
					match(EQUAL);
					setState(2209);
					identifier(0);
					}
				}

				setState(2212);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_cast_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSQLParser.AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLParser.IMPLICIT, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Create_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_cast_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_cast_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_cast_stmtContext create_cast_stmt() throws RecognitionException {
		Create_cast_stmtContext _localctx = new Create_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_cast_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			match(CREATE);
			setState(2217);
			match(CAST);
			setState(2218);
			match(OPEN_PAREN);
			setState(2219);
			data_type();
			setState(2220);
			match(AS);
			setState(2221);
			data_type();
			setState(2222);
			match(CLOSE_PAREN);
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				{
				setState(2223);
				match(WITH);
				setState(2224);
				match(FUNCTION);
				setState(2225);
				identifier(0);
				setState(2230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2226);
					match(OPEN_PAREN);
					setState(2227);
					data_type_list();
					setState(2228);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(2232);
				match(WITHOUT);
				setState(2233);
				match(FUNCTION);
				}
				}
				break;
			case 3:
				{
				{
				setState(2234);
				match(WITH);
				setState(2235);
				match(INOUT);
				}
				}
				break;
			}
			setState(2242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2238);
				match(AS);
				setState(2239);
				match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				setState(2240);
				match(AS);
				setState(2241);
				match(IMPLICIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_optContext extends ParserRuleContext {
		public TerminalNode LOCALE() { return getToken(PostgreSQLParser.LOCALE, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LC_COLLATE() { return getToken(PostgreSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSQLParser.LC_CTYPE, 0); }
		public TerminalNode PROVIDER() { return getToken(PostgreSQLParser.PROVIDER, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLParser.VERSION, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public Create_collation_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_optContext create_collation_opt() throws RecognitionException {
		Create_collation_optContext _localctx = new Create_collation_optContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_collation_opt);
		try {
			setState(2262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCALE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2244);
				match(LOCALE);
				setState(2245);
				match(EQUAL);
				setState(2246);
				expr(0);
				}
				break;
			case LC_COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2247);
				match(LC_COLLATE);
				setState(2248);
				match(EQUAL);
				setState(2249);
				expr(0);
				}
				break;
			case LC_CTYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2250);
				match(LC_CTYPE);
				setState(2251);
				match(EQUAL);
				setState(2252);
				expr(0);
				}
				break;
			case PROVIDER:
				enterOuterAlt(_localctx, 4);
				{
				setState(2253);
				match(PROVIDER);
				setState(2254);
				match(EQUAL);
				setState(2255);
				expr(0);
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 5);
				{
				setState(2256);
				match(VERSION);
				setState(2257);
				match(EQUAL);
				setState(2258);
				expr(0);
				}
				break;
			case DOUBLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2259);
				match(DOUBLEQ_STRING_LITERAL);
				setState(2260);
				match(EQUAL);
				setState(2261);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_opt_listContext extends ParserRuleContext {
		public List<Create_collation_optContext> create_collation_opt() {
			return getRuleContexts(Create_collation_optContext.class);
		}
		public Create_collation_optContext create_collation_opt(int i) {
			return getRuleContext(Create_collation_optContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Create_collation_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_opt_listContext create_collation_opt_list() throws RecognitionException {
		Create_collation_opt_listContext _localctx = new Create_collation_opt_listContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_create_collation_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			create_collation_opt();
			setState(2269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2265);
				match(COMMA);
				setState(2266);
				create_collation_opt();
				}
				}
				setState(2271);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_collation_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Create_collation_opt_listContext create_collation_opt_list() {
			return getRuleContext(Create_collation_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Create_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_stmtContext create_collation_stmt() throws RecognitionException {
		Create_collation_stmtContext _localctx = new Create_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_collation_stmt);
		int _la;
		try {
			setState(2295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2272);
				match(CREATE);
				setState(2273);
				match(COLLATION);
				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2274);
					match(IF);
					setState(2275);
					match(NOT);
					setState(2276);
					match(EXISTS);
					}
				}

				setState(2279);
				name_();
				setState(2280);
				match(OPEN_PAREN);
				setState(2281);
				create_collation_opt_list();
				setState(2282);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2284);
				match(CREATE);
				setState(2285);
				match(COLLATION);
				setState(2289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2286);
					match(IF);
					setState(2287);
					match(NOT);
					setState(2288);
					match(EXISTS);
					}
				}

				setState(2291);
				name_();
				setState(2292);
				match(FROM);
				setState(2293);
				name_();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_conversion_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Create_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_conversion_stmtContext create_conversion_stmt() throws RecognitionException {
		Create_conversion_stmtContext _localctx = new Create_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297);
			match(CREATE);
			setState(2299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2298);
				match(DEFAULT);
				}
			}

			setState(2301);
			match(CONVERSION);
			setState(2302);
			identifier(0);
			setState(2303);
			match(FOR);
			setState(2304);
			match(SINGLEQ_STRING_LITERAL);
			setState(2305);
			match(TO);
			setState(2306);
			match(SINGLEQ_STRING_LITERAL);
			setState(2307);
			match(FROM);
			setState(2308);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_database_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LC_COLLATE() { return getToken(PostgreSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSQLParser.LC_CTYPE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(PostgreSQLParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode IS_TEMPLATE() { return getToken(PostgreSQLParser.IS_TEMPLATE, 0); }
		public Create_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_stmtContext create_database_stmt() throws RecognitionException {
		Create_database_stmtContext _localctx = new Create_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2310);
			match(CREATE);
			setState(2311);
			match(DATABASE);
			setState(2312);
			name_();
			{
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2313);
				match(WITH);
				}
			}

			setState(2319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(2316);
				match(OWNER);
				setState(2317);
				match(EQUAL);
				setState(2318);
				name_();
				}
			}

			setState(2324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPLATE) {
				{
				setState(2321);
				match(TEMPLATE);
				setState(2322);
				match(EQUAL);
				setState(2323);
				name_();
				}
			}

			setState(2329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCODING) {
				{
				setState(2326);
				match(ENCODING);
				setState(2327);
				match(EQUAL);
				setState(2328);
				name_();
				}
			}

			setState(2334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_COLLATE) {
				{
				setState(2331);
				match(LC_COLLATE);
				setState(2332);
				match(EQUAL);
				setState(2333);
				name_();
				}
			}

			setState(2339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_CTYPE) {
				{
				setState(2336);
				match(LC_CTYPE);
				setState(2337);
				match(EQUAL);
				setState(2338);
				name_();
				}
			}

			setState(2344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2341);
				match(TABLESPACE);
				setState(2342);
				match(EQUAL);
				setState(2343);
				name_();
				}
			}

			setState(2349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW_CONNECTIONS) {
				{
				setState(2346);
				match(ALLOW_CONNECTIONS);
				setState(2347);
				match(EQUAL);
				setState(2348);
				name_();
				}
			}

			setState(2355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION) {
				{
				setState(2351);
				match(CONNECTION);
				setState(2352);
				match(LIMIT);
				setState(2353);
				match(EQUAL);
				setState(2354);
				match(INTEGER_LITERAL);
				}
			}

			setState(2360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS_TEMPLATE) {
				{
				setState(2357);
				match(IS_TEMPLATE);
				setState(2358);
				match(EQUAL);
				setState(2359);
				match(INTEGER_LITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Domain_constraintContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDomain_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDomain_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDomain_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2362);
				match(CONSTRAINT);
				setState(2363);
				name_();
				}
			}

			setState(2374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				{
				setState(2366);
				match(NOT);
				setState(2367);
				match(NULL);
				}
				break;
			case NULL:
				{
				setState(2368);
				match(NULL);
				}
				break;
			case CHECK:
				{
				setState(2369);
				match(CHECK);
				setState(2370);
				match(OPEN_PAREN);
				setState(2371);
				expr(0);
				setState(2372);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_domain_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Domain_constraintContext> domain_constraint() {
			return getRuleContexts(Domain_constraintContext.class);
		}
		public Domain_constraintContext domain_constraint(int i) {
			return getRuleContext(Domain_constraintContext.class,i);
		}
		public List<TerminalNode> COLLATE() { return getTokens(PostgreSQLParser.COLLATE); }
		public TerminalNode COLLATE(int i) {
			return getToken(PostgreSQLParser.COLLATE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PostgreSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PostgreSQLParser.DEFAULT, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Create_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_domain_stmtContext create_domain_stmt() throws RecognitionException {
		Create_domain_stmtContext _localctx = new Create_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			match(CREATE);
			setState(2377);
			match(DOMAIN);
			setState(2378);
			name_();
			setState(2380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2379);
				match(AS);
				}
			}

			setState(2382);
			data_type();
			setState(2390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & 2147484673L) != 0 || _la==DEFAULT || _la==NOT || _la==NULL) {
				{
				setState(2388);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					{
					setState(2383);
					match(COLLATE);
					setState(2384);
					name_();
					}
					}
					break;
				case DEFAULT:
					{
					{
					setState(2385);
					match(DEFAULT);
					setState(2386);
					expr(0);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case NOT:
				case NULL:
					{
					setState(2387);
					domain_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_event_trigger_condContext extends ParserRuleContext {
		public IdentifierContext filter_stmt;
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public List<Create_event_trigger_condContext> create_event_trigger_cond() {
			return getRuleContexts(Create_event_trigger_condContext.class);
		}
		public Create_event_trigger_condContext create_event_trigger_cond(int i) {
			return getRuleContext(Create_event_trigger_condContext.class,i);
		}
		public Create_event_trigger_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_event_trigger_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_event_trigger_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_event_trigger_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_trigger_condContext create_event_trigger_cond() throws RecognitionException {
		Create_event_trigger_condContext _localctx = new Create_event_trigger_condContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_event_trigger_cond);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2393);
			((Create_event_trigger_condContext)_localctx).filter_stmt = identifier(0);
			setState(2394);
			match(IN);
			setState(2395);
			match(OPEN_PAREN);
			setState(2396);
			match(SINGLEQ_STRING_LITERAL);
			setState(2401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2397);
				match(COMMA);
				setState(2398);
				match(SINGLEQ_STRING_LITERAL);
				}
				}
				setState(2403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2404);
			match(CLOSE_PAREN);
			setState(2409);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2405);
					match(AND);
					setState(2406);
					create_event_trigger_cond();
					}
					} 
				}
				setState(2411);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,186,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext trigger;
		public IdentifierContext event;
		public IdentifierContext fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Create_event_trigger_condContext create_event_trigger_cond() {
			return getRuleContext(Create_event_trigger_condContext.class,0);
		}
		public Create_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_trigger_stmtContext create_event_trigger_stmt() throws RecognitionException {
		Create_event_trigger_stmtContext _localctx = new Create_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(CREATE);
			setState(2413);
			match(EVENT);
			setState(2414);
			match(TRIGGER);
			setState(2415);
			((Create_event_trigger_stmtContext)_localctx).trigger = identifier(0);
			setState(2416);
			match(ON);
			setState(2417);
			((Create_event_trigger_stmtContext)_localctx).event = identifier(0);
			setState(2420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2418);
				match(WHEN);
				setState(2419);
				create_event_trigger_cond();
				}
			}

			setState(2422);
			match(EXECUTE);
			setState(2423);
			match(PROCEDURE);
			setState(2424);
			((Create_event_trigger_stmtContext)_localctx).fn_name = identifier(0);
			setState(2425);
			match(OPEN_PAREN);
			setState(2426);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_data_optionsContext extends ParserRuleContext {
		public Name_Context opt;
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_data_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_data_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_data_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_data_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_data_optionsContext create_foreign_data_options() throws RecognitionException {
		Create_foreign_data_optionsContext _localctx = new Create_foreign_data_optionsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_foreign_data_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2428);
			((Create_foreign_data_optionsContext)_localctx).opt = name_();
			setState(2429);
			match(SINGLEQ_STRING_LITERAL);
			setState(2434);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2430);
					match(COMMA);
					setState(2431);
					create_foreign_data_options();
					}
					} 
				}
				setState(2436);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_data_stmtContext extends ParserRuleContext {
		public IdentifierContext wrapper;
		public IdentifierContext handler;
		public IdentifierContext validator;
		public Create_foreign_data_optionsContext opts;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> HANDLER() { return getTokens(PostgreSQLParser.HANDLER); }
		public TerminalNode HANDLER(int i) {
			return getToken(PostgreSQLParser.HANDLER, i);
		}
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_foreign_data_optionsContext create_foreign_data_options() {
			return getRuleContext(Create_foreign_data_optionsContext.class,0);
		}
		public Create_foreign_data_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_data_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_data_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_data_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_data_stmtContext create_foreign_data_stmt() throws RecognitionException {
		Create_foreign_data_stmtContext _localctx = new Create_foreign_data_stmtContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_foreign_data_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2437);
			match(CREATE);
			setState(2438);
			match(FOREIGN);
			setState(2439);
			match(DATA);
			setState(2440);
			match(WRAPPER);
			setState(2441);
			((Create_foreign_data_stmtContext)_localctx).wrapper = identifier(0);
			setState(2448);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2446);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case HANDLER:
						{
						setState(2442);
						match(HANDLER);
						setState(2443);
						((Create_foreign_data_stmtContext)_localctx).handler = identifier(0);
						}
						break;
					case NO:
						{
						setState(2444);
						match(NO);
						setState(2445);
						match(HANDLER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2450);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
			}
			setState(2455);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				{
				setState(2451);
				match(VALIDATOR);
				setState(2452);
				((Create_foreign_data_stmtContext)_localctx).validator = identifier(0);
				}
				break;
			case NO:
				{
				setState(2453);
				match(NO);
				setState(2454);
				match(VALIDATOR);
				}
				break;
			case EOF:
			case OPTIONS:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2457);
				match(OPTIONS);
				setState(2458);
				match(OPEN_PAREN);
				setState(2459);
				((Create_foreign_data_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2460);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_foreign_table_stmtContext extends ParserRuleContext {
		public IdentifierContext table_name_TODO;
		public IdentifierContext column_name_TODO;
		public IdentifierContext column_type;
		public Create_foreign_data_optionsContext opts;
		public Name_Context server_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public List<TerminalNode> OPTIONS() { return getTokens(PostgreSQLParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(PostgreSQLParser.OPTIONS, i);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Create_collation_optContext create_collation_opt() {
			return getRuleContext(Create_collation_optContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_table_stmtContext create_foreign_table_stmt() throws RecognitionException {
		Create_foreign_table_stmtContext _localctx = new Create_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2464);
			match(CREATE);
			setState(2465);
			match(FOREIGN);
			setState(2466);
			match(TABLE);
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2467);
				match(IF);
				setState(2468);
				match(NOT);
				setState(2469);
				match(EXISTS);
				}
			}

			setState(2472);
			((Create_foreign_table_stmtContext)_localctx).table_name_TODO = identifier(0);
			setState(2473);
			match(OPEN_PAREN);
			setState(2474);
			((Create_foreign_table_stmtContext)_localctx).column_name_TODO = identifier(0);
			setState(2475);
			((Create_foreign_table_stmtContext)_localctx).column_type = identifier(0);
			setState(2481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2476);
				match(OPTIONS);
				setState(2477);
				match(OPEN_PAREN);
				setState(2478);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2479);
				match(CLOSE_PAREN);
				}
			}

			setState(2485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2483);
				match(COLLATE);
				setState(2484);
				create_collation_opt();
				}
			}

			setState(2487);
			match(CLOSE_PAREN);
			setState(2490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(2488);
				match(INHERITS);
				setState(2489);
				name_list();
				}
			}

			setState(2492);
			match(SERVER);
			setState(2493);
			((Create_foreign_table_stmtContext)_localctx).server_name = name_();
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2494);
				match(OPTIONS);
				setState(2495);
				match(OPEN_PAREN);
				setState(2496);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(2497);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_stmtContext extends ParserRuleContext {
		public Name_Context fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
		Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(CREATE);
			setState(2504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2502);
				match(OR);
				setState(2503);
				match(REPLACE);
				}
			}

			setState(2506);
			match(FUNCTION);
			setState(2507);
			((Create_function_stmtContext)_localctx).fn_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_group_stmtContext extends ParserRuleContext {
		public IdentifierContext group;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public List<TerminalNode> GROUP() { return getTokens(PostgreSQLParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSQLParser.GROUP, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSQLParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSQLParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSQLParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSQLParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSQLParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSQLParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSQLParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSQLParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSQLParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSQLParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSQLParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSQLParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> CREATEUSER() { return getTokens(PostgreSQLParser.CREATEUSER); }
		public TerminalNode CREATEUSER(int i) {
			return getToken(PostgreSQLParser.CREATEUSER, i);
		}
		public List<TerminalNode> NOCREATEUSER() { return getTokens(PostgreSQLParser.NOCREATEUSER); }
		public TerminalNode NOCREATEUSER(int i) {
			return getToken(PostgreSQLParser.NOCREATEUSER, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSQLParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSQLParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSQLParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSQLParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSQLParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSQLParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSQLParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSQLParser.NOLOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSQLParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSQLParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSQLParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSQLParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> ROLE() { return getTokens(PostgreSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSQLParser.ROLE, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSQLParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSQLParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSQLParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSQLParser.SYSID, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSQLParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSQLParser.ENCRYPTED, i);
		}
		public List<TerminalNode> UNENCRYPTED() { return getTokens(PostgreSQLParser.UNENCRYPTED); }
		public TerminalNode UNENCRYPTED(int i) {
			return getToken(PostgreSQLParser.UNENCRYPTED, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_group_stmtContext create_group_stmt() throws RecognitionException {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_group_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			match(CREATE);
			setState(2510);
			match(GROUP);
			setState(2511);
			((Create_group_stmtContext)_localctx).group = identifier(0);
			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CREATEDB || _la==CREATEUSER || _la==ENCRYPTED || _la==IN || (((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 144115188075855875L) != 0 || _la==ROLE || (((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & -9151279258444759039L) != 0 || (((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & 130561L) != 0) {
				{
				setState(2513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2512);
					match(WITH);
					}
				}

				setState(2549); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2549);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
					case 1:
						{
						setState(2515);
						match(SUPERUSER);
						}
						break;
					case 2:
						{
						setState(2516);
						match(NOSUPERUSER);
						}
						break;
					case 3:
						{
						setState(2517);
						match(CREATEDB);
						}
						break;
					case 4:
						{
						setState(2518);
						match(NOCREATEDB);
						}
						break;
					case 5:
						{
						setState(2519);
						match(CREATEROLE);
						}
						break;
					case 6:
						{
						setState(2520);
						match(NOCREATEROLE);
						}
						break;
					case 7:
						{
						setState(2521);
						match(CREATEUSER);
						}
						break;
					case 8:
						{
						setState(2522);
						match(NOCREATEUSER);
						}
						break;
					case 9:
						{
						setState(2523);
						match(INHERIT);
						}
						break;
					case 10:
						{
						setState(2524);
						match(NOINHERIT);
						}
						break;
					case 11:
						{
						setState(2525);
						match(LOGIN);
						}
						break;
					case 12:
						{
						setState(2526);
						match(NOLOGIN);
						}
						break;
					case 13:
						{
						setState(2528);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ENCRYPTED || _la==UNENCRYPTED) {
							{
							setState(2527);
							_la = _input.LA(1);
							if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(2530);
						match(PASSWORD);
						setState(2531);
						_la = _input.LA(1);
						if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 14:
						{
						setState(2532);
						match(VALID);
						setState(2533);
						match(UNTIL);
						setState(2534);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					case 15:
						{
						setState(2535);
						match(IN);
						setState(2536);
						match(ROLE);
						setState(2537);
						name_list();
						}
						break;
					case 16:
						{
						setState(2538);
						match(IN);
						setState(2539);
						match(GROUP);
						setState(2540);
						name_list();
						}
						break;
					case 17:
						{
						setState(2541);
						match(ROLE);
						setState(2542);
						name_list();
						}
						break;
					case 18:
						{
						setState(2543);
						match(ADMIN);
						setState(2544);
						name_list();
						}
						break;
					case 19:
						{
						setState(2545);
						match(USER);
						setState(2546);
						name_list();
						}
						break;
					case 20:
						{
						setState(2547);
						match(SYSID);
						setState(2548);
						match(INTEGER_LITERAL);
						}
						break;
					}
					}
					setState(2551); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==CREATEDB || _la==CREATEUSER || _la==ENCRYPTED || _la==IN || (((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & 144115188075855875L) != 0 || _la==ROLE || (((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & -9151279258444759039L) != 0 || (((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 255L) != 0 );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_index_stmtContext extends ParserRuleContext {
		public IdentifierContext index_name;
		public IdentifierContext tableName;
		public IdentifierContext tablespace_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_index_stmtContext create_index_stmt() throws RecognitionException {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_create_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2555);
			match(CREATE);
			setState(2557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2556);
				match(UNIQUE);
				}
			}

			setState(2559);
			match(INDEX);
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2560);
				match(CONCURRENTLY);
				}
			}

			setState(2569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 2199023255595L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3170536334544601087L) != 0) {
				{
				setState(2566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2563);
					match(IF);
					setState(2564);
					match(NOT);
					setState(2565);
					match(EXISTS);
					}
				}

				setState(2568);
				((Create_index_stmtContext)_localctx).index_name = identifier(0);
				}
			}

			setState(2571);
			match(ON);
			setState(2572);
			((Create_index_stmtContext)_localctx).tableName = identifier(0);
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2573);
				match(USING);
				setState(2574);
				index_method();
				}
			}

			setState(2579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2577);
				match(TABLESPACE);
				setState(2578);
				((Create_index_stmtContext)_localctx).tablespace_name = identifier(0);
				}
			}

			setState(2583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2581);
				match(WHERE);
				setState(2582);
				predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_language_stmtContext extends ParserRuleContext {
		public IdentifierContext language_name;
		public IdentifierContext call_handler;
		public IdentifierContext inline_handler;
		public IdentifierContext valfunction;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLParser.INLINE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Create_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_language_stmtContext create_language_stmt() throws RecognitionException {
		Create_language_stmtContext _localctx = new Create_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_language_stmt);
		int _la;
		try {
			setState(2618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2585);
				match(CREATE);
				setState(2588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2586);
					match(OR);
					setState(2587);
					match(REPLACE);
					}
				}

				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(2590);
					match(PROCEDURAL);
					}
				}

				setState(2593);
				match(LANGUAGE);
				setState(2594);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2595);
				match(CREATE);
				setState(2598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2596);
					match(OR);
					setState(2597);
					match(REPLACE);
					}
				}

				setState(2601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRUSTED) {
					{
					setState(2600);
					match(TRUSTED);
					}
				}

				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(2603);
					match(PROCEDURAL);
					}
				}

				setState(2606);
				match(LANGUAGE);
				setState(2607);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				setState(2608);
				match(HANDLER);
				setState(2609);
				((Create_language_stmtContext)_localctx).call_handler = identifier(0);
				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(2610);
					match(INLINE);
					setState(2611);
					((Create_language_stmtContext)_localctx).inline_handler = identifier(0);
					}
				}

				setState(2616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(2614);
					match(VALIDATOR);
					setState(2615);
					((Create_language_stmtContext)_localctx).valfunction = identifier(0);
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_materialized_view_stmtContext extends ParserRuleContext {
		public IdentifierContext tableName;
		public Identifier_listContext columns;
		public IdentifierContext tablespace_name;
		public Select_stmtContext query;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Create_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_materialized_view_stmtContext create_materialized_view_stmt() throws RecognitionException {
		Create_materialized_view_stmtContext _localctx = new Create_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_create_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2620);
			match(CREATE);
			setState(2621);
			match(MATERIALIZED);
			setState(2622);
			match(VIEW);
			setState(2626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2623);
				match(IF);
				setState(2624);
				match(NOT);
				setState(2625);
				match(EXISTS);
				}
			}

			setState(2628);
			((Create_materialized_view_stmtContext)_localctx).tableName = identifier(0);
			setState(2633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2629);
				match(OPEN_PAREN);
				setState(2630);
				((Create_materialized_view_stmtContext)_localctx).columns = identifier_list();
				setState(2631);
				match(CLOSE_PAREN);
				}
			}

			setState(2636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2635);
				match(WITH);
				}
			}

			setState(2640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2638);
				match(TABLESPACE);
				setState(2639);
				((Create_materialized_view_stmtContext)_localctx).tablespace_name = identifier(0);
				}
			}

			setState(2642);
			match(AS);
			setState(2643);
			((Create_materialized_view_stmtContext)_localctx).query = select_stmt();
			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2644);
				match(WITH);
				setState(2646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2645);
					match(NO);
					}
				}

				setState(2648);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_stmtContext extends ParserRuleContext {
		public IdentifierContext opName;
		public IdentifierContext function_name;
		public Name_Context left_type;
		public Name_Context right_type;
		public Name_Context com_op;
		public Name_Context neg_op;
		public Name_Context res_proc;
		public Name_Context join_proc;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode LEFTARG() { return getToken(PostgreSQLParser.LEFTARG, 0); }
		public TerminalNode RIGHTARG() { return getToken(PostgreSQLParser.RIGHTARG, 0); }
		public TerminalNode COMMUTATOR() { return getToken(PostgreSQLParser.COMMUTATOR, 0); }
		public TerminalNode NEGATOR() { return getToken(PostgreSQLParser.NEGATOR, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode HASHES() { return getToken(PostgreSQLParser.HASHES, 0); }
		public TerminalNode MERGES() { return getToken(PostgreSQLParser.MERGES, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public Create_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_stmtContext create_operator_stmt() throws RecognitionException {
		Create_operator_stmtContext _localctx = new Create_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_operator_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(CREATE);
			setState(2652);
			match(OPERATOR);
			setState(2653);
			((Create_operator_stmtContext)_localctx).opName = identifier(0);
			setState(2654);
			match(OPEN_PAREN);
			setState(2655);
			match(PROCEDURE);
			setState(2656);
			match(EQUAL);
			setState(2657);
			((Create_operator_stmtContext)_localctx).function_name = identifier(0);
			setState(2662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2658);
				match(COMMA);
				setState(2659);
				match(LEFTARG);
				setState(2660);
				match(EQUAL);
				setState(2661);
				((Create_operator_stmtContext)_localctx).left_type = name_();
				}
				break;
			}
			setState(2668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2664);
				match(COMMA);
				setState(2665);
				match(RIGHTARG);
				setState(2666);
				match(EQUAL);
				setState(2667);
				((Create_operator_stmtContext)_localctx).right_type = name_();
				}
				break;
			}
			setState(2674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2670);
				match(COMMA);
				setState(2671);
				match(COMMUTATOR);
				setState(2672);
				match(EQUAL);
				setState(2673);
				((Create_operator_stmtContext)_localctx).com_op = name_();
				}
				break;
			}
			setState(2680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2676);
				match(COMMA);
				setState(2677);
				match(NEGATOR);
				setState(2678);
				match(EQUAL);
				setState(2679);
				((Create_operator_stmtContext)_localctx).neg_op = name_();
				}
				break;
			}
			setState(2686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				{
				setState(2682);
				match(COMMA);
				setState(2683);
				match(RESTRICT);
				setState(2684);
				match(EQUAL);
				setState(2685);
				((Create_operator_stmtContext)_localctx).res_proc = name_();
				}
				break;
			}
			setState(2692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2688);
				match(COMMA);
				setState(2689);
				match(JOIN);
				setState(2690);
				match(EQUAL);
				setState(2691);
				((Create_operator_stmtContext)_localctx).join_proc = name_();
				}
				break;
			}
			setState(2696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2694);
				match(COMMA);
				setState(2695);
				match(HASHES);
				}
				break;
			}
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2698);
				match(COMMA);
				setState(2699);
				match(MERGES);
				}
			}

			setState(2702);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_class_optContext extends ParserRuleContext {
		public Token strategy_number;
		public IdentifierContext opName;
		public Token support_number;
		public IdentifierContext func_name_;
		public IdentifierContext storage_type;
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public Create_operator_class_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_class_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_class_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_class_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_class_optContext create_operator_class_opt() throws RecognitionException {
		Create_operator_class_optContext _localctx = new Create_operator_class_optContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_operator_class_opt);
		int _la;
		try {
			setState(2734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2704);
				match(OPERATOR);
				setState(2705);
				((Create_operator_class_optContext)_localctx).strategy_number = match(INTEGER_LITERAL);
				setState(2706);
				((Create_operator_class_optContext)_localctx).opName = identifier(0);
				setState(2713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2707);
					match(OPEN_PAREN);
					setState(2708);
					identifier(0);
					setState(2709);
					match(COMMA);
					setState(2710);
					identifier(0);
					setState(2711);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2715);
				match(FUNCTION);
				setState(2716);
				((Create_operator_class_optContext)_localctx).support_number = match(INTEGER_LITERAL);
				setState(2725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2717);
					match(OPEN_PAREN);
					setState(2718);
					identifier(0);
					setState(2721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2719);
						match(COMMA);
						setState(2720);
						identifier(0);
						}
					}

					setState(2723);
					match(CLOSE_PAREN);
					}
				}

				setState(2727);
				((Create_operator_class_optContext)_localctx).func_name_ = identifier(0);
				setState(2728);
				match(OPEN_PAREN);
				setState(2729);
				data_type_list();
				setState(2730);
				match(CLOSE_PAREN);
				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2732);
				match(STORAGE);
				setState(2733);
				((Create_operator_class_optContext)_localctx).storage_type = identifier(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext op_type;
		public IdentifierContext family_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Create_operator_class_optContext> create_operator_class_opt() {
			return getRuleContexts(Create_operator_class_optContext.class);
		}
		public Create_operator_class_optContext create_operator_class_opt(int i) {
			return getRuleContext(Create_operator_class_optContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Create_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_class_stmtContext create_operator_class_stmt() throws RecognitionException {
		Create_operator_class_stmtContext _localctx = new Create_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_create_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			match(CREATE);
			setState(2737);
			match(OPERATOR);
			setState(2738);
			match(CLASS);
			setState(2739);
			((Create_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(2741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(2740);
				match(DEFAULT);
				}
			}

			setState(2743);
			match(FOR);
			setState(2744);
			match(TYPE);
			setState(2745);
			((Create_operator_class_stmtContext)_localctx).op_type = identifier(0);
			setState(2746);
			match(USING);
			setState(2747);
			index_method();
			setState(2750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(2748);
				match(FAMILY);
				setState(2749);
				((Create_operator_class_stmtContext)_localctx).family_name = identifier(0);
				}
			}

			setState(2752);
			match(AS);
			setState(2753);
			create_operator_class_opt();
			setState(2758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2754);
				match(COMMA);
				setState(2755);
				create_operator_class_opt();
				}
				}
				setState(2760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_family_stmtContext create_operator_family_stmt() throws RecognitionException {
		Create_operator_family_stmtContext _localctx = new Create_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			match(CREATE);
			setState(2762);
			match(OPERATOR);
			setState(2763);
			match(FAMILY);
			setState(2764);
			((Create_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(2765);
			match(USING);
			setState(2766);
			index_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext tableName;
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Create_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_policy_stmtContext create_policy_stmt() throws RecognitionException {
		Create_policy_stmtContext _localctx = new Create_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			match(CREATE);
			setState(2769);
			match(POLICY);
			setState(2770);
			((Create_policy_stmtContext)_localctx).name = identifier(0);
			setState(2771);
			match(ON);
			setState(2772);
			((Create_policy_stmtContext)_localctx).tableName = identifier(0);
			setState(2775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2773);
				match(FOR);
				setState(2774);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(2777);
				match(TO);
				setState(2778);
				((Create_policy_stmtContext)_localctx).role = role_name();
				}
			}

			setState(2786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2781);
				match(USING);
				setState(2782);
				match(OPEN_PAREN);
				setState(2783);
				predicate(0);
				setState(2784);
				match(CLOSE_PAREN);
				}
			}

			setState(2794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2788);
				match(WITH);
				setState(2789);
				match(CHECK);
				setState(2790);
				match(OPEN_PAREN);
				setState(2791);
				predicate(0);
				setState(2792);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public List<TerminalNode> ROLE() { return getTokens(PostgreSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSQLParser.ROLE, i);
		}
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSQLParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSQLParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSQLParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSQLParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSQLParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSQLParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSQLParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSQLParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSQLParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSQLParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSQLParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSQLParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSQLParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSQLParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSQLParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSQLParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSQLParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSQLParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSQLParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSQLParser.NOLOGIN, i);
		}
		public List<TerminalNode> REPLICATION() { return getTokens(PostgreSQLParser.REPLICATION); }
		public TerminalNode REPLICATION(int i) {
			return getToken(PostgreSQLParser.REPLICATION, i);
		}
		public List<TerminalNode> NOREPLICATION() { return getTokens(PostgreSQLParser.NOREPLICATION); }
		public TerminalNode NOREPLICATION(int i) {
			return getToken(PostgreSQLParser.NOREPLICATION, i);
		}
		public List<TerminalNode> BYPASSRLS() { return getTokens(PostgreSQLParser.BYPASSRLS); }
		public TerminalNode BYPASSRLS(int i) {
			return getToken(PostgreSQLParser.BYPASSRLS, i);
		}
		public List<TerminalNode> NOBYPASSRLS() { return getTokens(PostgreSQLParser.NOBYPASSRLS); }
		public TerminalNode NOBYPASSRLS(int i) {
			return getToken(PostgreSQLParser.NOBYPASSRLS, i);
		}
		public List<TerminalNode> CONNECTION() { return getTokens(PostgreSQLParser.CONNECTION); }
		public TerminalNode CONNECTION(int i) {
			return getToken(PostgreSQLParser.CONNECTION, i);
		}
		public List<TerminalNode> LIMIT() { return getTokens(PostgreSQLParser.LIMIT); }
		public TerminalNode LIMIT(int i) {
			return getToken(PostgreSQLParser.LIMIT, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSQLParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSQLParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSQLParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSQLParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> GROUP() { return getTokens(PostgreSQLParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSQLParser.GROUP, i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSQLParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSQLParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSQLParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSQLParser.SYSID, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSQLParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSQLParser.ENCRYPTED, i);
		}
		public Create_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_role_stmtContext create_role_stmt() throws RecognitionException {
		Create_role_stmtContext _localctx = new Create_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2796);
			match(CREATE);
			setState(2797);
			match(ROLE);
			setState(2798);
			((Create_role_stmtContext)_localctx).role = role_name();
			setState(2845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==IN || _la==NOCREATEDB || _la==PASSWORD || _la==ROLE || (((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & -9151314442816847871L) != 0 || (((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & 2096641L) != 0) {
				{
				setState(2800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2799);
					match(WITH);
					}
				}

				setState(2841); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2841);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
					case 1:
						{
						setState(2802);
						match(SUPERUSER);
						}
						break;
					case 2:
						{
						setState(2803);
						match(NOSUPERUSER);
						}
						break;
					case 3:
						{
						setState(2804);
						match(CREATEDB);
						}
						break;
					case 4:
						{
						setState(2805);
						match(NOCREATEDB);
						}
						break;
					case 5:
						{
						setState(2806);
						match(CREATEROLE);
						}
						break;
					case 6:
						{
						setState(2807);
						match(NOCREATEROLE);
						}
						break;
					case 7:
						{
						setState(2808);
						match(INHERIT);
						}
						break;
					case 8:
						{
						setState(2809);
						match(NOINHERIT);
						}
						break;
					case 9:
						{
						setState(2810);
						match(LOGIN);
						}
						break;
					case 10:
						{
						setState(2811);
						match(NOLOGIN);
						}
						break;
					case 11:
						{
						setState(2812);
						match(REPLICATION);
						}
						break;
					case 12:
						{
						setState(2813);
						match(NOREPLICATION);
						}
						break;
					case 13:
						{
						setState(2814);
						match(BYPASSRLS);
						}
						break;
					case 14:
						{
						setState(2815);
						match(NOBYPASSRLS);
						}
						break;
					case 15:
						{
						setState(2816);
						match(CONNECTION);
						setState(2817);
						match(LIMIT);
						setState(2818);
						match(INTEGER_LITERAL);
						}
						break;
					case 16:
						{
						setState(2820);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ENCRYPTED) {
							{
							setState(2819);
							match(ENCRYPTED);
							}
						}

						setState(2822);
						match(PASSWORD);
						setState(2823);
						_la = _input.LA(1);
						if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 17:
						{
						setState(2824);
						match(VALID);
						setState(2825);
						match(UNTIL);
						setState(2826);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					case 18:
						{
						setState(2827);
						match(IN);
						setState(2828);
						match(ROLE);
						setState(2829);
						name_list();
						}
						break;
					case 19:
						{
						setState(2830);
						match(IN);
						setState(2831);
						match(GROUP);
						setState(2832);
						name_list();
						}
						break;
					case 20:
						{
						setState(2833);
						match(ROLE);
						setState(2834);
						name_list();
						}
						break;
					case 21:
						{
						setState(2835);
						match(ADMIN);
						setState(2836);
						name_list();
						}
						break;
					case 22:
						{
						setState(2837);
						match(USER);
						setState(2838);
						name_list();
						}
						break;
					case 23:
						{
						setState(2839);
						match(SYSID);
						setState(2840);
						match(INTEGER_LITERAL);
						}
						break;
					}
					}
					setState(2843); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==CONNECTION || _la==CREATEDB || _la==ENCRYPTED || _la==IN || _la==NOCREATEDB || _la==PASSWORD || _la==ROLE || (((_la - 564)) & ~0x3f) == 0 && ((1L << (_la - 564)) & -9151314442816847871L) != 0 || (((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & 4095L) != 0 );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_rule_eventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public Create_rule_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_rule_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_rule_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_rule_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_rule_eventContext create_rule_event() throws RecognitionException {
		Create_rule_eventContext _localctx = new Create_rule_eventContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_rule_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public Create_rule_eventContext event;
		public IdentifierContext tableName;
		public IdentifierContext command;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Create_rule_eventContext create_rule_event() {
			return getRuleContext(Create_rule_eventContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public Create_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_rule_stmtContext create_rule_stmt() throws RecognitionException {
		Create_rule_stmtContext _localctx = new Create_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2849);
			match(CREATE);
			setState(2852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2850);
				match(OR);
				setState(2851);
				match(REPLACE);
				}
			}

			setState(2854);
			match(RULE);
			setState(2855);
			((Create_rule_stmtContext)_localctx).name = name_();
			setState(2856);
			match(AS);
			setState(2857);
			match(ON);
			setState(2858);
			((Create_rule_stmtContext)_localctx).event = create_rule_event();
			setState(2859);
			match(TO);
			setState(2860);
			((Create_rule_stmtContext)_localctx).tableName = identifier(0);
			setState(2863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2861);
				match(WHERE);
				setState(2862);
				predicate(0);
				}
			}

			setState(2865);
			match(DO);
			setState(2867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2866);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2869);
				match(NOTHING);
				}
				break;
			case 2:
				{
				setState(2870);
				((Create_rule_stmtContext)_localctx).command = identifier(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_schema_stmtContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Create_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_stmtContext create_schema_stmt() throws RecognitionException {
		Create_schema_stmtContext _localctx = new Create_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_schema_stmt);
		int _la;
		try {
			setState(2907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2873);
				match(CREATE);
				setState(2874);
				match(SCHEMA);
				setState(2875);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(2878);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2876);
					match(AUTHORIZATION);
					setState(2877);
					role_name();
					}
					break;
				}
				setState(2881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(2880);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2883);
				match(CREATE);
				setState(2884);
				match(SCHEMA);
				setState(2885);
				match(AUTHORIZATION);
				setState(2886);
				role_name();
				setState(2888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(2887);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(2890);
				match(CREATE);
				setState(2891);
				match(SCHEMA);
				setState(2892);
				match(IF);
				setState(2893);
				match(NOT);
				setState(2894);
				match(EXISTS);
				setState(2895);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(2898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2896);
					match(AUTHORIZATION);
					setState(2897);
					role_name();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(2900);
				match(CREATE);
				setState(2901);
				match(SCHEMA);
				setState(2902);
				match(IF);
				setState(2903);
				match(NOT);
				setState(2904);
				match(EXISTS);
				setState(2905);
				match(AUTHORIZATION);
				setState(2906);
				role_name();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequence_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token increment;
		public Token minvalue;
		public Token maxvalue;
		public Token start;
		public Token cache;
		public IdentifierContext table_name;
		public IdentifierContext column_name_;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public List<TerminalNode> BY() { return getTokens(PostgreSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PostgreSQLParser.BY, i);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Create_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequence_stmtContext create_sequence_stmt() throws RecognitionException {
		Create_sequence_stmtContext _localctx = new Create_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2909);
			match(CREATE);
			setState(2911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2910);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2913);
			match(SEQUENCE);
			setState(2917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2914);
				match(IF);
				setState(2915);
				match(NOT);
				setState(2916);
				match(EXISTS);
				}
			}

			setState(2919);
			((Create_sequence_stmtContext)_localctx).name = identifier(0);
			setState(2925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(2920);
				match(INCREMENT);
				setState(2922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2921);
					match(BY);
					}
				}

				setState(2924);
				((Create_sequence_stmtContext)_localctx).increment = match(INTEGER_LITERAL);
				}
			}

			setState(2931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(2927);
				match(MINVALUE);
				setState(2928);
				((Create_sequence_stmtContext)_localctx).minvalue = match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				setState(2929);
				match(NO);
				setState(2930);
				match(MINVALUE);
				}
				break;
			}
			setState(2937);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2933);
				match(MAXVALUE);
				setState(2934);
				((Create_sequence_stmtContext)_localctx).maxvalue = match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				setState(2935);
				match(NO);
				setState(2936);
				match(MAXVALUE);
				}
				break;
			}
			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(2939);
				match(START);
				setState(2941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2940);
					match(WITH);
					}
				}

				setState(2943);
				((Create_sequence_stmtContext)_localctx).start = match(INTEGER_LITERAL);
				}
			}

			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE) {
				{
				setState(2946);
				match(CACHE);
				setState(2947);
				((Create_sequence_stmtContext)_localctx).cache = match(INTEGER_LITERAL);
				}
			}

			setState(2954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE || _la==NO) {
				{
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2950);
					match(NO);
					}
				}

				setState(2953);
				match(CYCLE);
				}
			}

			setState(2965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(2956);
				match(OWNED);
				setState(2957);
				match(BY);
				setState(2963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					{
					setState(2958);
					((Create_sequence_stmtContext)_localctx).table_name = identifier(0);
					setState(2959);
					match(DOT);
					setState(2960);
					((Create_sequence_stmtContext)_localctx).column_name_ = identifier(0);
					}
					}
					break;
				case 2:
					{
					setState(2962);
					match(NONE);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_server_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_stmtContext create_server_stmt() throws RecognitionException {
		Create_server_stmtContext _localctx = new Create_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_statistics_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statistics_stmtContext create_statistics_stmt() throws RecognitionException {
		Create_statistics_stmtContext _localctx = new Create_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_statistics_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2969);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_subscription_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_subscription_stmtContext create_subscription_stmt() throws RecognitionException {
		Create_subscription_stmtContext _localctx = new Create_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_subscription_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2971);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_stmtContext create_table_stmt() throws RecognitionException {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_as_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_as_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_table_as_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_table_as_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_table_as_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_stmtContext create_table_as_stmt() throws RecognitionException {
		Create_table_as_stmtContext _localctx = new Create_table_as_stmtContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_table_as_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tablespace_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tablespace_stmtContext create_tablespace_stmt() throws RecognitionException {
		Create_tablespace_stmtContext _localctx = new Create_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_create_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2977);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_config_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_config_stmtContext create_text_search_config_stmt() throws RecognitionException {
		Create_text_search_config_stmtContext _localctx = new Create_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_text_search_config_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_dict_stmtContext create_text_search_dict_stmt() throws RecognitionException {
		Create_text_search_dict_stmtContext _localctx = new Create_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_parser_stmtContext create_text_search_parser_stmt() throws RecognitionException {
		Create_text_search_parser_stmtContext _localctx = new Create_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_search_template_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_template_stmtContext create_text_search_template_stmt() throws RecognitionException {
		Create_text_search_template_stmtContext _localctx = new Create_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_text_search_template_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_transform_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_transform_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_transform_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_transform_stmtContext create_transform_stmt() throws RecognitionException {
		Create_transform_stmtContext _localctx = new Create_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_transform_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2987);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_trigger_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_trigger_stmtContext create_trigger_stmt() throws RecognitionException {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_trigger_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2989);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_type_stmtContext create_type_stmt() throws RecognitionException {
		Create_type_stmtContext _localctx = new Create_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_create_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2991);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_stmtContext create_user_stmt() throws RecognitionException {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_create_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_user_mapping_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_mapping_stmtContext create_user_mapping_stmt() throws RecognitionException {
		Create_user_mapping_stmtContext _localctx = new Create_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_create_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2995);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_view_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_view_stmtContext create_view_stmt() throws RecognitionException {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_create_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			match(CREATE);
			setState(3000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2998);
				match(OR);
				setState(2999);
				match(REPLACE);
				}
			}

			setState(3003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(3002);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(3005);
				match(RECURSIVE);
				}
			}

			setState(3008);
			match(VIEW);
			setState(3009);
			((Create_view_stmtContext)_localctx).name = name_();
			setState(3014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3010);
				match(OPEN_PAREN);
				setState(3011);
				name_list();
				setState(3012);
				match(CLOSE_PAREN);
				}
			}

			setState(3021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3016);
				match(WITH);
				setState(3017);
				match(OPEN_PAREN);
				setState(3018);
				option_list();
				setState(3019);
				match(CLOSE_PAREN);
				}
			}

			setState(3023);
			match(AS);
			setState(3026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(3024);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3025);
				values_stmt();
				}
				break;
			}
			setState(3034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3028);
				match(WITH);
				setState(3030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(3029);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3032);
				match(CHECK);
				setState(3033);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deallocate_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Deallocate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_stmtContext deallocate_stmt() throws RecognitionException {
		Deallocate_stmtContext _localctx = new Deallocate_stmtContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_deallocate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3036);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Declare_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclare_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclare_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_stmtContext declare_stmt() throws RecognitionException {
		Declare_stmtContext _localctx = new Declare_stmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_declare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3038);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_stmtContext extends ParserRuleContext {
		public IdentifierContext cursor_name_;
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDelete_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDelete_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDelete_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_stmtContext delete_stmt() throws RecognitionException {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_delete_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3040);
				with_clause();
				}
			}

			setState(3043);
			match(DELETE);
			setState(3044);
			match(FROM);
			setState(3046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(3045);
				match(ONLY);
				}
			}

			setState(3048);
			table_name_();
			setState(3050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(3049);
				match(STAR);
				}
			}

			setState(3056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217925918706L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3170536334544601087L) != 0) {
				{
				setState(3053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3052);
					match(AS);
					}
				}

				setState(3055);
				alias();
				}
			}

			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3058);
				match(USING);
				setState(3059);
				identifier_list();
				}
			}

			setState(3067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(3062);
				where_clause();
				}
				break;
			case 2:
				{
				{
				setState(3063);
				match(WHERE);
				setState(3064);
				match(CURRENT);
				setState(3065);
				match(OF);
				setState(3066);
				((Delete_stmtContext)_localctx).cursor_name_ = identifier(0);
				}
				}
				break;
			}
			setState(3070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(3069);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Discard_stmtContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(PostgreSQLParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(PostgreSQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public Discard_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscard_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscard_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscard_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Discard_stmtContext discard_stmt() throws RecognitionException {
		Discard_stmtContext _localctx = new Discard_stmtContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_discard_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(DISCARD);
			setState(3073);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==PLANS || (((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & 720575940379279361L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_stmtContext extends ParserRuleContext {
		public Drop_access_method_stmtContext drop_access_method_stmt() {
			return getRuleContext(Drop_access_method_stmtContext.class,0);
		}
		public Drop_aggregate_stmtContext drop_aggregate_stmt() {
			return getRuleContext(Drop_aggregate_stmtContext.class,0);
		}
		public Drop_cast_stmtContext drop_cast_stmt() {
			return getRuleContext(Drop_cast_stmtContext.class,0);
		}
		public Drop_collation_stmtContext drop_collation_stmt() {
			return getRuleContext(Drop_collation_stmtContext.class,0);
		}
		public Drop_conversion_stmtContext drop_conversion_stmt() {
			return getRuleContext(Drop_conversion_stmtContext.class,0);
		}
		public Drop_database_stmtContext drop_database_stmt() {
			return getRuleContext(Drop_database_stmtContext.class,0);
		}
		public Drop_domain_stmtContext drop_domain_stmt() {
			return getRuleContext(Drop_domain_stmtContext.class,0);
		}
		public Drop_event_trigger_stmtContext drop_event_trigger_stmt() {
			return getRuleContext(Drop_event_trigger_stmtContext.class,0);
		}
		public Drop_extension_stmtContext drop_extension_stmt() {
			return getRuleContext(Drop_extension_stmtContext.class,0);
		}
		public Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() {
			return getRuleContext(Drop_foreign_data_wrapper_stmtContext.class,0);
		}
		public Drop_foreign_table_stmtContext drop_foreign_table_stmt() {
			return getRuleContext(Drop_foreign_table_stmtContext.class,0);
		}
		public Drop_function_stmtContext drop_function_stmt() {
			return getRuleContext(Drop_function_stmtContext.class,0);
		}
		public Drop_group_stmtContext drop_group_stmt() {
			return getRuleContext(Drop_group_stmtContext.class,0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return getRuleContext(Drop_index_stmtContext.class,0);
		}
		public Drop_language_stmtContext drop_language_stmt() {
			return getRuleContext(Drop_language_stmtContext.class,0);
		}
		public Drop_materialized_view_stmtContext drop_materialized_view_stmt() {
			return getRuleContext(Drop_materialized_view_stmtContext.class,0);
		}
		public Drop_operator_stmtContext drop_operator_stmt() {
			return getRuleContext(Drop_operator_stmtContext.class,0);
		}
		public Drop_operator_class_stmtContext drop_operator_class_stmt() {
			return getRuleContext(Drop_operator_class_stmtContext.class,0);
		}
		public Drop_operator_family_stmtContext drop_operator_family_stmt() {
			return getRuleContext(Drop_operator_family_stmtContext.class,0);
		}
		public Drop_owned_stmtContext drop_owned_stmt() {
			return getRuleContext(Drop_owned_stmtContext.class,0);
		}
		public Drop_policy_stmtContext drop_policy_stmt() {
			return getRuleContext(Drop_policy_stmtContext.class,0);
		}
		public Drop_publication_stmtContext drop_publication_stmt() {
			return getRuleContext(Drop_publication_stmtContext.class,0);
		}
		public Drop_role_stmtContext drop_role_stmt() {
			return getRuleContext(Drop_role_stmtContext.class,0);
		}
		public Drop_rule_stmtContext drop_rule_stmt() {
			return getRuleContext(Drop_rule_stmtContext.class,0);
		}
		public Drop_schema_stmtContext drop_schema_stmt() {
			return getRuleContext(Drop_schema_stmtContext.class,0);
		}
		public Drop_sequence_stmtContext drop_sequence_stmt() {
			return getRuleContext(Drop_sequence_stmtContext.class,0);
		}
		public Drop_server_stmtContext drop_server_stmt() {
			return getRuleContext(Drop_server_stmtContext.class,0);
		}
		public Drop_statistics_stmtContext drop_statistics_stmt() {
			return getRuleContext(Drop_statistics_stmtContext.class,0);
		}
		public Drop_subscription_stmtContext drop_subscription_stmt() {
			return getRuleContext(Drop_subscription_stmtContext.class,0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return getRuleContext(Drop_table_stmtContext.class,0);
		}
		public Drop_tablespace_stmtContext drop_tablespace_stmt() {
			return getRuleContext(Drop_tablespace_stmtContext.class,0);
		}
		public Drop_text_search_config_stmtContext drop_text_search_config_stmt() {
			return getRuleContext(Drop_text_search_config_stmtContext.class,0);
		}
		public Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() {
			return getRuleContext(Drop_text_search_dict_stmtContext.class,0);
		}
		public Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() {
			return getRuleContext(Drop_text_search_parser_stmtContext.class,0);
		}
		public Drop_text_search_template_stmtContext drop_text_search_template_stmt() {
			return getRuleContext(Drop_text_search_template_stmtContext.class,0);
		}
		public Drop_transform_stmtContext drop_transform_stmt() {
			return getRuleContext(Drop_transform_stmtContext.class,0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return getRuleContext(Drop_trigger_stmtContext.class,0);
		}
		public Drop_type_stmtContext drop_type_stmt() {
			return getRuleContext(Drop_type_stmtContext.class,0);
		}
		public Drop_user_stmtContext drop_user_stmt() {
			return getRuleContext(Drop_user_stmtContext.class,0);
		}
		public Drop_user_mapping_stmtContext drop_user_mapping_stmt() {
			return getRuleContext(Drop_user_mapping_stmtContext.class,0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return getRuleContext(Drop_view_stmtContext.class,0);
		}
		public Drop_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_stmtContext drop_stmt() throws RecognitionException {
		Drop_stmtContext _localctx = new Drop_stmtContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_stmt);
		try {
			setState(3116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3075);
				drop_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3076);
				drop_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3077);
				drop_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3078);
				drop_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3079);
				drop_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3080);
				drop_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3081);
				drop_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3082);
				drop_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3083);
				drop_extension_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3084);
				drop_foreign_data_wrapper_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3085);
				drop_foreign_table_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3086);
				drop_function_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3087);
				drop_group_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3088);
				drop_index_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3089);
				drop_language_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3090);
				drop_materialized_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3091);
				drop_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3092);
				drop_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3093);
				drop_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3094);
				drop_owned_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3095);
				drop_policy_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3096);
				drop_publication_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3097);
				drop_role_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3098);
				drop_rule_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3099);
				drop_schema_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3100);
				drop_sequence_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3101);
				drop_server_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3102);
				drop_statistics_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3103);
				drop_subscription_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3104);
				drop_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3105);
				drop_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3106);
				drop_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3107);
				drop_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3108);
				drop_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3109);
				drop_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3110);
				drop_transform_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3111);
				drop_trigger_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3112);
				drop_type_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3113);
				drop_user_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3114);
				drop_user_mapping_stmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3115);
				drop_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_access_method_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_access_method_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_access_method_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_access_method_stmtContext drop_access_method_stmt() throws RecognitionException {
		Drop_access_method_stmtContext _localctx = new Drop_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_access_method_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3118);
			match(DROP);
			setState(3119);
			match(ACCESS);
			setState(3120);
			match(METHOD);
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3121);
				match(IF);
				setState(3122);
				match(EXISTS);
				}
			}

			setState(3125);
			((Drop_access_method_stmtContext)_localctx).name = identifier(0);
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3126);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_aggregate_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregate_stmtContext drop_aggregate_stmt() throws RecognitionException {
		Drop_aggregate_stmtContext _localctx = new Drop_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_aggregate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			match(DROP);
			setState(3130);
			match(AGGREGATE);
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3131);
				match(IF);
				setState(3132);
				match(EXISTS);
				}
			}

			setState(3135);
			((Drop_aggregate_stmtContext)_localctx).name = identifier(0);
			setState(3136);
			match(OPEN_PAREN);
			setState(3137);
			aggregate_signature();
			setState(3138);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_cast_stmtContext extends ParserRuleContext {
		public Data_typeContext source_type;
		public IdentifierContext target_type;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_cast_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_cast_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_cast_stmtContext drop_cast_stmt() throws RecognitionException {
		Drop_cast_stmtContext _localctx = new Drop_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_cast_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3140);
			match(DROP);
			setState(3141);
			match(CAST);
			setState(3144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3142);
				match(IF);
				setState(3143);
				match(EXISTS);
				}
			}

			setState(3146);
			match(OPEN_PAREN);
			setState(3147);
			((Drop_cast_stmtContext)_localctx).source_type = data_type();
			setState(3148);
			match(AS);
			setState(3149);
			((Drop_cast_stmtContext)_localctx).target_type = identifier(0);
			setState(3150);
			match(CLOSE_PAREN);
			setState(3152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3151);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_collation_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_collation_stmtContext drop_collation_stmt() throws RecognitionException {
		Drop_collation_stmtContext _localctx = new Drop_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_collation_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3154);
			match(DROP);
			setState(3155);
			match(COLLATION);
			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3156);
				match(IF);
				setState(3157);
				match(EXISTS);
				}
			}

			setState(3160);
			((Drop_collation_stmtContext)_localctx).names = identifier_list();
			setState(3162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3161);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_conversion_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_conversion_stmtContext drop_conversion_stmt() throws RecognitionException {
		Drop_conversion_stmtContext _localctx = new Drop_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			match(DROP);
			setState(3165);
			match(CONVERSION);
			setState(3168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3166);
				match(IF);
				setState(3167);
				match(EXISTS);
				}
			}

			setState(3170);
			((Drop_conversion_stmtContext)_localctx).name = identifier(0);
			setState(3172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3171);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_database_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_stmtContext drop_database_stmt() throws RecognitionException {
		Drop_database_stmtContext _localctx = new Drop_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(DROP);
			setState(3175);
			match(DATABASE);
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3176);
				match(IF);
				setState(3177);
				match(EXISTS);
				}
			}

			setState(3180);
			((Drop_database_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_domain_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_stmtContext drop_domain_stmt() throws RecognitionException {
		Drop_domain_stmtContext _localctx = new Drop_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3182);
			match(DROP);
			setState(3183);
			match(DOMAIN);
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3184);
				match(IF);
				setState(3185);
				match(EXISTS);
				}
			}

			setState(3188);
			((Drop_domain_stmtContext)_localctx).names = identifier_list();
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3189);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_trigger_stmtContext drop_event_trigger_stmt() throws RecognitionException {
		Drop_event_trigger_stmtContext _localctx = new Drop_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3192);
			match(DROP);
			setState(3193);
			match(EVENT);
			setState(3194);
			match(TRIGGER);
			setState(3197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3195);
				match(IF);
				setState(3196);
				match(EXISTS);
				}
			}

			setState(3199);
			((Drop_event_trigger_stmtContext)_localctx).name = identifier(0);
			setState(3201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3200);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_extension_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_extension_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_extension_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_extension_stmtContext drop_extension_stmt() throws RecognitionException {
		Drop_extension_stmtContext _localctx = new Drop_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_extension_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			match(DROP);
			setState(3204);
			match(EXTENSION);
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3205);
				match(IF);
				setState(3206);
				match(EXISTS);
				}
			}

			setState(3209);
			((Drop_extension_stmtContext)_localctx).names = identifier_list();
			setState(3211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3210);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_foreign_data_wrapper_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_foreign_data_wrapper_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() throws RecognitionException {
		Drop_foreign_data_wrapper_stmtContext _localctx = new Drop_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_foreign_data_wrapper_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3213);
			match(DROP);
			setState(3214);
			match(FOREIGN);
			setState(3215);
			match(DATA);
			setState(3216);
			match(WRAPPER);
			setState(3219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3217);
				match(IF);
				setState(3218);
				match(EXISTS);
				}
			}

			setState(3221);
			((Drop_foreign_data_wrapper_stmtContext)_localctx).names = identifier_list();
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3222);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_foreign_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_foreign_table_stmtContext drop_foreign_table_stmt() throws RecognitionException {
		Drop_foreign_table_stmtContext _localctx = new Drop_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			match(DROP);
			setState(3226);
			match(FOREIGN);
			setState(3227);
			match(TABLE);
			setState(3230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3228);
				match(IF);
				setState(3229);
				match(EXISTS);
				}
			}

			setState(3232);
			((Drop_foreign_table_stmtContext)_localctx).names = identifier_list();
			setState(3234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3233);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_function_stmtContext extends ParserRuleContext {
		public Func_sig_listContext functions;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Func_sig_listContext func_sig_list() {
			return getRuleContext(Func_sig_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_function_stmtContext drop_function_stmt() throws RecognitionException {
		Drop_function_stmtContext _localctx = new Drop_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			match(DROP);
			setState(3237);
			match(FUNCTION);
			setState(3240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3238);
				match(IF);
				setState(3239);
				match(EXISTS);
				}
			}

			setState(3242);
			((Drop_function_stmtContext)_localctx).functions = func_sig_list();
			setState(3244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3243);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_group_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_group_stmtContext drop_group_stmt() throws RecognitionException {
		Drop_group_stmtContext _localctx = new Drop_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_group_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			match(DROP);
			setState(3247);
			match(GROUP);
			setState(3250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3248);
				match(IF);
				setState(3249);
				match(EXISTS);
				}
			}

			setState(3252);
			((Drop_group_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_index_stmtContext extends ParserRuleContext {
		public Name_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_index_stmtContext drop_index_stmt() throws RecognitionException {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			match(DROP);
			setState(3255);
			match(INDEX);
			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(3256);
				match(CONCURRENTLY);
				}
			}

			setState(3261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3259);
				match(IF);
				setState(3260);
				match(EXISTS);
				}
			}

			setState(3263);
			((Drop_index_stmtContext)_localctx).names = name_list();
			setState(3265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3264);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_language_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_language_stmtContext drop_language_stmt() throws RecognitionException {
		Drop_language_stmtContext _localctx = new Drop_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_language_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3267);
			match(DROP);
			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(3268);
				match(PROCEDURAL);
				}
			}

			setState(3271);
			match(LANGUAGE);
			setState(3274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3272);
				match(IF);
				setState(3273);
				match(EXISTS);
				}
			}

			setState(3276);
			((Drop_language_stmtContext)_localctx).name = identifier(0);
			setState(3278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3277);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_materialized_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_materialized_view_stmtContext drop_materialized_view_stmt() throws RecognitionException {
		Drop_materialized_view_stmtContext _localctx = new Drop_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3280);
			match(DROP);
			setState(3281);
			match(MATERIALIZED);
			setState(3282);
			match(VIEW);
			setState(3285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3283);
				match(IF);
				setState(3284);
				match(EXISTS);
				}
			}

			setState(3287);
			((Drop_materialized_view_stmtContext)_localctx).names = identifier_list();
			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3288);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Drop_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_stmtContext drop_operator_stmt() throws RecognitionException {
		Drop_operator_stmtContext _localctx = new Drop_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3291);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_class_stmtContext drop_operator_class_stmt() throws RecognitionException {
		Drop_operator_class_stmtContext _localctx = new Drop_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			match(DROP);
			setState(3294);
			match(OPERATOR);
			setState(3295);
			match(CLASS);
			setState(3298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3296);
				match(IF);
				setState(3297);
				match(EXISTS);
				}
			}

			setState(3300);
			((Drop_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(3301);
			match(USING);
			setState(3302);
			index_method();
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3303);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_family_stmtContext drop_operator_family_stmt() throws RecognitionException {
		Drop_operator_family_stmtContext _localctx = new Drop_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_operator_family_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3306);
			match(DROP);
			setState(3307);
			match(OPERATOR);
			setState(3308);
			match(FAMILY);
			setState(3311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3309);
				match(IF);
				setState(3310);
				match(EXISTS);
				}
			}

			setState(3313);
			((Drop_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(3314);
			match(USING);
			setState(3315);
			index_method();
			setState(3317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3316);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_owned_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_name_listContext role_name_list() {
			return getRuleContext(Role_name_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_owned_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_owned_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_owned_stmtContext drop_owned_stmt() throws RecognitionException {
		Drop_owned_stmtContext _localctx = new Drop_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_owned_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319);
			match(DROP);
			setState(3320);
			match(OWNED);
			setState(3321);
			match(BY);
			setState(3322);
			role_name_list();
			setState(3324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3323);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_policy_stmtContext drop_policy_stmt() throws RecognitionException {
		Drop_policy_stmtContext _localctx = new Drop_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3326);
			match(DROP);
			setState(3327);
			match(POLICY);
			setState(3330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3328);
				match(IF);
				setState(3329);
				match(EXISTS);
				}
			}

			setState(3332);
			((Drop_policy_stmtContext)_localctx).name = identifier(0);
			setState(3333);
			match(ON);
			setState(3334);
			((Drop_policy_stmtContext)_localctx).table_name = identifier(0);
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3335);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_publication_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_publication_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_publication_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_publication_stmtContext drop_publication_stmt() throws RecognitionException {
		Drop_publication_stmtContext _localctx = new Drop_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_publication_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3338);
			match(DROP);
			setState(3339);
			match(PUBLICATION);
			setState(3342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3340);
				match(IF);
				setState(3341);
				match(EXISTS);
				}
			}

			setState(3344);
			((Drop_publication_stmtContext)_localctx).names = identifier_list();
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3345);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_role_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_role_stmtContext drop_role_stmt() throws RecognitionException {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			match(DROP);
			setState(3349);
			match(ROLE);
			setState(3352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3350);
				match(IF);
				setState(3351);
				match(EXISTS);
				}
			}

			setState(3354);
			((Drop_role_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_rule_stmtContext drop_rule_stmt() throws RecognitionException {
		Drop_rule_stmtContext _localctx = new Drop_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3356);
			match(DROP);
			setState(3357);
			match(RULE);
			setState(3360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3358);
				match(IF);
				setState(3359);
				match(EXISTS);
				}
			}

			setState(3362);
			((Drop_rule_stmtContext)_localctx).name = name_();
			setState(3363);
			match(ON);
			setState(3364);
			((Drop_rule_stmtContext)_localctx).table_name = identifier(0);
			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3365);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_schema_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_stmtContext drop_schema_stmt() throws RecognitionException {
		Drop_schema_stmtContext _localctx = new Drop_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_schema_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(DROP);
			setState(3369);
			match(SCHEMA);
			setState(3372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3370);
				match(IF);
				setState(3371);
				match(EXISTS);
				}
			}

			setState(3374);
			((Drop_schema_stmtContext)_localctx).names = identifier_list();
			setState(3376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3375);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequence_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequence_stmtContext drop_sequence_stmt() throws RecognitionException {
		Drop_sequence_stmtContext _localctx = new Drop_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			match(DROP);
			setState(3379);
			match(SEQUENCE);
			setState(3382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3380);
				match(IF);
				setState(3381);
				match(EXISTS);
				}
			}

			setState(3384);
			((Drop_sequence_stmtContext)_localctx).names = identifier_list();
			setState(3386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3385);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_server_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_stmtContext drop_server_stmt() throws RecognitionException {
		Drop_server_stmtContext _localctx = new Drop_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_drop_server_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388);
			match(DROP);
			setState(3389);
			match(SERVER);
			setState(3392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3390);
				match(IF);
				setState(3391);
				match(EXISTS);
				}
			}

			setState(3394);
			((Drop_server_stmtContext)_localctx).names = identifier_list();
			setState(3396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3395);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_statistics_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statistics_stmtContext drop_statistics_stmt() throws RecognitionException {
		Drop_statistics_stmtContext _localctx = new Drop_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_drop_statistics_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			match(DROP);
			setState(3399);
			match(STATISTICS);
			setState(3402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3400);
				match(IF);
				setState(3401);
				match(EXISTS);
				}
			}

			setState(3404);
			((Drop_statistics_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_subscription_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_subscription_stmtContext drop_subscription_stmt() throws RecognitionException {
		Drop_subscription_stmtContext _localctx = new Drop_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_subscription_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3406);
			match(DROP);
			setState(3407);
			match(SUBSCRIPTION);
			setState(3410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3408);
				match(IF);
				setState(3409);
				match(EXISTS);
				}
			}

			setState(3412);
			((Drop_subscription_stmtContext)_localctx).name = identifier(0);
			setState(3414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3413);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_stmtContext drop_table_stmt() throws RecognitionException {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_drop_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3416);
			match(DROP);
			setState(3417);
			match(TABLE);
			setState(3420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3418);
				match(IF);
				setState(3419);
				match(EXISTS);
				}
			}

			setState(3422);
			((Drop_table_stmtContext)_localctx).names = identifier_list();
			setState(3424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3423);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tablespace_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tablespace_stmtContext drop_tablespace_stmt() throws RecognitionException {
		Drop_tablespace_stmtContext _localctx = new Drop_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_drop_tablespace_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			match(DROP);
			setState(3427);
			match(TABLESPACE);
			setState(3430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3428);
				match(IF);
				setState(3429);
				match(EXISTS);
				}
			}

			setState(3432);
			((Drop_tablespace_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_config_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_config_stmtContext drop_text_search_config_stmt() throws RecognitionException {
		Drop_text_search_config_stmtContext _localctx = new Drop_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_drop_text_search_config_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3434);
			match(DROP);
			setState(3435);
			match(TEXT);
			setState(3436);
			match(SEARCH);
			setState(3437);
			match(CONFIGURATION);
			setState(3440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3438);
				match(IF);
				setState(3439);
				match(EXISTS);
				}
			}

			setState(3442);
			((Drop_text_search_config_stmtContext)_localctx).name = identifier(0);
			setState(3444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3443);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_dict_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() throws RecognitionException {
		Drop_text_search_dict_stmtContext _localctx = new Drop_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_text_search_dict_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3446);
			match(DROP);
			setState(3447);
			match(TEXT);
			setState(3448);
			match(SEARCH);
			setState(3449);
			match(DICTIONARY);
			setState(3452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3450);
				match(IF);
				setState(3451);
				match(EXISTS);
				}
			}

			setState(3454);
			((Drop_text_search_dict_stmtContext)_localctx).name = identifier(0);
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3455);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_parser_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() throws RecognitionException {
		Drop_text_search_parser_stmtContext _localctx = new Drop_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_text_search_parser_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458);
			match(DROP);
			setState(3459);
			match(TEXT);
			setState(3460);
			match(SEARCH);
			setState(3461);
			match(PARSER);
			setState(3464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3462);
				match(IF);
				setState(3463);
				match(EXISTS);
				}
			}

			setState(3466);
			((Drop_text_search_parser_stmtContext)_localctx).name = identifier(0);
			setState(3468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3467);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_search_template_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_template_stmtContext drop_text_search_template_stmt() throws RecognitionException {
		Drop_text_search_template_stmtContext _localctx = new Drop_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_text_search_template_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3470);
			match(DROP);
			setState(3471);
			match(TEXT);
			setState(3472);
			match(SEARCH);
			setState(3473);
			match(TEMPLATE);
			setState(3476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3474);
				match(IF);
				setState(3475);
				match(EXISTS);
				}
			}

			setState(3478);
			((Drop_text_search_template_stmtContext)_localctx).name = identifier(0);
			setState(3480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3479);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_transform_stmtContext extends ParserRuleContext {
		public IdentifierContext type_name_;
		public IdentifierContext lang_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_transform_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_transform_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_transform_stmtContext drop_transform_stmt() throws RecognitionException {
		Drop_transform_stmtContext _localctx = new Drop_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_transform_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3482);
			match(DROP);
			setState(3483);
			match(TRANSFORM);
			setState(3486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3484);
				match(IF);
				setState(3485);
				match(EXISTS);
				}
			}

			setState(3488);
			match(FOR);
			setState(3489);
			((Drop_transform_stmtContext)_localctx).type_name_ = identifier(0);
			setState(3490);
			match(LANGUAGE);
			setState(3491);
			((Drop_transform_stmtContext)_localctx).lang_name = identifier(0);
			setState(3492);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_trigger_stmtContext drop_trigger_stmt() throws RecognitionException {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3494);
			match(DROP);
			setState(3495);
			match(TRIGGER);
			setState(3498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3496);
				match(IF);
				setState(3497);
				match(EXISTS);
				}
			}

			setState(3500);
			((Drop_trigger_stmtContext)_localctx).name = identifier(0);
			setState(3501);
			match(ON);
			setState(3502);
			((Drop_trigger_stmtContext)_localctx).table_name = identifier(0);
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3503);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_type_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_stmtContext drop_type_stmt() throws RecognitionException {
		Drop_type_stmtContext _localctx = new Drop_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_drop_type_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			match(DROP);
			setState(3507);
			match(TYPE);
			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3508);
				match(IF);
				setState(3509);
				match(EXISTS);
				}
			}

			setState(3512);
			((Drop_type_stmtContext)_localctx).names = identifier_list();
			setState(3514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3513);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_user_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_stmtContext drop_user_stmt() throws RecognitionException {
		Drop_user_stmtContext _localctx = new Drop_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_drop_user_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3516);
			match(DROP);
			setState(3517);
			match(USER);
			setState(3520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3518);
				match(IF);
				setState(3519);
				match(EXISTS);
				}
			}

			setState(3522);
			((Drop_user_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_user_mapping_stmtContext extends ParserRuleContext {
		public Name_Context user_name;
		public IdentifierContext server_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Drop_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_mapping_stmtContext drop_user_mapping_stmt() throws RecognitionException {
		Drop_user_mapping_stmtContext _localctx = new Drop_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_drop_user_mapping_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524);
			match(DROP);
			setState(3525);
			match(USER);
			setState(3526);
			match(MAPPING);
			setState(3529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3527);
				match(IF);
				setState(3528);
				match(EXISTS);
				}
			}

			setState(3531);
			match(FOR);
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3532);
				((Drop_user_mapping_stmtContext)_localctx).user_name = name_();
				}
				break;
			case 2:
				{
				setState(3533);
				match(USER);
				}
				break;
			case 3:
				{
				setState(3534);
				match(CURRENT_USER);
				}
				break;
			case 4:
				{
				setState(3535);
				match(SESSION_USER);
				}
				break;
			case 5:
				{
				setState(3536);
				match(PUBLIC);
				}
				break;
			}
			setState(3539);
			match(SERVER);
			setState(3540);
			((Drop_user_mapping_stmtContext)_localctx).server_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_stmtContext drop_view_stmt() throws RecognitionException {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_drop_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			match(DROP);
			setState(3543);
			match(VIEW);
			setState(3546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(3544);
				match(IF);
				setState(3545);
				match(EXISTS);
				}
			}

			setState(3548);
			((Drop_view_stmtContext)_localctx).names = identifier_list();
			setState(3550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3549);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Execute_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_stmtContext execute_stmt() throws RecognitionException {
		Execute_stmtContext _localctx = new Execute_stmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_execute_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			match(EXECUTE);
			setState(3553);
			((Execute_stmtContext)_localctx).name = identifier(0);
			setState(3555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3554);
				expr_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_stmtContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Create_table_as_stmtContext create_table_as_stmt() {
			return getRuleContext(Create_table_as_stmtContext.class,0);
		}
		public Create_materialized_view_stmtContext create_materialized_view_stmt() {
			return getRuleContext(Create_materialized_view_stmtContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Explain_parameterContext> explain_parameter() {
			return getRuleContexts(Explain_parameterContext.class);
		}
		public Explain_parameterContext explain_parameter(int i) {
			return getRuleContext(Explain_parameterContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Explain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_stmtContext explain_stmt() throws RecognitionException {
		Explain_stmtContext _localctx = new Explain_stmtContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_explain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				{
				setState(3557);
				match(EXPLAIN);
				setState(3559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(3558);
					match(ANALYZE);
					}
				}

				setState(3562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(3561);
					match(VERBOSE);
					}
				}

				}
				}
				break;
			case 2:
				{
				{
				setState(3564);
				match(EXPLAIN);
				setState(3565);
				match(OPEN_PAREN);
				setState(3566);
				explain_parameter();
				setState(3571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3567);
					match(COMMA);
					setState(3568);
					explain_parameter();
					}
					}
					setState(3573);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3574);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
			setState(3587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				{
				setState(3578);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3579);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(3580);
				update_stmt();
				}
				break;
			case 4:
				{
				setState(3581);
				delete_stmt();
				}
				break;
			case 5:
				{
				setState(3582);
				values_stmt();
				}
				break;
			case 6:
				{
				setState(3583);
				execute_stmt();
				}
				break;
			case 7:
				{
				setState(3584);
				declare_stmt();
				}
				break;
			case 8:
				{
				setState(3585);
				create_table_as_stmt();
				}
				break;
			case 9:
				{
				setState(3586);
				create_materialized_view_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Fetch_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_stmtContext fetch_stmt() throws RecognitionException {
		Fetch_stmtContext _localctx = new Fetch_stmtContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_fetch_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Grant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrant_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrant_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_stmtContext grant_stmt() throws RecognitionException {
		Grant_stmtContext _localctx = new Grant_stmtContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_grant_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Import_foreign_schema_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Import_foreign_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_foreign_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_foreign_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_foreign_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_foreign_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_foreign_schema_stmtContext import_foreign_schema_stmt() throws RecognitionException {
		Import_foreign_schema_stmtContext _localctx = new Import_foreign_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_import_foreign_schema_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_stmtContext extends ParserRuleContext {
		public IdentifierContext alias_;
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLParser.VALUE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode CONFLICT() { return getToken(PostgreSQLParser.CONFLICT, 0); }
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public List<Where_clauseContext> where_clause() {
			return getRuleContexts(Where_clauseContext.class);
		}
		public Where_clauseContext where_clause(int i) {
			return getRuleContext(Where_clauseContext.class,i);
		}
		public TerminalNode SYSTEM() { return getToken(PostgreSQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Updater_clauseContext updater_clause() {
			return getRuleContext(Updater_clauseContext.class,0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_insert_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3595);
				with_clause();
				}
			}

			setState(3598);
			match(INSERT);
			setState(3599);
			match(INTO);
			setState(3600);
			table_name_();
			setState(3603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3601);
				match(AS);
				setState(3602);
				((Insert_stmtContext)_localctx).alias_ = identifier(0);
				}
			}

			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				setState(3605);
				match(OPEN_PAREN);
				setState(3606);
				name_list();
				setState(3607);
				match(CLOSE_PAREN);
				}
				break;
			}
			setState(3616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(3611);
				match(OVERRIDING);
				setState(3613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYSTEM || _la==USER) {
					{
					setState(3612);
					_la = _input.LA(1);
					if ( !(_la==SYSTEM || _la==USER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3615);
				match(VALUE);
				}
			}

			setState(3622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3618);
				match(DEFAULT);
				setState(3619);
				match(VALUES);
				}
				break;
			case 2:
				{
				setState(3620);
				select_stmt();
				}
				break;
			case 3:
				{
				setState(3621);
				values_stmt();
				}
				break;
			}
			setState(3651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3624);
				match(ON);
				setState(3625);
				match(CONFLICT);
				setState(3630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3626);
					match(OPEN_PAREN);
					setState(3627);
					column_name();
					setState(3628);
					match(CLOSE_PAREN);
					}
				}

				setState(3635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3632);
					match(ON);
					setState(3633);
					match(CONSTRAINT);
					setState(3634);
					column_name();
					}
				}

				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3637);
					where_clause();
					}
				}

				setState(3649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					{
					setState(3640);
					match(DO);
					setState(3641);
					match(NOTHING);
					}
					}
					break;
				case 2:
					{
					{
					setState(3642);
					match(DO);
					setState(3643);
					match(UPDATE);
					setState(3644);
					match(SET);
					setState(3645);
					updater_clause();
					setState(3647);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(3646);
						where_clause();
						}
					}

					}
					}
					break;
				}
				}
			}

			setState(3654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(3653);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Listen_stmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Listen_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListen_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListen_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListen_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Listen_stmtContext listen_stmt() throws RecognitionException {
		Listen_stmtContext _localctx = new Listen_stmtContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_listen_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3656);
			match(LISTEN);
			setState(3657);
			((Listen_stmtContext)_localctx).channel = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Load_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Load_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoad_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoad_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoad_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_stmtContext load_stmt() throws RecognitionException {
		Load_stmtContext _localctx = new Load_stmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_load_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lock_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode LOCK() { return getToken(PostgreSQLParser.LOCK, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Lock_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_stmtContext lock_stmt() throws RecognitionException {
		Lock_stmtContext _localctx = new Lock_stmtContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_lock_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3661);
			match(LOCK);
			setState(3663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3662);
				match(TABLE);
				}
			}

			setState(3666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(3665);
				match(ONLY);
				}
			}

			setState(3668);
			((Lock_stmtContext)_localctx).name = name_();
			setState(3670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(3669);
				match(STAR);
				}
			}

			setState(3692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3672);
				match(IN);
				setState(3689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3673);
					match(ACCESS);
					setState(3674);
					match(SHARE);
					}
					break;
				case 2:
					{
					setState(3675);
					match(ROW);
					setState(3676);
					match(SHARE);
					}
					break;
				case 3:
					{
					setState(3677);
					match(ROW);
					setState(3678);
					match(EXCLUSIVE);
					}
					break;
				case 4:
					{
					setState(3679);
					match(SHARE);
					setState(3680);
					match(UPDATE);
					setState(3681);
					match(EXCLUSIVE);
					}
					break;
				case 5:
					{
					setState(3682);
					match(SHARE);
					}
					break;
				case 6:
					{
					setState(3683);
					match(SHARE);
					setState(3684);
					match(ROW);
					setState(3685);
					match(EXCLUSIVE);
					}
					break;
				case 7:
					{
					setState(3686);
					match(EXCLUSIVE);
					}
					break;
				case 8:
					{
					setState(3687);
					match(ACCESS);
					setState(3688);
					match(EXCLUSIVE);
					}
					break;
				}
				setState(3691);
				match(MODE);
				}
			}

			setState(3695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(3694);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Move_stmtContext extends ParserRuleContext {
		public Name_Context cursor_name;
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLParser.ABSOLUTE, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSQLParser.RELATIVE, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public Move_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMove_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMove_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMove_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Move_stmtContext move_stmt() throws RecognitionException {
		Move_stmtContext _localctx = new Move_stmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_move_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			match(MOVE);
			setState(3721);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3716);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(3698);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(3699);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(3700);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(3701);
					match(LAST);
					}
					break;
				case ABSOLUTE:
					{
					setState(3702);
					match(ABSOLUTE);
					setState(3703);
					match(INTEGER);
					}
					break;
				case RELATIVE:
					{
					setState(3704);
					match(RELATIVE);
					setState(3705);
					match(INTEGER_LITERAL);
					}
					break;
				case INTEGER_LITERAL:
					{
					setState(3706);
					match(INTEGER_LITERAL);
					}
					break;
				case ALL:
					{
					setState(3707);
					match(ALL);
					}
					break;
				case FORWARD:
					{
					setState(3708);
					match(FORWARD);
					setState(3710);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==INTEGER_LITERAL) {
						{
						setState(3709);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==INTEGER_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				case BACKWARD:
					{
					setState(3712);
					match(BACKWARD);
					setState(3714);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==INTEGER_LITERAL) {
						{
						setState(3713);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==INTEGER_LITERAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(3718);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
			setState(3723);
			((Move_stmtContext)_localctx).cursor_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notify_stmtContext extends ParserRuleContext {
		public Name_Context channel;
		public Token payload;
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public Notify_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_stmtContext notify_stmt() throws RecognitionException {
		Notify_stmtContext _localctx = new Notify_stmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_notify_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			match(NOTIFY);
			setState(3726);
			((Notify_stmtContext)_localctx).channel = name_();
			setState(3729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3727);
				match(COMMA);
				setState(3728);
				((Notify_stmtContext)_localctx).payload = match(SINGLEQ_STRING_LITERAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prepare_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrepare_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrepare_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_stmtContext prepare_stmt() throws RecognitionException {
		Prepare_stmtContext _localctx = new Prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_prepare_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3731);
			match(PREPARE);
			setState(3732);
			((Prepare_stmtContext)_localctx).name = identifier(0);
			setState(3737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3733);
				match(OPEN_PAREN);
				setState(3734);
				data_type_list();
				setState(3735);
				match(CLOSE_PAREN);
				}
			}

			setState(3739);
			match(AS);
			setState(3745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3740);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(3741);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(3742);
				update_stmt();
				}
				break;
			case 4:
				{
				setState(3743);
				delete_stmt();
				}
				break;
			case 5:
				{
				setState(3744);
				values_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prepare_transaction_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Prepare_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrepare_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrepare_transaction_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrepare_transaction_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_transaction_stmtContext prepare_transaction_stmt() throws RecognitionException {
		Prepare_transaction_stmtContext _localctx = new Prepare_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_prepare_transaction_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3747);
			match(PREPARE);
			setState(3748);
			match(TRANSACTION);
			setState(3749);
			((Prepare_transaction_stmtContext)_localctx).name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reassign_owned_stmtContext extends ParserRuleContext {
		public TerminalNode REASSIGN() { return getToken(PostgreSQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> CURRENT_USER() { return getTokens(PostgreSQLParser.CURRENT_USER); }
		public TerminalNode CURRENT_USER(int i) {
			return getToken(PostgreSQLParser.CURRENT_USER, i);
		}
		public List<TerminalNode> SESSION_USER() { return getTokens(PostgreSQLParser.SESSION_USER); }
		public TerminalNode SESSION_USER(int i) {
			return getToken(PostgreSQLParser.SESSION_USER, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Reassign_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassign_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassign_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassign_owned_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassign_owned_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reassign_owned_stmtContext reassign_owned_stmt() throws RecognitionException {
		Reassign_owned_stmtContext _localctx = new Reassign_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_reassign_owned_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			match(REASSIGN);
			setState(3752);
			match(OWNED);
			setState(3753);
			match(BY);
			{
			setState(3757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3754);
				identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(3755);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3756);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3759);
				match(COMMA);
				setState(3763);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(3760);
					identifier(0);
					}
					break;
				case CURRENT_USER:
					{
					setState(3761);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(3762);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(3769);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(3770);
			match(TO);
			setState(3774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3771);
				identifier(0);
				}
				break;
			case CURRENT_USER:
				{
				setState(3772);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3773);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Refresh_materialized_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Refresh_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefresh_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefresh_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefresh_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() throws RecognitionException {
		Refresh_materialized_view_stmtContext _localctx = new Refresh_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_refresh_materialized_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reindex_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLParser.SYSTEM, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_stmtContext reindex_stmt() throws RecognitionException {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_reindex_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(REINDEX);
			setState(3782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3779);
				match(OPEN_PAREN);
				setState(3780);
				match(VERBOSE);
				setState(3781);
				match(CLOSE_PAREN);
				}
			}

			setState(3784);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3785);
			((Reindex_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Release_savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public Release_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelease_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelease_savepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelease_savepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_savepoint_stmtContext release_savepoint_stmt() throws RecognitionException {
		Release_savepoint_stmtContext _localctx = new Release_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_release_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787);
			match(RELEASE);
			setState(3789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				{
				setState(3788);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3791);
			((Release_savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Reset_stmtContext extends ParserRuleContext {
		public IdentifierContext configuration_parameter;
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reset_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_stmtContext reset_stmt() throws RecognitionException {
		Reset_stmtContext _localctx = new Reset_stmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_reset_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			match(RESET);
			setState(3796);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(3794);
				((Reset_stmtContext)_localctx).configuration_parameter = identifier(0);
				}
				break;
			case ALL:
				{
				setState(3795);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Revoke_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevoke_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevoke_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevoke_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_stmtContext revoke_stmt() throws RecognitionException {
		Revoke_stmtContext _localctx = new Revoke_stmtContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_revoke_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3798);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_stmtContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_stmtContext rollback_stmt() throws RecognitionException {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_rollback_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(ROLLBACK);
			setState(3802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(3801);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_prepared_stmtContext extends ParserRuleContext {
		public Token transaction_id;
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode PREPARED() { return getToken(PostgreSQLParser.PREPARED, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public Rollback_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_prepared_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_prepared_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_prepared_stmtContext rollback_prepared_stmt() throws RecognitionException {
		Rollback_prepared_stmtContext _localctx = new Rollback_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_rollback_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3804);
			match(ROLLBACK);
			setState(3805);
			match(PREPARED);
			setState(3806);
			((Rollback_prepared_stmtContext)_localctx).transaction_id = match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_to_savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Rollback_to_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_to_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_to_savepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_to_savepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() throws RecognitionException {
		Rollback_to_savepoint_stmtContext _localctx = new Rollback_to_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_rollback_to_savepoint_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3808);
			match(ROLLBACK);
			setState(3810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSACTION || _la==WORK) {
				{
				setState(3809);
				_la = _input.LA(1);
				if ( !(_la==TRANSACTION || _la==WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3812);
			match(TO);
			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(3813);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3816);
			((Rollback_to_savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_stmtContext extends ParserRuleContext {
		public IdentifierContext savepoint_name;
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSavepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSavepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSavepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_stmtContext savepoint_stmt() throws RecognitionException {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3818);
			match(SAVEPOINT);
			setState(3819);
			((Savepoint_stmtContext)_localctx).savepoint_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_label_stmtContext extends ParserRuleContext {
		public Name_Context provider;
		public IdentifierContext object_name;
		public IdentifierContext table_name;
		public Column_nameContext column_name_;
		public IdentifierContext aggregate_name;
		public IdentifierContext function_name;
		public Token large_object_oid;
		public Token label;
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(PostgreSQLParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public TerminalNode COLUMN() { return getToken(PostgreSQLParser.COLUMN, 0); }
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Func_sigContext func_sig() {
			return getRuleContext(Func_sigContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(PostgreSQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLParser.OBJECT, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public Security_label_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_stmtContext security_label_stmt() throws RecognitionException {
		Security_label_stmtContext _localctx = new Security_label_stmtContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_security_label_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(SECURITY);
			setState(3822);
			match(LABEL);
			setState(3825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3823);
				match(FOR);
				setState(3824);
				((Security_label_stmtContext)_localctx).provider = name_();
				}
			}

			setState(3827);
			match(ON);
			setState(3882);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(3828);
				match(TABLE);
				setState(3829);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case COLUMN:
				{
				setState(3830);
				match(COLUMN);
				setState(3831);
				((Security_label_stmtContext)_localctx).table_name = identifier(0);
				setState(3832);
				match(DOT);
				setState(3833);
				((Security_label_stmtContext)_localctx).column_name_ = column_name();
				}
				break;
			case AGGREGATE:
				{
				setState(3835);
				match(AGGREGATE);
				setState(3836);
				((Security_label_stmtContext)_localctx).aggregate_name = identifier(0);
				setState(3837);
				match(OPEN_PAREN);
				setState(3838);
				aggregate_signature();
				setState(3839);
				match(CLOSE_PAREN);
				}
				break;
			case DATABASE:
				{
				setState(3841);
				match(DATABASE);
				setState(3842);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case DOMAIN:
				{
				setState(3843);
				match(DOMAIN);
				setState(3844);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case EVENT:
				{
				setState(3845);
				match(EVENT);
				setState(3846);
				match(TRIGGER);
				setState(3847);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case FOREIGN:
				{
				setState(3848);
				match(FOREIGN);
				setState(3849);
				match(TABLE);
				setState(3850);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case FUNCTION:
				{
				setState(3851);
				match(FUNCTION);
				setState(3852);
				((Security_label_stmtContext)_localctx).function_name = identifier(0);
				setState(3853);
				func_sig();
				}
				break;
			case LARGE:
				{
				setState(3855);
				match(LARGE);
				setState(3856);
				match(OBJECT);
				setState(3857);
				((Security_label_stmtContext)_localctx).large_object_oid = match(INTEGER_LITERAL);
				}
				break;
			case MATERIALIZED:
				{
				setState(3858);
				match(MATERIALIZED);
				setState(3859);
				match(VIEW);
				setState(3860);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				{
				setState(3862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3861);
					match(PROCEDURAL);
					}
				}

				setState(3864);
				match(LANGUAGE);
				setState(3865);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case PUBLICATION:
				{
				setState(3866);
				match(PUBLICATION);
				setState(3867);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case ROLE:
				{
				setState(3868);
				match(ROLE);
				setState(3869);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SCHEMA:
				{
				setState(3870);
				match(SCHEMA);
				setState(3871);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SEQUENCE:
				{
				setState(3872);
				match(SEQUENCE);
				setState(3873);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case SUBSCRIPTION:
				{
				setState(3874);
				match(SUBSCRIPTION);
				setState(3875);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case TABLESPACE:
				{
				setState(3876);
				match(TABLESPACE);
				setState(3877);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case TYPE:
				{
				setState(3878);
				match(TYPE);
				setState(3879);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			case VIEW:
				{
				setState(3880);
				match(VIEW);
				setState(3881);
				((Security_label_stmtContext)_localctx).object_name = identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3884);
			match(IS);
			setState(3885);
			((Security_label_stmtContext)_localctx).label = match(SINGLEQ_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_stmtContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Selector_clauseContext selector_clause() {
			return getRuleContext(Selector_clauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_stmtContext select_stmt() throws RecognitionException {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_select_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3887);
				with_clause();
				}
			}

			setState(3916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				{
				setState(3890);
				match(SELECT);
				setState(3891);
				selector_clause();
				setState(3893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(3892);
					from_clause();
					}
					break;
				}
				}
				}
				break;
			case TABLE:
				{
				{
				setState(3895);
				match(TABLE);
				setState(3897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(3896);
					match(ONLY);
					}
				}

				setState(3899);
				table_name_();
				setState(3901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(3900);
					match(STAR);
					}
					break;
				}
				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(3904); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3903);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3906); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3908);
				select_stmt();
				setState(3910); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3909);
					match(CLOSE_PAREN);
					}
					}
					setState(3912); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(3914);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3918);
				where_clause();
				}
				break;
			}
			setState(3922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				{
				setState(3921);
				group_by_clause();
				}
				break;
			}
			setState(3925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				{
				setState(3924);
				having_clause();
				}
				break;
			}
			setState(3928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3927);
				window_clause();
				}
				break;
			}
			setState(3931);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3930);
				combine_clause();
				}
				break;
			}
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3933);
				order_by_clause();
				}
				break;
			}
			setState(3937);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3936);
				limit_clause();
				}
				break;
			}
			setState(3940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3939);
				offset_clause();
				}
				break;
			}
			setState(3943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3942);
				fetch_clause();
				}
				break;
			}
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(3945);
				for_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_into_stmtContext extends ParserRuleContext {
		public Table_name_Context new_table;
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Selector_clauseContext selector_clause() {
			return getRuleContext(Selector_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PostgreSQLParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode UNLOGGED() { return getToken(PostgreSQLParser.UNLOGGED, 0); }
		public Select_into_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_into_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_into_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_into_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_into_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_into_stmtContext select_into_stmt() throws RecognitionException {
		Select_into_stmtContext _localctx = new Select_into_stmtContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_select_into_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3948);
				with_clause();
				}
			}

			setState(3985);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				{
				setState(3951);
				match(SELECT);
				setState(3952);
				selector_clause();
				setState(3953);
				match(INTO);
				setState(3955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(3954);
					_la = _input.LA(1);
					if ( !(_la==TEMP || _la==TEMPORARY || _la==UNLOGGED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(3957);
					match(TABLE);
					}
				}

				setState(3960);
				((Select_into_stmtContext)_localctx).new_table = table_name_();
				setState(3962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3961);
					from_clause();
					}
				}

				}
				}
				break;
			case TABLE:
				{
				{
				setState(3964);
				match(TABLE);
				setState(3966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(3965);
					match(ONLY);
					}
				}

				setState(3968);
				table_name_();
				setState(3970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAR) {
					{
					setState(3969);
					match(STAR);
					}
				}

				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(3973); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3972);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3975); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,430,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3977);
				select_stmt();
				setState(3979); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3978);
					match(CLOSE_PAREN);
					}
					}
					setState(3981); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(3983);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3987);
				where_clause();
				}
			}

			setState(3991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3990);
				group_by_clause();
				}
			}

			setState(3994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3993);
				having_clause();
				}
			}

			setState(3997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3996);
				window_clause();
				}
			}

			setState(4000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				setState(3999);
				combine_clause();
				}
			}

			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4002);
				order_by_clause();
				}
			}

			setState(4006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(4005);
				limit_clause();
				}
			}

			setState(4009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFSET) {
				{
				setState(4008);
				offset_clause();
				}
			}

			setState(4012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FETCH) {
				{
				setState(4011);
				fetch_clause();
				}
			}

			setState(4015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4014);
				for_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<With_exprContext> with_expr() {
			return getRuleContexts(With_exprContext.class);
		}
		public With_exprContext with_expr(int i) {
			return getRuleContext(With_exprContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public With_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_clauseContext with_clause() throws RecognitionException {
		With_clauseContext _localctx = new With_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_with_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(WITH);
			setState(4019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(4018);
				match(RECURSIVE);
				}
				break;
			}
			setState(4021);
			with_expr();
			setState(4026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4022);
				match(COMMA);
				setState(4023);
				with_expr();
				}
				}
				setState(4028);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_exprContext extends ParserRuleContext {
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public With_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_exprContext with_expr() throws RecognitionException {
		With_exprContext _localctx = new With_exprContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_with_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4029);
			table_name_();
			setState(4034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(4030);
				match(OPEN_PAREN);
				setState(4031);
				name_list();
				setState(4032);
				match(CLOSE_PAREN);
				}
			}

			setState(4036);
			match(AS);
			setState(4037);
			match(OPEN_PAREN);
			setState(4043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(4038);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(4039);
				insert_stmt();
				}
				break;
			case 3:
				{
				setState(4040);
				delete_stmt();
				}
				break;
			case 4:
				{
				setState(4041);
				update_stmt();
				}
				break;
			case 5:
				{
				setState(4042);
				values_stmt();
				}
				break;
			}
			setState(4045);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_stmtContext extends ParserRuleContext {
		public IdentifierContext configuration_parameter;
		public Param_valueContext value;
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public List<TerminalNode> LOCAL() { return getTokens(PostgreSQLParser.LOCAL); }
		public TerminalNode LOCAL(int i) {
			return getToken(PostgreSQLParser.LOCAL, i);
		}
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public Set_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_stmtContext set_stmt() throws RecognitionException {
		Set_stmtContext _localctx = new Set_stmtContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_set_stmt);
		int _la;
		try {
			setState(4068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4047);
				match(SET);
				setState(4049);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(4048);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4051);
				((Set_stmtContext)_localctx).configuration_parameter = identifier(0);
				setState(4052);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4055);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WHITESPACE:
				case A_:
				case ABORT:
				case ABS:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADA:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALLOCATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ANY:
				case ARE:
				case ASENSITIVE:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATOMIC:
				case ATTRIBUTE:
				case ATTRIBUTES:
				case AVG:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BERNOULLI:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BIT_LENGTH:
				case BLOB:
				case BOOLEAN:
				case BREADTH:
				case BY:
				case C_:
				case CACHE:
				case CALL:
				case CALLED:
				case CARDINALITY:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CHAIN:
				case CHAR:
				case CHAR_LENGTH:
				case CHARACTER:
				case CHARACTER_LENGTH:
				case CHARACTER_SET_CATALOG:
				case CHARACTER_SET_NAME:
				case CHARACTER_SET_SCHEMA:
				case CHARACTERISTICS:
				case CHARACTERS:
				case CHECKPOINT:
				case CLASS:
				case CLASS_ORIGIN:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COBOL:
				case COLLATION_CATALOG:
				case COLLATION_NAME:
				case COLLATION_SCHEMA:
				case COLLECT:
				case COLUMN_NAME:
				case COMMAND_FUNCTION:
				case COMMAND_FUNCTION_CODE:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case CONDITION:
				case CONDITION_NUMBER:
				case CONNECT:
				case CONNECTION:
				case CONNECTION_NAME:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTAINS:
				case CONTINUE:
				case CONVERSION:
				case CONVERT:
				case COPY:
				case CORR:
				case CORRESPONDING:
				case COUNT:
				case COVAR_POP:
				case COVAR_SAMP:
				case CSV:
				case CUBE:
				case CUME_DIST:
				case CURRENT:
				case CURRENT_DEFAULT_TRANSFORM_GROUP:
				case CURRENT_PATH:
				case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
				case CURSOR:
				case CURSOR_NAME:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DATETIME_INTERVAL_CODE:
				case DATETIME_INTERVAL_PRECISION:
				case DAY:
				case DEALLOCATE:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINED:
				case DEFINER:
				case DEGREE:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DENSE_RANK:
				case DEPTH:
				case DEREF:
				case DERIVED:
				case DESCRIBE:
				case DESCRIPTOR:
				case DETERMINISTIC:
				case DIAGNOSTICS:
				case DICTIONARY:
				case DISCONNECT:
				case DISPATCH:
				case DOMAIN:
				case DOUBLE:
				case DYNAMIC:
				case DYNAMIC_FUNCTION:
				case DYNAMIC_FUNCTION_CODE:
				case EACH:
				case ELEMENT:
				case ENCODING:
				case ENCRYPTED:
				case END:
				case EQUALS:
				case ESCAPE:
				case EVERY:
				case EXCEPTION:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXEC:
				case EXECUTE:
				case EXISTS:
				case EXP:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case EXTRACT:
				case FALSE:
				case FILTER:
				case FINAL:
				case FIRST:
				case FLOAT:
				case FLOOR:
				case FOLLOWING:
				case FORCE:
				case FORMAT:
				case FORTRAN:
				case FORWARD:
				case FOUND:
				case FREE:
				case FUNCTION:
				case FUSION:
				case G_:
				case GENERAL:
				case GENERATED:
				case GET:
				case GLOBAL:
				case GO:
				case GOTO:
				case GRANTED:
				case GREATEST:
				case GROUPING:
				case HANDLER:
				case HIERARCHY:
				case HOLD:
				case HOST:
				case HOUR:
				case IDENTITY:
				case IGNORE:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLEMENTATION:
				case IMPLICIT:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDICATOR:
				case INHERITS:
				case INOUT:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTANCE:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERSECTION:
				case INTERVAL:
				case INVOKER:
				case ISOLATION:
				case K_:
				case KEY:
				case KEY_MEMBER:
				case KEY_TYPE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAST:
				case LEFT:
				case LENGTH:
				case LEVEL:
				case LISTEN:
				case LN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCATOR:
				case LOCK:
				case LOCKED:
				case LOWER:
				case M_:
				case MAP:
				case MATCH:
				case MATCHED:
				case MAX:
				case MAXVALUE:
				case MEMBER:
				case MERGE:
				case MESSAGE_LENGTH:
				case MESSAGE_OCTET_LENGTH:
				case MESSAGE_TEXT:
				case METHOD:
				case MIN:
				case MINUTE:
				case MINVALUE:
				case MOD:
				case MODE:
				case MODIFIES:
				case MODULE:
				case MONTH:
				case MORE_:
				case MOVE:
				case MULTISET:
				case MUMPS:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NCLOB:
				case NESTING:
				case NEW:
				case NEXT:
				case NO:
				case NONE:
				case NORMALIZE:
				case NORMALIZED:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLABLE:
				case NULLIF:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case OBJECT:
				case OCTET_LENGTH:
				case OCTETS:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case ON:
				case OPEN:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDERING:
				case ORDINALITY:
				case OTHERS:
				case OUT:
				case OUTPUT:
				case OVER:
				case OVERLAY:
				case OVERRIDING:
				case OWNER:
				case PAD:
				case PARAMETER:
				case PARAMETER_MODE:
				case PARAMETER_NAME:
				case PARAMETER_ORDINAL_POSITION:
				case PARAMETER_SPECIFIC_CATALOG:
				case PARAMETER_SPECIFIC_NAME:
				case PARAMETER_SPECIFIC_SCHEMA:
				case PARTIAL:
				case PARTITION:
				case PASCAL:
				case PASSWORD:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case PLAIN:
				case PLI:
				case POSITION:
				case POWER:
				case PRECEDING:
				case PRECISION:
				case PREPARE:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PUBLIC:
				case QUOTE:
				case RANGE:
				case RANK:
				case READ:
				case READS:
				case REAL:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REGR_AVGX:
				case REGR_AVGY:
				case REGR_COUNT:
				case REGR_INTERCEPT:
				case REGR_SLOPE:
				case REGR_SXX:
				case REGR_SXY:
				case REGR_SYY:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RESULT:
				case RETURN:
				case RETURNED_CARDINALITY:
				case RETURNED_LENGTH:
				case RETURNED_OCTET_LENGTH:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REVOKE:
				case RIGHT:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINE_CATALOG:
				case ROUTINE_NAME:
				case ROUTINE_SCHEMA:
				case ROW:
				case ROW_COUNT:
				case ROW_NUMBER:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCALE:
				case SCHEMA:
				case SCHEMA_NAME:
				case SCOPE:
				case SCOPE_CATALOG:
				case SCOPE_NAME:
				case SCOPE_SCHEMA:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECTION:
				case SECURITY:
				case SELF:
				case SENSITIVE:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER_NAME:
				case SESSION:
				case SET:
				case SETOF:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SIZE:
				case SMALLINT:
				case SOME:
				case SOURCE:
				case SPACE:
				case SPECIFIC:
				case SPECIFIC_NAME:
				case SPECIFICTYPE:
				case SQL:
				case SQLCODE:
				case SQLERROR:
				case SQLEXCEPTION:
				case SQLSTATE:
				case SQLWARNING:
				case SQRT:
				case STABLE:
				case START:
				case STATE:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STRICT:
				case STRUCTURE:
				case STYLE:
				case SUBCLASS_ORIGIN:
				case SUBMULTISET:
				case SUBSTRING:
				case SUM:
				case SYSID:
				case SYSTEM:
				case SYSTEM_USER:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TOP_LEVEL_COUNT:
				case TRANSACTION:
				case TRANSACTION_ACTIVE:
				case TRANSACTIONS_COMMITTED:
				case TRANSACTIONS_ROLLED_BACK:
				case TRANSFORM:
				case TRANSFORMS:
				case TRANSLATE:
				case TRANSLATION:
				case TREAT:
				case TRIGGER:
				case TRIGGER_CATALOG:
				case TRIGGER_NAME:
				case TRIGGER_SCHEMA:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case UESCAPE:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDER:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNNAMED:
				case UNNEST:
				case UNTIL:
				case UPDATE:
				case UPPER:
				case USAGE:
				case USER_DEFINED_TYPE_CATALOG:
				case USER_DEFINED_TYPE_CODE:
				case USER_DEFINED_TYPE_NAME:
				case USER_DEFINED_TYPE_SCHEMA:
				case VACUUM:
				case VALID:
				case VALIDATOR:
				case VALUE:
				case VALUES:
				case VAR_POP:
				case VAR_SAMP:
				case VARCHAR:
				case VARYING:
				case VIEW:
				case VOLATILE:
				case WHENEVER:
				case WIDTH_BUCKET:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRITE:
				case YEAR:
				case YES:
				case ZONE:
				case ABSTIME:
				case BIGSERIAL:
				case BIT_VARYING:
				case BOOL:
				case BOX:
				case BYTEA:
				case CHARACTER_VARYING:
				case CIDR:
				case CIRCLE:
				case FLOAT4:
				case FLOAT8:
				case INET:
				case INT2:
				case INT4:
				case INT8:
				case JSON:
				case JSONB:
				case LINE:
				case LSEG:
				case MACADDR:
				case MACADDR8:
				case MONEY:
				case PG_LSN:
				case POINT:
				case POLYGON:
				case RELTIME:
				case SERIAL:
				case SERIAL2:
				case SERIAL4:
				case SERIAL8:
				case SMALLSERIAL:
				case TEXT:
				case TIMESTAMPTZ:
				case TIMETZ:
				case TSQUERY:
				case TSVECTOR:
				case TXID_SNAPSHOT:
				case UUID:
				case VARBIT:
				case XML:
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
				case IDENTIFIER:
				case IDENTIFIER_UNICODE:
					{
					setState(4053);
					((Set_stmtContext)_localctx).value = param_value();
					}
					break;
				case DEFAULT:
					{
					setState(4054);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4057);
				match(SET);
				setState(4059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(4058);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4061);
				match(TIME);
				setState(4062);
				match(ZONE);
				setState(4066);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NUMERIC_LITERAL:
				case INTEGER_LITERAL:
				case SINGLEQ_STRING_LITERAL:
				case DOUBLEQ_STRING_LITERAL:
					{
					setState(4063);
					timezone();
					}
					break;
				case LOCAL:
					{
					setState(4064);
					match(LOCAL);
					}
					break;
				case DEFAULT:
					{
					setState(4065);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_constraints_stmtContext extends ParserRuleContext {
		public Identifier_listContext constraints;
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public Set_constraints_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_constraints_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_constraints_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_constraints_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraints_stmtContext set_constraints_stmt() throws RecognitionException {
		Set_constraints_stmtContext _localctx = new Set_constraints_stmtContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_set_constraints_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4070);
			match(SET);
			setState(4071);
			match(CONSTRAINTS);
			setState(4074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(4072);
				match(ALL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4073);
				((Set_constraints_stmtContext)_localctx).constraints = identifier_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4076);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role_name_;
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public Set_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_role_stmtContext set_role_stmt() throws RecognitionException {
		Set_role_stmtContext _localctx = new Set_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_set_role_stmt);
		int _la;
		try {
			setState(4089);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(4078);
				match(SET);
				setState(4080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(4079);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4082);
				match(ROLE);
				setState(4085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(4083);
					((Set_role_stmtContext)_localctx).role_name_ = role_name();
					}
					break;
				case 2:
					{
					setState(4084);
					match(NONE);
					}
					break;
				}
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4087);
				match(RESET);
				setState(4088);
				match(ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_authorization_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_session_authorization_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_authorization_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_session_authorization_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_session_authorization_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_session_authorization_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_authorization_stmtContext set_session_authorization_stmt() throws RecognitionException {
		Set_session_authorization_stmtContext _localctx = new Set_session_authorization_stmtContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_set_session_authorization_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4091);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_modeContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode DEFERRABLE() { return getToken(PostgreSQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public Transaction_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_modeContext transaction_mode() throws RecognitionException {
		Transaction_modeContext _localctx = new Transaction_modeContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_transaction_mode);
		int _la;
		try {
			setState(4112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4093);
				match(ISOLATION);
				setState(4094);
				match(LEVEL);
				setState(4102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4095);
					match(SERIALIZABLE);
					}
					break;
				case 2:
					{
					setState(4096);
					match(REPEATABLE);
					setState(4097);
					match(READ);
					}
					break;
				case 3:
					{
					setState(4098);
					match(READ);
					setState(4099);
					match(COMMITTED);
					}
					break;
				case 4:
					{
					setState(4100);
					match(READ);
					setState(4101);
					match(UNCOMMITTED);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4104);
				match(READ);
				setState(4105);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4106);
				match(READ);
				setState(4107);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4108);
					match(NOT);
					}
				}

				setState(4111);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Transaction_mode_listContext extends ParserRuleContext {
		public List<Transaction_modeContext> transaction_mode() {
			return getRuleContexts(Transaction_modeContext.class);
		}
		public Transaction_modeContext transaction_mode(int i) {
			return getRuleContext(Transaction_modeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Transaction_mode_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_mode_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTransaction_mode_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTransaction_mode_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTransaction_mode_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_mode_listContext transaction_mode_list() throws RecognitionException {
		Transaction_mode_listContext _localctx = new Transaction_mode_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_transaction_mode_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4114);
			transaction_mode();
			setState(4119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4115);
				match(COMMA);
				setState(4116);
				transaction_mode();
				}
				}
				setState(4121);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_transaction_stmtContext extends ParserRuleContext {
		public Token snapshot_id;
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public Transaction_mode_listContext transaction_mode_list() {
			return getRuleContext(Transaction_mode_listContext.class,0);
		}
		public TerminalNode SNAPSHOT() { return getToken(PostgreSQLParser.SNAPSHOT, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Set_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_transaction_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_transaction_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_stmtContext set_transaction_stmt() throws RecognitionException {
		Set_transaction_stmtContext _localctx = new Set_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_set_transaction_stmt);
		try {
			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4122);
				match(SET);
				setState(4123);
				match(TRANSACTION);
				setState(4124);
				transaction_mode_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4125);
				match(SET);
				setState(4126);
				match(TRANSACTION);
				setState(4127);
				match(SNAPSHOT);
				setState(4128);
				((Set_transaction_stmtContext)_localctx).snapshot_id = match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4129);
				match(SET);
				setState(4130);
				match(SESSION);
				setState(4131);
				match(CHARACTERISTICS);
				setState(4132);
				match(AS);
				setState(4133);
				match(TRANSACTION);
				setState(4134);
				transaction_mode_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Show_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterShow_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitShow_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitShow_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_stmtContext show_stmt() throws RecognitionException {
		Show_stmtContext _localctx = new Show_stmtContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_show_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			match(SHOW);
			setState(4142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(4138);
				((Show_stmtContext)_localctx).name = identifier(0);
				}
				break;
			case 2:
				{
				setState(4139);
				match(TIME);
				setState(4140);
				match(ZONE);
				}
				break;
			case 3:
				{
				setState(4141);
				match(ALL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_stmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<TerminalNode> ONLY() { return getTokens(PostgreSQLParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PostgreSQLParser.ONLY, i);
		}
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(PostgreSQLParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSQLParser.CONTINUE, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_truncate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			match(TRUNCATE);
			setState(4146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(4145);
				match(TABLE);
				}
			}

			setState(4149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4148);
				match(ONLY);
				}
			}

			setState(4151);
			table_name_();
			setState(4153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(4152);
				match(STAR);
				}
			}

			setState(4160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4155);
				match(COMMA);
				setState(4157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(4156);
					match(ONLY);
					}
				}

				setState(4159);
				identifier_list();
				}
			}

			setState(4164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTINUE || _la==RESTART) {
				{
				setState(4162);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==RESTART) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4163);
				match(IDENTITY);
				}
			}

			setState(4167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4166);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unlisten_stmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Unlisten_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlisten_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlisten_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlisten_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unlisten_stmtContext unlisten_stmt() throws RecognitionException {
		Unlisten_stmtContext _localctx = new Unlisten_stmtContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_unlisten_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4169);
			match(UNLISTEN);
			setState(4172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4170);
				((Unlisten_stmtContext)_localctx).channel = identifier(0);
				}
				break;
			case STAR:
				{
				setState(4171);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_stmtContext extends ParserRuleContext {
		public IdentifierContext alias_;
		public IdentifierContext cursor_name_;
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public Updater_clauseContext updater_clause() {
			return getRuleContext(Updater_clauseContext.class,0);
		}
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Returning_clauseContext returning_clause() {
			return getRuleContext(Returning_clauseContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_update_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4174);
				with_clause();
				}
			}

			setState(4177);
			match(UPDATE);
			setState(4179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4178);
				match(ONLY);
				}
			}

			setState(4181);
			table_name_();
			setState(4183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAR) {
				{
				setState(4182);
				match(STAR);
				}
			}

			setState(4189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(4186);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4185);
					match(AS);
					}
				}

				setState(4188);
				((Update_stmtContext)_localctx).alias_ = identifier(0);
				}
				break;
			}
			setState(4191);
			match(SET);
			setState(4192);
			updater_clause();
			setState(4194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4193);
				from_clause();
				}
			}

			setState(4201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4196);
				where_clause();
				}
				break;
			case 2:
				{
				{
				setState(4197);
				match(WHERE);
				setState(4198);
				match(CURRENT);
				setState(4199);
				match(OF);
				setState(4200);
				((Update_stmtContext)_localctx).cursor_name_ = identifier(0);
				}
				}
				break;
			}
			setState(4204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(4203);
				returning_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_optContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(PostgreSQLParser.DISABLE_PAGE_SKIPPING, 0); }
		public Vacuum_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_optContext vacuum_opt() throws RecognitionException {
		Vacuum_optContext _localctx = new Vacuum_optContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_vacuum_opt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			_la = _input.LA(1);
			if ( !(_la==ANALYZE || (((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 180143985094819841L) != 0 || _la==VERBOSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_opt_listContext extends ParserRuleContext {
		public List<Vacuum_optContext> vacuum_opt() {
			return getRuleContexts(Vacuum_optContext.class);
		}
		public Vacuum_optContext vacuum_opt(int i) {
			return getRuleContext(Vacuum_optContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Vacuum_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_opt_listContext vacuum_opt_list() throws RecognitionException {
		Vacuum_opt_listContext _localctx = new Vacuum_opt_listContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_vacuum_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4208);
			vacuum_opt();
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4209);
				match(COMMA);
				setState(4210);
				vacuum_opt();
				}
				}
				setState(4215);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vacuum_stmtContext extends ParserRuleContext {
		public Table_name_Context table_name;
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public Vacuum_opt_listContext vacuum_opt_list() {
			return getRuleContext(Vacuum_opt_listContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(PostgreSQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_stmtContext vacuum_stmt() throws RecognitionException {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_vacuum_stmt);
		int _la;
		try {
			setState(4263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4216);
				match(VACUUM);
				setState(4221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(4217);
					match(OPEN_PAREN);
					setState(4218);
					vacuum_opt_list();
					setState(4219);
					match(CLOSE_PAREN);
					}
				}

				{
				setState(4223);
				((Vacuum_stmtContext)_localctx).table_name = table_name_();
				setState(4228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(4224);
					match(OPEN_PAREN);
					setState(4225);
					column_list();
					setState(4226);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4230);
				match(VACUUM);
				setState(4232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4231);
					match(FULL);
					}
				}

				setState(4235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(4234);
					match(FREEZE);
					}
				}

				setState(4238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(4237);
					match(VERBOSE);
					}
				}

				setState(4241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3170536334544601087L) != 0) {
					{
					setState(4240);
					((Vacuum_stmtContext)_localctx).table_name = table_name_();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4243);
				match(VACUUM);
				setState(4245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4244);
					match(FULL);
					}
				}

				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(4247);
					match(FREEZE);
					}
				}

				setState(4251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(4250);
					match(VERBOSE);
					}
				}

				setState(4253);
				match(ANALYZE);
				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3170536334544601087L) != 0) {
					{
					setState(4254);
					((Vacuum_stmtContext)_localctx).table_name = table_name_();
					setState(4259);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPEN_PAREN) {
						{
						setState(4255);
						match(OPEN_PAREN);
						setState(4256);
						column_list();
						setState(4257);
						match(CLOSE_PAREN);
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_stmtContext extends ParserRuleContext {
		public With_clauseContext with_clause() {
			return getRuleContext(With_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Combine_clauseContext> combine_clause() {
			return getRuleContexts(Combine_clauseContext.class);
		}
		public Combine_clauseContext combine_clause(int i) {
			return getRuleContext(Combine_clauseContext.class,i);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Expr_list_listContext expr_list_list() {
			return getRuleContext(Expr_list_listContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_stmtContext values_stmt() throws RecognitionException {
		Values_stmtContext _localctx = new Values_stmtContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_values_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4265);
				with_clause();
				}
			}

			setState(4283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				{
				setState(4268);
				match(VALUES);
				setState(4269);
				expr_list_list();
				}
				}
				break;
			case OPEN_PAREN:
				{
				{
				setState(4271); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4270);
						match(OPEN_PAREN);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4273); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,492,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4275);
				values_stmt();
				setState(4277); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4276);
					match(CLOSE_PAREN);
					}
					}
					setState(4279); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CLOSE_PAREN );
				setState(4281);
				combine_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4285);
				order_by_clause();
				}
				break;
			}
			setState(4289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4288);
				combine_clause();
				}
				break;
			}
			setState(4292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4291);
				limit_clause();
				}
				break;
			}
			setState(4295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4294);
				offset_clause();
				}
				break;
			}
			setState(4298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4297);
				fetch_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Selector_clauseContext extends ParserRuleContext {
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Selector_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selector_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelector_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelector_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelector_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selector_clauseContext selector_clause() throws RecognitionException {
		Selector_clauseContext _localctx = new Selector_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_selector_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4300);
				match(ALL);
				}
				break;
			case 2:
				{
				{
				setState(4301);
				match(DISTINCT);
				setState(4304);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4302);
					match(ON);
					setState(4303);
					expr_list();
					}
				}

				}
				}
				break;
			}
			setState(4308);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_from_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4310);
			match(FROM);
			setState(4311);
			from_item(0);
			setState(4316);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4312);
					match(COMMA);
					setState(4313);
					from_item(0);
					}
					} 
				}
				setState(4318);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4319);
			match(WHERE);
			setState(4320);
			predicate(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_group_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4322);
			match(GROUP);
			setState(4323);
			match(BY);
			setState(4324);
			grouping_elem();
			setState(4329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4325);
					match(COMMA);
					setState(4326);
					grouping_elem();
					}
					} 
				}
				setState(4331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_elemContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public Grouping_elem_listContext grouping_elem_list() {
			return getRuleContext(Grouping_elem_listContext.class,0);
		}
		public Grouping_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_elemContext grouping_elem() throws RecognitionException {
		Grouping_elemContext _localctx = new Grouping_elemContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grouping_elem);
		int _la;
		try {
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				match(OPEN_PAREN);
				setState(4333);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4334);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4335);
				expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4336);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4337);
				match(OPEN_PAREN);
				setState(4340);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4338);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4339);
					expr_list();
					}
					break;
				}
				setState(4349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4342);
					match(COMMA);
					setState(4345);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
					case 1:
						{
						setState(4343);
						expr(0);
						}
						break;
					case 2:
						{
						setState(4344);
						expr_list();
						}
						break;
					}
					}
					}
					setState(4351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4352);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4354);
				match(GROUPING);
				setState(4355);
				match(SETS);
				setState(4356);
				grouping_elem_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouping_elem_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grouping_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_elem_listContext grouping_elem_list() throws RecognitionException {
		Grouping_elem_listContext _localctx = new Grouping_elem_listContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_grouping_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4359);
			match(OPEN_PAREN);
			setState(4360);
			grouping_elem();
			setState(4365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4361);
				match(COMMA);
				setState(4362);
				grouping_elem();
				}
				}
				setState(4367);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4368);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_having_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4370);
			match(HAVING);
			setState(4371);
			predicate(0);
			setState(4376);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4372);
					match(COMMA);
					setState(4373);
					predicate(0);
					}
					} 
				}
				setState(4378);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_listContext extends ParserRuleContext {
		public ExprContext column_name_;
		public Name_Context output_name;
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSQLParser.AS, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_column_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4387);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALL:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ARRAY:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CASE:
			case CAST:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURRENT_USER:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FALSE:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULL:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITH:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOLLAR:
			case DOLLAR_DOLLAR:
			case OPEN_PAREN:
			case BIT_STRING:
			case REGEX_STRING:
			case NUMERIC_LITERAL:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case SINGLEQ_STRING_LITERAL:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case DOLLAR_DEC:
			case IDENTIFIER_UNICODE:
			case AT_SIGN:
			case BANG_BANG:
			case MINUS:
			case PLUS:
			case QMARK_HYPHEN:
			case TIL:
				{
				{
				setState(4379);
				((Column_listContext)_localctx).column_name_ = expr(0);
				setState(4384);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(4381);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4380);
						match(AS);
						}
					}

					setState(4383);
					((Column_listContext)_localctx).output_name = name_();
					}
					break;
				}
				}
				}
				break;
			case STAR:
				{
				setState(4386);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4402);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4389);
					match(COMMA);
					setState(4398);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case WHITESPACE:
					case A_:
					case ABORT:
					case ABS:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADA:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALL:
					case ALLOCATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ANY:
					case ARE:
					case ARRAY:
					case ASENSITIVE:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATOMIC:
					case ATTRIBUTE:
					case ATTRIBUTES:
					case AVG:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BIT_LENGTH:
					case BLOB:
					case BOOLEAN:
					case BREADTH:
					case BY:
					case C_:
					case CACHE:
					case CALL:
					case CALLED:
					case CARDINALITY:
					case CASCADE:
					case CASCADED:
					case CASE:
					case CAST:
					case CATALOG:
					case CATALOG_NAME:
					case CEIL:
					case CEILING:
					case CHAIN:
					case CHAR:
					case CHAR_LENGTH:
					case CHARACTER:
					case CHARACTER_LENGTH:
					case CHARACTER_SET_CATALOG:
					case CHARACTER_SET_NAME:
					case CHARACTER_SET_SCHEMA:
					case CHARACTERISTICS:
					case CHARACTERS:
					case CHECKPOINT:
					case CLASS:
					case CLASS_ORIGIN:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COBOL:
					case COLLATION_CATALOG:
					case COLLATION_NAME:
					case COLLATION_SCHEMA:
					case COLLECT:
					case COLUMN_NAME:
					case COMMAND_FUNCTION:
					case COMMAND_FUNCTION_CODE:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONDITION:
					case CONDITION_NUMBER:
					case CONNECT:
					case CONNECTION:
					case CONNECTION_NAME:
					case CONSTRAINT_CATALOG:
					case CONSTRAINT_NAME:
					case CONSTRAINT_SCHEMA:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTAINS:
					case CONTINUE:
					case CONVERSION:
					case CONVERT:
					case COPY:
					case CORR:
					case CORRESPONDING:
					case COUNT:
					case COVAR_POP:
					case COVAR_SAMP:
					case CSV:
					case CUBE:
					case CUME_DIST:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_DEFAULT_TRANSFORM_GROUP:
					case CURRENT_PATH:
					case CURRENT_ROLE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case CURRENT_USER:
					case CURSOR:
					case CURSOR_NAME:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DATETIME_INTERVAL_CODE:
					case DATETIME_INTERVAL_PRECISION:
					case DAY:
					case DEALLOCATE:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DEFAULT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINED:
					case DEFINER:
					case DEGREE:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DENSE_RANK:
					case DEPTH:
					case DEREF:
					case DERIVED:
					case DESCRIBE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DIAGNOSTICS:
					case DICTIONARY:
					case DISCONNECT:
					case DISPATCH:
					case DOMAIN:
					case DOUBLE:
					case DYNAMIC:
					case DYNAMIC_FUNCTION:
					case DYNAMIC_FUNCTION_CODE:
					case EACH:
					case ELEMENT:
					case ENCODING:
					case ENCRYPTED:
					case END:
					case EQUALS:
					case ESCAPE:
					case EVERY:
					case EXCEPTION:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXEC:
					case EXECUTE:
					case EXISTS:
					case EXP:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case EXTRACT:
					case FALSE:
					case FILTER:
					case FINAL:
					case FIRST:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FORCE:
					case FORMAT:
					case FORTRAN:
					case FORWARD:
					case FOUND:
					case FREE:
					case FUNCTION:
					case FUSION:
					case G_:
					case GENERAL:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANTED:
					case GREATEST:
					case GROUPING:
					case HANDLER:
					case HIERARCHY:
					case HOLD:
					case HOST:
					case HOUR:
					case IDENTITY:
					case IGNORE:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLEMENTATION:
					case IMPLICIT:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDICATOR:
					case INHERITS:
					case INOUT:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTANCE:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECTION:
					case INTERVAL:
					case INVOKER:
					case ISOLATION:
					case K_:
					case KEY:
					case KEY_MEMBER:
					case KEY_TYPE:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAST:
					case LEFT:
					case LENGTH:
					case LEVEL:
					case LISTEN:
					case LN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCATOR:
					case LOCK:
					case LOCKED:
					case LOWER:
					case M_:
					case MAP:
					case MATCH:
					case MATCHED:
					case MAX:
					case MAXVALUE:
					case MEMBER:
					case MERGE:
					case MESSAGE_LENGTH:
					case MESSAGE_OCTET_LENGTH:
					case MESSAGE_TEXT:
					case METHOD:
					case MIN:
					case MINUTE:
					case MINVALUE:
					case MOD:
					case MODE:
					case MODIFIES:
					case MODULE:
					case MONTH:
					case MORE_:
					case MOVE:
					case MULTISET:
					case MUMPS:
					case NAME:
					case NAMES:
					case NATIONAL:
					case NCHAR:
					case NCLOB:
					case NESTING:
					case NEW:
					case NEXT:
					case NO:
					case NONE:
					case NORMALIZE:
					case NORMALIZED:
					case NOT:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULL:
					case NULLABLE:
					case NULLIF:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case OBJECT:
					case OCTET_LENGTH:
					case OCTETS:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPEN:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDERING:
					case ORDINALITY:
					case OTHERS:
					case OUT:
					case OUTPUT:
					case OVER:
					case OVERLAY:
					case OVERRIDING:
					case OWNER:
					case PAD:
					case PARAMETER:
					case PARAMETER_MODE:
					case PARAMETER_NAME:
					case PARAMETER_ORDINAL_POSITION:
					case PARAMETER_SPECIFIC_CATALOG:
					case PARAMETER_SPECIFIC_NAME:
					case PARAMETER_SPECIFIC_SCHEMA:
					case PARTIAL:
					case PARTITION:
					case PASCAL:
					case PASSWORD:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PLAIN:
					case PLI:
					case POSITION:
					case POWER:
					case PRECEDING:
					case PRECISION:
					case PREPARE:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PUBLIC:
					case QUOTE:
					case RANGE:
					case RANK:
					case READ:
					case READS:
					case REAL:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_INTERCEPT:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNED_CARDINALITY:
					case RETURNED_LENGTH:
					case RETURNED_OCTET_LENGTH:
					case RETURNED_SQLSTATE:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINE_CATALOG:
					case ROUTINE_NAME:
					case ROUTINE_SCHEMA:
					case ROW:
					case ROW_COUNT:
					case ROW_NUMBER:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCALE:
					case SCHEMA:
					case SCHEMA_NAME:
					case SCOPE:
					case SCOPE_CATALOG:
					case SCOPE_NAME:
					case SCOPE_SCHEMA:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECTION:
					case SECURITY:
					case SELF:
					case SENSITIVE:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER_NAME:
					case SESSION:
					case SET:
					case SETOF:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SIZE:
					case SMALLINT:
					case SOME:
					case SOURCE:
					case SPACE:
					case SPECIFIC:
					case SPECIFIC_NAME:
					case SPECIFICTYPE:
					case SQL:
					case SQLCODE:
					case SQLERROR:
					case SQLEXCEPTION:
					case SQLSTATE:
					case SQLWARNING:
					case SQRT:
					case STABLE:
					case START:
					case STATE:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STRICT:
					case STRUCTURE:
					case STYLE:
					case SUBCLASS_ORIGIN:
					case SUBMULTISET:
					case SUBSTRING:
					case SUM:
					case SYSID:
					case SYSTEM:
					case SYSTEM_USER:
					case TABLE_NAME:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TIES:
					case TIME:
					case TIMESTAMP:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TOP_LEVEL_COUNT:
					case TRANSACTION:
					case TRANSACTION_ACTIVE:
					case TRANSACTIONS_COMMITTED:
					case TRANSACTIONS_ROLLED_BACK:
					case TRANSFORM:
					case TRANSFORMS:
					case TRANSLATE:
					case TRANSLATION:
					case TREAT:
					case TRIGGER:
					case TRIGGER_CATALOG:
					case TRIGGER_NAME:
					case TRIGGER_SCHEMA:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDER:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNNAMED:
					case UNNEST:
					case UNTIL:
					case UPDATE:
					case UPPER:
					case USAGE:
					case USER_DEFINED_TYPE_CATALOG:
					case USER_DEFINED_TYPE_CODE:
					case USER_DEFINED_TYPE_NAME:
					case USER_DEFINED_TYPE_SCHEMA:
					case VACUUM:
					case VALID:
					case VALIDATOR:
					case VALUE:
					case VALUES:
					case VAR_POP:
					case VAR_SAMP:
					case VARCHAR:
					case VARYING:
					case VIEW:
					case VOLATILE:
					case WHENEVER:
					case WIDTH_BUCKET:
					case WITH:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case ABSTIME:
					case BIGSERIAL:
					case BIT_VARYING:
					case BOOL:
					case BOX:
					case BYTEA:
					case CHARACTER_VARYING:
					case CIDR:
					case CIRCLE:
					case FLOAT4:
					case FLOAT8:
					case INET:
					case INT2:
					case INT4:
					case INT8:
					case JSON:
					case JSONB:
					case LINE:
					case LSEG:
					case MACADDR:
					case MACADDR8:
					case MONEY:
					case PG_LSN:
					case POINT:
					case POLYGON:
					case RELTIME:
					case SERIAL:
					case SERIAL2:
					case SERIAL4:
					case SERIAL8:
					case SMALLSERIAL:
					case TEXT:
					case TIMESTAMPTZ:
					case TIMETZ:
					case TSQUERY:
					case TSVECTOR:
					case TXID_SNAPSHOT:
					case UUID:
					case VARBIT:
					case XML:
					case DOLLAR:
					case DOLLAR_DOLLAR:
					case OPEN_PAREN:
					case BIT_STRING:
					case REGEX_STRING:
					case NUMERIC_LITERAL:
					case INTEGER_LITERAL:
					case HEX_INTEGER_LITERAL:
					case SINGLEQ_STRING_LITERAL:
					case DOUBLEQ_STRING_LITERAL:
					case IDENTIFIER:
					case DOLLAR_DEC:
					case IDENTIFIER_UNICODE:
					case AT_SIGN:
					case BANG_BANG:
					case MINUS:
					case PLUS:
					case QMARK_HYPHEN:
					case TIL:
						{
						{
						setState(4390);
						((Column_listContext)_localctx).column_name_ = expr(0);
						setState(4395);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
						case 1:
							{
							setState(4392);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AS) {
								{
								setState(4391);
								match(AS);
								}
							}

							setState(4394);
							((Column_listContext)_localctx).output_name = name_();
							}
							break;
						}
						}
						}
						break;
					case STAR:
						{
						setState(4397);
						match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4404);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_parameterContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(PostgreSQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(PostgreSQLParser.VERBOSE, 0); }
		public TerminalNode COSTS() { return getToken(PostgreSQLParser.COSTS, 0); }
		public TerminalNode BUFFERS() { return getToken(PostgreSQLParser.BUFFERS, 0); }
		public TerminalNode TIMING() { return getToken(PostgreSQLParser.TIMING, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLParser.XML, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode YAML() { return getToken(PostgreSQLParser.YAML, 0); }
		public Explain_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_parameterContext explain_parameter() throws RecognitionException {
		Explain_parameterContext _localctx = new Explain_parameterContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_explain_parameter);
		int _la;
		try {
			setState(4411);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE:
			case BUFFERS:
			case COSTS:
			case TIMING:
			case VERBOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4405);
				_la = _input.LA(1);
				if ( !(_la==ANALYZE || _la==BUFFERS || _la==COSTS || _la==TIMING || _la==VERBOSE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -2918355150198407171L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 59L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3341673120384679935L) != 0) {
					{
					setState(4406);
					param_value();
					}
				}

				}
				break;
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4409);
				match(FORMAT);
				setState(4410);
				_la = _input.LA(1);
				if ( !(_la==YAML || (((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & 33685505L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public FrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameContext frame() throws RecognitionException {
		FrameContext _localctx = new FrameContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_frame);
		try {
			setState(4423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4413);
				match(UNBOUNDED);
				setState(4414);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4415);
				match(INTEGER_LITERAL);
				setState(4416);
				match(PRECEDING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4417);
				match(CURRENT);
				setState(4418);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4419);
				match(INTEGER_LITERAL);
				setState(4420);
				match(FOLLOWING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4421);
				match(UNBOUNDED);
				setState(4422);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_startContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_startContext frame_start() throws RecognitionException {
		Frame_startContext _localctx = new Frame_startContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_frame_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4425);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_endContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_end(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_end(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_endContext frame_end() throws RecognitionException {
		Frame_endContext _localctx = new Frame_endContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_frame_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4427);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Frame_clauseContext extends ParserRuleContext {
		public Frame_startContext frame_start() {
			return getRuleContext(Frame_startContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_endContext frame_end() {
			return getRuleContext(Frame_endContext.class,0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_clauseContext frame_clause() throws RecognitionException {
		Frame_clauseContext _localctx = new Frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_frame_clause);
		int _la;
		try {
			setState(4437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4429);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4430);
				frame_start();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4431);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4432);
				match(BETWEEN);
				setState(4433);
				frame_start();
				setState(4434);
				match(AND);
				setState(4435);
				frame_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_definitionContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_window_definition);
		int _la;
		try {
			setState(4451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4439);
				window_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4440);
				match(PARTITION);
				setState(4441);
				match(BY);
				setState(4442);
				expr(0);
				setState(4447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4443);
					match(COMMA);
					setState(4444);
					expr(0);
					}
					}
					setState(4449);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4450);
				order_by_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_window_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4453);
			match(WINDOW);
			setState(4454);
			window_name();
			setState(4455);
			match(AS);
			setState(4456);
			match(OPEN_PAREN);
			setState(4457);
			window_definition();
			setState(4458);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Combine_clauseContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public Combine_clauseContext combine_clause() {
			return getRuleContext(Combine_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public Combine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCombine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCombine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCombine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Combine_clauseContext combine_clause() throws RecognitionException {
		Combine_clauseContext _localctx = new Combine_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_combine_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4460);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(4461);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4467);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4464);
					match(OPEN_PAREN);
					}
					} 
				}
				setState(4469);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
			}
			setState(4472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4470);
				select_stmt();
				}
				break;
			case 2:
				{
				setState(4471);
				values_stmt();
				}
				break;
			}
			setState(4477);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4474);
					match(CLOSE_PAREN);
					}
					} 
				}
				setState(4479);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			}
			setState(4481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4480);
				combine_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<Order_by_itemContext> order_by_item() {
			return getRuleContexts(Order_by_itemContext.class);
		}
		public Order_by_itemContext order_by_item(int i) {
			return getRuleContext(Order_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_order_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4483);
			match(ORDER);
			setState(4484);
			match(BY);
			setState(4485);
			order_by_item();
			setState(4490);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4486);
					match(COMMA);
					setState(4487);
					order_by_item();
					}
					} 
				}
				setState(4492);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_itemContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public List<TerminalNode> NULLS() { return getTokens(PostgreSQLParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PostgreSQLParser.NULLS, i);
		}
		public List<TerminalNode> FIRST() { return getTokens(PostgreSQLParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PostgreSQLParser.FIRST, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PostgreSQLParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PostgreSQLParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrder_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrder_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrder_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_itemContext order_by_item() throws RecognitionException {
		Order_by_itemContext _localctx = new Order_by_itemContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_order_by_item);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(4493);
				expr(0);
				}
				break;
			case 2:
				{
				setState(4494);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			}
			setState(4501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4497);
				match(ASC);
				}
				break;
			case 2:
				{
				setState(4498);
				match(DESC);
				}
				break;
			case 3:
				{
				setState(4499);
				match(USING);
				setState(4500);
				expr(0);
				}
				break;
			}
			setState(4514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				{
				setState(4503);
				match(NULLS);
				setState(4504);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(4511);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4506);
						match(COMMA);
						{
						setState(4507);
						match(NULLS);
						setState(4508);
						_la = _input.LA(1);
						if ( !(_la==FIRST || _la==LAST) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						} 
					}
					setState(4513);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,531,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4516);
			match(LIMIT);
			setState(4520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER_LITERAL:
				{
				setState(4517);
				match(INTEGER_LITERAL);
				}
				break;
			case ALL:
				{
				setState(4518);
				match(ALL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(4519);
				func_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_offset_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4522);
			match(OFFSET);
			setState(4523);
			match(INTEGER_LITERAL);
			setState(4525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4524);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Fetch_clauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public Fetch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_clauseContext fetch_clause() throws RecognitionException {
		Fetch_clauseContext _localctx = new Fetch_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_fetch_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4527);
			match(FETCH);
			setState(4528);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGER_LITERAL) {
				{
				setState(4529);
				match(INTEGER_LITERAL);
				}
			}

			setState(4532);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4533);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public List<Table_name_Context> table_name_() {
			return getRuleContexts(Table_name_Context.class);
		}
		public Table_name_Context table_name_(int i) {
			return getRuleContext(Table_name_Context.class,i);
		}
		public List<TerminalNode> NOWAIT() { return getTokens(PostgreSQLParser.NOWAIT); }
		public TerminalNode NOWAIT(int i) {
			return getToken(PostgreSQLParser.NOWAIT, i);
		}
		public List<TerminalNode> SKIP_() { return getTokens(PostgreSQLParser.SKIP_); }
		public TerminalNode SKIP_(int i) {
			return getToken(PostgreSQLParser.SKIP_, i);
		}
		public List<TerminalNode> LOCKED() { return getTokens(PostgreSQLParser.LOCKED); }
		public TerminalNode LOCKED(int i) {
			return getToken(PostgreSQLParser.LOCKED, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_for_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4535);
			match(FOR);
			setState(4543);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(4536);
				match(UPDATE);
				}
				break;
			case NO:
				{
				setState(4537);
				match(NO);
				setState(4538);
				match(KEY);
				setState(4539);
				match(UPDATE);
				}
				break;
			case SHARE:
				{
				setState(4540);
				match(SHARE);
				}
				break;
			case KEY:
				{
				setState(4541);
				match(KEY);
				setState(4542);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4554);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(4545);
				match(OF);
				setState(4546);
				table_name_();
				setState(4551);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4547);
						match(COMMA);
						setState(4548);
						table_name_();
						}
						} 
					}
					setState(4553);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
				}
				}
				break;
			}
			setState(4561);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4559);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NOWAIT:
						{
						setState(4556);
						match(NOWAIT);
						}
						break;
					case SKIP_:
						{
						setState(4557);
						match(SKIP_);
						setState(4558);
						match(LOCKED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4563);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,540,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Updater_clauseContext extends ParserRuleContext {
		public List<Updater_exprContext> updater_expr() {
			return getRuleContexts(Updater_exprContext.class);
		}
		public Updater_exprContext updater_expr(int i) {
			return getRuleContext(Updater_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Updater_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updater_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdater_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdater_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdater_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Updater_clauseContext updater_clause() throws RecognitionException {
		Updater_clauseContext _localctx = new Updater_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_updater_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4564);
			updater_expr();
			setState(4569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4565);
				match(COMMA);
				setState(4566);
				updater_expr();
				}
				}
				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Updater_exprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Updater_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updater_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdater_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdater_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdater_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Updater_exprContext updater_expr() throws RecognitionException {
		Updater_exprContext _localctx = new Updater_exprContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_updater_expr);
		try {
			setState(4581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4572);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4573);
				match(OPEN_PAREN);
				setState(4574);
				name_list();
				setState(4575);
				match(CLOSE_PAREN);
				setState(4576);
				match(EQUAL);
				setState(4579);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4577);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4578);
					expr_list();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Returning_clauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(PostgreSQLParser.RETURNING, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReturning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReturning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReturning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Returning_clauseContext returning_clause() throws RecognitionException {
		Returning_clauseContext _localctx = new Returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_returning_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4583);
			match(RETURNING);
			setState(4584);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public Token op;
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode HEX_INTEGER_LITERAL() { return getToken(PostgreSQLParser.HEX_INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSQLParser.NUMERIC_LITERAL, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(PostgreSQLParser.BIT_STRING, 0); }
		public TerminalNode REGEX_STRING() { return getToken(PostgreSQLParser.REGEX_STRING, 0); }
		public List<TerminalNode> DOLLAR_DOLLAR() { return getTokens(PostgreSQLParser.DOLLAR_DOLLAR); }
		public TerminalNode DOLLAR_DOLLAR(int i) {
			return getToken(PostgreSQLParser.DOLLAR_DOLLAR, i);
		}
		public List<TerminalNode> DOLLAR() { return getTokens(PostgreSQLParser.DOLLAR); }
		public TerminalNode DOLLAR(int i) {
			return getToken(PostgreSQLParser.DOLLAR, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BANG_BANG() { return getToken(PostgreSQLParser.BANG_BANG, 0); }
		public TerminalNode AT_SIGN() { return getToken(PostgreSQLParser.AT_SIGN, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode TIL() { return getToken(PostgreSQLParser.TIL, 0); }
		public TerminalNode QMARK_HYPHEN() { return getToken(PostgreSQLParser.QMARK_HYPHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Case_exprContext case_expr() {
			return getRuleContext(Case_exprContext.class,0);
		}
		public AggregateContext aggregate() {
			return getRuleContext(AggregateContext.class,0);
		}
		public Array_cons_exprContext array_cons_expr() {
			return getRuleContext(Array_cons_exprContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode DOLLAR_DEC() { return getToken(PostgreSQLParser.DOLLAR_DEC, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode PIPE_SLASH() { return getToken(PostgreSQLParser.PIPE_SLASH, 0); }
		public TerminalNode PIPE_PIPE_SLASH() { return getToken(PostgreSQLParser.PIPE_PIPE_SLASH, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode AMP() { return getToken(PostgreSQLParser.AMP, 0); }
		public TerminalNode PIPE() { return getToken(PostgreSQLParser.PIPE, 0); }
		public TerminalNode HASH() { return getToken(PostgreSQLParser.HASH, 0); }
		public TerminalNode LT_LT() { return getToken(PostgreSQLParser.LT_LT, 0); }
		public TerminalNode LT_LT_EQ() { return getToken(PostgreSQLParser.LT_LT_EQ, 0); }
		public TerminalNode GT_GT() { return getToken(PostgreSQLParser.GT_GT, 0); }
		public TerminalNode AT_AT() { return getToken(PostgreSQLParser.AT_AT, 0); }
		public TerminalNode LT_HYPHEN_GT() { return getToken(PostgreSQLParser.LT_HYPHEN_GT, 0); }
		public TerminalNode AT_GT() { return getToken(PostgreSQLParser.AT_GT, 0); }
		public TerminalNode LT_AT() { return getToken(PostgreSQLParser.LT_AT, 0); }
		public TerminalNode TIL_EQ() { return getToken(PostgreSQLParser.TIL_EQ, 0); }
		public TerminalNode TIL_STAR() { return getToken(PostgreSQLParser.TIL_STAR, 0); }
		public TerminalNode TIL_TIL() { return getToken(PostgreSQLParser.TIL_TIL, 0); }
		public TerminalNode TIL_LT_TIL() { return getToken(PostgreSQLParser.TIL_LT_TIL, 0); }
		public TerminalNode TIL_GT_TIL() { return getToken(PostgreSQLParser.TIL_GT_TIL, 0); }
		public TerminalNode TIL_LTE_TIL() { return getToken(PostgreSQLParser.TIL_LTE_TIL, 0); }
		public TerminalNode TIL_GTE_TIL() { return getToken(PostgreSQLParser.TIL_GTE_TIL, 0); }
		public TerminalNode LT_QMARK_GT() { return getToken(PostgreSQLParser.LT_QMARK_GT, 0); }
		public TerminalNode HYPHEN_GT() { return getToken(PostgreSQLParser.HYPHEN_GT, 0); }
		public TerminalNode HYPHEN_GT_GT() { return getToken(PostgreSQLParser.HYPHEN_GT_GT, 0); }
		public TerminalNode HASH_HASH() { return getToken(PostgreSQLParser.HASH_HASH, 0); }
		public TerminalNode HASH_GT() { return getToken(PostgreSQLParser.HASH_GT, 0); }
		public TerminalNode HASH_GT_GT() { return getToken(PostgreSQLParser.HASH_GT_GT, 0); }
		public TerminalNode QMARK() { return getToken(PostgreSQLParser.QMARK, 0); }
		public TerminalNode QMARK_PIPE() { return getToken(PostgreSQLParser.QMARK_PIPE, 0); }
		public TerminalNode QMARK_AMP() { return getToken(PostgreSQLParser.QMARK_AMP, 0); }
		public TerminalNode QMARK_HASH() { return getToken(PostgreSQLParser.QMARK_HASH, 0); }
		public TerminalNode LT_CARET() { return getToken(PostgreSQLParser.LT_CARET, 0); }
		public TerminalNode AMP_LT() { return getToken(PostgreSQLParser.AMP_LT, 0); }
		public TerminalNode HYPHEN_PIPE_HYPHEN() { return getToken(PostgreSQLParser.HYPHEN_PIPE_HYPHEN, 0); }
		public TerminalNode HASH_EQ() { return getToken(PostgreSQLParser.HASH_EQ, 0); }
		public TerminalNode AMP_AMP() { return getToken(PostgreSQLParser.AMP_AMP, 0); }
		public TerminalNode PIPE_PIPE() { return getToken(PostgreSQLParser.PIPE_PIPE, 0); }
		public TerminalNode EQUAL_GT() { return getToken(PostgreSQLParser.EQUAL_GT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LTE() { return getToken(PostgreSQLParser.LTE, 0); }
		public TerminalNode GTE() { return getToken(PostgreSQLParser.GTE, 0); }
		public TerminalNode LT_GT() { return getToken(PostgreSQLParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(PostgreSQLParser.BANG_EQUAL, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public TerminalNode BANG() { return getToken(PostgreSQLParser.BANG, 0); }
		public List<TerminalNode> COLON() { return getTokens(PostgreSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(PostgreSQLParser.COLON, i);
		}
		public List<TerminalNode> COLON_COLON() { return getTokens(PostgreSQLParser.COLON_COLON); }
		public TerminalNode COLON_COLON(int i) {
			return getToken(PostgreSQLParser.COLON_COLON, i);
		}
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 432;
		enterRecursionRule(_localctx, 432, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4587);
				match(NULL);
				}
				break;
			case 2:
				{
				setState(4588);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				{
				setState(4589);
				match(CURRENT_ROLE);
				}
				break;
			case 4:
				{
				setState(4590);
				match(CURRENT_TIME);
				}
				break;
			case 5:
				{
				setState(4591);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				{
				setState(4592);
				match(CURRENT_USER);
				}
				break;
			case 7:
				{
				setState(4593);
				match(DEFAULT);
				}
				break;
			case 8:
				{
				setState(4594);
				match(INTEGER_LITERAL);
				}
				break;
			case 9:
				{
				setState(4595);
				match(HEX_INTEGER_LITERAL);
				}
				break;
			case 10:
				{
				setState(4596);
				match(NUMERIC_LITERAL);
				}
				break;
			case 11:
				{
				setState(4597);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 12:
				{
				setState(4598);
				match(BIT_STRING);
				}
				break;
			case 13:
				{
				setState(4599);
				match(REGEX_STRING);
				}
				break;
			case 14:
				{
				setState(4600);
				match(DOLLAR_DOLLAR);
				setState(4602); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4601);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==DOLLAR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4604); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,544,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(4606);
				match(DOLLAR_DOLLAR);
				}
				break;
			case 15:
				{
				setState(4607);
				match(DOLLAR);
				setState(4608);
				identifier(0);
				setState(4610); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4609);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==DOLLAR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4612); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & -2L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0 || (((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0 || (((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & -1L) != 0 || (((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & -1L) != 0 || (((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & -1L) != 0 || (((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & -1L) != 0 || (((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & -1L) != 0 || (((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & -1L) != 0 || (((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & -1L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & -576460752303423489L) != 0 || (((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & -1L) != 0 || (((_la - 832)) & ~0x3f) == 0 && ((1L << (_la - 832)) & 15L) != 0 );
				setState(4614);
				match(DOLLAR);
				setState(4615);
				identifier(0);
				setState(4616);
				match(DOLLAR);
				}
				break;
			case 16:
				{
				setState(4618);
				bool_expr(0);
				}
				break;
			case 17:
				{
				setState(4619);
				values_stmt();
				}
				break;
			case 18:
				{
				setState(4620);
				expr_list();
				}
				break;
			case 19:
				{
				setState(4621);
				match(OPEN_PAREN);
				setState(4622);
				expr(0);
				setState(4623);
				match(CLOSE_PAREN);
				}
				break;
			case 20:
				{
				setState(4625);
				type_name();
				setState(4626);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 21:
				{
				setState(4628);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 8724152325L) != 0) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4629);
				expr(30);
				}
				break;
			case 22:
				{
				setState(4630);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==QMARK_HYPHEN || _la==TIL) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4631);
				expr(29);
				}
				break;
			case 23:
				{
				setState(4632);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NOT) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4633);
				expr(17);
				}
				break;
			case 24:
				{
				setState(4634);
				func_call();
				}
				break;
			case 25:
				{
				setState(4635);
				identifier(0);
				}
				break;
			case 26:
				{
				setState(4636);
				match(CAST);
				setState(4637);
				match(OPEN_PAREN);
				setState(4638);
				expr(0);
				setState(4639);
				match(AS);
				setState(4640);
				data_type();
				setState(4641);
				match(CLOSE_PAREN);
				}
				break;
			case 27:
				{
				setState(4643);
				correlation_name();
				setState(4644);
				match(DOT);
				setState(4645);
				column_name();
				}
				break;
			case 28:
				{
				setState(4647);
				case_expr();
				}
				break;
			case 29:
				{
				setState(4648);
				data_type();
				setState(4649);
				expr(9);
				}
				break;
			case 30:
				{
				setState(4651);
				aggregate();
				}
				break;
			case 31:
				{
				setState(4652);
				array_cons_expr();
				}
				break;
			case 32:
				{
				setState(4653);
				match(EXISTS);
				setState(4654);
				expr(3);
				}
				break;
			case 33:
				{
				setState(4655);
				match(DOLLAR_DEC);
				}
				break;
			case 34:
				{
				setState(4656);
				match(OPEN_PAREN);
				setState(4657);
				select_stmt();
				setState(4658);
				match(CLOSE_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(4761);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4759);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4662);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(4663);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & 402653185L) != 0) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4664);
						expr(28);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4665);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(4666);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & 1153484454560268289L) != 0) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4667);
						expr(27);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4668);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(4669);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4670);
						expr(26);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4671);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(4672);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==NOT || _la==OR || (((_la - 781)) & ~0x3f) == 0 && ((1L << (_la - 781)) & 8984714941548575L) != 0) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4673);
						expr(25);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4674);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(4678);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NOT:
							{
							setState(4675);
							match(NOT);
							setState(4676);
							match(LIKE);
							}
							break;
						case LIKE:
							{
							setState(4677);
							match(LIKE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4680);
						expr(24);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4681);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(4683);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4682);
							match(NOT);
							}
						}

						setState(4685);
						match(BETWEEN);
						setState(4686);
						expr(0);
						setState(4687);
						match(AND);
						setState(4688);
						expr(23);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4690);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(4691);
						match(IN);
						setState(4692);
						expr(22);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4693);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(4694);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !((((_la - 789)) & ~0x3f) == 0 && ((1L << (_la - 789)) & 622645L) != 0) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4695);
						expr(21);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4696);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(4697);
						match(IS);
						setState(4699);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4698);
							match(NOT);
							}
						}

						setState(4701);
						match(DISTINCT);
						setState(4702);
						match(FROM);
						setState(4703);
						expr(19);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4704);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(4705);
						match(OPEN_BRACKET);
						setState(4706);
						expr(0);
						setState(4707);
						match(CLOSE_BRACKET);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4709);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(4710);
						((ExprContext)_localctx).op = match(BANG);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4711);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(4712);
						((ExprContext)_localctx).op = match(IS);
						setState(4717);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
						case 1:
							{
							setState(4713);
							bool_expr(0);
							}
							break;
						case 2:
							{
							setState(4714);
							match(NULL);
							}
							break;
						case 3:
							{
							setState(4715);
							match(NOT);
							setState(4716);
							match(NULL);
							}
							break;
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4719);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(4729); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(4720);
								match(OPEN_BRACKET);
								setState(4722);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -1525604303836807171L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 4537572335498035199L) != 0 || (((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 1245674733573L) != 0) {
									{
									setState(4721);
									expr(0);
									}
								}

								setState(4724);
								match(COLON);
								setState(4726);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -1525604303836807171L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 4537572335498035199L) != 0 || (((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 1245674733573L) != 0) {
									{
									setState(4725);
									expr(0);
									}
								}

								setState(4728);
								match(CLOSE_BRACKET);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4731); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,553,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4733);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(4736); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(4734);
								match(COLON_COLON);
								setState(4735);
								data_type();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4738); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4740);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(4741);
						match(IS);
						setState(4742);
						match(OF);
						setState(4743);
						match(OPEN_PAREN);
						setState(4744);
						data_type();
						setState(4745);
						match(CLOSE_PAREN);
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4747);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(4748);
						match(DOT);
						setState(4751);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case WHITESPACE:
						case A_:
						case ABORT:
						case ABS:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADA:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALLOCATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ANY:
						case ARE:
						case ASENSITIVE:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATOMIC:
						case ATTRIBUTE:
						case ATTRIBUTES:
						case AVG:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BERNOULLI:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BIT_LENGTH:
						case BLOB:
						case BOOLEAN:
						case BREADTH:
						case BY:
						case C_:
						case CACHE:
						case CALL:
						case CALLED:
						case CARDINALITY:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CATALOG_NAME:
						case CEIL:
						case CEILING:
						case CHAIN:
						case CHAR:
						case CHAR_LENGTH:
						case CHARACTER:
						case CHARACTER_LENGTH:
						case CHARACTER_SET_CATALOG:
						case CHARACTER_SET_NAME:
						case CHARACTER_SET_SCHEMA:
						case CHARACTERISTICS:
						case CHARACTERS:
						case CHECKPOINT:
						case CLASS:
						case CLASS_ORIGIN:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COBOL:
						case COLLATION_CATALOG:
						case COLLATION_NAME:
						case COLLATION_SCHEMA:
						case COLLECT:
						case COLUMN_NAME:
						case COMMAND_FUNCTION:
						case COMMAND_FUNCTION_CODE:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case CONDITION:
						case CONDITION_NUMBER:
						case CONNECT:
						case CONNECTION:
						case CONNECTION_NAME:
						case CONSTRAINT_CATALOG:
						case CONSTRAINT_NAME:
						case CONSTRAINT_SCHEMA:
						case CONSTRAINTS:
						case CONSTRUCTOR:
						case CONTAINS:
						case CONTINUE:
						case CONVERSION:
						case CONVERT:
						case COPY:
						case CORR:
						case CORRESPONDING:
						case COUNT:
						case COVAR_POP:
						case COVAR_SAMP:
						case CSV:
						case CUBE:
						case CUME_DIST:
						case CURRENT:
						case CURRENT_DEFAULT_TRANSFORM_GROUP:
						case CURRENT_PATH:
						case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
						case CURSOR:
						case CURSOR_NAME:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DATETIME_INTERVAL_CODE:
						case DATETIME_INTERVAL_PRECISION:
						case DAY:
						case DEALLOCATE:
						case DEC:
						case DECIMAL:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINED:
						case DEFINER:
						case DEGREE:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DENSE_RANK:
						case DEPTH:
						case DEREF:
						case DERIVED:
						case DESCRIBE:
						case DESCRIPTOR:
						case DETERMINISTIC:
						case DIAGNOSTICS:
						case DICTIONARY:
						case DISCONNECT:
						case DISPATCH:
						case DOMAIN:
						case DOUBLE:
						case DYNAMIC:
						case DYNAMIC_FUNCTION:
						case DYNAMIC_FUNCTION_CODE:
						case EACH:
						case ELEMENT:
						case ENCODING:
						case ENCRYPTED:
						case END:
						case EQUALS:
						case ESCAPE:
						case EVERY:
						case EXCEPTION:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXEC:
						case EXECUTE:
						case EXISTS:
						case EXP:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case EXTRACT:
						case FILTER:
						case FINAL:
						case FIRST:
						case FLOAT:
						case FLOOR:
						case FOLLOWING:
						case FORCE:
						case FORMAT:
						case FORTRAN:
						case FORWARD:
						case FOUND:
						case FREE:
						case FUNCTION:
						case FUSION:
						case G_:
						case GENERAL:
						case GENERATED:
						case GET:
						case GLOBAL:
						case GO:
						case GOTO:
						case GRANTED:
						case GREATEST:
						case GROUPING:
						case HANDLER:
						case HIERARCHY:
						case HOLD:
						case HOST:
						case HOUR:
						case IDENTITY:
						case IGNORE:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLEMENTATION:
						case IMPLICIT:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDICATOR:
						case INHERITS:
						case INOUT:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTANCE:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERSECTION:
						case INTERVAL:
						case INVOKER:
						case ISOLATION:
						case K_:
						case KEY:
						case KEY_MEMBER:
						case KEY_TYPE:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAST:
						case LEFT:
						case LENGTH:
						case LEVEL:
						case LISTEN:
						case LN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCATOR:
						case LOCK:
						case LOCKED:
						case LOWER:
						case M_:
						case MAP:
						case MATCH:
						case MATCHED:
						case MAX:
						case MAXVALUE:
						case MEMBER:
						case MERGE:
						case MESSAGE_LENGTH:
						case MESSAGE_OCTET_LENGTH:
						case MESSAGE_TEXT:
						case METHOD:
						case MIN:
						case MINUTE:
						case MINVALUE:
						case MOD:
						case MODE:
						case MODIFIES:
						case MODULE:
						case MONTH:
						case MORE_:
						case MOVE:
						case MULTISET:
						case MUMPS:
						case NAME:
						case NAMES:
						case NATIONAL:
						case NCHAR:
						case NCLOB:
						case NESTING:
						case NEW:
						case NEXT:
						case NO:
						case NONE:
						case NORMALIZE:
						case NORMALIZED:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLABLE:
						case NULLIF:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case OBJECT:
						case OCTET_LENGTH:
						case OCTETS:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPEN:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDERING:
						case ORDINALITY:
						case OTHERS:
						case OUT:
						case OUTPUT:
						case OVER:
						case OVERLAY:
						case OVERRIDING:
						case OWNER:
						case PAD:
						case PARAMETER:
						case PARAMETER_MODE:
						case PARAMETER_NAME:
						case PARAMETER_ORDINAL_POSITION:
						case PARAMETER_SPECIFIC_CATALOG:
						case PARAMETER_SPECIFIC_NAME:
						case PARAMETER_SPECIFIC_SCHEMA:
						case PARTIAL:
						case PARTITION:
						case PASCAL:
						case PASSWORD:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case PLAIN:
						case PLI:
						case POSITION:
						case POWER:
						case PRECEDING:
						case PRECISION:
						case PREPARE:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PUBLIC:
						case QUOTE:
						case RANGE:
						case RANK:
						case READ:
						case READS:
						case REAL:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REGR_AVGX:
						case REGR_AVGY:
						case REGR_COUNT:
						case REGR_INTERCEPT:
						case REGR_SLOPE:
						case REGR_SXX:
						case REGR_SXY:
						case REGR_SYY:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RESULT:
						case RETURN:
						case RETURNED_CARDINALITY:
						case RETURNED_LENGTH:
						case RETURNED_OCTET_LENGTH:
						case RETURNED_SQLSTATE:
						case RETURNS:
						case REVOKE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINE_CATALOG:
						case ROUTINE_NAME:
						case ROUTINE_SCHEMA:
						case ROW:
						case ROW_COUNT:
						case ROW_NUMBER:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCALE:
						case SCHEMA:
						case SCHEMA_NAME:
						case SCOPE:
						case SCOPE_CATALOG:
						case SCOPE_NAME:
						case SCOPE_SCHEMA:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECTION:
						case SECURITY:
						case SELF:
						case SENSITIVE:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER_NAME:
						case SESSION:
						case SET:
						case SETOF:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SIZE:
						case SMALLINT:
						case SOME:
						case SOURCE:
						case SPACE:
						case SPECIFIC:
						case SPECIFIC_NAME:
						case SPECIFICTYPE:
						case SQL:
						case SQLCODE:
						case SQLERROR:
						case SQLEXCEPTION:
						case SQLSTATE:
						case SQLWARNING:
						case SQRT:
						case STABLE:
						case START:
						case STATE:
						case STATEMENT:
						case STATIC:
						case STATISTICS:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STRICT:
						case STRUCTURE:
						case STYLE:
						case SUBCLASS_ORIGIN:
						case SUBMULTISET:
						case SUBSTRING:
						case SUM:
						case SYSID:
						case SYSTEM:
						case SYSTEM_USER:
						case TABLE_NAME:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TIES:
						case TIME:
						case TIMESTAMP:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TOP_LEVEL_COUNT:
						case TRANSACTION:
						case TRANSACTION_ACTIVE:
						case TRANSACTIONS_COMMITTED:
						case TRANSACTIONS_ROLLED_BACK:
						case TRANSFORM:
						case TRANSFORMS:
						case TRANSLATE:
						case TRANSLATION:
						case TREAT:
						case TRIGGER:
						case TRIGGER_CATALOG:
						case TRIGGER_NAME:
						case TRIGGER_SCHEMA:
						case TRIM:
						case TRUE:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UESCAPE:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNDER:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNNAMED:
						case UNNEST:
						case UNTIL:
						case UPDATE:
						case UPPER:
						case USAGE:
						case USER_DEFINED_TYPE_CATALOG:
						case USER_DEFINED_TYPE_CODE:
						case USER_DEFINED_TYPE_NAME:
						case USER_DEFINED_TYPE_SCHEMA:
						case VACUUM:
						case VALID:
						case VALIDATOR:
						case VALUE:
						case VALUES:
						case VAR_POP:
						case VAR_SAMP:
						case VARCHAR:
						case VARYING:
						case VIEW:
						case VOLATILE:
						case WHENEVER:
						case WIDTH_BUCKET:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRITE:
						case YEAR:
						case ZONE:
						case ABSTIME:
						case BIGSERIAL:
						case BIT_VARYING:
						case BOOL:
						case BOX:
						case BYTEA:
						case CHARACTER_VARYING:
						case CIDR:
						case CIRCLE:
						case FLOAT4:
						case FLOAT8:
						case INET:
						case INT2:
						case INT4:
						case INT8:
						case JSON:
						case JSONB:
						case LINE:
						case LSEG:
						case MACADDR:
						case MACADDR8:
						case MONEY:
						case PG_LSN:
						case POINT:
						case POLYGON:
						case RELTIME:
						case SERIAL:
						case SERIAL2:
						case SERIAL4:
						case SERIAL8:
						case SMALLSERIAL:
						case TEXT:
						case TIMESTAMPTZ:
						case TIMETZ:
						case TSQUERY:
						case TSVECTOR:
						case TXID_SNAPSHOT:
						case UUID:
						case VARBIT:
						case XML:
						case DOUBLEQ_STRING_LITERAL:
						case IDENTIFIER:
						case IDENTIFIER_UNICODE:
							{
							setState(4749);
							identifier(0);
							}
							break;
						case STAR:
							{
							setState(4750);
							match(STAR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(4753);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						{
						setState(4754);
						match(AT);
						setState(4755);
						match(TIME);
						setState(4756);
						match(ZONE);
						}
						setState(4758);
						match(SINGLEQ_STRING_LITERAL);
						}
						break;
					}
					} 
				}
				setState(4763);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bool_exprContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLParser.FALSE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public List<Bool_exprContext> bool_expr() {
			return getRuleContexts(Bool_exprContext.class);
		}
		public Bool_exprContext bool_expr(int i) {
			return getRuleContext(Bool_exprContext.class,i);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public Bool_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBool_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBool_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBool_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_exprContext bool_expr() throws RecognitionException {
		return bool_expr(0);
	}

	private Bool_exprContext bool_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, _parentState);
		Bool_exprContext _prevctx = _localctx;
		int _startState = 434;
		enterRecursionRule(_localctx, 434, RULE_bool_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				{
				setState(4765);
				match(TRUE);
				}
				break;
			case FALSE:
				{
				setState(4766);
				match(FALSE);
				}
				break;
			case NOT:
				{
				setState(4767);
				match(NOT);
				setState(4768);
				bool_expr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(4779);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(4777);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
					case 1:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(4771);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(4772);
						match(AND);
						setState(4773);
						bool_expr(3);
						}
						break;
					case 2:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(4774);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(4775);
						match(OR);
						setState(4776);
						bool_expr(2);
						}
						break;
					}
					} 
				}
				setState(4781);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_exprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode END() { return getToken(PostgreSQLParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(PostgreSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(PostgreSQLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(PostgreSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(PostgreSQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public Case_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCase_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCase_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCase_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_exprContext case_expr() throws RecognitionException {
		Case_exprContext _localctx = new Case_exprContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_case_expr);
		int _la;
		try {
			setState(4815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4782);
				match(CASE);
				setState(4783);
				expr(0);
				setState(4789); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4784);
					match(WHEN);
					setState(4785);
					expr(0);
					setState(4786);
					match(THEN);
					setState(4787);
					expr(0);
					}
					}
					setState(4791); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4793);
					match(ELSE);
					setState(4794);
					expr(0);
					}
				}

				setState(4797);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4799);
				match(CASE);
				setState(4805); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4800);
					match(WHEN);
					setState(4801);
					predicate(0);
					setState(4802);
					match(THEN);
					setState(4803);
					expr(0);
					}
					}
					setState(4807); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4809);
					match(ELSE);
					setState(4810);
					expr(0);
					}
				}

				setState(4813);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4817);
			match(OPEN_PAREN);
			setState(4818);
			expr(0);
			setState(4823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4819);
				match(COMMA);
				setState(4820);
				expr(0);
				}
				}
				setState(4825);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4826);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_list_listContext extends ParserRuleContext {
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Expr_list_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_list_listContext expr_list_list() throws RecognitionException {
		Expr_list_listContext _localctx = new Expr_list_listContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_expr_list_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(4828);
				match(OPEN_PAREN);
				}
				break;
			}
			setState(4831);
			expr_list();
			setState(4836);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4832);
					match(COMMA);
					setState(4833);
					expr_list();
					}
					} 
				}
				setState(4838);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,568,_ctx);
			}
			setState(4840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(4839);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_argContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public Data_typeContext argtype;
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_sig_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_argContext func_sig_arg() throws RecognitionException {
		Func_sig_argContext _localctx = new Func_sig_argContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_func_sig_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513601L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3829195513236815875L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 3170536334544601087L) != 0) {
				{
				setState(4843);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(4842);
					((Func_sig_argContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==OUT || _la==VARIADIC) ) {
						((Func_sig_argContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4846);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4845);
					((Func_sig_argContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(4848);
				((Func_sig_argContext)_localctx).argtype = data_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_arg_listContext extends ParserRuleContext {
		public List<Func_sig_argContext> func_sig_arg() {
			return getRuleContexts(Func_sig_argContext.class);
		}
		public Func_sig_argContext func_sig_arg(int i) {
			return getRuleContext(Func_sig_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_sig_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_arg_listContext func_sig_arg_list() throws RecognitionException {
		Func_sig_arg_listContext _localctx = new Func_sig_arg_listContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_func_sig_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4851);
			func_sig_arg();
			setState(4856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4852);
				match(COMMA);
				setState(4853);
				func_sig_arg();
				}
				}
				setState(4858);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sigContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_sig_arg_listContext func_sig_arg_list() {
			return getRuleContext(Func_sig_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_sigContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sigContext func_sig() throws RecognitionException {
		Func_sigContext _localctx = new Func_sigContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_func_sig);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			((Func_sigContext)_localctx).name = identifier(0);
			setState(4864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(4860);
				match(OPEN_PAREN);
				setState(4861);
				func_sig_arg_list();
				setState(4862);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_sig_listContext extends ParserRuleContext {
		public List<Func_sigContext> func_sig() {
			return getRuleContexts(Func_sigContext.class);
		}
		public Func_sigContext func_sig(int i) {
			return getRuleContext(Func_sigContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_sig_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_listContext func_sig_list() throws RecognitionException {
		Func_sig_listContext _localctx = new Func_sig_listContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_func_sig_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4866);
			func_sig();
			setState(4871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4867);
				match(COMMA);
				setState(4868);
				func_sig();
				}
				}
				setState(4873);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_nameContext extends ParserRuleContext {
		public TerminalNode ABSTIME() { return getToken(PostgreSQLParser.ABSTIME, 0); }
		public TerminalNode RELTIME() { return getToken(PostgreSQLParser.RELTIME, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode BIGSERIAL() { return getToken(PostgreSQLParser.BIGSERIAL, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode BIT_VARYING() { return getToken(PostgreSQLParser.BIT_VARYING, 0); }
		public TerminalNode BOOL() { return getToken(PostgreSQLParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLParser.BOOLEAN, 0); }
		public TerminalNode BOX() { return getToken(PostgreSQLParser.BOX, 0); }
		public TerminalNode BYTEA() { return getToken(PostgreSQLParser.BYTEA, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHARACTER_VARYING() { return getToken(PostgreSQLParser.CHARACTER_VARYING, 0); }
		public TerminalNode CIDR() { return getToken(PostgreSQLParser.CIDR, 0); }
		public TerminalNode CIRCLE() { return getToken(PostgreSQLParser.CIRCLE, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLParser.DATE, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLParser.DECIMAL, 0); }
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLParser.FLOAT8, 0); }
		public TerminalNode INET() { return getToken(PostgreSQLParser.INET, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLParser.INT, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLParser.INT4, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLParser.INT2, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLParser.INT8, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode FIELDS() { return getToken(PostgreSQLParser.FIELDS, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode JSONB() { return getToken(PostgreSQLParser.JSONB, 0); }
		public TerminalNode LINE() { return getToken(PostgreSQLParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(PostgreSQLParser.LSEG, 0); }
		public TerminalNode MACADDR() { return getToken(PostgreSQLParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(PostgreSQLParser.MACADDR8, 0); }
		public TerminalNode MONEY() { return getToken(PostgreSQLParser.MONEY, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLParser.PATH, 0); }
		public TerminalNode PG_LSN() { return getToken(PostgreSQLParser.PG_LSN, 0); }
		public TerminalNode POINT() { return getToken(PostgreSQLParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(PostgreSQLParser.POLYGON, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode SERIAL() { return getToken(PostgreSQLParser.SERIAL, 0); }
		public TerminalNode SERIAL2() { return getToken(PostgreSQLParser.SERIAL2, 0); }
		public TerminalNode SERIAL4() { return getToken(PostgreSQLParser.SERIAL4, 0); }
		public TerminalNode SERIAL8() { return getToken(PostgreSQLParser.SERIAL8, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(PostgreSQLParser.SMALLSERIAL, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public List<TerminalNode> TIME() { return getTokens(PostgreSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(PostgreSQLParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMETZ() { return getToken(PostgreSQLParser.TIMETZ, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(PostgreSQLParser.TIMESTAMPTZ, 0); }
		public TerminalNode TSQUERY() { return getToken(PostgreSQLParser.TSQUERY, 0); }
		public TerminalNode TSVECTOR() { return getToken(PostgreSQLParser.TSVECTOR, 0); }
		public TerminalNode TXID_SNAPSHOT() { return getToken(PostgreSQLParser.TXID_SNAPSHOT, 0); }
		public TerminalNode UUID() { return getToken(PostgreSQLParser.UUID, 0); }
		public TerminalNode VARBIT() { return getToken(PostgreSQLParser.VARBIT, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode XML() { return getToken(PostgreSQLParser.XML, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_type_name);
		int _la;
		try {
			setState(5018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABSTIME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4874);
				match(ABSTIME);
				}
				break;
			case RELTIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4875);
				match(RELTIME);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4876);
				match(BIGINT);
				}
				break;
			case BIGSERIAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4877);
				match(BIGSERIAL);
				}
				break;
			case BIT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4878);
				match(BIT);
				setState(4882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(4879);
					match(OPEN_PAREN);
					setState(4880);
					match(INTEGER_LITERAL);
					setState(4881);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case BIT_VARYING:
				enterOuterAlt(_localctx, 6);
				{
				setState(4884);
				match(BIT_VARYING);
				setState(4888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4885);
					match(OPEN_PAREN);
					setState(4886);
					match(INTEGER_LITERAL);
					setState(4887);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4890);
				match(BOOL);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 8);
				{
				setState(4891);
				match(BOOLEAN);
				}
				break;
			case BOX:
				enterOuterAlt(_localctx, 9);
				{
				setState(4892);
				match(BOX);
				}
				break;
			case BYTEA:
				enterOuterAlt(_localctx, 10);
				{
				setState(4893);
				match(BYTEA);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 11);
				{
				setState(4894);
				match(CHAR);
				setState(4898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4895);
					match(OPEN_PAREN);
					setState(4896);
					match(INTEGER_LITERAL);
					setState(4897);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 12);
				{
				setState(4900);
				match(CHARACTER);
				setState(4904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
				case 1:
					{
					setState(4901);
					match(OPEN_PAREN);
					setState(4902);
					match(INTEGER_LITERAL);
					setState(4903);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CHARACTER_VARYING:
				enterOuterAlt(_localctx, 13);
				{
				setState(4906);
				match(CHARACTER_VARYING);
				setState(4910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(4907);
					match(OPEN_PAREN);
					setState(4908);
					match(INTEGER_LITERAL);
					setState(4909);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case CIDR:
				enterOuterAlt(_localctx, 14);
				{
				setState(4912);
				match(CIDR);
				}
				break;
			case CIRCLE:
				enterOuterAlt(_localctx, 15);
				{
				setState(4913);
				match(CIRCLE);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 16);
				{
				setState(4914);
				match(DATE);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 17);
				{
				setState(4915);
				match(DECIMAL);
				setState(4921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
				case 1:
					{
					setState(4916);
					match(OPEN_PAREN);
					setState(4917);
					match(INTEGER_LITERAL);
					setState(4918);
					match(COMMA);
					setState(4919);
					match(INTEGER_LITERAL);
					setState(4920);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 18);
				{
				setState(4923);
				match(DOUBLE);
				setState(4924);
				match(PRECISION);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 19);
				{
				setState(4925);
				match(FLOAT4);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 20);
				{
				setState(4926);
				match(FLOAT8);
				}
				break;
			case INET:
				enterOuterAlt(_localctx, 21);
				{
				setState(4927);
				match(INET);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 22);
				{
				setState(4928);
				match(INT);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 23);
				{
				setState(4929);
				match(INT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 24);
				{
				setState(4930);
				match(INT2);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 25);
				{
				setState(4931);
				match(INT8);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 26);
				{
				setState(4932);
				match(INTEGER);
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 27);
				{
				setState(4933);
				match(INTERVAL);
				setState(4935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4934);
					match(FIELDS);
					}
					break;
				}
				setState(4938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4937);
					match(INTEGER_LITERAL);
					}
					break;
				}
				}
				break;
			case JSON:
				enterOuterAlt(_localctx, 28);
				{
				setState(4940);
				match(JSON);
				}
				break;
			case JSONB:
				enterOuterAlt(_localctx, 29);
				{
				setState(4941);
				match(JSONB);
				}
				break;
			case LINE:
				enterOuterAlt(_localctx, 30);
				{
				setState(4942);
				match(LINE);
				}
				break;
			case LSEG:
				enterOuterAlt(_localctx, 31);
				{
				setState(4943);
				match(LSEG);
				}
				break;
			case MACADDR:
				enterOuterAlt(_localctx, 32);
				{
				setState(4944);
				match(MACADDR);
				}
				break;
			case MACADDR8:
				enterOuterAlt(_localctx, 33);
				{
				setState(4945);
				match(MACADDR8);
				}
				break;
			case MONEY:
				enterOuterAlt(_localctx, 34);
				{
				setState(4946);
				match(MONEY);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 35);
				{
				setState(4947);
				match(NUMERIC);
				setState(4953);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(4948);
					match(OPEN_PAREN);
					setState(4949);
					match(INTEGER_LITERAL);
					setState(4950);
					match(COMMA);
					setState(4951);
					match(INTEGER_LITERAL);
					setState(4952);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PATH:
				enterOuterAlt(_localctx, 36);
				{
				setState(4955);
				match(PATH);
				}
				break;
			case PG_LSN:
				enterOuterAlt(_localctx, 37);
				{
				setState(4956);
				match(PG_LSN);
				}
				break;
			case POINT:
				enterOuterAlt(_localctx, 38);
				{
				setState(4957);
				match(POINT);
				}
				break;
			case POLYGON:
				enterOuterAlt(_localctx, 39);
				{
				setState(4958);
				match(POLYGON);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 40);
				{
				setState(4959);
				match(REAL);
				}
				break;
			case SERIAL:
				enterOuterAlt(_localctx, 41);
				{
				setState(4960);
				match(SERIAL);
				}
				break;
			case SERIAL2:
				enterOuterAlt(_localctx, 42);
				{
				setState(4961);
				match(SERIAL2);
				}
				break;
			case SERIAL4:
				enterOuterAlt(_localctx, 43);
				{
				setState(4962);
				match(SERIAL4);
				}
				break;
			case SERIAL8:
				enterOuterAlt(_localctx, 44);
				{
				setState(4963);
				match(SERIAL8);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 45);
				{
				setState(4964);
				match(SMALLINT);
				}
				break;
			case SMALLSERIAL:
				enterOuterAlt(_localctx, 46);
				{
				setState(4965);
				match(SMALLSERIAL);
				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 47);
				{
				setState(4966);
				match(TEXT);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 48);
				{
				setState(4967);
				match(TIME);
				setState(4971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(4968);
					match(OPEN_PAREN);
					setState(4969);
					match(INTEGER_LITERAL);
					setState(4970);
					match(CLOSE_PAREN);
					}
					break;
				}
				setState(4976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4973);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4974);
					match(TIME);
					setState(4975);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 49);
				{
				setState(4978);
				match(TIMESTAMP);
				setState(4982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(4979);
					match(OPEN_PAREN);
					setState(4980);
					match(INTEGER_LITERAL);
					setState(4981);
					match(CLOSE_PAREN);
					}
					break;
				}
				setState(4987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4984);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4985);
					match(TIME);
					setState(4986);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMETZ:
				enterOuterAlt(_localctx, 50);
				{
				setState(4989);
				match(TIMETZ);
				setState(4993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
				case 1:
					{
					setState(4990);
					match(OPEN_PAREN);
					setState(4991);
					match(INTEGER_LITERAL);
					setState(4992);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case TIMESTAMPTZ:
				enterOuterAlt(_localctx, 51);
				{
				setState(4995);
				match(TIMESTAMPTZ);
				setState(4999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4996);
					match(OPEN_PAREN);
					setState(4997);
					match(INTEGER_LITERAL);
					setState(4998);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case TSQUERY:
				enterOuterAlt(_localctx, 52);
				{
				setState(5001);
				match(TSQUERY);
				}
				break;
			case TSVECTOR:
				enterOuterAlt(_localctx, 53);
				{
				setState(5002);
				match(TSVECTOR);
				}
				break;
			case TXID_SNAPSHOT:
				enterOuterAlt(_localctx, 54);
				{
				setState(5003);
				match(TXID_SNAPSHOT);
				}
				break;
			case UUID:
				enterOuterAlt(_localctx, 55);
				{
				setState(5004);
				match(UUID);
				}
				break;
			case VARBIT:
				enterOuterAlt(_localctx, 56);
				{
				setState(5005);
				match(VARBIT);
				setState(5009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(5006);
					match(OPEN_PAREN);
					setState(5007);
					match(INTEGER_LITERAL);
					setState(5008);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 57);
				{
				setState(5011);
				match(VARCHAR);
				setState(5015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(5012);
					match(OPEN_PAREN);
					setState(5013);
					match(INTEGER_LITERAL);
					setState(5014);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case XML:
				enterOuterAlt(_localctx, 58);
				{
				setState(5017);
				match(XML);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSQLParser.NUMERIC_LITERAL, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_timezone);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			_la = _input.LA(1);
			if ( !((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & 51L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public OperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperContext oper() throws RecognitionException {
		OperContext _localctx = new OperContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_oper);
		try {
			setState(5026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5023);
				match(IS);
				setState(5024);
				match(OF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5025);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateContext aggregate() throws RecognitionException {
		AggregateContext _localctx = new AggregateContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_aggregate);
		int _la;
		try {
			setState(5091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5028);
				identifier(0);
				setState(5029);
				match(OPEN_PAREN);
				setState(5031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(5030);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5033);
				expr(0);
				setState(5038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5034);
					match(COMMA);
					setState(5035);
					expr(0);
					}
					}
					setState(5040);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5041);
					order_by_clause();
					}
				}

				setState(5044);
				match(CLOSE_PAREN);
				setState(5051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(5045);
					match(FILTER);
					setState(5046);
					match(OPEN_PAREN);
					setState(5047);
					match(WHERE);
					setState(5048);
					where_clause();
					setState(5049);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5053);
				identifier(0);
				setState(5054);
				match(OPEN_PAREN);
				setState(5055);
				match(STAR);
				setState(5056);
				match(CLOSE_PAREN);
				setState(5063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(5057);
					match(FILTER);
					setState(5058);
					match(OPEN_PAREN);
					setState(5059);
					match(WHERE);
					setState(5060);
					where_clause();
					setState(5061);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5065);
				identifier(0);
				setState(5066);
				match(OPEN_PAREN);
				setState(5075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -1525604303836807171L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 4537572335498035199L) != 0 || (((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 1245674733573L) != 0) {
					{
					setState(5067);
					expr(0);
					setState(5072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5068);
						match(COMMA);
						setState(5069);
						expr(0);
						}
						}
						setState(5074);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5077);
				match(CLOSE_PAREN);
				setState(5078);
				match(WITHIN);
				setState(5079);
				match(GROUP);
				setState(5080);
				match(OPEN_PAREN);
				setState(5081);
				order_by_clause();
				setState(5082);
				match(CLOSE_PAREN);
				setState(5089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(5083);
					match(FILTER);
					setState(5084);
					match(OPEN_PAREN);
					setState(5085);
					match(WHERE);
					setState(5086);
					where_clause();
					setState(5087);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_Context extends ParserRuleContext {
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_Context name_() throws RecognitionException {
		Name_Context _localctx = new Name_Context(_ctx, getState());
		enterRule(_localctx, 458, RULE_name_);
		try {
			setState(5095);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5093);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5094);
				identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Name_listContext extends ParserRuleContext {
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5097);
			name_();
			setState(5102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5098);
				match(COMMA);
				setState(5099);
				name_();
				}
				}
				setState(5104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Identifier_listContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_listContext identifier_list() throws RecognitionException {
		Identifier_listContext _localctx = new Identifier_listContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_identifier_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5105);
			identifier(0);
			setState(5110);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,606,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5106);
					match(COMMA);
					setState(5107);
					identifier(0);
					}
					} 
				}
				setState(5112);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,606,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_exprContext extends ParserRuleContext {
		public IdentifierContext option_name;
		public Param_valueContext value;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public Param_valueContext param_value() {
			return getRuleContext(Param_valueContext.class,0);
		}
		public Option_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_exprContext option_expr() throws RecognitionException {
		Option_exprContext _localctx = new Option_exprContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_option_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5113);
			((Option_exprContext)_localctx).option_name = identifier(0);
			setState(5116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(5114);
				match(EQUAL);
				setState(5115);
				((Option_exprContext)_localctx).value = param_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Option_listContext extends ParserRuleContext {
		public List<Option_exprContext> option_expr() {
			return getRuleContexts(Option_exprContext.class);
		}
		public Option_exprContext option_expr(int i) {
			return getRuleContext(Option_exprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOption_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOption_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOption_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_listContext option_list() throws RecognitionException {
		Option_listContext _localctx = new Option_listContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_option_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			option_expr();
			setState(5123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5119);
				match(COMMA);
				setState(5120);
				option_expr();
				}
				}
				setState(5125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_name_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_name_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_name_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_name_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_Context table_name_() throws RecognitionException {
		Table_name_Context _localctx = new Table_name_Context(_ctx, getState());
		enterRule(_localctx, 468, RULE_table_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5126);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_typeContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> OPEN_BRACKET() { return getTokens(PostgreSQLParser.OPEN_BRACKET); }
		public TerminalNode OPEN_BRACKET(int i) {
			return getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
		public List<TerminalNode> CLOSE_BRACKET() { return getTokens(PostgreSQLParser.CLOSE_BRACKET); }
		public TerminalNode CLOSE_BRACKET(int i) {
			return getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_data_type);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(5128);
				type_name();
				}
				break;
			case 2:
				{
				setState(5129);
				identifier(0);
				}
				break;
			}
			setState(5139);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5132);
					match(OPEN_BRACKET);
					setState(5134);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INTEGER_LITERAL) {
						{
						setState(5133);
						match(INTEGER_LITERAL);
						}
					}

					setState(5136);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(5141);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_type_listContext extends ParserRuleContext {
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Data_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterData_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitData_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitData_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_listContext data_type_list() throws RecognitionException {
		Data_type_listContext _localctx = new Data_type_listContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_data_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			data_type();
			setState(5147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5143);
				match(COMMA);
				setState(5144);
				data_type();
				}
				}
				setState(5149);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_methodContext extends ParserRuleContext {
		public Token builtin;
		public IdentifierContext unknown;
		public TerminalNode BTREE() { return getToken(PostgreSQLParser.BTREE, 0); }
		public TerminalNode HASH_() { return getToken(PostgreSQLParser.HASH_, 0); }
		public TerminalNode GIST() { return getToken(PostgreSQLParser.GIST, 0); }
		public TerminalNode SPGIST() { return getToken(PostgreSQLParser.SPGIST, 0); }
		public TerminalNode GIN() { return getToken(PostgreSQLParser.GIN, 0); }
		public TerminalNode BRIN() { return getToken(PostgreSQLParser.BRIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_methodContext index_method() throws RecognitionException {
		Index_methodContext _localctx = new Index_methodContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_index_method);
		int _la;
		try {
			setState(5152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BTREE:
			case HASH_:
			case GIST:
			case SPGIST:
			case GIN:
			case BRIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5150);
				((Index_methodContext)_localctx).builtin = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & 63L) != 0) ) {
					((Index_methodContext)_localctx).builtin = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5151);
				((Index_methodContext)_localctx).unknown = identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5154);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Func_callContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public Func_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_callContext func_call() throws RecognitionException {
		Func_callContext _localctx = new Func_callContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_func_call);
		int _la;
		try {
			int _alt;
			setState(5192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5156);
				func_name();
				setState(5157);
				match(OPEN_PAREN);
				setState(5158);
				match(VARIADIC);
				setState(5159);
				expr(0);
				setState(5160);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5162);
				func_name();
				setState(5163);
				match(OPEN_PAREN);
				setState(5177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -1525604303836807171L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 4537572335498035199L) != 0 || (((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 1245674733573L) != 0) {
					{
					setState(5164);
					expr(0);
					setState(5169);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5165);
							match(COMMA);
							setState(5166);
							expr(0);
							}
							} 
						}
						setState(5171);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					}
					setState(5175);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5172);
						match(COMMA);
						setState(5173);
						match(VARIADIC);
						setState(5174);
						expr(0);
						}
					}

					}
				}

				setState(5179);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5181);
				func_name();
				setState(5182);
				match(OPEN_PAREN);
				setState(5183);
				todo_fill_in();
				setState(5184);
				match(FROM);
				setState(5185);
				expr(0);
				setState(5188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5186);
					match(FOR);
					setState(5187);
					expr(0);
					}
				}

				setState(5190);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Array_cons_exprContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_cons_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_cons_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_cons_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_cons_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_cons_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_cons_exprContext array_cons_expr() throws RecognitionException {
		Array_cons_exprContext _localctx = new Array_cons_exprContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_array_cons_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(ARRAY);
			setState(5195);
			match(OPEN_BRACKET);
			setState(5204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & -11575800568512526L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334777102337L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245452583049L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206567384408260611L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -1525604303836807171L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || (((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & 4537572335498035199L) != 0 || (((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & 1245674733573L) != 0) {
				{
				setState(5196);
				expr(0);
				setState(5201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5197);
					match(COMMA);
					setState(5198);
					expr(0);
					}
					}
					setState(5203);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5206);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_itemContext extends ParserRuleContext {
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public With_column_aliasContext with_column_alias() {
			return getRuleContext(With_column_aliasContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public List<Todo_fill_inContext> todo_fill_in() {
			return getRuleContexts(Todo_fill_inContext.class);
		}
		public Todo_fill_inContext todo_fill_in(int i) {
			return getRuleContext(Todo_fill_inContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PostgreSQLParser.LATERAL, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_itemContext from_item() throws RecognitionException {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_itemContext _localctx = new From_itemContext(_ctx, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 482;
		enterRecursionRule(_localctx, 482, RULE_from_item, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				{
				setState(5210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(5209);
					match(ONLY);
					}
				}

				setState(5212);
				table_name_();
				setState(5214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(5213);
					match(STAR);
					}
					break;
				}
				setState(5217);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(5216);
					with_column_alias();
					}
					break;
				}
				setState(5238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
				case 1:
					{
					setState(5219);
					match(TABLESAMPLE);
					setState(5220);
					todo_fill_in();
					setState(5221);
					match(OPEN_PAREN);
					setState(5222);
					expr(0);
					setState(5227);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5223);
						match(COMMA);
						setState(5224);
						expr(0);
						}
						}
						setState(5229);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5230);
					match(CLOSE_PAREN);
					setState(5236);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
					case 1:
						{
						setState(5231);
						match(REPEATABLE);
						setState(5232);
						match(OPEN_PAREN);
						setState(5233);
						todo_fill_in();
						setState(5234);
						match(CLOSE_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5240);
					match(LATERAL);
					}
				}

				setState(5243);
				match(OPEN_PAREN);
				setState(5244);
				stmt();
				setState(5245);
				match(CLOSE_PAREN);
				setState(5247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5246);
					match(AS);
					}
				}

				setState(5249);
				alias();
				setState(5261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
				case 1:
					{
					setState(5250);
					match(OPEN_PAREN);
					setState(5251);
					column_alias();
					setState(5256);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5252);
						match(COMMA);
						setState(5253);
						column_alias();
						}
						}
						setState(5258);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5259);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(5264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5263);
					match(LATERAL);
					}
				}

				setState(5266);
				func_call();
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
				case 1:
					{
					setState(5267);
					match(WITH);
					setState(5268);
					match(ORDINALITY);
					}
					break;
				}
				setState(5272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
				case 1:
					{
					setState(5271);
					with_column_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(5275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5274);
					match(LATERAL);
					}
				}

				setState(5277);
				func_call();
				setState(5278);
				match(AS);
				setState(5279);
				match(OPEN_PAREN);
				setState(5280);
				column_definition();
				setState(5285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5281);
					match(COMMA);
					setState(5282);
					column_definition();
					}
					}
					setState(5287);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5288);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				{
				setState(5291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(5290);
					match(LATERAL);
					}
				}

				setState(5293);
				match(ROWS);
				setState(5294);
				match(FROM);
				setState(5295);
				match(OPEN_PAREN);
				setState(5296);
				func_call();
				setState(5297);
				match(CLOSE_PAREN);
				setState(5310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5298);
					match(AS);
					setState(5299);
					match(OPEN_PAREN);
					setState(5300);
					column_definition();
					setState(5305);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5301);
						match(COMMA);
						setState(5302);
						column_definition();
						}
						}
						setState(5307);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5308);
					match(CLOSE_PAREN);
					}
				}

				setState(5312);
				match(CLOSE_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5333);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_itemContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_item);
					setState(5316);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(5318);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATURAL) {
						{
						setState(5317);
						match(NATURAL);
						}
					}

					setState(5320);
					join_type();
					setState(5322);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
					case 1:
						{
						setState(5321);
						match(OPEN_PAREN);
						}
						break;
					}
					setState(5324);
					from_item(0);
					setState(5326);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
					case 1:
						{
						setState(5325);
						join_clause();
						}
						break;
					}
					setState(5329);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
					case 1:
						{
						setState(5328);
						match(CLOSE_PAREN);
						}
						break;
					}
					}
					} 
				}
				setState(5335);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,644,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_column_aliasContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public With_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_column_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_column_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_column_aliasContext with_column_alias() throws RecognitionException {
		With_column_aliasContext _localctx = new With_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_with_column_alias);
		int _la;
		try {
			int _alt;
			setState(5358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5336);
					match(AS);
					}
				}

				setState(5339);
				alias();
				setState(5348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					setState(5340);
					column_alias();
					setState(5345);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,646,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(5341);
							match(COMMA);
							setState(5342);
							column_alias();
							}
							} 
						}
						setState(5347);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,646,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5350);
					match(AS);
					}
				}

				setState(5353);
				alias();
				setState(5354);
				match(OPEN_PAREN);
				setState(5355);
				name_list();
				setState(5356);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_join_type);
		int _la;
		try {
			setState(5381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(5360);
					match(INNER);
					}
				}

				setState(5363);
				match(JOIN);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5364);
				match(LEFT);
				setState(5366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5365);
					match(OUTER);
					}
				}

				setState(5368);
				match(JOIN);
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5369);
				match(RIGHT);
				setState(5371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5370);
					match(OUTER);
					}
				}

				setState(5373);
				match(JOIN);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5374);
				match(FULL);
				setState(5376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(5375);
					match(OUTER);
					}
				}

				setState(5378);
				match(JOIN);
				}
				break;
			case CROSS:
				enterOuterAlt(_localctx, 5);
				{
				setState(5379);
				match(CROSS);
				setState(5380);
				match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_join_clause);
		int _la;
		try {
			setState(5397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(5383);
				match(ON);
				setState(5384);
				predicate(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5385);
				match(USING);
				setState(5386);
				match(OPEN_PAREN);
				setState(5387);
				column_name();
				setState(5392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5388);
					match(COMMA);
					setState(5389);
					column_name();
					}
					}
					setState(5394);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5395);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public OperContext oper() {
			return getRuleContext(OperContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 490;
		enterRecursionRule(_localctx, 490, RULE_predicate, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5400);
				expr(0);
				}
				break;
			case 2:
				{
				setState(5401);
				expr(0);
				setState(5402);
				oper();
				setState(5403);
				expr(0);
				}
				break;
			case 3:
				{
				setState(5405);
				match(OPEN_PAREN);
				setState(5406);
				predicate(0);
				setState(5407);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				setState(5409);
				match(NOT);
				setState(5410);
				predicate(1);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5421);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5419);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
					case 1:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5413);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5414);
						match(AND);
						setState(5415);
						predicate(4);
						}
						break;
					case 2:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5416);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5417);
						match(OR);
						setState(5418);
						predicate(3);
						}
						break;
					}
					} 
				}
				setState(5423);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_signatureContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public Data_type_listContext argtype;
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Data_type_listContext> data_type_list() {
			return getRuleContexts(Data_type_listContext.class);
		}
		public Data_type_listContext data_type_list(int i) {
			return getRuleContext(Data_type_listContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSQLParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSQLParser.VARIADIC, i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggregate_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_signatureContext aggregate_signature() throws RecognitionException {
		Aggregate_signatureContext _localctx = new Aggregate_signatureContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_aggregate_signature);
		int _la;
		try {
			setState(5450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5424);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5425);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(5428);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5431);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5432);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(5435);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5438);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				setState(5440);
				match(ORDER);
				setState(5441);
				match(BY);
				setState(5443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(5442);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5445);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(5448);
				((Aggregate_signatureContext)_localctx).argtype = data_type_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_column_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5452);
			match(NOT);
			setState(5453);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintsContext extends ParserRuleContext {
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public Column_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintsContext column_constraints() throws RecognitionException {
		Column_constraintsContext _localctx = new Column_constraintsContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_column_constraints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5455);
				column_constraint();
				}
				}
				setState(5458); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NOT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Index_parametersContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Option_listContext option_list() {
			return getRuleContext(Option_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_parametersContext index_parameters() throws RecognitionException {
		Index_parametersContext _localctx = new Index_parametersContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_index_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5460);
				match(WITH);
				setState(5461);
				match(OPEN_PAREN);
				setState(5462);
				option_list();
				setState(5463);
				match(CLOSE_PAREN);
				}
			}

			setState(5471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5467);
				match(USING);
				setState(5468);
				match(INDEX);
				setState(5469);
				match(TABLESPACE);
				setState(5470);
				((Index_parametersContext)_localctx).tablespace = identifier(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exclude_elementContext extends ParserRuleContext {
		public IdentifierContext column_name_;
		public IdentifierContext opclass;
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PostgreSQLParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLParser.LAST, 0); }
		public Exclude_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclude_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExclude_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExclude_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExclude_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exclude_elementContext exclude_element() throws RecognitionException {
		Exclude_elementContext _localctx = new Exclude_elementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_exclude_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ANY:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHAR_LENGTH:
			case CHARACTER:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORMAT:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GREATEST:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOST:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case K_:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTET_LENGTH:
			case OCTETS:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PLAIN:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROW_COUNT:
			case ROW_NUMBER:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOME:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFIC_NAME:
			case SPECIFICTYPE:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTION_ACTIVE:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VAR_POP:
			case VAR_SAMP:
			case VARCHAR:
			case VARYING:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case ABSTIME:
			case BIGSERIAL:
			case BIT_VARYING:
			case BOOL:
			case BOX:
			case BYTEA:
			case CHARACTER_VARYING:
			case CIDR:
			case CIRCLE:
			case FLOAT4:
			case FLOAT8:
			case INET:
			case INT2:
			case INT4:
			case INT8:
			case JSON:
			case JSONB:
			case LINE:
			case LSEG:
			case MACADDR:
			case MACADDR8:
			case MONEY:
			case PG_LSN:
			case POINT:
			case POLYGON:
			case RELTIME:
			case SERIAL:
			case SERIAL2:
			case SERIAL4:
			case SERIAL8:
			case SMALLSERIAL:
			case TEXT:
			case TIMESTAMPTZ:
			case TIMETZ:
			case TSQUERY:
			case TSVECTOR:
			case TXID_SNAPSHOT:
			case UUID:
			case VARBIT:
			case XML:
			case DOUBLEQ_STRING_LITERAL:
			case IDENTIFIER:
			case IDENTIFIER_UNICODE:
				{
				setState(5473);
				((Exclude_elementContext)_localctx).column_name_ = identifier(0);
				}
				break;
			case OPEN_PAREN:
				{
				setState(5474);
				match(OPEN_PAREN);
				setState(5475);
				expr(0);
				setState(5476);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5480);
				((Exclude_elementContext)_localctx).opclass = identifier(0);
				}
				break;
			}
			setState(5484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5483);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(5486);
				match(NULLS);
				setState(5487);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_constraintContext extends ParserRuleContext {
		public Name_Context constraint_name;
		public Identifier_listContext columns;
		public Identifier_listContext operators;
		public IdentifierContext reftable;
		public IdentifierContext action;
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public TerminalNode DEFERABLE() { return getToken(PostgreSQLParser.DEFERABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(PostgreSQLParser.INITIALLY, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PostgreSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(PostgreSQLParser.REFERENCES, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public List<Identifier_listContext> identifier_list() {
			return getRuleContexts(Identifier_listContext.class);
		}
		public Identifier_listContext identifier_list(int i) {
			return getRuleContext(Identifier_listContext.class,i);
		}
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public Exclude_elementContext exclude_element() {
			return getRuleContext(Exclude_elementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(PostgreSQLParser.INHERIT, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode MATCH_SIMPLE() { return getToken(PostgreSQLParser.MATCH_SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(PostgreSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(PostgreSQLParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5490);
				match(CONSTRAINT);
				setState(5491);
				((Table_constraintContext)_localctx).constraint_name = name_();
				}
			}

			setState(5559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				{
				{
				setState(5494);
				match(CHECK);
				setState(5495);
				match(OPEN_PAREN);
				setState(5496);
				expr(0);
				setState(5497);
				match(CLOSE_PAREN);
				setState(5500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(5498);
					match(NO);
					setState(5499);
					match(INHERIT);
					}
				}

				}
				}
				break;
			case UNIQUE:
				{
				{
				setState(5502);
				match(UNIQUE);
				setState(5503);
				match(OPEN_PAREN);
				setState(5504);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5505);
				match(CLOSE_PAREN);
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(5507);
				match(PRIMARY);
				setState(5508);
				match(KEY);
				setState(5509);
				match(OPEN_PAREN);
				setState(5510);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5511);
				match(CLOSE_PAREN);
				setState(5512);
				index_parameters();
				}
				}
				break;
			case EOF:
			case DEFERABLE:
			case EXCLUDE:
			case INITIALLY:
			case NOT:
			case COMMA:
			case CLOSE_PAREN:
			case SEMI:
				{
				setState(5530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCLUDE) {
					{
					setState(5514);
					match(EXCLUDE);
					setState(5517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(5515);
						match(USING);
						setState(5516);
						index_method();
						}
					}

					setState(5519);
					match(OPEN_PAREN);
					setState(5520);
					exclude_element();
					setState(5521);
					match(WITH);
					setState(5522);
					((Table_constraintContext)_localctx).operators = identifier_list();
					setState(5523);
					match(CLOSE_PAREN);
					setState(5524);
					index_parameters();
					{
					setState(5525);
					match(WHERE);
					setState(5526);
					match(OPEN_PAREN);
					setState(5527);
					predicate(0);
					setState(5528);
					match(CLOSE_PAREN);
					}
					}
				}

				}
				break;
			case FOREIGN:
				{
				{
				setState(5532);
				match(FOREIGN);
				setState(5533);
				match(KEY);
				setState(5534);
				match(OPEN_PAREN);
				setState(5535);
				((Table_constraintContext)_localctx).columns = identifier_list();
				setState(5536);
				match(CLOSE_PAREN);
				setState(5537);
				match(REFERENCES);
				setState(5538);
				((Table_constraintContext)_localctx).reftable = identifier(0);
				setState(5540);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5539);
					((Table_constraintContext)_localctx).columns = identifier_list();
					}
					break;
				}
				setState(5547);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5542);
					match(MATCH);
					setState(5543);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(5544);
					match(MATCH);
					setState(5545);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(5546);
					match(MATCH_SIMPLE);
					}
					break;
				}
				setState(5552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5549);
					match(ON);
					setState(5550);
					match(DELETE);
					setState(5551);
					((Table_constraintContext)_localctx).action = identifier(0);
					}
					break;
				}
				setState(5557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5554);
					match(ON);
					setState(5555);
					match(UPDATE);
					setState(5556);
					((Table_constraintContext)_localctx).action = identifier(0);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				{
				setState(5562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5561);
					match(NOT);
					}
				}

				setState(5564);
				match(DEFERABLE);
				}
				break;
			}
			setState(5569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(5567);
				match(INITIALLY);
				setState(5568);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_nameContext extends ParserRuleContext {
		public Name_Context name;
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_role_name);
		try {
			setState(5575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5571);
				((Role_nameContext)_localctx).name = name_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5572);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5573);
				match(SESSION_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5574);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_name_listContext extends ParserRuleContext {
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_name_listContext role_name_list() throws RecognitionException {
		Role_name_listContext _localctx = new Role_name_listContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_role_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577);
			role_name();
			setState(5582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5578);
				match(COMMA);
				setState(5579);
				role_name();
				}
				}
				setState(5584);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_valueContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLParser.FALSE, 0); }
		public TerminalNode YES() { return getToken(PostgreSQLParser.YES, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSQLParser.NUMERIC_LITERAL, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Param_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterParam_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitParam_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitParam_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_valueContext param_value() throws RecognitionException {
		Param_valueContext _localctx = new Param_valueContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_param_value);
		try {
			setState(5596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5585);
				match(ON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5586);
				match(OFF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5587);
				match(TRUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5588);
				match(FALSE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5589);
				match(YES);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5590);
				match(NO);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5591);
				match(NONE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5592);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5593);
				match(NUMERIC_LITERAL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5594);
				match(INTEGER_LITERAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5595);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_reserved_keywordContext extends ParserRuleContext {
		public TerminalNode A_() { return getToken(PostgreSQLParser.A_, 0); }
		public TerminalNode ABORT() { return getToken(PostgreSQLParser.ABORT, 0); }
		public TerminalNode ABS() { return getToken(PostgreSQLParser.ABS, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADA() { return getToken(PostgreSQLParser.ADA, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALLOCATE() { return getToken(PostgreSQLParser.ALLOCATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ANY() { return getToken(PostgreSQLParser.ANY, 0); }
		public TerminalNode ARE() { return getToken(PostgreSQLParser.ARE, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(PostgreSQLParser.ATOMIC, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(PostgreSQLParser.ATTRIBUTES, 0); }
		public TerminalNode AVG() { return getToken(PostgreSQLParser.AVG, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PostgreSQLParser.BEGIN, 0); }
		public TerminalNode BERNOULLI() { return getToken(PostgreSQLParser.BERNOULLI, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(PostgreSQLParser.BIT_LENGTH, 0); }
		public TerminalNode BLOB() { return getToken(PostgreSQLParser.BLOB, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLParser.BOOLEAN, 0); }
		public TerminalNode BREADTH() { return getToken(PostgreSQLParser.BREADTH, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode C_() { return getToken(PostgreSQLParser.C_, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CARDINALITY() { return getToken(PostgreSQLParser.CARDINALITY, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(PostgreSQLParser.CATALOG_NAME, 0); }
		public TerminalNode CEIL() { return getToken(PostgreSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(PostgreSQLParser.CEILING, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHARACTERS() { return getToken(PostgreSQLParser.CHARACTERS, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARACTER_SET_CATALOG() { return getToken(PostgreSQLParser.CHARACTER_SET_CATALOG, 0); }
		public TerminalNode CHARACTER_SET_NAME() { return getToken(PostgreSQLParser.CHARACTER_SET_NAME, 0); }
		public TerminalNode CHARACTER_SET_SCHEMA() { return getToken(PostgreSQLParser.CHARACTER_SET_SCHEMA, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(PostgreSQLParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLOB() { return getToken(PostgreSQLParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode COBOL() { return getToken(PostgreSQLParser.COBOL, 0); }
		public TerminalNode COLLATION_CATALOG() { return getToken(PostgreSQLParser.COLLATION_CATALOG, 0); }
		public TerminalNode COLLATION_NAME() { return getToken(PostgreSQLParser.COLLATION_NAME, 0); }
		public TerminalNode COLLATION_SCHEMA() { return getToken(PostgreSQLParser.COLLATION_SCHEMA, 0); }
		public TerminalNode COLLECT() { return getToken(PostgreSQLParser.COLLECT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(PostgreSQLParser.COLUMN_NAME, 0); }
		public TerminalNode COMMAND_FUNCTION() { return getToken(PostgreSQLParser.COMMAND_FUNCTION, 0); }
		public TerminalNode COMMAND_FUNCTION_CODE() { return getToken(PostgreSQLParser.COMMAND_FUNCTION_CODE, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONDITION() { return getToken(PostgreSQLParser.CONDITION, 0); }
		public TerminalNode CONDITION_NUMBER() { return getToken(PostgreSQLParser.CONDITION_NUMBER, 0); }
		public TerminalNode CONNECT() { return getToken(PostgreSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_NAME() { return getToken(PostgreSQLParser.CONNECTION_NAME, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(PostgreSQLParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(PostgreSQLParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(PostgreSQLParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PostgreSQLParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTAINS() { return getToken(PostgreSQLParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSQLParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public TerminalNode CONVERT() { return getToken(PostgreSQLParser.CONVERT, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode CORR() { return getToken(PostgreSQLParser.CORR, 0); }
		public TerminalNode CORRESPONDING() { return getToken(PostgreSQLParser.CORRESPONDING, 0); }
		public TerminalNode COUNT() { return getToken(PostgreSQLParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(PostgreSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(PostgreSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CUME_DIST() { return getToken(PostgreSQLParser.CUME_DIST, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DEFAULT_TRANSFORM_GROUP() { return getToken(PostgreSQLParser.CURRENT_DEFAULT_TRANSFORM_GROUP, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(PostgreSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_TRANSFORM_GROUP_FOR_TYPE() { return getToken(PostgreSQLParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(PostgreSQLParser.CURSOR_NAME, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLParser.DATE, 0); }
		public TerminalNode DATETIME_INTERVAL_CODE() { return getToken(PostgreSQLParser.DATETIME_INTERVAL_CODE, 0); }
		public TerminalNode DATETIME_INTERVAL_PRECISION() { return getToken(PostgreSQLParser.DATETIME_INTERVAL_PRECISION, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINED() { return getToken(PostgreSQLParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DEGREE() { return getToken(PostgreSQLParser.DEGREE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PostgreSQLParser.DENSE_RANK, 0); }
		public TerminalNode DEPTH() { return getToken(PostgreSQLParser.DEPTH, 0); }
		public TerminalNode DEREF() { return getToken(PostgreSQLParser.DEREF, 0); }
		public TerminalNode DERIVED() { return getToken(PostgreSQLParser.DERIVED, 0); }
		public TerminalNode DESCRIBE() { return getToken(PostgreSQLParser.DESCRIBE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(PostgreSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PostgreSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISCONNECT() { return getToken(PostgreSQLParser.DISCONNECT, 0); }
		public TerminalNode DISPATCH() { return getToken(PostgreSQLParser.DISPATCH, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLParser.DOUBLE, 0); }
		public TerminalNode DYNAMIC() { return getToken(PostgreSQLParser.DYNAMIC, 0); }
		public TerminalNode DYNAMIC_FUNCTION() { return getToken(PostgreSQLParser.DYNAMIC_FUNCTION, 0); }
		public TerminalNode DYNAMIC_FUNCTION_CODE() { return getToken(PostgreSQLParser.DYNAMIC_FUNCTION_CODE, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PostgreSQLParser.ELEMENT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode END() { return getToken(PostgreSQLParser.END, 0); }
		public TerminalNode EQUALS() { return getToken(PostgreSQLParser.EQUALS, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVERY() { return getToken(PostgreSQLParser.EVERY, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXEC() { return getToken(PostgreSQLParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXP() { return getToken(PostgreSQLParser.EXP, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FINAL() { return getToken(PostgreSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(PostgreSQLParser.FLOOR, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORMAT() { return getToken(PostgreSQLParser.FORMAT, 0); }
		public TerminalNode FORTRAN() { return getToken(PostgreSQLParser.FORTRAN, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FOUND() { return getToken(PostgreSQLParser.FOUND, 0); }
		public TerminalNode FREE() { return getToken(PostgreSQLParser.FREE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUSION() { return getToken(PostgreSQLParser.FUSION, 0); }
		public TerminalNode G_() { return getToken(PostgreSQLParser.G_, 0); }
		public TerminalNode GENERAL() { return getToken(PostgreSQLParser.GENERAL, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(PostgreSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(PostgreSQLParser.GOTO, 0); }
		public TerminalNode GREATEST() { return getToken(PostgreSQLParser.GREATEST, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HIERARCHY() { return getToken(PostgreSQLParser.HIERARCHY, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOST() { return getToken(PostgreSQLParser.HOST, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLParser.IDENTITY, 0); }
		public TerminalNode IGNORE() { return getToken(PostgreSQLParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLEMENTATION() { return getToken(PostgreSQLParser.IMPLEMENTATION, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLParser.IMPLICIT, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDICATOR() { return getToken(PostgreSQLParser.INDICATOR, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INPUT() { return getToken(PostgreSQLParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTANCE() { return getToken(PostgreSQLParser.INSTANCE, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PostgreSQLParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERSECTION() { return getToken(PostgreSQLParser.INTERSECTION, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode K_() { return getToken(PostgreSQLParser.K_, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode KEY_MEMBER() { return getToken(PostgreSQLParser.KEY_MEMBER, 0); }
		public TerminalNode KEY_TYPE() { return getToken(PostgreSQLParser.KEY_TYPE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLParser.LAST, 0); }
		public TerminalNode LEAST() { return getToken(PostgreSQLParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(PostgreSQLParser.LENGTH, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LN() { return getToken(PostgreSQLParser.LN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCATOR() { return getToken(PostgreSQLParser.LOCATOR, 0); }
		public TerminalNode LOCK() { return getToken(PostgreSQLParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOWER() { return getToken(PostgreSQLParser.LOWER, 0); }
		public TerminalNode M_() { return getToken(PostgreSQLParser.M_, 0); }
		public TerminalNode MAP() { return getToken(PostgreSQLParser.MAP, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode MAX() { return getToken(PostgreSQLParser.MAX, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MEMBER() { return getToken(PostgreSQLParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public TerminalNode MESSAGE_LENGTH() { return getToken(PostgreSQLParser.MESSAGE_LENGTH, 0); }
		public TerminalNode MESSAGE_OCTET_LENGTH() { return getToken(PostgreSQLParser.MESSAGE_OCTET_LENGTH, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PostgreSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MIN() { return getToken(PostgreSQLParser.MIN, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSQLParser.MOD, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MODIFIES() { return getToken(PostgreSQLParser.MODIFIES, 0); }
		public TerminalNode MODULE() { return getToken(PostgreSQLParser.MODULE, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLParser.MONTH, 0); }
		public TerminalNode MORE_() { return getToken(PostgreSQLParser.MORE_, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode MULTISET() { return getToken(PostgreSQLParser.MULTISET, 0); }
		public TerminalNode MUMPS() { return getToken(PostgreSQLParser.MUMPS, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NCLOB() { return getToken(PostgreSQLParser.NCLOB, 0); }
		public TerminalNode NESTING() { return getToken(PostgreSQLParser.NESTING, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLABLE() { return getToken(PostgreSQLParser.NULLABLE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(PostgreSQLParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PostgreSQLParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(PostgreSQLParser.OCTETS, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDERING() { return getToken(PostgreSQLParser.ORDERING, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(PostgreSQLParser.OUTPUT, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PAD() { return getToken(PostgreSQLParser.PAD, 0); }
		public TerminalNode PARAMETER() { return getToken(PostgreSQLParser.PARAMETER, 0); }
		public TerminalNode PARAMETER_MODE() { return getToken(PostgreSQLParser.PARAMETER_MODE, 0); }
		public TerminalNode PARAMETER_NAME() { return getToken(PostgreSQLParser.PARAMETER_NAME, 0); }
		public TerminalNode PARAMETER_ORDINAL_POSITION() { return getToken(PostgreSQLParser.PARAMETER_ORDINAL_POSITION, 0); }
		public TerminalNode PARAMETER_SPECIFIC_CATALOG() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_CATALOG, 0); }
		public TerminalNode PARAMETER_SPECIFIC_NAME() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_NAME, 0); }
		public TerminalNode PARAMETER_SPECIFIC_SCHEMA() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_SCHEMA, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASCAL() { return getToken(PostgreSQLParser.PASCAL, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLParser.PATH, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PostgreSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PostgreSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PostgreSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PLAIN() { return getToken(PostgreSQLParser.PLAIN, 0); }
		public TerminalNode PLI() { return getToken(PostgreSQLParser.PLI, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode POWER() { return getToken(PostgreSQLParser.POWER, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(PostgreSQLParser.RANK, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode READS() { return getToken(PostgreSQLParser.READS, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(PostgreSQLParser.REFRESH, 0); }
		public TerminalNode REGR_AVGX() { return getToken(PostgreSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(PostgreSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(PostgreSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(PostgreSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(PostgreSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(PostgreSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(PostgreSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(PostgreSQLParser.REGR_SYY, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSQLParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(PostgreSQLParser.RESULT, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode RETURNED_CARDINALITY() { return getToken(PostgreSQLParser.RETURNED_CARDINALITY, 0); }
		public TerminalNode RETURNED_LENGTH() { return getToken(PostgreSQLParser.RETURNED_LENGTH, 0); }
		public TerminalNode RETURNED_OCTET_LENGTH() { return getToken(PostgreSQLParser.RETURNED_OCTET_LENGTH, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(PostgreSQLParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINE_CATALOG() { return getToken(PostgreSQLParser.ROUTINE_CATALOG, 0); }
		public TerminalNode ROUTINE_NAME() { return getToken(PostgreSQLParser.ROUTINE_NAME, 0); }
		public TerminalNode ROUTINE_SCHEMA() { return getToken(PostgreSQLParser.ROUTINE_SCHEMA, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode ROW_COUNT() { return getToken(PostgreSQLParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PostgreSQLParser.ROW_NUMBER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCALE() { return getToken(PostgreSQLParser.SCALE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(PostgreSQLParser.SCHEMA_NAME, 0); }
		public TerminalNode SCOPE() { return getToken(PostgreSQLParser.SCOPE, 0); }
		public TerminalNode SCOPE_CATALOG() { return getToken(PostgreSQLParser.SCOPE_CATALOG, 0); }
		public TerminalNode SCOPE_NAME() { return getToken(PostgreSQLParser.SCOPE_NAME, 0); }
		public TerminalNode SCOPE_SCHEMA() { return getToken(PostgreSQLParser.SCOPE_SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLParser.SECOND, 0); }
		public TerminalNode SECTION() { return getToken(PostgreSQLParser.SECTION, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SELF() { return getToken(PostgreSQLParser.SELF, 0); }
		public TerminalNode SENSITIVE() { return getToken(PostgreSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(PostgreSQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER_NAME() { return getToken(PostgreSQLParser.SERVER_NAME, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SIZE() { return getToken(PostgreSQLParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SOME() { return getToken(PostgreSQLParser.SOME, 0); }
		public TerminalNode SOURCE() { return getToken(PostgreSQLParser.SOURCE, 0); }
		public TerminalNode SPACE() { return getToken(PostgreSQLParser.SPACE, 0); }
		public TerminalNode SPECIFIC() { return getToken(PostgreSQLParser.SPECIFIC, 0); }
		public TerminalNode SPECIFICTYPE() { return getToken(PostgreSQLParser.SPECIFICTYPE, 0); }
		public TerminalNode SPECIFIC_NAME() { return getToken(PostgreSQLParser.SPECIFIC_NAME, 0); }
		public TerminalNode SQL() { return getToken(PostgreSQLParser.SQL, 0); }
		public TerminalNode SQLCODE() { return getToken(PostgreSQLParser.SQLCODE, 0); }
		public TerminalNode SQLERROR() { return getToken(PostgreSQLParser.SQLERROR, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(PostgreSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode SQLWARNING() { return getToken(PostgreSQLParser.SQLWARNING, 0); }
		public TerminalNode SQRT() { return getToken(PostgreSQLParser.SQRT, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATE() { return getToken(PostgreSQLParser.STATE, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(PostgreSQLParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDDEV_POP() { return getToken(PostgreSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(PostgreSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLParser.STRICT, 0); }
		public TerminalNode STRUCTURE() { return getToken(PostgreSQLParser.STRUCTURE, 0); }
		public TerminalNode STYLE() { return getToken(PostgreSQLParser.STYLE, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(PostgreSQLParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PostgreSQLParser.SUBMULTISET, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode SUM() { return getToken(PostgreSQLParser.SUM, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSQLParser.SYSTEM_USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TABLE_NAME() { return getToken(PostgreSQLParser.TABLE_NAME, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PostgreSQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PostgreSQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TOP_LEVEL_COUNT() { return getToken(PostgreSQLParser.TOP_LEVEL_COUNT, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS_COMMITTED() { return getToken(PostgreSQLParser.TRANSACTIONS_COMMITTED, 0); }
		public TerminalNode TRANSACTIONS_ROLLED_BACK() { return getToken(PostgreSQLParser.TRANSACTIONS_ROLLED_BACK, 0); }
		public TerminalNode TRANSACTION_ACTIVE() { return getToken(PostgreSQLParser.TRANSACTION_ACTIVE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRANSFORMS() { return getToken(PostgreSQLParser.TRANSFORMS, 0); }
		public TerminalNode TRANSLATE() { return getToken(PostgreSQLParser.TRANSLATE, 0); }
		public TerminalNode TRANSLATION() { return getToken(PostgreSQLParser.TRANSLATION, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRIGGER_CATALOG() { return getToken(PostgreSQLParser.TRIGGER_CATALOG, 0); }
		public TerminalNode TRIGGER_NAME() { return getToken(PostgreSQLParser.TRIGGER_NAME, 0); }
		public TerminalNode TRIGGER_SCHEMA() { return getToken(PostgreSQLParser.TRIGGER_SCHEMA, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(PostgreSQLParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNDER() { return getToken(PostgreSQLParser.UNDER, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNNAMED() { return getToken(PostgreSQLParser.UNNAMED, 0); }
		public TerminalNode UNNEST() { return getToken(PostgreSQLParser.UNNEST, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode UPPER() { return getToken(PostgreSQLParser.UPPER, 0); }
		public TerminalNode USAGE() { return getToken(PostgreSQLParser.USAGE, 0); }
		public TerminalNode USER_DEFINED_TYPE_CATALOG() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_CATALOG, 0); }
		public TerminalNode USER_DEFINED_TYPE_CODE() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_CODE, 0); }
		public TerminalNode USER_DEFINED_TYPE_NAME() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_NAME, 0); }
		public TerminalNode USER_DEFINED_TYPE_SCHEMA() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_SCHEMA, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VAR_POP() { return getToken(PostgreSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(PostgreSQLParser.VAR_SAMP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHENEVER() { return getToken(PostgreSQLParser.WHENEVER, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLParser.WHITESPACE, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode YEAR() { return getToken(PostgreSQLParser.YEAR, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Non_reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNon_reserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNon_reserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNon_reserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_keywordContext non_reserved_keyword() throws RecognitionException {
		Non_reserved_keywordContext _localctx = new Non_reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_non_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5598);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4600110217791700978L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4323417020805627903L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -346269334810659729L) != 0 || (((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & -164385245456777353L) != 0 || (((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & -4666650814423513617L) != 0 || (((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & -3206585526350118915L) != 0 || (((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 8642312967997619065L) != 0 || (((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & -72057594172276801L) != 0 || (((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & 8969742741873359583L) != 0 || (((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & -3831447313050501123L) != 0 || (((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & 43L) != 0 || _la==TEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public Non_reserved_keywordContext non_reserved_keyword() {
			return getRuleContext(Non_reserved_keywordContext.class,0);
		}
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode IDENTIFIER() { return getToken(PostgreSQLParser.IDENTIFIER, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IDENTIFIER_UNICODE() { return getToken(PostgreSQLParser.IDENTIFIER_UNICODE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		return identifier(0);
	}

	private IdentifierContext identifier(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IdentifierContext _localctx = new IdentifierContext(_ctx, _parentState);
		IdentifierContext _prevctx = _localctx;
		int _startState = 512;
		enterRecursionRule(_localctx, 512, RULE_identifier, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				{
				setState(5601);
				non_reserved_keyword();
				}
				break;
			case 2:
				{
				setState(5602);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			case 3:
				{
				setState(5603);
				match(IDENTIFIER);
				}
				break;
			case 4:
				{
				setState(5604);
				type_name();
				}
				break;
			case 5:
				{
				setState(5605);
				match(IDENTIFIER_UNICODE);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5613);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_identifier);
					setState(5608);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(5609);
					match(DOT);
					setState(5610);
					identifier(4);
					}
					} 
				}
				setState(5615);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Todo_fill_inContext extends ParserRuleContext {
		public Todo_fill_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_fill_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTodo_fill_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTodo_fill_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTodo_fill_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_fill_inContext todo_fill_in() throws RecognitionException {
		Todo_fill_inContext _localctx = new Todo_fill_inContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_todo_fill_in);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5616);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Todo_implementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Todo_implementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_implement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTodo_implement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTodo_implement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTodo_implement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_implementContext todo_implement() throws RecognitionException {
		Todo_implementContext _localctx = new Todo_implementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_todo_implement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5618);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCorrelation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5620);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5622);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5624);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_column_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5626);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_column_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5628);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Window_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_nameContext window_name() throws RecognitionException {
		Window_nameContext _localctx = new Window_nameContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5630);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 216:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 217:
			return bool_expr_sempred((Bool_exprContext)_localctx, predIndex);
		case 241:
			return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 245:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 256:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 27);
		case 1:
			return precpred(_ctx, 26);
		case 2:
			return precpred(_ctx, 25);
		case 3:
			return precpred(_ctx, 24);
		case 4:
			return precpred(_ctx, 23);
		case 5:
			return precpred(_ctx, 22);
		case 6:
			return precpred(_ctx, 21);
		case 7:
			return precpred(_ctx, 20);
		case 8:
			return precpred(_ctx, 18);
		case 9:
			return precpred(_ctx, 33);
		case 10:
			return precpred(_ctx, 28);
		case 11:
			return precpred(_ctx, 19);
		case 12:
			return precpred(_ctx, 11);
		case 13:
			return precpred(_ctx, 10);
		case 14:
			return precpred(_ctx, 8);
		case 15:
			return precpred(_ctx, 7);
		case 16:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 2);
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 3);
		case 21:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0343\u1601\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0001\u0000\u0001\u0000\u0001\u0000\u0004"+
		"\u0000\u0216\b\u0000\u000b\u0000\f\u0000\u0217\u0001\u0000\u0001\u0000"+
		"\u0003\u0000\u021c\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0001\u0003\u0001\u0254\b\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u0280\b\u0003"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0003\u0004\u02a0\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005"+
		"\u02bd\b\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u02d4\b\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u02e2\b\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0003\t\u02f2\b\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0003\t\u02fb\b\t\u0001\t\u0001\t\u0003\t\u02ff\b\t"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
		"\t\u0001\t\u0003\t\u0326\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0334\b\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003"+
		"\n\u033f\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0003\n\u0349\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0003\u000b\u0351\b\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u035a"+
		"\b\u000b\u0001\f\u0001\f\u0001\r\u0001\r\u0003\r\u0360\b\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0003\r\u0366\b\r\u0001\r\u0003\r\u0369\b\r\u0001\r"+
		"\u0001\r\u0003\r\u036d\b\r\u0001\r\u0001\r\u0003\r\u0371\b\r\u0001\r\u0001"+
		"\r\u0003\r\u0375\b\r\u0001\r\u0001\r\u0003\r\u0379\b\r\u0001\r\u0001\r"+
		"\u0001\r\u0003\r\u037e\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u0384"+
		"\b\r\u0001\r\u0001\r\u0003\r\u0388\b\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\r\u0001\r\u0001\r\u0003\r\u0391\b\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0003\r\u0399\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0003\r\u03a2\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0003\r\u03ab\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0003\r\u03b5\b\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03bf\b\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03c8\b\r\u0001\r\u0001\r\u0001"+
		"\r\u0003\r\u03cd\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03d3\b\r"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u03dc"+
		"\b\r\u0001\r\u0001\r\u0003\r\u03e0\b\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\r\u0003\r\u03e7\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003"+
		"\r\u03ee\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0003\r\u0408"+
		"\b\r\u0003\r\u040a\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0005\u000e"+
		"\u040f\b\u000e\n\u000e\f\u000e\u0412\t\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0419\b\u000f\u0001\u000f\u0003"+
		"\u000f\u041c\b\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0420\b\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u0429\b\u000f\u0001\u000f\u0003\u000f\u042c\b"+
		"\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0430\b\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u0434\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003"+
		"\u000f\u043f\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0003"+
		"\u000f\u044b\b\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0003\u000f\u0452\b\u000f\u0001\u0010\u0001\u0010\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u046b\b\u0011\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0003\u0012\u0471\b\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0003\u0012\u047c\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0003\u0012\u048f\b\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0003\u0012\u049b\b\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003"+
		"\u0012\u04ab\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003"+
		"\u0012\u04b1\b\u0012\u0003\u0012\u04b3\b\u0012\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u04b7\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u04c1\b\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u04ca\b\u0013\u0003\u0013\u04cc\b\u0013\u0001"+
		"\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u04d7\b\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003"+
		"\u0017\u04f2\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003"+
		"\u0017\u04fe\b\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u0512\b\u0019\u0001\u0019\u0001\u0019\u0003"+
		"\u0019\u0516\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u051b"+
		"\b\u0019\u0003\u0019\u051d\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0525\b\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0003\u001a\u052f\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a"+
		"\u0539\b\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0003\u001a\u0553\b\u001a\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u0567\b\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u056e\b\u001b"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0574\b\u001c"+
		"\u0001\u001c\u0004\u001c\u0577\b\u001c\u000b\u001c\f\u001c\u0578\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0586"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u058b\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0592\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0598\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u059d\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05a8\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05ad\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05b5"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05ba\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u05be\b\u001c\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u05d8\b\u001e"+
		"\u0003\u001e\u05da\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0003\u001f\u05e0\b\u001f\u0001\u001f\u0001\u001f\u0001 \u0003 \u05e5"+
		"\b \u0001 \u0001 \u0003 \u05e9\b \u0001 \u0001 \u0003 \u05ed\b \u0001"+
		" \u0001 \u0003 \u05f1\b \u0005 \u05f3\b \n \f \u05f6\t \u0001!\u0001!"+
		"\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u05ff\b!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0003!\u0606\b!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0003!\u0616"+
		"\b!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003"+
		"\"\u0620\b\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u0630\b\"\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u0643\b#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0003#\u064f"+
		"\b#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001"+
		"#\u0001#\u0001#\u0003#\u0671\b#\u0001$\u0001$\u0001$\u0001$\u0001$\u0001"+
		"$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u0681"+
		"\b$\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u0694\b&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u06a6\b&\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0003\'\u06e3\b\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001"+
		"\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u0703"+
		"\b\'\u0001(\u0001(\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0003*\u071b\b*\u0001+\u0001+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0003+\u0730\b+\u0001,\u0001,\u0001-\u0001-\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001/\u0001/\u00010\u00010\u00030\u0746\b0\u00010\u00010\u0001"+
		"0\u00010\u00010\u00030\u074d\b0\u00011\u00011\u00012\u00012\u00013\u0001"+
		"3\u00014\u00014\u00015\u00015\u00016\u00016\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00037\u0782\b7\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00018\u00019\u00019\u00019\u0001"+
		"9\u00019\u00039\u0792\b9\u00019\u00039\u0795\b9\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00039\u07a5\b9\u00019\u00019\u00019\u00019\u00039\u07ab\b9\u00019\u0001"+
		"9\u00039\u07af\b9\u00019\u00019\u00019\u00019\u00039\u07b5\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u07bb\b9\u00019\u00019\u00019\u00019\u00039\u07c1"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07c7\b9\u00019\u00019\u00019\u0001"+
		"9\u00039\u07cd\b9\u00019\u00019\u00019\u00019\u00039\u07d3\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u07d9\b9\u00019\u00019\u00019\u00019\u00039\u07df"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07e5\b9\u00019\u00019\u00039\u07e9"+
		"\b9\u00019\u00019\u00019\u00019\u00039\u07ef\b9\u00019\u00019\u00019\u0001"+
		"9\u00039\u07f5\b9\u00019\u00019\u00019\u00019\u00039\u07fb\b9\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00039\u0804\b9\u00019\u00039\u0807"+
		"\b9\u00019\u00039\u080a\b9\u00019\u00019\u00019\u00039\u080f\b9\u0001"+
		"9\u00039\u0812\b9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00039\u0822\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u0828\b9\u00019\u00019\u00039\u082c\b9\u00019\u0001"+
		"9\u00019\u00019\u00039\u0832\b9\u00019\u00019\u00019\u00019\u00039\u0838"+
		"\b9\u00019\u00019\u00039\u083c\b9\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00019\u00019\u00039\u0853\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0859\b9\u00019\u00019\u00039\u085d\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0863\b9\u00019\u00019\u00019\u00019\u00039\u0869\b9\u0001"+
		"9\u00019\u00019\u00019\u00039\u086f\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u0875\b9\u00019\u00019\u00019\u00019\u00039\u087b\b9\u00019\u00019\u0001"+
		"9\u00019\u00039\u0881\b9\u00019\u00019\u00019\u00019\u00039\u0887\b9\u0001"+
		"9\u00019\u00019\u00019\u00039\u088d\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u0893\b9\u00019\u00019\u00039\u0897\b9\u00019\u00019\u00019\u00019\u0003"+
		"9\u089d\b9\u00019\u00019\u00019\u00019\u00039\u08a3\b9\u00019\u00019\u0003"+
		"9\u08a7\b9\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0001:\u0001:\u0001:\u0003:\u08b7\b:\u0001:\u0001:\u0001"+
		":\u0001:\u0003:\u08bd\b:\u0001:\u0001:\u0001:\u0001:\u0003:\u08c3\b:\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u08d7\b;\u0001"+
		"<\u0001<\u0001<\u0005<\u08dc\b<\n<\f<\u08df\t<\u0001=\u0001=\u0001=\u0001"+
		"=\u0001=\u0003=\u08e6\b=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0001=\u0001=\u0001=\u0003=\u08f2\b=\u0001=\u0001=\u0001=\u0001=\u0003"+
		"=\u08f8\b=\u0001>\u0001>\u0003>\u08fc\b>\u0001>\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001?\u0001?\u0001?\u0001?\u0003?\u090b"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u0910\b?\u0001?\u0001?\u0001?\u0003?\u0915"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u091a\b?\u0001?\u0001?\u0001?\u0003?\u091f"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u0924\b?\u0001?\u0001?\u0001?\u0003?\u0929"+
		"\b?\u0001?\u0001?\u0001?\u0003?\u092e\b?\u0001?\u0001?\u0001?\u0001?\u0003"+
		"?\u0934\b?\u0001?\u0001?\u0001?\u0003?\u0939\b?\u0001@\u0001@\u0003@\u093d"+
		"\b@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0003@\u0947"+
		"\b@\u0001A\u0001A\u0001A\u0001A\u0003A\u094d\bA\u0001A\u0001A\u0001A\u0001"+
		"A\u0001A\u0001A\u0005A\u0955\bA\nA\fA\u0958\tA\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0005B\u0960\bB\nB\fB\u0963\tB\u0001B\u0001B\u0001B\u0005"+
		"B\u0968\bB\nB\fB\u096b\tB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u0975\bC\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"D\u0001D\u0001D\u0001D\u0005D\u0981\bD\nD\fD\u0984\tD\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0005E\u098f\bE\nE\fE\u0992"+
		"\tE\u0001E\u0001E\u0001E\u0001E\u0003E\u0998\bE\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0003E\u099f\bE\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003"+
		"F\u09a7\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001"+
		"F\u0003F\u09b2\bF\u0001F\u0001F\u0003F\u09b6\bF\u0001F\u0001F\u0001F\u0003"+
		"F\u09bb\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u09c4"+
		"\bF\u0001G\u0001G\u0001G\u0003G\u09c9\bG\u0001G\u0001G\u0001G\u0001H\u0001"+
		"H\u0001H\u0001H\u0003H\u09d2\bH\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u09e1\bH\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0004H\u09f6"+
		"\bH\u000bH\fH\u09f7\u0003H\u09fa\bH\u0001I\u0001I\u0003I\u09fe\bI\u0001"+
		"I\u0001I\u0003I\u0a02\bI\u0001I\u0001I\u0001I\u0003I\u0a07\bI\u0001I\u0003"+
		"I\u0a0a\bI\u0001I\u0001I\u0001I\u0001I\u0003I\u0a10\bI\u0001I\u0001I\u0003"+
		"I\u0a14\bI\u0001I\u0001I\u0003I\u0a18\bI\u0001J\u0001J\u0001J\u0003J\u0a1d"+
		"\bJ\u0001J\u0003J\u0a20\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u0a27"+
		"\bJ\u0001J\u0003J\u0a2a\bJ\u0001J\u0003J\u0a2d\bJ\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0001J\u0003J\u0a35\bJ\u0001J\u0001J\u0003J\u0a39\bJ\u0003"+
		"J\u0a3b\bJ\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a43\bK\u0001"+
		"K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a4a\bK\u0001K\u0003K\u0a4d\bK\u0001"+
		"K\u0001K\u0003K\u0a51\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u0a57\bK\u0001"+
		"K\u0003K\u0a5a\bK\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0a67\bL\u0001L\u0001L\u0001L\u0001L\u0003"+
		"L\u0a6d\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0a73\bL\u0001L\u0001L\u0001"+
		"L\u0001L\u0003L\u0a79\bL\u0001L\u0001L\u0001L\u0001L\u0003L\u0a7f\bL\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u0a85\bL\u0001L\u0001L\u0003L\u0a89\bL\u0001"+
		"L\u0001L\u0003L\u0a8d\bL\u0001L\u0001L\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0003M\u0a9a\bM\u0001M\u0001M\u0001M\u0001"+
		"M\u0001M\u0001M\u0003M\u0aa2\bM\u0001M\u0001M\u0003M\u0aa6\bM\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0aaf\bM\u0001N\u0001N\u0001"+
		"N\u0001N\u0001N\u0003N\u0ab6\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0001"+
		"N\u0001N\u0003N\u0abf\bN\u0001N\u0001N\u0001N\u0001N\u0005N\u0ac5\bN\n"+
		"N\fN\u0ac8\tN\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001P"+
		"\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0ad8\bP\u0001P\u0001"+
		"P\u0003P\u0adc\bP\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0ae3\bP\u0001"+
		"P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003P\u0aeb\bP\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0003Q\u0af1\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0003Q\u0b05\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0004Q\u0b1a\bQ\u000bQ\fQ\u0b1b\u0003Q\u0b1e\bQ\u0001"+
		"R\u0001R\u0001S\u0001S\u0001S\u0003S\u0b25\bS\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001S\u0001S\u0001S\u0003S\u0b30\bS\u0001S\u0001S\u0003"+
		"S\u0b34\bS\u0001S\u0001S\u0003S\u0b38\bS\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b3f\bT\u0001T\u0003T\u0b42\bT\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b49\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0003T\u0b53\bT\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0003"+
		"T\u0b5c\bT\u0001U\u0001U\u0003U\u0b60\bU\u0001U\u0001U\u0001U\u0001U\u0003"+
		"U\u0b66\bU\u0001U\u0001U\u0001U\u0003U\u0b6b\bU\u0001U\u0003U\u0b6e\b"+
		"U\u0001U\u0001U\u0001U\u0001U\u0003U\u0b74\bU\u0001U\u0001U\u0001U\u0001"+
		"U\u0003U\u0b7a\bU\u0001U\u0001U\u0003U\u0b7e\bU\u0001U\u0003U\u0b81\b"+
		"U\u0001U\u0001U\u0003U\u0b85\bU\u0001U\u0003U\u0b88\bU\u0001U\u0003U\u0b8b"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0b94\bU\u0003"+
		"U\u0b96\bU\u0001V\u0001V\u0001W\u0001W\u0001X\u0001X\u0001Y\u0001Y\u0001"+
		"Z\u0001Z\u0001[\u0001[\u0001\\\u0001\\\u0001]\u0001]\u0001^\u0001^\u0001"+
		"_\u0001_\u0001`\u0001`\u0001a\u0001a\u0001b\u0001b\u0001c\u0001c\u0001"+
		"d\u0001d\u0001e\u0001e\u0001e\u0003e\u0bb9\be\u0001e\u0003e\u0bbc\be\u0001"+
		"e\u0003e\u0bbf\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0bc7"+
		"\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0bce\be\u0001e\u0001e\u0001"+
		"e\u0003e\u0bd3\be\u0001e\u0001e\u0003e\u0bd7\be\u0001e\u0001e\u0003e\u0bdb"+
		"\be\u0001f\u0001f\u0001g\u0001g\u0001h\u0003h\u0be2\bh\u0001h\u0001h\u0001"+
		"h\u0003h\u0be7\bh\u0001h\u0001h\u0003h\u0beb\bh\u0001h\u0003h\u0bee\b"+
		"h\u0001h\u0003h\u0bf1\bh\u0001h\u0001h\u0003h\u0bf5\bh\u0001h\u0001h\u0001"+
		"h\u0001h\u0001h\u0003h\u0bfc\bh\u0001h\u0003h\u0bff\bh\u0001i\u0001i\u0001"+
		"i\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001"+
		"j\u0001j\u0003j\u0c2d\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0c34"+
		"\bk\u0001k\u0001k\u0003k\u0c38\bk\u0001l\u0001l\u0001l\u0001l\u0003l\u0c3e"+
		"\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001m\u0001m\u0001m\u0001m\u0003"+
		"m\u0c49\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0c51\bm\u0001"+
		"n\u0001n\u0001n\u0001n\u0003n\u0c57\bn\u0001n\u0001n\u0003n\u0c5b\bn\u0001"+
		"o\u0001o\u0001o\u0001o\u0003o\u0c61\bo\u0001o\u0001o\u0003o\u0c65\bo\u0001"+
		"p\u0001p\u0001p\u0001p\u0003p\u0c6b\bp\u0001p\u0001p\u0001q\u0001q\u0001"+
		"q\u0001q\u0003q\u0c73\bq\u0001q\u0001q\u0003q\u0c77\bq\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0003r\u0c7e\br\u0001r\u0001r\u0003r\u0c82\br\u0001s\u0001"+
		"s\u0001s\u0001s\u0003s\u0c88\bs\u0001s\u0001s\u0003s\u0c8c\bs\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0003t\u0c94\bt\u0001t\u0001t\u0003t\u0c98"+
		"\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0003u\u0c9f\bu\u0001u\u0001u\u0003"+
		"u\u0ca3\bu\u0001v\u0001v\u0001v\u0001v\u0003v\u0ca9\bv\u0001v\u0001v\u0003"+
		"v\u0cad\bv\u0001w\u0001w\u0001w\u0001w\u0003w\u0cb3\bw\u0001w\u0001w\u0001"+
		"x\u0001x\u0001x\u0003x\u0cba\bx\u0001x\u0001x\u0003x\u0cbe\bx\u0001x\u0001"+
		"x\u0003x\u0cc2\bx\u0001y\u0001y\u0003y\u0cc6\by\u0001y\u0001y\u0001y\u0003"+
		"y\u0ccb\by\u0001y\u0001y\u0003y\u0ccf\by\u0001z\u0001z\u0001z\u0001z\u0001"+
		"z\u0003z\u0cd6\bz\u0001z\u0001z\u0003z\u0cda\bz\u0001{\u0001{\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0003|\u0ce3\b|\u0001|\u0001|\u0001|\u0001|\u0003"+
		"|\u0ce9\b|\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u0cf0\b}\u0001}\u0001"+
		"}\u0001}\u0001}\u0003}\u0cf6\b}\u0001~\u0001~\u0001~\u0001~\u0001~\u0003"+
		"~\u0cfd\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u0d03\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u0d09\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080"+
		"\u0d0f\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u0d13\b\u0080\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u0d19\b\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0d21\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0d27\b\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003"+
		"\u0083\u0d2d\b\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u0d31\b\u0083"+
		"\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u0d37\b\u0084"+
		"\u0001\u0084\u0001\u0084\u0003\u0084\u0d3b\b\u0084\u0001\u0085\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0003\u0085\u0d41\b\u0085\u0001\u0085\u0001\u0085"+
		"\u0003\u0085\u0d45\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086"+
		"\u0003\u0086\u0d4b\b\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0003\u0087\u0d53\b\u0087\u0001\u0087\u0001\u0087"+
		"\u0003\u0087\u0d57\b\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0003\u0088\u0d5d\b\u0088\u0001\u0088\u0001\u0088\u0003\u0088\u0d61\b"+
		"\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0d67"+
		"\b\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0003\u008a\u0d71\b\u008a\u0001\u008a\u0001"+
		"\u008a\u0003\u008a\u0d75\b\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0d7d\b\u008b\u0001\u008b\u0001"+
		"\u008b\u0003\u008b\u0d81\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0d89\b\u008c\u0001\u008c\u0001"+
		"\u008c\u0003\u008c\u0d8d\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0d95\b\u008d\u0001\u008d\u0001"+
		"\u008d\u0003\u008d\u0d99\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0003\u008e\u0d9f\b\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0dab\b\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0db1\b\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0003\u0090\u0db7\b\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0dbb"+
		"\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091\u0dc1"+
		"\b\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0003\u0092\u0dca\b\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0dd2\b\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0003\u0093\u0ddb\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ddf"+
		"\b\u0093\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094\u0de4\b\u0094"+
		"\u0001\u0095\u0001\u0095\u0003\u0095\u0de8\b\u0095\u0001\u0095\u0003\u0095"+
		"\u0deb\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0005\u0095\u0df2\b\u0095\n\u0095\f\u0095\u0df5\t\u0095\u0001\u0095\u0001"+
		"\u0095\u0003\u0095\u0df9\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0003"+
		"\u0095\u0e04\b\u0095\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001"+
		"\u0098\u0001\u0098\u0001\u0099\u0003\u0099\u0e0d\b\u0099\u0001\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e14\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e1a\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0003\u0099\u0e1e\b\u0099\u0001\u0099\u0003\u0099\u0e21"+
		"\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0e27"+
		"\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001"+
		"\u0099\u0003\u0099\u0e2f\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u0e34\b\u0099\u0001\u0099\u0003\u0099\u0e37\b\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0003\u0099\u0e40\b\u0099\u0003\u0099\u0e42\b\u0099\u0003\u0099\u0e44"+
		"\b\u0099\u0001\u0099\u0003\u0099\u0e47\b\u0099\u0001\u009a\u0001\u009a"+
		"\u0001\u009a\u0001\u009b\u0001\u009b\u0001\u009c\u0001\u009c\u0003\u009c"+
		"\u0e50\b\u009c\u0001\u009c\u0003\u009c\u0e53\b\u009c\u0001\u009c\u0001"+
		"\u009c\u0003\u009c\u0e57\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001"+
		"\u009c\u0001\u009c\u0003\u009c\u0e6a\b\u009c\u0001\u009c\u0003\u009c\u0e6d"+
		"\b\u009c\u0001\u009c\u0003\u009c\u0e70\b\u009c\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0003\u009d"+
		"\u0e7f\b\u009d\u0001\u009d\u0001\u009d\u0003\u009d\u0e83\b\u009d\u0003"+
		"\u009d\u0e85\b\u009d\u0001\u009d\u0003\u009d\u0e88\b\u009d\u0003\u009d"+
		"\u0e8a\b\u009d\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e"+
		"\u0001\u009e\u0003\u009e\u0e92\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u009f\u0003\u009f\u0e9a\b\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0003\u009f"+
		"\u0ea2\b\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1"+
		"\u0eae\b\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1"+
		"\u0eb4\b\u00a1\u0005\u00a1\u0eb6\b\u00a1\n\u00a1\f\u00a1\u0eb9\t\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0ebf\b\u00a1"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0003\u00a3\u0ec7\b\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u0ece\b\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0ed5\b\u00a5\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0edb\b\u00a7\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0ee3\b\u00a9"+
		"\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0ee7\b\u00a9\u0001\u00a9\u0001\u00a9"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0003\u00ab\u0ef2\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0f17\b\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0f2b\b\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0003\u00ac\u0f31\b\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u0f36\b\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u0f3a\b\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac"+
		"\u0f3e\b\u00ac\u0001\u00ac\u0004\u00ac\u0f41\b\u00ac\u000b\u00ac\f\u00ac"+
		"\u0f42\u0001\u00ac\u0001\u00ac\u0004\u00ac\u0f47\b\u00ac\u000b\u00ac\f"+
		"\u00ac\u0f48\u0001\u00ac\u0001\u00ac\u0003\u00ac\u0f4d\b\u00ac\u0001\u00ac"+
		"\u0003\u00ac\u0f50\b\u00ac\u0001\u00ac\u0003\u00ac\u0f53\b\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u0f56\b\u00ac\u0001\u00ac\u0003\u00ac\u0f59\b\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u0f5c\b\u00ac\u0001\u00ac\u0003\u00ac\u0f5f\b"+
		"\u00ac\u0001\u00ac\u0003\u00ac\u0f62\b\u00ac\u0001\u00ac\u0003\u00ac\u0f65"+
		"\b\u00ac\u0001\u00ac\u0003\u00ac\u0f68\b\u00ac\u0001\u00ac\u0003\u00ac"+
		"\u0f6b\b\u00ac\u0001\u00ad\u0003\u00ad\u0f6e\b\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0f74\b\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u0f77\b\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0f7b\b\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0f7f\b\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0003\u00ad\u0f83\b\u00ad\u0001\u00ad\u0004\u00ad\u0f86\b\u00ad\u000b"+
		"\u00ad\f\u00ad\u0f87\u0001\u00ad\u0001\u00ad\u0004\u00ad\u0f8c\b\u00ad"+
		"\u000b\u00ad\f\u00ad\u0f8d\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0f92\b"+
		"\u00ad\u0001\u00ad\u0003\u00ad\u0f95\b\u00ad\u0001\u00ad\u0003\u00ad\u0f98"+
		"\b\u00ad\u0001\u00ad\u0003\u00ad\u0f9b\b\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u0f9e\b\u00ad\u0001\u00ad\u0003\u00ad\u0fa1\b\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u0fa4\b\u00ad\u0001\u00ad\u0003\u00ad\u0fa7\b\u00ad\u0001\u00ad"+
		"\u0003\u00ad\u0faa\b\u00ad\u0001\u00ad\u0003\u00ad\u0fad\b\u00ad\u0001"+
		"\u00ad\u0003\u00ad\u0fb0\b\u00ad\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0fb4"+
		"\b\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0005\u00ae\u0fb9\b\u00ae"+
		"\n\u00ae\f\u00ae\u0fbc\t\u00ae\u0001\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0003\u00af\u0fc3\b\u00af\u0001\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0fcc"+
		"\b\u00af\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0fd2"+
		"\b\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0fd8"+
		"\b\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0fdc\b\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0003\u00b0\u0fe3\b\u00b0"+
		"\u0003\u00b0\u0fe5\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1"+
		"\u0003\u00b1\u0feb\b\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2"+
		"\u0003\u00b2\u0ff1\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2"+
		"\u0ff6\b\u00b2\u0001\u00b2\u0001\u00b2\u0003\u00b2\u0ffa\b\u00b2\u0001"+
		"\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u1007"+
		"\b\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003"+
		"\u00b4\u100e\b\u00b4\u0001\u00b4\u0003\u00b4\u1011\b\u00b4\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0005\u00b5\u1016\b\u00b5\n\u00b5\f\u00b5\u1019"+
		"\t\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0003\u00b6\u1028\b\u00b6\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u102f\b\u00b7\u0001\u00b8\u0001"+
		"\u00b8\u0003\u00b8\u1033\b\u00b8\u0001\u00b8\u0003\u00b8\u1036\b\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0003\u00b8\u103a\b\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0003\u00b8\u103e\b\u00b8\u0001\u00b8\u0003\u00b8\u1041\b\u00b8\u0001"+
		"\u00b8\u0001\u00b8\u0003\u00b8\u1045\b\u00b8\u0001\u00b8\u0003\u00b8\u1048"+
		"\b\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9\u104d\b\u00b9"+
		"\u0001\u00ba\u0003\u00ba\u1050\b\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba"+
		"\u1054\b\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u1058\b\u00ba\u0001"+
		"\u00ba\u0003\u00ba\u105b\b\u00ba\u0001\u00ba\u0003\u00ba\u105e\b\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u1063\b\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u106a\b\u00ba"+
		"\u0001\u00ba\u0003\u00ba\u106d\b\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0005\u00bc\u1074\b\u00bc\n\u00bc\f\u00bc\u1077"+
		"\t\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003"+
		"\u00bd\u107e\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u1085\b\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1089"+
		"\b\u00bd\u0001\u00bd\u0003\u00bd\u108c\b\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u108f\b\u00bd\u0001\u00bd\u0003\u00bd\u1092\b\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u1096\b\u00bd\u0001\u00bd\u0003\u00bd\u1099\b\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u109c\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u10a4\b\u00bd\u0003\u00bd"+
		"\u10a6\b\u00bd\u0003\u00bd\u10a8\b\u00bd\u0001\u00be\u0003\u00be\u10ab"+
		"\b\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0004\u00be\u10b0\b\u00be"+
		"\u000b\u00be\f\u00be\u10b1\u0001\u00be\u0001\u00be\u0004\u00be\u10b6\b"+
		"\u00be\u000b\u00be\f\u00be\u10b7\u0001\u00be\u0001\u00be\u0003\u00be\u10bc"+
		"\b\u00be\u0001\u00be\u0003\u00be\u10bf\b\u00be\u0001\u00be\u0003\u00be"+
		"\u10c2\b\u00be\u0001\u00be\u0003\u00be\u10c5\b\u00be\u0001\u00be\u0003"+
		"\u00be\u10c8\b\u00be\u0001\u00be\u0003\u00be\u10cb\b\u00be\u0001\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0003\u00bf\u10d1\b\u00bf\u0003\u00bf"+
		"\u10d3\b\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0005\u00c0\u10db\b\u00c0\n\u00c0\f\u00c0\u10de\t\u00c0\u0001"+
		"\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0005\u00c2\u10e8\b\u00c2\n\u00c2\f\u00c2\u10eb\t\u00c2"+
		"\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0001\u00c3\u0003\u00c3\u10f5\b\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0003\u00c3\u10fa\b\u00c3\u0005\u00c3\u10fc\b\u00c3\n\u00c3"+
		"\f\u00c3\u10ff\t\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c3\u0003\u00c3\u1106\b\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0005\u00c4\u110c\b\u00c4\n\u00c4\f\u00c4\u110f\t\u00c4\u0001"+
		"\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0005"+
		"\u00c5\u1117\b\u00c5\n\u00c5\f\u00c5\u111a\t\u00c5\u0001\u00c6\u0001\u00c6"+
		"\u0003\u00c6\u111e\b\u00c6\u0001\u00c6\u0003\u00c6\u1121\b\u00c6\u0001"+
		"\u00c6\u0003\u00c6\u1124\b\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003"+
		"\u00c6\u1129\b\u00c6\u0001\u00c6\u0003\u00c6\u112c\b\u00c6\u0001\u00c6"+
		"\u0003\u00c6\u112f\b\u00c6\u0005\u00c6\u1131\b\u00c6\n\u00c6\f\u00c6\u1134"+
		"\t\u00c6\u0001\u00c7\u0001\u00c7\u0003\u00c7\u1138\b\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0003\u00c7\u113c\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0003\u00c8\u1148\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0003\u00cb\u1156\b\u00cb\u0001\u00cc"+
		"\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc"+
		"\u115e\b\u00cc\n\u00cc\f\u00cc\u1161\t\u00cc\u0001\u00cc\u0003\u00cc\u1164"+
		"\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce\u0003\u00ce\u116f\b\u00ce\u0001"+
		"\u00ce\u0005\u00ce\u1172\b\u00ce\n\u00ce\f\u00ce\u1175\t\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0003\u00ce\u1179\b\u00ce\u0001\u00ce\u0005\u00ce\u117c\b"+
		"\u00ce\n\u00ce\f\u00ce\u117f\t\u00ce\u0001\u00ce\u0003\u00ce\u1182\b\u00ce"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf"+
		"\u1189\b\u00cf\n\u00cf\f\u00cf\u118c\t\u00cf\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u1190\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003"+
		"\u00d0\u1196\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0005\u00d0\u119e\b\u00d0\n\u00d0\f\u00d0\u11a1\t\u00d0"+
		"\u0003\u00d0\u11a3\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0003\u00d1\u11a9\b\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0003\u00d2"+
		"\u11ae\b\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u11b3\b"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003"+
		"\u00d4\u11c0\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005"+
		"\u00d4\u11c6\b\u00d4\n\u00d4\f\u00d4\u11c9\t\u00d4\u0003\u00d4\u11cb\b"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0005\u00d4\u11d0\b\u00d4\n"+
		"\u00d4\f\u00d4\u11d3\t\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0005"+
		"\u00d5\u11d8\b\u00d5\n\u00d5\f\u00d5\u11db\t\u00d5\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6"+
		"\u11e4\b\u00d6\u0003\u00d6\u11e6\b\u00d6\u0001\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0004\u00d8\u11fb"+
		"\b\u00d8\u000b\u00d8\f\u00d8\u11fc\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0004\u00d8\u1203\b\u00d8\u000b\u00d8\f\u00d8\u1204\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1235\b\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1247\b\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u124c\b\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u125c\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0003\u00d8\u126e\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0003"+
		"\u00d8\u1273\b\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1277\b\u00d8"+
		"\u0001\u00d8\u0004\u00d8\u127a\b\u00d8\u000b\u00d8\f\u00d8\u127b\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0004\u00d8\u1281\b\u00d8\u000b\u00d8\f"+
		"\u00d8\u1282\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0003\u00d8\u1290\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0005\u00d8\u1298\b\u00d8\n\u00d8\f\u00d8\u129b"+
		"\t\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003"+
		"\u00d9\u12a2\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0005\u00d9\u12aa\b\u00d9\n\u00d9\f\u00d9\u12ad\t\u00d9"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0004\u00da\u12b6\b\u00da\u000b\u00da\f\u00da\u12b7\u0001"+
		"\u00da\u0001\u00da\u0003\u00da\u12bc\b\u00da\u0001\u00da\u0001\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0004"+
		"\u00da\u12c6\b\u00da\u000b\u00da\f\u00da\u12c7\u0001\u00da\u0001\u00da"+
		"\u0003\u00da\u12cc\b\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u12d0\b"+
		"\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0005\u00db\u12d6"+
		"\b\u00db\n\u00db\f\u00db\u12d9\t\u00db\u0001\u00db\u0001\u00db\u0001\u00dc"+
		"\u0003\u00dc\u12de\b\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0005\u00dc"+
		"\u12e3\b\u00dc\n\u00dc\f\u00dc\u12e6\t\u00dc\u0001\u00dc\u0003\u00dc\u12e9"+
		"\b\u00dc\u0001\u00dd\u0003\u00dd\u12ec\b\u00dd\u0001\u00dd\u0003\u00dd"+
		"\u12ef\b\u00dd\u0001\u00dd\u0003\u00dd\u12f2\b\u00dd\u0001\u00de\u0001"+
		"\u00de\u0001\u00de\u0005\u00de\u12f7\b\u00de\n\u00de\f\u00de\u12fa\t\u00de"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df"+
		"\u1301\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0005\u00e0\u1306\b"+
		"\u00e0\n\u00e0\f\u00e0\u1309\t\u00e0\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1"+
		"\u1313\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1"+
		"\u1319\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1323\b\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1329\b\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u132f\b\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u133a\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1348\b\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u134b\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u135a\b\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u136c\b\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1371\b\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1377\b\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u137c\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1382\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1388\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0003\u00e1\u1392\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0003\u00e1\u1398\b\u00e1\u0001\u00e1\u0003\u00e1\u139b\b\u00e1\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003"+
		"\u00e3\u13a3\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u13a8"+
		"\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0005\u00e4\u13ad\b\u00e4"+
		"\n\u00e4\f\u00e4\u13b0\t\u00e4\u0001\u00e4\u0003\u00e4\u13b3\b\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0003\u00e4\u13bc\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0003\u00e4\u13c8\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0005\u00e4\u13cf\b\u00e4\n\u00e4\f\u00e4\u13d2\t\u00e4"+
		"\u0003\u00e4\u13d4\b\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u13e2\b\u00e4\u0003\u00e4\u13e4\b"+
		"\u00e4\u0001\u00e5\u0001\u00e5\u0003\u00e5\u13e8\b\u00e5\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e6\u0005\u00e6\u13ed\b\u00e6\n\u00e6\f\u00e6\u13f0\t\u00e6"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005\u00e7\u13f5\b\u00e7\n\u00e7"+
		"\f\u00e7\u13f8\t\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0003\u00e8"+
		"\u13fd\b\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0005\u00e9\u1402\b"+
		"\u00e9\n\u00e9\f\u00e9\u1405\t\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00eb"+
		"\u0001\u00eb\u0003\u00eb\u140b\b\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u140f\b\u00eb\u0001\u00eb\u0005\u00eb\u1412\b\u00eb\n\u00eb\f\u00eb\u1415"+
		"\t\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0005\u00ec\u141a\b\u00ec"+
		"\n\u00ec\f\u00ec\u141d\t\u00ec\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1421"+
		"\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00ef\u0001\u00ef\u0005\u00ef\u1430\b\u00ef\n\u00ef\f\u00ef\u1433\t\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u1438\b\u00ef\u0003\u00ef"+
		"\u143a\b\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u1445\b\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0003\u00ef\u1449\b\u00ef\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0005\u00f0\u1450\b\u00f0\n\u00f0"+
		"\f\u00f0\u1453\t\u00f0\u0003\u00f0\u1455\b\u00f0\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u145b\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u145f\b\u00f1\u0001\u00f1\u0003\u00f1\u1462\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005"+
		"\u00f1\u146a\b\u00f1\n\u00f1\f\u00f1\u146d\t\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1475\b\u00f1"+
		"\u0003\u00f1\u1477\b\u00f1\u0001\u00f1\u0003\u00f1\u147a\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1480\b\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005\u00f1\u1487"+
		"\b\u00f1\n\u00f1\f\u00f1\u148a\t\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1"+
		"\u148e\b\u00f1\u0001\u00f1\u0003\u00f1\u1491\b\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0003\u00f1\u1496\b\u00f1\u0001\u00f1\u0003\u00f1\u1499"+
		"\b\u00f1\u0001\u00f1\u0003\u00f1\u149c\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005\u00f1\u14a4\b\u00f1"+
		"\n\u00f1\f\u00f1\u14a7\t\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003"+
		"\u00f1\u14ac\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0005"+
		"\u00f1\u14b8\b\u00f1\n\u00f1\f\u00f1\u14bb\t\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u14bf\b\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u14c3\b"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u14c7\b\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0003\u00f1\u14cb\b\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u14cf"+
		"\b\u00f1\u0001\u00f1\u0003\u00f1\u14d2\b\u00f1\u0005\u00f1\u14d4\b\u00f1"+
		"\n\u00f1\f\u00f1\u14d7\t\u00f1\u0001\u00f2\u0003\u00f2\u14da\b\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0005\u00f2\u14e0\b\u00f2\n"+
		"\u00f2\f\u00f2\u14e3\t\u00f2\u0003\u00f2\u14e5\b\u00f2\u0001\u00f2\u0003"+
		"\u00f2\u14e8\b\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0003\u00f2\u14ef\b\u00f2\u0001\u00f3\u0003\u00f3\u14f2\b\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u14f7\b\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0003\u00f3\u14fc\b\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0001\u00f3\u0003\u00f3\u1501\b\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3"+
		"\u0003\u00f3\u1506\b\u00f3\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f4"+
		"\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0005\u00f4\u150f\b\u00f4\n\u00f4"+
		"\f\u00f4\u1512\t\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u1516\b\u00f4"+
		"\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0003\u00f5\u1524\b\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0005\u00f5\u152c\b\u00f5\n\u00f5\f\u00f5\u152f"+
		"\t\u00f5\u0001\u00f6\u0001\u00f6\u0003\u00f6\u1533\b\u00f6\u0001\u00f6"+
		"\u0003\u00f6\u1536\b\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u153a\b"+
		"\u00f6\u0001\u00f6\u0003\u00f6\u153d\b\u00f6\u0001\u00f6\u0001\u00f6\u0001"+
		"\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u1544\b\u00f6\u0001\u00f6\u0003"+
		"\u00f6\u1547\b\u00f6\u0001\u00f6\u0001\u00f6\u0003\u00f6\u154b\b\u00f6"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f7\u0001\u00f8\u0004\u00f8\u1551\b\u00f8"+
		"\u000b\u00f8\f\u00f8\u1552\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0003\u00f9\u155a\b\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9"+
		"\u0001\u00f9\u0003\u00f9\u1560\b\u00f9\u0001\u00fa\u0001\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0003\u00fa\u1567\b\u00fa\u0001\u00fa\u0003\u00fa"+
		"\u156a\b\u00fa\u0001\u00fa\u0003\u00fa\u156d\b\u00fa\u0001\u00fa\u0001"+
		"\u00fa\u0003\u00fa\u1571\b\u00fa\u0001\u00fb\u0001\u00fb\u0003\u00fb\u1575"+
		"\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0003\u00fb\u157d\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003"+
		"\u00fb\u158e\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0003\u00fb\u159b\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u15a5"+
		"\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003"+
		"\u00fb\u15ac\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u15b1"+
		"\b\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u15b6\b\u00fb"+
		"\u0003\u00fb\u15b8\b\u00fb\u0001\u00fb\u0003\u00fb\u15bb\b\u00fb\u0001"+
		"\u00fb\u0003\u00fb\u15be\b\u00fb\u0001\u00fb\u0001\u00fb\u0003\u00fb\u15c2"+
		"\b\u00fb\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u15c8"+
		"\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0005\u00fd\u15cd\b\u00fd"+
		"\n\u00fd\f\u00fd\u15d0\t\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001"+
		"\u00fe\u0001\u00fe\u0003\u00fe\u15dd\b\u00fe\u0001\u00ff\u0001\u00ff\u0001"+
		"\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0003"+
		"\u0100\u15e7\b\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0005\u0100\u15ec"+
		"\b\u0100\n\u0100\f\u0100\u15ef\t\u0100\u0001\u0101\u0001\u0101\u0001\u0102"+
		"\u0001\u0102\u0001\u0103\u0001\u0103\u0001\u0104\u0001\u0104\u0001\u0105"+
		"\u0001\u0105\u0001\u0106\u0001\u0106\u0001\u0107\u0001\u0107\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0000\u0005\u01b0\u01b2\u01e2\u01ea\u0200\u0109"+
		"\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a"+
		"\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u00002\u0002\u0000\u00bc\u00bc"+
		"\u0207\u0207\u0002\u0000<<\u01da\u01da\u0002\u0000\u0014\u0014\u01d7\u01d7"+
		"\u0004\u0000\u00d6\u00d6\u00d8\u00d8\u0143\u0143\u01a7\u01a7\u0003\u0000"+
		"\u000b\u000b\u00bc\u00bc\u0207\u0207\u0002\u0000\u0247\u0247\u0317\u0317"+
		"\u0002\u0000\u0109\u0109\u027c\u027c\u0001\u0000\u02ae\u02b0\u0002\u0000"+
		"\u00c5\u00c5\u0261\u0261\u0002\u0000\u0172\u0172\u0308\u0308\u0005\u0000"+
		"\u0010\u0010\u00a3\u00a3\u0116\u0116\u01fe\u01fe\u0269\u0269\u0004\u0000"+
		"\u00a3\u00a3\u0116\u0116\u01fe\u01fe\u0269\u0269\u0002\u0000\u0012\u0012"+
		"\u0119\u0119\u0002\u0000\u023b\u023b\u023d\u023d\u0002\u0000==\u013a\u013a"+
		"\u0005\u0000\u0010\u0010\u01a8\u01a8\u0202\u0202\u023b\u023b\u023d\u023d"+
		"\u0002\u0000\u0235\u0235\u026c\u026c\u0002\u0000\u0010\u0010\u0305\u0305"+
		"\u0002\u0000\u00ec\u00ec\u0109\u0109\u0005\u0000\u0092\u0092\u010c\u010c"+
		"\u01f3\u01f3\u0235\u0235\u0237\u0237\u0002\u0000\u024b\u024b\u0289\u0289"+
		"\u0003\u0000\u023b\u023b\u023d\u023d\u0343\u0343\u0002\u0000\u013a\u013a"+
		"\u0205\u0205\u0002\u0000\u009f\u009f\u0105\u0105\u0002\u0000tt\u01d9\u01d9"+
		"\u0005\u0000\u0016\u0016\u00b4\u00b4\u00eb\u00eb\u00ed\u00ed\u027e\u027e"+
		"\u0002\u0000\u0083\u0083\u01e7\u01e7\u0005\u0000\u0016\u001655zz\u0246"+
		"\u0246\u027e\u027e\u0004\u0000\u028b\u028b\u02de\u02de\u02ef\u02ef\u02f7"+
		"\u02f7\u0002\u0000\u01bc\u01bc\u01ef\u01ef\u0003\u0000\u00cb\u00cb\u011c"+
		"\u011c\u0262\u0262\u0002\u0000\u0010\u0010\u00b8\u00b8\u0002\u0000\u00df"+
		"\u00df\u012d\u012d\u0002\u0000\u01ec\u01ec\u01ef\u01ef\u0002\u0000\u00df"+
		"\u00df\u0166\u0166\u0001\u0000\u02fb\u02fb\u0004\u0000\u0312\u0312\u0314"+
		"\u0314\u032d\u032d\u0333\u0333\u0002\u0000\u0337\u0337\u033a\u033a\u0002"+
		"\u0000\u0010\u0010\u016d\u016d\u0002\u0000\u0316\u0316\u0331\u0332\u0003"+
		"\u0000\u02fd\u02fd\u032e\u032e\u0339\u0339\u0002\u0000\u032d\u032d\u0333"+
		"\u0333\f\u0000\u0017\u0017\u016d\u016d\u0187\u0187\u030d\u0311\u0318\u0318"+
		"\u031b\u0323\u0326\u0327\u0329\u032c\u032f\u0330\u0334\u0336\u0338\u0338"+
		"\u033a\u0341\u0005\u0000\u0315\u0315\u0317\u0317\u0319\u031a\u0324\u0325"+
		"\u0328\u0328\u0004\u0000\u0109\u0109\u0113\u0113\u018c\u018c\u027c\u027c"+
		"\u0002\u0000\u0286\u0286\u0288\u0288\u0002\u0000\u0304\u0305\u0308\u0309"+
		"\u0001\u0000\u02bd\u02c2\u0002\u0000\u001c\u001c\u00ab\u00abm\u0000\u0001"+
		"\u0001\u0004\u000e\u0011\u0014\u0018\u0019\u001d\u001f!$&,./12446=@MP"+
		"WZ]_dfgjlny{}\u0082\u0085\u0087\u0088\u008c\u008c\u008e\u009a\u009c\u009c"+
		"\u009f\u00a6\u00a8\u00aa\u00ac\u00ad\u00b0\u00b2\u00b6\u00b7\u00ba\u00bb"+
		"\u00bd\u00c1\u00c4\u00c6\u00c8\u00ca\u00cc\u00d1\u00d3\u00d5\u00d7\u00d9"+
		"\u00dd\u00e2\u00e4\u00e4\u00e6\u00ea\u00ee\u00f6\u00f8\u00f9\u00fb\u00fc"+
		"\u00fe\u0103\u0105\u0108\u010a\u010d\u010f\u010f\u0113\u011b\u011d\u011e"+
		"\u0120\u0120\u0122\u0122\u0125\u0128\u012b\u012d\u0130\u0132\u0134\u0134"+
		"\u0137\u013a\u013d\u0142\u0144\u0144\u0146\u0146\u0148\u0156\u0158\u0160"+
		"\u0162\u0167\u016a\u016c\u016e\u016f\u0171\u0171\u0173\u017c\u017e\u017f"+
		"\u0182\u0182\u0184\u0186\u0189\u018c\u018e\u018f\u0191\u019b\u019e\u01a5"+
		"\u01a7\u01a7\u01a9\u01aa\u01ac\u01ae\u01b1\u01b1\u01b3\u01b3\u01b5\u01b9"+
		"\u01bb\u01c0\u01c2\u01c4\u01c6\u01cb\u01cd\u01d6\u01d8\u01e0\u01e2\u01fd"+
		"\u01ff\u0205\u0207\u020b\u020d\u020e\u0210\u0210\u0212\u022d\u022f\u022f"+
		"\u0231\u0232\u0234\u0236\u0238\u0238\u023a\u023d\u0241\u0245\u0249\u0249"+
		"\u024b\u0261\u0264\u026b\u026d\u0270\u0272\u0273\u0275\u027a\u027d\u027d"+
		"\u027f\u0280\u0282\u0282\u0284\u0284\u0287\u028a\u028c\u028c\u028e\u028e"+
		"\u02ef\u02ef\u19b6\u0000\u0212\u0001\u0000\u0000\u0000\u0002\u0253\u0001"+
		"\u0000\u0000\u0000\u0004\u0255\u0001\u0000\u0000\u0000\u0006\u027f\u0001"+
		"\u0000\u0000\u0000\b\u029f\u0001\u0000\u0000\u0000\n\u02bc\u0001\u0000"+
		"\u0000\u0000\f\u02d3\u0001\u0000\u0000\u0000\u000e\u02d5\u0001\u0000\u0000"+
		"\u0000\u0010\u02d7\u0001\u0000\u0000\u0000\u0012\u0325\u0001\u0000\u0000"+
		"\u0000\u0014\u0348\u0001\u0000\u0000\u0000\u0016\u0359\u0001\u0000\u0000"+
		"\u0000\u0018\u035b\u0001\u0000\u0000\u0000\u001a\u0409\u0001\u0000\u0000"+
		"\u0000\u001c\u040b\u0001\u0000\u0000\u0000\u001e\u0451\u0001\u0000\u0000"+
		"\u0000 \u0453\u0001\u0000\u0000\u0000\"\u046a\u0001\u0000\u0000\u0000"+
		"$\u04b2\u0001\u0000\u0000\u0000&\u04cb\u0001\u0000\u0000\u0000(\u04cd"+
		"\u0001\u0000\u0000\u0000*\u04d8\u0001\u0000\u0000\u0000,\u04da\u0001\u0000"+
		"\u0000\u0000.\u04fd\u0001\u0000\u0000\u00000\u04ff\u0001\u0000\u0000\u0000"+
		"2\u051c\u0001\u0000\u0000\u00004\u0552\u0001\u0000\u0000\u00006\u056d"+
		"\u0001\u0000\u0000\u00008\u05bd\u0001\u0000\u0000\u0000:\u05bf\u0001\u0000"+
		"\u0000\u0000<\u05d9\u0001\u0000\u0000\u0000>\u05db\u0001\u0000\u0000\u0000"+
		"@\u05e4\u0001\u0000\u0000\u0000B\u0615\u0001\u0000\u0000\u0000D\u062f"+
		"\u0001\u0000\u0000\u0000F\u0670\u0001\u0000\u0000\u0000H\u0680\u0001\u0000"+
		"\u0000\u0000J\u0682\u0001\u0000\u0000\u0000L\u06a5\u0001\u0000\u0000\u0000"+
		"N\u0702\u0001\u0000\u0000\u0000P\u0704\u0001\u0000\u0000\u0000R\u0706"+
		"\u0001\u0000\u0000\u0000T\u071a\u0001\u0000\u0000\u0000V\u072f\u0001\u0000"+
		"\u0000\u0000X\u0731\u0001\u0000\u0000\u0000Z\u0733\u0001\u0000\u0000\u0000"+
		"\\\u0735\u0001\u0000\u0000\u0000^\u0741\u0001\u0000\u0000\u0000`\u0743"+
		"\u0001\u0000\u0000\u0000b\u074e\u0001\u0000\u0000\u0000d\u0750\u0001\u0000"+
		"\u0000\u0000f\u0752\u0001\u0000\u0000\u0000h\u0754\u0001\u0000\u0000\u0000"+
		"j\u0756\u0001\u0000\u0000\u0000l\u0758\u0001\u0000\u0000\u0000n\u0781"+
		"\u0001\u0000\u0000\u0000p\u0783\u0001\u0000\u0000\u0000r\u08a6\u0001\u0000"+
		"\u0000\u0000t\u08a8\u0001\u0000\u0000\u0000v\u08d6\u0001\u0000\u0000\u0000"+
		"x\u08d8\u0001\u0000\u0000\u0000z\u08f7\u0001\u0000\u0000\u0000|\u08f9"+
		"\u0001\u0000\u0000\u0000~\u0906\u0001\u0000\u0000\u0000\u0080\u093c\u0001"+
		"\u0000\u0000\u0000\u0082\u0948\u0001\u0000\u0000\u0000\u0084\u0959\u0001"+
		"\u0000\u0000\u0000\u0086\u096c\u0001\u0000\u0000\u0000\u0088\u097c\u0001"+
		"\u0000\u0000\u0000\u008a\u0985\u0001\u0000\u0000\u0000\u008c\u09a0\u0001"+
		"\u0000\u0000\u0000\u008e\u09c5\u0001\u0000\u0000\u0000\u0090\u09cd\u0001"+
		"\u0000\u0000\u0000\u0092\u09fb\u0001\u0000\u0000\u0000\u0094\u0a3a\u0001"+
		"\u0000\u0000\u0000\u0096\u0a3c\u0001\u0000\u0000\u0000\u0098\u0a5b\u0001"+
		"\u0000\u0000\u0000\u009a\u0aae\u0001\u0000\u0000\u0000\u009c\u0ab0\u0001"+
		"\u0000\u0000\u0000\u009e\u0ac9\u0001\u0000\u0000\u0000\u00a0\u0ad0\u0001"+
		"\u0000\u0000\u0000\u00a2\u0aec\u0001\u0000\u0000\u0000\u00a4\u0b1f\u0001"+
		"\u0000\u0000\u0000\u00a6\u0b21\u0001\u0000\u0000\u0000\u00a8\u0b5b\u0001"+
		"\u0000\u0000\u0000\u00aa\u0b5d\u0001\u0000\u0000\u0000\u00ac\u0b97\u0001"+
		"\u0000\u0000\u0000\u00ae\u0b99\u0001\u0000\u0000\u0000\u00b0\u0b9b\u0001"+
		"\u0000\u0000\u0000\u00b2\u0b9d\u0001\u0000\u0000\u0000\u00b4\u0b9f\u0001"+
		"\u0000\u0000\u0000\u00b6\u0ba1\u0001\u0000\u0000\u0000\u00b8\u0ba3\u0001"+
		"\u0000\u0000\u0000\u00ba\u0ba5\u0001\u0000\u0000\u0000\u00bc\u0ba7\u0001"+
		"\u0000\u0000\u0000\u00be\u0ba9\u0001\u0000\u0000\u0000\u00c0\u0bab\u0001"+
		"\u0000\u0000\u0000\u00c2\u0bad\u0001\u0000\u0000\u0000\u00c4\u0baf\u0001"+
		"\u0000\u0000\u0000\u00c6\u0bb1\u0001\u0000\u0000\u0000\u00c8\u0bb3\u0001"+
		"\u0000\u0000\u0000\u00ca\u0bb5\u0001\u0000\u0000\u0000\u00cc\u0bdc\u0001"+
		"\u0000\u0000\u0000\u00ce\u0bde\u0001\u0000\u0000\u0000\u00d0\u0be1\u0001"+
		"\u0000\u0000\u0000\u00d2\u0c00\u0001\u0000\u0000\u0000\u00d4\u0c2c\u0001"+
		"\u0000\u0000\u0000\u00d6\u0c2e\u0001\u0000\u0000\u0000\u00d8\u0c39\u0001"+
		"\u0000\u0000\u0000\u00da\u0c44\u0001\u0000\u0000\u0000\u00dc\u0c52\u0001"+
		"\u0000\u0000\u0000\u00de\u0c5c\u0001\u0000\u0000\u0000\u00e0\u0c66\u0001"+
		"\u0000\u0000\u0000\u00e2\u0c6e\u0001\u0000\u0000\u0000\u00e4\u0c78\u0001"+
		"\u0000\u0000\u0000\u00e6\u0c83\u0001\u0000\u0000\u0000\u00e8\u0c8d\u0001"+
		"\u0000\u0000\u0000\u00ea\u0c99\u0001\u0000\u0000\u0000\u00ec\u0ca4\u0001"+
		"\u0000\u0000\u0000\u00ee\u0cae\u0001\u0000\u0000\u0000\u00f0\u0cb6\u0001"+
		"\u0000\u0000\u0000\u00f2\u0cc3\u0001\u0000\u0000\u0000\u00f4\u0cd0\u0001"+
		"\u0000\u0000\u0000\u00f6\u0cdb\u0001\u0000\u0000\u0000\u00f8\u0cdd\u0001"+
		"\u0000\u0000\u0000\u00fa\u0cea\u0001\u0000\u0000\u0000\u00fc\u0cf7\u0001"+
		"\u0000\u0000\u0000\u00fe\u0cfe\u0001\u0000\u0000\u0000\u0100\u0d0a\u0001"+
		"\u0000\u0000\u0000\u0102\u0d14\u0001\u0000\u0000\u0000\u0104\u0d1c\u0001"+
		"\u0000\u0000\u0000\u0106\u0d28\u0001\u0000\u0000\u0000\u0108\u0d32\u0001"+
		"\u0000\u0000\u0000\u010a\u0d3c\u0001\u0000\u0000\u0000\u010c\u0d46\u0001"+
		"\u0000\u0000\u0000\u010e\u0d4e\u0001\u0000\u0000\u0000\u0110\u0d58\u0001"+
		"\u0000\u0000\u0000\u0112\u0d62\u0001\u0000\u0000\u0000\u0114\u0d6a\u0001"+
		"\u0000\u0000\u0000\u0116\u0d76\u0001\u0000\u0000\u0000\u0118\u0d82\u0001"+
		"\u0000\u0000\u0000\u011a\u0d8e\u0001\u0000\u0000\u0000\u011c\u0d9a\u0001"+
		"\u0000\u0000\u0000\u011e\u0da6\u0001\u0000\u0000\u0000\u0120\u0db2\u0001"+
		"\u0000\u0000\u0000\u0122\u0dbc\u0001\u0000\u0000\u0000\u0124\u0dc4\u0001"+
		"\u0000\u0000\u0000\u0126\u0dd6\u0001\u0000\u0000\u0000\u0128\u0de0\u0001"+
		"\u0000\u0000\u0000\u012a\u0df8\u0001\u0000\u0000\u0000\u012c\u0e05\u0001"+
		"\u0000\u0000\u0000\u012e\u0e07\u0001\u0000\u0000\u0000\u0130\u0e09\u0001"+
		"\u0000\u0000\u0000\u0132\u0e0c\u0001\u0000\u0000\u0000\u0134\u0e48\u0001"+
		"\u0000\u0000\u0000\u0136\u0e4b\u0001\u0000\u0000\u0000\u0138\u0e4d\u0001"+
		"\u0000\u0000\u0000\u013a\u0e71\u0001\u0000\u0000\u0000\u013c\u0e8d\u0001"+
		"\u0000\u0000\u0000\u013e\u0e93\u0001\u0000\u0000\u0000\u0140\u0ea3\u0001"+
		"\u0000\u0000\u0000\u0142\u0ea7\u0001\u0000\u0000\u0000\u0144\u0ec0\u0001"+
		"\u0000\u0000\u0000\u0146\u0ec2\u0001\u0000\u0000\u0000\u0148\u0ecb\u0001"+
		"\u0000\u0000\u0000\u014a\u0ed1\u0001\u0000\u0000\u0000\u014c\u0ed6\u0001"+
		"\u0000\u0000\u0000\u014e\u0ed8\u0001\u0000\u0000\u0000\u0150\u0edc\u0001"+
		"\u0000\u0000\u0000\u0152\u0ee0\u0001\u0000\u0000\u0000\u0154\u0eea\u0001"+
		"\u0000\u0000\u0000\u0156\u0eed\u0001\u0000\u0000\u0000\u0158\u0f30\u0001"+
		"\u0000\u0000\u0000\u015a\u0f6d\u0001\u0000\u0000\u0000\u015c\u0fb1\u0001"+
		"\u0000\u0000\u0000\u015e\u0fbd\u0001\u0000\u0000\u0000\u0160\u0fe4\u0001"+
		"\u0000\u0000\u0000\u0162\u0fe6\u0001\u0000\u0000\u0000\u0164\u0ff9\u0001"+
		"\u0000\u0000\u0000\u0166\u0ffb\u0001\u0000\u0000\u0000\u0168\u1010\u0001"+
		"\u0000\u0000\u0000\u016a\u1012\u0001\u0000\u0000\u0000\u016c\u1027\u0001"+
		"\u0000\u0000\u0000\u016e\u1029\u0001\u0000\u0000\u0000\u0170\u1030\u0001"+
		"\u0000\u0000\u0000\u0172\u1049\u0001\u0000\u0000\u0000\u0174\u104f\u0001"+
		"\u0000\u0000\u0000\u0176\u106e\u0001\u0000\u0000\u0000\u0178\u1070\u0001"+
		"\u0000\u0000\u0000\u017a\u10a7\u0001\u0000\u0000\u0000\u017c\u10aa\u0001"+
		"\u0000\u0000\u0000\u017e\u10d2\u0001\u0000\u0000\u0000\u0180\u10d6\u0001"+
		"\u0000\u0000\u0000\u0182\u10df\u0001\u0000\u0000\u0000\u0184\u10e2\u0001"+
		"\u0000\u0000\u0000\u0186\u1105\u0001\u0000\u0000\u0000\u0188\u1107\u0001"+
		"\u0000\u0000\u0000\u018a\u1112\u0001\u0000\u0000\u0000\u018c\u1123\u0001"+
		"\u0000\u0000\u0000\u018e\u113b\u0001\u0000\u0000\u0000\u0190\u1147\u0001"+
		"\u0000\u0000\u0000\u0192\u1149\u0001\u0000\u0000\u0000\u0194\u114b\u0001"+
		"\u0000\u0000\u0000\u0196\u1155\u0001\u0000\u0000\u0000\u0198\u1163\u0001"+
		"\u0000\u0000\u0000\u019a\u1165\u0001\u0000\u0000\u0000\u019c\u116c\u0001"+
		"\u0000\u0000\u0000\u019e\u1183\u0001\u0000\u0000\u0000\u01a0\u118f\u0001"+
		"\u0000\u0000\u0000\u01a2\u11a4\u0001\u0000\u0000\u0000\u01a4\u11aa\u0001"+
		"\u0000\u0000\u0000\u01a6\u11af\u0001\u0000\u0000\u0000\u01a8\u11b7\u0001"+
		"\u0000\u0000\u0000\u01aa\u11d4\u0001\u0000\u0000\u0000\u01ac\u11e5\u0001"+
		"\u0000\u0000\u0000\u01ae\u11e7\u0001\u0000\u0000\u0000\u01b0\u1234\u0001"+
		"\u0000\u0000\u0000\u01b2\u12a1\u0001\u0000\u0000\u0000\u01b4\u12cf\u0001"+
		"\u0000\u0000\u0000\u01b6\u12d1\u0001\u0000\u0000\u0000\u01b8\u12dd\u0001"+
		"\u0000\u0000\u0000\u01ba\u12f1\u0001\u0000\u0000\u0000\u01bc\u12f3\u0001"+
		"\u0000\u0000\u0000\u01be\u12fb\u0001\u0000\u0000\u0000\u01c0\u1302\u0001"+
		"\u0000\u0000\u0000\u01c2\u139a\u0001\u0000\u0000\u0000\u01c4\u139c\u0001"+
		"\u0000\u0000\u0000\u01c6\u13a2\u0001\u0000\u0000\u0000\u01c8\u13e3\u0001"+
		"\u0000\u0000\u0000\u01ca\u13e7\u0001\u0000\u0000\u0000\u01cc\u13e9\u0001"+
		"\u0000\u0000\u0000\u01ce\u13f1\u0001\u0000\u0000\u0000\u01d0\u13f9\u0001"+
		"\u0000\u0000\u0000\u01d2\u13fe\u0001\u0000\u0000\u0000\u01d4\u1406\u0001"+
		"\u0000\u0000\u0000\u01d6\u140a\u0001\u0000\u0000\u0000\u01d8\u1416\u0001"+
		"\u0000\u0000\u0000\u01da\u1420\u0001\u0000\u0000\u0000\u01dc\u1422\u0001"+
		"\u0000\u0000\u0000\u01de\u1448\u0001\u0000\u0000\u0000\u01e0\u144a\u0001"+
		"\u0000\u0000\u0000\u01e2\u14c2\u0001\u0000\u0000\u0000\u01e4\u14ee\u0001"+
		"\u0000\u0000\u0000\u01e6\u1505\u0001\u0000\u0000\u0000\u01e8\u1515\u0001"+
		"\u0000\u0000\u0000\u01ea\u1523\u0001\u0000\u0000\u0000\u01ec\u154a\u0001"+
		"\u0000\u0000\u0000\u01ee\u154c\u0001\u0000\u0000\u0000\u01f0\u1550\u0001"+
		"\u0000\u0000\u0000\u01f2\u1559\u0001\u0000\u0000\u0000\u01f4\u1566\u0001"+
		"\u0000\u0000\u0000\u01f6\u1574\u0001\u0000\u0000\u0000\u01f8\u15c7\u0001"+
		"\u0000\u0000\u0000\u01fa\u15c9\u0001\u0000\u0000\u0000\u01fc\u15dc\u0001"+
		"\u0000\u0000\u0000\u01fe\u15de\u0001\u0000\u0000\u0000\u0200\u15e6\u0001"+
		"\u0000\u0000\u0000\u0202\u15f0\u0001\u0000\u0000\u0000\u0204\u15f2\u0001"+
		"\u0000\u0000\u0000\u0206\u15f4\u0001\u0000\u0000\u0000\u0208\u15f6\u0001"+
		"\u0000\u0000\u0000\u020a\u15f8\u0001\u0000\u0000\u0000\u020c\u15fa\u0001"+
		"\u0000\u0000\u0000\u020e\u15fc\u0001\u0000\u0000\u0000\u0210\u15fe\u0001"+
		"\u0000\u0000\u0000\u0212\u021b\u0003\u0002\u0001\u0000\u0213\u0214\u0005"+
		"\u0342\u0000\u0000\u0214\u0216\u0003\u0002\u0001\u0000\u0215\u0213\u0001"+
		"\u0000\u0000\u0000\u0216\u0217\u0001\u0000\u0000\u0000\u0217\u0215\u0001"+
		"\u0000\u0000\u0000\u0217\u0218\u0001\u0000\u0000\u0000\u0218\u0219\u0001"+
		"\u0000\u0000\u0000\u0219\u021a\u0005\u0342\u0000\u0000\u021a\u021c\u0001"+
		"\u0000\u0000\u0000\u021b\u0215\u0001\u0000\u0000\u0000\u021b\u021c\u0001"+
		"\u0000\u0000\u0000\u021c\u021d\u0001\u0000\u0000\u0000\u021d\u021e\u0005"+
		"\u0000\u0000\u0001\u021e\u0001\u0001\u0000\u0000\u0000\u021f\u0254\u0003"+
		"\u0004\u0002\u0000\u0220\u0254\u0003\u0006\u0003\u0000\u0221\u0254\u0003"+
		"`0\u0000\u0222\u0254\u0003n7\u0000\u0223\u0254\u0003b1\u0000\u0224\u0254"+
		"\u0003d2\u0000\u0225\u0254\u0003f3\u0000\u0226\u0254\u0003h4\u0000\u0227"+
		"\u0254\u0003j5\u0000\u0228\u0254\u0003l6\u0000\u0229\u0254\u0003\u00cc"+
		"f\u0000\u022a\u0254\u0003\u00ceg\u0000\u022b\u0254\u0003\u00d0h\u0000"+
		"\u022c\u0254\u0003\u00d2i\u0000\u022d\u0254\u0003\u00d4j\u0000\u022e\u0254"+
		"\u0003\u0128\u0094\u0000\u022f\u0254\u0003\u012a\u0095\u0000\u0230\u0254"+
		"\u0003\u012c\u0096\u0000\u0231\u0254\u0003\u012e\u0097\u0000\u0232\u0254"+
		"\u0003\u0130\u0098\u0000\u0233\u0254\u0003\u0132\u0099\u0000\u0234\u0254"+
		"\u0003\u0134\u009a\u0000\u0235\u0254\u0003\u0136\u009b\u0000\u0236\u0254"+
		"\u0003\u0138\u009c\u0000\u0237\u0254\u0003\u013a\u009d\u0000\u0238\u0254"+
		"\u0003\u013c\u009e\u0000\u0239\u0254\u0003\u013e\u009f\u0000\u023a\u0254"+
		"\u0003\u0140\u00a0\u0000\u023b\u0254\u0003\u0142\u00a1\u0000\u023c\u0254"+
		"\u0003\u0144\u00a2\u0000\u023d\u0254\u0003\u0146\u00a3\u0000\u023e\u0254"+
		"\u0003\u0148\u00a4\u0000\u023f\u0254\u0003\u014a\u00a5\u0000\u0240\u0254"+
		"\u0003\u014c\u00a6\u0000\u0241\u0254\u0003\u014e\u00a7\u0000\u0242\u0254"+
		"\u0003\u0150\u00a8\u0000\u0243\u0254\u0003\u0152\u00a9\u0000\u0244\u0254"+
		"\u0003\u0154\u00aa\u0000\u0245\u0254\u0003\u0156\u00ab\u0000\u0246\u0254"+
		"\u0003\u0158\u00ac\u0000\u0247\u0254\u0003\u015a\u00ad\u0000\u0248\u0254"+
		"\u0003\u0160\u00b0\u0000\u0249\u0254\u0003\u0162\u00b1\u0000\u024a\u0254"+
		"\u0003\u0164\u00b2\u0000\u024b\u0254\u0003\u0166\u00b3\u0000\u024c\u0254"+
		"\u0003\u016c\u00b6\u0000\u024d\u0254\u0003\u016e\u00b7\u0000\u024e\u0254"+
		"\u0003\u0170\u00b8\u0000\u024f\u0254\u0003\u0172\u00b9\u0000\u0250\u0254"+
		"\u0003\u0174\u00ba\u0000\u0251\u0254\u0003\u017a\u00bd\u0000\u0252\u0254"+
		"\u0003\u017c\u00be\u0000\u0253\u021f\u0001\u0000\u0000\u0000\u0253\u0220"+
		"\u0001\u0000\u0000\u0000\u0253\u0221\u0001\u0000\u0000\u0000\u0253\u0222"+
		"\u0001\u0000\u0000\u0000\u0253\u0223\u0001\u0000\u0000\u0000\u0253\u0224"+
		"\u0001\u0000\u0000\u0000\u0253\u0225\u0001\u0000\u0000\u0000\u0253\u0226"+
		"\u0001\u0000\u0000\u0000\u0253\u0227\u0001\u0000\u0000\u0000\u0253\u0228"+
		"\u0001\u0000\u0000\u0000\u0253\u0229\u0001\u0000\u0000\u0000\u0253\u022a"+
		"\u0001\u0000\u0000\u0000\u0253\u022b\u0001\u0000\u0000\u0000\u0253\u022c"+
		"\u0001\u0000\u0000\u0000\u0253\u022d\u0001\u0000\u0000\u0000\u0253\u022e"+
		"\u0001\u0000\u0000\u0000\u0253\u022f\u0001\u0000\u0000\u0000\u0253\u0230"+
		"\u0001\u0000\u0000\u0000\u0253\u0231\u0001\u0000\u0000\u0000\u0253\u0232"+
		"\u0001\u0000\u0000\u0000\u0253\u0233\u0001\u0000\u0000\u0000\u0253\u0234"+
		"\u0001\u0000\u0000\u0000\u0253\u0235\u0001\u0000\u0000\u0000\u0253\u0236"+
		"\u0001\u0000\u0000\u0000\u0253\u0237\u0001\u0000\u0000\u0000\u0253\u0238"+
		"\u0001\u0000\u0000\u0000\u0253\u0239\u0001\u0000\u0000\u0000\u0253\u023a"+
		"\u0001\u0000\u0000\u0000\u0253\u023b\u0001\u0000\u0000\u0000\u0253\u023c"+
		"\u0001\u0000\u0000\u0000\u0253\u023d\u0001\u0000\u0000\u0000\u0253\u023e"+
		"\u0001\u0000\u0000\u0000\u0253\u023f\u0001\u0000\u0000\u0000\u0253\u0240"+
		"\u0001\u0000\u0000\u0000\u0253\u0241\u0001\u0000\u0000\u0000\u0253\u0242"+
		"\u0001\u0000\u0000\u0000\u0253\u0243\u0001\u0000\u0000\u0000\u0253\u0244"+
		"\u0001\u0000\u0000\u0000\u0253\u0245\u0001\u0000\u0000\u0000\u0253\u0246"+
		"\u0001\u0000\u0000\u0000\u0253\u0247\u0001\u0000\u0000\u0000\u0253\u0248"+
		"\u0001\u0000\u0000\u0000\u0253\u0249\u0001\u0000\u0000\u0000\u0253\u024a"+
		"\u0001\u0000\u0000\u0000\u0253\u024b\u0001\u0000\u0000\u0000\u0253\u024c"+
		"\u0001\u0000\u0000\u0000\u0253\u024d\u0001\u0000\u0000\u0000\u0253\u024e"+
		"\u0001\u0000\u0000\u0000\u0253\u024f\u0001\u0000\u0000\u0000\u0253\u0250"+
		"\u0001\u0000\u0000\u0000\u0253\u0251\u0001\u0000\u0000\u0000\u0253\u0252"+
		"\u0001\u0000\u0000\u0000\u0254\u0003\u0001\u0000\u0000\u0000\u0255\u0256"+
		"\u0003\u0200\u0100\u0000\u0256\u0005\u0001\u0000\u0000\u0000\u0257\u0280"+
		"\u0003\b\u0004\u0000\u0258\u0280\u0003\n\u0005\u0000\u0259\u0280\u0003"+
		"\f\u0006\u0000\u025a\u0280\u0003\u000e\u0007\u0000\u025b\u0280\u0003\u0010"+
		"\b\u0000\u025c\u0280\u0003\u0012\t\u0000\u025d\u0280\u0003\u0014\n\u0000"+
		"\u025e\u0280\u0003\u0016\u000b\u0000\u025f\u0280\u0003\u0018\f\u0000\u0260"+
		"\u0280\u0003\u001e\u000f\u0000\u0261\u0280\u0003 \u0010\u0000\u0262\u0280"+
		"\u0003\"\u0011\u0000\u0263\u0280\u0003$\u0012\u0000\u0264\u0280\u0003"+
		"&\u0013\u0000\u0265\u0280\u0003(\u0014\u0000\u0266\u0280\u0003*\u0015"+
		"\u0000\u0267\u0280\u0003,\u0016\u0000\u0268\u0280\u0003.\u0017\u0000\u0269"+
		"\u0280\u00030\u0018\u0000\u026a\u0280\u00032\u0019\u0000\u026b\u0280\u0003"+
		"4\u001a\u0000\u026c\u0280\u00038\u001c\u0000\u026d\u0280\u0003:\u001d"+
		"\u0000\u026e\u0280\u0003<\u001e\u0000\u026f\u0280\u0003>\u001f\u0000\u0270"+
		"\u0280\u0003B!\u0000\u0271\u0280\u0003D\"\u0000\u0272\u0280\u0003F#\u0000"+
		"\u0273\u0280\u0003H$\u0000\u0274\u0280\u0003J%\u0000\u0275\u0280\u0003"+
		"L&\u0000\u0276\u0280\u0003N\'\u0000\u0277\u0280\u0003P(\u0000\u0278\u0280"+
		"\u0003R)\u0000\u0279\u0280\u0003T*\u0000\u027a\u0280\u0003V+\u0000\u027b"+
		"\u0280\u0003X,\u0000\u027c\u0280\u0003Z-\u0000\u027d\u0280\u0003\\.\u0000"+
		"\u027e\u0280\u0003^/\u0000\u027f\u0257\u0001\u0000\u0000\u0000\u027f\u0258"+
		"\u0001\u0000\u0000\u0000\u027f\u0259\u0001\u0000\u0000\u0000\u027f\u025a"+
		"\u0001\u0000\u0000\u0000\u027f\u025b\u0001\u0000\u0000\u0000\u027f\u025c"+
		"\u0001\u0000\u0000\u0000\u027f\u025d\u0001\u0000\u0000\u0000\u027f\u025e"+
		"\u0001\u0000\u0000\u0000\u027f\u025f\u0001\u0000\u0000\u0000\u027f\u0260"+
		"\u0001\u0000\u0000\u0000\u027f\u0261\u0001\u0000\u0000\u0000\u027f\u0262"+
		"\u0001\u0000\u0000\u0000\u027f\u0263\u0001\u0000\u0000\u0000\u027f\u0264"+
		"\u0001\u0000\u0000\u0000\u027f\u0265\u0001\u0000\u0000\u0000\u027f\u0266"+
		"\u0001\u0000\u0000\u0000\u027f\u0267\u0001\u0000\u0000\u0000\u027f\u0268"+
		"\u0001\u0000\u0000\u0000\u027f\u0269\u0001\u0000\u0000\u0000\u027f\u026a"+
		"\u0001\u0000\u0000\u0000\u027f\u026b\u0001\u0000\u0000\u0000\u027f\u026c"+
		"\u0001\u0000\u0000\u0000\u027f\u026d\u0001\u0000\u0000\u0000\u027f\u026e"+
		"\u0001\u0000\u0000\u0000\u027f\u026f\u0001\u0000\u0000\u0000\u027f\u0270"+
		"\u0001\u0000\u0000\u0000\u027f\u0271\u0001\u0000\u0000\u0000\u027f\u0272"+
		"\u0001\u0000\u0000\u0000\u027f\u0273\u0001\u0000\u0000\u0000\u027f\u0274"+
		"\u0001\u0000\u0000\u0000\u027f\u0275\u0001\u0000\u0000\u0000\u027f\u0276"+
		"\u0001\u0000\u0000\u0000\u027f\u0277\u0001\u0000\u0000\u0000\u027f\u0278"+
		"\u0001\u0000\u0000\u0000\u027f\u0279\u0001\u0000\u0000\u0000\u027f\u027a"+
		"\u0001\u0000\u0000\u0000\u027f\u027b\u0001\u0000\u0000\u0000\u027f\u027c"+
		"\u0001\u0000\u0000\u0000\u027f\u027d\u0001\u0000\u0000\u0000\u027f\u027e"+
		"\u0001\u0000\u0000\u0000\u0280\u0007\u0001\u0000\u0000\u0000\u0281\u0282"+
		"\u0005\u0013\u0000\u0000\u0282\u0283\u0005\u000e\u0000\u0000\u0283\u0284"+
		"\u0003\u0200\u0100\u0000\u0284\u0285\u0005\u02fe\u0000\u0000\u0285\u0286"+
		"\u0003\u01ec\u00f6\u0000\u0286\u0287\u0005\u02ff\u0000\u0000\u0287\u0288"+
		"\u0005\u01d4\u0000\u0000\u0288\u0289\u0005\u0247\u0000\u0000\u0289\u028a"+
		"\u0003\u0200\u0100\u0000\u028a\u02a0\u0001\u0000\u0000\u0000\u028b\u028c"+
		"\u0005\u0013\u0000\u0000\u028c\u028d\u0005\u000e\u0000\u0000\u028d\u028e"+
		"\u0003\u0200\u0100\u0000\u028e\u028f\u0005\u02fe\u0000\u0000\u028f\u0290"+
		"\u0003\u01ec\u00f6\u0000\u0290\u0291\u0005\u02ff\u0000\u0000\u0291\u0292"+
		"\u0005\u0193\u0000\u0000\u0292\u0293\u0005\u0247\u0000\u0000\u0293\u0294"+
		"\u0003\u01f8\u00fc\u0000\u0294\u02a0\u0001\u0000\u0000\u0000\u0295\u0296"+
		"\u0005\u0013\u0000\u0000\u0296\u0297\u0005\u000e\u0000\u0000\u0297\u0298"+
		"\u0003\u0200\u0100\u0000\u0298\u0299\u0005\u02fe\u0000\u0000\u0299\u029a"+
		"\u0003\u01ec\u00f6\u0000\u029a\u029b\u0005\u02ff\u0000\u0000\u029b\u029c"+
		"\u0005\u0207\u0000\u0000\u029c\u029d\u0005\u01f3\u0000\u0000\u029d\u029e"+
		"\u0003\u0200\u0100\u0000\u029e\u02a0\u0001\u0000\u0000\u0000\u029f\u0281"+
		"\u0001\u0000\u0000\u0000\u029f\u028b\u0001\u0000\u0000\u0000\u029f\u0295"+
		"\u0001\u0000\u0000\u0000\u02a0\t\u0001\u0000\u0000\u0000\u02a1\u02a2\u0005"+
		"\u0013\u0000\u0000\u02a2\u02a3\u0005Y\u0000\u0000\u02a3\u02a4\u0003\u01ca"+
		"\u00e5\u0000\u02a4\u02a5\u0005\u01c7\u0000\u0000\u02a5\u02a6\u0005\u02b7"+
		"\u0000\u0000\u02a6\u02bd\u0001\u0000\u0000\u0000\u02a7\u02a8\u0005\u0013"+
		"\u0000\u0000\u02a8\u02a9\u0005Y\u0000\u0000\u02a9\u02aa\u0003\u01ca\u00e5"+
		"\u0000\u02aa\u02ab\u0005\u01d4\u0000\u0000\u02ab\u02ac\u0005\u0247\u0000"+
		"\u0000\u02ac\u02ad\u0003\u0200\u0100\u0000\u02ad\u02bd\u0001\u0000\u0000"+
		"\u0000\u02ae\u02af\u0005\u0013\u0000\u0000\u02af\u02b0\u0005Y\u0000\u0000"+
		"\u02b0\u02b1\u0003\u01ca\u00e5\u0000\u02b1\u02b2\u0005\u0193\u0000\u0000"+
		"\u02b2\u02b3\u0005\u0247\u0000\u0000\u02b3\u02b4\u0003\u01f8\u00fc\u0000"+
		"\u02b4\u02bd\u0001\u0000\u0000\u0000\u02b5\u02b6\u0005\u0013\u0000\u0000"+
		"\u02b6\u02b7\u0005Y\u0000\u0000\u02b7\u02b8\u0003\u01ca\u00e5\u0000\u02b8"+
		"\u02b9\u0005\u0207\u0000\u0000\u02b9\u02ba\u0005\u01f3\u0000\u0000\u02ba"+
		"\u02bb\u0003\u0200\u0100\u0000\u02bb\u02bd\u0001\u0000\u0000\u0000\u02bc"+
		"\u02a1\u0001\u0000\u0000\u0000\u02bc\u02a7\u0001\u0000\u0000\u0000\u02bc"+
		"\u02ae\u0001\u0000\u0000\u0000\u02bc\u02b5\u0001\u0000\u0000\u0000\u02bd"+
		"\u000b\u0001\u0000\u0000\u0000\u02be\u02bf\u0005\u0013\u0000\u0000\u02bf"+
		"\u02c0\u0005u\u0000\u0000\u02c0\u02c1\u0003\u0200\u0100\u0000\u02c1\u02c2"+
		"\u0005\u01d4\u0000\u0000\u02c2\u02c3\u0005\u0247\u0000\u0000\u02c3\u02c4"+
		"\u0003\u0200\u0100\u0000\u02c4\u02d4\u0001\u0000\u0000\u0000\u02c5\u02c6"+
		"\u0005\u0013\u0000\u0000\u02c6\u02c7\u0005u\u0000\u0000\u02c7\u02c8\u0003"+
		"\u0200\u0100\u0000\u02c8\u02c9\u0005\u0193\u0000\u0000\u02c9\u02ca\u0005"+
		"\u0247\u0000\u0000\u02ca\u02cb\u0003\u01f8\u00fc\u0000\u02cb\u02d4\u0001"+
		"\u0000\u0000\u0000\u02cc\u02cd\u0005\u0013\u0000\u0000\u02cd\u02ce\u0005"+
		"u\u0000\u0000\u02ce\u02cf\u0003\u0200\u0100\u0000\u02cf\u02d0\u0005\u0207"+
		"\u0000\u0000\u02d0\u02d1\u0005\u01f3\u0000\u0000\u02d1\u02d2\u0003\u0200"+
		"\u0100\u0000\u02d2\u02d4\u0001\u0000\u0000\u0000\u02d3\u02be\u0001\u0000"+
		"\u0000\u0000\u02d3\u02c5\u0001\u0000\u0000\u0000\u02d3\u02cc\u0001\u0000"+
		"\u0000\u0000\u02d4\r\u0001\u0000\u0000\u0000\u02d5\u02d6\u0003\u0204\u0102"+
		"\u0000\u02d6\u000f\u0001\u0000\u0000\u0000\u02d7\u02d8\u0003\u0204\u0102"+
		"\u0000\u02d8\u0011\u0001\u0000\u0000\u0000\u02d9\u02da\u0005\u0013\u0000"+
		"\u0000\u02da\u02db\u0005\u00ba\u0000\u0000\u02db\u02e1\u0003\u0200\u0100"+
		"\u0000\u02dc\u02dd\u0005\u0207\u0000\u0000\u02dd\u02de\u0005\u009b\u0000"+
		"\u0000\u02de\u02e2\u0003\u01b0\u00d8\u0000\u02df\u02e0\u0005\u00bc\u0000"+
		"\u0000\u02e0\u02e2\u0005\u009b\u0000\u0000\u02e1\u02dc\u0001\u0000\u0000"+
		"\u0000\u02e1\u02df\u0001\u0000\u0000\u0000\u02e2\u0326\u0001\u0000\u0000"+
		"\u0000\u02e3\u02e4\u0005\u0013\u0000\u0000\u02e4\u02e5\u0005\u00ba\u0000"+
		"\u0000\u02e5\u02e6\u0003\u0200\u0100\u0000\u02e6\u02e7\u0007\u0000\u0000"+
		"\u0000\u02e7\u02e8\u0005\u016d\u0000\u0000\u02e8\u02e9\u0005\u0172\u0000"+
		"\u0000\u02e9\u0326\u0001\u0000\u0000\u0000\u02ea\u02eb\u0005\u0013\u0000"+
		"\u0000\u02eb\u02ec\u0005\u00ba\u0000\u0000\u02ec\u02ed\u0003\u0200\u0100"+
		"\u0000\u02ed\u02ee\u0005\u000b\u0000\u0000\u02ee\u02f1\u0003\u0080@\u0000"+
		"\u02ef\u02f0\u0005\u016d\u0000\u0000\u02f0\u02f2\u0005\u0273\u0000\u0000"+
		"\u02f1\u02ef\u0001\u0000\u0000\u0000\u02f1\u02f2\u0001\u0000\u0000\u0000"+
		"\u02f2\u0326\u0001\u0000\u0000\u0000\u02f3\u02f4\u0005\u0013\u0000\u0000"+
		"\u02f4\u02f5\u0005\u00ba\u0000\u0000\u02f5\u02f6\u0003\u0200\u0100\u0000"+
		"\u02f6\u02f7\u0005\u00bc\u0000\u0000\u02f7\u02fa\u0005m\u0000\u0000\u02f8"+
		"\u02f9\u0005\u02b2\u0000\u0000\u02f9\u02fb\u0005\u00d3\u0000\u0000\u02fa"+
		"\u02f8\u0001\u0000\u0000\u0000\u02fa\u02fb\u0001\u0000\u0000\u0000\u02fb"+
		"\u02fc\u0001\u0000\u0000\u0000\u02fc\u02fe\u0003\u0200\u0100\u0000\u02fd"+
		"\u02ff\u0007\u0001\u0000\u0000\u02fe\u02fd\u0001\u0000\u0000\u0000\u02fe"+
		"\u02ff\u0001\u0000\u0000\u0000\u02ff\u0326\u0001\u0000\u0000\u0000\u0300"+
		"\u0301\u0005\u0013\u0000\u0000\u0301\u0302\u0005\u00ba\u0000\u0000\u0302"+
		"\u0303\u0003\u0200\u0100\u0000\u0303\u0304\u0005\u01d4\u0000\u0000\u0304"+
		"\u0305\u0005m\u0000\u0000\u0305\u0306\u0003\u0200\u0100\u0000\u0306\u0307"+
		"\u0005\u0247\u0000\u0000\u0307\u0308\u0003\u0200\u0100\u0000\u0308\u0326"+
		"\u0001\u0000\u0000\u0000\u0309\u030a\u0005\u0013\u0000\u0000\u030a\u030b"+
		"\u0005\u00ba\u0000\u0000\u030b\u030c\u0003\u0200\u0100\u0000\u030c\u030d"+
		"\u0005\u0274\u0000\u0000\u030d\u030e\u0005m\u0000\u0000\u030e\u030f\u0003"+
		"\u0200\u0100\u0000\u030f\u0326\u0001\u0000\u0000\u0000\u0310\u0311\u0005"+
		"\u0013\u0000\u0000\u0311\u0312\u0005\u00ba\u0000\u0000\u0312\u0313\u0003"+
		"\u0200\u0100\u0000\u0313\u0314\u0005\u0193\u0000\u0000\u0314\u0315\u0005"+
		"\u0247\u0000\u0000\u0315\u0316\u0003\u01f8\u00fc\u0000\u0316\u0326\u0001"+
		"\u0000\u0000\u0000\u0317\u0318\u0005\u0013\u0000\u0000\u0318\u0319\u0005"+
		"\u00ba\u0000\u0000\u0319\u031a\u0003\u0200\u0100\u0000\u031a\u031b\u0005"+
		"\u01d4\u0000\u0000\u031b\u031c\u0005\u0247\u0000\u0000\u031c\u031d\u0003"+
		"\u0200\u0100\u0000\u031d\u0326\u0001\u0000\u0000\u0000\u031e\u031f\u0005"+
		"\u0013\u0000\u0000\u031f\u0320\u0005\u00ba\u0000\u0000\u0320\u0321\u0003"+
		"\u0200\u0100\u0000\u0321\u0322\u0005\u0207\u0000\u0000\u0322\u0323\u0005"+
		"\u01f3\u0000\u0000\u0323\u0324\u0003\u0200\u0100\u0000\u0324\u0326\u0001"+
		"\u0000\u0000\u0000\u0325\u02d9\u0001\u0000\u0000\u0000\u0325\u02e3\u0001"+
		"\u0000\u0000\u0000\u0325\u02ea\u0001\u0000\u0000\u0000\u0325\u02f3\u0001"+
		"\u0000\u0000\u0000\u0325\u0300\u0001\u0000\u0000\u0000\u0325\u0309\u0001"+
		"\u0000\u0000\u0000\u0325\u0310\u0001\u0000\u0000\u0000\u0325\u0317\u0001"+
		"\u0000\u0000\u0000\u0325\u031e\u0001\u0000\u0000\u0000\u0326\u0013\u0001"+
		"\u0000\u0000\u0000\u0327\u0328\u0005\u0013\u0000\u0000\u0328\u0329\u0005"+
		"\u02ba\u0000\u0000\u0329\u032a\u0005\u0254\u0000\u0000\u032a\u032b\u0003"+
		"\u0200\u0100\u0000\u032b\u032c\u0005\u00b3\u0000\u0000\u032c\u0349\u0001"+
		"\u0000\u0000\u0000\u032d\u032e\u0005\u0013\u0000\u0000\u032e\u032f\u0005"+
		"\u02ba\u0000\u0000\u032f\u0330\u0005\u0254\u0000\u0000\u0330\u0331\u0003"+
		"\u0200\u0100\u0000\u0331\u0333\u0005\u00c3\u0000\u0000\u0332\u0334\u0007"+
		"\u0002\u0000\u0000\u0333\u0332\u0001\u0000\u0000\u0000\u0333\u0334\u0001"+
		"\u0000\u0000\u0000\u0334\u0349\u0001\u0000\u0000\u0000\u0335\u0336\u0005"+
		"\u0013\u0000\u0000\u0336\u0337\u0005\u02ba\u0000\u0000\u0337\u0338\u0005"+
		"\u0254\u0000\u0000\u0338\u0339\u0003\u0200\u0100\u0000\u0339\u033a\u0005"+
		"\u0193\u0000\u0000\u033a\u033e\u0005\u0247\u0000\u0000\u033b\u033f\u0003"+
		"\u0200\u0100\u0000\u033c\u033f\u0005\u008d\u0000\u0000\u033d\u033f\u0005"+
		"\u0206\u0000\u0000\u033e\u033b\u0001\u0000\u0000\u0000\u033e\u033c\u0001"+
		"\u0000\u0000\u0000\u033e\u033d\u0001\u0000\u0000\u0000\u033f\u0349\u0001"+
		"\u0000\u0000\u0000\u0340\u0341\u0005\u0013\u0000\u0000\u0341\u0342\u0005"+
		"\u02ba\u0000\u0000\u0342\u0343\u0005\u0254\u0000\u0000\u0343\u0344\u0003"+
		"\u0200\u0100\u0000\u0344\u0345\u0005\u01d4\u0000\u0000\u0345\u0346\u0005"+
		"\u0247\u0000\u0000\u0346\u0347\u0003\u0200\u0100\u0000\u0347\u0349\u0001"+
		"\u0000\u0000\u0000\u0348\u0327\u0001\u0000\u0000\u0000\u0348\u032d\u0001"+
		"\u0000\u0000\u0000\u0348\u0335\u0001\u0000\u0000\u0000\u0348\u0340\u0001"+
		"\u0000\u0000\u0000\u0349\u0015\u0001\u0000\u0000\u0000\u034a\u034b\u0005"+
		"\u0013\u0000\u0000\u034b\u034c\u0005\u00d7\u0000\u0000\u034c\u034d\u0003"+
		"\u0200\u0100\u0000\u034d\u0350\u0005\u0269\u0000\u0000\u034e\u034f\u0005"+
		"\u0247\u0000\u0000\u034f\u0351\u0003\u0200\u0100\u0000\u0350\u034e\u0001"+
		"\u0000\u0000\u0000\u0350\u0351\u0001\u0000\u0000\u0000\u0351\u035a\u0001"+
		"\u0000\u0000\u0000\u0352\u0353\u0005\u0013\u0000\u0000\u0353\u0354\u0005"+
		"\u00d7\u0000\u0000\u0354\u0355\u0003\u0200\u0100\u0000\u0355\u0356\u0005"+
		"\u0207\u0000\u0000\u0356\u0357\u0005\u01f3\u0000\u0000\u0357\u0358\u0003"+
		"\u0200\u0100\u0000\u0358\u035a\u0001\u0000\u0000\u0000\u0359\u034a\u0001"+
		"\u0000\u0000\u0000\u0359\u0352\u0001\u0000\u0000\u0000\u035a\u0017\u0001"+
		"\u0000\u0000\u0000\u035b\u035c\u0003\u0204\u0102\u0000\u035c\u0019\u0001"+
		"\u0000\u0000\u0000\u035d\u035f\u0005\u000b\u0000\u0000\u035e\u0360\u0005"+
		"^\u0000\u0000\u035f\u035e\u0001\u0000\u0000\u0000\u035f\u0360\u0001\u0000"+
		"\u0000\u0000\u0360\u0361\u0001\u0000\u0000\u0000\u0361\u0362\u0003\u0208"+
		"\u0104\u0000\u0362\u0365\u0003\u01d6\u00eb\u0000\u0363\u0364\u0005X\u0000"+
		"\u0000\u0364\u0366\u0003\u0200\u0100\u0000\u0365\u0363\u0001\u0000\u0000"+
		"\u0000\u0365\u0366\u0001\u0000\u0000\u0000\u0366\u0368\u0001\u0000\u0000"+
		"\u0000\u0367\u0369\u0003\u01f0\u00f8\u0000\u0368\u0367\u0001\u0000\u0000"+
		"\u0000\u0368\u0369\u0001\u0000\u0000\u0000\u0369\u040a\u0001\u0000\u0000"+
		"\u0000\u036a\u036c\u0005\u00bc\u0000\u0000\u036b\u036d\u0005^\u0000\u0000"+
		"\u036c\u036b\u0001\u0000\u0000\u0000\u036c\u036d\u0001\u0000\u0000\u0000"+
		"\u036d\u0370\u0001\u0000\u0000\u0000\u036e\u036f\u0005\u02b2\u0000\u0000"+
		"\u036f\u0371\u0005\u00d3\u0000\u0000\u0370\u036e\u0001\u0000\u0000\u0000"+
		"\u0370\u0371\u0001\u0000\u0000\u0000\u0371\u0372\u0001\u0000\u0000\u0000"+
		"\u0372\u0374\u0003\u0208\u0104\u0000\u0373\u0375\u0007\u0001\u0000\u0000"+
		"\u0374\u0373\u0001\u0000\u0000\u0000\u0374\u0375\u0001\u0000\u0000\u0000"+
		"\u0375\u040a\u0001\u0000\u0000\u0000\u0376\u0378\u0005\u0013\u0000\u0000"+
		"\u0377\u0379\u0005^\u0000\u0000\u0378\u0377\u0001\u0000\u0000\u0000\u0378"+
		"\u0379\u0001\u0000\u0000\u0000\u0379\u037a\u0001\u0000\u0000\u0000\u037a"+
		"\u037d\u0003\u0208\u0104\u0000\u037b\u037c\u0005\u0207\u0000\u0000\u037c"+
		"\u037e\u0005\u0091\u0000\u0000\u037d\u037b\u0001\u0000\u0000\u0000\u037d"+
		"\u037e\u0001\u0000\u0000\u0000\u037e\u037f\u0001\u0000\u0000\u0000\u037f"+
		"\u0380\u0005\u025c\u0000\u0000\u0380\u0383\u0003\u01d6\u00eb\u0000\u0381"+
		"\u0382\u0005X\u0000\u0000\u0382\u0384\u0003\u0200\u0100\u0000\u0383\u0381"+
		"\u0001\u0000\u0000\u0000\u0383\u0384\u0001\u0000\u0000\u0000\u0384\u040a"+
		"\u0001\u0000\u0000\u0000\u0385\u0387\u0005\u0013\u0000\u0000\u0386\u0388"+
		"\u0005^\u0000\u0000\u0387\u0386\u0001\u0000\u0000\u0000\u0387\u0388\u0001"+
		"\u0000\u0000\u0000\u0388\u0389\u0001\u0000\u0000\u0000\u0389\u038a\u0003"+
		"\u0208\u0104\u0000\u038a\u038b\u0005\u0207\u0000\u0000\u038b\u038c\u0005"+
		"\u009b\u0000\u0000\u038c\u038d\u0003\u01b0\u00d8\u0000\u038d\u040a\u0001"+
		"\u0000\u0000\u0000\u038e\u0390\u0005\u0013\u0000\u0000\u038f\u0391\u0005"+
		"^\u0000\u0000\u0390\u038f\u0001\u0000\u0000\u0000\u0390\u0391\u0001\u0000"+
		"\u0000\u0000\u0391\u0392\u0001\u0000\u0000\u0000\u0392\u0393\u0003\u0208"+
		"\u0104\u0000\u0393\u0394\u0005\u00bc\u0000\u0000\u0394\u0395\u0005\u009b"+
		"\u0000\u0000\u0395\u040a\u0001\u0000\u0000\u0000\u0396\u0398\u0005\u0013"+
		"\u0000\u0000\u0397\u0399\u0005^\u0000\u0000\u0398\u0397\u0001\u0000\u0000"+
		"\u0000\u0398\u0399\u0001\u0000\u0000\u0000\u0399\u039a\u0001\u0000\u0000"+
		"\u0000\u039a\u039b\u0003\u0208\u0104\u0000\u039b\u039c\u0007\u0000\u0000"+
		"\u0000\u039c\u039d\u0005\u016d\u0000\u0000\u039d\u039e\u0005\u0172\u0000"+
		"\u0000\u039e\u040a\u0001\u0000\u0000\u0000\u039f\u03a1\u0005\u0013\u0000"+
		"\u0000\u03a0\u03a2\u0005^\u0000\u0000\u03a1\u03a0\u0001\u0000\u0000\u0000"+
		"\u03a1\u03a2\u0001\u0000\u0000\u0000\u03a2\u03a3\u0001\u0000\u0000\u0000"+
		"\u03a3\u03a4\u0003\u0208\u0104\u0000\u03a4\u03a5\u0005\u0207\u0000\u0000"+
		"\u03a5\u03a6\u0005\u0224\u0000\u0000\u03a6\u03a7\u0005\u011b\u0000\u0000"+
		"\u03a7\u040a\u0001\u0000\u0000\u0000\u03a8\u03aa\u0005\u0013\u0000\u0000"+
		"\u03a9\u03ab\u0005^\u0000\u0000\u03aa\u03a9\u0001\u0000\u0000\u0000\u03aa"+
		"\u03ab\u0001\u0000\u0000\u0000\u03ab\u03ac\u0001\u0000\u0000\u0000\u03ac"+
		"\u03ad\u0003\u0208\u0104\u0000\u03ad\u03ae\u0005\u0207\u0000\u0000\u03ae"+
		"\u03af\u0005\u02fe\u0000\u0000\u03af\u03b0\u0003\u01d2\u00e9\u0000\u03b0"+
		"\u03b1\u0005\u02ff\u0000\u0000\u03b1\u040a\u0001\u0000\u0000\u0000\u03b2"+
		"\u03b4\u0005\u0013\u0000\u0000\u03b3\u03b5\u0005^\u0000\u0000\u03b4\u03b3"+
		"\u0001\u0000\u0000\u0000\u03b4\u03b5\u0001\u0000\u0000\u0000\u03b5\u03b6"+
		"\u0001\u0000\u0000\u0000\u03b6\u03b7\u0003\u0208\u0104\u0000\u03b7\u03b8"+
		"\u0005\u01d8\u0000\u0000\u03b8\u03b9\u0005\u02fe\u0000\u0000\u03b9\u03ba"+
		"\u0003\u01ce\u00e7\u0000\u03ba\u03bb\u0005\u02ff\u0000\u0000\u03bb\u040a"+
		"\u0001\u0000\u0000\u0000\u03bc\u03be\u0005\u0013\u0000\u0000\u03bd\u03bf"+
		"\u0005^\u0000\u0000\u03be\u03bd\u0001\u0000\u0000\u0000\u03be\u03bf\u0001"+
		"\u0000\u0000\u0000\u03bf\u03c0\u0001\u0000\u0000\u0000\u03c0\u03c1\u0003"+
		"\u0208\u0104\u0000\u03c1\u03c2\u0005\u0207\u0000\u0000\u03c2\u03c3\u0005"+
		"\u0229\u0000\u0000\u03c3\u03c4\u0007\u0003\u0000\u0000\u03c4\u040a\u0001"+
		"\u0000\u0000\u0000\u03c5\u03c7\u0005\u0013\u0000\u0000\u03c6\u03c8\u0005"+
		"^\u0000\u0000\u03c7\u03c6\u0001\u0000\u0000\u0000\u03c7\u03c8\u0001\u0000"+
		"\u0000\u0000\u03c8\u03c9\u0001\u0000\u0000\u0000\u03c9\u03ca\u0003\u0208"+
		"\u0104\u0000\u03ca\u03cc\u0005\u0186\u0000\u0000\u03cb\u03cd\u0007\u0004"+
		"\u0000\u0000\u03cc\u03cb\u0001\u0000\u0000\u0000\u03cc\u03cd\u0001\u0000"+
		"\u0000\u0000\u03cd\u040a\u0001\u0000\u0000\u0000\u03ce\u03cf\u0005\u000b"+
		"\u0000\u0000\u03cf\u03d2\u0003\u01f6\u00fb\u0000\u03d0\u03d1\u0005\u016d"+
		"\u0000\u0000\u03d1\u03d3\u0005\u0273\u0000\u0000\u03d2\u03d0\u0001\u0000"+
		"\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3\u040a\u0001\u0000"+
		"\u0000\u0000\u03d4\u03d5\u0005\u0274\u0000\u0000\u03d5\u03d6\u0005m\u0000"+
		"\u0000\u03d6\u040a\u0003\u0202\u0101\u0000\u03d7\u03d8\u0005\u00bc\u0000"+
		"\u0000\u03d8\u03db\u0005m\u0000\u0000\u03d9\u03da\u0005\u02b2\u0000\u0000"+
		"\u03da\u03dc\u0005\u00d3\u0000\u0000\u03db\u03d9\u0001\u0000\u0000\u0000"+
		"\u03db\u03dc\u0001\u0000\u0000\u0000\u03dc\u03dd\u0001\u0000\u0000\u0000"+
		"\u03dd\u03df\u0003\u0202\u0101\u0000\u03de\u03e0\u0007\u0001\u0000\u0000"+
		"\u03df\u03de\u0001\u0000\u0000\u0000\u03df\u03e0\u0001\u0000\u0000\u0000"+
		"\u03e0\u040a\u0001\u0000\u0000\u0000\u03e1\u03e2\u0005\u00b3\u0000\u0000"+
		"\u03e2\u03e6\u0005\u0254\u0000\u0000\u03e3\u03e7\u0003\u0202\u0101\u0000"+
		"\u03e4\u03e7\u0005\u0010\u0000\u0000\u03e5\u03e7\u0005\u026c\u0000\u0000"+
		"\u03e6\u03e3\u0001\u0000\u0000\u0000\u03e6\u03e4\u0001\u0000\u0000\u0000"+
		"\u03e6\u03e5\u0001\u0000\u0000\u0000\u03e6\u03e7\u0001\u0000\u0000\u0000"+
		"\u03e7\u040a\u0001\u0000\u0000\u0000\u03e8\u03e9\u0005\u00c3\u0000\u0000"+
		"\u03e9\u03ed\u0005\u0254\u0000\u0000\u03ea\u03ee\u0003\u0202\u0101\u0000"+
		"\u03eb\u03ee\u0005\u0010\u0000\u0000\u03ec\u03ee\u0005\u026c\u0000\u0000"+
		"\u03ed\u03ea\u0001\u0000\u0000\u0000\u03ed\u03eb\u0001\u0000\u0000\u0000"+
		"\u03ed\u03ec\u0001\u0000\u0000\u0000\u03ed\u03ee\u0001\u0000\u0000\u0000"+
		"\u03ee\u040a\u0001\u0000\u0000\u0000\u03ef\u03f0\u0005\u00c3\u0000\u0000"+
		"\u03f0\u03f1\u0005\u01d7\u0000\u0000\u03f1\u03f2\u0005\u0254\u0000\u0000"+
		"\u03f2\u040a\u0003\u0202\u0101\u0000\u03f3\u03f4\u0005\u00c3\u0000\u0000"+
		"\u03f4\u03f5\u0005\u0014\u0000\u0000\u03f5\u03f6\u0005\u0254\u0000\u0000"+
		"\u03f6\u040a\u0003\u0202\u0101\u0000\u03f7\u03f8\u0005\u0207\u0000\u0000"+
		"\u03f8\u03f9\u0005\u0286\u0000\u0000\u03f9\u040a\u0005\u017e\u0000\u0000"+
		"\u03fa\u03fb\u0005\u0207\u0000\u0000\u03fb\u03fc\u0005\u0288\u0000\u0000"+
		"\u03fc\u040a\u0005\u017e\u0000\u0000\u03fd\u03fe\u0005\u0293\u0000\u0000"+
		"\u03fe\u040a\u0003\u0200\u0100\u0000\u03ff\u0400\u0005\u0167\u0000\u0000"+
		"\u0400\u0401\u0005\u0293\u0000\u0000\u0401\u040a\u0003\u0200\u0100\u0000"+
		"\u0402\u0403\u0005\u0193\u0000\u0000\u0403\u0404\u0005\u0247\u0000\u0000"+
		"\u0404\u040a\u0003\u01f8\u00fc\u0000\u0405\u0407\u0005\u0186\u0000\u0000"+
		"\u0406\u0408\u0007\u0004\u0000\u0000\u0407\u0406\u0001\u0000\u0000\u0000"+
		"\u0407\u0408\u0001\u0000\u0000\u0000\u0408\u040a\u0001\u0000\u0000\u0000"+
		"\u0409\u035d\u0001\u0000\u0000\u0000\u0409\u036a\u0001\u0000\u0000\u0000"+
		"\u0409\u0376\u0001\u0000\u0000\u0000\u0409\u0385\u0001\u0000\u0000\u0000"+
		"\u0409\u038e\u0001\u0000\u0000\u0000\u0409\u0396\u0001\u0000\u0000\u0000"+
		"\u0409\u039f\u0001\u0000\u0000\u0000\u0409\u03a8\u0001\u0000\u0000\u0000"+
		"\u0409\u03b2\u0001\u0000\u0000\u0000\u0409\u03bc\u0001\u0000\u0000\u0000"+
		"\u0409\u03c5\u0001\u0000\u0000\u0000\u0409\u03ce\u0001\u0000\u0000\u0000"+
		"\u0409\u03d4\u0001\u0000\u0000\u0000\u0409\u03d7\u0001\u0000\u0000\u0000"+
		"\u0409\u03e1\u0001\u0000\u0000\u0000\u0409\u03e8\u0001\u0000\u0000\u0000"+
		"\u0409\u03ef\u0001\u0000\u0000\u0000\u0409\u03f3\u0001\u0000\u0000\u0000"+
		"\u0409\u03f7\u0001\u0000\u0000\u0000\u0409\u03fa\u0001\u0000\u0000\u0000"+
		"\u0409\u03fd\u0001\u0000\u0000\u0000\u0409\u03ff\u0001\u0000\u0000\u0000"+
		"\u0409\u0402\u0001\u0000\u0000\u0000\u0409\u0405\u0001\u0000\u0000\u0000"+
		"\u040a\u001b\u0001\u0000\u0000\u0000\u040b\u0410\u0003\u001a\r\u0000\u040c"+
		"\u040d\u0005\u02f8\u0000\u0000\u040d\u040f\u0003\u001a\r\u0000\u040e\u040c"+
		"\u0001\u0000\u0000\u0000\u040f\u0412\u0001\u0000\u0000\u0000\u0410\u040e"+
		"\u0001\u0000\u0000\u0000\u0410\u0411\u0001\u0000\u0000\u0000\u0411\u001d"+
		"\u0001\u0000\u0000\u0000\u0412\u0410\u0001\u0000\u0000\u0000\u0413\u0414"+
		"\u0005\u0013\u0000\u0000\u0414\u0415\u0005\u00e5\u0000\u0000\u0415\u0418"+
		"\u0005\u0237\u0000\u0000\u0416\u0417\u0005\u02b2\u0000\u0000\u0417\u0419"+
		"\u0005\u00d3\u0000\u0000\u0418\u0416\u0001\u0000\u0000\u0000\u0418\u0419"+
		"\u0001\u0000\u0000\u0000\u0419\u041b\u0001\u0000\u0000\u0000\u041a\u041c"+
		"\u0005\u0181\u0000\u0000\u041b\u041a\u0001\u0000\u0000\u0000\u041b\u041c"+
		"\u0001\u0000\u0000\u0000\u041c\u041d\u0001\u0000\u0000\u0000\u041d\u041f"+
		"\u0003\u0200\u0100\u0000\u041e\u0420\u0005\u02fd\u0000\u0000\u041f\u041e"+
		"\u0001\u0000\u0000\u0000\u041f\u0420\u0001\u0000\u0000\u0000\u0420\u0421"+
		"\u0001\u0000\u0000\u0000\u0421\u0422\u0003\u001c\u000e\u0000\u0422\u0452"+
		"\u0001\u0000\u0000\u0000\u0423\u0424\u0005\u0013\u0000\u0000\u0424\u0425"+
		"\u0005\u00e5\u0000\u0000\u0425\u0428\u0005\u0237\u0000\u0000\u0426\u0427"+
		"\u0005\u02b2\u0000\u0000\u0427\u0429\u0005\u00d3\u0000\u0000\u0428\u0426"+
		"\u0001\u0000\u0000\u0000\u0428\u0429\u0001\u0000\u0000\u0000\u0429\u042b"+
		"\u0001\u0000\u0000\u0000\u042a\u042c\u0005\u0181\u0000\u0000\u042b\u042a"+
		"\u0001\u0000\u0000\u0000\u042b\u042c\u0001\u0000\u0000\u0000\u042c\u042d"+
		"\u0001\u0000\u0000\u0000\u042d\u042f\u0003\u0200\u0100\u0000\u042e\u0430"+
		"\u0005\u02fd\u0000\u0000\u042f\u042e\u0001\u0000\u0000\u0000\u042f\u0430"+
		"\u0001\u0000\u0000\u0000\u0430\u0431\u0001\u0000\u0000\u0000\u0431\u0433"+
		"\u0005\u01d4\u0000\u0000\u0432\u0434\u0005^\u0000\u0000\u0433\u0432\u0001"+
		"\u0000\u0000\u0000\u0433\u0434\u0001\u0000\u0000\u0000\u0434\u0435\u0001"+
		"\u0000\u0000\u0000\u0435\u0436\u0003\u0208\u0104\u0000\u0436\u0437\u0005"+
		"\u0247\u0000\u0000\u0437\u0438\u0003\u0200\u0100\u0000\u0438\u0452\u0001"+
		"\u0000\u0000\u0000\u0439\u043a\u0005\u0013\u0000\u0000\u043a\u043b\u0005"+
		"\u00e5\u0000\u0000\u043b\u043e\u0005\u0237\u0000\u0000\u043c\u043d\u0005"+
		"\u02b2\u0000\u0000\u043d\u043f\u0005\u00d3\u0000\u0000\u043e\u043c\u0001"+
		"\u0000\u0000\u0000\u043e\u043f\u0001\u0000\u0000\u0000\u043f\u0440\u0001"+
		"\u0000\u0000\u0000\u0440\u0441\u0003\u0200\u0100\u0000\u0441\u0442\u0005"+
		"\u01d4\u0000\u0000\u0442\u0443\u0005\u0247\u0000\u0000\u0443\u0444\u0003"+
		"\u0200\u0100\u0000\u0444\u0452\u0001\u0000\u0000\u0000\u0445\u0446\u0005"+
		"\u0013\u0000\u0000\u0446\u0447\u0005\u00e5\u0000\u0000\u0447\u044a\u0005"+
		"\u0237\u0000\u0000\u0448\u0449\u0005\u02b2\u0000\u0000\u0449\u044b\u0005"+
		"\u00d3\u0000\u0000\u044a\u0448\u0001\u0000\u0000\u0000\u044a\u044b\u0001"+
		"\u0000\u0000\u0000\u044b\u044c\u0001\u0000\u0000\u0000\u044c\u044d\u0003"+
		"\u0200\u0100\u0000\u044d\u044e\u0005\u0207\u0000\u0000\u044e\u044f\u0005"+
		"\u01f3\u0000\u0000\u044f\u0450\u0003\u0200\u0100\u0000\u0450\u0452\u0001"+
		"\u0000\u0000\u0000\u0451\u0413\u0001\u0000\u0000\u0000\u0451\u0423\u0001"+
		"\u0000\u0000\u0000\u0451\u0439\u0001\u0000\u0000\u0000\u0451\u0445\u0001"+
		"\u0000\u0000\u0000\u0452\u001f\u0001\u0000\u0000\u0000\u0453\u0454\u0003"+
		"\u0204\u0102\u0000\u0454!\u0001\u0000\u0000\u0000\u0455\u0456\u0005\u0013"+
		"\u0000\u0000\u0456\u0457\u0005\u00fa\u0000\u0000\u0457\u0458\u0003\u01f8"+
		"\u00fc\u0000\u0458\u0459\u0005\u000b\u0000\u0000\u0459\u045a\u0005\u026c"+
		"\u0000\u0000\u045a\u045b\u0003\u01ce\u00e7\u0000\u045b\u046b\u0001\u0000"+
		"\u0000\u0000\u045c\u045d\u0005\u0013\u0000\u0000\u045d\u045e\u0005\u00fa"+
		"\u0000\u0000\u045e\u045f\u0003\u01f8\u00fc\u0000\u045f\u0460\u0005\u00bc"+
		"\u0000\u0000\u0460\u0461\u0005\u026c\u0000\u0000\u0461\u0462\u0003\u01ce"+
		"\u00e7\u0000\u0462\u046b\u0001\u0000\u0000\u0000\u0463\u0464\u0005\u0013"+
		"\u0000\u0000\u0464\u0465\u0005\u00fa\u0000\u0000\u0465\u0466\u0003\u0200"+
		"\u0100\u0000\u0466\u0467\u0005\u01d4\u0000\u0000\u0467\u0468\u0005\u0247"+
		"\u0000\u0000\u0468\u0469\u0003\u0200\u0100\u0000\u0469\u046b\u0001\u0000"+
		"\u0000\u0000\u046a\u0455\u0001\u0000\u0000\u0000\u046a\u045c\u0001\u0000"+
		"\u0000\u0000\u046a\u0463\u0001\u0000\u0000\u0000\u046b#\u0001\u0000\u0000"+
		"\u0000\u046c\u046d\u0005\u0013\u0000\u0000\u046d\u0470\u0005\u010c\u0000"+
		"\u0000\u046e\u046f\u0005\u02b2\u0000\u0000\u046f\u0471\u0005\u00d3\u0000"+
		"\u0000\u0470\u046e\u0001\u0000\u0000\u0000\u0470\u0471\u0001\u0000\u0000"+
		"\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472\u0473\u0003\u0200\u0100"+
		"\u0000\u0473\u0474\u0005\u01d4\u0000\u0000\u0474\u0475\u0005\u0247\u0000"+
		"\u0000\u0475\u0476\u0003\u0200\u0100\u0000\u0476\u04b3\u0001\u0000\u0000"+
		"\u0000\u0477\u0478\u0005\u0013\u0000\u0000\u0478\u047b\u0005\u010c\u0000"+
		"\u0000\u0479\u047a\u0005\u02b2\u0000\u0000\u047a\u047c\u0005\u00d3\u0000"+
		"\u0000\u047b\u0479\u0001\u0000\u0000\u0000\u047b\u047c\u0001\u0000\u0000"+
		"\u0000\u047c\u047d\u0001\u0000\u0000\u0000\u047d\u047e\u0003\u0200\u0100"+
		"\u0000\u047e\u047f\u0005\u0207\u0000\u0000\u047f\u0480\u0005\u023a\u0000"+
		"\u0000\u0480\u0481\u0003\u0200\u0100\u0000\u0481\u04b3\u0001\u0000\u0000"+
		"\u0000\u0482\u0483\u0005\u0013\u0000\u0000\u0483\u0484\u0005\u010c\u0000"+
		"\u0000\u0484\u0485\u0003\u0200\u0100\u0000\u0485\u0486\u0005\u00a7\u0000"+
		"\u0000\u0486\u0487\u0005\u0180\u0000\u0000\u0487\u0488\u0005\u00d7\u0000"+
		"\u0000\u0488\u0489\u0003\u0200\u0100\u0000\u0489\u04b3\u0001\u0000\u0000"+
		"\u0000\u048a\u048b\u0005\u0013\u0000\u0000\u048b\u048e\u0005\u010c\u0000"+
		"\u0000\u048c\u048d\u0005\u02b2\u0000\u0000\u048d\u048f\u0005\u00d3\u0000"+
		"\u0000\u048e\u048c\u0001\u0000\u0000\u0000\u048e\u048f\u0001\u0000\u0000"+
		"\u0000\u048f\u0490\u0001\u0000\u0000\u0000\u0490\u0491\u0003\u0200\u0100"+
		"\u0000\u0491\u0492\u0005\u0207\u0000\u0000\u0492\u0493\u0005\u02fe\u0000"+
		"\u0000\u0493\u0494\u0003\u01d2\u00e9\u0000\u0494\u0495\u0005\u02ff\u0000"+
		"\u0000\u0495\u04b3\u0001\u0000\u0000\u0000\u0496\u0497\u0005\u0013\u0000"+
		"\u0000\u0497\u049a\u0005\u010c\u0000\u0000\u0498\u0499\u0005\u02b2\u0000"+
		"\u0000\u0499\u049b\u0005\u00d3\u0000\u0000\u049a\u0498\u0001\u0000\u0000"+
		"\u0000\u049a\u049b\u0001\u0000\u0000\u0000\u049b\u049c\u0001\u0000\u0000"+
		"\u0000\u049c\u049d\u0005\u01d8\u0000\u0000\u049d\u049e\u0005\u02fe\u0000"+
		"\u0000\u049e\u049f\u0003\u01ce\u00e7\u0000\u049f\u04a0\u0005\u02ff\u0000"+
		"\u0000\u04a0\u04b3\u0001\u0000\u0000\u0000\u04a1\u04a2\u0005\u0013\u0000"+
		"\u0000\u04a2\u04a3\u0005\u010c\u0000\u0000\u04a3\u04a4\u0005\u0010\u0000"+
		"\u0000\u04a4\u04a5\u0005\u0109\u0000\u0000\u04a5\u04a6\u0005\u023a\u0000"+
		"\u0000\u04a6\u04aa\u0003\u0200\u0100\u0000\u04a7\u04a8\u0005\u02ce\u0000"+
		"\u0000\u04a8\u04a9\u00056\u0000\u0000\u04a9\u04ab\u0003\u01ce\u00e7\u0000"+
		"\u04aa\u04a7\u0001\u0000\u0000\u0000\u04aa\u04ab\u0001\u0000\u0000\u0000"+
		"\u04ab\u04ac\u0001\u0000\u0000\u0000\u04ac\u04ad\u0005\u0207\u0000\u0000"+
		"\u04ad\u04ae\u0005\u023a\u0000\u0000\u04ae\u04b0\u0003\u0200\u0100\u0000"+
		"\u04af\u04b1\u0005\u0171\u0000\u0000\u04b0\u04af\u0001\u0000\u0000\u0000"+
		"\u04b0\u04b1\u0001\u0000\u0000\u0000\u04b1\u04b3\u0001\u0000\u0000\u0000"+
		"\u04b2\u046c\u0001\u0000\u0000\u0000\u04b2\u0477\u0001\u0000\u0000\u0000"+
		"\u04b2\u0482\u0001\u0000\u0000\u0000\u04b2\u048a\u0001\u0000\u0000\u0000"+
		"\u04b2\u0496\u0001\u0000\u0000\u0000\u04b2\u04a1\u0001\u0000\u0000\u0000"+
		"\u04b3%\u0001\u0000\u0000\u0000\u04b4\u04b6\u0005\u0013\u0000\u0000\u04b5"+
		"\u04b7\u0005\u01b7\u0000\u0000\u04b6\u04b5\u0001\u0000\u0000\u0000\u04b6"+
		"\u04b7\u0001\u0000\u0000\u0000\u04b7\u04b8\u0001\u0000\u0000\u0000\u04b8"+
		"\u04b9\u0005\u012b\u0000\u0000\u04b9\u04ba\u0003\u0200\u0100\u0000\u04ba"+
		"\u04bb\u0005\u01d4\u0000\u0000\u04bb\u04bc\u0005\u0247\u0000\u0000\u04bc"+
		"\u04bd\u0003\u0200\u0100\u0000\u04bd\u04cc\u0001\u0000\u0000\u0000\u04be"+
		"\u04c0\u0005\u0013\u0000\u0000\u04bf\u04c1\u0005\u01b7\u0000\u0000\u04c0"+
		"\u04bf\u0001\u0000\u0000\u0000\u04c0\u04c1\u0001\u0000\u0000\u0000\u04c1"+
		"\u04c2\u0001\u0000\u0000\u0000\u04c2\u04c3\u0005\u012b\u0000\u0000\u04c3"+
		"\u04c4\u0003\u0200\u0100\u0000\u04c4\u04c5\u0005\u0193\u0000\u0000\u04c5"+
		"\u04c9\u0005\u0247\u0000\u0000\u04c6\u04ca\u0003\u0200\u0100\u0000\u04c7"+
		"\u04ca\u0005\u008d\u0000\u0000\u04c8\u04ca\u0005\u0206\u0000\u0000\u04c9"+
		"\u04c6\u0001\u0000\u0000\u0000\u04c9\u04c7\u0001\u0000\u0000\u0000\u04c9"+
		"\u04c8\u0001\u0000\u0000\u0000\u04ca\u04cc\u0001\u0000\u0000\u0000\u04cb"+
		"\u04b4\u0001\u0000\u0000\u0000\u04cb\u04be\u0001\u0000\u0000\u0000\u04cc"+
		"\'\u0001\u0000\u0000\u0000\u04cd\u04ce\u0005\u0013\u0000\u0000\u04ce\u04cf"+
		"\u0005\u012c\u0000\u0000\u04cf\u04d0\u0005\u0178\u0000\u0000\u04d0\u04d1"+
		"\u0005\u0305\u0000\u0000\u04d1\u04d2\u0005\u0193\u0000\u0000\u04d2\u04d6"+
		"\u0005\u0247\u0000\u0000\u04d3\u04d7\u0003\u0200\u0100\u0000\u04d4\u04d7"+
		"\u0005\u008d\u0000\u0000\u04d5\u04d7\u0005\u0206\u0000\u0000\u04d6\u04d3"+
		"\u0001\u0000\u0000\u0000\u04d6\u04d4\u0001\u0000\u0000\u0000\u04d6\u04d5"+
		"\u0001\u0000\u0000\u0000\u04d7)\u0001\u0000\u0000\u0000\u04d8\u04d9\u0003"+
		"\u0204\u0102\u0000\u04d9+\u0001\u0000\u0000\u0000\u04da\u04db\u0003\u0204"+
		"\u0102\u0000\u04db-\u0001\u0000\u0000\u0000\u04dc\u04dd\u0005\u0013\u0000"+
		"\u0000\u04dd\u04de\u0005\u0184\u0000\u0000\u04de\u04df\u0005Q\u0000\u0000"+
		"\u04df\u04e0\u0003\u0200\u0100\u0000\u04e0\u04e1\u0005\u0271\u0000\u0000"+
		"\u04e1\u04e2\u0003\u01da\u00ed\u0000\u04e2\u04e3\u0005\u01d4\u0000\u0000"+
		"\u04e3\u04e4\u0005\u0247\u0000\u0000\u04e4\u04e5\u0003\u0200\u0100\u0000"+
		"\u04e5\u04fe\u0001\u0000\u0000\u0000\u04e6\u04e7\u0005\u0013\u0000\u0000"+
		"\u04e7\u04e8\u0005\u0184\u0000\u0000\u04e8\u04e9\u0005Q\u0000\u0000\u04e9"+
		"\u04ea\u0003\u0200\u0100\u0000\u04ea\u04eb\u0005\u0271\u0000\u0000\u04eb"+
		"\u04ec\u0003\u01da\u00ed\u0000\u04ec\u04ed\u0005\u0193\u0000\u0000\u04ed"+
		"\u04f1\u0005\u0247\u0000\u0000\u04ee\u04f2\u0003\u0200\u0100\u0000\u04ef"+
		"\u04f2\u0005\u008d\u0000\u0000\u04f0\u04f2\u0005\u0206\u0000\u0000\u04f1"+
		"\u04ee\u0001\u0000\u0000\u0000\u04f1\u04ef\u0001\u0000\u0000\u0000\u04f1"+
		"\u04f0\u0001\u0000\u0000\u0000\u04f2\u04fe\u0001\u0000\u0000\u0000\u04f3"+
		"\u04f4\u0005\u0013\u0000\u0000\u04f4\u04f5\u0005\u0184\u0000\u0000\u04f5"+
		"\u04f6\u0005Q\u0000\u0000\u04f6\u04f7\u0003\u0200\u0100\u0000\u04f7\u04f8"+
		"\u0005\u0271\u0000\u0000\u04f8\u04f9\u0003\u01da\u00ed\u0000\u04f9\u04fa"+
		"\u0005\u0207\u0000\u0000\u04fa\u04fb\u0005\u01f3\u0000\u0000\u04fb\u04fc"+
		"\u0003\u0200\u0100\u0000\u04fc\u04fe\u0001\u0000\u0000\u0000\u04fd\u04dc"+
		"\u0001\u0000\u0000\u0000\u04fd\u04e6\u0001\u0000\u0000\u0000\u04fd\u04f3"+
		"\u0001\u0000\u0000\u0000\u04fe/\u0001\u0000\u0000\u0000\u04ff\u0500\u0003"+
		"\u0204\u0102\u0000\u05001\u0001\u0000\u0000\u0000\u0501\u0502\u0005\u0013"+
		"\u0000\u0000\u0502\u0503\u0005\u02cd\u0000\u0000\u0503\u0504\u0003\u0200"+
		"\u0100\u0000\u0504\u0505\u0005\u0180\u0000\u0000\u0505\u0506\u0003\u0200"+
		"\u0100\u0000\u0506\u0507\u0005\u01d4\u0000\u0000\u0507\u0508\u0005\u0247"+
		"\u0000\u0000\u0508\u0509\u0003\u0200\u0100\u0000\u0509\u051d\u0001\u0000"+
		"\u0000\u0000\u050a\u050b\u0005\u0013\u0000\u0000\u050b\u050c\u0005\u02cd"+
		"\u0000\u0000\u050c\u050d\u0003\u0200\u0100\u0000\u050d\u050e\u0005\u0180"+
		"\u0000\u0000\u050e\u0511\u0003\u0200\u0100\u0000\u050f\u0510\u0005\u0247"+
		"\u0000\u0000\u0510\u0512\u0003\u01fa\u00fd\u0000\u0511\u050f\u0001\u0000"+
		"\u0000\u0000\u0511\u0512\u0001\u0000\u0000\u0000\u0512\u0515\u0001\u0000"+
		"\u0000\u0000\u0513\u0514\u0005\u0271\u0000\u0000\u0514\u0516\u0003\u01ea"+
		"\u00f5\u0000\u0515\u0513\u0001\u0000\u0000\u0000\u0515\u0516\u0001\u0000"+
		"\u0000\u0000\u0516\u051a\u0001\u0000\u0000\u0000\u0517\u0518\u0005\u0286"+
		"\u0000\u0000\u0518\u0519\u0005N\u0000\u0000\u0519\u051b\u0003\u01ea\u00f5"+
		"\u0000\u051a\u0517\u0001\u0000\u0000\u0000\u051a\u051b\u0001\u0000\u0000"+
		"\u0000\u051b\u051d\u0001\u0000\u0000\u0000\u051c\u0501\u0001\u0000\u0000"+
		"\u0000\u051c\u050a\u0001\u0000\u0000\u0000\u051d3\u0001\u0000\u0000\u0000"+
		"\u051e\u051f\u0005\u0013\u0000\u0000\u051f\u0520\u0005\u01ba\u0000\u0000"+
		"\u0520\u0521\u0003\u0200\u0100\u0000\u0521\u0522\u0005\u000b\u0000\u0000"+
		"\u0522\u0524\u0005\u0237\u0000\u0000\u0523\u0525\u0005\u0181\u0000\u0000"+
		"\u0524\u0523\u0001\u0000\u0000\u0000\u0524\u0525\u0001\u0000\u0000\u0000"+
		"\u0525\u0526\u0001\u0000\u0000\u0000\u0526\u0527\u0003\u01ce\u00e7\u0000"+
		"\u0527\u0553\u0001\u0000\u0000\u0000\u0528\u0529\u0005\u0013\u0000\u0000"+
		"\u0529\u052a\u0005\u01ba\u0000\u0000\u052a\u052b\u0003\u0200\u0100\u0000"+
		"\u052b\u052c\u0005\u0207\u0000\u0000\u052c\u052e\u0005\u0237\u0000\u0000"+
		"\u052d\u052f\u0005\u0181\u0000\u0000\u052e\u052d\u0001\u0000\u0000\u0000"+
		"\u052e\u052f\u0001\u0000\u0000\u0000\u052f\u0530\u0001\u0000\u0000\u0000"+
		"\u0530\u0531\u0003\u01ce\u00e7\u0000\u0531\u0553\u0001\u0000\u0000\u0000"+
		"\u0532\u0533\u0005\u0013\u0000\u0000\u0533\u0534\u0005\u01ba\u0000\u0000"+
		"\u0534\u0535\u0003\u0200\u0100\u0000\u0535\u0536\u0005\u00bc\u0000\u0000"+
		"\u0536\u0538\u0005\u0237\u0000\u0000\u0537\u0539\u0005\u0181\u0000\u0000"+
		"\u0538\u0537\u0001\u0000\u0000\u0000\u0538\u0539\u0001\u0000\u0000\u0000"+
		"\u0539\u053a\u0001\u0000\u0000\u0000\u053a\u053b\u0003\u01ce\u00e7\u0000"+
		"\u053b\u0553\u0001\u0000\u0000\u0000\u053c\u053d\u0005\u0013\u0000\u0000"+
		"\u053d\u053e\u0005\u01ba\u0000\u0000\u053e\u053f\u0003\u0200\u0100\u0000"+
		"\u053f\u0540\u0005\u0207\u0000\u0000\u0540\u0541\u0005\u02fe\u0000\u0000"+
		"\u0541\u0542\u0003\u01d2\u00e9\u0000\u0542\u0543\u0005\u02ff\u0000\u0000"+
		"\u0543\u0553\u0001\u0000\u0000\u0000\u0544\u0545\u0005\u0013\u0000\u0000"+
		"\u0545\u0546\u0005\u01ba\u0000\u0000\u0546\u0547\u0003\u0200\u0100\u0000"+
		"\u0547\u0548\u0005\u0193\u0000\u0000\u0548\u0549\u0005\u0247\u0000\u0000"+
		"\u0549\u054a\u0003\u01f8\u00fc\u0000\u054a\u0553\u0001\u0000\u0000\u0000"+
		"\u054b\u054c\u0005\u0013\u0000\u0000\u054c\u054d\u0005\u01ba\u0000\u0000"+
		"\u054d\u054e\u0003\u0200\u0100\u0000\u054e\u054f\u0005\u01d4\u0000\u0000"+
		"\u054f\u0550\u0005\u0247\u0000\u0000\u0550\u0551\u0003\u01ca\u00e5\u0000"+
		"\u0551\u0553\u0001\u0000\u0000\u0000\u0552\u051e\u0001\u0000\u0000\u0000"+
		"\u0552\u0528\u0001\u0000\u0000\u0000\u0552\u0532\u0001\u0000\u0000\u0000"+
		"\u0552\u053c\u0001\u0000\u0000\u0000\u0552\u0544\u0001\u0000\u0000\u0000"+
		"\u0552\u054b\u0001\u0000\u0000\u0000\u05535\u0001\u0000\u0000\u0000\u0554"+
		"\u056e\u0005\u028f\u0000\u0000\u0555\u056e\u0005\u0290\u0000\u0000\u0556"+
		"\u056e\u0005\u007f\u0000\u0000\u0557\u056e\u0005\u0168\u0000\u0000\u0558"+
		"\u056e\u0005\u0291\u0000\u0000\u0559\u056e\u0005\u0292\u0000\u0000\u055a"+
		"\u056e\u0005\u0293\u0000\u0000\u055b\u056e\u0005\u0294\u0000\u0000\u055c"+
		"\u056e\u0005\u0295\u0000\u0000\u055d\u056e\u0005\u0296\u0000\u0000\u055e"+
		"\u056e\u0005\u0297\u0000\u0000\u055f\u056e\u0005\u0298\u0000\u0000\u0560"+
		"\u056e\u0005\u0299\u0000\u0000\u0561\u056e\u0005\u029a\u0000\u0000\u0562"+
		"\u0563\u0005k\u0000\u0000\u0563\u0564\u0005\u0136\u0000\u0000\u0564\u056e"+
		"\u0005\u011b\u0000\u0000\u0565\u0567\u0005\u00c5\u0000\u0000\u0566\u0565"+
		"\u0001\u0000\u0000\u0000\u0566\u0567\u0001\u0000\u0000\u0000\u0567\u0568"+
		"\u0001\u0000\u0000\u0000\u0568\u0569\u0005\u01a1\u0000\u0000\u0569\u056e"+
		"\u0005\u0308\u0000\u0000\u056a\u056b\u0005\u0273\u0000\u0000\u056b\u056c"+
		"\u0005\u0268\u0000\u0000\u056c\u056e\u0005\u0308\u0000\u0000\u056d\u0554"+
		"\u0001\u0000\u0000\u0000\u056d\u0555\u0001\u0000\u0000\u0000\u056d\u0556"+
		"\u0001\u0000\u0000\u0000\u056d\u0557\u0001\u0000\u0000\u0000\u056d\u0558"+
		"\u0001\u0000\u0000\u0000\u056d\u0559\u0001\u0000\u0000\u0000\u056d\u055a"+
		"\u0001\u0000\u0000\u0000\u056d\u055b\u0001\u0000\u0000\u0000\u056d\u055c"+
		"\u0001\u0000\u0000\u0000\u056d\u055d\u0001\u0000\u0000\u0000\u056d\u055e"+
		"\u0001\u0000\u0000\u0000\u056d\u055f\u0001\u0000\u0000\u0000\u056d\u0560"+
		"\u0001\u0000\u0000\u0000\u056d\u0561\u0001\u0000\u0000\u0000\u056d\u0562"+
		"\u0001\u0000\u0000\u0000\u056d\u0566\u0001\u0000\u0000\u0000\u056d\u056a"+
		"\u0001\u0000\u0000\u0000\u056e7\u0001\u0000\u0000\u0000\u056f\u0570\u0005"+
		"\u0013\u0000\u0000\u0570\u0571\u0005\u01e5\u0000\u0000\u0571\u0573\u0003"+
		"\u01f8\u00fc\u0000\u0572\u0574\u0005\u0286\u0000\u0000\u0573\u0572\u0001"+
		"\u0000\u0000\u0000\u0573\u0574\u0001\u0000\u0000\u0000\u0574\u0576\u0001"+
		"\u0000\u0000\u0000\u0575\u0577\u00036\u001b\u0000\u0576\u0575\u0001\u0000"+
		"\u0000\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578\u0576\u0001\u0000"+
		"\u0000\u0000\u0578\u0579\u0001\u0000\u0000\u0000\u0579\u05be\u0001\u0000"+
		"\u0000\u0000\u057a\u057b\u0005\u0013\u0000\u0000\u057b\u057c\u0005\u01e5"+
		"\u0000\u0000\u057c\u057d\u0003\u01ca\u00e5\u0000\u057d\u057e\u0005\u01d4"+
		"\u0000\u0000\u057e\u057f\u0005\u0247\u0000\u0000\u057f\u0580\u0003\u01ca"+
		"\u00e5\u0000\u0580\u05be\u0001\u0000\u0000\u0000\u0581\u0582\u0005\u0013"+
		"\u0000\u0000\u0582\u0585\u0005\u01e5\u0000\u0000\u0583\u0586\u0003\u01f8"+
		"\u00fc\u0000\u0584\u0586\u0005\u0010\u0000\u0000\u0585\u0583\u0001\u0000"+
		"\u0000\u0000\u0585\u0584\u0001\u0000\u0000\u0000\u0586\u058a\u0001\u0000"+
		"\u0000\u0000\u0587\u0588\u0005\u0109\u0000\u0000\u0588\u0589\u0005\u0092"+
		"\u0000\u0000\u0589\u058b\u0003\u01ca\u00e5\u0000\u058a\u0587\u0001\u0000"+
		"\u0000\u0000\u058a\u058b\u0001\u0000\u0000\u0000\u058b\u058c\u0001\u0000"+
		"\u0000\u0000\u058c\u058d\u0005\u0207\u0000\u0000\u058d\u058e\u0003\u0200"+
		"\u0100\u0000\u058e\u0591\u0007\u0005\u0000\u0000\u058f\u0592\u0003\u01fc"+
		"\u00fe\u0000\u0590\u0592\u0005\u009b\u0000\u0000\u0591\u058f\u0001\u0000"+
		"\u0000\u0000\u0591\u0590\u0001\u0000\u0000\u0000\u0592\u05be\u0001\u0000"+
		"\u0000\u0000\u0593\u0594\u0005\u0013\u0000\u0000\u0594\u0597\u0005\u01e5"+
		"\u0000\u0000\u0595\u0598\u0003\u01f8\u00fc\u0000\u0596\u0598\u0005\u0010"+
		"\u0000\u0000\u0597\u0595\u0001\u0000\u0000\u0000\u0597\u0596\u0001\u0000"+
		"\u0000\u0000\u0598\u059c\u0001\u0000\u0000\u0000\u0599\u059a\u0005\u0109"+
		"\u0000\u0000\u059a\u059b\u0005\u0092\u0000\u0000\u059b\u059d\u0003\u01ca"+
		"\u00e5\u0000\u059c\u0599\u0001\u0000\u0000\u0000\u059c\u059d\u0001\u0000"+
		"\u0000\u0000\u059d\u059e\u0001\u0000\u0000\u0000\u059e\u059f\u0005\u0207"+
		"\u0000\u0000\u059f\u05a0\u0003\u0200\u0100\u0000\u05a0\u05a1\u0005\u00ec"+
		"\u0000\u0000\u05a1\u05a2\u0005\u0085\u0000\u0000\u05a2\u05be\u0001\u0000"+
		"\u0000\u0000\u05a3\u05a4\u0005\u0013\u0000\u0000\u05a4\u05a7\u0005\u01e5"+
		"\u0000\u0000\u05a5\u05a8\u0003\u01f8\u00fc\u0000\u05a6\u05a8\u0005\u0010"+
		"\u0000\u0000\u05a7\u05a5\u0001\u0000\u0000\u0000\u05a7\u05a6\u0001\u0000"+
		"\u0000\u0000\u05a8\u05ac\u0001\u0000\u0000\u0000\u05a9\u05aa\u0005\u0109"+
		"\u0000\u0000\u05aa\u05ab\u0005\u0092\u0000\u0000\u05ab\u05ad\u0003\u01ca"+
		"\u00e5\u0000\u05ac\u05a9\u0001\u0000\u0000\u0000\u05ac\u05ad\u0001\u0000"+
		"\u0000\u0000\u05ad\u05ae\u0001\u0000\u0000\u0000\u05ae\u05af\u0005\u01d8"+
		"\u0000\u0000\u05af\u05be\u0003\u0200\u0100\u0000\u05b0\u05b1\u0005\u0013"+
		"\u0000\u0000\u05b1\u05b4\u0005\u01e5\u0000\u0000\u05b2\u05b5\u0003\u01f8"+
		"\u00fc\u0000\u05b3\u05b5\u0005\u0010\u0000\u0000\u05b4\u05b2\u0001\u0000"+
		"\u0000\u0000\u05b4\u05b3\u0001\u0000\u0000\u0000\u05b5\u05b9\u0001\u0000"+
		"\u0000\u0000\u05b6\u05b7\u0005\u0109\u0000\u0000\u05b7\u05b8\u0005\u0092"+
		"\u0000\u0000\u05b8\u05ba\u0003\u01ca\u00e5\u0000\u05b9\u05b6\u0001\u0000"+
		"\u0000\u0000\u05b9\u05ba\u0001\u0000\u0000\u0000\u05ba\u05bb\u0001\u0000"+
		"\u0000\u0000\u05bb\u05bc\u0005\u01d8\u0000\u0000\u05bc\u05be\u0005\u0010"+
		"\u0000\u0000\u05bd\u056f\u0001\u0000\u0000\u0000\u05bd\u057a\u0001\u0000"+
		"\u0000\u0000\u05bd\u0581\u0001\u0000\u0000\u0000\u05bd\u0593\u0001\u0000"+
		"\u0000\u0000\u05bd\u05a3\u0001\u0000\u0000\u0000\u05bd\u05b0\u0001\u0000"+
		"\u0000\u0000\u05be9\u0001\u0000\u0000\u0000\u05bf\u05c0\u0005\u0013\u0000"+
		"\u0000\u05c0\u05c1\u0005\u01f0\u0000\u0000\u05c1\u05c2\u0003\u01ca\u00e5"+
		"\u0000\u05c2\u05c3\u0005\u0180\u0000\u0000\u05c3\u05c4\u0003\u0200\u0100"+
		"\u0000\u05c4\u05c5\u0005\u01d4\u0000\u0000\u05c5\u05c6\u0005\u0247\u0000"+
		"\u0000\u05c6\u05c7\u0003\u01ca\u00e5\u0000\u05c7;\u0001\u0000\u0000\u0000"+
		"\u05c8\u05c9\u0005\u0013\u0000\u0000\u05c9\u05ca\u0005\u01f3\u0000\u0000"+
		"\u05ca\u05cb\u0003\u0200\u0100\u0000\u05cb\u05cc\u0005\u01d4\u0000\u0000"+
		"\u05cc\u05cd\u0005\u0247\u0000\u0000\u05cd\u05ce\u0003\u0200\u0100\u0000"+
		"\u05ce\u05da\u0001\u0000\u0000\u0000\u05cf\u05d0\u0005\u0013\u0000\u0000"+
		"\u05d0\u05d1\u0005\u01f3\u0000\u0000\u05d1\u05d2\u0003\u0200\u0100\u0000"+
		"\u05d2\u05d3\u0005\u0193\u0000\u0000\u05d3\u05d7\u0005\u0247\u0000\u0000"+
		"\u05d4\u05d8\u0003\u0200\u0100\u0000\u05d5\u05d8\u0005\u008d\u0000\u0000"+
		"\u05d6\u05d8\u0005\u0206\u0000\u0000\u05d7\u05d4\u0001\u0000\u0000\u0000"+
		"\u05d7\u05d5\u0001\u0000\u0000\u0000\u05d7\u05d6\u0001\u0000\u0000\u0000"+
		"\u05d8\u05da\u0001\u0000\u0000\u0000\u05d9\u05c8\u0001\u0000\u0000\u0000"+
		"\u05d9\u05cf\u0001\u0000\u0000\u0000\u05da=\u0001\u0000\u0000\u0000\u05db"+
		"\u05dc\u0005\u0013\u0000\u0000\u05dc\u05df\u0005\u0201\u0000\u0000\u05dd"+
		"\u05de\u0005\u02b2\u0000\u0000\u05de\u05e0";
	private static final String _serializedATNSegment1 =
		"\u0005\u00d3\u0000\u0000\u05df\u05dd\u0001\u0000\u0000\u0000\u05df\u05e0"+
		"\u0001\u0000\u0000\u0000\u05e0\u05e1\u0001\u0000\u0000\u0000\u05e1\u05e2"+
		"\u0003\u01ca\u00e5\u0000\u05e2?\u0001\u0000\u0000\u0000\u05e3\u05e5\u0007"+
		"\u0004\u0000\u0000\u05e4\u05e3\u0001\u0000\u0000\u0000\u05e4\u05e5\u0001"+
		"\u0000\u0000\u0000\u05e5\u05e6\u0001\u0000\u0000\u0000\u05e6\u05e8\u0003"+
		"\u0200\u0100\u0000\u05e7\u05e9\u0003\u01fc\u00fe\u0000\u05e8\u05e7\u0001"+
		"\u0000\u0000\u0000\u05e8\u05e9\u0001\u0000\u0000\u0000\u05e9\u05f4\u0001"+
		"\u0000\u0000\u0000\u05ea\u05ec\u0005\u02f8\u0000\u0000\u05eb\u05ed\u0007"+
		"\u0004\u0000\u0000\u05ec\u05eb\u0001\u0000\u0000\u0000\u05ec\u05ed\u0001"+
		"\u0000\u0000\u0000\u05ed\u05ee\u0001\u0000\u0000\u0000\u05ee\u05f0\u0003"+
		"\u0200\u0100\u0000\u05ef\u05f1\u0003\u01fc\u00fe\u0000\u05f0\u05ef\u0001"+
		"\u0000\u0000\u0000\u05f0\u05f1\u0001\u0000\u0000\u0000\u05f1\u05f3\u0001"+
		"\u0000\u0000\u0000\u05f2\u05ea\u0001\u0000\u0000\u0000\u05f3\u05f6\u0001"+
		"\u0000\u0000\u0000\u05f4\u05f2\u0001\u0000\u0000\u0000\u05f4\u05f5\u0001"+
		"\u0000\u0000\u0000\u05f5A\u0001\u0000\u0000\u0000\u05f6\u05f4\u0001\u0000"+
		"\u0000\u0000\u05f7\u05f8\u0005\u0013\u0000\u0000\u05f8\u05f9\u0005\u02bc"+
		"\u0000\u0000\u05f9\u0605\u0003\u0200\u0100\u0000\u05fa\u05fb\u0005\u02b7"+
		"\u0000\u0000\u05fb\u0606\u0005\u0308\u0000\u0000\u05fc\u05fd\u0005\u02b7"+
		"\u0000\u0000\u05fd\u05ff\u0005\u0308\u0000\u0000\u05fe\u05fc\u0001\u0000"+
		"\u0000\u0000\u05fe\u05ff\u0001\u0000\u0000\u0000\u05ff\u0600\u0001\u0000"+
		"\u0000\u0000\u0600\u0601\u0005\u0186\u0000\u0000\u0601\u0602\u0005\u02fe"+
		"\u0000\u0000\u0602\u0603\u0003@ \u0000\u0603\u0604\u0005\u02ff\u0000\u0000"+
		"\u0604\u0606\u0001\u0000\u0000\u0000\u0605\u05fa\u0001\u0000\u0000\u0000"+
		"\u0605\u05fe\u0001\u0000\u0000\u0000\u0606\u0616\u0001\u0000\u0000\u0000"+
		"\u0607\u0608\u0005\u0013\u0000\u0000\u0608\u0609\u0005\u02bc\u0000\u0000"+
		"\u0609\u060a\u0003\u0200\u0100\u0000\u060a\u060b\u0005\u0193\u0000\u0000"+
		"\u060b\u060c\u0005\u0247\u0000\u0000\u060c\u060d\u0003\u01f8\u00fc\u0000"+
		"\u060d\u0616\u0001\u0000\u0000\u0000\u060e\u060f\u0005\u0013\u0000\u0000"+
		"\u060f\u0610\u0005\u02bc\u0000\u0000\u0610\u0611\u0003\u0200\u0100\u0000"+
		"\u0611\u0612\u0005\u01d4\u0000\u0000\u0612\u0613\u0005\u0247\u0000\u0000"+
		"\u0613\u0614\u0003\u01ca\u00e5\u0000\u0614\u0616\u0001\u0000\u0000\u0000"+
		"\u0615\u05f7\u0001\u0000\u0000\u0000\u0615\u0607\u0001\u0000\u0000\u0000"+
		"\u0615\u060e\u0001\u0000\u0000\u0000\u0616C\u0001\u0000\u0000\u0000\u0617"+
		"\u0618\u0005\u0013\u0000\u0000\u0618\u0619\u0005\u0224\u0000\u0000\u0619"+
		"\u061a\u0003\u0200\u0100\u0000\u061a\u061b\u0005\u0193\u0000\u0000\u061b"+
		"\u061f\u0005\u0247\u0000\u0000\u061c\u0620\u0003\u0200\u0100\u0000\u061d"+
		"\u0620\u0005\u008d\u0000\u0000\u061e\u0620\u0005\u0206\u0000\u0000\u061f"+
		"\u061c\u0001\u0000\u0000\u0000\u061f\u061d\u0001\u0000\u0000\u0000\u061f"+
		"\u061e\u0001\u0000\u0000\u0000\u0620\u0630\u0001\u0000\u0000\u0000\u0621"+
		"\u0622\u0005\u0013\u0000\u0000\u0622\u0623\u0005\u0224\u0000\u0000\u0623"+
		"\u0624\u0003\u0200\u0100\u0000\u0624\u0625\u0005\u01d4\u0000\u0000\u0625"+
		"\u0626\u0005\u0247\u0000\u0000\u0626\u0627\u0003\u0200\u0100\u0000\u0627"+
		"\u0630\u0001\u0000\u0000\u0000\u0628\u0629\u0005\u0013\u0000\u0000\u0629"+
		"\u062a\u0005\u0224\u0000\u0000\u062a\u062b\u0003\u0200\u0100\u0000\u062b"+
		"\u062c\u0005\u0207\u0000\u0000\u062c\u062d\u0005\u01f3\u0000\u0000\u062d"+
		"\u062e\u0003\u0200\u0100\u0000\u062e\u0630\u0001\u0000\u0000\u0000\u062f"+
		"\u0617\u0001\u0000\u0000\u0000\u062f\u0621\u0001\u0000\u0000\u0000\u062f"+
		"\u0628\u0001\u0000\u0000\u0000\u0630E\u0001\u0000\u0000\u0000\u0631\u0632"+
		"\u0005\u0013\u0000\u0000\u0632\u0633\u0005\u0230\u0000\u0000\u0633\u0634"+
		"\u0003\u0200\u0100\u0000\u0634\u0635\u0005k\u0000\u0000\u0635\u0636\u0003"+
		"\u01fc\u00fe\u0000\u0636\u0671\u0001\u0000\u0000\u0000\u0637\u0638\u0005"+
		"\u0013\u0000\u0000\u0638\u0639\u0005\u0230\u0000\u0000\u0639\u063a\u0003"+
		"\u0200\u0100\u0000\u063a\u063b\u0005\u0207\u0000\u0000\u063b\u063c\u0005"+
		"\u01ba\u0000\u0000\u063c\u0642\u0003\u01cc\u00e6\u0000\u063d\u063e\u0005"+
		"\u0286\u0000\u0000\u063e\u063f\u0005\u02fe\u0000\u0000\u063f\u0640\u0003"+
		"\u01d2\u00e9\u0000\u0640\u0641\u0005\u02ff\u0000\u0000\u0641\u0643\u0001"+
		"\u0000\u0000\u0000\u0642\u063d\u0001\u0000\u0000\u0000\u0642\u0643\u0001"+
		"\u0000\u0000\u0000\u0643\u0671\u0001\u0000\u0000\u0000\u0644\u0645\u0005"+
		"\u0013\u0000\u0000\u0645\u0646\u0005\u0230\u0000\u0000\u0646\u0647\u0003"+
		"\u0200\u0100\u0000\u0647\u0648\u0005\u01c7\u0000\u0000\u0648\u064e\u0005"+
		"\u01ba\u0000\u0000\u0649\u064a\u0005\u0286\u0000\u0000\u064a\u064b\u0005"+
		"\u02fe\u0000\u0000\u064b\u064c\u0003\u01d2\u00e9\u0000\u064c\u064d\u0005"+
		"\u02ff\u0000\u0000\u064d\u064f\u0001\u0000\u0000\u0000\u064e\u0649\u0001"+
		"\u0000\u0000\u0000\u064e\u064f\u0001\u0000\u0000\u0000\u064f\u0671\u0001"+
		"\u0000\u0000\u0000\u0650\u0651\u0005\u0013\u0000\u0000\u0651\u0652\u0005"+
		"\u0230\u0000\u0000\u0652\u0653\u0003\u0200\u0100\u0000\u0653\u0654\u0005"+
		"\u00c3\u0000\u0000\u0654\u0671\u0001\u0000\u0000\u0000\u0655\u0656\u0005"+
		"\u0013\u0000\u0000\u0656\u0657\u0005\u0230\u0000\u0000\u0657\u0658\u0003"+
		"\u0200\u0100\u0000\u0658\u0659\u0005\u00b3\u0000\u0000\u0659\u0671\u0001"+
		"\u0000\u0000\u0000\u065a\u065b\u0005\u0013\u0000\u0000\u065b\u065c\u0005"+
		"\u0230\u0000\u0000\u065c\u065d\u0003\u0200\u0100\u0000\u065d\u065e\u0005"+
		"\u0207\u0000\u0000\u065e\u065f\u0005\u02fe\u0000\u0000\u065f\u0660\u0003"+
		"\u01d2\u00e9\u0000\u0660\u0661\u0005\u02ff\u0000\u0000\u0661\u0671\u0001"+
		"\u0000\u0000\u0000\u0662\u0663\u0005\u0013\u0000\u0000\u0663\u0664\u0005"+
		"\u0230\u0000\u0000\u0664\u0665\u0003\u0200\u0100\u0000\u0665\u0666\u0005"+
		"\u0193\u0000\u0000\u0666\u0667\u0005\u0247\u0000\u0000\u0667\u0668\u0003"+
		"\u01f8\u00fc\u0000\u0668\u0671\u0001\u0000\u0000\u0000\u0669\u066a\u0005"+
		"\u0013\u0000\u0000\u066a\u066b\u0005\u0230\u0000\u0000\u066b\u066c\u0003"+
		"\u0200\u0100\u0000\u066c\u066d\u0005\u01d4\u0000\u0000\u066d\u066e\u0005"+
		"\u0247\u0000\u0000\u066e\u066f\u0003\u0200\u0100\u0000\u066f\u0671\u0001"+
		"\u0000\u0000\u0000\u0670\u0631\u0001\u0000\u0000\u0000\u0670\u0637\u0001"+
		"\u0000\u0000\u0000\u0670\u0644\u0001\u0000\u0000\u0000\u0670\u0650\u0001"+
		"\u0000\u0000\u0000\u0670\u0655\u0001\u0000\u0000\u0000\u0670\u065a\u0001"+
		"\u0000\u0000\u0000\u0670\u0662\u0001\u0000\u0000\u0000\u0670\u0669\u0001"+
		"\u0000\u0000\u0000\u0671G\u0001\u0000\u0000\u0000\u0672\u0673\u0005\u0013"+
		"\u0000\u0000\u0673\u0674\u0005\u0235\u0000\u0000\u0674\u0675\u0005\u0207"+
		"\u0000\u0000\u0675\u0676\u0005\u030a\u0000\u0000\u0676\u0677\u0007\u0005"+
		"\u0000\u0000\u0677\u0681\u0003\u01fc\u00fe\u0000\u0678\u0679\u0005\u0013"+
		"\u0000\u0000\u0679\u067a\u0005\u0235\u0000\u0000\u067a\u067b\u0005\u01d8"+
		"\u0000\u0000\u067b\u0681\u0005\u030a\u0000\u0000\u067c\u067d\u0005\u0013"+
		"\u0000\u0000\u067d\u067e\u0005\u0235\u0000\u0000\u067e\u067f\u0005\u01d8"+
		"\u0000\u0000\u067f\u0681\u0005\u0010\u0000\u0000\u0680\u0672\u0001\u0000"+
		"\u0000\u0000\u0680\u0678\u0001\u0000\u0000\u0000\u0680\u067c\u0001\u0000"+
		"\u0000\u0000\u0681I\u0001\u0000\u0000\u0000\u0682\u0683\u0003\u0204\u0102"+
		"\u0000\u0683K\u0001\u0000\u0000\u0000\u0684\u0685\u0005\u0013\u0000\u0000"+
		"\u0685\u0686\u0005\u023a\u0000\u0000\u0686\u0687\u0003\u0200\u0100\u0000"+
		"\u0687\u0688\u0005\u01d4\u0000\u0000\u0688\u0689\u0005\u0247\u0000\u0000"+
		"\u0689\u068a\u0003\u0200\u0100\u0000\u068a\u06a6\u0001\u0000\u0000\u0000"+
		"\u068b\u068c\u0005\u0013\u0000\u0000\u068c\u068d\u0005\u023a\u0000\u0000"+
		"\u068d\u068e\u0003\u0200\u0100\u0000\u068e\u068f\u0005\u0193\u0000\u0000"+
		"\u068f\u0693\u0005\u0247\u0000\u0000\u0690\u0694\u0003\u0200\u0100\u0000"+
		"\u0691\u0694\u0005\u008d\u0000\u0000\u0692\u0694\u0005\u0206\u0000\u0000"+
		"\u0693\u0690\u0001\u0000\u0000\u0000\u0693\u0691\u0001\u0000\u0000\u0000"+
		"\u0693\u0692\u0001\u0000\u0000\u0000\u0694\u06a6\u0001\u0000\u0000\u0000"+
		"\u0695\u0696\u0005\u0013\u0000\u0000\u0696\u0697\u0005\u023a\u0000\u0000"+
		"\u0697\u0698\u0003\u0200\u0100\u0000\u0698\u0699\u0005\u0207\u0000\u0000"+
		"\u0699\u069a\u0005\u02fe\u0000\u0000\u069a\u069b\u0003\u01d2\u00e9\u0000"+
		"\u069b\u069c\u0005\u02ff\u0000\u0000\u069c\u06a6\u0001\u0000\u0000\u0000"+
		"\u069d\u069e\u0005\u0013\u0000\u0000\u069e\u069f\u0005\u023a\u0000\u0000"+
		"\u069f\u06a0\u0003\u0200\u0100\u0000\u06a0\u06a1\u0005\u01d8\u0000\u0000"+
		"\u06a1\u06a2\u0005\u02fe\u0000\u0000\u06a2\u06a3\u0003\u01ce\u00e7\u0000"+
		"\u06a3\u06a4\u0005\u02ff\u0000\u0000\u06a4\u06a6\u0001\u0000\u0000\u0000"+
		"\u06a5\u0684\u0001\u0000\u0000\u0000\u06a5\u068b\u0001\u0000\u0000\u0000"+
		"\u06a5\u0695\u0001\u0000\u0000\u0000\u06a5\u069d\u0001\u0000\u0000\u0000"+
		"\u06a6M\u0001\u0000\u0000\u0000\u06a7\u06a8\u0005\u0013\u0000\u0000\u06a8"+
		"\u06a9\u0005\u02ef\u0000\u0000\u06a9\u06aa\u0005\u01fa\u0000\u0000\u06aa"+
		"\u06ab\u0005h\u0000\u0000\u06ab\u06ac\u0003\u0200\u0100\u0000\u06ac\u06ad"+
		"\u0005\u000b\u0000\u0000\u06ad\u06ae\u0005\u0145\u0000\u0000\u06ae\u06af"+
		"\u0005\u00e3\u0000\u0000\u06af\u06b0\u0003\u01ce\u00e7\u0000\u06b0\u06b1"+
		"\u0005\u0286\u0000\u0000\u06b1\u06b2\u0003\u01ce\u00e7\u0000\u06b2\u0703"+
		"\u0001\u0000\u0000\u0000\u06b3\u06b4\u0005\u0013\u0000\u0000\u06b4\u06b5"+
		"\u0005\u02ef\u0000\u0000\u06b5\u06b6\u0005\u01fa\u0000\u0000\u06b6\u06b7"+
		"\u0005h\u0000\u0000\u06b7\u06b8\u0003\u0200\u0100\u0000\u06b8\u06b9\u0005"+
		"\u0013\u0000\u0000\u06b9\u06ba\u0005\u0145\u0000\u0000\u06ba\u06bb\u0005"+
		"\u00e3\u0000\u0000\u06bb\u06bc\u0003\u01ce\u00e7\u0000\u06bc\u06bd\u0005"+
		"\u0286\u0000\u0000\u06bd\u06be\u0003\u01ce\u00e7\u0000\u06be\u0703\u0001"+
		"\u0000\u0000\u0000\u06bf\u06c0\u0005\u0013\u0000\u0000\u06c0\u06c1\u0005"+
		"\u02ef\u0000\u0000\u06c1\u06c2\u0005\u01fa\u0000\u0000\u06c2\u06c3\u0005"+
		"h\u0000\u0000\u06c3\u06c4\u0003\u0200\u0100\u0000\u06c4\u06c5\u0005\u0013"+
		"\u0000\u0000\u06c5\u06c6\u0005\u0145\u0000\u0000\u06c6\u06c7\u0005\u01d6"+
		"\u0000\u0000\u06c7\u06c8\u0003\u0200\u0100\u0000\u06c8\u06c9\u0005\u0286"+
		"\u0000\u0000\u06c9\u06ca\u0003\u0200\u0100\u0000\u06ca\u0703\u0001\u0000"+
		"\u0000\u0000\u06cb\u06cc\u0005\u0013\u0000\u0000\u06cc\u06cd\u0005\u02ef"+
		"\u0000\u0000\u06cd\u06ce\u0005\u01fa\u0000\u0000\u06ce\u06cf\u0005h\u0000"+
		"\u0000\u06cf\u06d0\u0003\u0200\u0100\u0000\u06d0\u06d1\u0005\u0013\u0000"+
		"\u0000\u06d1\u06d2\u0005\u0145\u0000\u0000\u06d2\u06d3\u0005\u00e3\u0000"+
		"\u0000\u06d3\u06d4\u0003\u01ce\u00e7\u0000\u06d4\u06d5\u0005\u01d6\u0000"+
		"\u0000\u06d5\u06d6\u0003\u0200\u0100\u0000\u06d6\u06d7\u0005\u0286\u0000"+
		"\u0000\u06d7\u06d8\u0003\u0200\u0100\u0000\u06d8\u0703\u0001\u0000\u0000"+
		"\u0000\u06d9\u06da\u0005\u0013\u0000\u0000\u06da\u06db\u0005\u02ef\u0000"+
		"\u0000\u06db\u06dc\u0005\u01fa\u0000\u0000\u06dc\u06dd\u0005h\u0000\u0000"+
		"\u06dd\u06de\u0003\u0200\u0100\u0000\u06de\u06df\u0005\u00bc\u0000\u0000"+
		"\u06df\u06e2\u0005\u0145\u0000\u0000\u06e0\u06e1\u0005\u02b2\u0000\u0000"+
		"\u06e1\u06e3\u0005\u00d3\u0000\u0000\u06e2\u06e0\u0001\u0000\u0000\u0000"+
		"\u06e2\u06e3\u0001\u0000\u0000\u0000\u06e3\u06e4\u0001\u0000\u0000\u0000"+
		"\u06e4\u06e5\u0005\u00e3\u0000\u0000\u06e5\u06e6\u0003\u01ce\u00e7\u0000"+
		"\u06e6\u0703\u0001\u0000\u0000\u0000\u06e7\u06e8\u0005\u0013\u0000\u0000"+
		"\u06e8\u06e9\u0005\u02ef\u0000\u0000\u06e9\u06ea\u0005\u01fa\u0000\u0000"+
		"\u06ea\u06eb\u0005h\u0000\u0000\u06eb\u06ec\u0003\u0200\u0100\u0000\u06ec"+
		"\u06ed\u0005\u01d4\u0000\u0000\u06ed\u06ee\u0005\u0247\u0000\u0000\u06ee"+
		"\u06ef\u0003\u0200\u0100\u0000\u06ef\u0703\u0001\u0000\u0000\u0000\u06f0"+
		"\u06f1\u0005\u0013\u0000\u0000\u06f1\u06f2\u0005\u02ef\u0000\u0000\u06f2"+
		"\u06f3\u0005\u01fa\u0000\u0000\u06f3\u06f4\u0005h\u0000\u0000\u06f4\u06f5"+
		"\u0003\u0200\u0100\u0000\u06f5\u06f6\u0005\u0193\u0000\u0000\u06f6\u06f7"+
		"\u0005\u0247\u0000\u0000\u06f7\u06f8\u0003\u01f8\u00fc\u0000\u06f8\u0703"+
		"\u0001\u0000\u0000\u0000\u06f9\u06fa\u0005\u0013\u0000\u0000\u06fa\u06fb"+
		"\u0005\u02ef\u0000\u0000\u06fb\u06fc\u0005\u01fa\u0000\u0000\u06fc\u06fd"+
		"\u0005h\u0000\u0000\u06fd\u06fe\u0003\u0200\u0100\u0000\u06fe\u06ff\u0005"+
		"\u0207\u0000\u0000\u06ff\u0700\u0005\u01f3\u0000\u0000\u0700\u0701\u0003"+
		"\u0200\u0100\u0000\u0701\u0703\u0001\u0000\u0000\u0000\u0702\u06a7\u0001"+
		"\u0000\u0000\u0000\u0702\u06b3\u0001\u0000\u0000\u0000\u0702\u06bf\u0001"+
		"\u0000\u0000\u0000\u0702\u06cb\u0001\u0000\u0000\u0000\u0702\u06d9\u0001"+
		"\u0000\u0000\u0000\u0702\u06e7\u0001\u0000\u0000\u0000\u0702\u06f0\u0001"+
		"\u0000\u0000\u0000\u0702\u06f9\u0001\u0000\u0000\u0000\u0703O\u0001\u0000"+
		"\u0000\u0000\u0704\u0705\u0003\u0204\u0102\u0000\u0705Q\u0001\u0000\u0000"+
		"\u0000\u0706\u0707\u0003\u0204\u0102\u0000\u0707S\u0001\u0000\u0000\u0000"+
		"\u0708\u0709\u0005\u0013\u0000\u0000\u0709\u070a\u0005\u02ef\u0000\u0000"+
		"\u070a\u070b\u0005\u01fa\u0000\u0000\u070b\u070c\u0005\u023c\u0000\u0000"+
		"\u070c\u070d\u0003\u0200\u0100\u0000\u070d\u070e\u0005\u01d4\u0000\u0000"+
		"\u070e\u070f\u0005\u0247\u0000\u0000\u070f\u0710\u0003\u0200\u0100\u0000"+
		"\u0710\u071b\u0001\u0000\u0000\u0000\u0711\u0712\u0005\u0013\u0000\u0000"+
		"\u0712\u0713\u0005\u02ef\u0000\u0000\u0713\u0714\u0005\u01fa\u0000\u0000"+
		"\u0714\u0715\u0005\u023c\u0000\u0000\u0715\u0716\u0003\u0200\u0100\u0000"+
		"\u0716\u0717\u0005\u0207\u0000\u0000\u0717\u0718\u0005\u01f3\u0000\u0000"+
		"\u0718\u0719\u0003\u0200\u0100\u0000\u0719\u071b\u0001\u0000\u0000\u0000"+
		"\u071a\u0708\u0001\u0000\u0000\u0000\u071a\u0711\u0001\u0000\u0000\u0000"+
		"\u071bU\u0001\u0000\u0000\u0000\u071c\u071d\u0005\u0013\u0000\u0000\u071d"+
		"\u071e\u0005\u0254\u0000\u0000\u071e\u071f\u0003\u0200\u0100\u0000\u071f"+
		"\u0720\u0005\u0180\u0000\u0000\u0720\u0721\u0003\u0200\u0100\u0000\u0721"+
		"\u0722\u0005\u01d4\u0000\u0000\u0722\u0723\u0005\u0247\u0000\u0000\u0723"+
		"\u0724\u0003\u0200\u0100\u0000\u0724\u0730\u0001\u0000\u0000\u0000\u0725"+
		"\u0726\u0005\u0013\u0000\u0000\u0726\u0727\u0005\u0254\u0000\u0000\u0727"+
		"\u0728\u0003\u0200\u0100\u0000\u0728\u0729\u0005\u0180\u0000\u0000\u0729"+
		"\u072a\u0003\u0200\u0100\u0000\u072a\u072b\u0005\u00a7\u0000\u0000\u072b"+
		"\u072c\u0005\u0180\u0000\u0000\u072c\u072d\u0005\u00d7\u0000\u0000\u072d"+
		"\u072e\u0003\u0200\u0100\u0000\u072e\u0730\u0001\u0000\u0000\u0000\u072f"+
		"\u071c\u0001\u0000\u0000\u0000\u072f\u0725\u0001\u0000\u0000\u0000\u0730"+
		"W\u0001\u0000\u0000\u0000\u0731\u0732\u0003\u0204\u0102\u0000\u0732Y\u0001"+
		"\u0000\u0000\u0000\u0733\u0734\u0003\u0204\u0102\u0000\u0734[\u0001\u0000"+
		"\u0000\u0000\u0735\u0736\u0005\u0013\u0000\u0000\u0736\u0737\u0005\u026c"+
		"\u0000\u0000\u0737\u0738\u0005\u0145\u0000\u0000\u0738\u0739\u0005\u00e3"+
		"\u0000\u0000\u0739\u073a\u0003\u01f8\u00fc\u0000\u073a\u073b\u0005\u02bc"+
		"\u0000\u0000\u073b\u073c\u0003\u0200\u0100\u0000\u073c\u073d\u0005\u0186"+
		"\u0000\u0000\u073d\u073e\u0005\u02fe\u0000\u0000\u073e\u073f\u0003@ \u0000"+
		"\u073f\u0740\u0005\u02ff\u0000\u0000\u0740]\u0001\u0000\u0000\u0000\u0741"+
		"\u0742\u0003\u0204\u0102\u0000\u0742_\u0001\u0000\u0000\u0000\u0743\u0745"+
		"\u0005\u0016\u0000\u0000\u0744\u0746\u0005\u027e\u0000\u0000\u0745\u0744"+
		"\u0001\u0000\u0000\u0000\u0745\u0746\u0001\u0000\u0000\u0000\u0746\u0747"+
		"\u0001\u0000\u0000\u0000\u0747\u074c\u0003\u01d4\u00ea\u0000\u0748\u0749"+
		"\u0005\u02fe\u0000\u0000\u0749\u074a\u0003\u01cc\u00e6\u0000\u074a\u074b"+
		"\u0005\u02ff\u0000\u0000\u074b\u074d\u0001\u0000\u0000\u0000\u074c\u0748"+
		"\u0001\u0000\u0000\u0000\u074c\u074d\u0001\u0000\u0000\u0000\u074da\u0001"+
		"\u0000\u0000\u0000\u074e\u074f\u0003\u0204\u0102\u0000\u074fc\u0001\u0000"+
		"\u0000\u0000\u0750\u0751\u0003\u0204\u0102\u0000\u0751e\u0001\u0000\u0000"+
		"\u0000\u0752\u0753\u0003\u0204\u0102\u0000\u0753g\u0001\u0000\u0000\u0000"+
		"\u0754\u0755\u0003\u0204\u0102\u0000\u0755i\u0001\u0000\u0000\u0000\u0756"+
		"\u0757\u0003\u0204\u0102\u0000\u0757k\u0001\u0000\u0000\u0000\u0758\u0759"+
		"\u0003\u0204\u0102\u0000\u0759m\u0001\u0000\u0000\u0000\u075a\u0782\u0003"+
		"p8\u0000\u075b\u0782\u0003r9\u0000\u075c\u0782\u0003t:\u0000\u075d\u0782"+
		"\u0003z=\u0000\u075e\u0782\u0003|>\u0000\u075f\u0782\u0003~?\u0000\u0760"+
		"\u0782\u0003\u0082A\u0000\u0761\u0782\u0003\u0086C\u0000\u0762\u0782\u0003"+
		"\u008aE\u0000\u0763\u0782\u0003\u008cF\u0000\u0764\u0782\u0003\u008eG"+
		"\u0000\u0765\u0782\u0003\u0090H\u0000\u0766\u0782\u0003\u0092I\u0000\u0767"+
		"\u0782\u0003\u0094J\u0000\u0768\u0782\u0003\u0096K\u0000\u0769\u0782\u0003"+
		"\u0098L\u0000\u076a\u0782\u0003\u009cN\u0000\u076b\u0782\u0003\u009eO"+
		"\u0000\u076c\u0782\u0003\u00a0P\u0000\u076d\u0782\u0003\u00a2Q\u0000\u076e"+
		"\u0782\u0003\u00a6S\u0000\u076f\u0782\u0003\u00a8T\u0000\u0770\u0782\u0003"+
		"\u00aaU\u0000\u0771\u0782\u0003\u00acV\u0000\u0772\u0782\u0003\u00aeW"+
		"\u0000\u0773\u0782\u0003\u00b0X\u0000\u0774\u0782\u0003\u00b2Y\u0000\u0775"+
		"\u0782\u0003\u00b4Z\u0000\u0776\u0782\u0003\u00b6[\u0000\u0777\u0782\u0003"+
		"\u00b8\\\u0000\u0778\u0782\u0003\u00ba]\u0000\u0779\u0782\u0003\u00bc"+
		"^\u0000\u077a\u0782\u0003\u00be_\u0000\u077b\u0782\u0003\u00c0`\u0000"+
		"\u077c\u0782\u0003\u00c2a\u0000\u077d\u0782\u0003\u00c4b\u0000\u077e\u0782"+
		"\u0003\u00c6c\u0000\u077f\u0782\u0003\u00c8d\u0000\u0780\u0782\u0003\u00ca"+
		"e\u0000\u0781\u075a\u0001\u0000\u0000\u0000\u0781\u075b\u0001\u0000\u0000"+
		"\u0000\u0781\u075c\u0001\u0000\u0000\u0000\u0781\u075d\u0001\u0000\u0000"+
		"\u0000\u0781\u075e\u0001\u0000\u0000\u0000\u0781\u075f\u0001\u0000\u0000"+
		"\u0000\u0781\u0760\u0001\u0000\u0000\u0000\u0781\u0761\u0001\u0000\u0000"+
		"\u0000\u0781\u0762\u0001\u0000\u0000\u0000\u0781\u0763\u0001\u0000\u0000"+
		"\u0000\u0781\u0764\u0001\u0000\u0000\u0000\u0781\u0765\u0001\u0000\u0000"+
		"\u0000\u0781\u0766\u0001\u0000\u0000\u0000\u0781\u0767\u0001\u0000\u0000"+
		"\u0000\u0781\u0768\u0001\u0000\u0000\u0000\u0781\u0769\u0001\u0000\u0000"+
		"\u0000\u0781\u076a\u0001\u0000\u0000\u0000\u0781\u076b\u0001\u0000\u0000"+
		"\u0000\u0781\u076c\u0001\u0000\u0000\u0000\u0781\u076d\u0001\u0000\u0000"+
		"\u0000\u0781\u076e\u0001\u0000\u0000\u0000\u0781\u076f\u0001\u0000\u0000"+
		"\u0000\u0781\u0770\u0001\u0000\u0000\u0000\u0781\u0771\u0001\u0000\u0000"+
		"\u0000\u0781\u0772\u0001\u0000\u0000\u0000\u0781\u0773\u0001\u0000\u0000"+
		"\u0000\u0781\u0774\u0001\u0000\u0000\u0000\u0781\u0775\u0001\u0000\u0000"+
		"\u0000\u0781\u0776\u0001\u0000\u0000\u0000\u0781\u0777\u0001\u0000\u0000"+
		"\u0000\u0781\u0778\u0001\u0000\u0000\u0000\u0781\u0779\u0001\u0000\u0000"+
		"\u0000\u0781\u077a\u0001\u0000\u0000\u0000\u0781\u077b\u0001\u0000\u0000"+
		"\u0000\u0781\u077c\u0001\u0000\u0000\u0000\u0781\u077d\u0001\u0000\u0000"+
		"\u0000\u0781\u077e\u0001\u0000\u0000\u0000\u0781\u077f\u0001\u0000\u0000"+
		"\u0000\u0781\u0780\u0001\u0000\u0000\u0000\u0782o\u0001\u0000\u0000\u0000"+
		"\u0783\u0784\u0005~\u0000\u0000\u0784\u0785\u0005\b\u0000\u0000\u0785"+
		"\u0786\u0005\u0150\u0000\u0000\u0786\u0787\u0003\u01ca\u00e5\u0000\u0787"+
		"\u0788\u0005\u025c\u0000\u0000\u0788\u0789\u0005\u010c\u0000\u0000\u0789"+
		"\u078a\u0005\u00fc\u0000\u0000\u078a\u078b\u0003\u01ca\u00e5\u0000\u078b"+
		"q\u0001\u0000\u0000\u0000\u078c\u078d\u0005~\u0000\u0000\u078d\u078e\u0005"+
		"\u000e\u0000\u0000\u078e\u078f\u0003\u01ca\u00e5\u0000\u078f\u0791\u0005"+
		"\u02fe\u0000\u0000\u0790\u0792\u0007\u0006\u0000\u0000\u0791\u0790\u0001"+
		"\u0000\u0000\u0000\u0791\u0792\u0001\u0000\u0000\u0000\u0792\u0794\u0001"+
		"\u0000\u0000\u0000\u0793\u0795\u0003\u01ca\u00e5\u0000\u0794\u0793\u0001"+
		"\u0000\u0000\u0000\u0794\u0795\u0001\u0000\u0000\u0000\u0795\u0796\u0001"+
		"\u0000\u0000\u0000\u0796\u0797\u0003\u01d8\u00ec\u0000\u0797\u0798\u0005"+
		"\u02ff\u0000\u0000\u0798\u0799\u0005\u02fe\u0000\u0000\u0799\u079a\u0005"+
		"\u029b\u0000\u0000\u079a\u079b\u0005\u0317\u0000\u0000\u079b\u079c\u0003"+
		"\u0200\u0100\u0000\u079c\u079d\u0005\u02f8\u0000\u0000\u079d\u079e\u0005"+
		"\u029c\u0000\u0000\u079e\u079f\u0005\u0317\u0000\u0000\u079f\u07a4\u0003"+
		"\u0200\u0100\u0000\u07a0\u07a1\u0005\u02f8\u0000\u0000\u07a1\u07a2\u0005"+
		"\u029d\u0000\u0000\u07a2\u07a3\u0005\u0317\u0000\u0000\u07a3\u07a5\u0005"+
		"\u0305\u0000\u0000\u07a4\u07a0\u0001\u0000\u0000\u0000\u07a4\u07a5\u0001"+
		"\u0000\u0000\u0000\u07a5\u07aa\u0001\u0000\u0000\u0000\u07a6\u07a7\u0005"+
		"\u02f8\u0000\u0000\u07a7\u07a8\u0005\u029e\u0000\u0000\u07a8\u07a9\u0005"+
		"\u0317\u0000\u0000\u07a9\u07ab\u0003\u0200\u0100\u0000\u07aa\u07a6\u0001"+
		"\u0000\u0000\u0000\u07aa\u07ab\u0001\u0000\u0000\u0000\u07ab\u07ae\u0001"+
		"\u0000\u0000\u0000\u07ac\u07ad\u0005\u02f8\u0000\u0000\u07ad\u07af\u0005"+
		"\u029f\u0000\u0000\u07ae\u07ac\u0001\u0000\u0000\u0000\u07ae\u07af\u0001"+
		"\u0000\u0000\u0000\u07af\u07b4\u0001\u0000\u0000\u0000\u07b0\u07b1\u0005"+
		"\u02f8\u0000\u0000\u07b1\u07b2\u0005\u02a0\u0000\u0000\u07b2\u07b3\u0005"+
		"\u0317\u0000\u0000\u07b3\u07b5\u0003\u0200\u0100\u0000\u07b4\u07b0\u0001"+
		"\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07ba\u0001"+
		"\u0000\u0000\u0000\u07b6\u07b7\u0005\u02f8\u0000\u0000\u07b7\u07b8\u0005"+
		"\u02a1\u0000\u0000\u07b8\u07b9\u0005\u0317\u0000\u0000\u07b9\u07bb\u0003"+
		"\u0200\u0100\u0000\u07ba\u07b6\u0001\u0000\u0000\u0000\u07ba\u07bb\u0001"+
		"\u0000\u0000\u0000\u07bb\u07c0\u0001\u0000\u0000\u0000\u07bc\u07bd\u0005"+
		"\u02f8\u0000\u0000\u07bd\u07be\u0005\u02a2\u0000\u0000\u07be\u07bf\u0005"+
		"\u0317\u0000\u0000\u07bf\u07c1\u0003\u0200\u0100\u0000\u07c0\u07bc\u0001"+
		"\u0000\u0000\u0000\u07c0\u07c1\u0001\u0000\u0000\u0000\u07c1\u07c6\u0001"+
		"\u0000\u0000\u0000\u07c2\u07c3\u0005\u02f8\u0000\u0000\u07c3\u07c4\u0005"+
		"\u02a3\u0000\u0000\u07c4\u07c5\u0005\u0317\u0000\u0000\u07c5\u07c7\u0003"+
		"\u01b0\u00d8\u0000\u07c6\u07c2\u0001\u0000\u0000\u0000\u07c6\u07c7\u0001"+
		"\u0000\u0000\u0000\u07c7\u07cc\u0001\u0000\u0000\u0000\u07c8\u07c9\u0005"+
		"\u02f8\u0000\u0000\u07c9\u07ca\u0005\u02a4\u0000\u0000\u07ca\u07cb\u0005"+
		"\u0317\u0000\u0000\u07cb\u07cd\u0003\u0200\u0100\u0000\u07cc\u07c8\u0001"+
		"\u0000\u0000\u0000\u07cc\u07cd\u0001\u0000\u0000\u0000\u07cd\u07d2\u0001"+
		"\u0000\u0000\u0000\u07ce\u07cf\u0005\u02f8\u0000\u0000\u07cf\u07d0\u0005"+
		"\u02a5\u0000\u0000\u07d0\u07d1\u0005\u0317\u0000\u0000\u07d1\u07d3\u0003"+
		"\u0200\u0100\u0000\u07d2\u07ce\u0001\u0000\u0000\u0000\u07d2\u07d3\u0001"+
		"\u0000\u0000\u0000\u07d3\u07d8\u0001\u0000\u0000\u0000\u07d4\u07d5\u0005"+
		"\u02f8\u0000\u0000\u07d5\u07d6\u0005\u02a6\u0000\u0000\u07d6\u07d7\u0005"+
		"\u0317\u0000\u0000\u07d7\u07d9\u0003\u0200\u0100\u0000\u07d8\u07d4\u0001"+
		"\u0000\u0000\u0000\u07d8\u07d9\u0001\u0000\u0000\u0000\u07d9\u07de\u0001"+
		"\u0000\u0000\u0000\u07da\u07db\u0005\u02f8\u0000\u0000\u07db\u07dc\u0005"+
		"\u02a7\u0000\u0000\u07dc\u07dd\u0005\u0317\u0000\u0000\u07dd\u07df\u0005"+
		"\u0305\u0000\u0000\u07de\u07da\u0001\u0000\u0000\u0000\u07de\u07df\u0001"+
		"\u0000\u0000\u0000\u07df\u07e4\u0001\u0000\u0000\u0000\u07e0\u07e1\u0005"+
		"\u02f8\u0000\u0000\u07e1\u07e2\u0005\u02a8\u0000\u0000\u07e2\u07e3\u0005"+
		"\u0317\u0000\u0000\u07e3\u07e5\u0003\u0200\u0100\u0000\u07e4\u07e0\u0001"+
		"\u0000\u0000\u0000\u07e4\u07e5\u0001\u0000\u0000\u0000\u07e5\u07e8\u0001"+
		"\u0000\u0000\u0000\u07e6\u07e7\u0005\u02f8\u0000\u0000\u07e7\u07e9\u0005"+
		"\u02a9\u0000\u0000\u07e8\u07e6\u0001\u0000\u0000\u0000\u07e8\u07e9\u0001"+
		"\u0000\u0000\u0000\u07e9\u07ee\u0001\u0000\u0000\u0000\u07ea\u07eb\u0005"+
		"\u02f8\u0000\u0000\u07eb\u07ec\u0005\u02aa\u0000\u0000\u07ec\u07ed\u0005"+
		"\u0317\u0000\u0000\u07ed\u07ef\u0003\u0200\u0100\u0000\u07ee\u07ea\u0001"+
		"\u0000\u0000\u0000\u07ee\u07ef\u0001\u0000\u0000\u0000\u07ef\u07f4\u0001"+
		"\u0000\u0000\u0000\u07f0\u07f1\u0005\u02f8\u0000\u0000\u07f1\u07f2\u0005"+
		"\u02ab\u0000\u0000\u07f2\u07f3\u0005\u0317\u0000\u0000\u07f3\u07f5\u0003"+
		"\u0200\u0100\u0000\u07f4\u07f0\u0001\u0000\u0000\u0000\u07f4\u07f5\u0001"+
		"\u0000\u0000\u0000\u07f5\u07fa\u0001\u0000\u0000\u0000\u07f6\u07f7\u0005"+
		"\u02f8\u0000\u0000\u07f7\u07f8\u0005\u02ac\u0000\u0000\u07f8\u07f9\u0005"+
		"\u0317\u0000\u0000\u07f9\u07fb\u0007\u0007\u0000\u0000\u07fa\u07f6\u0001"+
		"\u0000\u0000\u0000\u07fa\u07fb\u0001\u0000\u0000\u0000\u07fb\u07fc\u0001"+
		"\u0000\u0000\u0000\u07fc\u07fd\u0005\u02ff\u0000\u0000\u07fd\u08a7\u0001"+
		"\u0000\u0000\u0000\u07fe\u07ff\u0005~\u0000\u0000\u07ff\u0800\u0005\u000e"+
		"\u0000\u0000\u0800\u0801\u0003\u01ca\u00e5\u0000\u0801\u0809\u0005\u02fe"+
		"\u0000\u0000\u0802\u0804\u0007\u0006\u0000\u0000\u0803\u0802\u0001\u0000"+
		"\u0000\u0000\u0803\u0804\u0001\u0000\u0000\u0000\u0804\u0806\u0001\u0000"+
		"\u0000\u0000\u0805\u0807\u0003\u01ca\u00e5\u0000\u0806\u0805\u0001\u0000"+
		"\u0000\u0000\u0806\u0807\u0001\u0000\u0000\u0000\u0807\u0808\u0001\u0000"+
		"\u0000\u0000\u0808\u080a\u0003\u01d8\u00ec\u0000\u0809\u0803\u0001\u0000"+
		"\u0000\u0000\u0809\u080a\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000"+
		"\u0000\u0000\u080b\u080c\u0005\u0188\u0000\u0000\u080c\u080e\u00056\u0000"+
		"\u0000\u080d\u080f\u0007\u0006\u0000\u0000\u080e\u080d\u0001\u0000\u0000"+
		"\u0000\u080e\u080f\u0001\u0000\u0000\u0000\u080f\u0811\u0001\u0000\u0000"+
		"\u0000\u0810\u0812\u0003\u01ca\u00e5\u0000\u0811\u0810\u0001\u0000\u0000"+
		"\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812\u0813\u0001\u0000\u0000"+
		"\u0000\u0813\u0814\u0003\u01d8\u00ec\u0000\u0814\u0815\u0005\u02ff\u0000"+
		"\u0000\u0815\u0816\u0005\u02fe\u0000\u0000\u0816\u0817\u0005\u029b\u0000"+
		"\u0000\u0817\u0818\u0005\u0317\u0000\u0000\u0818\u0819\u0003\u0200\u0100"+
		"\u0000\u0819\u081a\u0005\u02f8\u0000\u0000\u081a\u081b\u0005\u029c\u0000"+
		"\u0000\u081b\u081c\u0005\u0317\u0000\u0000\u081c\u0821\u0003\u0200\u0100"+
		"\u0000\u081d\u081e\u0005\u02f8\u0000\u0000\u081e\u081f\u0005\u029d\u0000"+
		"\u0000\u081f\u0820\u0005\u0317\u0000\u0000\u0820\u0822\u0005\u0305\u0000"+
		"\u0000\u0821\u081d\u0001\u0000\u0000\u0000\u0821\u0822\u0001\u0000\u0000"+
		"\u0000\u0822\u0827\u0001\u0000\u0000\u0000\u0823\u0824\u0005\u02f8\u0000"+
		"\u0000\u0824\u0825\u0005\u029e\u0000\u0000\u0825\u0826\u0005\u0317\u0000"+
		"\u0000\u0826\u0828\u0003\u0200\u0100\u0000\u0827\u0823\u0001\u0000\u0000"+
		"\u0000\u0827\u0828\u0001\u0000\u0000\u0000\u0828\u082b\u0001\u0000\u0000"+
		"\u0000\u0829\u082a\u0005\u02f8\u0000\u0000\u082a\u082c\u0005\u029f\u0000"+
		"\u0000\u082b\u0829\u0001\u0000\u0000\u0000\u082b\u082c\u0001\u0000\u0000"+
		"\u0000\u082c\u0831\u0001\u0000\u0000\u0000\u082d\u082e\u0005\u02f8\u0000"+
		"\u0000\u082e\u082f\u0005\u02a3\u0000\u0000\u082f\u0830\u0005\u0317\u0000"+
		"\u0000\u0830\u0832\u0003\u01b0\u00d8\u0000\u0831\u082d\u0001\u0000\u0000"+
		"\u0000\u0831\u0832\u0001\u0000\u0000\u0000\u0832\u0837\u0001\u0000\u0000"+
		"\u0000\u0833\u0834\u0005\u02f8\u0000\u0000\u0834\u0835\u0005\u02ac\u0000"+
		"\u0000\u0835\u0836\u0005\u0317\u0000\u0000\u0836\u0838\u0007\u0007\u0000"+
		"\u0000\u0837\u0833\u0001\u0000\u0000\u0000\u0837\u0838\u0001\u0000\u0000"+
		"\u0000\u0838\u083b\u0001\u0000\u0000\u0000\u0839\u083a\u0005\u02f8\u0000"+
		"\u0000\u083a\u083c\u0005\u02ad\u0000\u0000\u083b\u0839\u0001\u0000\u0000"+
		"\u0000\u083b\u083c\u0001\u0000\u0000\u0000\u083c\u083d\u0001\u0000\u0000"+
		"\u0000\u083d\u083e\u0005\u02ff\u0000\u0000\u083e\u08a7\u0001\u0000\u0000"+
		"\u0000\u083f\u0840\u0005~\u0000\u0000\u0840\u0841\u0005\u000e\u0000\u0000"+
		"\u0841\u0842\u0003\u01ca\u00e5\u0000\u0842\u0843\u0005\u02fe\u0000\u0000"+
		"\u0843\u0844\u0005\u02b1\u0000\u0000\u0844\u0845\u0005\u0317\u0000\u0000"+
		"\u0845\u0846\u0003\u01d6\u00eb\u0000\u0846\u0847\u0005\u02f8\u0000\u0000"+
		"\u0847\u0848\u0005\u029b\u0000\u0000\u0848\u0849\u0005\u0317\u0000\u0000"+
		"\u0849\u084a\u0003\u0200\u0100\u0000\u084a\u084b\u0005\u02f8\u0000\u0000"+
		"\u084b\u084c\u0005\u029c\u0000\u0000\u084c\u084d\u0005\u0317\u0000\u0000"+
		"\u084d\u0852\u0003\u0200\u0100\u0000\u084e\u084f\u0005\u02f8\u0000\u0000"+
		"\u084f\u0850\u0005\u029d\u0000\u0000\u0850\u0851\u0005\u0317\u0000\u0000"+
		"\u0851\u0853\u0005\u0305\u0000\u0000\u0852\u084e\u0001\u0000\u0000\u0000"+
		"\u0852\u0853\u0001\u0000\u0000\u0000\u0853\u0858\u0001\u0000\u0000\u0000"+
		"\u0854\u0855\u0005\u02f8\u0000\u0000\u0855\u0856\u0005\u029e\u0000\u0000"+
		"\u0856\u0857\u0005\u0317\u0000\u0000\u0857\u0859\u0003\u0200\u0100\u0000"+
		"\u0858\u0854\u0001\u0000\u0000\u0000\u0858\u0859\u0001\u0000\u0000\u0000"+
		"\u0859\u085c\u0001\u0000\u0000\u0000\u085a\u085b\u0005\u02f8\u0000\u0000"+
		"\u085b\u085d\u0005\u029f\u0000\u0000\u085c\u085a\u0001\u0000\u0000\u0000"+
		"\u085c\u085d\u0001\u0000\u0000\u0000\u085d\u0862\u0001\u0000\u0000\u0000"+
		"\u085e\u085f\u0005\u02f8\u0000\u0000\u085f\u0860\u0005\u02a0\u0000\u0000"+
		"\u0860\u0861\u0005\u0317\u0000\u0000\u0861\u0863\u0003\u0200\u0100\u0000"+
		"\u0862\u085e\u0001\u0000\u0000\u0000\u0862\u0863\u0001\u0000\u0000\u0000"+
		"\u0863\u0868\u0001\u0000\u0000\u0000\u0864\u0865\u0005\u02f8\u0000\u0000"+
		"\u0865\u0866\u0005\u02a1\u0000\u0000\u0866\u0867\u0005\u0317\u0000\u0000"+
		"\u0867\u0869\u0003\u0200\u0100\u0000\u0868\u0864\u0001\u0000\u0000\u0000"+
		"\u0868\u0869\u0001\u0000\u0000\u0000\u0869\u086e\u0001\u0000\u0000\u0000"+
		"\u086a\u086b\u0005\u02f8\u0000\u0000\u086b\u086c\u0005\u02a2\u0000\u0000"+
		"\u086c\u086d\u0005\u0317\u0000\u0000\u086d\u086f\u0003\u0200\u0100\u0000"+
		"\u086e\u086a\u0001\u0000\u0000\u0000\u086e\u086f\u0001\u0000\u0000\u0000"+
		"\u086f\u0874\u0001\u0000\u0000\u0000\u0870\u0871\u0005\u02f8\u0000\u0000"+
		"\u0871\u0872\u0005\u02a3\u0000\u0000\u0872\u0873\u0005\u0317\u0000\u0000"+
		"\u0873\u0875\u0003\u01b0\u00d8\u0000\u0874\u0870\u0001\u0000\u0000\u0000"+
		"\u0874\u0875\u0001\u0000\u0000\u0000\u0875\u087a\u0001\u0000\u0000\u0000"+
		"\u0876\u0877\u0005\u02f8\u0000\u0000\u0877\u0878\u0005\u02a4\u0000\u0000"+
		"\u0878\u0879\u0005\u0317\u0000\u0000\u0879\u087b\u0003\u0200\u0100\u0000"+
		"\u087a\u0876\u0001\u0000\u0000\u0000\u087a\u087b\u0001\u0000\u0000\u0000"+
		"\u087b\u0880\u0001\u0000\u0000\u0000\u087c\u087d\u0005\u02f8\u0000\u0000"+
		"\u087d\u087e\u0005\u02a5\u0000\u0000\u087e\u087f\u0005\u0317\u0000\u0000"+
		"\u087f\u0881\u0003\u0200\u0100\u0000\u0880\u087c\u0001\u0000\u0000\u0000"+
		"\u0880\u0881\u0001\u0000\u0000\u0000\u0881\u0886\u0001\u0000\u0000\u0000"+
		"\u0882\u0883\u0005\u02f8\u0000\u0000\u0883\u0884\u0005\u02a6\u0000\u0000"+
		"\u0884\u0885\u0005\u0317\u0000\u0000\u0885\u0887\u0003\u0200\u0100\u0000"+
		"\u0886\u0882\u0001\u0000\u0000\u0000\u0886\u0887\u0001\u0000\u0000\u0000"+
		"\u0887\u088c\u0001\u0000\u0000\u0000\u0888\u0889\u0005\u02f8\u0000\u0000"+
		"\u0889\u088a\u0005\u02a7\u0000\u0000\u088a\u088b\u0005\u0317\u0000\u0000"+
		"\u088b\u088d\u0005\u0305\u0000\u0000\u088c\u0888\u0001\u0000\u0000\u0000"+
		"\u088c\u088d\u0001\u0000\u0000\u0000\u088d\u0892\u0001\u0000\u0000\u0000"+
		"\u088e\u088f\u0005\u02f8\u0000\u0000\u088f\u0890\u0005\u02a8\u0000\u0000"+
		"\u0890\u0891\u0005\u0317\u0000\u0000\u0891\u0893\u0003\u0200\u0100\u0000"+
		"\u0892\u088e\u0001\u0000\u0000\u0000\u0892\u0893\u0001\u0000\u0000\u0000"+
		"\u0893\u0896\u0001\u0000\u0000\u0000\u0894\u0895\u0005\u02f8\u0000\u0000"+
		"\u0895\u0897\u0005\u02a9\u0000\u0000\u0896\u0894\u0001\u0000\u0000\u0000"+
		"\u0896\u0897\u0001\u0000\u0000\u0000\u0897\u089c\u0001\u0000\u0000\u0000"+
		"\u0898\u0899\u0005\u02f8\u0000\u0000\u0899\u089a\u0005\u02aa\u0000\u0000"+
		"\u089a\u089b\u0005\u0317\u0000\u0000\u089b\u089d\u0003\u0200\u0100\u0000"+
		"\u089c\u0898\u0001\u0000\u0000\u0000\u089c\u089d\u0001\u0000\u0000\u0000"+
		"\u089d\u08a2\u0001\u0000\u0000\u0000\u089e\u089f\u0005\u02f8\u0000\u0000"+
		"\u089f\u08a0\u0005\u02ab\u0000\u0000\u08a0\u08a1\u0005\u0317\u0000\u0000"+
		"\u08a1\u08a3\u0003\u0200\u0100\u0000\u08a2\u089e\u0001\u0000\u0000\u0000"+
		"\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000\u0000"+
		"\u08a4\u08a5\u0005\u02ff\u0000\u0000\u08a5\u08a7\u0001\u0000\u0000\u0000"+
		"\u08a6\u078c\u0001\u0000\u0000\u0000\u08a6\u07fe\u0001\u0000\u0000\u0000"+
		"\u08a6\u083f\u0001\u0000\u0000\u0000\u08a7s\u0001\u0000\u0000\u0000\u08a8"+
		"\u08a9\u0005~\u0000\u0000\u08a9\u08aa\u0005?\u0000\u0000\u08aa\u08ab\u0005"+
		"\u02fe\u0000\u0000\u08ab\u08ac\u0003\u01d6\u00eb\u0000\u08ac\u08ad\u0005"+
		"\u001b\u0000\u0000\u08ad\u08ae\u0003\u01d6\u00eb\u0000\u08ae\u08bc\u0005"+
		"\u02ff\u0000\u0000\u08af\u08b0\u0005\u0286\u0000\u0000\u08b0\u08b1\u0005"+
		"\u00ee\u0000\u0000\u08b1\u08b6\u0003\u0200\u0100\u0000\u08b2\u08b3\u0005"+
		"\u02fe\u0000\u0000\u08b3\u08b4\u0003\u01d8\u00ec\u0000\u08b4\u08b5\u0005"+
		"\u02ff\u0000\u0000\u08b5\u08b7\u0001\u0000\u0000\u0000\u08b6\u08b2\u0001"+
		"\u0000\u0000\u0000\u08b6\u08b7\u0001\u0000\u0000\u0000\u08b7\u08bd\u0001"+
		"\u0000\u0000\u0000\u08b8\u08b9\u0005\u0288\u0000\u0000\u08b9\u08bd\u0005"+
		"\u00ee\u0000\u0000\u08ba\u08bb\u0005\u0286\u0000\u0000\u08bb\u08bd\u0005"+
		"\u0113\u0000\u0000\u08bc\u08af\u0001\u0000\u0000\u0000\u08bc\u08b8\u0001"+
		"\u0000\u0000\u0000\u08bc\u08ba\u0001\u0000\u0000\u0000\u08bd\u08c2\u0001"+
		"\u0000\u0000\u0000\u08be\u08bf\u0005\u001b\u0000\u0000\u08bf\u08c3\u0005"+
		"\u001f\u0000\u0000\u08c0\u08c1\u0005\u001b\u0000\u0000\u08c1\u08c3\u0005"+
		"\u0108\u0000\u0000\u08c2\u08be\u0001\u0000\u0000\u0000\u08c2\u08c0\u0001"+
		"\u0000\u0000\u0000\u08c2\u08c3\u0001\u0000\u0000\u0000\u08c3u\u0001\u0000"+
		"\u0000\u0000\u08c4\u08c5\u0005\u02b3\u0000\u0000\u08c5\u08c6\u0005\u0317"+
		"\u0000\u0000\u08c6\u08d7\u0003\u01b0\u00d8\u0000\u08c7\u08c8\u0005\u02b4"+
		"\u0000\u0000\u08c8\u08c9\u0005\u0317\u0000\u0000\u08c9\u08d7\u0003\u01b0"+
		"\u00d8\u0000\u08ca\u08cb\u0005\u02b5\u0000\u0000\u08cb\u08cc\u0005\u0317"+
		"\u0000\u0000\u08cc\u08d7\u0003\u01b0\u00d8\u0000\u08cd\u08ce\u0005\u02b6"+
		"\u0000\u0000\u08ce\u08cf\u0005\u0317\u0000\u0000\u08cf\u08d7\u0003\u01b0"+
		"\u00d8\u0000\u08d0\u08d1\u0005\u02b7\u0000\u0000\u08d1\u08d2\u0005\u0317"+
		"\u0000\u0000\u08d2\u08d7\u0003\u01b0\u00d8\u0000\u08d3\u08d4\u0005\u0309"+
		"\u0000\u0000\u08d4\u08d5\u0005\u0317\u0000\u0000\u08d5\u08d7\u0003\u01b0"+
		"\u00d8\u0000\u08d6\u08c4\u0001\u0000\u0000\u0000\u08d6\u08c7\u0001\u0000"+
		"\u0000\u0000\u08d6\u08ca\u0001\u0000\u0000\u0000\u08d6\u08cd\u0001\u0000"+
		"\u0000\u0000\u08d6\u08d0\u0001\u0000\u0000\u0000\u08d6\u08d3\u0001\u0000"+
		"\u0000\u0000\u08d7w\u0001\u0000\u0000\u0000\u08d8\u08dd\u0003v;\u0000"+
		"\u08d9\u08da\u0005\u02f8\u0000\u0000\u08da\u08dc\u0003v;\u0000\u08db\u08d9"+
		"\u0001\u0000\u0000\u0000\u08dc\u08df\u0001\u0000\u0000\u0000\u08dd\u08db"+
		"\u0001\u0000\u0000\u0000\u08dd\u08de\u0001\u0000\u0000\u0000\u08dey\u0001"+
		"\u0000\u0000\u0000\u08df\u08dd\u0001\u0000\u0000\u0000\u08e0\u08e1\u0005"+
		"~\u0000\u0000\u08e1\u08e5\u0005Y\u0000\u0000\u08e2\u08e3\u0005\u02b2\u0000"+
		"\u0000\u08e3\u08e4\u0005\u016d\u0000\u0000\u08e4\u08e6\u0005\u00d3\u0000"+
		"\u0000\u08e5\u08e2\u0001\u0000\u0000\u0000\u08e5\u08e6\u0001\u0000\u0000"+
		"\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7\u08e8\u0003\u01ca\u00e5"+
		"\u0000\u08e8\u08e9\u0005\u02fe\u0000\u0000\u08e9\u08ea\u0003x<\u0000\u08ea"+
		"\u08eb\u0005\u02ff\u0000\u0000\u08eb\u08f8\u0001\u0000\u0000\u0000\u08ec"+
		"\u08ed\u0005~\u0000\u0000\u08ed\u08f1\u0005Y\u0000\u0000\u08ee\u08ef\u0005"+
		"\u02b2\u0000\u0000\u08ef\u08f0\u0005\u016d\u0000\u0000\u08f0\u08f2\u0005"+
		"\u00d3\u0000\u0000\u08f1\u08ee\u0001\u0000\u0000\u0000\u08f1\u08f2\u0001"+
		"\u0000\u0000\u0000\u08f2\u08f3\u0001\u0000\u0000\u0000\u08f3\u08f4\u0003"+
		"\u01ca\u00e5\u0000\u08f4\u08f5\u0005\u00ec\u0000\u0000\u08f5\u08f6\u0003"+
		"\u01ca\u00e5\u0000\u08f6\u08f8\u0001\u0000\u0000\u0000\u08f7\u08e0\u0001"+
		"\u0000\u0000\u0000\u08f7\u08ec\u0001\u0000\u0000\u0000\u08f8{\u0001\u0000"+
		"\u0000\u0000\u08f9\u08fb\u0005~\u0000\u0000\u08fa\u08fc\u0005\u009b\u0000"+
		"\u0000\u08fb\u08fa\u0001\u0000\u0000\u0000\u08fb\u08fc\u0001\u0000\u0000"+
		"\u0000\u08fc\u08fd\u0001\u0000\u0000\u0000\u08fd\u08fe\u0005u\u0000\u0000"+
		"\u08fe\u08ff\u0003\u0200\u0100\u0000\u08ff\u0900\u0005\u00e3\u0000\u0000"+
		"\u0900\u0901\u0005\u0308\u0000\u0000\u0901\u0902\u0005\u0247\u0000\u0000"+
		"\u0902\u0903\u0005\u0308\u0000\u0000\u0903\u0904\u0005\u00ec\u0000\u0000"+
		"\u0904\u0905\u0003\u01ca\u00e5\u0000\u0905}\u0001\u0000\u0000\u0000\u0906"+
		"\u0907\u0005~\u0000\u0000\u0907\u0908\u0005\u0092\u0000\u0000\u0908\u090a"+
		"\u0003\u01ca\u00e5\u0000\u0909\u090b\u0005\u0286\u0000\u0000\u090a\u0909"+
		"\u0001\u0000\u0000\u0000\u090a\u090b\u0001\u0000\u0000\u0000\u090b\u090f"+
		"\u0001\u0000\u0000\u0000\u090c\u090d\u0005\u0193\u0000\u0000\u090d\u090e"+
		"\u0005\u0317\u0000\u0000\u090e\u0910\u0003\u01ca\u00e5\u0000\u090f\u090c"+
		"\u0001\u0000\u0000\u0000\u090f\u0910\u0001\u0000\u0000\u0000\u0910\u0914"+
		"\u0001\u0000\u0000\u0000\u0911\u0912\u0005\u023c\u0000\u0000\u0912\u0913"+
		"\u0005\u0317\u0000\u0000\u0913\u0915\u0003\u01ca\u00e5\u0000\u0914\u0911"+
		"\u0001\u0000\u0000\u0000\u0914\u0915\u0001\u0000\u0000\u0000\u0915\u0919"+
		"\u0001\u0000\u0000\u0000\u0916\u0917\u0005\u00c4\u0000\u0000\u0917\u0918"+
		"\u0005\u0317\u0000\u0000\u0918\u091a\u0003\u01ca\u00e5\u0000\u0919\u0916"+
		"\u0001\u0000\u0000\u0000\u0919\u091a\u0001\u0000\u0000\u0000\u091a\u091e"+
		"\u0001\u0000\u0000\u0000\u091b\u091c\u0005\u02b4\u0000\u0000\u091c\u091d"+
		"\u0005\u0317\u0000\u0000\u091d\u091f\u0003\u01ca\u00e5\u0000\u091e\u091b"+
		"\u0001\u0000\u0000\u0000\u091e\u091f\u0001\u0000\u0000\u0000\u091f\u0923"+
		"\u0001\u0000\u0000\u0000\u0920\u0921\u0005\u02b5\u0000\u0000\u0921\u0922"+
		"\u0005\u0317\u0000\u0000\u0922\u0924\u0003\u01ca\u00e5\u0000\u0923\u0920"+
		"\u0001\u0000\u0000\u0000\u0923\u0924\u0001\u0000\u0000\u0000\u0924\u0928"+
		"\u0001\u0000\u0000\u0000\u0925\u0926\u0005\u023a\u0000\u0000\u0926\u0927"+
		"\u0005\u0317\u0000\u0000\u0927\u0929\u0003\u01ca\u00e5\u0000\u0928\u0925"+
		"\u0001\u0000\u0000\u0000\u0928\u0929\u0001\u0000\u0000\u0000\u0929\u092d"+
		"\u0001\u0000\u0000\u0000\u092a\u092b\u0005\u02b8\u0000\u0000\u092b\u092c"+
		"\u0005\u0317\u0000\u0000\u092c\u092e\u0003\u01ca\u00e5\u0000\u092d\u092a"+
		"\u0001\u0000\u0000\u0000\u092d\u092e\u0001\u0000\u0000\u0000\u092e\u0933"+
		"\u0001\u0000\u0000\u0000\u092f\u0930\u0005k\u0000\u0000\u0930\u0931\u0005"+
		"\u0136\u0000\u0000\u0931\u0932\u0005\u0317\u0000\u0000\u0932\u0934\u0005"+
		"\u0305\u0000\u0000\u0933\u092f\u0001\u0000\u0000\u0000\u0933\u0934\u0001"+
		"\u0000\u0000\u0000\u0934\u0938\u0001\u0000\u0000\u0000\u0935\u0936\u0005"+
		"\u02b9\u0000\u0000\u0936\u0937\u0005\u0317\u0000\u0000\u0937\u0939\u0005"+
		"\u0305\u0000\u0000\u0938\u0935\u0001\u0000\u0000\u0000\u0938\u0939\u0001"+
		"\u0000\u0000\u0000\u0939\u007f\u0001\u0000\u0000\u0000\u093a\u093b\u0005"+
		"m\u0000\u0000\u093b\u093d\u0003\u01ca\u00e5\u0000\u093c\u093a\u0001\u0000"+
		"\u0000\u0000\u093c\u093d\u0001\u0000\u0000\u0000\u093d\u0946\u0001\u0000"+
		"\u0000\u0000\u093e\u093f\u0005\u016d\u0000\u0000\u093f\u0947\u0005\u0172"+
		"\u0000\u0000\u0940\u0947\u0005\u0172\u0000\u0000\u0941\u0942\u0005N\u0000"+
		"\u0000\u0942\u0943\u0005\u02fe\u0000\u0000\u0943\u0944\u0003\u01b0\u00d8"+
		"\u0000\u0944\u0945\u0005\u02ff\u0000\u0000\u0945\u0947\u0001\u0000\u0000"+
		"\u0000\u0946\u093e\u0001\u0000\u0000\u0000\u0946\u0940\u0001\u0000\u0000"+
		"\u0000\u0946\u0941\u0001\u0000\u0000\u0000\u0947\u0081\u0001\u0000\u0000"+
		"\u0000\u0948\u0949\u0005~\u0000\u0000\u0949\u094a\u0005\u00ba\u0000\u0000"+
		"\u094a\u094c\u0003\u01ca\u00e5\u0000\u094b\u094d\u0005\u001b\u0000\u0000"+
		"\u094c\u094b\u0001\u0000\u0000\u0000\u094c\u094d\u0001\u0000\u0000\u0000"+
		"\u094d\u094e\u0001\u0000\u0000\u0000\u094e\u0956\u0003\u01d6\u00eb\u0000"+
		"\u094f\u0950\u0005X\u0000\u0000\u0950\u0955\u0003\u01ca\u00e5\u0000\u0951"+
		"\u0952\u0005\u009b\u0000\u0000\u0952\u0955\u0003\u01b0\u00d8\u0000\u0953"+
		"\u0955\u0003\u0080@\u0000\u0954\u094f\u0001\u0000\u0000\u0000\u0954\u0951"+
		"\u0001\u0000\u0000\u0000\u0954\u0953\u0001\u0000\u0000\u0000\u0955\u0958"+
		"\u0001\u0000\u0000\u0000\u0956\u0954\u0001\u0000\u0000\u0000\u0956\u0957"+
		"\u0001\u0000\u0000\u0000\u0957\u0083\u0001\u0000\u0000\u0000\u0958\u0956"+
		"\u0001\u0000\u0000\u0000\u0959\u095a\u0003\u0200\u0100\u0000\u095a\u095b"+
		"\u0005\u0109\u0000\u0000\u095b\u095c\u0005\u02fe\u0000\u0000\u095c\u0961"+
		"\u0005\u0308\u0000\u0000\u095d\u095e\u0005\u02f8\u0000\u0000\u095e\u0960"+
		"\u0005\u0308\u0000\u0000\u095f\u095d\u0001\u0000\u0000\u0000\u0960\u0963"+
		"\u0001\u0000\u0000\u0000\u0961\u095f\u0001\u0000\u0000\u0000\u0961\u0962"+
		"\u0001\u0000\u0000\u0000\u0962\u0964\u0001\u0000\u0000\u0000\u0963\u0961"+
		"\u0001\u0000\u0000\u0000\u0964\u0969\u0005\u02ff\u0000\u0000\u0965\u0966"+
		"\u0005\u0017\u0000\u0000\u0966\u0968\u0003\u0084B\u0000\u0967\u0965\u0001"+
		"\u0000\u0000\u0000\u0968\u096b\u0001\u0000\u0000\u0000\u0969\u0967\u0001"+
		"\u0000\u0000\u0000\u0969\u096a\u0001\u0000\u0000\u0000\u096a\u0085\u0001"+
		"\u0000\u0000\u0000\u096b\u0969\u0001\u0000\u0000\u0000\u096c\u096d\u0005"+
		"~\u0000\u0000\u096d\u096e\u0005\u02ba\u0000\u0000\u096e\u096f\u0005\u0254"+
		"\u0000\u0000\u096f\u0970\u0003\u0200\u0100\u0000\u0970\u0971\u0005\u0180"+
		"\u0000\u0000\u0971\u0974\u0003\u0200\u0100\u0000\u0972\u0973\u0005\u0281"+
		"\u0000\u0000\u0973\u0975\u0003\u0084B\u0000\u0974\u0972\u0001\u0000\u0000"+
		"\u0000\u0974\u0975\u0001\u0000\u0000\u0000\u0975\u0976\u0001\u0000\u0000"+
		"\u0000\u0976\u0977\u0005\u00d1\u0000\u0000\u0977\u0978\u0005\u01b8\u0000"+
		"\u0000\u0978\u0979\u0003\u0200\u0100\u0000\u0979\u097a\u0005\u02fe\u0000"+
		"\u0000\u097a\u097b\u0005\u02ff\u0000\u0000\u097b\u0087\u0001\u0000\u0000"+
		"\u0000\u097c\u097d\u0003\u01ca\u00e5\u0000\u097d\u0982\u0005\u0308\u0000"+
		"\u0000\u097e\u097f\u0005\u02f8\u0000\u0000\u097f\u0981\u0003\u0088D\u0000"+
		"\u0980\u097e\u0001\u0000\u0000\u0000\u0981\u0984\u0001\u0000\u0000\u0000"+
		"\u0982\u0980\u0001\u0000\u0000\u0000\u0982\u0983\u0001\u0000\u0000\u0000"+
		"\u0983\u0089\u0001\u0000\u0000\u0000\u0984\u0982\u0001\u0000\u0000\u0000"+
		"\u0985\u0986\u0005~\u0000\u0000\u0986\u0987\u0005\u00e5\u0000\u0000\u0987"+
		"\u0988\u0005\u0091\u0000\u0000\u0988\u0989\u0005\u02bb\u0000\u0000\u0989"+
		"\u0990\u0003\u0200\u0100\u0000\u098a\u098b\u0005\u00fc\u0000\u0000\u098b"+
		"\u098f\u0003\u0200\u0100\u0000\u098c\u098d\u0005\u0167\u0000\u0000\u098d"+
		"\u098f\u0005\u00fc\u0000\u0000\u098e\u098a\u0001\u0000\u0000\u0000\u098e"+
		"\u098c\u0001\u0000\u0000\u0000\u098f\u0992\u0001\u0000\u0000\u0000\u0990"+
		"\u098e\u0001\u0000\u0000\u0000\u0990\u0991\u0001\u0000\u0000\u0000\u0991"+
		"\u0997\u0001\u0000\u0000\u0000\u0992\u0990\u0001\u0000\u0000\u0000\u0993"+
		"\u0994\u0005\u0275\u0000\u0000\u0994\u0998\u0003\u0200\u0100\u0000\u0995"+
		"\u0996\u0005\u0167\u0000\u0000\u0996\u0998\u0005\u0275\u0000\u0000\u0997"+
		"\u0993\u0001\u0000\u0000\u0000\u0997\u0995\u0001\u0000\u0000\u0000\u0997"+
		"\u0998\u0001\u0000\u0000\u0000\u0998\u099e\u0001\u0000\u0000\u0000\u0999"+
		"\u099a\u0005\u0186\u0000\u0000\u099a\u099b\u0005\u02fe\u0000\u0000\u099b"+
		"\u099c\u0003\u0088D\u0000\u099c\u099d\u0005\u02ff\u0000\u0000\u099d\u099f"+
		"\u0001\u0000\u0000\u0000\u099e\u0999\u0001\u0000\u0000\u0000\u099e\u099f"+
		"\u0001\u0000\u0000\u0000\u099f\u008b\u0001\u0000\u0000\u0000\u09a0\u09a1"+
		"\u0005~\u0000\u0000\u09a1\u09a2\u0005\u00e5\u0000\u0000\u09a2\u09a6\u0005"+
		"\u0237\u0000\u0000\u09a3\u09a4\u0005\u02b2\u0000\u0000\u09a4\u09a5\u0005"+
		"\u016d\u0000\u0000\u09a5\u09a7\u0005\u00d3\u0000\u0000\u09a6\u09a3\u0001"+
		"\u0000\u0000\u0000\u09a6\u09a7\u0001\u0000\u0000\u0000\u09a7\u09a8\u0001"+
		"\u0000\u0000\u0000\u09a8\u09a9\u0003\u0200\u0100\u0000\u09a9\u09aa\u0005"+
		"\u02fe\u0000\u0000\u09aa\u09ab\u0003\u0200\u0100\u0000\u09ab\u09b1\u0003"+
		"\u0200\u0100\u0000\u09ac\u09ad\u0005\u0186\u0000\u0000\u09ad\u09ae\u0005"+
		"\u02fe\u0000\u0000\u09ae\u09af\u0003\u0088D\u0000\u09af\u09b0\u0005\u02ff"+
		"\u0000\u0000\u09b0\u09b2\u0001\u0000\u0000\u0000\u09b1\u09ac\u0001\u0000"+
		"\u0000\u0000\u09b1\u09b2\u0001\u0000\u0000\u0000\u09b2\u09b5\u0001\u0000"+
		"\u0000\u0000\u09b3\u09b4\u0005X\u0000\u0000\u09b4\u09b6\u0003v;\u0000"+
		"\u09b5\u09b3\u0001\u0000\u0000\u0000\u09b5\u09b6\u0001\u0000\u0000\u0000"+
		"\u09b6\u09b7\u0001\u0000\u0000\u0000\u09b7\u09ba\u0005\u02ff\u0000\u0000"+
		"\u09b8\u09b9\u0005\u010f\u0000\u0000\u09b9\u09bb\u0003\u01cc\u00e6\u0000"+
		"\u09ba\u09b8\u0001\u0000\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000\u0000"+
		"\u09bb\u09bc\u0001\u0000\u0000\u0000\u09bc\u09bd\u0005\u02bc\u0000\u0000"+
		"\u09bd\u09c3\u0003\u01ca\u00e5\u0000\u09be\u09bf\u0005\u0186\u0000\u0000"+
		"\u09bf\u09c0\u0005\u02fe\u0000\u0000\u09c0\u09c1\u0003\u0088D\u0000\u09c1"+
		"\u09c2\u0005\u02ff\u0000\u0000\u09c2\u09c4\u0001\u0000\u0000\u0000\u09c3"+
		"\u09be\u0001\u0000\u0000\u0000\u09c3\u09c4\u0001\u0000\u0000\u0000\u09c4"+
		"\u008d\u0001\u0000\u0000\u0000\u09c5\u09c8\u0005~\u0000\u0000\u09c6\u09c7"+
		"\u0005\u0187\u0000\u0000\u09c7\u09c9\u0005\u01d6\u0000\u0000\u09c8\u09c6"+
		"\u0001\u0000\u0000\u0000\u09c8\u09c9\u0001\u0000\u0000\u0000\u09c9\u09ca"+
		"\u0001\u0000\u0000\u0000\u09ca\u09cb\u0005\u00ee\u0000\u0000\u09cb\u09cc"+
		"\u0003\u01ca\u00e5\u0000\u09cc\u008f\u0001\u0000\u0000\u0000\u09cd\u09ce"+
		"\u0005~\u0000\u0000\u09ce\u09cf\u0005\u00fa\u0000\u0000\u09cf\u09f9\u0003"+
		"\u0200\u0100\u0000\u09d0\u09d2\u0005\u0286\u0000\u0000\u09d1\u09d0\u0001"+
		"\u0000\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09f5\u0001"+
		"\u0000\u0000\u0000\u09d3\u09f6\u0005\u028f\u0000\u0000\u09d4\u09f6\u0005"+
		"\u0290\u0000\u0000\u09d5\u09f6\u0005\u007f\u0000\u0000\u09d6\u09f6\u0005"+
		"\u0168\u0000\u0000\u09d7\u09f6\u0005\u0291\u0000\u0000\u09d8\u09f6\u0005"+
		"\u0292\u0000\u0000\u09d9\u09f6\u0005\u0080\u0000\u0000\u09da\u09f6\u0005"+
		"\u0169\u0000\u0000\u09db\u09f6\u0005\u0293\u0000\u0000\u09dc\u09f6\u0005"+
		"\u0294\u0000\u0000\u09dd\u09f6\u0005\u0295\u0000\u0000\u09de\u09f6\u0005"+
		"\u0296\u0000\u0000\u09df\u09e1\u0007\b\u0000\u0000\u09e0\u09df\u0001\u0000"+
		"\u0000\u0000\u09e0\u09e1\u0001\u0000\u0000\u0000\u09e1\u09e2\u0001\u0000"+
		"\u0000\u0000\u09e2\u09e3\u0005\u01a1\u0000\u0000\u09e3\u09f6\u0007\t\u0000"+
		"\u0000\u09e4\u09e5\u0005\u0273\u0000\u0000\u09e5\u09e6\u0005\u0268\u0000"+
		"\u0000\u09e6\u09f6\u0005\u0308\u0000\u0000\u09e7\u09e8\u0005\u0109\u0000"+
		"\u0000\u09e8\u09e9\u0005\u01e5\u0000\u0000\u09e9\u09f6\u0003\u01cc\u00e6"+
		"\u0000\u09ea\u09eb\u0005\u0109\u0000\u0000\u09eb\u09ec\u0005\u00fa\u0000"+
		"\u0000\u09ec\u09f6\u0003\u01cc\u00e6\u0000\u09ed\u09ee\u0005\u01e5\u0000"+
		"\u0000\u09ee\u09f6\u0003\u01cc\u00e6\u0000\u09ef\u09f0\u0005\f\u0000\u0000"+
		"\u09f0\u09f6\u0003\u01cc\u00e6\u0000\u09f1\u09f2\u0005\u026c\u0000\u0000"+
		"\u09f2\u09f6\u0003\u01cc\u00e6\u0000\u09f3\u09f4\u0005\u0234\u0000\u0000"+
		"\u09f4\u09f6\u0005\u0305\u0000\u0000\u09f5\u09d3\u0001\u0000\u0000\u0000"+
		"\u09f5\u09d4\u0001\u0000\u0000\u0000\u09f5\u09d5\u0001\u0000\u0000\u0000"+
		"\u09f5\u09d6\u0001\u0000\u0000\u0000\u09f5\u09d7\u0001\u0000\u0000\u0000"+
		"\u09f5\u09d8\u0001\u0000\u0000\u0000\u09f5\u09d9\u0001\u0000\u0000\u0000"+
		"\u09f5\u09da\u0001\u0000\u0000\u0000\u09f5\u09db\u0001\u0000\u0000\u0000"+
		"\u09f5\u09dc\u0001\u0000\u0000\u0000\u09f5\u09dd\u0001\u0000\u0000\u0000"+
		"\u09f5\u09de\u0001\u0000\u0000\u0000\u09f5\u09e0\u0001\u0000\u0000\u0000"+
		"\u09f5\u09e4\u0001\u0000\u0000\u0000\u09f5\u09e7\u0001\u0000\u0000\u0000"+
		"\u09f5\u09ea\u0001\u0000\u0000\u0000\u09f5\u09ed\u0001\u0000\u0000\u0000"+
		"\u09f5\u09ef\u0001\u0000\u0000\u0000\u09f5\u09f1\u0001\u0000\u0000\u0000"+
		"\u09f5\u09f3\u0001\u0000\u0000\u0000\u09f6\u09f7\u0001\u0000\u0000\u0000"+
		"\u09f7\u09f5\u0001\u0000\u0000\u0000\u09f7\u09f8\u0001\u0000\u0000\u0000"+
		"\u09f8\u09fa\u0001\u0000\u0000\u0000\u09f9\u09d1\u0001\u0000\u0000\u0000"+
		"\u09f9\u09fa\u0001\u0000\u0000\u0000\u09fa\u0091\u0001\u0000\u0000\u0000"+
		"\u09fb\u09fd\u0005~\u0000\u0000\u09fc\u09fe\u0005\u0263\u0000\u0000\u09fd"+
		"\u09fc\u0001\u0000\u0000\u0000\u09fd\u09fe\u0001\u0000\u0000\u0000\u09fe"+
		"\u09ff\u0001\u0000\u0000\u0000\u09ff\u0a01\u0005\u010c\u0000\u0000\u0a00"+
		"\u0a02\u0005\u02c3\u0000\u0000\u0a01\u0a00\u0001\u0000\u0000\u0000\u0a01"+
		"\u0a02\u0001\u0000\u0000\u0000\u0a02\u0a09\u0001\u0000\u0000\u0000\u0a03"+
		"\u0a04\u0005\u02b2\u0000\u0000\u0a04\u0a05\u0005\u016d\u0000\u0000\u0a05"+
		"\u0a07\u0005\u00d3\u0000\u0000\u0a06\u0a03\u0001\u0000\u0000\u0000\u0a06"+
		"\u0a07\u0001\u0000\u0000\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000\u0a08"+
		"\u0a0a\u0003\u0200\u0100\u0000\u0a09\u0a06\u0001\u0000\u0000\u0000\u0a09"+
		"\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u0a0b\u0001\u0000\u0000\u0000\u0a0b"+
		"\u0a0c\u0005\u0180\u0000\u0000\u0a0c\u0a0f\u0003\u0200\u0100\u0000\u0a0d"+
		"\u0a0e\u0005\u0271\u0000\u0000\u0a0e\u0a10\u0003\u01da\u00ed\u0000\u0a0f"+
		"\u0a0d\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0001\u0000\u0000\u0000\u0a10"+
		"\u0a13\u0001\u0000\u0000\u0000\u0a11\u0a12\u0005\u023a\u0000\u0000\u0a12"+
		"\u0a14\u0003\u0200\u0100\u0000\u0a13\u0a11\u0001\u0000\u0000\u0000\u0a13"+
		"\u0a14\u0001\u0000\u0000\u0000\u0a14\u0a17\u0001\u0000\u0000\u0000\u0a15"+
		"\u0a16\u0005\u0283\u0000\u0000\u0a16\u0a18\u0003\u01ea\u00f5\u0000\u0a17"+
		"\u0a15\u0001\u0000\u0000\u0000\u0a17\u0a18\u0001\u0000\u0000\u0000\u0a18"+
		"\u0093\u0001\u0000\u0000\u0000\u0a19\u0a1c\u0005~\u0000\u0000\u0a1a\u0a1b"+
		"\u0005\u0187\u0000\u0000\u0a1b\u0a1d\u0005\u01d6\u0000\u0000\u0a1c\u0a1a"+
		"\u0001\u0000\u0000\u0000\u0a1c\u0a1d\u0001\u0000\u0000\u0000\u0a1d\u0a1f"+
		"\u0001\u0000\u0000\u0000\u0a1e\u0a20\u0005\u01b7\u0000\u0000\u0a1f\u0a1e"+
		"\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0001\u0000\u0000\u0000\u0a20\u0a21"+
		"\u0001\u0000\u0000\u0000\u0a21\u0a22\u0005\u012b\u0000\u0000\u0a22\u0a3b"+
		"\u0003\u0200\u0100\u0000\u0a23\u0a26\u0005~\u0000\u0000\u0a24\u0a25\u0005"+
		"\u0187\u0000\u0000\u0a25\u0a27\u0005\u01d6\u0000\u0000\u0a26\u0a24\u0001"+
		"\u0000\u0000\u0000\u0a26\u0a27\u0001\u0000\u0000\u0000\u0a27\u0a29\u0001"+
		"\u0000\u0000\u0000\u0a28\u0a2a\u0005\u025b\u0000\u0000\u0a29\u0a28\u0001"+
		"\u0000\u0000\u0000\u0a29\u0a2a\u0001\u0000\u0000\u0000\u0a2a\u0a2c\u0001"+
		"\u0000\u0000\u0000\u0a2b\u0a2d\u0005\u01b7\u0000\u0000\u0a2c\u0a2b\u0001"+
		"\u0000\u0000\u0000\u0a2c\u0a2d\u0001\u0000\u0000\u0000\u0a2d\u0a2e\u0001"+
		"\u0000\u0000\u0000\u0a2e\u0a2f\u0005\u012b\u0000\u0000\u0a2f\u0a30\u0003"+
		"\u0200\u0100\u0000\u0a30\u0a31\u0005\u00fc\u0000\u0000\u0a31\u0a34\u0003"+
		"\u0200\u0100\u0000\u0a32\u0a33\u0005\u02c4\u0000\u0000\u0a33\u0a35\u0003"+
		"\u0200\u0100\u0000\u0a34\u0a32\u0001\u0000\u0000\u0000\u0a34\u0a35\u0001"+
		"\u0000\u0000\u0000\u0a35\u0a38\u0001\u0000\u0000\u0000\u0a36\u0a37\u0005"+
		"\u0275\u0000\u0000\u0a37\u0a39\u0003\u0200\u0100\u0000\u0a38\u0a36\u0001"+
		"\u0000\u0000\u0000\u0a38\u0a39\u0001\u0000\u0000\u0000\u0a39\u0a3b\u0001"+
		"\u0000\u0000\u0000\u0a3a\u0a19\u0001\u0000\u0000\u0000\u0a3a\u0a23\u0001"+
		"\u0000\u0000\u0000\u0a3b\u0095\u0001\u0000\u0000\u0000\u0a3c\u0a3d\u0005"+
		"~\u0000\u0000\u0a3d\u0a3e\u0005\u02c5\u0000\u0000\u0a3e\u0a42\u0005\u027f"+
		"\u0000\u0000\u0a3f\u0a40\u0005\u02b2\u0000\u0000\u0a40\u0a41\u0005\u016d"+
		"\u0000\u0000\u0a41\u0a43\u0005\u00d3\u0000\u0000\u0a42\u0a3f\u0001\u0000"+
		"\u0000\u0000\u0a42\u0a43\u0001\u0000\u0000\u0000\u0a43\u0a44\u0001\u0000"+
		"\u0000\u0000\u0a44\u0a49\u0003\u0200\u0100\u0000\u0a45\u0a46\u0005\u02fe"+
		"\u0000\u0000\u0a46\u0a47\u0003\u01ce\u00e7\u0000\u0a47\u0a48\u0005\u02ff"+
		"\u0000\u0000\u0a48\u0a4a\u0001\u0000\u0000\u0000\u0a49\u0a45\u0001\u0000"+
		"\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4a\u0a4c\u0001\u0000"+
		"\u0000\u0000\u0a4b\u0a4d\u0005\u0286\u0000\u0000\u0a4c\u0a4b\u0001\u0000"+
		"\u0000\u0000\u0a4c\u0a4d\u0001\u0000\u0000\u0000\u0a4d\u0a50\u0001\u0000"+
		"\u0000\u0000\u0a4e\u0a4f\u0005\u023a\u0000\u0000\u0a4f\u0a51\u0003\u0200"+
		"\u0100\u0000\u0a50\u0a4e\u0001\u0000\u0000\u0000\u0a50\u0a51\u0001\u0000"+
		"\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a53\u0005\u001b"+
		"\u0000\u0000\u0a53\u0a59\u0003\u0158\u00ac\u0000\u0a54\u0a56\u0005\u0286"+
		"\u0000\u0000\u0a55\u0a57\u0005\u0167\u0000\u0000\u0a56\u0a55\u0001\u0000"+
		"\u0000\u0000\u0a56\u0a57\u0001\u0000\u0000\u0000\u0a57\u0a58\u0001\u0000"+
		"\u0000\u0000\u0a58\u0a5a\u0005\u0091\u0000\u0000\u0a59\u0a54\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000\u0a5a\u0097\u0001\u0000"+
		"\u0000\u0000\u0a5b\u0a5c\u0005~\u0000\u0000\u0a5c\u0a5d\u0005\u0184\u0000"+
		"\u0000\u0a5d\u0a5e\u0003\u0200\u0100\u0000\u0a5e\u0a5f\u0005\u02fe\u0000"+
		"\u0000\u0a5f\u0a60\u0005\u01b8\u0000\u0000\u0a60\u0a61\u0005\u0317\u0000"+
		"\u0000\u0a61\u0a66\u0003\u0200\u0100\u0000\u0a62\u0a63\u0005\u02f8\u0000"+
		"\u0000\u0a63\u0a64\u0005\u02c6\u0000\u0000\u0a64\u0a65\u0005\u0317\u0000"+
		"\u0000\u0a65\u0a67\u0003\u01ca\u00e5\u0000\u0a66\u0a62\u0001\u0000\u0000"+
		"\u0000\u0a66\u0a67\u0001\u0000\u0000\u0000\u0a67\u0a6c\u0001\u0000\u0000"+
		"\u0000\u0a68\u0a69\u0005\u02f8\u0000\u0000\u0a69\u0a6a\u0005\u02c7\u0000"+
		"\u0000\u0a6a\u0a6b\u0005\u0317\u0000\u0000\u0a6b\u0a6d\u0003\u01ca\u00e5"+
		"\u0000\u0a6c\u0a68\u0001\u0000\u0000\u0000\u0a6c\u0a6d\u0001\u0000\u0000"+
		"\u0000\u0a6d\u0a72\u0001\u0000\u0000\u0000\u0a6e\u0a6f\u0005\u02f8\u0000"+
		"\u0000\u0a6f\u0a70\u0005\u02c8\u0000\u0000\u0a70\u0a71\u0005\u0317\u0000"+
		"\u0000\u0a71\u0a73\u0003\u01ca\u00e5\u0000\u0a72\u0a6e\u0001\u0000\u0000"+
		"\u0000\u0a72\u0a73\u0001\u0000\u0000\u0000\u0a73\u0a78\u0001\u0000\u0000"+
		"\u0000\u0a74\u0a75\u0005\u02f8\u0000\u0000\u0a75\u0a76\u0005\u02c9\u0000"+
		"\u0000\u0a76\u0a77\u0005\u0317\u0000\u0000\u0a77\u0a79\u0003\u01ca\u00e5"+
		"\u0000\u0a78\u0a74\u0001\u0000\u0000\u0000\u0a78\u0a79\u0001\u0000\u0000"+
		"\u0000\u0a79\u0a7e\u0001\u0000\u0000\u0000\u0a7a\u0a7b\u0005\u02f8\u0000"+
		"\u0000\u0a7b\u0a7c\u0005\u01da\u0000\u0000\u0a7c\u0a7d\u0005\u0317\u0000"+
		"\u0000\u0a7d\u0a7f\u0003\u01ca\u00e5\u0000\u0a7e\u0a7a\u0001\u0000\u0000"+
		"\u0000\u0a7e\u0a7f\u0001\u0000\u0000\u0000\u0a7f\u0a84\u0001\u0000\u0000"+
		"\u0000\u0a80\u0a81\u0005\u02f8\u0000\u0000\u0a81\u0a82\u0005\u0124\u0000"+
		"\u0000\u0a82\u0a83\u0005\u0317\u0000\u0000\u0a83\u0a85\u0003\u01ca\u00e5"+
		"\u0000\u0a84\u0a80\u0001\u0000\u0000\u0000\u0a84\u0a85\u0001\u0000\u0000"+
		"\u0000\u0a85\u0a88\u0001\u0000\u0000\u0000\u0a86\u0a87\u0005\u02f8\u0000"+
		"\u0000\u0a87\u0a89\u0005\u02ca\u0000\u0000\u0a88\u0a86\u0001\u0000\u0000"+
		"\u0000\u0a88\u0a89\u0001\u0000\u0000\u0000\u0a89\u0a8c\u0001\u0000\u0000"+
		"\u0000\u0a8a\u0a8b\u0005\u02f8\u0000\u0000\u0a8b\u0a8d\u0005\u02cb\u0000"+
		"\u0000\u0a8c\u0a8a\u0001\u0000\u0000\u0000\u0a8c\u0a8d\u0001\u0000\u0000"+
		"\u0000\u0a8d\u0a8e\u0001\u0000\u0000\u0000\u0a8e\u0a8f\u0005\u02ff\u0000"+
		"\u0000\u0a8f\u0099\u0001\u0000\u0000\u0000\u0a90\u0a91\u0005\u0184\u0000"+
		"\u0000\u0a91\u0a92\u0005\u0305\u0000\u0000\u0a92\u0a99\u0003\u0200\u0100"+
		"\u0000\u0a93\u0a94\u0005\u02fe\u0000\u0000\u0a94\u0a95\u0003\u0200\u0100"+
		"\u0000\u0a95\u0a96\u0005\u02f8\u0000\u0000\u0a96\u0a97\u0003\u0200\u0100"+
		"\u0000\u0a97\u0a98\u0005\u02ff\u0000\u0000\u0a98\u0a9a\u0001\u0000\u0000"+
		"\u0000\u0a99\u0a93\u0001\u0000\u0000\u0000\u0a99\u0a9a\u0001\u0000\u0000"+
		"\u0000\u0a9a\u0aaf\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0005\u00ee\u0000"+
		"\u0000\u0a9c\u0aa5\u0005\u0305\u0000\u0000\u0a9d\u0a9e\u0005\u02fe\u0000"+
		"\u0000\u0a9e\u0aa1\u0003\u0200\u0100\u0000\u0a9f\u0aa0\u0005\u02f8\u0000"+
		"\u0000\u0aa0\u0aa2\u0003\u0200\u0100\u0000\u0aa1\u0a9f\u0001\u0000\u0000"+
		"\u0000\u0aa1\u0aa2\u0001\u0000\u0000\u0000\u0aa2\u0aa3\u0001\u0000\u0000"+
		"\u0000\u0aa3\u0aa4\u0005\u02ff\u0000\u0000\u0aa4\u0aa6\u0001\u0000\u0000"+
		"\u0000\u0aa5\u0a9d\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0001\u0000\u0000"+
		"\u0000\u0aa6\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa8\u0003\u0200\u0100"+
		"\u0000\u0aa8\u0aa9\u0005\u02fe\u0000\u0000\u0aa9\u0aaa\u0003\u01d8\u00ec"+
		"\u0000\u0aaa\u0aab\u0005\u02ff\u0000\u0000\u0aab\u0aaf\u0001\u0000\u0000"+
		"\u0000\u0aac\u0aad\u0005\u0229\u0000\u0000\u0aad\u0aaf\u0003\u0200\u0100"+
		"\u0000\u0aae\u0a90\u0001\u0000\u0000\u0000\u0aae\u0a9b\u0001\u0000\u0000"+
		"\u0000\u0aae\u0aac\u0001\u0000\u0000\u0000\u0aaf\u009b\u0001\u0000\u0000"+
		"\u0000\u0ab0\u0ab1\u0005~\u0000\u0000\u0ab1\u0ab2\u0005\u0184\u0000\u0000"+
		"\u0ab2\u0ab3\u0005Q\u0000\u0000\u0ab3\u0ab5\u0003\u0200\u0100\u0000\u0ab4"+
		"\u0ab6\u0005\u009b\u0000\u0000\u0ab5\u0ab4\u0001\u0000\u0000\u0000\u0ab5"+
		"\u0ab6\u0001\u0000\u0000\u0000\u0ab6\u0ab7\u0001\u0000\u0000\u0000\u0ab7"+
		"\u0ab8\u0005\u00e3\u0000\u0000\u0ab8\u0ab9\u0005\u025c\u0000\u0000\u0ab9"+
		"\u0aba\u0003\u0200\u0100\u0000\u0aba\u0abb\u0005\u0271\u0000\u0000\u0abb"+
		"\u0abe\u0003\u01da\u00ed\u0000\u0abc\u0abd\u0005\u02cc\u0000\u0000\u0abd"+
		"\u0abf\u0003\u0200\u0100\u0000\u0abe\u0abc\u0001\u0000\u0000\u0000\u0abe"+
		"\u0abf\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0001\u0000\u0000\u0000\u0ac0"+
		"\u0ac1\u0005\u001b\u0000\u0000\u0ac1\u0ac6\u0003\u009aM\u0000\u0ac2\u0ac3"+
		"\u0005\u02f8\u0000\u0000\u0ac3\u0ac5\u0003\u009aM\u0000\u0ac4\u0ac2\u0001"+
		"\u0000\u0000\u0000\u0ac5\u0ac8\u0001\u0000\u0000\u0000\u0ac6\u0ac4\u0001"+
		"\u0000\u0000\u0000\u0ac6\u0ac7\u0001\u0000\u0000\u0000\u0ac7\u009d\u0001"+
		"\u0000\u0000\u0000\u0ac8\u0ac6\u0001\u0000\u0000\u0000\u0ac9\u0aca\u0005"+
		"~\u0000\u0000\u0aca\u0acb\u0005\u0184\u0000\u0000\u0acb\u0acc\u0005\u02cc"+
		"\u0000\u0000\u0acc\u0acd\u0003\u0200\u0100\u0000\u0acd\u0ace\u0005\u0271"+
		"\u0000\u0000\u0ace\u0acf\u0003\u01da\u00ed\u0000\u0acf\u009f\u0001\u0000"+
		"\u0000\u0000\u0ad0\u0ad1\u0005~\u0000\u0000\u0ad1\u0ad2\u0005\u02cd\u0000"+
		"\u0000\u0ad2\u0ad3\u0003\u0200\u0100\u0000\u0ad3\u0ad4\u0005\u0180\u0000"+
		"\u0000\u0ad4\u0ad7\u0003\u0200\u0100\u0000\u0ad5\u0ad6\u0005\u00e3\u0000"+
		"\u0000\u0ad6\u0ad8\u0007\n\u0000\u0000\u0ad7\u0ad5\u0001\u0000\u0000\u0000"+
		"\u0ad7\u0ad8\u0001\u0000\u0000\u0000\u0ad8\u0adb\u0001\u0000\u0000\u0000"+
		"\u0ad9\u0ada\u0005\u0247\u0000\u0000\u0ada\u0adc\u0003\u01f8\u00fc\u0000"+
		"\u0adb\u0ad9\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001\u0000\u0000\u0000"+
		"\u0adc\u0ae2\u0001\u0000\u0000\u0000\u0add\u0ade\u0005\u0271\u0000\u0000"+
		"\u0ade\u0adf\u0005\u02fe\u0000\u0000\u0adf\u0ae0\u0003\u01ea\u00f5\u0000"+
		"\u0ae0\u0ae1\u0005\u02ff\u0000\u0000\u0ae1\u0ae3\u0001\u0000\u0000\u0000"+
		"\u0ae2\u0add\u0001\u0000\u0000\u0000\u0ae2\u0ae3\u0001\u0000\u0000\u0000"+
		"\u0ae3\u0aea\u0001\u0000\u0000\u0000\u0ae4\u0ae5\u0005\u0286\u0000\u0000"+
		"\u0ae5\u0ae6\u0005N\u0000\u0000\u0ae6\u0ae7\u0005\u02fe\u0000\u0000\u0ae7"+
		"\u0ae8\u0003\u01ea\u00f5\u0000\u0ae8\u0ae9\u0005\u02ff\u0000\u0000\u0ae9"+
		"\u0aeb\u0001\u0000\u0000\u0000\u0aea\u0ae4\u0001\u0000\u0000\u0000\u0aea"+
		"\u0aeb\u0001\u0000\u0000\u0000\u0aeb\u00a1\u0001\u0000\u0000\u0000\u0aec"+
		"\u0aed\u0005~\u0000\u0000\u0aed\u0aee\u0005\u01e5\u0000\u0000\u0aee\u0b1d"+
		"\u0003\u01f8\u00fc\u0000\u0aef\u0af1\u0005\u0286\u0000\u0000\u0af0\u0aef"+
		"\u0001\u0000\u0000\u0000\u0af0\u0af1\u0001\u0000\u0000\u0000\u0af1\u0b19"+
		"\u0001\u0000\u0000\u0000\u0af2\u0b1a\u0005\u028f\u0000\u0000\u0af3\u0b1a"+
		"\u0005\u0290\u0000\u0000\u0af4\u0b1a\u0005\u007f\u0000\u0000\u0af5\u0b1a"+
		"\u0005\u0168\u0000\u0000\u0af6\u0b1a\u0005\u0291\u0000\u0000\u0af7\u0b1a"+
		"\u0005\u0292\u0000\u0000\u0af8\u0b1a\u0005\u0293\u0000\u0000\u0af9\u0b1a"+
		"\u0005\u0294\u0000\u0000\u0afa\u0b1a\u0005\u0295\u0000\u0000\u0afb\u0b1a"+
		"\u0005\u0296\u0000\u0000\u0afc\u0b1a\u0005\u0297\u0000\u0000\u0afd\u0b1a"+
		"\u0005\u0298\u0000\u0000\u0afe\u0b1a\u0005\u0299\u0000\u0000\u0aff\u0b1a"+
		"\u0005\u029a\u0000\u0000\u0b00\u0b01\u0005k\u0000\u0000\u0b01\u0b02\u0005"+
		"\u0136\u0000\u0000\u0b02\u0b1a\u0005\u0305\u0000\u0000\u0b03\u0b05\u0005"+
		"\u00c5\u0000\u0000\u0b04\u0b03\u0001\u0000\u0000\u0000\u0b04\u0b05\u0001"+
		"\u0000\u0000\u0000\u0b05\u0b06\u0001\u0000\u0000\u0000\u0b06\u0b07\u0005"+
		"\u01a1\u0000\u0000\u0b07\u0b1a\u0007\t\u0000\u0000\u0b08\u0b09\u0005\u0273"+
		"\u0000\u0000\u0b09\u0b0a\u0005\u0268\u0000\u0000\u0b0a\u0b1a\u0005\u0308"+
		"\u0000\u0000\u0b0b\u0b0c\u0005\u0109\u0000\u0000\u0b0c\u0b0d\u0005\u01e5"+
		"\u0000\u0000\u0b0d\u0b1a\u0003\u01cc\u00e6\u0000\u0b0e\u0b0f\u0005\u0109"+
		"\u0000\u0000\u0b0f\u0b10\u0005\u00fa\u0000\u0000\u0b10\u0b1a\u0003\u01cc"+
		"\u00e6\u0000\u0b11\u0b12\u0005\u01e5\u0000\u0000\u0b12\u0b1a\u0003\u01cc"+
		"\u00e6\u0000\u0b13\u0b14\u0005\f\u0000\u0000\u0b14\u0b1a\u0003\u01cc\u00e6"+
		"\u0000\u0b15\u0b16\u0005\u026c\u0000\u0000\u0b16\u0b1a\u0003\u01cc\u00e6"+
		"\u0000\u0b17\u0b18\u0005\u0234\u0000\u0000\u0b18\u0b1a\u0005\u0305\u0000"+
		"\u0000\u0b19\u0af2\u0001\u0000\u0000\u0000\u0b19\u0af3\u0001\u0000\u0000"+
		"\u0000\u0b19\u0af4\u0001\u0000\u0000\u0000\u0b19\u0af5\u0001\u0000\u0000"+
		"\u0000\u0b19\u0af6\u0001\u0000\u0000\u0000\u0b19\u0af7\u0001\u0000\u0000"+
		"\u0000\u0b19\u0af8\u0001\u0000\u0000\u0000\u0b19\u0af9\u0001\u0000\u0000"+
		"\u0000\u0b19\u0afa\u0001\u0000\u0000\u0000\u0b19\u0afb\u0001\u0000\u0000"+
		"\u0000\u0b19\u0afc\u0001\u0000\u0000\u0000\u0b19\u0afd\u0001\u0000\u0000"+
		"\u0000\u0b19\u0afe\u0001\u0000\u0000\u0000\u0b19\u0aff\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b00\u0001\u0000\u0000\u0000\u0b19\u0b04\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b08\u0001\u0000\u0000\u0000\u0b19\u0b0b\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b0e\u0001\u0000\u0000\u0000\u0b19\u0b11\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b13\u0001\u0000\u0000\u0000\u0b19\u0b15\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b17\u0001\u0000\u0000\u0000\u0b1a\u0b1b\u0001\u0000\u0000"+
		"\u0000\u0b1b\u0b19\u0001\u0000\u0000\u0000\u0b1b\u0b1c\u0001\u0000\u0000"+
		"\u0000\u0b1c\u0b1e\u0001\u0000\u0000\u0000\u0b1d\u0af0\u0001\u0000\u0000"+
		"\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000\u0b1e\u00a3\u0001\u0000\u0000"+
		"\u0000\u0b1f\u0b20\u0007\u000b\u0000\u0000\u0b20\u00a5\u0001\u0000\u0000"+
		"\u0000\u0b21\u0b24\u0005~\u0000\u0000\u0b22\u0b23\u0005\u0187\u0000\u0000"+
		"\u0b23\u0b25\u0005\u01d6\u0000\u0000\u0b24\u0b22\u0001\u0000\u0000\u0000"+
		"\u0b24\u0b25\u0001\u0000\u0000\u0000\u0b25\u0b26\u0001\u0000\u0000\u0000"+
		"\u0b26\u0b27\u0005\u01f0\u0000\u0000\u0b27\u0b28\u0003\u01ca\u00e5\u0000"+
		"\u0b28\u0b29\u0005\u001b\u0000\u0000\u0b29\u0b2a\u0005\u0180\u0000\u0000"+
		"\u0b2a\u0b2b\u0003\u00a4R\u0000\u0b2b\u0b2c\u0005\u0247\u0000\u0000\u0b2c"+
		"\u0b2f\u0003\u0200\u0100\u0000\u0b2d\u0b2e\u0005\u0283\u0000\u0000\u0b2e"+
		"\u0b30\u0003\u01ea\u00f5\u0000\u0b2f\u0b2d\u0001\u0000\u0000\u0000\u0b2f"+
		"\u0b30\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000\u0000\u0b31"+
		"\u0b33\u0005\u00b9\u0000\u0000\u0b32\u0b34\u0007\f\u0000\u0000\u0b33\u0b32"+
		"\u0001\u0000\u0000\u0000\u0b33\u0b34\u0001\u0000\u0000\u0000\u0b34\u0b37"+
		"\u0001\u0000\u0000\u0000\u0b35\u0b38\u0005\u016e\u0000\u0000\u0b36\u0b38"+
		"\u0003\u0200\u0100\u0000\u0b37\u0b35\u0001\u0000\u0000\u0000\u0b37\u0b36"+
		"\u0001\u0000\u0000\u0000\u0b38\u00a7\u0001\u0000\u0000\u0000\u0b39\u0b3a"+
		"\u0005~\u0000\u0000\u0b3a\u0b3b\u0005\u01f3\u0000\u0000\u0b3b\u0b3e\u0003"+
		"\u0200\u0100\u0000\u0b3c\u0b3d\u0005%\u0000\u0000\u0b3d\u0b3f\u0003\u01f8"+
		"\u00fc\u0000\u0b3e\u0b3c\u0001\u0000\u0000\u0000\u0b3e\u0b3f\u0001\u0000"+
		"\u0000\u0000\u0b3f\u0b41\u0001\u0000\u0000\u0000\u0b40\u0b42\u0003\u0202"+
		"\u0101\u0000\u0b41\u0b40\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000"+
		"\u0000\u0000\u0b42\u0b5c\u0001\u0000\u0000\u0000\u0b43\u0b44\u0005~\u0000"+
		"\u0000\u0b44\u0b45\u0005\u01f3\u0000\u0000\u0b45\u0b46\u0005%\u0000\u0000"+
		"\u0b46\u0b48\u0003\u01f8\u00fc\u0000\u0b47\u0b49\u0003\u0202\u0101\u0000"+
		"\u0b48\u0b47\u0001\u0000\u0000\u0000\u0b48\u0b49\u0001\u0000\u0000\u0000"+
		"\u0b49\u0b5c\u0001\u0000\u0000\u0000\u0b4a\u0b4b\u0005~\u0000\u0000\u0b4b"+
		"\u0b4c\u0005\u01f3\u0000\u0000\u0b4c\u0b4d\u0005\u02b2\u0000\u0000\u0b4d"+
		"\u0b4e\u0005\u016d\u0000\u0000\u0b4e\u0b4f\u0005\u00d3\u0000\u0000\u0b4f"+
		"\u0b52\u0003\u0200\u0100\u0000\u0b50\u0b51\u0005%\u0000\u0000\u0b51\u0b53"+
		"\u0003\u01f8\u00fc\u0000\u0b52\u0b50\u0001\u0000\u0000\u0000\u0b52\u0b53"+
		"\u0001\u0000\u0000\u0000\u0b53\u0b5c\u0001\u0000\u0000\u0000\u0b54\u0b55"+
		"\u0005~\u0000\u0000\u0b55\u0b56\u0005\u01f3\u0000\u0000\u0b56\u0b57\u0005"+
		"\u02b2\u0000\u0000\u0b57\u0b58\u0005\u016d\u0000\u0000\u0b58\u0b59\u0005"+
		"\u00d3\u0000\u0000\u0b59\u0b5a\u0005%\u0000\u0000\u0b5a\u0b5c\u0003\u01f8"+
		"\u00fc\u0000\u0b5b\u0b39\u0001\u0000\u0000\u0000\u0b5b\u0b43\u0001\u0000"+
		"\u0000\u0000\u0b5b\u0b4a\u0001\u0000\u0000\u0000\u0b5b\u0b54\u0001\u0000"+
		"\u0000\u0000\u0b5c\u00a9\u0001\u0000\u0000\u0000\u0b5d\u0b5f\u0005~\u0000"+
		"\u0000\u0b5e\u0b60\u0007\r\u0000\u0000\u0b5f\u0b5e\u0001\u0000\u0000\u0000"+
		"\u0b5f\u0b60\u0001\u0000\u0000\u0000\u0b60\u0b61\u0001\u0000\u0000\u0000"+
		"\u0b61\u0b65\u0005\u0201\u0000\u0000\u0b62\u0b63\u0005\u02b2\u0000\u0000"+
		"\u0b63\u0b64\u0005\u016d\u0000\u0000\u0b64\u0b66\u0005\u00d3\u0000\u0000"+
		"\u0b65\u0b62\u0001\u0000\u0000\u0000\u0b65\u0b66\u0001\u0000\u0000\u0000"+
		"\u0b66\u0b67\u0001\u0000\u0000\u0000\u0b67\u0b6d\u0003\u0200\u0100\u0000"+
		"\u0b68\u0b6a\u0005\u010b\u0000\u0000\u0b69\u0b6b\u00056\u0000\u0000\u0b6a"+
		"\u0b69\u0001\u0000\u0000\u0000\u0b6a\u0b6b\u0001\u0000\u0000\u0000\u0b6b"+
		"\u0b6c\u0001\u0000\u0000\u0000\u0b6c\u0b6e\u0005\u0305\u0000\u0000\u0b6d"+
		"\u0b68\u0001\u0000\u0000\u0000\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e"+
		"\u0b73\u0001\u0000\u0000\u0000\u0b6f\u0b70\u0005\u0153\u0000\u0000\u0b70"+
		"\u0b74\u0005\u0305\u0000\u0000\u0b71\u0b72\u0005\u0167\u0000\u0000\u0b72"+
		"\u0b74\u0005\u0153\u0000\u0000\u0b73\u0b6f\u0001\u0000\u0000\u0000\u0b73"+
		"\u0b71\u0001\u0000\u0000\u0000\u0b73\u0b74\u0001\u0000\u0000\u0000\u0b74"+
		"\u0b79\u0001\u0000\u0000\u0000\u0b75\u0b76\u0005\u014a\u0000\u0000\u0b76"+
		"\u0b7a\u0005\u0305\u0000\u0000\u0b77\u0b78\u0005\u0167\u0000\u0000\u0b78"+
		"\u0b7a\u0005\u014a\u0000\u0000\u0b79\u0b75\u0001\u0000\u0000\u0000\u0b79"+
		"\u0b77\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000\u0000\u0000\u0b7a"+
		"\u0b80\u0001\u0000\u0000\u0000\u0b7b\u0b7d\u0005\u0220\u0000\u0000\u0b7c"+
		"\u0b7e\u0005\u0286\u0000\u0000\u0b7d\u0b7c\u0001\u0000\u0000\u0000\u0b7d"+
		"\u0b7e\u0001\u0000\u0000\u0000\u0b7e\u0b7f\u0001\u0000\u0000\u0000\u0b7f"+
		"\u0b81\u0005\u0305\u0000\u0000\u0b80\u0b7b\u0001\u0000\u0000\u0000\u0b80"+
		"\u0b81\u0001\u0000\u0000\u0000\u0b81\u0b84\u0001\u0000\u0000\u0000\u0b82"+
		"\u0b83\u00058\u0000\u0000\u0b83\u0b85\u0005\u0305\u0000\u0000\u0b84\u0b82"+
		"\u0001\u0000\u0000\u0000\u0b84\u0b85\u0001\u0000\u0000\u0000\u0b85\u0b8a"+
		"\u0001\u0000\u0000\u0000\u0b86\u0b88\u0005\u0167\u0000\u0000\u0b87\u0b86"+
		"\u0001\u0000\u0000\u0000\u0b87\u0b88\u0001\u0000\u0000\u0000\u0b88\u0b89"+
		"\u0001\u0000\u0000\u0000\u0b89\u0b8b\u0005\u0090\u0000\u0000\u0b8a\u0b87"+
		"\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0001\u0000\u0000\u0000\u0b8b\u0b95"+
		"\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0005\u02ce\u0000\u0000\u0b8d\u0b93"+
		"\u00056\u0000\u0000\u0b8e\u0b8f\u0003\u0200\u0100\u0000\u0b8f\u0b90\u0005"+
		"\u0307\u0000\u0000\u0b90\u0b91\u0003\u0200\u0100\u0000\u0b91\u0b94\u0001"+
		"\u0000\u0000\u0000\u0b92\u0b94\u0005\u016a\u0000\u0000\u0b93\u0b8e\u0001"+
		"\u0000\u0000\u0000\u0b93\u0b92\u0001\u0000\u0000\u0000\u0b94\u0b96\u0001"+
		"\u0000\u0000\u0000\u0b95\u0b8c\u0001\u0000\u0000\u0000\u0b95\u0b96\u0001"+
		"\u0000\u0000\u0000\u0b96\u00ab\u0001\u0000\u0000\u0000\u0b97\u0b98\u0003"+
		"\u0204\u0102\u0000\u0b98\u00ad\u0001\u0000\u0000\u0000\u0b99\u0b9a\u0003"+
		"\u0204\u0102\u0000\u0b9a\u00af\u0001\u0000\u0000\u0000\u0b9b\u0b9c\u0003"+
		"\u0204\u0102\u0000\u0b9c\u00b1\u0001\u0000\u0000\u0000\u0b9d\u0b9e\u0003"+
		"\u0204\u0102\u0000\u0b9e\u00b3\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0003"+
		"\u0204\u0102\u0000\u0ba0\u00b5\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0003"+
		"\u0204\u0102\u0000\u0ba2\u00b7\u0001\u0000\u0000\u0000\u0ba3\u0ba4\u0003"+
		"\u0204\u0102\u0000\u0ba4\u00b9\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0003"+
		"\u0204\u0102\u0000\u0ba6\u00bb\u0001\u0000\u0000\u0000\u0ba7\u0ba8\u0003"+
		"\u0204\u0102\u0000\u0ba8\u00bd\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0003"+
		"\u0204\u0102\u0000\u0baa\u00bf\u0001\u0000\u0000\u0000\u0bab\u0bac\u0003"+
		"\u0204\u0102\u0000\u0bac\u00c1\u0001\u0000\u0000\u0000\u0bad\u0bae\u0003"+
		"\u0204\u0102\u0000\u0bae\u00c3\u0001\u0000\u0000\u0000\u0baf\u0bb0\u0003"+
		"\u0204\u0102\u0000\u0bb0\u00c5\u0001\u0000\u0000\u0000\u0bb1\u0bb2\u0003"+
		"\u0204\u0102\u0000\u0bb2\u00c7\u0001\u0000\u0000\u0000\u0bb3\u0bb4\u0003"+
		"\u0204\u0102\u0000\u0bb4\u00c9\u0001\u0000\u0000\u0000\u0bb5\u0bb8\u0005"+
		"~\u0000\u0000\u0bb6\u0bb7\u0005\u0187\u0000\u0000\u0bb7\u0bb9\u0005\u01d6"+
		"\u0000\u0000\u0bb8\u0bb6\u0001\u0000\u0000\u0000\u0bb8\u0bb9\u0001\u0000"+
		"\u0000\u0000\u0bb9\u0bbb\u0001\u0000\u0000\u0000\u0bba\u0bbc\u0007\r\u0000"+
		"\u0000\u0bbb\u0bba\u0001\u0000\u0000\u0000\u0bbb\u0bbc\u0001\u0000\u0000"+
		"\u0000\u0bbc\u0bbe\u0001\u0000\u0000\u0000\u0bbd\u0bbf\u0005\u01c3\u0000"+
		"\u0000\u0bbe\u0bbd\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0001\u0000\u0000"+
		"\u0000\u0bbf\u0bc0\u0001\u0000\u0000\u0000\u0bc0\u0bc1\u0005\u027f\u0000"+
		"\u0000\u0bc1\u0bc6\u0003\u01ca\u00e5\u0000\u0bc2\u0bc3\u0005\u02fe\u0000"+
		"\u0000\u0bc3\u0bc4\u0003\u01cc\u00e6\u0000\u0bc4\u0bc5\u0005\u02ff\u0000"+
		"\u0000\u0bc5\u0bc7\u0001\u0000\u0000\u0000\u0bc6\u0bc2\u0001\u0000\u0000"+
		"\u0000\u0bc6\u0bc7\u0001\u0000\u0000\u0000\u0bc7\u0bcd\u0001\u0000\u0000"+
		"\u0000\u0bc8\u0bc9\u0005\u0286\u0000\u0000\u0bc9\u0bca\u0005\u02fe\u0000"+
		"\u0000\u0bca\u0bcb\u0003\u01d2\u00e9\u0000\u0bcb\u0bcc\u0005\u02ff\u0000"+
		"\u0000\u0bcc\u0bce\u0001\u0000\u0000\u0000\u0bcd\u0bc8\u0001\u0000\u0000"+
		"\u0000\u0bcd\u0bce\u0001\u0000\u0000\u0000\u0bce\u0bcf\u0001\u0000\u0000"+
		"\u0000\u0bcf\u0bd2\u0005\u001b\u0000\u0000\u0bd0\u0bd3\u0003\u0158\u00ac"+
		"\u0000\u0bd1\u0bd3\u0003\u017c\u00be\u0000\u0bd2\u0bd0\u0001\u0000\u0000"+
		"\u0000\u0bd2\u0bd1\u0001\u0000\u0000\u0000\u0bd3\u0bda\u0001\u0000\u0000"+
		"\u0000\u0bd4\u0bd6\u0005\u0286\u0000\u0000\u0bd5\u0bd7\u0007\u000e\u0000"+
		"\u0000\u0bd6\u0bd5\u0001\u0000\u0000\u0000\u0bd6\u0bd7\u0001\u0000\u0000"+
		"\u0000\u0bd7\u0bd8\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0005N\u0000\u0000"+
		"\u0bd9\u0bdb\u0005\u0185\u0000\u0000\u0bda\u0bd4\u0001\u0000\u0000\u0000"+
		"\u0bda\u0bdb\u0001\u0000\u0000\u0000\u0bdb\u00cb\u0001\u0000\u0000\u0000"+
		"\u0bdc\u0bdd\u0003\u0204\u0102\u0000\u0bdd\u00cd\u0001\u0000\u0000\u0000"+
		"\u0bde\u0bdf\u0003\u0204\u0102\u0000\u0bdf\u00cf\u0001\u0000\u0000\u0000"+
		"\u0be0\u0be2\u0003\u015c\u00ae\u0000\u0be1\u0be0\u0001\u0000\u0000\u0000"+
		"\u0be1\u0be2\u0001\u0000\u0000\u0000\u0be2\u0be3\u0001\u0000\u0000\u0000"+
		"\u0be3\u0be4\u0005\u00a3\u0000\u0000\u0be4\u0be6\u0005\u00ec\u0000\u0000"+
		"\u0be5\u0be7\u0005\u0181\u0000\u0000\u0be6\u0be5\u0001\u0000\u0000\u0000"+
		"\u0be6\u0be7\u0001\u0000\u0000\u0000\u0be7\u0be8\u0001\u0000\u0000\u0000"+
		"\u0be8\u0bea\u0003\u01d4\u00ea\u0000\u0be9\u0beb\u0005\u02fd\u0000\u0000"+
		"\u0bea\u0be9\u0001\u0000\u0000\u0000\u0bea\u0beb\u0001\u0000\u0000\u0000"+
		"\u0beb\u0bf0\u0001\u0000\u0000\u0000\u0bec\u0bee\u0005\u001b\u0000\u0000"+
		"\u0bed\u0bec\u0001\u0000\u0000\u0000\u0bed\u0bee\u0001\u0000\u0000\u0000"+
		"\u0bee\u0bef\u0001\u0000\u0000\u0000\u0bef\u0bf1\u0003\u020a\u0105\u0000"+
		"\u0bf0\u0bed\u0001\u0000\u0000\u0000\u0bf0\u0bf1\u0001\u0000\u0000\u0000"+
		"\u0bf1\u0bf4\u0001\u0000\u0000\u0000\u0bf2\u0bf3\u0005\u0271\u0000\u0000"+
		"\u0bf3\u0bf5\u0003\u01ce\u00e7\u0000\u0bf4\u0bf2\u0001\u0000\u0000\u0000"+
		"\u0bf4\u0bf5\u0001\u0000\u0000\u0000\u0bf5\u0bfb\u0001\u0000\u0000\u0000"+
		"\u0bf6\u0bfc\u0003\u0182\u00c1\u0000\u0bf7\u0bf8\u0005\u0283\u0000\u0000"+
		"\u0bf8\u0bf9\u0005\u0085\u0000\u0000\u0bf9\u0bfa\u0005\u017b\u0000\u0000"+
		"\u0bfa\u0bfc\u0003\u0200\u0100\u0000\u0bfb\u0bf6\u0001\u0000\u0000\u0000"+
		"\u0bfb\u0bf7\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0001\u0000\u0000\u0000"+
		"\u0bfc\u0bfe\u0001\u0000\u0000\u0000\u0bfd\u0bff\u0003\u01ae\u00d7\u0000"+
		"\u0bfe\u0bfd\u0001\u0000\u0000\u0000\u0bfe\u0bff\u0001\u0000\u0000\u0000"+
		"\u0bff\u00d1\u0001\u0000\u0000\u0000\u0c00\u0c01\u0005\u00b5\u0000\u0000"+
		"\u0c01\u0c02\u0007\u000f\u0000\u0000\u0c02\u00d3\u0001\u0000\u0000\u0000"+
		"\u0c03\u0c2d\u0003\u00d6k\u0000\u0c04\u0c2d\u0003\u00d8l\u0000\u0c05\u0c2d"+
		"\u0003\u00dam\u0000\u0c06\u0c2d\u0003\u00dcn\u0000\u0c07\u0c2d\u0003\u00de"+
		"o\u0000\u0c08\u0c2d\u0003\u00e0p\u0000\u0c09\u0c2d\u0003\u00e2q\u0000"+
		"\u0c0a\u0c2d\u0003\u00e4r\u0000\u0c0b\u0c2d\u0003\u00e6s\u0000\u0c0c\u0c2d"+
		"\u0003\u00e8t\u0000\u0c0d\u0c2d\u0003\u00eau\u0000\u0c0e\u0c2d\u0003\u00ec"+
		"v\u0000\u0c0f\u0c2d\u0003\u00eew\u0000\u0c10\u0c2d\u0003\u00f0x\u0000"+
		"\u0c11\u0c2d\u0003\u00f2y\u0000\u0c12\u0c2d\u0003\u00f4z\u0000\u0c13\u0c2d"+
		"\u0003\u00f6{\u0000\u0c14\u0c2d\u0003\u00f8|\u0000\u0c15\u0c2d\u0003\u00fa"+
		"}\u0000\u0c16\u0c2d\u0003\u00fc~\u0000\u0c17\u0c2d\u0003\u00fe\u007f\u0000"+
		"\u0c18\u0c2d\u0003\u0100\u0080\u0000\u0c19\u0c2d\u0003\u0102\u0081\u0000"+
		"\u0c1a\u0c2d\u0003\u0104\u0082\u0000\u0c1b\u0c2d\u0003\u0106\u0083\u0000"+
		"\u0c1c\u0c2d\u0003\u0108\u0084\u0000\u0c1d\u0c2d\u0003\u010a\u0085\u0000"+
		"\u0c1e\u0c2d\u0003\u010c\u0086\u0000\u0c1f\u0c2d\u0003\u010e\u0087\u0000"+
		"\u0c20\u0c2d\u0003\u0110\u0088\u0000\u0c21\u0c2d\u0003\u0112\u0089\u0000"+
		"\u0c22\u0c2d\u0003\u0114\u008a\u0000\u0c23\u0c2d\u0003\u0116\u008b\u0000"+
		"\u0c24\u0c2d\u0003\u0118\u008c\u0000\u0c25\u0c2d\u0003\u011a\u008d\u0000"+
		"\u0c26\u0c2d\u0003\u011c\u008e\u0000\u0c27\u0c2d\u0003\u011e\u008f\u0000"+
		"\u0c28\u0c2d\u0003\u0120\u0090\u0000\u0c29\u0c2d\u0003\u0122\u0091\u0000"+
		"\u0c2a\u0c2d\u0003\u0124\u0092\u0000\u0c2b\u0c2d\u0003\u0126\u0093\u0000"+
		"\u0c2c\u0c03\u0001\u0000\u0000\u0000\u0c2c\u0c04\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c05\u0001\u0000\u0000\u0000\u0c2c\u0c06\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c07\u0001\u0000\u0000\u0000\u0c2c\u0c08\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c09\u0001\u0000\u0000\u0000\u0c2c\u0c0a\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c0b\u0001\u0000\u0000\u0000\u0c2c\u0c0c\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c0d\u0001\u0000\u0000\u0000\u0c2c\u0c0e\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c0f\u0001\u0000\u0000\u0000\u0c2c\u0c10\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c11\u0001\u0000\u0000\u0000\u0c2c\u0c12\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c13\u0001\u0000\u0000\u0000\u0c2c\u0c14\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c15\u0001\u0000\u0000\u0000\u0c2c\u0c16\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c17\u0001\u0000\u0000\u0000\u0c2c\u0c18\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c19\u0001\u0000\u0000\u0000\u0c2c\u0c1a\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c1b\u0001\u0000\u0000\u0000\u0c2c\u0c1c\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c1d\u0001\u0000\u0000\u0000\u0c2c\u0c1e\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c1f\u0001\u0000\u0000\u0000\u0c2c\u0c20\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c21\u0001\u0000\u0000\u0000\u0c2c\u0c22\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c23\u0001\u0000\u0000\u0000\u0c2c\u0c24\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c25\u0001\u0000\u0000\u0000\u0c2c\u0c26\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c27\u0001\u0000\u0000\u0000\u0c2c\u0c28\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c29\u0001\u0000\u0000\u0000\u0c2c\u0c2a\u0001\u0000\u0000\u0000"+
		"\u0c2c\u0c2b\u0001\u0000\u0000\u0000\u0c2d\u00d5\u0001\u0000\u0000\u0000"+
		"\u0c2e\u0c2f\u0005\u00bc\u0000\u0000\u0c2f\u0c30\u0005\b\u0000\u0000\u0c30"+
		"\u0c33\u0005\u0150\u0000\u0000\u0c31\u0c32\u0005\u02b2\u0000\u0000\u0c32"+
		"\u0c34\u0005\u00d3\u0000\u0000\u0c33\u0c31\u0001\u0000\u0000\u0000\u0c33"+
		"\u0c34\u0001\u0000\u0000\u0000\u0c34\u0c35\u0001\u0000\u0000\u0000\u0c35"+
		"\u0c37\u0003\u0200\u0100\u0000\u0c36\u0c38\u0007\u0001\u0000\u0000\u0c37"+
		"\u0c36\u0001\u0000\u0000\u0000\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38"+
		"\u00d7\u0001\u0000\u0000\u0000\u0c39\u0c3a\u0005\u00bc\u0000\u0000\u0c3a"+
		"\u0c3d\u0005\u000e\u0000\u0000\u0c3b\u0c3c\u0005\u02b2\u0000\u0000\u0c3c"+
		"\u0c3e\u0005\u00d3\u0000\u0000\u0c3d\u0c3b\u0001\u0000\u0000\u0000\u0c3d"+
		"\u0c3e\u0001\u0000\u0000\u0000\u0c3e\u0c3f\u0001\u0000\u0000\u0000\u0c3f"+
		"\u0c40\u0003\u0200\u0100\u0000\u0c40\u0c41\u0005\u02fe\u0000\u0000\u0c41"+
		"\u0c42\u0003\u01ec\u00f6\u0000\u0c42\u0c43\u0005\u02ff\u0000\u0000\u0c43"+
		"\u00d9\u0001\u0000\u0000\u0000\u0c44\u0c45\u0005\u00bc\u0000\u0000\u0c45"+
		"\u0c48\u0005?\u0000\u0000\u0c46\u0c47\u0005\u02b2\u0000\u0000\u0c47\u0c49"+
		"\u0005\u00d3\u0000\u0000\u0c48\u0c46\u0001\u0000\u0000\u0000\u0c48\u0c49"+
		"\u0001\u0000\u0000\u0000\u0c49\u0c4a\u0001\u0000\u0000\u0000\u0c4a\u0c4b"+
		"\u0005\u02fe\u0000\u0000\u0c4b\u0c4c\u0003\u01d6\u00eb\u0000\u0c4c\u0c4d"+
		"\u0005\u001b\u0000\u0000\u0c4d\u0c4e\u0003\u0200\u0100\u0000\u0c4e\u0c50"+
		"\u0005\u02ff\u0000\u0000\u0c4f\u0c51\u0007\u0001\u0000\u0000\u0c50\u0c4f"+
		"\u0001\u0000\u0000\u0000\u0c50\u0c51\u0001\u0000\u0000\u0000\u0c51\u00db"+
		"\u0001\u0000\u0000\u0000\u0c52\u0c53\u0005\u00bc\u0000\u0000\u0c53\u0c56"+
		"\u0005Y\u0000\u0000\u0c54\u0c55\u0005\u02b2\u0000\u0000\u0c55\u0c57\u0005"+
		"\u00d3\u0000\u0000\u0c56\u0c54\u0001\u0000\u0000\u0000\u0c56\u0c57\u0001"+
		"\u0000\u0000\u0000\u0c57\u0c58\u0001\u0000\u0000\u0000\u0c58\u0c5a\u0003"+
		"\u01ce\u00e7\u0000\u0c59\u0c5b\u0007\u0001\u0000\u0000\u0c5a\u0c59\u0001"+
		"\u0000\u0000\u0000\u0c5a\u0c5b\u0001\u0000\u0000\u0000\u0c5b\u00dd\u0001"+
		"\u0000\u0000\u0000\u0c5c\u0c5d\u0005\u00bc\u0000\u0000\u0c5d\u0c60\u0005"+
		"u\u0000\u0000\u0c5e\u0c5f\u0005\u02b2\u0000\u0000\u0c5f\u0c61\u0005\u00d3"+
		"\u0000\u0000\u0c60\u0c5e\u0001\u0000\u0000\u0000\u0c60\u0c61\u0001\u0000"+
		"\u0000\u0000\u0c61\u0c62\u0001\u0000\u0000\u0000\u0c62\u0c64\u0003\u0200"+
		"\u0100\u0000\u0c63\u0c65\u0007\u0001\u0000\u0000\u0c64\u0c63\u0001\u0000"+
		"\u0000\u0000\u0c64\u0c65\u0001\u0000\u0000\u0000\u0c65\u00df\u0001\u0000"+
		"\u0000\u0000\u0c66\u0c67\u0005\u00bc\u0000\u0000\u0c67\u0c6a\u0005\u0092"+
		"\u0000\u0000\u0c68\u0c69\u0005\u02b2\u0000\u0000\u0c69\u0c6b\u0005\u00d3"+
		"\u0000\u0000\u0c6a\u0c68\u0001\u0000\u0000\u0000\u0c6a\u0c6b\u0001\u0000"+
		"\u0000\u0000\u0c6b\u0c6c\u0001\u0000\u0000\u0000\u0c6c\u0c6d\u0003\u0200"+
		"\u0100\u0000\u0c6d\u00e1\u0001\u0000\u0000\u0000\u0c6e\u0c6f\u0005\u00bc"+
		"\u0000\u0000\u0c6f\u0c72\u0005\u00ba\u0000\u0000\u0c70\u0c71\u0005\u02b2"+
		"\u0000\u0000\u0c71\u0c73\u0005\u00d3\u0000\u0000\u0c72\u0c70\u0001\u0000"+
		"\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000\u0c73\u0c74\u0001\u0000"+
		"\u0000\u0000\u0c74\u0c76\u0003\u01ce\u00e7\u0000\u0c75\u0c77\u0007\u0001"+
		"\u0000\u0000\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76\u0c77\u0001\u0000"+
		"\u0000\u0000\u0c77\u00e3\u0001\u0000\u0000\u0000\u0c78\u0c79\u0005\u00bc"+
		"\u0000\u0000\u0c79\u0c7a\u0005\u02ba\u0000\u0000\u0c7a\u0c7d\u0005\u0254"+
		"\u0000\u0000\u0c7b\u0c7c\u0005\u02b2\u0000\u0000\u0c7c\u0c7e\u0005\u00d3"+
		"\u0000\u0000\u0c7d\u0c7b\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0001\u0000"+
		"\u0000\u0000\u0c7e\u0c7f\u0001\u0000\u0000\u0000\u0c7f\u0c81\u0003\u0200"+
		"\u0100\u0000\u0c80\u0c82\u0007\u0001\u0000\u0000\u0c81\u0c80\u0001\u0000"+
		"\u0000\u0000\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u00e5\u0001\u0000"+
		"\u0000\u0000\u0c83\u0c84\u0005\u00bc\u0000\u0000\u0c84\u0c87\u0005\u00d7"+
		"\u0000\u0000\u0c85\u0c86\u0005\u02b2\u0000\u0000\u0c86\u0c88\u0005\u00d3"+
		"\u0000\u0000\u0c87\u0c85\u0001\u0000\u0000\u0000\u0c87\u0c88\u0001\u0000"+
		"\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000\u0000\u0c89\u0c8b\u0003\u01ce"+
		"\u00e7\u0000\u0c8a\u0c8c\u0007\u0001\u0000\u0000\u0c8b\u0c8a\u0001\u0000"+
		"\u0000\u0000\u0c8b\u0c8c\u0001\u0000\u0000\u0000\u0c8c\u00e7\u0001\u0000"+
		"\u0000\u0000\u0c8d\u0c8e\u0005\u00bc\u0000\u0000\u0c8e\u0c8f\u0005\u00e5"+
		"\u0000\u0000\u0c8f\u0c90\u0005\u0091\u0000\u0000\u0c90\u0c93\u0005\u02bb"+
		"\u0000\u0000\u0c91\u0c92\u0005\u02b2\u0000\u0000\u0c92\u0c94\u0005\u00d3"+
		"\u0000\u0000\u0c93\u0c91\u0001\u0000\u0000\u0000\u0c93\u0c94\u0001\u0000"+
		"\u0000\u0000\u0c94\u0c95\u0001\u0000\u0000\u0000\u0c95\u0c97\u0003\u01ce"+
		"\u00e7\u0000\u0c96\u0c98\u0007\u0001\u0000\u0000\u0c97\u0c96\u0001\u0000"+
		"\u0000\u0000\u0c97\u0c98\u0001\u0000\u0000\u0000\u0c98\u00e9\u0001\u0000"+
		"\u0000\u0000\u0c99\u0c9a\u0005\u00bc\u0000\u0000\u0c9a\u0c9b\u0005\u00e5"+
		"\u0000\u0000\u0c9b\u0c9e\u0005\u0237\u0000\u0000\u0c9c\u0c9d\u0005\u02b2"+
		"\u0000\u0000\u0c9d\u0c9f\u0005\u00d3\u0000\u0000\u0c9e\u0c9c\u0001\u0000"+
		"\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000\u0000\u0c9f\u0ca0\u0001\u0000"+
		"\u0000\u0000\u0ca0\u0ca2\u0003\u01ce\u00e7\u0000\u0ca1\u0ca3\u0007\u0001"+
		"\u0000\u0000\u0ca2\u0ca1\u0001\u0000\u0000\u0000\u0ca2\u0ca3\u0001\u0000"+
		"\u0000\u0000\u0ca3\u00eb\u0001\u0000\u0000\u0000\u0ca4\u0ca5\u0005\u00bc"+
		"\u0000\u0000\u0ca5\u0ca8\u0005\u00ee\u0000\u0000\u0ca6\u0ca7\u0005\u02b2"+
		"\u0000\u0000\u0ca7\u0ca9\u0005\u00d3\u0000\u0000\u0ca8\u0ca6\u0001\u0000"+
		"\u0000\u0000\u0ca8\u0ca9\u0001\u0000\u0000\u0000\u0ca9\u0caa\u0001\u0000"+
		"\u0000\u0000\u0caa\u0cac\u0003\u01c0\u00e0\u0000\u0cab\u0cad\u0007\u0001"+
		"\u0000\u0000\u0cac\u0cab\u0001\u0000\u0000\u0000\u0cac\u0cad\u0001\u0000"+
		"\u0000\u0000\u0cad\u00ed\u0001\u0000\u0000\u0000\u0cae\u0caf\u0005\u00bc"+
		"\u0000\u0000\u0caf\u0cb2\u0005\u00fa\u0000\u0000\u0cb0\u0cb1\u0005\u02b2"+
		"\u0000\u0000\u0cb1\u0cb3\u0005\u00d3\u0000\u0000\u0cb2\u0cb0\u0001\u0000"+
		"\u0000\u0000\u0cb2\u0cb3\u0001\u0000\u0000\u0000\u0cb3\u0cb4\u0001\u0000"+
		"\u0000\u0000\u0cb4\u0cb5\u0003\u01ce\u00e7\u0000\u0cb5\u00ef\u0001\u0000"+
		"\u0000\u0000\u0cb6\u0cb7\u0005\u00bc\u0000\u0000\u0cb7\u0cb9\u0005\u010c"+
		"\u0000\u0000\u0cb8\u0cba\u0005\u02c3\u0000\u0000\u0cb9\u0cb8\u0001\u0000"+
		"\u0000\u0000\u0cb9\u0cba\u0001\u0000\u0000\u0000\u0cba\u0cbd\u0001\u0000"+
		"\u0000\u0000\u0cbb\u0cbc\u0005\u02b2\u0000\u0000\u0cbc\u0cbe\u0005\u00d3"+
		"\u0000\u0000\u0cbd\u0cbb\u0001\u0000\u0000\u0000\u0cbd\u0cbe\u0001\u0000"+
		"\u0000\u0000\u0cbe\u0cbf\u0001\u0000\u0000\u0000\u0cbf\u0cc1\u0003\u01cc"+
		"\u00e6\u0000\u0cc0\u0cc2\u0007\u0001\u0000\u0000\u0cc1\u0cc0\u0001\u0000"+
		"\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u00f1\u0001\u0000"+
		"\u0000\u0000\u0cc3\u0cc5\u0005\u00bc\u0000\u0000\u0cc4\u0cc6\u0005\u01b7"+
		"\u0000\u0000\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0001\u0000"+
		"\u0000\u0000\u0cc6\u0cc7\u0001\u0000\u0000\u0000\u0cc7\u0cca\u0005\u012b"+
		"\u0000\u0000\u0cc8\u0cc9\u0005\u02b2\u0000\u0000\u0cc9\u0ccb\u0005\u00d3"+
		"\u0000\u0000\u0cca\u0cc8\u0001\u0000\u0000\u0000\u0cca\u0ccb\u0001\u0000"+
		"\u0000\u0000\u0ccb\u0ccc\u0001\u0000\u0000\u0000\u0ccc\u0cce\u0003\u0200"+
		"\u0100\u0000\u0ccd\u0ccf\u0007\u0001\u0000\u0000\u0cce\u0ccd\u0001\u0000"+
		"\u0000\u0000\u0cce\u0ccf\u0001\u0000\u0000\u0000\u0ccf\u00f3\u0001\u0000"+
		"\u0000\u0000\u0cd0\u0cd1\u0005\u00bc\u0000\u0000\u0cd1\u0cd2\u0005\u02c5"+
		"\u0000\u0000\u0cd2\u0cd5\u0005\u027f\u0000\u0000\u0cd3\u0cd4\u0005\u02b2"+
		"\u0000\u0000\u0cd4\u0cd6\u0005\u00d3\u0000\u0000\u0cd5\u0cd3\u0001\u0000"+
		"\u0000\u0000\u0cd5\u0cd6\u0001\u0000\u0000\u0000\u0cd6\u0cd7\u0001\u0000"+
		"\u0000\u0000\u0cd7\u0cd9\u0003\u01ce\u00e7\u0000\u0cd8\u0cda\u0007\u0001"+
		"\u0000\u0000\u0cd9\u0cd8\u0001\u0000\u0000\u0000\u0cd9\u0cda\u0001\u0000"+
		"\u0000\u0000\u0cda\u00f5\u0001\u0000\u0000\u0000\u0cdb\u0cdc\u0003\u0204"+
		"\u0102\u0000\u0cdc\u00f7\u0001\u0000\u0000\u0000\u0cdd\u0cde\u0005\u00bc"+
		"\u0000\u0000\u0cde\u0cdf\u0005\u0184\u0000\u0000\u0cdf\u0ce2\u0005Q\u0000"+
		"\u0000\u0ce0\u0ce1\u0005\u02b2\u0000\u0000\u0ce1\u0ce3\u0005\u00d3\u0000"+
		"\u0000\u0ce2\u0ce0\u0001\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000"+
		"\u0000\u0ce3\u0ce4\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0003\u0200\u0100"+
		"\u0000\u0ce5\u0ce6\u0005\u0271\u0000\u0000\u0ce6\u0ce8\u0003\u01da\u00ed"+
		"\u0000\u0ce7\u0ce9\u0007\u0001\u0000\u0000\u0ce8\u0ce7\u0001\u0000\u0000"+
		"\u0000\u0ce8\u0ce9\u0001\u0000\u0000\u0000\u0ce9\u00f9\u0001\u0000\u0000"+
		"\u0000\u0cea\u0ceb\u0005\u00bc\u0000\u0000\u0ceb\u0cec\u0005\u0184\u0000"+
		"\u0000\u0cec\u0cef\u0005\u02cc\u0000\u0000\u0ced\u0cee\u0005\u02b2\u0000"+
		"\u0000\u0cee\u0cf0\u0005\u00d3\u0000\u0000\u0cef\u0ced\u0001\u0000\u0000"+
		"\u0000\u0cef\u0cf0\u0001\u0000\u0000\u0000\u0cf0\u0cf1\u0001\u0000\u0000"+
		"\u0000\u0cf1\u0cf2\u0003\u0200\u0100\u0000\u0cf2\u0cf3\u0005\u0271\u0000"+
		"\u0000\u0cf3\u0cf5\u0003\u01da\u00ed\u0000\u0cf4\u0cf6\u0007\u0001\u0000"+
		"\u0000\u0cf5\u0cf4\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0001\u0000\u0000"+
		"\u0000\u0cf6\u00fb\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0005\u00bc\u0000"+
		"\u0000\u0cf8\u0cf9\u0005\u02ce\u0000\u0000\u0cf9\u0cfa\u00056\u0000\u0000"+
		"\u0cfa\u0cfc\u0003\u01fa\u00fd\u0000\u0cfb\u0cfd\u0007\u0001\u0000\u0000"+
		"\u0cfc\u0cfb\u0001\u0000\u0000\u0000\u0cfc\u0cfd\u0001\u0000\u0000\u0000"+
		"\u0cfd\u00fd\u0001\u0000\u0000\u0000\u0cfe\u0cff\u0005\u00bc\u0000\u0000"+
		"\u0cff\u0d02\u0005\u02cd\u0000\u0000\u0d00\u0d01\u0005\u02b2\u0000\u0000"+
		"\u0d01\u0d03\u0005\u00d3\u0000\u0000\u0d02\u0d00\u0001\u0000\u0000\u0000"+
		"\u0d02\u0d03\u0001\u0000\u0000\u0000\u0d03\u0d04\u0001\u0000\u0000\u0000"+
		"\u0d04\u0d05\u0003\u0200\u0100\u0000\u0d05\u0d06\u0005\u0180\u0000\u0000"+
		"\u0d06\u0d08\u0003\u0200\u0100\u0000\u0d07\u0d09\u0007\u0001\u0000\u0000"+
		"\u0d08\u0d07\u0001\u0000\u0000\u0000\u0d08\u0d09\u0001\u0000\u0000\u0000"+
		"\u0d09\u00ff\u0001\u0000\u0000\u0000\u0d0a\u0d0b\u0005\u00bc\u0000\u0000"+
		"\u0d0b\u0d0e\u0005\u01ba\u0000\u0000\u0d0c\u0d0d\u0005\u02b2\u0000\u0000"+
		"\u0d0d\u0d0f\u0005\u00d3\u0000\u0000\u0d0e\u0d0c\u0001\u0000\u0000\u0000"+
		"\u0d0e\u0d0f\u0001\u0000\u0000\u0000\u0d0f\u0d10\u0001\u0000\u0000\u0000"+
		"\u0d10\u0d12\u0003\u01ce\u00e7\u0000\u0d11\u0d13\u0007\u0001\u0000\u0000"+
		"\u0d12\u0d11\u0001\u0000\u0000\u0000\u0d12\u0d13\u0001\u0000\u0000\u0000"+
		"\u0d13\u0101\u0001\u0000\u0000\u0000\u0d14\u0d15\u0005\u00bc\u0000\u0000"+
		"\u0d15\u0d18\u0005\u01e5\u0000\u0000\u0d16\u0d17\u0005\u02b2\u0000\u0000"+
		"\u0d17\u0d19\u0005\u00d3\u0000\u0000\u0d18\u0d16\u0001\u0000\u0000\u0000"+
		"\u0d18\u0d19\u0001\u0000\u0000\u0000\u0d19\u0d1a\u0001\u0000\u0000\u0000"+
		"\u0d1a\u0d1b\u0003\u01ce\u00e7\u0000\u0d1b\u0103\u0001\u0000\u0000\u0000"+
		"\u0d1c\u0d1d\u0005\u00bc\u0000\u0000\u0d1d\u0d20\u0005\u01f0\u0000\u0000"+
		"\u0d1e\u0d1f\u0005\u02b2\u0000\u0000\u0d1f\u0d21\u0005\u00d3\u0000\u0000"+
		"\u0d20\u0d1e\u0001\u0000\u0000\u0000\u0d20\u0d21\u0001\u0000\u0000\u0000"+
		"\u0d21\u0d22\u0001\u0000\u0000\u0000\u0d22\u0d23\u0003\u01ca\u00e5\u0000"+
		"\u0d23\u0d24\u0005\u0180\u0000\u0000\u0d24\u0d26\u0003\u0200\u0100\u0000"+
		"\u0d25\u0d27\u0007\u0001\u0000\u0000\u0d26\u0d25\u0001\u0000\u0000\u0000"+
		"\u0d26\u0d27\u0001\u0000\u0000\u0000\u0d27\u0105\u0001\u0000\u0000\u0000"+
		"\u0d28\u0d29\u0005\u00bc\u0000\u0000\u0d29\u0d2c\u0005\u01f3\u0000\u0000"+
		"\u0d2a\u0d2b\u0005\u02b2\u0000\u0000\u0d2b\u0d2d\u0005\u00d3\u0000\u0000"+
		"\u0d2c\u0d2a\u0001\u0000\u0000\u0000\u0d2c\u0d2d\u0001\u0000\u0000\u0000"+
		"\u0d2d\u0d2e\u0001\u0000\u0000\u0000\u0d2e\u0d30\u0003\u01ce\u00e7\u0000"+
		"\u0d2f\u0d31\u0007\u0001\u0000\u0000\u0d30\u0d2f\u0001\u0000\u0000\u0000"+
		"\u0d30\u0d31\u0001\u0000\u0000\u0000\u0d31\u0107\u0001\u0000\u0000\u0000"+
		"\u0d32\u0d33\u0005\u00bc\u0000\u0000\u0d33\u0d36\u0005\u0201\u0000\u0000"+
		"\u0d34\u0d35\u0005\u02b2\u0000\u0000\u0d35\u0d37\u0005\u00d3\u0000\u0000"+
		"\u0d36\u0d34\u0001\u0000\u0000\u0000\u0d36\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d37\u0d38\u0001\u0000\u0000\u0000\u0d38\u0d3a\u0003\u01ce\u00e7\u0000"+
		"\u0d39\u0d3b\u0007\u0001\u0000\u0000\u0d3a\u0d39\u0001\u0000\u0000\u0000"+
		"\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b\u0109\u0001\u0000\u0000\u0000"+
		"\u0d3c\u0d3d\u0005\u00bc\u0000\u0000\u0d3d\u0d40\u0005\u02bc\u0000\u0000"+
		"\u0d3e\u0d3f\u0005\u02b2\u0000\u0000\u0d3f\u0d41\u0005\u00d3\u0000\u0000"+
		"\u0d40\u0d3e\u0001\u0000\u0000\u0000\u0d40\u0d41\u0001\u0000\u0000\u0000"+
		"\u0d41\u0d42\u0001\u0000\u0000\u0000\u0d42\u0d44\u0003\u01ce\u00e7\u0000"+
		"\u0d43\u0d45\u0007\u0001\u0000\u0000\u0d44\u0d43\u0001\u0000\u0000\u0000"+
		"\u0d44\u0d45\u0001\u0000\u0000\u0000\u0d45\u010b\u0001\u0000\u0000\u0000"+
		"\u0d46\u0d47\u0005\u00bc\u0000\u0000\u0d47\u0d4a\u0005\u0224\u0000\u0000"+
		"\u0d48\u0d49\u0005\u02b2\u0000\u0000\u0d49\u0d4b\u0005\u00d3\u0000\u0000"+
		"\u0d4a\u0d48\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0001\u0000\u0000\u0000"+
		"\u0d4b\u0d4c\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0003\u01ce\u00e7\u0000"+
		"\u0d4d\u010d\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0005\u00bc\u0000\u0000"+
		"\u0d4f\u0d52\u0005\u0230\u0000\u0000\u0d50\u0d51\u0005\u02b2\u0000\u0000"+
		"\u0d51\u0d53\u0005\u00d3\u0000\u0000\u0d52\u0d50\u0001\u0000\u0000\u0000"+
		"\u0d52\u0d53\u0001\u0000\u0000\u0000\u0d53\u0d54\u0001\u0000\u0000\u0000"+
		"\u0d54\u0d56\u0003\u0200\u0100\u0000\u0d55\u0d57\u0007\u0001\u0000\u0000"+
		"\u0d56\u0d55\u0001\u0000\u0000\u0000\u0d56\u0d57\u0001\u0000\u0000\u0000"+
		"\u0d57\u010f\u0001\u0000\u0000\u0000\u0d58\u0d59\u0005\u00bc\u0000\u0000"+
		"\u0d59\u0d5c\u0005\u0237\u0000\u0000\u0d5a\u0d5b\u0005\u02b2\u0000\u0000"+
		"\u0d5b\u0d5d\u0005\u00d3\u0000\u0000\u0d5c\u0d5a\u0001\u0000\u0000\u0000"+
		"\u0d5c\u0d5d\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0001\u0000\u0000\u0000"+
		"\u0d5e\u0d60\u0003\u01ce\u00e7\u0000\u0d5f\u0d61\u0007\u0001\u0000\u0000"+
		"\u0d60\u0d5f\u0001\u0000\u0000\u0000\u0d60\u0d61\u0001\u0000\u0000\u0000"+
		"\u0d61\u0111\u0001\u0000\u0000\u0000\u0d62\u0d63\u0005\u00bc\u0000\u0000"+
		"\u0d63\u0d66\u0005\u023a\u0000\u0000\u0d64\u0d65\u0005\u02b2\u0000\u0000"+
		"\u0d65\u0d67\u0005\u00d3\u0000\u0000\u0d66\u0d64\u0001\u0000\u0000\u0000"+
		"\u0d66\u0d67\u0001\u0000\u0000\u0000\u0d67\u0d68\u0001\u0000\u0000\u0000"+
		"\u0d68\u0d69\u0003\u0200\u0100\u0000\u0d69\u0113\u0001\u0000\u0000\u0000"+
		"\u0d6a\u0d6b\u0005\u00bc\u0000\u0000\u0d6b\u0d6c\u0005\u02ef\u0000\u0000"+
		"\u0d6c\u0d6d\u0005\u01fa\u0000\u0000\u0d6d\u0d70\u0005h\u0000\u0000\u0d6e"+
		"\u0d6f\u0005\u02b2\u0000\u0000\u0d6f\u0d71\u0005\u00d3\u0000\u0000\u0d70"+
		"\u0d6e\u0001\u0000\u0000\u0000\u0d70\u0d71\u0001\u0000\u0000\u0000\u0d71"+
		"\u0d72\u0001\u0000\u0000\u0000\u0d72\u0d74\u0003\u0200\u0100\u0000\u0d73"+
		"\u0d75\u0007\u0001\u0000\u0000\u0d74\u0d73\u0001\u0000\u0000\u0000\u0d74"+
		"\u0d75\u0001\u0000\u0000\u0000\u0d75\u0115\u0001\u0000\u0000\u0000\u0d76"+
		"\u0d77\u0005\u00bc\u0000\u0000\u0d77\u0d78\u0005\u02ef\u0000\u0000\u0d78"+
		"\u0d79\u0005\u01fa\u0000\u0000\u0d79\u0d7c\u0005\u00b2\u0000\u0000\u0d7a"+
		"\u0d7b\u0005\u02b2\u0000\u0000\u0d7b\u0d7d\u0005\u00d3\u0000\u0000\u0d7c"+
		"\u0d7a\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0001\u0000\u0000\u0000\u0d7d"+
		"\u0d7e\u0001\u0000\u0000\u0000\u0d7e\u0d80\u0003\u0200\u0100\u0000\u0d7f"+
		"\u0d81\u0007\u0001\u0000\u0000\u0d80\u0d7f\u0001\u0000\u0000\u0000\u0d80"+
		"\u0d81\u0001\u0000\u0000\u0000\u0d81\u0117\u0001\u0000\u0000\u0000\u0d82"+
		"\u0d83\u0005\u00bc\u0000\u0000\u0d83\u0d84\u0005\u02ef\u0000\u0000\u0d84"+
		"\u0d85\u0005\u01fa\u0000\u0000\u0d85\u0d88\u0005\u019d\u0000\u0000\u0d86"+
		"\u0d87\u0005\u02b2\u0000\u0000\u0d87\u0d89\u0005\u00d3\u0000\u0000\u0d88"+
		"\u0d86\u0001\u0000\u0000\u0000\u0d88\u0d89\u0001\u0000\u0000\u0000\u0d89"+
		"\u0d8a\u0001\u0000\u0000\u0000\u0d8a\u0d8c\u0003\u0200\u0100\u0000\u0d8b"+
		"\u0d8d\u0007\u0001\u0000\u0000\u0d8c\u0d8b\u0001\u0000\u0000\u0000\u0d8c"+
		"\u0d8d\u0001\u0000\u0000\u0000\u0d8d\u0119\u0001\u0000\u0000\u0000\u0d8e"+
		"\u0d8f\u0005\u00bc\u0000\u0000\u0d8f\u0d90\u0005\u02ef\u0000\u0000\u0d90"+
		"\u0d91\u0005\u01fa\u0000\u0000\u0d91\u0d94\u0005\u023c\u0000\u0000\u0d92"+
		"\u0d93\u0005\u02b2\u0000\u0000\u0d93\u0d95\u0005\u00d3\u0000\u0000\u0d94"+
		"\u0d92\u0001\u0000\u0000\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000\u0d95"+
		"\u0d96\u0001\u0000\u0000\u0000\u0d96\u0d98\u0003\u0200\u0100\u0000\u0d97"+
		"\u0d99\u0007\u0001\u0000\u0000\u0d98\u0d97\u0001\u0000\u0000\u0000\u0d98"+
		"\u0d99\u0001\u0000\u0000\u0000\u0d99\u011b\u0001\u0000\u0000\u0000\u0d9a"+
		"\u0d9b\u0005\u00bc\u0000\u0000\u0d9b\u0d9e\u0005\u024f\u0000\u0000\u0d9c"+
		"\u0d9d\u0005\u02b2\u0000\u0000\u0d9d\u0d9f\u0005\u00d3\u0000\u0000\u0d9e"+
		"\u0d9c\u0001\u0000\u0000\u0000\u0d9e\u0d9f\u0001\u0000\u0000\u0000\u0d9f"+
		"\u0da0\u0001\u0000\u0000\u0000\u0da0\u0da1\u0005\u00e3\u0000\u0000\u0da1"+
		"\u0da2\u0003\u0200\u0100\u0000\u0da2\u0da3\u0005\u012b\u0000\u0000\u0da3"+
		"\u0da4\u0003\u0200\u0100\u0000\u0da4\u0da5\u0007\u0001\u0000\u0000\u0da5"+
		"\u011d\u0001\u0000\u0000\u0000\u0da6\u0da7\u0005\u00bc\u0000\u0000\u0da7"+
		"\u0daa\u0005\u0254\u0000\u0000\u0da8\u0da9\u0005\u02b2\u0000\u0000\u0da9"+
		"\u0dab\u0005\u00d3\u0000\u0000\u0daa\u0da8\u0001\u0000\u0000\u0000\u0daa"+
		"\u0dab\u0001\u0000\u0000\u0000\u0dab\u0dac\u0001\u0000\u0000\u0000\u0dac"+
		"\u0dad\u0003\u0200\u0100\u0000\u0dad\u0dae\u0005\u0180\u0000\u0000\u0dae"+
		"\u0db0\u0003\u0200\u0100\u0000\u0daf\u0db1\u0007\u0001\u0000\u0000\u0db0"+
		"\u0daf\u0001\u0000\u0000\u0000\u0db0\u0db1\u0001\u0000\u0000\u0000\u0db1"+
		"\u011f\u0001\u0000\u0000\u0000\u0db2\u0db3\u0005\u00bc\u0000\u0000\u0db3"+
		"\u0db6\u0005\u025c\u0000\u0000\u0db4\u0db5\u0005\u02b2\u0000\u0000\u0db5"+
		"\u0db7\u0005\u00d3\u0000\u0000\u0db6\u0db4\u0001\u0000\u0000\u0000\u0db6"+
		"\u0db7\u0001\u0000\u0000\u0000\u0db7\u0db8\u0001\u0000\u0000\u0000\u0db8"+
		"\u0dba\u0003\u01ce\u00e7\u0000\u0db9\u0dbb\u0007\u0001\u0000\u0000\u0dba"+
		"\u0db9\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0001\u0000\u0000\u0000\u0dbb"+
		"\u0121\u0001\u0000\u0000\u0000\u0dbc\u0dbd\u0005\u00bc\u0000\u0000\u0dbd"+
		"\u0dc0\u0005\u026c\u0000\u0000\u0dbe\u0dbf\u0005\u02b2\u0000\u0000\u0dbf"+
		"\u0dc1\u0005\u00d3\u0000\u0000\u0dc0\u0dbe\u0001\u0000\u0000\u0000\u0dc0"+
		"\u0dc1\u0001\u0000\u0000\u0000\u0dc1\u0dc2\u0001\u0000\u0000\u0000\u0dc2"+
		"\u0dc3\u0003\u01ce\u00e7\u0000\u0dc3\u0123\u0001\u0000\u0000\u0000\u0dc4"+
		"\u0dc5\u0005\u00bc\u0000\u0000\u0dc5\u0dc6\u0005\u026c\u0000\u0000\u0dc6"+
		"\u0dc9\u0005\u0145\u0000\u0000\u0dc7\u0dc8\u0005\u02b2\u0000\u0000\u0dc8"+
		"\u0dca\u0005\u00d3\u0000\u0000\u0dc9\u0dc7\u0001\u0000\u0000\u0000\u0dc9"+
		"\u0dca\u0001\u0000\u0000\u0000\u0dca\u0dcb\u0001\u0000\u0000\u0000\u0dcb"+
		"\u0dd1\u0005\u00e3\u0000\u0000\u0dcc\u0dd2\u0003\u01ca\u00e5\u0000\u0dcd"+
		"\u0dd2\u0005\u026c\u0000\u0000\u0dce\u0dd2\u0005\u008d\u0000\u0000\u0dcf"+
		"\u0dd2\u0005\u0206\u0000\u0000\u0dd0\u0dd2\u0005\u01b9\u0000\u0000\u0dd1"+
		"\u0dcc\u0001\u0000\u0000\u0000\u0dd1\u0dcd\u0001\u0000\u0000\u0000\u0dd1"+
		"\u0dce\u0001\u0000\u0000\u0000\u0dd1\u0dcf\u0001\u0000\u0000\u0000\u0dd1"+
		"\u0dd0\u0001\u0000\u0000\u0000\u0dd2\u0dd3\u0001\u0000\u0000\u0000\u0dd3"+
		"\u0dd4\u0005\u02bc\u0000\u0000\u0dd4\u0dd5\u0003\u0200\u0100\u0000\u0dd5"+
		"\u0125\u0001\u0000\u0000\u0000\u0dd6\u0dd7\u0005\u00bc\u0000\u0000\u0dd7"+
		"\u0dda\u0005\u027f\u0000\u0000\u0dd8\u0dd9\u0005\u02b2\u0000\u0000\u0dd9"+
		"\u0ddb\u0005\u00d3\u0000\u0000\u0dda\u0dd8\u0001\u0000\u0000\u0000\u0dda"+
		"\u0ddb\u0001\u0000\u0000\u0000\u0ddb\u0ddc\u0001\u0000\u0000\u0000\u0ddc"+
		"\u0dde\u0003\u01ce\u00e7\u0000\u0ddd\u0ddf\u0007\u0001\u0000\u0000\u0dde"+
		"\u0ddd\u0001\u0000\u0000\u0000\u0dde\u0ddf\u0001\u0000\u0000\u0000\u0ddf"+
		"\u0127\u0001\u0000\u0000\u0000\u0de0\u0de1\u0005\u00d1\u0000\u0000\u0de1"+
		"\u0de3\u0003\u0200\u0100\u0000\u0de2\u0de4\u0003\u01b6\u00db\u0000\u0de3"+
		"\u0de2\u0001\u0000\u0000\u0000\u0de3\u0de4\u0001\u0000\u0000\u0000\u0de4"+
		"\u0129\u0001\u0000\u0000\u0000\u0de5\u0de7\u0005\u00d5\u0000\u0000\u0de6"+
		"\u0de8\u0005\u0016\u0000\u0000\u0de7\u0de6\u0001\u0000\u0000\u0000\u0de7"+
		"\u0de8\u0001\u0000\u0000\u0000\u0de8\u0dea\u0001\u0000\u0000\u0000\u0de9"+
		"\u0deb\u0005\u027e\u0000\u0000\u0dea\u0de9\u0001\u0000\u0000\u0000\u0dea"+
		"\u0deb\u0001\u0000\u0000\u0000\u0deb\u0df9\u0001\u0000\u0000\u0000\u0dec"+
		"\u0ded\u0005\u00d5\u0000\u0000\u0ded\u0dee\u0005\u02fe\u0000\u0000\u0dee"+
		"\u0df3\u0003\u018e\u00c7\u0000\u0def\u0df0\u0005\u02f8\u0000\u0000\u0df0"+
		"\u0df2\u0003\u018e\u00c7\u0000\u0df1\u0def\u0001\u0000\u0000\u0000\u0df2"+
		"\u0df5\u0001\u0000\u0000\u0000\u0df3\u0df1\u0001\u0000\u0000\u0000\u0df3"+
		"\u0df4\u0001\u0000\u0000\u0000\u0df4\u0df6\u0001\u0000\u0000\u0000\u0df5"+
		"\u0df3\u0001\u0000\u0000\u0000\u0df6\u0df7\u0005\u02ff\u0000\u0000\u0df7"+
		"\u0df9\u0001\u0000\u0000\u0000\u0df8\u0de5\u0001\u0000\u0000\u0000\u0df8"+
		"\u0dec\u0001\u0000\u0000\u0000\u0df9\u0e03\u0001\u0000\u0000\u0000\u0dfa"+
		"\u0e04\u0003\u0158\u00ac\u0000\u0dfb\u0e04\u0003\u0132\u0099\u0000\u0dfc"+
		"\u0e04\u0003\u0174\u00ba\u0000\u0dfd\u0e04\u0003\u00d0h\u0000\u0dfe\u0e04"+
		"\u0003\u017c\u00be\u0000\u0dff\u0e04\u0003\u0128\u0094\u0000\u0e00\u0e04"+
		"\u0003\u00ceg\u0000\u0e01\u0e04\u0003\u00b4Z\u0000\u0e02\u0e04\u0003\u0096"+
		"K\u0000\u0e03\u0dfa\u0001\u0000\u0000\u0000\u0e03\u0dfb\u0001\u0000\u0000"+
		"\u0000\u0e03\u0dfc\u0001\u0000\u0000\u0000\u0e03\u0dfd\u0001\u0000\u0000"+
		"\u0000\u0e03\u0dfe\u0001\u0000\u0000\u0000\u0e03\u0dff\u0001\u0000\u0000"+
		"\u0000\u0e03\u0e00\u0001\u0000\u0000\u0000\u0e03\u0e01\u0001\u0000\u0000"+
		"\u0000\u0e03\u0e02\u0001\u0000\u0000\u0000\u0e04\u012b\u0001\u0000\u0000"+
		"\u0000\u0e05\u0e06\u0003\u0204\u0102\u0000\u0e06\u012d\u0001\u0000\u0000"+
		"\u0000\u0e07\u0e08\u0003\u0204\u0102\u0000\u0e08\u012f\u0001\u0000\u0000"+
		"\u0000\u0e09\u0e0a\u0003\u0204\u0102\u0000\u0e0a\u0131\u0001\u0000\u0000"+
		"\u0000\u0e0b\u0e0d\u0003\u015c\u00ae\u0000\u0e0c\u0e0b\u0001\u0000\u0000"+
		"\u0000\u0e0c\u0e0d\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0001\u0000\u0000"+
		"\u0000\u0e0e\u0e0f\u0005\u0116\u0000\u0000\u0e0f\u0e10\u0005\u011f\u0000"+
		"\u0000\u0e10\u0e13\u0003\u01d4\u00ea\u0000\u0e11\u0e12\u0005\u001b\u0000"+
		"\u0000\u0e12\u0e14\u0003\u0200\u0100\u0000\u0e13\u0e11\u0001\u0000\u0000"+
		"\u0000\u0e13\u0e14\u0001\u0000\u0000\u0000\u0e14\u0e19\u0001\u0000\u0000"+
		"\u0000\u0e15\u0e16\u0005\u02fe\u0000\u0000\u0e16\u0e17\u0003\u01cc\u00e6"+
		"\u0000\u0e17\u0e18\u0005\u02ff\u0000\u0000\u0e18\u0e1a\u0001\u0000\u0000"+
		"\u0000\u0e19\u0e15\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000"+
		"\u0000\u0e1a\u0e20\u0001\u0000\u0000\u0000\u0e1b\u0e1d\u0005\u0192\u0000"+
		"\u0000\u0e1c\u0e1e\u0007\u0010\u0000\u0000\u0e1d\u0e1c\u0001\u0000\u0000"+
		"\u0000\u0e1d\u0e1e\u0001\u0000\u0000\u0000\u0e1e\u0e1f\u0001\u0000\u0000"+
		"\u0000\u0e1f\u0e21\u0005\u0276\u0000\u0000\u0e20\u0e1b\u0001\u0000\u0000"+
		"\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u0e26\u0001\u0000\u0000"+
		"\u0000\u0e22\u0e23\u0005\u009b\u0000\u0000\u0e23\u0e27\u0005\u0277\u0000"+
		"\u0000\u0e24\u0e27\u0003\u0158\u00ac\u0000\u0e25\u0e27\u0003\u017c\u00be"+
		"\u0000\u0e26\u0e22\u0001\u0000\u0000\u0000\u0e26\u0e24\u0001\u0000\u0000"+
		"\u0000\u0e26\u0e25\u0001\u0000\u0000\u0000\u0e27\u0e43\u0001\u0000\u0000"+
		"\u0000\u0e28\u0e29\u0005\u0180\u0000\u0000\u0e29\u0e2e\u0005i\u0000\u0000"+
		"\u0e2a\u0e2b\u0005\u02fe\u0000\u0000\u0e2b\u0e2c\u0003\u0208\u0104\u0000"+
		"\u0e2c\u0e2d\u0005\u02ff\u0000\u0000\u0e2d\u0e2f\u0001\u0000\u0000\u0000"+
		"\u0e2e\u0e2a\u0001\u0000\u0000\u0000\u0e2e\u0e2f\u0001\u0000\u0000\u0000"+
		"\u0e2f\u0e33\u0001\u0000\u0000\u0000\u0e30\u0e31\u0005\u0180\u0000\u0000"+
		"\u0e31\u0e32\u0005m\u0000\u0000\u0e32\u0e34\u0003\u0208\u0104\u0000\u0e33"+
		"\u0e30\u0001\u0000\u0000\u0000\u0e33\u0e34\u0001\u0000\u0000\u0000\u0e34"+
		"\u0e36\u0001\u0000\u0000\u0000\u0e35\u0e37\u0003\u0182\u00c1\u0000\u0e36"+
		"\u0e35\u0001\u0000\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37"+
		"\u0e41\u0001\u0000\u0000\u0000\u0e38\u0e39\u0005\u00b9\u0000\u0000\u0e39"+
		"\u0e42\u0005\u016e\u0000\u0000\u0e3a\u0e3b\u0005\u00b9\u0000\u0000\u0e3b"+
		"\u0e3c\u0005\u0269\u0000\u0000\u0e3c\u0e3d\u0005\u0207\u0000\u0000\u0e3d"+
		"\u0e3f\u0003\u01aa\u00d5\u0000\u0e3e\u0e40\u0003\u0182\u00c1\u0000\u0e3f"+
		"\u0e3e\u0001\u0000\u0000\u0000\u0e3f\u0e40\u0001\u0000\u0000\u0000\u0e40"+
		"\u0e42\u0001\u0000\u0000\u0000\u0e41\u0e38\u0001\u0000\u0000\u0000\u0e41"+
		"\u0e3a\u0001\u0000\u0000\u0000\u0e42\u0e44\u0001\u0000\u0000\u0000\u0e43"+
		"\u0e28\u0001\u0000\u0000\u0000\u0e43\u0e44\u0001\u0000\u0000\u0000\u0e44"+
		"\u0e46\u0001\u0000\u0000\u0000\u0e45\u0e47\u0003\u01ae\u00d7\u0000\u0e46"+
		"\u0e45\u0001\u0000\u0000\u0000\u0e46\u0e47\u0001\u0000\u0000\u0000\u0e47"+
		"\u0133\u0001\u0000\u0000\u0000\u0e48\u0e49\u0005\u0137\u0000\u0000\u0e49"+
		"\u0e4a\u0003\u0200\u0100\u0000\u0e4a\u0135\u0001\u0000\u0000\u0000\u0e4b"+
		"\u0e4c\u0003\u0204\u0102\u0000\u0e4c\u0137\u0001\u0000\u0000\u0000\u0e4d"+
		"\u0e4f\u0005\u013f\u0000\u0000\u0e4e\u0e50\u0005\u0237\u0000\u0000\u0e4f"+
		"\u0e4e\u0001\u0000\u0000\u0000\u0e4f\u0e50\u0001\u0000\u0000\u0000\u0e50"+
		"\u0e52\u0001\u0000\u0000\u0000\u0e51\u0e53\u0005\u0181\u0000\u0000\u0e52"+
		"\u0e51\u0001\u0000\u0000\u0000\u0e52\u0e53\u0001\u0000\u0000\u0000\u0e53"+
		"\u0e54\u0001\u0000\u0000\u0000\u0e54\u0e56\u0003\u01ca\u00e5\u0000\u0e55"+
		"\u0e57\u0005\u02fd\u0000\u0000\u0e56\u0e55\u0001\u0000\u0000\u0000\u0e56"+
		"\u0e57\u0001\u0000\u0000\u0000\u0e57\u0e6c\u0001\u0000\u0000\u0000\u0e58"+
		"\u0e69\u0005\u0109\u0000\u0000\u0e59\u0e5a\u0005\b\u0000\u0000\u0e5a\u0e6a"+
		"\u0005\u020a\u0000\u0000\u0e5b\u0e5c\u0005\u01ec\u0000\u0000\u0e5c\u0e6a"+
		"\u0005\u020a\u0000\u0000\u0e5d\u0e5e\u0005\u01ec\u0000\u0000\u0e5e\u0e6a"+
		"\u0005\u00cf\u0000\u0000\u0e5f\u0e60\u0005\u020a\u0000\u0000\u0e60\u0e61"+
		"\u0005\u0269\u0000\u0000\u0e61\u0e6a\u0005\u00cf\u0000\u0000\u0e62\u0e6a"+
		"\u0005\u020a\u0000\u0000\u0e63\u0e64\u0005\u020a\u0000\u0000\u0e64\u0e65"+
		"\u0005\u01ec\u0000\u0000\u0e65\u0e6a\u0005\u00cf\u0000\u0000\u0e66\u0e6a"+
		"\u0005\u00cf\u0000\u0000\u0e67\u0e68\u0005\b\u0000\u0000\u0e68\u0e6a\u0005"+
		"\u00cf\u0000\u0000\u0e69\u0e59\u0001\u0000\u0000\u0000\u0e69\u0e5b\u0001"+
		"\u0000\u0000\u0000\u0e69\u0e5d\u0001\u0000\u0000\u0000\u0e69\u0e5f\u0001"+
		"\u0000\u0000\u0000\u0e69\u0e62\u0001\u0000\u0000\u0000\u0e69\u0e63\u0001"+
		"\u0000\u0000\u0000\u0e69\u0e66\u0001\u0000\u0000\u0000\u0e69\u0e67\u0001"+
		"\u0000\u0000\u0000\u0e6a\u0e6b\u0001\u0000\u0000\u0000\u0e6b\u0e6d\u0005"+
		"\u0155\u0000\u0000\u0e6c\u0e58\u0001\u0000\u0000\u0000\u0e6c\u0e6d\u0001"+
		"\u0000\u0000\u0000\u0e6d\u0e6f\u0001\u0000\u0000\u0000\u0e6e\u0e70\u0005"+
		"\u0171\u0000\u0000\u0e6f\u0e6e\u0001\u0000\u0000\u0000\u0e6f\u0e70\u0001"+
		"\u0000\u0000\u0000\u0e70\u0139\u0001\u0000\u0000\u0000\u0e71\u0e89\u0005"+
		"\u015b\u0000\u0000\u0e72\u0e85\u0005\u0166\u0000\u0000\u0e73\u0e85\u0005"+
		"\u01b5\u0000\u0000\u0e74\u0e85\u0005\u00df\u0000\u0000\u0e75\u0e85\u0005"+
		"\u012d\u0000\u0000\u0e76\u0e77\u0005\u0007\u0000\u0000\u0e77\u0e85\u0005"+
		"\u011b\u0000\u0000\u0e78\u0e79\u0005\u01d2\u0000\u0000\u0e79\u0e85\u0005"+
		"\u0305\u0000\u0000\u0e7a\u0e85\u0005\u0305\u0000\u0000\u0e7b\u0e85\u0005"+
		"\u0010\u0000\u0000\u0e7c\u0e7e\u0005\u00e8\u0000\u0000\u0e7d\u0e7f\u0007"+
		"\u0011\u0000\u0000\u0e7e\u0e7d\u0001\u0000\u0000\u0000\u0e7e\u0e7f\u0001"+
		"\u0000\u0000\u0000\u0e7f\u0e85\u0001\u0000\u0000\u0000\u0e80\u0e82\u0005"+
		"\'\u0000\u0000\u0e81\u0e83\u0007\u0011\u0000\u0000\u0e82\u0e81\u0001\u0000"+
		"\u0000\u0000\u0e82\u0e83\u0001\u0000\u0000\u0000\u0e83\u0e85\u0001\u0000"+
		"\u0000\u0000\u0e84\u0e72\u0001\u0000\u0000\u0000\u0e84\u0e73\u0001\u0000"+
		"\u0000\u0000\u0e84\u0e74\u0001\u0000\u0000\u0000\u0e84\u0e75\u0001\u0000"+
		"\u0000\u0000\u0e84\u0e76\u0001\u0000\u0000\u0000\u0e84\u0e78\u0001\u0000"+
		"\u0000\u0000\u0e84\u0e7a\u0001\u0000\u0000\u0000\u0e84\u0e7b\u0001\u0000"+
		"\u0000\u0000\u0e84\u0e7c\u0001\u0000\u0000\u0000\u0e84\u0e80\u0001\u0000"+
		"\u0000\u0000\u0e85\u0e87\u0001\u0000\u0000\u0000\u0e86\u0e88\u0007\u0012"+
		"\u0000\u0000\u0e87\u0e86\u0001\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000"+
		"\u0000\u0000\u0e88\u0e8a\u0001\u0000\u0000\u0000\u0e89\u0e84\u0001\u0000"+
		"\u0000\u0000\u0e89\u0e8a\u0001\u0000\u0000\u0000\u0e8a\u0e8b\u0001\u0000"+
		"\u0000\u0000\u0e8b\u0e8c\u0003\u01ca\u00e5\u0000\u0e8c\u013b\u0001\u0000"+
		"\u0000\u0000\u0e8d\u0e8e\u0005\u016f\u0000\u0000\u0e8e\u0e91\u0003\u01ca"+
		"\u00e5\u0000\u0e8f\u0e90\u0005\u02f8\u0000\u0000\u0e90\u0e92\u0005\u0308"+
		"\u0000\u0000\u0e91\u0e8f\u0001\u0000\u0000\u0000\u0e91\u0e92\u0001\u0000"+
		"\u0000\u0000\u0e92\u013d\u0001\u0000\u0000\u0000\u0e93\u0e94\u0005\u01b1"+
		"\u0000\u0000\u0e94\u0e99\u0003\u0200\u0100\u0000\u0e95\u0e96\u0005\u02fe"+
		"\u0000\u0000\u0e96\u0e97\u0003\u01d8\u00ec\u0000\u0e97\u0e98\u0005\u02ff"+
		"\u0000\u0000\u0e98\u0e9a\u0001\u0000\u0000\u0000\u0e99\u0e95\u0001\u0000"+
		"\u0000\u0000\u0e99\u0e9a\u0001\u0000\u0000\u0000\u0e9a\u0e9b\u0001\u0000"+
		"\u0000\u0000\u0e9b\u0ea1\u0005\u001b\u0000\u0000\u0e9c\u0ea2\u0003\u0158"+
		"\u00ac\u0000\u0e9d\u0ea2\u0003\u0132\u0099\u0000\u0e9e\u0ea2\u0003\u0174"+
		"\u00ba\u0000\u0e9f\u0ea2\u0003\u00d0h\u0000\u0ea0\u0ea2\u0003\u017c\u00be"+
		"\u0000\u0ea1\u0e9c\u0001\u0000\u0000\u0000\u0ea1\u0e9d\u0001\u0000\u0000"+
		"\u0000\u0ea1\u0e9e\u0001\u0000\u0000\u0000\u0ea1\u0e9f\u0001\u0000\u0000"+
		"\u0000\u0ea1\u0ea0\u0001\u0000\u0000\u0000\u0ea2\u013f\u0001\u0000\u0000"+
		"\u0000\u0ea3\u0ea4\u0005\u01b1\u0000\u0000\u0ea4\u0ea5\u0005\u024b\u0000"+
		"\u0000\u0ea5\u0ea6\u0003\u01ca\u00e5\u0000\u0ea6\u0141\u0001\u0000\u0000"+
		"\u0000\u0ea7\u0ea8\u0005\u01c1\u0000\u0000\u0ea8\u0ea9\u0005\u02ce\u0000"+
		"\u0000\u0ea9\u0ead\u00056\u0000\u0000\u0eaa\u0eae\u0003\u0200\u0100\u0000"+
		"\u0eab\u0eae\u0005\u008d\u0000\u0000\u0eac\u0eae\u0005\u0206\u0000\u0000"+
		"\u0ead\u0eaa\u0001\u0000\u0000\u0000\u0ead\u0eab\u0001\u0000\u0000\u0000"+
		"\u0ead\u0eac\u0001\u0000\u0000\u0000\u0eae\u0eb7\u0001\u0000\u0000\u0000"+
		"\u0eaf\u0eb3\u0005\u02f8\u0000\u0000\u0eb0\u0eb4\u0003\u0200\u0100\u0000"+
		"\u0eb1\u0eb4\u0005\u008d\u0000\u0000\u0eb2\u0eb4\u0005\u0206\u0000\u0000"+
		"\u0eb3\u0eb0\u0001\u0000\u0000\u0000\u0eb3\u0eb1\u0001\u0000\u0000\u0000"+
		"\u0eb3\u0eb2\u0001\u0000\u0000\u0000\u0eb4\u0eb6\u0001\u0000\u0000\u0000"+
		"\u0eb5\u0eaf\u0001\u0000\u0000\u0000\u0eb6\u0eb9\u0001\u0000\u0000\u0000"+
		"\u0eb7\u0eb5\u0001\u0000\u0000\u0000\u0eb7\u0eb8\u0001\u0000\u0000\u0000"+
		"\u0eb8\u0eba\u0001\u0000\u0000\u0000\u0eb9\u0eb7\u0001\u0000\u0000\u0000"+
		"\u0eba\u0ebe\u0005\u0247\u0000\u0000\u0ebb\u0ebf\u0003\u0200\u0100\u0000"+
		"\u0ebc\u0ebf\u0005\u008d\u0000\u0000\u0ebd\u0ebf\u0005\u0206\u0000\u0000"+
		"\u0ebe\u0ebb\u0001\u0000\u0000\u0000\u0ebe\u0ebc\u0001\u0000\u0000\u0000"+
		"\u0ebe\u0ebd\u0001\u0000\u0000\u0000\u0ebf\u0143\u0001\u0000\u0000\u0000"+
		"\u0ec0\u0ec1\u0003\u0204\u0102\u0000\u0ec1\u0145\u0001\u0000\u0000\u0000"+
		"\u0ec2\u0ec6\u0005\u01d1\u0000\u0000\u0ec3\u0ec4\u0005\u02fe\u0000\u0000"+
		"\u0ec4\u0ec5\u0005\u027e\u0000\u0000\u0ec5\u0ec7\u0005\u02ff\u0000\u0000"+
		"\u0ec6\u0ec3\u0001\u0000\u0000\u0000\u0ec6\u0ec7\u0001\u0000\u0000\u0000"+
		"\u0ec7\u0ec8\u0001\u0000\u0000\u0000\u0ec8\u0ec9\u0007\u0013\u0000\u0000"+
		"\u0ec9\u0eca\u0003\u0200\u0100\u0000\u0eca\u0147\u0001\u0000\u0000\u0000"+
		"\u0ecb\u0ecd\u0005\u01d3\u0000\u0000\u0ecc\u0ece\u0005\u01f1\u0000\u0000"+
		"\u0ecd\u0ecc\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000\u0000\u0000"+
		"\u0ece\u0ecf\u0001\u0000\u0000\u0000\u0ecf\u0ed0\u0003\u0200\u0100\u0000"+
		"\u0ed0\u0149\u0001\u0000\u0000\u0000\u0ed1\u0ed4\u0005\u01d8\u0000\u0000"+
		"\u0ed2\u0ed5\u0003\u0200\u0100\u0000\u0ed3\u0ed5\u0005\u0010\u0000\u0000"+
		"\u0ed4\u0ed2\u0001\u0000\u0000\u0000\u0ed4\u0ed3\u0001\u0000\u0000\u0000"+
		"\u0ed5\u014b\u0001\u0000\u0000\u0000\u0ed6\u0ed7\u0003\u0204\u0102\u0000"+
		"\u0ed7\u014d\u0001\u0000\u0000\u0000\u0ed8\u0eda\u0005\u01e6\u0000\u0000"+
		"\u0ed9\u0edb\u0007\u0014\u0000\u0000\u0eda\u0ed9\u0001\u0000\u0000\u0000"+
		"\u0eda\u0edb\u0001\u0000\u0000\u0000\u0edb\u014f\u0001\u0000\u0000\u0000"+
		"\u0edc\u0edd\u0005\u01e6\u0000\u0000\u0edd\u0ede\u0005\u01b2\u0000\u0000"+
		"\u0ede\u0edf\u0005\u0305\u0000\u0000\u0edf\u0151\u0001\u0000\u0000\u0000"+
		"\u0ee0\u0ee2\u0005\u01e6\u0000\u0000\u0ee1\u0ee3\u0007\u0014\u0000\u0000"+
		"\u0ee2\u0ee1\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0001\u0000\u0000\u0000"+
		"\u0ee3\u0ee4\u0001\u0000\u0000\u0000\u0ee4\u0ee6\u0005\u0247\u0000\u0000"+
		"\u0ee5\u0ee7\u0005\u01f1\u0000\u0000\u0ee6\u0ee5\u0001\u0000\u0000\u0000"+
		"\u0ee6\u0ee7\u0001\u0000\u0000\u0000\u0ee7\u0ee8\u0001\u0000\u0000\u0000"+
		"\u0ee8\u0ee9\u0003\u0200\u0100\u0000\u0ee9\u0153\u0001\u0000\u0000\u0000"+
		"\u0eea\u0eeb\u0005\u01f1\u0000\u0000\u0eeb\u0eec\u0003\u0200\u0100\u0000"+
		"\u0eec\u0155\u0001\u0000\u0000\u0000\u0eed\u0eee\u0005\u01fd\u0000\u0000"+
		"\u0eee\u0ef1\u0005\u0129\u0000\u0000\u0eef\u0ef0\u0005\u00e3\u0000\u0000"+
		"\u0ef0\u0ef2\u0003\u01ca\u00e5\u0000\u0ef1\u0eef\u0001\u0000\u0000\u0000"+
		"\u0ef1\u0ef2\u0001\u0000\u0000\u0000\u0ef2\u0ef3\u0001\u0000\u0000\u0000"+
		"\u0ef3\u0f2a\u0005\u0180\u0000\u0000\u0ef4\u0ef5\u0005\u0237\u0000\u0000"+
		"\u0ef5\u0f2b\u0003\u0200\u0100\u0000\u0ef6\u0ef7\u0005^\u0000\u0000\u0ef7"+
		"\u0ef8\u0003\u0200\u0100\u0000\u0ef8\u0ef9\u0005\u0307\u0000\u0000\u0ef9"+
		"\u0efa\u0003\u0208\u0104\u0000\u0efa\u0f2b\u0001\u0000\u0000\u0000\u0efb"+
		"\u0efc\u0005\u000e\u0000\u0000\u0efc\u0efd\u0003\u0200\u0100\u0000\u0efd"+
		"\u0efe\u0005\u02fe\u0000\u0000\u0efe\u0eff\u0003\u01ec\u00f6\u0000\u0eff"+
		"\u0f00\u0005\u02ff\u0000\u0000\u0f00\u0f2b\u0001\u0000\u0000\u0000\u0f01"+
		"\u0f02\u0005\u0092\u0000\u0000\u0f02\u0f2b\u0003\u0200\u0100\u0000\u0f03"+
		"\u0f04\u0005\u00ba\u0000\u0000\u0f04\u0f2b\u0003\u0200\u0100\u0000\u0f05"+
		"\u0f06\u0005\u02ba\u0000\u0000\u0f06\u0f07\u0005\u0254\u0000\u0000\u0f07"+
		"\u0f2b\u0003\u0200\u0100\u0000\u0f08\u0f09\u0005\u00e5\u0000\u0000\u0f09"+
		"\u0f0a\u0005\u0237\u0000\u0000\u0f0a\u0f2b\u0003\u0200\u0100\u0000\u0f0b"+
		"\u0f0c\u0005\u00ee\u0000\u0000\u0f0c\u0f0d\u0003\u0200\u0100\u0000\u0f0d"+
		"\u0f0e\u0003\u01be\u00df\u0000\u0f0e\u0f2b\u0001\u0000\u0000\u0000\u0f0f"+
		"\u0f10\u0005\u012c\u0000\u0000\u0f10\u0f11\u0005\u0178\u0000\u0000\u0f11"+
		"\u0f2b\u0005\u0305\u0000\u0000\u0f12\u0f13\u0005\u02c5\u0000\u0000\u0f13"+
		"\u0f14\u0005\u027f\u0000\u0000\u0f14\u0f2b\u0003\u0200\u0100\u0000\u0f15"+
		"\u0f17\u0005\u01b7\u0000\u0000\u0f16\u0f15\u0001\u0000\u0000\u0000\u0f16"+
		"\u0f17\u0001\u0000\u0000\u0000\u0f17\u0f18\u0001\u0000\u0000\u0000\u0f18"+
		"\u0f19\u0005\u012b\u0000\u0000\u0f19\u0f2b\u0003\u0200\u0100\u0000\u0f1a"+
		"\u0f1b\u0005\u01ba\u0000\u0000\u0f1b\u0f2b\u0003\u0200\u0100\u0000\u0f1c"+
		"\u0f1d\u0005\u01e5\u0000\u0000\u0f1d\u0f2b\u0003\u0200\u0100\u0000\u0f1e"+
		"\u0f1f\u0005\u01f3\u0000\u0000\u0f1f\u0f2b\u0003\u0200\u0100\u0000\u0f20"+
		"\u0f21\u0005\u0201\u0000\u0000\u0f21\u0f2b\u0003\u0200\u0100\u0000\u0f22"+
		"\u0f23\u0005\u0230\u0000\u0000\u0f23\u0f2b\u0003\u0200\u0100\u0000\u0f24"+
		"\u0f25\u0005\u023a\u0000\u0000\u0f25\u0f2b\u0003\u0200\u0100\u0000\u0f26"+
		"\u0f27\u0005\u025c\u0000\u0000\u0f27\u0f2b\u0003\u0200\u0100\u0000\u0f28"+
		"\u0f29\u0005\u027f\u0000\u0000\u0f29\u0f2b\u0003\u0200\u0100\u0000\u0f2a"+
		"\u0ef4\u0001\u0000\u0000\u0000\u0f2a\u0ef6\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0efb\u0001\u0000\u0000\u0000\u0f2a\u0f01\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f03\u0001\u0000\u0000\u0000\u0f2a\u0f05\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f08\u0001\u0000\u0000\u0000\u0f2a\u0f0b\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f0f\u0001\u0000\u0000\u0000\u0f2a\u0f12\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f16\u0001\u0000\u0000\u0000\u0f2a\u0f1a\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f1c\u0001\u0000\u0000\u0000\u0f2a\u0f1e\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f20\u0001\u0000\u0000\u0000\u0f2a\u0f22\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f24\u0001\u0000\u0000\u0000\u0f2a\u0f26\u0001\u0000\u0000\u0000\u0f2a"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f2b\u0f2c\u0001\u0000\u0000\u0000\u0f2c"+
		"\u0f2d\u0005\u0121\u0000\u0000\u0f2d\u0f2e\u0005\u0308\u0000\u0000\u0f2e"+
		"\u0157\u0001\u0000\u0000\u0000\u0f2f\u0f31\u0003\u015c\u00ae\u0000\u0f30"+
		"\u0f2f\u0001\u0000\u0000\u0000\u0f30\u0f31\u0001\u0000\u0000\u0000\u0f31"+
		"\u0f4c\u0001\u0000\u0000\u0000\u0f32\u0f33\u0005\u01fe\u0000\u0000\u0f33"+
		"\u0f35\u0003\u017e\u00bf\u0000\u0f34\u0f36\u0003\u0180\u00c0\u0000\u0f35"+
		"\u0f34\u0001\u0000\u0000\u0000\u0f35\u0f36\u0001\u0000\u0000\u0000\u0f36"+
		"\u0f4d\u0001\u0000\u0000\u0000\u0f37\u0f39\u0005\u0237\u0000\u0000\u0f38"+
		"\u0f3a\u0005\u0181\u0000\u0000\u0f39\u0f38\u0001\u0000\u0000\u0000\u0f39"+
		"\u0f3a\u0001\u0000\u0000\u0000\u0f3a\u0f3b\u0001\u0000\u0000\u0000\u0f3b"+
		"\u0f3d\u0003\u01d4\u00ea\u0000\u0f3c\u0f3e\u0005\u02fd\u0000\u0000\u0f3d"+
		"\u0f3c\u0001\u0000\u0000\u0000\u0f3d\u0f3e\u0001\u0000\u0000\u0000\u0f3e"+
		"\u0f4d\u0001\u0000\u0000\u0000\u0f3f\u0f41\u0005\u02fe\u0000\u0000\u0f40"+
		"\u0f3f\u0001\u0000\u0000\u0000\u0f41\u0f42\u0001\u0000\u0000\u0000\u0f42"+
		"\u0f40\u0001\u0000\u0000\u0000\u0f42\u0f43\u0001\u0000\u0000\u0000\u0f43"+
		"\u0f44\u0001\u0000\u0000\u0000\u0f44\u0f46\u0003\u0158\u00ac\u0000\u0f45"+
		"\u0f47\u0005\u02ff\u0000\u0000\u0f46\u0f45\u0001\u0000\u0000\u0000\u0f47"+
		"\u0f48\u0001\u0000\u0000\u0000\u0f48\u0f46\u0001\u0000\u0000\u0000\u0f48"+
		"\u0f49\u0001\u0000\u0000\u0000\u0f49\u0f4a\u0001\u0000\u0000\u0000\u0f4a"+
		"\u0f4b\u0003\u019c\u00ce\u0000\u0f4b\u0f4d\u0001\u0000\u0000\u0000\u0f4c"+
		"\u0f32\u0001\u0000\u0000\u0000\u0f4c\u0f37\u0001\u0000\u0000\u0000\u0f4c"+
		"\u0f40\u0001\u0000\u0000\u0000\u0f4d\u0f4f\u0001\u0000\u0000\u0000\u0f4e"+
		"\u0f50\u0003\u0182\u00c1\u0000\u0f4f\u0f4e\u0001\u0000\u0000\u0000\u0f4f"+
		"\u0f50\u0001\u0000\u0000\u0000\u0f50\u0f52\u0001\u0000\u0000\u0000\u0f51"+
		"\u0f53\u0003\u0184\u00c2\u0000\u0f52\u0f51\u0001\u0000\u0000\u0000\u0f52"+
		"\u0f53\u0001\u0000\u0000\u0000\u0f53\u0f55\u0001\u0000\u0000\u0000\u0f54"+
		"\u0f56\u0003\u018a\u00c5\u0000\u0f55\u0f54\u0001\u0000\u0000\u0000\u0f55"+
		"\u0f56\u0001\u0000\u0000\u0000\u0f56\u0f58\u0001\u0000\u0000\u0000\u0f57"+
		"\u0f59\u0003\u019a\u00cd\u0000\u0f58\u0f57\u0001\u0000\u0000\u0000\u0f58"+
		"\u0f59\u0001\u0000\u0000\u0000\u0f59\u0f5b\u0001\u0000\u0000\u0000\u0f5a"+
		"\u0f5c\u0003\u019c\u00ce\u0000\u0f5b\u0f5a\u0001\u0000\u0000\u0000\u0f5b"+
		"\u0f5c\u0001\u0000\u0000\u0000\u0f5c\u0f5e\u0001\u0000\u0000\u0000\u0f5d"+
		"\u0f5f\u0003\u019e\u00cf\u0000\u0f5e\u0f5d\u0001\u0000\u0000\u0000\u0f5e"+
		"\u0f5f\u0001\u0000\u0000\u0000\u0f5f\u0f61\u0001\u0000\u0000\u0000\u0f60"+
		"\u0f62\u0003\u01a2\u00d1\u0000\u0f61\u0f60\u0001\u0000\u0000\u0000\u0f61"+
		"\u0f62\u0001\u0000\u0000\u0000\u0f62\u0f64\u0001\u0000\u0000\u0000\u0f63"+
		"\u0f65\u0003\u01a4\u00d2\u0000\u0f64\u0f63\u0001\u0000\u0000\u0000\u0f64"+
		"\u0f65\u0001\u0000\u0000\u0000\u0f65\u0f67\u0001\u0000\u0000\u0000\u0f66"+
		"\u0f68\u0003\u01a6\u00d3\u0000\u0f67\u0f66\u0001\u0000\u0000\u0000\u0f67"+
		"\u0f68\u0001\u0000\u0000\u0000\u0f68\u0f6a\u0001\u0000\u0000\u0000\u0f69"+
		"\u0f6b\u0003\u01a8\u00d4\u0000\u0f6a\u0f69\u0001\u0000\u0000\u0000\u0f6a"+
		"\u0f6b\u0001\u0000\u0000\u0000\u0f6b\u0159\u0001\u0000\u0000\u0000\u0f6c"+
		"\u0f6e\u0003\u015c\u00ae\u0000\u0f6d\u0f6c\u0001\u0000\u0000\u0000\u0f6d"+
		"\u0f6e\u0001\u0000\u0000\u0000\u0f6e\u0f91\u0001\u0000\u0000\u0000\u0f6f"+
		"\u0f70\u0005\u01fe\u0000\u0000\u0f70\u0f71\u0003\u017e\u00bf\u0000\u0f71"+
		"\u0f73\u0005\u011f\u0000\u0000\u0f72\u0f74\u0007\u0015\u0000\u0000\u0f73"+
		"\u0f72\u0001\u0000\u0000\u0000\u0f73\u0f74\u0001\u0000\u0000\u0000\u0f74"+
		"\u0f76\u0001\u0000\u0000\u0000\u0f75\u0f77\u0005\u0237\u0000\u0000\u0f76"+
		"\u0f75\u0001\u0000\u0000\u0000\u0f76\u0f77\u0001\u0000\u0000\u0000\u0f77"+
		"\u0f78\u0001\u0000\u0000\u0000\u0f78\u0f7a\u0003\u01d4\u00ea\u0000\u0f79"+
		"\u0f7b\u0003\u0180\u00c0\u0000\u0f7a\u0f79\u0001\u0000\u0000\u0000\u0f7a"+
		"\u0f7b\u0001\u0000\u0000\u0000\u0f7b\u0f92\u0001\u0000\u0000\u0000\u0f7c"+
		"\u0f7e\u0005\u0237\u0000\u0000\u0f7d\u0f7f\u0005\u0181\u0000\u0000\u0f7e"+
		"\u0f7d\u0001\u0000\u0000\u0000\u0f7e\u0f7f\u0001\u0000\u0000\u0000\u0f7f"+
		"\u0f80\u0001\u0000\u0000\u0000\u0f80\u0f82\u0003\u01d4\u00ea\u0000\u0f81"+
		"\u0f83\u0005\u02fd\u0000\u0000\u0f82\u0f81\u0001\u0000\u0000\u0000\u0f82"+
		"\u0f83\u0001\u0000\u0000\u0000\u0f83\u0f92\u0001\u0000\u0000\u0000\u0f84"+
		"\u0f86\u0005\u02fe\u0000\u0000\u0f85\u0f84\u0001\u0000\u0000\u0000\u0f86"+
		"\u0f87\u0001\u0000\u0000\u0000\u0f87\u0f85\u0001\u0000\u0000\u0000\u0f87"+
		"\u0f88\u0001\u0000\u0000\u0000\u0f88\u0f89\u0001\u0000\u0000\u0000\u0f89"+
		"\u0f8b\u0003\u0158\u00ac\u0000\u0f8a\u0f8c\u0005\u02ff\u0000\u0000\u0f8b"+
		"\u0f8a\u0001\u0000\u0000\u0000\u0f8c\u0f8d\u0001\u0000\u0000\u0000\u0f8d"+
		"\u0f8b\u0001\u0000\u0000\u0000\u0f8d\u0f8e\u0001\u0000\u0000\u0000\u0f8e"+
		"\u0f8f\u0001\u0000\u0000\u0000\u0f8f\u0f90\u0003\u019c\u00ce\u0000\u0f90"+
		"\u0f92\u0001\u0000\u0000\u0000\u0f91\u0f6f\u0001\u0000\u0000\u0000\u0f91"+
		"\u0f7c\u0001\u0000\u0000\u0000\u0f91\u0f85\u0001\u0000\u0000\u0000\u0f92"+
		"\u0f94\u0001\u0000\u0000\u0000\u0f93\u0f95\u0003\u0182\u00c1\u0000\u0f94"+
		"\u0f93\u0001\u0000\u0000\u0000\u0f94\u0f95\u0001\u0000\u0000\u0000\u0f95"+
		"\u0f97\u0001\u0000\u0000\u0000\u0f96\u0f98\u0003\u0184\u00c2\u0000\u0f97"+
		"\u0f96\u0001\u0000\u0000\u0000\u0f97\u0f98\u0001\u0000\u0000\u0000\u0f98"+
		"\u0f9a\u0001\u0000\u0000\u0000\u0f99\u0f9b\u0003\u018a\u00c5\u0000\u0f9a"+
		"\u0f99\u0001\u0000\u0000\u0000\u0f9a\u0f9b\u0001\u0000\u0000\u0000\u0f9b"+
		"\u0f9d\u0001\u0000\u0000\u0000\u0f9c\u0f9e\u0003\u019a\u00cd\u0000\u0f9d"+
		"\u0f9c\u0001\u0000\u0000\u0000\u0f9d\u0f9e\u0001\u0000\u0000\u0000\u0f9e"+
		"\u0fa0\u0001\u0000\u0000\u0000\u0f9f\u0fa1\u0003\u019c\u00ce\u0000\u0fa0"+
		"\u0f9f\u0001\u0000\u0000\u0000\u0fa0\u0fa1\u0001\u0000\u0000\u0000\u0fa1"+
		"\u0fa3\u0001\u0000\u0000\u0000\u0fa2\u0fa4\u0003\u019e\u00cf\u0000\u0fa3"+
		"\u0fa2\u0001\u0000\u0000\u0000\u0fa3\u0fa4\u0001\u0000\u0000\u0000\u0fa4"+
		"\u0fa6\u0001\u0000\u0000\u0000\u0fa5\u0fa7\u0003\u01a2\u00d1\u0000\u0fa6"+
		"\u0fa5\u0001\u0000\u0000\u0000\u0fa6\u0fa7\u0001\u0000\u0000\u0000\u0fa7"+
		"\u0fa9\u0001\u0000\u0000\u0000\u0fa8\u0faa\u0003\u01a4\u00d2\u0000\u0fa9"+
		"\u0fa8\u0001\u0000\u0000\u0000\u0fa9\u0faa\u0001\u0000\u0000\u0000\u0faa"+
		"\u0fac\u0001\u0000\u0000\u0000\u0fab\u0fad\u0003\u01a6\u00d3\u0000\u0fac"+
		"\u0fab\u0001\u0000\u0000\u0000\u0fac\u0fad\u0001\u0000\u0000\u0000\u0fad"+
		"\u0faf\u0001\u0000\u0000\u0000\u0fae\u0fb0\u0003\u01a8\u00d4\u0000\u0faf"+
		"\u0fae\u0001\u0000\u0000\u0000\u0faf\u0fb0\u0001\u0000\u0000\u0000\u0fb0"+
		"\u015b\u0001\u0000\u0000\u0000\u0fb1\u0fb3\u0005\u0286\u0000\u0000\u0fb2"+
		"\u0fb4\u0005\u01c3\u0000\u0000\u0fb3\u0fb2\u0001\u0000\u0000\u0000\u0fb3"+
		"\u0fb4\u0001\u0000\u0000\u0000\u0fb4\u0fb5\u0001\u0000\u0000\u0000\u0fb5"+
		"\u0fba\u0003\u015e\u00af\u0000\u0fb6\u0fb7\u0005\u02f8\u0000\u0000\u0fb7"+
		"\u0fb9\u0003\u015e\u00af\u0000\u0fb8\u0fb6\u0001\u0000\u0000\u0000\u0fb9"+
		"\u0fbc\u0001\u0000\u0000\u0000\u0fba\u0fb8\u0001\u0000\u0000\u0000\u0fba"+
		"\u0fbb\u0001\u0000\u0000\u0000\u0fbb\u015d\u0001\u0000\u0000\u0000\u0fbc"+
		"\u0fba\u0001\u0000\u0000\u0000\u0fbd\u0fc2\u0003\u01d4\u00ea\u0000\u0fbe"+
		"\u0fbf\u0005\u02fe\u0000\u0000\u0fbf\u0fc0\u0003\u01cc\u00e6\u0000\u0fc0"+
		"\u0fc1\u0005\u02ff\u0000\u0000\u0fc1\u0fc3\u0001\u0000\u0000\u0000\u0fc2"+
		"\u0fbe\u0001\u0000\u0000\u0000\u0fc2\u0fc3\u0001\u0000\u0000\u0000\u0fc3"+
		"\u0fc4\u0001\u0000\u0000\u0000\u0fc4\u0fc5\u0005\u001b\u0000\u0000\u0fc5"+
		"\u0fcb\u0005\u02fe\u0000\u0000\u0fc6\u0fcc\u0003\u0158\u00ac\u0000\u0fc7"+
		"\u0fcc\u0003\u0132\u0099\u0000\u0fc8\u0fcc\u0003\u00d0h\u0000\u0fc9\u0fcc"+
		"\u0003\u0174\u00ba\u0000\u0fca\u0fcc\u0003\u017c\u00be\u0000\u0fcb\u0fc6"+
		"\u0001\u0000\u0000\u0000\u0fcb\u0fc7\u0001\u0000\u0000\u0000\u0fcb\u0fc8"+
		"\u0001\u0000\u0000\u0000\u0fcb\u0fc9\u0001\u0000\u0000\u0000\u0fcb\u0fca"+
		"\u0001\u0000\u0000\u0000\u0fcc\u0fcd\u0001\u0000\u0000\u0000\u0fcd\u0fce"+
		"\u0005\u02ff\u0000\u0000\u0fce\u015f\u0001\u0000\u0000\u0000\u0fcf\u0fd1"+
		"\u0005\u0207\u0000\u0000\u0fd0\u0fd2\u0007\u0016\u0000\u0000\u0fd1\u0fd0"+
		"\u0001\u0000\u0000\u0000\u0fd1\u0fd2\u0001\u0000\u0000\u0000\u0fd2\u0fd3"+
		"\u0001\u0000\u0000\u0000\u0fd3\u0fd4\u0003\u0200\u0100\u0000\u0fd4\u0fd7"+
		"\u0007\u0005\u0000\u0000\u0fd5\u0fd8\u0003\u01fc\u00fe\u0000\u0fd6\u0fd8"+
		"\u0005\u009b\u0000\u0000\u0fd7\u0fd5\u0001\u0000\u0000\u0000\u0fd7\u0fd6"+
		"\u0001\u0000\u0000\u0000\u0fd8\u0fe5\u0001\u0000\u0000\u0000\u0fd9\u0fdb"+
		"\u0005\u0207\u0000\u0000\u0fda\u0fdc\u0007\u0016\u0000\u0000\u0fdb\u0fda"+
		"\u0001\u0000\u0000\u0000\u0fdb\u0fdc\u0001\u0000\u0000\u0000\u0fdc\u0fdd"+
		"\u0001\u0000\u0000\u0000\u0fdd\u0fde\u0005\u0242\u0000\u0000\u0fde\u0fe2"+
		"\u0005\u028e\u0000\u0000\u0fdf\u0fe3\u0003\u01c4\u00e2\u0000\u0fe0\u0fe3"+
		"\u0005\u013a\u0000\u0000\u0fe1\u0fe3\u0005\u009b\u0000\u0000\u0fe2\u0fdf"+
		"\u0001\u0000\u0000\u0000\u0fe2\u0fe0\u0001\u0000\u0000\u0000\u0fe2\u0fe1"+
		"\u0001\u0000\u0000\u0000\u0fe3\u0fe5\u0001\u0000\u0000\u0000\u0fe4\u0fcf"+
		"\u0001\u0000\u0000\u0000\u0fe4\u0fd9\u0001\u0000\u0000\u0000\u0fe5\u0161"+
		"\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0005\u0207\u0000\u0000\u0fe7\u0fea"+
		"\u0005q\u0000\u0000\u0fe8\u0feb\u0005\u0010\u0000\u0000\u0fe9\u0feb\u0003"+
		"\u01ce\u00e7\u0000\u0fea\u0fe8\u0001\u0000\u0000\u0000\u0fea\u0fe9\u0001"+
		"\u0000\u0000\u0000\u0feb\u0fec\u0001\u0000\u0000\u0000\u0fec\u0fed\u0007"+
		"\u0017\u0000\u0000\u0fed\u0163\u0001\u0000\u0000\u0000\u0fee\u0ff0\u0005"+
		"\u0207\u0000\u0000\u0fef\u0ff1\u0007\u0016\u0000\u0000\u0ff0\u0fef\u0001"+
		"\u0000\u0000\u0000\u0ff0\u0ff1\u0001\u0000\u0000\u0000\u0ff1\u0ff2\u0001"+
		"\u0000\u0000\u0000\u0ff2\u0ff5\u0005\u01e5\u0000\u0000\u0ff3\u0ff6\u0003"+
		"\u01f8\u00fc\u0000\u0ff4\u0ff6\u0005\u016a\u0000\u0000\u0ff5\u0ff3\u0001"+
		"\u0000\u0000\u0000\u0ff5\u0ff4\u0001\u0000\u0000\u0000\u0ff6\u0ffa\u0001"+
		"\u0000\u0000\u0000\u0ff7\u0ff8\u0005\u01d8\u0000\u0000\u0ff8\u0ffa\u0005"+
		"\u01e5\u0000\u0000\u0ff9\u0fee\u0001\u0000\u0000\u0000\u0ff9\u0ff7\u0001"+
		"\u0000\u0000\u0000\u0ffa\u0165\u0001\u0000\u0000\u0000\u0ffb\u0ffc\u0003"+
		"\u0204\u0102\u0000\u0ffc\u0167\u0001\u0000\u0000\u0000\u0ffd\u0ffe\u0005"+
		"\u0122\u0000\u0000\u0ffe\u1006\u0005\u0134\u0000\u0000\u0fff\u1007\u0005"+
		"\u0203\u0000\u0000\u1000\u1001\u0005\u01d5\u0000\u0000\u1001\u1007\u0005"+
		"\u01be\u0000\u0000\u1002\u1003\u0005\u01be\u0000\u0000\u1003\u1007\u0005"+
		"d\u0000\u0000\u1004\u1005\u0005\u01be\u0000\u0000\u1005\u1007\u0005\u025f"+
		"\u0000\u0000\u1006\u0fff\u0001\u0000\u0000\u0000\u1006\u1000\u0001\u0000"+
		"\u0000\u0000\u1006\u1002\u0001\u0000\u0000\u0000\u1006\u1004\u0001\u0000"+
		"\u0000\u0000\u1007\u1011\u0001\u0000\u0000\u0000\u1008\u1009\u0005\u01be"+
		"\u0000\u0000\u1009\u1011\u0005\u028a\u0000\u0000\u100a\u100b\u0005\u01be"+
		"\u0000\u0000\u100b\u1011\u0005\u0181\u0000\u0000\u100c\u100e\u0005\u016d"+
		"\u0000\u0000\u100d\u100c\u0001\u0000\u0000\u0000\u100d\u100e\u0001\u0000"+
		"\u0000\u0000\u100e\u100f\u0001\u0000\u0000\u0000\u100f\u1011\u0005\u009e"+
		"\u0000\u0000\u1010\u0ffd\u0001\u0000\u0000\u0000\u1010\u1008\u0001\u0000"+
		"\u0000\u0000\u1010\u100a\u0001\u0000\u0000\u0000\u1010\u100d\u0001\u0000"+
		"\u0000\u0000\u1011\u0169\u0001\u0000\u0000\u0000\u1012\u1017\u0003\u0168"+
		"\u00b4\u0000\u1013\u1014\u0005\u02f8\u0000\u0000\u1014\u1016\u0003\u0168"+
		"\u00b4\u0000\u1015\u1013\u0001\u0000\u0000\u0000\u1016\u1019\u0001\u0000"+
		"\u0000\u0000\u1017\u1015\u0001\u0000\u0000\u0000\u1017\u1018\u0001\u0000"+
		"\u0000\u0000\u1018\u016b\u0001\u0000\u0000\u0000\u1019\u1017\u0001\u0000"+
		"\u0000\u0000\u101a\u101b\u0005\u0207\u0000\u0000\u101b\u101c\u0005\u024b"+
		"\u0000\u0000\u101c\u1028\u0003\u016a\u00b5\u0000\u101d\u101e\u0005\u0207"+
		"\u0000\u0000\u101e\u101f\u0005\u024b\u0000\u0000\u101f\u1020\u0005\u0211"+
		"\u0000\u0000\u1020\u1028\u0005\u0308\u0000\u0000\u1021\u1022\u0005\u0207"+
		"\u0000\u0000\u1022\u1023\u0005\u0205\u0000\u0000\u1023\u1024\u0005L\u0000"+
		"\u0000\u1024\u1025\u0005\u001b\u0000\u0000\u1025\u1026\u0005\u024b\u0000"+
		"\u0000\u1026\u1028\u0003\u016a\u00b5\u0000\u1027\u101a\u0001\u0000\u0000"+
		"\u0000\u1027\u101d\u0001\u0000\u0000\u0000\u1027\u1021\u0001\u0000\u0000"+
		"\u0000\u1028\u016d\u0001\u0000\u0000\u0000\u1029\u102e\u0005\u020b\u0000"+
		"\u0000\u102a\u102f\u0003\u0200\u0100\u0000\u102b\u102c\u0005\u0242\u0000"+
		"\u0000\u102c\u102f\u0005\u028e\u0000\u0000\u102d\u102f\u0005\u0010\u0000"+
		"\u0000\u102e\u102a\u0001\u0000\u0000\u0000\u102e\u102b\u0001\u0000\u0000"+
		"\u0000\u102e\u102d\u0001\u0000\u0000\u0000\u102f\u016f\u0001\u0000\u0000"+
		"\u0000\u1030\u1032\u0005\u025a\u0000\u0000\u1031\u1033\u0005\u0237\u0000"+
		"\u0000\u1032\u1031\u0001\u0000\u0000\u0000\u1032\u1033\u0001\u0000\u0000"+
		"\u0000\u1033\u1035\u0001\u0000\u0000\u0000\u1034\u1036\u0005\u0181\u0000"+
		"\u0000\u1035\u1034\u0001\u0000\u0000\u0000\u1035\u1036\u0001\u0000\u0000"+
		"\u0000\u1036\u1037\u0001\u0000\u0000\u0000\u1037\u1039\u0003\u01d4\u00ea"+
		"\u0000\u1038\u103a\u0005\u02fd\u0000\u0000\u1039\u1038\u0001\u0000\u0000"+
		"\u0000\u1039\u103a\u0001\u0000\u0000\u0000\u103a\u1040\u0001\u0000\u0000"+
		"\u0000\u103b\u103d\u0005\u02f8\u0000\u0000\u103c\u103e\u0005\u0181\u0000"+
		"\u0000\u103d\u103c\u0001\u0000\u0000\u0000\u103d\u103e\u0001\u0000\u0000"+
		"\u0000\u103e\u103f\u0001\u0000\u0000\u0000\u103f\u1041\u0003\u01ce\u00e7"+
		"\u0000\u1040\u103b\u0001\u0000\u0000\u0000\u1040\u1041\u0001\u0000\u0000"+
		"\u0000\u1041\u1044\u0001\u0000\u0000\u0000\u1042\u1043\u0007\u0018\u0000"+
		"\u0000\u1043\u1045\u0005\u0102\u0000\u0000\u1044\u1042\u0001\u0000\u0000"+
		"\u0000\u1044\u1045\u0001\u0000\u0000\u0000\u1045\u1047\u0001\u0000\u0000"+
		"\u0000\u1046\u1048\u0007\u0001\u0000\u0000\u1047\u1046\u0001\u0000\u0000"+
		"\u0000\u1047\u1048\u0001\u0000\u0000\u0000\u1048\u0171\u0001\u0000\u0000"+
		"\u0000\u1049\u104c\u0005\u0265\u0000\u0000\u104a\u104d\u0003\u0200\u0100"+
		"\u0000\u104b\u104d\u0005\u02fd\u0000\u0000\u104c\u104a\u0001\u0000\u0000"+
		"\u0000\u104c\u104b\u0001\u0000\u0000\u0000\u104d\u0173\u0001\u0000\u0000"+
		"\u0000\u104e\u1050\u0003\u015c\u00ae\u0000\u104f\u104e\u0001\u0000\u0000"+
		"\u0000\u104f\u1050\u0001\u0000\u0000\u0000\u1050\u1051\u0001\u0000\u0000"+
		"\u0000\u1051\u1053\u0005\u0269\u0000\u0000\u1052\u1054\u0005\u0181\u0000"+
		"\u0000\u1053\u1052\u0001\u0000\u0000\u0000\u1053\u1054\u0001\u0000\u0000"+
		"\u0000\u1054\u1055\u0001\u0000\u0000\u0000\u1055\u1057\u0003\u01d4\u00ea"+
		"\u0000\u1056\u1058\u0005\u02fd\u0000\u0000\u1057\u1056\u0001\u0000\u0000"+
		"\u0000\u1057\u1058\u0001\u0000\u0000\u0000\u1058\u105d\u0001\u0000\u0000"+
		"\u0000\u1059\u105b\u0005\u001b\u0000\u0000\u105a\u1059\u0001\u0000\u0000"+
		"\u0000\u105a\u105b\u0001\u0000\u0000\u0000\u105b\u105c\u0001\u0000\u0000"+
		"\u0000\u105c\u105e\u0003\u0200\u0100\u0000\u105d\u105a\u0001\u0000\u0000"+
		"\u0000\u105d\u105e\u0001\u0000\u0000\u0000\u105e\u105f\u0001\u0000\u0000"+
		"\u0000\u105f\u1060\u0005\u0207\u0000\u0000\u1060\u1062\u0003\u01aa\u00d5"+
		"\u0000\u1061\u1063\u0003\u0180\u00c0\u0000\u1062\u1061\u0001\u0000\u0000"+
		"\u0000\u1062\u1063\u0001\u0000\u0000\u0000\u1063\u1069\u0001\u0000\u0000"+
		"\u0000\u1064\u106a\u0003\u0182\u00c1\u0000\u1065\u1066\u0005\u0283\u0000"+
		"\u0000\u1066\u1067\u0005\u0085\u0000\u0000\u1067\u1068\u0005\u017b\u0000"+
		"\u0000\u1068\u106a\u0003\u0200\u0100\u0000\u1069\u1064\u0001\u0000\u0000"+
		"\u0000\u1069\u1065\u0001\u0000\u0000\u0000\u1069\u106a\u0001\u0000\u0000"+
		"\u0000\u106a\u106c\u0001\u0000\u0000\u0000\u106b\u106d\u0003\u01ae\u00d7"+
		"\u0000\u106c\u106b\u0001\u0000\u0000\u0000\u106c\u106d\u0001\u0000\u0000"+
		"\u0000\u106d\u0175\u0001\u0000\u0000\u0000\u106e\u106f\u0007\u0019\u0000"+
		"\u0000\u106f\u0177\u0001\u0000\u0000\u0000\u1070\u1075\u0003\u0176\u00bb"+
		"\u0000\u1071\u1072\u0005\u02f8\u0000\u0000\u1072\u1074\u0003\u0176\u00bb"+
		"\u0000\u1073\u1071\u0001\u0000\u0000\u0000\u1074\u1077\u0001\u0000\u0000"+
		"\u0000\u1075\u1073\u0001\u0000\u0000\u0000\u1075\u1076\u0001\u0000\u0000"+
		"\u0000\u1076\u0179\u0001\u0000\u0000\u0000\u1077\u1075\u0001\u0000\u0000"+
		"\u0000\u1078\u107d\u0005\u0272\u0000\u0000\u1079\u107a\u0005\u02fe\u0000"+
		"\u0000\u107a\u107b\u0003\u0178\u00bc\u0000\u107b\u107c\u0005\u02ff\u0000"+
		"\u0000\u107c\u107e\u0001\u0000\u0000\u0000\u107d\u1079\u0001\u0000\u0000"+
		"\u0000\u107d\u107e\u0001\u0000\u0000\u0000\u107e\u107f\u0001\u0000\u0000"+
		"\u0000\u107f\u1084\u0003\u01d4\u00ea\u0000\u1080\u1081\u0005\u02fe\u0000"+
		"\u0000\u1081\u1082\u0003\u018c\u00c6\u0000\u1082\u1083\u0005\u02ff\u0000"+
		"\u0000\u1083\u1085\u0001\u0000\u0000\u0000\u1084\u1080\u0001\u0000\u0000"+
		"\u0000\u1084\u1085\u0001\u0000\u0000\u0000\u1085\u10a8\u0001\u0000\u0000"+
		"\u0000\u1086\u1088\u0005\u0272\u0000\u0000\u1087\u1089\u0005\u00ed\u0000"+
		"\u0000\u1088\u1087\u0001\u0000\u0000\u0000\u1088\u1089\u0001\u0000\u0000"+
		"\u0000\u1089\u108b\u0001\u0000\u0000\u0000\u108a\u108c\u0005\u00eb\u0000"+
		"\u0000\u108b\u108a\u0001\u0000\u0000\u0000\u108b\u108c\u0001\u0000\u0000"+
		"\u0000\u108c\u108e\u0001\u0000\u0000\u0000\u108d\u108f\u0005\u027e\u0000"+
		"\u0000\u108e\u108d\u0001\u0000\u0000\u0000\u108e\u108f\u0001\u0000\u0000"+
		"\u0000\u108f\u1091\u0001\u0000\u0000\u0000\u1090\u1092\u0003\u01d4\u00ea"+
		"\u0000\u1091\u1090\u0001\u0000\u0000\u0000\u1091\u1092\u0001\u0000\u0000"+
		"\u0000\u1092\u10a8\u0001\u0000\u0000\u0000\u1093\u1095\u0005\u0272\u0000"+
		"\u0000\u1094\u1096\u0005\u00ed\u0000\u0000\u1095\u1094\u0001\u0000\u0000"+
		"\u0000\u1095\u1096\u0001\u0000\u0000\u0000\u1096\u1098\u0001\u0000\u0000"+
		"\u0000\u1097\u1099\u0005\u00eb\u0000\u0000\u1098\u1097\u0001\u0000\u0000"+
		"\u0000\u1098\u1099\u0001\u0000\u0000\u0000\u1099\u109b\u0001\u0000\u0000"+
		"\u0000\u109a\u109c\u0005\u027e\u0000\u0000\u109b\u109a\u0001\u0000\u0000"+
		"\u0000\u109b\u109c\u0001\u0000\u0000\u0000\u109c\u109d\u0001\u0000\u0000"+
		"\u0000\u109d\u10a5\u0005\u0016\u0000\u0000\u109e\u10a3\u0003\u01d4\u00ea"+
		"\u0000\u109f\u10a0\u0005\u02fe\u0000\u0000\u10a0\u10a1\u0003\u018c\u00c6"+
		"\u0000\u10a1\u10a2\u0005\u02ff\u0000\u0000\u10a2\u10a4\u0001\u0000\u0000"+
		"\u0000\u10a3\u109f\u0001\u0000\u0000\u0000\u10a3\u10a4\u0001\u0000\u0000"+
		"\u0000\u10a4\u10a6\u0001\u0000\u0000\u0000\u10a5\u109e\u0001\u0000\u0000"+
		"\u0000\u10a5\u10a6\u0001\u0000\u0000\u0000\u10a6\u10a8\u0001\u0000\u0000"+
		"\u0000\u10a7\u1078\u0001\u0000\u0000\u0000\u10a7\u1086\u0001\u0000\u0000"+
		"\u0000\u10a7\u1093\u0001\u0000\u0000\u0000\u10a8\u017b\u0001\u0000\u0000"+
		"\u0000\u10a9\u10ab\u0003\u015c\u00ae\u0000\u10aa\u10a9\u0001\u0000\u0000"+
		"\u0000\u10aa\u10ab\u0001\u0000\u0000\u0000\u10ab\u10bb\u0001\u0000\u0000"+
		"\u0000\u10ac\u10ad\u0005\u0277\u0000\u0000\u10ad\u10bc\u0003\u01b8\u00dc"+
		"\u0000\u10ae\u10b0\u0005\u02fe\u0000\u0000\u10af\u10ae\u0001\u0000\u0000"+
		"\u0000\u10b0\u10b1\u0001\u0000\u0000\u0000\u10b1\u10af\u0001\u0000\u0000"+
		"\u0000\u10b1\u10b2\u0001\u0000\u0000\u0000\u10b2\u10b3\u0001\u0000\u0000"+
		"\u0000\u10b3\u10b5\u0003\u017c\u00be\u0000\u10b4\u10b6\u0005\u02ff\u0000"+
		"\u0000\u10b5\u10b4\u0001\u0000\u0000\u0000\u10b6\u10b7\u0001\u0000\u0000"+
		"\u0000\u10b7\u10b5\u0001\u0000\u0000\u0000\u10b7\u10b8\u0001\u0000\u0000"+
		"\u0000\u10b8\u10b9\u0001\u0000\u0000\u0000\u10b9\u10ba\u0003\u019c\u00ce"+
		"\u0000\u10ba\u10bc\u0001\u0000\u0000\u0000\u10bb\u10ac\u0001\u0000\u0000"+
		"\u0000\u10bb\u10af\u0001\u0000\u0000\u0000\u10bc\u10be\u0001\u0000\u0000"+
		"\u0000\u10bd\u10bf\u0003\u019e\u00cf\u0000\u10be\u10bd\u0001\u0000\u0000"+
		"\u0000\u10be\u10bf\u0001\u0000\u0000\u0000\u10bf\u10c1\u0001\u0000\u0000"+
		"\u0000\u10c0\u10c2\u0003\u019c\u00ce\u0000\u10c1\u10c0\u0001\u0000\u0000"+
		"\u0000\u10c1\u10c2\u0001\u0000\u0000\u0000\u10c2\u10c4\u0001\u0000\u0000"+
		"\u0000\u10c3\u10c5\u0003\u01a2\u00d1\u0000\u10c4\u10c3\u0001\u0000\u0000"+
		"\u0000\u10c4\u10c5\u0001\u0000\u0000\u0000\u10c5\u10c7\u0001\u0000\u0000"+
		"\u0000\u10c6\u10c8\u0003\u01a4\u00d2\u0000\u10c7\u10c6\u0001\u0000\u0000"+
		"\u0000\u10c7\u10c8\u0001\u0000\u0000\u0000\u10c8\u10ca\u0001\u0000\u0000"+
		"\u0000\u10c9\u10cb\u0003\u01a6\u00d3\u0000\u10ca\u10c9\u0001\u0000\u0000"+
		"\u0000\u10ca\u10cb\u0001\u0000\u0000\u0000\u10cb\u017d\u0001\u0000\u0000"+
		"\u0000\u10cc\u10d3\u0005\u0010\u0000\u0000\u10cd\u10d0\u0005\u00b8\u0000"+
		"\u0000\u10ce\u10cf\u0005\u0180\u0000\u0000\u10cf\u10d1\u0003\u01b6\u00db"+
		"\u0000\u10d0\u10ce\u0001\u0000\u0000\u0000\u10d0\u10d1\u0001\u0000\u0000"+
		"\u0000\u10d1\u10d3\u0001\u0000\u0000\u0000\u10d2\u10cc\u0001\u0000\u0000"+
		"\u0000\u10d2\u10cd\u0001\u0000\u0000\u0000\u10d2\u10d3\u0001\u0000\u0000"+
		"\u0000\u10d3\u10d4\u0001\u0000\u0000\u0000\u10d4\u10d5\u0003\u018c\u00c6"+
		"\u0000\u10d5\u017f\u0001\u0000\u0000\u0000\u10d6\u10d7\u0005\u00ec\u0000"+
		"\u0000\u10d7\u10dc\u0003\u01e2\u00f1\u0000\u10d8\u10d9\u0005\u02f8\u0000"+
		"\u0000\u10d9\u10db\u0003\u01e2\u00f1\u0000\u10da\u10d8\u0001\u0000\u0000"+
		"\u0000\u10db\u10de\u0001\u0000\u0000\u0000\u10dc\u10da\u0001\u0000\u0000"+
		"\u0000\u10dc\u10dd\u0001\u0000\u0000\u0000\u10dd\u0181\u0001\u0000\u0000"+
		"\u0000\u10de\u10dc\u0001\u0000\u0000\u0000\u10df\u10e0\u0005\u0283\u0000"+
		"\u0000\u10e0\u10e1\u0003\u01ea\u00f5\u0000\u10e1\u0183\u0001\u0000\u0000"+
		"\u0000\u10e2\u10e3\u0005\u00fa\u0000\u0000\u10e3\u10e4\u00056\u0000\u0000"+
		"\u10e4\u10e9\u0003\u0186\u00c3\u0000\u10e5\u10e6\u0005\u02f8\u0000\u0000"+
		"\u10e6\u10e8\u0003\u0186\u00c3\u0000\u10e7\u10e5\u0001\u0000\u0000\u0000"+
		"\u10e8\u10eb\u0001\u0000\u0000\u0000\u10e9\u10e7\u0001\u0000\u0000\u0000"+
		"\u10e9\u10ea\u0001\u0000\u0000\u0000\u10ea\u0185\u0001\u0000\u0000\u0000"+
		"\u10eb\u10e9\u0001\u0000\u0000\u0000\u10ec\u10ed\u0005\u02fe\u0000\u0000"+
		"\u10ed\u1106\u0005\u02ff\u0000\u0000\u10ee\u1106\u0003\u01b0\u00d8\u0000"+
		"\u10ef\u1106\u0003\u01b6\u00db\u0000\u10f0\u10f1\u0007\u001a\u0000\u0000"+
		"\u10f1\u10f4\u0005\u02fe\u0000\u0000\u10f2\u10f5\u0003\u01b0\u00d8\u0000"+
		"\u10f3\u10f5\u0003\u01b6\u00db\u0000\u10f4\u10f2\u0001\u0000\u0000\u0000"+
		"\u10f4\u10f3\u0001\u0000\u0000\u0000\u10f5\u10fd\u0001\u0000\u0000\u0000"+
		"\u10f6\u10f9\u0005\u02f8\u0000\u0000\u10f7\u10fa\u0003\u01b0\u00d8\u0000"+
		"\u10f8\u10fa\u0003\u01b6\u00db\u0000\u10f9\u10f7\u0001\u0000\u0000\u0000"+
		"\u10f9\u10f8\u0001\u0000\u0000\u0000\u10fa\u10fc\u0001\u0000\u0000\u0000"+
		"\u10fb\u10f6\u0001\u0000\u0000\u0000\u10fc\u10ff\u0001\u0000\u0000\u0000"+
		"\u10fd\u10fb\u0001\u0000\u0000\u0000\u10fd\u10fe\u0001\u0000\u0000\u0000"+
		"\u10fe\u1100\u0001\u0000\u0000\u0000\u10ff\u10fd\u0001\u0000\u0000\u0000"+
		"\u1100\u1101\u0005\u02ff\u0000\u0000\u1101\u1106\u0001\u0000\u0000\u0000"+
		"\u1102\u1103\u0005\u00fb\u0000\u0000\u1103\u1104\u0005\u0209\u0000\u0000"+
		"\u1104\u1106\u0003\u0188\u00c4\u0000\u1105\u10ec\u0001\u0000\u0000\u0000"+
		"\u1105\u10ee\u0001\u0000\u0000\u0000\u1105\u10ef\u0001\u0000\u0000\u0000"+
		"\u1105\u10f0\u0001\u0000\u0000\u0000\u1105\u1102\u0001\u0000\u0000\u0000"+
		"\u1106\u0187\u0001\u0000\u0000\u0000\u1107\u1108\u0005\u02fe\u0000\u0000"+
		"\u1108\u110d\u0003\u0186\u00c3\u0000\u1109\u110a\u0005\u02f8\u0000\u0000"+
		"\u110a\u110c\u0003\u0186\u00c3\u0000\u110b\u1109\u0001\u0000\u0000\u0000"+
		"\u110c\u110f\u0001\u0000\u0000\u0000\u110d\u110b\u0001\u0000\u0000\u0000"+
		"\u110d\u110e\u0001\u0000\u0000\u0000\u110e\u1110\u0001\u0000\u0000\u0000"+
		"\u110f\u110d\u0001\u0000\u0000\u0000\u1110\u1111\u0005\u02ff\u0000\u0000"+
		"\u1111\u0189\u0001\u0000\u0000\u0000\u1112\u1113\u0005\u00fd\u0000\u0000"+
		"\u1113\u1118\u0003\u01ea\u00f5\u0000\u1114\u1115\u0005\u02f8\u0000\u0000"+
		"\u1115\u1117\u0003\u01ea\u00f5\u0000\u1116\u1114\u0001\u0000\u0000\u0000"+
		"\u1117\u111a\u0001\u0000\u0000\u0000\u1118\u1116\u0001\u0000\u0000\u0000"+
		"\u1118\u1119\u0001\u0000\u0000\u0000\u1119\u018b\u0001\u0000\u0000\u0000"+
		"\u111a\u1118\u0001\u0000\u0000\u0000\u111b\u1120\u0003\u01b0\u00d8\u0000"+
		"\u111c\u111e\u0005\u001b\u0000\u0000\u111d\u111c\u0001\u0000\u0000\u0000"+
		"\u111d\u111e\u0001\u0000\u0000\u0000\u111e\u111f\u0001\u0000\u0000\u0000"+
		"\u111f\u1121\u0003\u01ca\u00e5\u0000\u1120\u111d\u0001\u0000\u0000\u0000"+
		"\u1120\u1121\u0001\u0000\u0000\u0000\u1121\u1124\u0001\u0000\u0000\u0000"+
		"\u1122\u1124\u0005\u02fd\u0000\u0000\u1123\u111b\u0001\u0000\u0000\u0000"+
		"\u1123\u1122\u0001\u0000\u0000\u0000\u1124\u1132\u0001\u0000\u0000\u0000"+
		"\u1125\u112e\u0005\u02f8\u0000\u0000\u1126\u112b\u0003\u01b0\u00d8\u0000"+
		"\u1127\u1129\u0005\u001b\u0000\u0000\u1128\u1127\u0001\u0000\u0000\u0000"+
		"\u1128\u1129\u0001\u0000\u0000\u0000\u1129\u112a\u0001\u0000\u0000\u0000"+
		"\u112a\u112c\u0003\u01ca\u00e5\u0000\u112b\u1128\u0001\u0000\u0000\u0000"+
		"\u112b\u112c\u0001\u0000\u0000\u0000\u112c\u112f\u0001\u0000\u0000\u0000"+
		"\u112d\u112f\u0005\u02fd\u0000\u0000\u112e\u1126\u0001\u0000\u0000\u0000"+
		"\u112e\u112d\u0001\u0000\u0000\u0000\u112f\u1131\u0001\u0000\u0000\u0000"+
		"\u1130\u1125\u0001\u0000\u0000\u0000\u1131\u1134\u0001\u0000\u0000\u0000"+
		"\u1132\u1130\u0001\u0000\u0000\u0000\u1132\u1133\u0001\u0000\u0000\u0000"+
		"\u1133\u018d\u0001\u0000\u0000\u0000\u1134\u1132\u0001\u0000\u0000\u0000"+
		"\u1135\u1137\u0007\u001b\u0000\u0000\u1136\u1138\u0003\u01fc\u00fe\u0000"+
		"\u1137\u1136\u0001\u0000\u0000\u0000\u1137\u1138\u0001\u0000\u0000\u0000"+
		"\u1138\u113c\u0001\u0000\u0000\u0000\u1139\u113a\u0005\u00e6\u0000\u0000"+
		"\u113a\u113c\u0007\u001c\u0000\u0000\u113b\u1135\u0001\u0000\u0000\u0000"+
		"\u113b\u1139\u0001\u0000\u0000\u0000\u113c\u018f\u0001\u0000\u0000\u0000"+
		"\u113d\u113e\u0005\u025e\u0000\u0000\u113e\u1148\u0005\u01ad\u0000\u0000"+
		"\u113f\u1140\u0005\u0305\u0000\u0000\u1140\u1148\u0005\u01ad\u0000\u0000"+
		"\u1141\u1142\u0005\u0085\u0000\u0000\u1142\u1148\u0005\u01ec\u0000\u0000"+
		"\u1143\u1144\u0005\u0305\u0000\u0000\u1144\u1148\u0005\u00e2\u0000\u0000"+
		"\u1145\u1146\u0005\u025e\u0000\u0000\u1146\u1148\u0005\u00e2\u0000\u0000"+
		"\u1147\u113d\u0001\u0000\u0000\u0000\u1147\u113f\u0001\u0000\u0000\u0000"+
		"\u1147\u1141\u0001\u0000\u0000\u0000\u1147\u1143\u0001\u0000\u0000\u0000"+
		"\u1147\u1145\u0001\u0000\u0000\u0000\u1148\u0191\u0001\u0000\u0000\u0000"+
		"\u1149\u114a\u0003\u0190\u00c8\u0000\u114a\u0193\u0001\u0000\u0000\u0000"+
		"\u114b\u114c\u0003\u0190\u00c8\u0000\u114c\u0195\u0001\u0000\u0000\u0000"+
		"\u114d\u114e\u0007\u001d\u0000\u0000\u114e\u1156\u0003\u0192\u00c9\u0000"+
		"\u114f\u1150\u0007\u001d\u0000\u0000\u1150\u1151\u0005+\u0000\u0000\u1151"+
		"\u1152\u0003\u0192\u00c9\u0000\u1152\u1153\u0005\u0017\u0000\u0000\u1153"+
		"\u1154\u0003\u0194\u00ca\u0000\u1154\u1156\u0001\u0000\u0000\u0000\u1155"+
		"\u114d\u0001\u0000\u0000\u0000\u1155\u114f\u0001\u0000\u0000\u0000\u1156"+
		"\u0197\u0001\u0000\u0000\u0000\u1157\u1164\u0003\u0210\u0108\u0000\u1158"+
		"\u1159\u0005\u019f\u0000\u0000\u1159\u115a\u00056\u0000\u0000\u115a\u115f"+
		"\u0003\u01b0\u00d8\u0000\u115b\u115c\u0005\u02f8\u0000\u0000\u115c\u115e"+
		"\u0003\u01b0\u00d8\u0000\u115d\u115b\u0001\u0000\u0000\u0000\u115e\u1161"+
		"\u0001\u0000\u0000\u0000\u115f\u115d\u0001\u0000\u0000\u0000\u115f\u1160"+
		"\u0001\u0000\u0000\u0000\u1160\u1164\u0001\u0000\u0000\u0000\u1161\u115f"+
		"\u0001\u0000\u0000\u0000\u1162\u1164\u0003\u019e\u00cf\u0000\u1163\u1157"+
		"\u0001\u0000\u0000\u0000\u1163\u1158\u0001\u0000\u0000\u0000\u1163\u1162"+
		"\u0001\u0000\u0000\u0000\u1164\u0199\u0001\u0000\u0000\u0000\u1165\u1166"+
		"\u0005\u0285\u0000\u0000\u1166\u1167\u0003\u0210\u0108\u0000\u1167\u1168"+
		"\u0005\u001b\u0000\u0000\u1168\u1169\u0005\u02fe\u0000\u0000\u1169\u116a"+
		"\u0003\u0198\u00cc\u0000\u116a\u116b\u0005\u02ff\u0000\u0000\u116b\u019b"+
		"\u0001\u0000\u0000\u0000\u116c\u116e\u0007\u001e\u0000\u0000\u116d\u116f"+
		"\u0007\u001f\u0000\u0000\u116e\u116d\u0001\u0000\u0000\u0000\u116e\u116f"+
		"\u0001\u0000\u0000\u0000\u116f\u1173\u0001\u0000\u0000\u0000\u1170\u1172"+
		"\u0005\u02fe\u0000\u0000\u1171\u1170\u0001\u0000\u0000\u0000\u1172\u1175"+
		"\u0001\u0000\u0000\u0000\u1173\u1171\u0001\u0000\u0000\u0000\u1173\u1174"+
		"\u0001\u0000\u0000\u0000\u1174\u1178\u0001\u0000\u0000\u0000\u1175\u1173"+
		"\u0001\u0000\u0000\u0000\u1176\u1179\u0003\u0158\u00ac\u0000\u1177\u1179"+
		"\u0003\u017c\u00be\u0000\u1178\u1176\u0001\u0000\u0000\u0000\u1178\u1177"+
		"\u0001\u0000\u0000\u0000\u1179\u117d\u0001\u0000\u0000\u0000\u117a\u117c"+
		"\u0005\u02ff\u0000\u0000\u117b\u117a\u0001\u0000\u0000\u0000\u117c\u117f"+
		"\u0001\u0000\u0000\u0000\u117d\u117b\u0001\u0000\u0000\u0000\u117d\u117e"+
		"\u0001\u0000\u0000\u0000\u117e\u1181\u0001\u0000\u0000\u0000\u117f\u117d"+
		"\u0001\u0000\u0000\u0000\u1180\u1182\u0003\u019c\u00ce\u0000\u1181\u1180"+
		"\u0001\u0000\u0000\u0000\u1181\u1182\u0001\u0000\u0000\u0000\u1182\u019d"+
		"\u0001\u0000\u0000\u0000\u1183\u1184\u0005\u0188\u0000\u0000\u1184\u1185"+
		"\u00056\u0000\u0000\u1185\u118a\u0003\u01a0\u00d0\u0000\u1186\u1187\u0005"+
		"\u02f8\u0000\u0000\u1187";
	private static final String _serializedATNSegment2 =
		"\u1189\u0003\u01a0\u00d0\u0000\u1188\u1186\u0001\u0000\u0000\u0000\u1189"+
		"\u118c\u0001\u0000\u0000\u0000\u118a\u1188\u0001\u0000\u0000\u0000\u118a"+
		"\u118b\u0001\u0000\u0000\u0000\u118b\u019f\u0001\u0000\u0000\u0000\u118c"+
		"\u118a\u0001\u0000\u0000\u0000\u118d\u1190\u0003\u01b0\u00d8\u0000\u118e"+
		"\u1190\u0005\u0309\u0000\u0000\u118f\u118d\u0001\u0000\u0000\u0000\u118f"+
		"\u118e\u0001\u0000\u0000\u0000\u1190\u1195\u0001\u0000\u0000\u0000\u1191"+
		"\u1196\u0005\u001c\u0000\u0000\u1192\u1196\u0005\u00ab\u0000\u0000\u1193"+
		"\u1194\u0005\u0271\u0000\u0000\u1194\u1196\u0003\u01b0\u00d8\u0000\u1195"+
		"\u1191\u0001\u0000\u0000\u0000\u1195\u1192\u0001\u0000\u0000\u0000\u1195"+
		"\u1193\u0001\u0000\u0000\u0000\u1195\u1196\u0001\u0000\u0000\u0000\u1196"+
		"\u11a2\u0001\u0000\u0000\u0000\u1197\u1198\u0005\u0175\u0000\u0000\u1198"+
		"\u1199\u0007 \u0000\u0000\u1199\u119f\u0001\u0000\u0000\u0000\u119a\u119b"+
		"\u0005\u02f8\u0000\u0000\u119b\u119c\u0005\u0175\u0000\u0000\u119c\u119e"+
		"\u0007 \u0000\u0000\u119d\u119a\u0001\u0000\u0000\u0000\u119e\u11a1\u0001"+
		"\u0000\u0000\u0000\u119f\u119d\u0001\u0000\u0000\u0000\u119f\u11a0\u0001"+
		"\u0000\u0000\u0000\u11a0\u11a3\u0001\u0000\u0000\u0000\u11a1\u119f\u0001"+
		"\u0000\u0000\u0000\u11a2\u1197\u0001\u0000\u0000\u0000\u11a2\u11a3\u0001"+
		"\u0000\u0000\u0000\u11a3\u01a1\u0001\u0000\u0000\u0000\u11a4\u11a8\u0005"+
		"\u0136\u0000\u0000\u11a5\u11a9\u0005\u0305\u0000\u0000\u11a6\u11a9\u0005"+
		"\u0010\u0000\u0000\u11a7\u11a9\u0003\u01de\u00ef\u0000\u11a8\u11a5\u0001"+
		"\u0000\u0000\u0000\u11a8\u11a6\u0001\u0000\u0000\u0000\u11a8\u11a7\u0001"+
		"\u0000\u0000\u0000\u11a9\u01a3\u0001\u0000\u0000\u0000\u11aa\u11ab\u0005"+
		"\u017d\u0000\u0000\u11ab\u11ad\u0005\u0305\u0000\u0000\u11ac\u11ae\u0007"+
		"!\u0000\u0000\u11ad\u11ac\u0001\u0000\u0000\u0000\u11ad\u11ae\u0001\u0000"+
		"\u0000\u0000\u11ae\u01a5\u0001\u0000\u0000\u0000\u11af\u11b0\u0005\u00db"+
		"\u0000\u0000\u11b0\u11b2\u0007\"\u0000\u0000\u11b1\u11b3\u0005\u0305\u0000"+
		"\u0000\u11b2\u11b1\u0001\u0000\u0000\u0000\u11b2\u11b3\u0001\u0000\u0000"+
		"\u0000\u11b3\u11b4\u0001\u0000\u0000\u0000\u11b4\u11b5\u0007!\u0000\u0000"+
		"\u11b5\u11b6\u0005\u0181\u0000\u0000\u11b6\u01a7\u0001\u0000\u0000\u0000"+
		"\u11b7\u11bf\u0005\u00e3\u0000\u0000\u11b8\u11c0\u0005\u0269\u0000\u0000"+
		"\u11b9\u11ba\u0005\u0167\u0000\u0000\u11ba\u11bb\u0005\u0126\u0000\u0000"+
		"\u11bb\u11c0\u0005\u0269\u0000\u0000\u11bc\u11c0\u0005\u020a\u0000\u0000"+
		"\u11bd\u11be\u0005\u0126\u0000\u0000\u11be\u11c0\u0005\u020a\u0000\u0000"+
		"\u11bf\u11b8\u0001\u0000\u0000\u0000\u11bf\u11b9\u0001\u0000\u0000\u0000"+
		"\u11bf\u11bc\u0001\u0000\u0000\u0000\u11bf\u11bd\u0001\u0000\u0000\u0000"+
		"\u11c0\u11ca\u0001\u0000\u0000\u0000\u11c1\u11c2\u0005\u017b\u0000\u0000"+
		"\u11c2\u11c7\u0003\u01d4\u00ea\u0000\u11c3\u11c4\u0005\u02f8\u0000\u0000"+
		"\u11c4\u11c6\u0003\u01d4\u00ea\u0000\u11c5\u11c3\u0001\u0000\u0000\u0000"+
		"\u11c6\u11c9\u0001\u0000\u0000\u0000\u11c7\u11c5\u0001\u0000\u0000\u0000"+
		"\u11c7\u11c8\u0001\u0000\u0000\u0000\u11c8\u11cb\u0001\u0000\u0000\u0000"+
		"\u11c9\u11c7\u0001\u0000\u0000\u0000\u11ca\u11c1\u0001\u0000\u0000\u0000"+
		"\u11ca\u11cb\u0001\u0000\u0000\u0000\u11cb\u11d1\u0001\u0000\u0000\u0000"+
		"\u11cc\u11d0\u0005\u0171\u0000\u0000\u11cd\u11ce\u0005\u020f\u0000\u0000"+
		"\u11ce\u11d0\u0005\u0140\u0000\u0000\u11cf\u11cc\u0001\u0000\u0000\u0000"+
		"\u11cf\u11cd\u0001\u0000\u0000\u0000\u11d0\u11d3\u0001\u0000\u0000\u0000"+
		"\u11d1\u11cf\u0001\u0000\u0000\u0000\u11d1\u11d2\u0001\u0000\u0000\u0000"+
		"\u11d2\u01a9\u0001\u0000\u0000\u0000\u11d3\u11d1\u0001\u0000\u0000\u0000"+
		"\u11d4\u11d9\u0003\u01ac\u00d6\u0000\u11d5\u11d6\u0005\u02f8\u0000\u0000"+
		"\u11d6\u11d8\u0003\u01ac\u00d6\u0000\u11d7\u11d5\u0001\u0000\u0000\u0000"+
		"\u11d8\u11db\u0001\u0000\u0000\u0000\u11d9\u11d7\u0001\u0000\u0000\u0000"+
		"\u11d9\u11da\u0001\u0000\u0000\u0000\u11da\u01ab\u0001\u0000\u0000\u0000"+
		"\u11db\u11d9\u0001\u0000\u0000\u0000\u11dc\u11e6\u0003\u01b0\u00d8\u0000"+
		"\u11dd\u11de\u0005\u02fe\u0000\u0000\u11de\u11df\u0003\u01cc\u00e6\u0000"+
		"\u11df\u11e0\u0005\u02ff\u0000\u0000\u11e0\u11e3\u0005\u0317\u0000\u0000"+
		"\u11e1\u11e4\u0003\u01b0\u00d8\u0000\u11e2\u11e4\u0003\u01b6\u00db\u0000"+
		"\u11e3\u11e1\u0001\u0000\u0000\u0000\u11e3\u11e2\u0001\u0000\u0000\u0000"+
		"\u11e4\u11e6\u0001\u0000\u0000\u0000\u11e5\u11dc\u0001\u0000\u0000\u0000"+
		"\u11e5\u11dd\u0001\u0000\u0000\u0000\u11e6\u01ad\u0001\u0000\u0000\u0000"+
		"\u11e7\u11e8\u0005\u01e1\u0000\u0000\u11e8\u11e9\u0003\u018c\u00c6\u0000"+
		"\u11e9\u01af\u0001\u0000\u0000\u0000\u11ea\u11eb\u0006\u00d8\uffff\uffff"+
		"\u0000\u11eb\u1235\u0005\u0172\u0000\u0000\u11ec\u1235\u0005\u0086\u0000"+
		"\u0000\u11ed\u1235\u0005\u0089\u0000\u0000\u11ee\u1235\u0005\u008a\u0000"+
		"\u0000\u11ef\u1235\u0005\u008b\u0000\u0000\u11f0\u1235\u0005\u008d\u0000"+
		"\u0000\u11f1\u1235\u0005\u009b\u0000\u0000\u11f2\u1235\u0005\u0305\u0000"+
		"\u0000\u11f3\u1235\u0005\u0306\u0000\u0000\u11f4\u1235\u0005\u0304\u0000"+
		"\u0000\u11f5\u1235\u0005\u0308\u0000\u0000\u11f6\u1235\u0005\u0302\u0000"+
		"\u0000\u11f7\u1235\u0005\u0303\u0000\u0000\u11f8\u11fa\u0005\u02fc\u0000"+
		"\u0000\u11f9\u11fb\b#\u0000\u0000\u11fa\u11f9\u0001\u0000\u0000\u0000"+
		"\u11fb\u11fc\u0001\u0000\u0000\u0000\u11fc\u11fa\u0001\u0000\u0000\u0000"+
		"\u11fc\u11fd\u0001\u0000\u0000\u0000\u11fd\u11fe\u0001\u0000\u0000\u0000"+
		"\u11fe\u1235\u0005\u02fc\u0000\u0000\u11ff\u1200\u0005\u02fb\u0000\u0000"+
		"\u1200\u1202\u0003\u0200\u0100\u0000\u1201\u1203\b#\u0000\u0000\u1202"+
		"\u1201\u0001\u0000\u0000\u0000\u1203\u1204\u0001\u0000\u0000\u0000\u1204"+
		"\u1202\u0001\u0000\u0000\u0000\u1204\u1205\u0001\u0000\u0000\u0000\u1205"+
		"\u1206\u0001\u0000\u0000\u0000\u1206\u1207\u0005\u02fb\u0000\u0000\u1207"+
		"\u1208\u0003\u0200\u0100\u0000\u1208\u1209\u0005\u02fb\u0000\u0000\u1209"+
		"\u1235\u0001\u0000\u0000\u0000\u120a\u1235\u0003\u01b2\u00d9\u0000\u120b"+
		"\u1235\u0003\u017c\u00be\u0000\u120c\u1235\u0003\u01b6\u00db\u0000\u120d"+
		"\u120e\u0005\u02fe\u0000\u0000\u120e\u120f\u0003\u01b0\u00d8\u0000\u120f"+
		"\u1210\u0005\u02ff\u0000\u0000\u1210\u1235\u0001\u0000\u0000\u0000\u1211"+
		"\u1212\u0003\u01c2\u00e1\u0000\u1212\u1213\u0005\u0308\u0000\u0000\u1213"+
		"\u1235\u0001\u0000\u0000\u0000\u1214\u1215\u0007$\u0000\u0000\u1215\u1235"+
		"\u0003\u01b0\u00d8\u001e\u1216\u1217\u0007%\u0000\u0000\u1217\u1235\u0003"+
		"\u01b0\u00d8\u001d\u1218\u1219\u0007&\u0000\u0000\u1219\u1235\u0003\u01b0"+
		"\u00d8\u0011\u121a\u1235\u0003\u01de\u00ef\u0000\u121b\u1235\u0003\u0200"+
		"\u0100\u0000\u121c\u121d\u0005?\u0000\u0000\u121d\u121e\u0005\u02fe\u0000"+
		"\u0000\u121e\u121f\u0003\u01b0\u00d8\u0000\u121f\u1220\u0005\u001b\u0000"+
		"\u0000\u1220\u1221\u0003\u01d6\u00eb\u0000\u1221\u1222\u0005\u02ff\u0000"+
		"\u0000\u1222\u1235\u0001\u0000\u0000\u0000\u1223\u1224\u0003\u0206\u0103"+
		"\u0000\u1224\u1225\u0005\u0307\u0000\u0000\u1225\u1226\u0003\u0208\u0104"+
		"\u0000\u1226\u1235\u0001\u0000\u0000\u0000\u1227\u1235\u0003\u01b4\u00da"+
		"\u0000\u1228\u1229\u0003\u01d6\u00eb\u0000\u1229\u122a\u0003\u01b0\u00d8"+
		"\t\u122a\u1235\u0001\u0000\u0000\u0000\u122b\u1235\u0003\u01c8\u00e4\u0000"+
		"\u122c\u1235\u0003\u01e0\u00f0\u0000\u122d\u122e\u0005\u00d3\u0000\u0000"+
		"\u122e\u1235\u0003\u01b0\u00d8\u0003\u122f\u1235\u0005\u030b\u0000\u0000"+
		"\u1230\u1231\u0005\u02fe\u0000\u0000\u1231\u1232\u0003\u0158\u00ac\u0000"+
		"\u1232\u1233\u0005\u02ff\u0000\u0000\u1233\u1235\u0001\u0000\u0000\u0000"+
		"\u1234\u11ea\u0001\u0000\u0000\u0000\u1234\u11ec\u0001\u0000\u0000\u0000"+
		"\u1234\u11ed\u0001\u0000\u0000\u0000\u1234\u11ee\u0001\u0000\u0000\u0000"+
		"\u1234\u11ef\u0001\u0000\u0000\u0000\u1234\u11f0\u0001\u0000\u0000\u0000"+
		"\u1234\u11f1\u0001\u0000\u0000\u0000\u1234\u11f2\u0001\u0000\u0000\u0000"+
		"\u1234\u11f3\u0001\u0000\u0000\u0000\u1234\u11f4\u0001\u0000\u0000\u0000"+
		"\u1234\u11f5\u0001\u0000\u0000\u0000\u1234\u11f6\u0001\u0000\u0000\u0000"+
		"\u1234\u11f7\u0001\u0000\u0000\u0000\u1234\u11f8\u0001\u0000\u0000\u0000"+
		"\u1234\u11ff\u0001\u0000\u0000\u0000\u1234\u120a\u0001\u0000\u0000\u0000"+
		"\u1234\u120b\u0001\u0000\u0000\u0000\u1234\u120c\u0001\u0000\u0000\u0000"+
		"\u1234\u120d\u0001\u0000\u0000\u0000\u1234\u1211\u0001\u0000\u0000\u0000"+
		"\u1234\u1214\u0001\u0000\u0000\u0000\u1234\u1216\u0001\u0000\u0000\u0000"+
		"\u1234\u1218\u0001\u0000\u0000\u0000\u1234\u121a\u0001\u0000\u0000\u0000"+
		"\u1234\u121b\u0001\u0000\u0000\u0000\u1234\u121c\u0001\u0000\u0000\u0000"+
		"\u1234\u1223\u0001\u0000\u0000\u0000\u1234\u1227\u0001\u0000\u0000\u0000"+
		"\u1234\u1228\u0001\u0000\u0000\u0000\u1234\u122b\u0001\u0000\u0000\u0000"+
		"\u1234\u122c\u0001\u0000\u0000\u0000\u1234\u122d\u0001\u0000\u0000\u0000"+
		"\u1234\u122f\u0001\u0000\u0000\u0000\u1234\u1230\u0001\u0000\u0000\u0000"+
		"\u1235\u1299\u0001\u0000\u0000\u0000\u1236\u1237\n\u001b\u0000\u0000\u1237"+
		"\u1238\u0007\'\u0000\u0000\u1238\u1298\u0003\u01b0\u00d8\u001c\u1239\u123a"+
		"\n\u001a\u0000\u0000\u123a\u123b\u0007(\u0000\u0000\u123b\u1298\u0003"+
		"\u01b0\u00d8\u001b\u123c\u123d\n\u0019\u0000\u0000\u123d\u123e\u0007)"+
		"\u0000\u0000\u123e\u1298\u0003\u01b0\u00d8\u001a\u123f\u1240\n\u0018\u0000"+
		"\u0000\u1240\u1241\u0007*\u0000\u0000\u1241\u1298\u0003\u01b0\u00d8\u0019"+
		"\u1242\u1246\n\u0017\u0000\u0000\u1243\u1244\u0005\u016d\u0000\u0000\u1244"+
		"\u1247\u0005\u0135\u0000\u0000\u1245\u1247\u0005\u0135\u0000\u0000\u1246"+
		"\u1243\u0001\u0000\u0000\u0000\u1246\u1245\u0001\u0000\u0000\u0000\u1247"+
		"\u1248\u0001\u0000\u0000\u0000\u1248\u1298\u0003\u01b0\u00d8\u0018\u1249"+
		"\u124b\n\u0016\u0000\u0000\u124a\u124c\u0005\u016d\u0000\u0000\u124b\u124a"+
		"\u0001\u0000\u0000\u0000\u124b\u124c\u0001\u0000\u0000\u0000\u124c\u124d"+
		"\u0001\u0000\u0000\u0000\u124d\u124e\u0005+\u0000\u0000\u124e\u124f\u0003"+
		"\u01b0\u00d8\u0000\u124f\u1250\u0005\u0017\u0000\u0000\u1250\u1251\u0003"+
		"\u01b0\u00d8\u0017\u1251\u1298\u0001\u0000\u0000\u0000\u1252\u1253\n\u0015"+
		"\u0000\u0000\u1253\u1254\u0005\u0109\u0000\u0000\u1254\u1298\u0003\u01b0"+
		"\u00d8\u0016\u1255\u1256\n\u0014\u0000\u0000\u1256\u1257\u0007+\u0000"+
		"\u0000\u1257\u1298\u0003\u01b0\u00d8\u0015\u1258\u1259\n\u0012\u0000\u0000"+
		"\u1259\u125b\u0005\u0121\u0000\u0000\u125a\u125c\u0005\u016d\u0000\u0000"+
		"\u125b\u125a\u0001\u0000\u0000\u0000\u125b\u125c\u0001\u0000\u0000\u0000"+
		"\u125c\u125d\u0001\u0000\u0000\u0000\u125d\u125e\u0005\u00b8\u0000\u0000"+
		"\u125e\u125f\u0005\u00ec\u0000\u0000\u125f\u1298\u0003\u01b0\u00d8\u0013"+
		"\u1260\u1261\n!\u0000\u0000\u1261\u1262\u0005\u0300\u0000\u0000\u1262"+
		"\u1263\u0003\u01b0\u00d8\u0000\u1263\u1264\u0005\u0301\u0000\u0000\u1264"+
		"\u1298\u0001\u0000\u0000\u0000\u1265\u1266\n\u001c\u0000\u0000\u1266\u1298"+
		"\u0005\u0313\u0000\u0000\u1267\u1268\n\u0013\u0000\u0000\u1268\u126d\u0005"+
		"\u0121\u0000\u0000\u1269\u126e\u0003\u01b2\u00d9\u0000\u126a\u126e\u0005"+
		"\u0172\u0000\u0000\u126b\u126c\u0005\u016d\u0000\u0000\u126c\u126e\u0005"+
		"\u0172\u0000\u0000\u126d\u1269\u0001\u0000\u0000\u0000\u126d\u126a\u0001"+
		"\u0000\u0000\u0000\u126d\u126b\u0001\u0000\u0000\u0000\u126e\u1298\u0001"+
		"\u0000\u0000\u0000\u126f\u1279\n\u000b\u0000\u0000\u1270\u1272\u0005\u0300"+
		"\u0000\u0000\u1271\u1273\u0003\u01b0\u00d8\u0000\u1272\u1271\u0001\u0000"+
		"\u0000\u0000\u1272\u1273\u0001\u0000\u0000\u0000\u1273\u1274\u0001\u0000"+
		"\u0000\u0000\u1274\u1276\u0005\u02f9\u0000\u0000\u1275\u1277\u0003\u01b0"+
		"\u00d8\u0000\u1276\u1275\u0001\u0000\u0000\u0000\u1276\u1277\u0001\u0000"+
		"\u0000\u0000\u1277\u1278\u0001\u0000\u0000\u0000\u1278\u127a\u0005\u0301"+
		"\u0000\u0000\u1279\u1270\u0001\u0000\u0000\u0000\u127a\u127b\u0001\u0000"+
		"\u0000\u0000\u127b\u1279\u0001\u0000\u0000\u0000\u127b\u127c\u0001\u0000"+
		"\u0000\u0000\u127c\u1298\u0001\u0000\u0000\u0000\u127d\u1280\n\n\u0000"+
		"\u0000\u127e\u127f\u0005\u02fa\u0000\u0000\u127f\u1281\u0003\u01d6\u00eb"+
		"\u0000\u1280\u127e\u0001\u0000\u0000\u0000\u1281\u1282\u0001\u0000\u0000"+
		"\u0000\u1282\u1280\u0001\u0000\u0000\u0000\u1282\u1283\u0001\u0000\u0000"+
		"\u0000\u1283\u1298\u0001\u0000\u0000\u0000\u1284\u1285\n\b\u0000\u0000"+
		"\u1285\u1286\u0005\u0121\u0000\u0000\u1286\u1287\u0005\u017b\u0000\u0000"+
		"\u1287\u1288\u0005\u02fe\u0000\u0000\u1288\u1289\u0003\u01d6\u00eb\u0000"+
		"\u1289\u128a\u0005\u02ff\u0000\u0000\u128a\u1298\u0001\u0000\u0000\u0000"+
		"\u128b\u128c\n\u0007\u0000\u0000\u128c\u128f\u0005\u0307\u0000\u0000\u128d"+
		"\u1290\u0003\u0200\u0100\u0000\u128e\u1290\u0005\u02fd\u0000\u0000\u128f"+
		"\u128d\u0001\u0000\u0000\u0000\u128f\u128e\u0001\u0000\u0000\u0000\u1290"+
		"\u1298\u0001\u0000\u0000\u0000\u1291\u1292\n\u0004\u0000\u0000\u1292\u1293"+
		"\u0005!\u0000\u0000\u1293\u1294\u0005\u0242\u0000\u0000\u1294\u1295\u0005"+
		"\u028e\u0000\u0000\u1295\u1296\u0001\u0000\u0000\u0000\u1296\u1298\u0005"+
		"\u0308\u0000\u0000\u1297\u1236\u0001\u0000\u0000\u0000\u1297\u1239\u0001"+
		"\u0000\u0000\u0000\u1297\u123c\u0001\u0000\u0000\u0000\u1297\u123f\u0001"+
		"\u0000\u0000\u0000\u1297\u1242\u0001\u0000\u0000\u0000\u1297\u1249\u0001"+
		"\u0000\u0000\u0000\u1297\u1252\u0001\u0000\u0000\u0000\u1297\u1255\u0001"+
		"\u0000\u0000\u0000\u1297\u1258\u0001\u0000\u0000\u0000\u1297\u1260\u0001"+
		"\u0000\u0000\u0000\u1297\u1265\u0001\u0000\u0000\u0000\u1297\u1267\u0001"+
		"\u0000\u0000\u0000\u1297\u126f\u0001\u0000\u0000\u0000\u1297\u127d\u0001"+
		"\u0000\u0000\u0000\u1297\u1284\u0001\u0000\u0000\u0000\u1297\u128b\u0001"+
		"\u0000\u0000\u0000\u1297\u1291\u0001\u0000\u0000\u0000\u1298\u129b\u0001"+
		"\u0000\u0000\u0000\u1299\u1297\u0001\u0000\u0000\u0000\u1299\u129a\u0001"+
		"\u0000\u0000\u0000\u129a\u01b1\u0001\u0000\u0000\u0000\u129b\u1299\u0001"+
		"\u0000\u0000\u0000\u129c\u129d\u0006\u00d9\uffff\uffff\u0000\u129d\u12a2"+
		"\u0005\u0259\u0000\u0000\u129e\u12a2\u0005\u00da\u0000\u0000\u129f\u12a0"+
		"\u0005\u016d\u0000\u0000\u12a0\u12a2\u0003\u01b2\u00d9\u0003\u12a1\u129c"+
		"\u0001\u0000\u0000\u0000\u12a1\u129e\u0001\u0000\u0000\u0000\u12a1\u129f"+
		"\u0001\u0000\u0000\u0000\u12a2\u12ab\u0001\u0000\u0000\u0000\u12a3\u12a4"+
		"\n\u0002\u0000\u0000\u12a4\u12a5\u0005\u0017\u0000\u0000\u12a5\u12aa\u0003"+
		"\u01b2\u00d9\u0003\u12a6\u12a7\n\u0001\u0000\u0000\u12a7\u12a8\u0005\u0187"+
		"\u0000\u0000\u12a8\u12aa\u0003\u01b2\u00d9\u0002\u12a9\u12a3\u0001\u0000"+
		"\u0000\u0000\u12a9\u12a6\u0001\u0000\u0000\u0000\u12aa\u12ad\u0001\u0000"+
		"\u0000\u0000\u12ab\u12a9\u0001\u0000\u0000\u0000\u12ab\u12ac\u0001\u0000"+
		"\u0000\u0000\u12ac\u01b3\u0001\u0000\u0000\u0000\u12ad\u12ab\u0001\u0000"+
		"\u0000\u0000\u12ae\u12af\u0005>\u0000\u0000\u12af\u12b5\u0003\u01b0\u00d8"+
		"\u0000\u12b0\u12b1\u0005\u0281\u0000\u0000\u12b1\u12b2\u0003\u01b0\u00d8"+
		"\u0000\u12b2\u12b3\u0005\u0240\u0000\u0000\u12b3\u12b4\u0003\u01b0\u00d8"+
		"\u0000\u12b4\u12b6\u0001\u0000\u0000\u0000\u12b5\u12b0\u0001\u0000\u0000"+
		"\u0000\u12b6\u12b7\u0001\u0000\u0000\u0000\u12b7\u12b5\u0001\u0000\u0000"+
		"\u0000\u12b7\u12b8\u0001\u0000\u0000\u0000\u12b8\u12bb\u0001\u0000\u0000"+
		"\u0000\u12b9\u12ba\u0005\u00c2\u0000\u0000\u12ba\u12bc\u0003\u01b0\u00d8"+
		"\u0000\u12bb\u12b9\u0001\u0000\u0000\u0000\u12bb\u12bc\u0001\u0000\u0000"+
		"\u0000\u12bc\u12bd\u0001\u0000\u0000\u0000\u12bd\u12be\u0005\u00c6\u0000"+
		"\u0000\u12be\u12d0\u0001\u0000\u0000\u0000\u12bf\u12c5\u0005>\u0000\u0000"+
		"\u12c0\u12c1\u0005\u0281\u0000\u0000\u12c1\u12c2\u0003\u01ea\u00f5\u0000"+
		"\u12c2\u12c3\u0005\u0240\u0000\u0000\u12c3\u12c4\u0003\u01b0\u00d8\u0000"+
		"\u12c4\u12c6\u0001\u0000\u0000\u0000\u12c5\u12c0\u0001\u0000\u0000\u0000"+
		"\u12c6\u12c7\u0001\u0000\u0000\u0000\u12c7\u12c5\u0001\u0000\u0000\u0000"+
		"\u12c7\u12c8\u0001\u0000\u0000\u0000\u12c8\u12cb\u0001\u0000\u0000\u0000"+
		"\u12c9\u12ca\u0005\u00c2\u0000\u0000\u12ca\u12cc\u0003\u01b0\u00d8\u0000"+
		"\u12cb\u12c9\u0001\u0000\u0000\u0000\u12cb\u12cc\u0001\u0000\u0000\u0000"+
		"\u12cc\u12cd\u0001\u0000\u0000\u0000\u12cd\u12ce\u0005\u00c6\u0000\u0000"+
		"\u12ce\u12d0\u0001\u0000\u0000\u0000\u12cf\u12ae\u0001\u0000\u0000\u0000"+
		"\u12cf\u12bf\u0001\u0000\u0000\u0000\u12d0\u01b5\u0001\u0000\u0000\u0000"+
		"\u12d1\u12d2\u0005\u02fe\u0000\u0000\u12d2\u12d7\u0003\u01b0\u00d8\u0000"+
		"\u12d3\u12d4\u0005\u02f8\u0000\u0000\u12d4\u12d6\u0003\u01b0\u00d8\u0000"+
		"\u12d5\u12d3\u0001\u0000\u0000\u0000\u12d6\u12d9\u0001\u0000\u0000\u0000"+
		"\u12d7\u12d5\u0001\u0000\u0000\u0000\u12d7\u12d8\u0001\u0000\u0000\u0000"+
		"\u12d8\u12da\u0001\u0000\u0000\u0000\u12d9\u12d7\u0001\u0000\u0000\u0000"+
		"\u12da\u12db\u0005\u02ff\u0000\u0000\u12db\u01b7\u0001\u0000\u0000\u0000"+
		"\u12dc\u12de\u0005\u02fe\u0000\u0000\u12dd\u12dc\u0001\u0000\u0000\u0000"+
		"\u12dd\u12de\u0001\u0000\u0000\u0000\u12de\u12df\u0001\u0000\u0000\u0000"+
		"\u12df\u12e4\u0003\u01b6\u00db\u0000\u12e0\u12e1\u0005\u02f8\u0000\u0000"+
		"\u12e1\u12e3\u0003\u01b6\u00db\u0000\u12e2\u12e0\u0001\u0000\u0000\u0000"+
		"\u12e3\u12e6\u0001\u0000\u0000\u0000\u12e4\u12e2\u0001\u0000\u0000\u0000"+
		"\u12e4\u12e5\u0001\u0000\u0000\u0000\u12e5\u12e8\u0001\u0000\u0000\u0000"+
		"\u12e6\u12e4\u0001\u0000\u0000\u0000\u12e7\u12e9\u0005\u02ff\u0000\u0000"+
		"\u12e8\u12e7\u0001\u0000\u0000\u0000\u12e8\u12e9\u0001\u0000\u0000\u0000"+
		"\u12e9\u01b9\u0001\u0000\u0000\u0000\u12ea\u12ec\u0007,\u0000\u0000\u12eb"+
		"\u12ea\u0001\u0000\u0000\u0000\u12eb\u12ec\u0001\u0000\u0000\u0000\u12ec"+
		"\u12ee\u0001\u0000\u0000\u0000\u12ed\u12ef\u0003\u0200\u0100\u0000\u12ee"+
		"\u12ed\u0001\u0000\u0000\u0000\u12ee\u12ef\u0001\u0000\u0000\u0000\u12ef"+
		"\u12f0\u0001\u0000\u0000\u0000\u12f0\u12f2\u0003\u01d6\u00eb\u0000\u12f1"+
		"\u12eb\u0001\u0000\u0000\u0000\u12f1\u12f2\u0001\u0000\u0000\u0000\u12f2"+
		"\u01bb\u0001\u0000\u0000\u0000\u12f3\u12f8\u0003\u01ba\u00dd\u0000\u12f4"+
		"\u12f5\u0005\u02f8\u0000\u0000\u12f5\u12f7\u0003\u01ba\u00dd\u0000\u12f6"+
		"\u12f4\u0001\u0000\u0000\u0000\u12f7\u12fa\u0001\u0000\u0000\u0000\u12f8"+
		"\u12f6\u0001\u0000\u0000\u0000\u12f8\u12f9\u0001\u0000\u0000\u0000\u12f9"+
		"\u01bd\u0001\u0000\u0000\u0000\u12fa\u12f8\u0001\u0000\u0000\u0000\u12fb"+
		"\u1300\u0003\u0200\u0100\u0000\u12fc\u12fd\u0005\u02fe\u0000\u0000\u12fd"+
		"\u12fe\u0003\u01bc\u00de\u0000\u12fe\u12ff\u0005\u02ff\u0000\u0000\u12ff"+
		"\u1301\u0001\u0000\u0000\u0000\u1300\u12fc\u0001\u0000\u0000\u0000\u1300"+
		"\u1301\u0001\u0000\u0000\u0000\u1301\u01bf\u0001\u0000\u0000\u0000\u1302"+
		"\u1307\u0003\u01be\u00df\u0000\u1303\u1304\u0005\u02f8\u0000\u0000\u1304"+
		"\u1306\u0003\u01be\u00df\u0000\u1305\u1303\u0001\u0000\u0000\u0000\u1306"+
		"\u1309\u0001\u0000\u0000\u0000\u1307\u1305\u0001\u0000\u0000\u0000\u1307"+
		"\u1308\u0001\u0000\u0000\u0000\u1308\u01c1\u0001\u0000\u0000\u0000\u1309"+
		"\u1307\u0001\u0000\u0000\u0000\u130a\u139b\u0005\u02cf\u0000\u0000\u130b"+
		"\u139b\u0005\u02e8\u0000\u0000\u130c\u139b\u0005,\u0000\u0000\u130d\u139b"+
		"\u0005\u02d0\u0000\u0000\u130e\u1312\u0005.\u0000\u0000\u130f\u1310\u0005"+
		"\u02fe\u0000\u0000\u1310\u1311\u0005\u0305\u0000\u0000\u1311\u1313\u0005"+
		"\u02ff\u0000\u0000\u1312\u130f\u0001\u0000\u0000\u0000\u1312\u1313\u0001"+
		"\u0000\u0000\u0000\u1313\u139b\u0001\u0000\u0000\u0000\u1314\u1318\u0005"+
		"\u02d1\u0000\u0000\u1315\u1316\u0005\u02fe\u0000\u0000\u1316\u1317\u0005"+
		"\u0305\u0000\u0000\u1317\u1319\u0005\u02ff\u0000\u0000\u1318\u1315\u0001"+
		"\u0000\u0000\u0000\u1318\u1319\u0001\u0000\u0000\u0000\u1319\u139b\u0001"+
		"\u0000\u0000\u0000\u131a\u139b\u0005\u02d2\u0000\u0000\u131b\u139b\u0005"+
		"2\u0000\u0000\u131c\u139b\u0005\u02d3\u0000\u0000\u131d\u139b\u0005\u02d4"+
		"\u0000\u0000\u131e\u1322\u0005E\u0000\u0000\u131f\u1320\u0005\u02fe\u0000"+
		"\u0000\u1320\u1321\u0005\u0305\u0000\u0000\u1321\u1323\u0005\u02ff\u0000"+
		"\u0000\u1322\u131f\u0001\u0000\u0000\u0000\u1322\u1323\u0001\u0000\u0000"+
		"\u0000\u1323\u139b\u0001\u0000\u0000\u0000\u1324\u1328\u0005G\u0000\u0000"+
		"\u1325\u1326\u0005\u02fe\u0000\u0000\u1326\u1327\u0005\u0305\u0000\u0000"+
		"\u1327\u1329\u0005\u02ff\u0000\u0000\u1328\u1325\u0001\u0000\u0000\u0000"+
		"\u1328\u1329\u0001\u0000\u0000\u0000\u1329\u139b\u0001\u0000\u0000\u0000"+
		"\u132a\u132e\u0005\u02d5\u0000\u0000\u132b\u132c\u0005\u02fe\u0000\u0000"+
		"\u132c\u132d\u0005\u0305\u0000\u0000\u132d\u132f\u0005\u02ff\u0000\u0000"+
		"\u132e\u132b\u0001\u0000\u0000\u0000\u132e\u132f\u0001\u0000\u0000\u0000"+
		"\u132f\u139b\u0001\u0000\u0000\u0000\u1330\u139b\u0005\u02d6\u0000\u0000"+
		"\u1331\u139b\u0005\u02d7\u0000\u0000\u1332\u139b\u0005\u0093\u0000\u0000"+
		"\u1333\u1339\u0005\u0099\u0000\u0000\u1334\u1335\u0005\u02fe\u0000\u0000"+
		"\u1335\u1336\u0005\u0305\u0000\u0000\u1336\u1337\u0005\u02f8\u0000\u0000"+
		"\u1337\u1338\u0005\u0305\u0000\u0000\u1338\u133a\u0005\u02ff\u0000\u0000"+
		"\u1339\u1334\u0001\u0000\u0000\u0000\u1339\u133a\u0001\u0000\u0000\u0000"+
		"\u133a\u139b\u0001\u0000\u0000\u0000\u133b\u133c\u0005\u00bb\u0000\u0000"+
		"\u133c\u139b\u0005\u01ae\u0000\u0000\u133d\u139b\u0005\u02d8\u0000\u0000"+
		"\u133e\u139b\u0005\u02d9\u0000\u0000\u133f\u139b\u0005\u02da\u0000\u0000"+
		"\u1340\u139b\u0005\u011a\u0000\u0000\u1341\u139b\u0005\u02dc\u0000\u0000"+
		"\u1342\u139b\u0005\u02db\u0000\u0000\u1343\u139b\u0005\u02dd\u0000\u0000"+
		"\u1344\u139b\u0005\u011b\u0000\u0000\u1345\u1347\u0005\u011e\u0000\u0000"+
		"\u1346\u1348\u0005\u00dc\u0000\u0000\u1347\u1346\u0001\u0000\u0000\u0000"+
		"\u1347\u1348\u0001\u0000\u0000\u0000\u1348\u134a\u0001\u0000\u0000\u0000"+
		"\u1349\u134b\u0005\u0305\u0000\u0000\u134a\u1349\u0001\u0000\u0000\u0000"+
		"\u134a\u134b\u0001\u0000\u0000\u0000\u134b\u139b\u0001\u0000\u0000\u0000"+
		"\u134c\u139b\u0005\u02de\u0000\u0000\u134d\u139b\u0005\u02df\u0000\u0000"+
		"\u134e\u139b\u0005\u02e0\u0000\u0000\u134f\u139b\u0005\u02e1\u0000\u0000"+
		"\u1350\u139b\u0005\u02e2\u0000\u0000\u1351\u139b\u0005\u02e3\u0000\u0000"+
		"\u1352\u139b\u0005\u02e4\u0000\u0000\u1353\u1359\u0005\u0177\u0000\u0000"+
		"\u1354\u1355\u0005\u02fe\u0000\u0000\u1355\u1356\u0005\u0305\u0000\u0000"+
		"\u1356\u1357\u0005\u02f8\u0000\u0000\u1357\u1358\u0005\u0305\u0000\u0000"+
		"\u1358\u135a\u0005\u02ff\u0000\u0000\u1359\u1354\u0001\u0000\u0000\u0000"+
		"\u1359\u135a\u0001\u0000\u0000\u0000\u135a\u139b\u0001\u0000\u0000\u0000"+
		"\u135b\u139b\u0005\u01a2\u0000\u0000\u135c\u139b\u0005\u02e5\u0000\u0000"+
		"\u135d\u139b\u0005\u02e6\u0000\u0000\u135e\u139b\u0005\u02e7\u0000\u0000"+
		"\u135f\u139b\u0005\u01c0\u0000\u0000\u1360\u139b\u0005\u02e9\u0000\u0000"+
		"\u1361\u139b\u0005\u02ea\u0000\u0000\u1362\u139b\u0005\u02eb\u0000\u0000"+
		"\u1363\u139b\u0005\u02ec\u0000\u0000\u1364\u139b\u0005\u0210\u0000\u0000"+
		"\u1365\u139b\u0005\u02ed\u0000\u0000\u1366\u139b\u0005\u02ef\u0000\u0000"+
		"\u1367\u136b\u0005\u0242\u0000\u0000\u1368\u1369\u0005\u02fe\u0000\u0000"+
		"\u1369\u136a\u0005\u0305\u0000\u0000\u136a\u136c\u0005\u02ff\u0000\u0000"+
		"\u136b\u1368\u0001\u0000\u0000\u0000\u136b\u136c\u0001\u0000\u0000\u0000"+
		"\u136c\u1370\u0001\u0000\u0000\u0000\u136d\u136e\u0007-\u0000\u0000\u136e"+
		"\u136f\u0005\u0242\u0000\u0000\u136f\u1371\u0005\u028e\u0000\u0000\u1370"+
		"\u136d\u0001\u0000\u0000\u0000\u1370\u1371\u0001\u0000\u0000\u0000\u1371"+
		"\u139b\u0001\u0000\u0000\u0000\u1372\u1376\u0005\u0243\u0000\u0000\u1373"+
		"\u1374\u0005\u02fe\u0000\u0000\u1374\u1375\u0005\u0305\u0000\u0000\u1375"+
		"\u1377\u0005\u02ff\u0000\u0000\u1376\u1373\u0001\u0000\u0000\u0000\u1376"+
		"\u1377\u0001\u0000\u0000\u0000\u1377\u137b\u0001\u0000\u0000\u0000\u1378"+
		"\u1379\u0007-\u0000\u0000\u1379\u137a\u0005\u0242\u0000\u0000\u137a\u137c"+
		"\u0005\u028e\u0000\u0000\u137b\u1378\u0001\u0000\u0000\u0000\u137b\u137c"+
		"\u0001\u0000\u0000\u0000\u137c\u139b\u0001\u0000\u0000\u0000\u137d\u1381"+
		"\u0005\u02f1\u0000\u0000\u137e\u137f\u0005\u02fe\u0000\u0000\u137f\u1380"+
		"\u0005\u0305\u0000\u0000\u1380\u1382\u0005\u02ff\u0000\u0000\u1381\u137e"+
		"\u0001\u0000\u0000\u0000\u1381\u1382\u0001\u0000\u0000\u0000\u1382\u139b"+
		"\u0001\u0000\u0000\u0000\u1383\u1387\u0005\u02f0\u0000\u0000\u1384\u1385"+
		"\u0005\u02fe\u0000\u0000\u1385\u1386\u0005\u0305\u0000\u0000\u1386\u1388"+
		"\u0005\u02ff\u0000\u0000\u1387\u1384\u0001\u0000\u0000\u0000\u1387\u1388"+
		"\u0001\u0000\u0000\u0000\u1388\u139b\u0001\u0000\u0000\u0000\u1389\u139b"+
		"\u0005\u02f2\u0000\u0000\u138a\u139b\u0005\u02f3\u0000\u0000\u138b\u139b"+
		"\u0005\u02f4\u0000\u0000\u138c\u139b\u0005\u02f5\u0000\u0000\u138d\u1391"+
		"\u0005\u02f6\u0000\u0000\u138e\u138f\u0005\u02fe\u0000\u0000\u138f\u1390"+
		"\u0005\u0305\u0000\u0000\u1390\u1392\u0005\u02ff\u0000\u0000\u1391\u138e"+
		"\u0001\u0000\u0000\u0000\u1391\u1392\u0001\u0000\u0000\u0000\u1392\u139b"+
		"\u0001\u0000\u0000\u0000\u1393\u1397\u0005\u027a\u0000\u0000\u1394\u1395"+
		"\u0005\u02fe\u0000\u0000\u1395\u1396\u0005\u0305\u0000\u0000\u1396\u1398"+
		"\u0005\u02ff\u0000\u0000\u1397\u1394\u0001\u0000\u0000\u0000\u1397\u1398"+
		"\u0001\u0000\u0000\u0000\u1398\u139b\u0001\u0000\u0000\u0000\u1399\u139b"+
		"\u0005\u02f7\u0000\u0000\u139a\u130a\u0001\u0000\u0000\u0000\u139a\u130b"+
		"\u0001\u0000\u0000\u0000\u139a\u130c\u0001\u0000\u0000\u0000\u139a\u130d"+
		"\u0001\u0000\u0000\u0000\u139a\u130e\u0001\u0000\u0000\u0000\u139a\u1314"+
		"\u0001\u0000\u0000\u0000\u139a\u131a\u0001\u0000\u0000\u0000\u139a\u131b"+
		"\u0001\u0000\u0000\u0000\u139a\u131c\u0001\u0000\u0000\u0000\u139a\u131d"+
		"\u0001\u0000\u0000\u0000\u139a\u131e\u0001\u0000\u0000\u0000\u139a\u1324"+
		"\u0001\u0000\u0000\u0000\u139a\u132a\u0001\u0000\u0000\u0000\u139a\u1330"+
		"\u0001\u0000\u0000\u0000\u139a\u1331\u0001\u0000\u0000\u0000\u139a\u1332"+
		"\u0001\u0000\u0000\u0000\u139a\u1333\u0001\u0000\u0000\u0000\u139a\u133b"+
		"\u0001\u0000\u0000\u0000\u139a\u133d\u0001\u0000\u0000\u0000\u139a\u133e"+
		"\u0001\u0000\u0000\u0000\u139a\u133f\u0001\u0000\u0000\u0000\u139a\u1340"+
		"\u0001\u0000\u0000\u0000\u139a\u1341\u0001\u0000\u0000\u0000\u139a\u1342"+
		"\u0001\u0000\u0000\u0000\u139a\u1343\u0001\u0000\u0000\u0000\u139a\u1344"+
		"\u0001\u0000\u0000\u0000\u139a\u1345\u0001\u0000\u0000\u0000\u139a\u134c"+
		"\u0001\u0000\u0000\u0000\u139a\u134d\u0001\u0000\u0000\u0000\u139a\u134e"+
		"\u0001\u0000\u0000\u0000\u139a\u134f\u0001\u0000\u0000\u0000\u139a\u1350"+
		"\u0001\u0000\u0000\u0000\u139a\u1351\u0001\u0000\u0000\u0000\u139a\u1352"+
		"\u0001\u0000\u0000\u0000\u139a\u1353\u0001\u0000\u0000\u0000\u139a\u135b"+
		"\u0001\u0000\u0000\u0000\u139a\u135c\u0001\u0000\u0000\u0000\u139a\u135d"+
		"\u0001\u0000\u0000\u0000\u139a\u135e\u0001\u0000\u0000\u0000\u139a\u135f"+
		"\u0001\u0000\u0000\u0000\u139a\u1360\u0001\u0000\u0000\u0000\u139a\u1361"+
		"\u0001\u0000\u0000\u0000\u139a\u1362\u0001\u0000\u0000\u0000\u139a\u1363"+
		"\u0001\u0000\u0000\u0000\u139a\u1364\u0001\u0000\u0000\u0000\u139a\u1365"+
		"\u0001\u0000\u0000\u0000\u139a\u1366\u0001\u0000\u0000\u0000\u139a\u1367"+
		"\u0001\u0000\u0000\u0000\u139a\u1372\u0001\u0000\u0000\u0000\u139a\u137d"+
		"\u0001\u0000\u0000\u0000\u139a\u1383\u0001\u0000\u0000\u0000\u139a\u1389"+
		"\u0001\u0000\u0000\u0000\u139a\u138a\u0001\u0000\u0000\u0000\u139a\u138b"+
		"\u0001\u0000\u0000\u0000\u139a\u138c\u0001\u0000\u0000\u0000\u139a\u138d"+
		"\u0001\u0000\u0000\u0000\u139a\u1393\u0001\u0000\u0000\u0000\u139a\u1399"+
		"\u0001\u0000\u0000\u0000\u139b\u01c3\u0001\u0000\u0000\u0000\u139c\u139d"+
		"\u0007.\u0000\u0000\u139d\u01c5\u0001\u0000\u0000\u0000\u139e\u13a3\u0001"+
		"\u0000\u0000\u0000\u139f\u13a0\u0005\u0121\u0000\u0000\u13a0\u13a3\u0005"+
		"\u017b\u0000\u0000\u13a1\u13a3\u0005\u0010\u0000\u0000\u13a2\u139e\u0001"+
		"\u0000\u0000\u0000\u13a2\u139f\u0001\u0000\u0000\u0000\u13a2\u13a1\u0001"+
		"\u0000\u0000\u0000\u13a3\u01c7\u0001\u0000\u0000\u0000\u13a4\u13a5\u0003"+
		"\u0200\u0100\u0000\u13a5\u13a7\u0005\u02fe\u0000\u0000\u13a6\u13a8\u0007"+
		"\u001f\u0000\u0000\u13a7\u13a6\u0001\u0000\u0000\u0000\u13a7\u13a8\u0001"+
		"\u0000\u0000\u0000\u13a8\u13a9\u0001\u0000\u0000\u0000\u13a9\u13ae\u0003"+
		"\u01b0\u00d8\u0000\u13aa\u13ab\u0005\u02f8\u0000\u0000\u13ab\u13ad\u0003"+
		"\u01b0\u00d8\u0000\u13ac\u13aa\u0001\u0000\u0000\u0000\u13ad\u13b0\u0001"+
		"\u0000\u0000\u0000\u13ae\u13ac\u0001\u0000\u0000\u0000\u13ae\u13af\u0001"+
		"\u0000\u0000\u0000\u13af\u13b2\u0001\u0000\u0000\u0000\u13b0\u13ae\u0001"+
		"\u0000\u0000\u0000\u13b1\u13b3\u0003\u019e\u00cf\u0000\u13b2\u13b1\u0001"+
		"\u0000\u0000\u0000\u13b2\u13b3\u0001\u0000\u0000\u0000\u13b3\u13b4\u0001"+
		"\u0000\u0000\u0000\u13b4\u13bb\u0005\u02ff\u0000\u0000\u13b5\u13b6\u0005"+
		"\u00dd\u0000\u0000\u13b6\u13b7\u0005\u02fe\u0000\u0000\u13b7\u13b8\u0005"+
		"\u0283\u0000\u0000\u13b8\u13b9\u0003\u0182\u00c1\u0000\u13b9\u13ba\u0005"+
		"\u02ff\u0000\u0000\u13ba\u13bc\u0001\u0000\u0000\u0000\u13bb\u13b5\u0001"+
		"\u0000\u0000\u0000\u13bb\u13bc\u0001\u0000\u0000\u0000\u13bc\u13e4\u0001"+
		"\u0000\u0000\u0000\u13bd\u13be\u0003\u0200\u0100\u0000\u13be\u13bf\u0005"+
		"\u02fe\u0000\u0000\u13bf\u13c0\u0005\u02fd\u0000\u0000\u13c0\u13c7\u0005"+
		"\u02ff\u0000\u0000\u13c1\u13c2\u0005\u00dd\u0000\u0000\u13c2\u13c3\u0005"+
		"\u02fe\u0000\u0000\u13c3\u13c4\u0005\u0283\u0000\u0000\u13c4\u13c5\u0003"+
		"\u0182\u00c1\u0000\u13c5\u13c6\u0005\u02ff\u0000\u0000\u13c6\u13c8\u0001"+
		"\u0000\u0000\u0000\u13c7\u13c1\u0001\u0000\u0000\u0000\u13c7\u13c8\u0001"+
		"\u0000\u0000\u0000\u13c8\u13e4\u0001\u0000\u0000\u0000\u13c9\u13ca\u0003"+
		"\u0200\u0100\u0000\u13ca\u13d3\u0005\u02fe\u0000\u0000\u13cb\u13d0\u0003"+
		"\u01b0\u00d8\u0000\u13cc\u13cd\u0005\u02f8\u0000\u0000\u13cd\u13cf\u0003"+
		"\u01b0\u00d8\u0000\u13ce\u13cc\u0001\u0000\u0000\u0000\u13cf\u13d2\u0001"+
		"\u0000\u0000\u0000\u13d0\u13ce\u0001\u0000\u0000\u0000\u13d0\u13d1\u0001"+
		"\u0000\u0000\u0000\u13d1\u13d4\u0001\u0000\u0000\u0000\u13d2\u13d0\u0001"+
		"\u0000\u0000\u0000\u13d3\u13cb\u0001\u0000\u0000\u0000\u13d3\u13d4\u0001"+
		"\u0000\u0000\u0000\u13d4\u13d5\u0001\u0000\u0000\u0000\u13d5\u13d6\u0005"+
		"\u02ff\u0000\u0000\u13d6\u13d7\u0005\u0287\u0000\u0000\u13d7\u13d8\u0005"+
		"\u00fa\u0000\u0000\u13d8\u13d9\u0005\u02fe\u0000\u0000\u13d9\u13da\u0003"+
		"\u019e\u00cf\u0000\u13da\u13e1\u0005\u02ff\u0000\u0000\u13db\u13dc\u0005"+
		"\u00dd\u0000\u0000\u13dc\u13dd\u0005\u02fe\u0000\u0000\u13dd\u13de\u0005"+
		"\u0283\u0000\u0000\u13de\u13df\u0003\u0182\u00c1\u0000\u13df\u13e0\u0005"+
		"\u02ff\u0000\u0000\u13e0\u13e2\u0001\u0000\u0000\u0000\u13e1\u13db\u0001"+
		"\u0000\u0000\u0000\u13e1\u13e2\u0001\u0000\u0000\u0000\u13e2\u13e4\u0001"+
		"\u0000\u0000\u0000\u13e3\u13a4\u0001\u0000\u0000\u0000\u13e3\u13bd\u0001"+
		"\u0000\u0000\u0000\u13e3\u13c9\u0001\u0000\u0000\u0000\u13e4\u01c9\u0001"+
		"\u0000\u0000\u0000\u13e5\u13e8\u0005\u0308\u0000\u0000\u13e6\u13e8\u0003"+
		"\u0200\u0100\u0000\u13e7\u13e5\u0001\u0000\u0000\u0000\u13e7\u13e6\u0001"+
		"\u0000\u0000\u0000\u13e8\u01cb\u0001\u0000\u0000\u0000\u13e9\u13ee\u0003"+
		"\u01ca\u00e5\u0000\u13ea\u13eb\u0005\u02f8\u0000\u0000\u13eb\u13ed\u0003"+
		"\u01ca\u00e5\u0000\u13ec\u13ea\u0001\u0000\u0000\u0000\u13ed\u13f0\u0001"+
		"\u0000\u0000\u0000\u13ee\u13ec\u0001\u0000\u0000\u0000\u13ee\u13ef\u0001"+
		"\u0000\u0000\u0000\u13ef\u01cd\u0001\u0000\u0000\u0000\u13f0\u13ee\u0001"+
		"\u0000\u0000\u0000\u13f1\u13f6\u0003\u0200\u0100\u0000\u13f2\u13f3\u0005"+
		"\u02f8\u0000\u0000\u13f3\u13f5\u0003\u0200\u0100\u0000\u13f4\u13f2\u0001"+
		"\u0000\u0000\u0000\u13f5\u13f8\u0001\u0000\u0000\u0000\u13f6\u13f4\u0001"+
		"\u0000\u0000\u0000\u13f6\u13f7\u0001\u0000\u0000\u0000\u13f7\u01cf\u0001"+
		"\u0000\u0000\u0000\u13f8\u13f6\u0001\u0000\u0000\u0000\u13f9\u13fc\u0003"+
		"\u0200\u0100\u0000\u13fa\u13fb\u0005\u0317\u0000\u0000\u13fb\u13fd\u0003"+
		"\u01fc\u00fe\u0000\u13fc\u13fa\u0001\u0000\u0000\u0000\u13fc\u13fd\u0001"+
		"\u0000\u0000\u0000\u13fd\u01d1\u0001\u0000\u0000\u0000\u13fe\u1403\u0003"+
		"\u01d0\u00e8\u0000\u13ff\u1400\u0005\u02f8\u0000\u0000\u1400\u1402\u0003"+
		"\u01d0\u00e8\u0000\u1401\u13ff\u0001\u0000\u0000\u0000\u1402\u1405\u0001"+
		"\u0000\u0000\u0000\u1403\u1401\u0001\u0000\u0000\u0000\u1403\u1404\u0001"+
		"\u0000\u0000\u0000\u1404\u01d3\u0001\u0000\u0000\u0000\u1405\u1403\u0001"+
		"\u0000\u0000\u0000\u1406\u1407\u0003\u0200\u0100\u0000\u1407\u01d5\u0001"+
		"\u0000\u0000\u0000\u1408\u140b\u0003\u01c2\u00e1\u0000\u1409\u140b\u0003"+
		"\u0200\u0100\u0000\u140a\u1408\u0001\u0000\u0000\u0000\u140a\u1409\u0001"+
		"\u0000\u0000\u0000\u140b\u1413\u0001\u0000\u0000\u0000\u140c\u140e\u0005"+
		"\u0300\u0000\u0000\u140d\u140f\u0005\u0305\u0000\u0000\u140e\u140d\u0001"+
		"\u0000\u0000\u0000\u140e\u140f\u0001\u0000\u0000\u0000\u140f\u1410\u0001"+
		"\u0000\u0000\u0000\u1410\u1412\u0005\u0301\u0000\u0000\u1411\u140c\u0001"+
		"\u0000\u0000\u0000\u1412\u1415\u0001\u0000\u0000\u0000\u1413\u1411\u0001"+
		"\u0000\u0000\u0000\u1413\u1414\u0001\u0000\u0000\u0000\u1414\u01d7\u0001"+
		"\u0000\u0000\u0000\u1415\u1413\u0001\u0000\u0000\u0000\u1416\u141b\u0003"+
		"\u01d6\u00eb\u0000\u1417\u1418\u0005\u02f8\u0000\u0000\u1418\u141a\u0003"+
		"\u01d6\u00eb\u0000\u1419\u1417\u0001\u0000\u0000\u0000\u141a\u141d\u0001"+
		"\u0000\u0000\u0000\u141b\u1419\u0001\u0000\u0000\u0000\u141b\u141c\u0001"+
		"\u0000\u0000\u0000\u141c\u01d9\u0001\u0000\u0000\u0000\u141d\u141b\u0001"+
		"\u0000\u0000\u0000\u141e\u1421\u0007/\u0000\u0000\u141f\u1421\u0003\u0200"+
		"\u0100\u0000\u1420\u141e\u0001\u0000\u0000\u0000\u1420\u141f\u0001\u0000"+
		"\u0000\u0000\u1421\u01db\u0001\u0000\u0000\u0000\u1422\u1423\u0003\u0200"+
		"\u0100\u0000\u1423\u01dd\u0001\u0000\u0000\u0000\u1424\u1425\u0003\u01dc"+
		"\u00ee\u0000\u1425\u1426\u0005\u02fe\u0000\u0000\u1426\u1427\u0005\u027c"+
		"\u0000\u0000\u1427\u1428\u0003\u01b0\u00d8\u0000\u1428\u1429\u0005\u02ff"+
		"\u0000\u0000\u1429\u1449\u0001\u0000\u0000\u0000\u142a\u142b\u0003\u01dc"+
		"\u00ee\u0000\u142b\u1439\u0005\u02fe\u0000\u0000\u142c\u1431\u0003\u01b0"+
		"\u00d8\u0000\u142d\u142e\u0005\u02f8\u0000\u0000\u142e\u1430\u0003\u01b0"+
		"\u00d8\u0000\u142f\u142d\u0001\u0000\u0000\u0000\u1430\u1433\u0001\u0000"+
		"\u0000\u0000\u1431\u142f\u0001\u0000\u0000\u0000\u1431\u1432\u0001\u0000"+
		"\u0000\u0000\u1432\u1437\u0001\u0000\u0000\u0000\u1433\u1431\u0001\u0000"+
		"\u0000\u0000\u1434\u1435\u0005\u02f8\u0000\u0000\u1435\u1436\u0005\u027c"+
		"\u0000\u0000\u1436\u1438\u0003\u01b0\u00d8\u0000\u1437\u1434\u0001\u0000"+
		"\u0000\u0000\u1437\u1438\u0001\u0000\u0000\u0000\u1438\u143a\u0001\u0000"+
		"\u0000\u0000\u1439\u142c\u0001\u0000\u0000\u0000\u1439\u143a\u0001\u0000"+
		"\u0000\u0000\u143a\u143b\u0001\u0000\u0000\u0000\u143b\u143c\u0005\u02ff"+
		"\u0000\u0000\u143c\u1449\u0001\u0000\u0000\u0000\u143d\u143e\u0003\u01dc"+
		"\u00ee\u0000\u143e\u143f\u0005\u02fe\u0000\u0000\u143f\u1440\u0003\u0202"+
		"\u0101\u0000\u1440\u1441\u0005\u00ec\u0000\u0000\u1441\u1444\u0003\u01b0"+
		"\u00d8\u0000\u1442\u1443\u0005\u00e3\u0000\u0000\u1443\u1445\u0003\u01b0"+
		"\u00d8\u0000\u1444\u1442\u0001\u0000\u0000\u0000\u1444\u1445\u0001\u0000"+
		"\u0000\u0000\u1445\u1446\u0001\u0000\u0000\u0000\u1446\u1447\u0005\u02ff"+
		"\u0000\u0000\u1447\u1449\u0001\u0000\u0000\u0000\u1448\u1424\u0001\u0000"+
		"\u0000\u0000\u1448\u142a\u0001\u0000\u0000\u0000\u1448\u143d\u0001\u0000"+
		"\u0000\u0000\u1449\u01df\u0001\u0000\u0000\u0000\u144a\u144b\u0005\u001a"+
		"\u0000\u0000\u144b\u1454\u0005\u0300\u0000\u0000\u144c\u1451\u0003\u01b0"+
		"\u00d8\u0000\u144d\u144e\u0005\u02f8\u0000\u0000\u144e\u1450\u0003\u01b0"+
		"\u00d8\u0000\u144f\u144d\u0001\u0000\u0000\u0000\u1450\u1453\u0001\u0000"+
		"\u0000\u0000\u1451\u144f\u0001\u0000\u0000\u0000\u1451\u1452\u0001\u0000"+
		"\u0000\u0000\u1452\u1455\u0001\u0000\u0000\u0000\u1453\u1451\u0001\u0000"+
		"\u0000\u0000\u1454\u144c\u0001\u0000\u0000\u0000\u1454\u1455\u0001\u0000"+
		"\u0000\u0000\u1455\u1456\u0001\u0000\u0000\u0000\u1456\u1457\u0005\u0301"+
		"\u0000\u0000\u1457\u01e1\u0001\u0000\u0000\u0000\u1458\u145a\u0006\u00f1"+
		"\uffff\uffff\u0000\u1459\u145b\u0005\u0181\u0000\u0000\u145a\u1459\u0001"+
		"\u0000\u0000\u0000\u145a\u145b\u0001\u0000\u0000\u0000\u145b\u145c\u0001"+
		"\u0000\u0000\u0000\u145c\u145e\u0003\u01d4\u00ea\u0000\u145d\u145f\u0005"+
		"\u02fd\u0000\u0000\u145e\u145d\u0001\u0000\u0000\u0000\u145e\u145f\u0001"+
		"\u0000\u0000\u0000\u145f\u1461\u0001\u0000\u0000\u0000\u1460\u1462\u0003"+
		"\u01e4\u00f2\u0000\u1461\u1460\u0001\u0000\u0000\u0000\u1461\u1462\u0001"+
		"\u0000\u0000\u0000\u1462\u1476\u0001\u0000\u0000\u0000\u1463\u1464\u0005"+
		"\u0239\u0000\u0000\u1464\u1465\u0003\u0202\u0101\u0000\u1465\u1466\u0005"+
		"\u02fe\u0000\u0000\u1466\u146b\u0003\u01b0\u00d8\u0000\u1467\u1468\u0005"+
		"\u02f8\u0000\u0000\u1468\u146a\u0003\u01b0\u00d8\u0000\u1469\u1467\u0001"+
		"\u0000\u0000\u0000\u146a\u146d\u0001\u0000\u0000\u0000\u146b\u1469\u0001"+
		"\u0000\u0000\u0000\u146b\u146c\u0001\u0000\u0000\u0000\u146c\u146e\u0001"+
		"\u0000\u0000\u0000\u146d\u146b\u0001\u0000\u0000\u0000\u146e\u1474\u0005"+
		"\u02ff\u0000\u0000\u146f\u1470\u0005\u01d5\u0000\u0000\u1470\u1471\u0005"+
		"\u02fe\u0000\u0000\u1471\u1472\u0003\u0202\u0101\u0000\u1472\u1473\u0005"+
		"\u02ff\u0000\u0000\u1473\u1475\u0001\u0000\u0000\u0000\u1474\u146f\u0001"+
		"\u0000\u0000\u0000\u1474\u1475\u0001\u0000\u0000\u0000\u1475\u1477\u0001"+
		"\u0000\u0000\u0000\u1476\u1463\u0001\u0000\u0000\u0000\u1476\u1477\u0001"+
		"\u0000\u0000\u0000\u1477\u14c3\u0001\u0000\u0000\u0000\u1478\u147a\u0005"+
		"\u012e\u0000\u0000\u1479\u1478\u0001\u0000\u0000\u0000\u1479\u147a\u0001"+
		"\u0000\u0000\u0000\u147a\u147b\u0001\u0000\u0000\u0000\u147b\u147c\u0005"+
		"\u02fe\u0000\u0000\u147c\u147d\u0003\u0002\u0001\u0000\u147d\u147f\u0005"+
		"\u02ff\u0000\u0000\u147e\u1480\u0005\u001b\u0000\u0000\u147f\u147e\u0001"+
		"\u0000\u0000\u0000\u147f\u1480\u0001\u0000\u0000\u0000\u1480\u1481\u0001"+
		"\u0000\u0000\u0000\u1481\u148d\u0003\u020a\u0105\u0000\u1482\u1483\u0005"+
		"\u02fe\u0000\u0000\u1483\u1488\u0003\u020c\u0106\u0000\u1484\u1485\u0005"+
		"\u02f8\u0000\u0000\u1485\u1487\u0003\u020c\u0106\u0000\u1486\u1484\u0001"+
		"\u0000\u0000\u0000\u1487\u148a\u0001\u0000\u0000\u0000\u1488\u1486\u0001"+
		"\u0000\u0000\u0000\u1488\u1489\u0001\u0000\u0000\u0000\u1489\u148b\u0001"+
		"\u0000\u0000\u0000\u148a\u1488\u0001\u0000\u0000\u0000\u148b\u148c\u0005"+
		"\u02ff\u0000\u0000\u148c\u148e\u0001\u0000\u0000\u0000\u148d\u1482\u0001"+
		"\u0000\u0000\u0000\u148d\u148e\u0001\u0000\u0000\u0000\u148e\u14c3\u0001"+
		"\u0000\u0000\u0000\u148f\u1491\u0005\u012e\u0000\u0000\u1490\u148f\u0001"+
		"\u0000\u0000\u0000\u1490\u1491\u0001\u0000\u0000\u0000\u1491\u1492\u0001"+
		"\u0000\u0000\u0000\u1492\u1495\u0003\u01de\u00ef\u0000\u1493\u1494\u0005"+
		"\u0286\u0000\u0000\u1494\u1496\u0005\u018a\u0000\u0000\u1495\u1493\u0001"+
		"\u0000\u0000\u0000\u1495\u1496\u0001\u0000\u0000\u0000\u1496\u1498\u0001"+
		"\u0000\u0000\u0000\u1497\u1499\u0003\u01e4\u00f2\u0000\u1498\u1497\u0001"+
		"\u0000\u0000\u0000\u1498\u1499\u0001\u0000\u0000\u0000\u1499\u14c3\u0001"+
		"\u0000\u0000\u0000\u149a\u149c\u0005\u012e\u0000\u0000\u149b\u149a\u0001"+
		"\u0000\u0000\u0000\u149b\u149c\u0001\u0000\u0000\u0000\u149c\u149d\u0001"+
		"\u0000\u0000\u0000\u149d\u149e\u0003\u01de\u00ef\u0000\u149e\u149f\u0005"+
		"\u001b\u0000\u0000\u149f\u14a0\u0005\u02fe\u0000\u0000\u14a0\u14a5\u0003"+
		"\u020e\u0107\u0000\u14a1\u14a2\u0005\u02f8\u0000\u0000\u14a2\u14a4\u0003"+
		"\u020e\u0107\u0000\u14a3\u14a1\u0001\u0000\u0000\u0000\u14a4\u14a7\u0001"+
		"\u0000\u0000\u0000\u14a5\u14a3\u0001\u0000\u0000\u0000\u14a5\u14a6\u0001"+
		"\u0000\u0000\u0000\u14a6\u14a8\u0001\u0000\u0000\u0000\u14a7\u14a5\u0001"+
		"\u0000\u0000\u0000\u14a8\u14a9\u0005\u02ff\u0000\u0000\u14a9\u14c3\u0001"+
		"\u0000\u0000\u0000\u14aa\u14ac\u0005\u012e\u0000\u0000\u14ab\u14aa\u0001"+
		"\u0000\u0000\u0000\u14ab\u14ac\u0001\u0000\u0000\u0000\u14ac\u14ad\u0001"+
		"\u0000\u0000\u0000\u14ad\u14ae\u0005\u01ef\u0000\u0000\u14ae\u14af\u0005"+
		"\u00ec\u0000\u0000\u14af\u14b0\u0005\u02fe\u0000\u0000\u14b0\u14b1\u0003"+
		"\u01de\u00ef\u0000\u14b1\u14be\u0005\u02ff\u0000\u0000\u14b2\u14b3\u0005"+
		"\u001b\u0000\u0000\u14b3\u14b4\u0005\u02fe\u0000\u0000\u14b4\u14b9\u0003"+
		"\u020e\u0107\u0000\u14b5\u14b6\u0005\u02f8\u0000\u0000\u14b6\u14b8\u0003"+
		"\u020e\u0107\u0000\u14b7\u14b5\u0001\u0000\u0000\u0000\u14b8\u14bb\u0001"+
		"\u0000\u0000\u0000\u14b9\u14b7\u0001\u0000\u0000\u0000\u14b9\u14ba\u0001"+
		"\u0000\u0000\u0000\u14ba\u14bc\u0001\u0000\u0000\u0000\u14bb\u14b9\u0001"+
		"\u0000\u0000\u0000\u14bc\u14bd\u0005\u02ff\u0000\u0000\u14bd\u14bf\u0001"+
		"\u0000\u0000\u0000\u14be\u14b2\u0001\u0000\u0000\u0000\u14be\u14bf\u0001"+
		"\u0000\u0000\u0000\u14bf\u14c0\u0001\u0000\u0000\u0000\u14c0\u14c1\u0005"+
		"\u02ff\u0000\u0000\u14c1\u14c3\u0001\u0000\u0000\u0000\u14c2\u1458\u0001"+
		"\u0000\u0000\u0000\u14c2\u1479\u0001\u0000\u0000\u0000\u14c2\u1490\u0001"+
		"\u0000\u0000\u0000\u14c2\u149b\u0001\u0000\u0000\u0000\u14c2\u14ab\u0001"+
		"\u0000\u0000\u0000\u14c3\u14d5\u0001\u0000\u0000\u0000\u14c4\u14c6\n\u0001"+
		"\u0000\u0000\u14c5\u14c7\u0005\u0161\u0000\u0000\u14c6\u14c5\u0001\u0000"+
		"\u0000\u0000\u14c6\u14c7\u0001\u0000\u0000\u0000\u14c7\u14c8\u0001\u0000"+
		"\u0000\u0000\u14c8\u14ca\u0003\u01e6\u00f3\u0000\u14c9\u14cb\u0005\u02fe"+
		"\u0000\u0000\u14ca\u14c9\u0001\u0000\u0000\u0000\u14ca\u14cb\u0001\u0000"+
		"\u0000\u0000\u14cb\u14cc\u0001\u0000\u0000\u0000\u14cc\u14ce\u0003\u01e2"+
		"\u00f1\u0000\u14cd\u14cf\u0003\u01e8\u00f4\u0000\u14ce\u14cd\u0001\u0000"+
		"\u0000\u0000\u14ce\u14cf\u0001\u0000\u0000\u0000\u14cf\u14d1\u0001\u0000"+
		"\u0000\u0000\u14d0\u14d2\u0005\u02ff\u0000\u0000\u14d1\u14d0\u0001\u0000"+
		"\u0000\u0000\u14d1\u14d2\u0001\u0000\u0000\u0000\u14d2\u14d4\u0001\u0000"+
		"\u0000\u0000\u14d3\u14c4\u0001\u0000\u0000\u0000\u14d4\u14d7\u0001\u0000"+
		"\u0000\u0000\u14d5\u14d3\u0001\u0000\u0000\u0000\u14d5\u14d6\u0001\u0000"+
		"\u0000\u0000\u14d6\u01e3\u0001\u0000\u0000\u0000\u14d7\u14d5\u0001\u0000"+
		"\u0000\u0000\u14d8\u14da\u0005\u001b\u0000\u0000\u14d9\u14d8\u0001\u0000"+
		"\u0000\u0000\u14d9\u14da\u0001\u0000\u0000\u0000\u14da\u14db\u0001\u0000"+
		"\u0000\u0000\u14db\u14e4\u0003\u020a\u0105\u0000\u14dc\u14e1\u0003\u020c"+
		"\u0106\u0000\u14dd\u14de\u0005\u02f8\u0000\u0000\u14de\u14e0\u0003\u020c"+
		"\u0106\u0000\u14df\u14dd\u0001\u0000\u0000\u0000\u14e0\u14e3\u0001\u0000"+
		"\u0000\u0000\u14e1\u14df\u0001\u0000\u0000\u0000\u14e1\u14e2\u0001\u0000"+
		"\u0000\u0000\u14e2\u14e5\u0001\u0000\u0000\u0000\u14e3\u14e1\u0001\u0000"+
		"\u0000\u0000\u14e4\u14dc\u0001\u0000\u0000\u0000\u14e4\u14e5\u0001\u0000"+
		"\u0000\u0000\u14e5\u14ef\u0001\u0000\u0000\u0000\u14e6\u14e8\u0005\u001b"+
		"\u0000\u0000\u14e7\u14e6\u0001\u0000\u0000\u0000\u14e7\u14e8\u0001\u0000"+
		"\u0000\u0000\u14e8\u14e9\u0001\u0000\u0000\u0000\u14e9\u14ea\u0003\u020a"+
		"\u0105\u0000\u14ea\u14eb\u0005\u02fe\u0000\u0000\u14eb\u14ec\u0003\u01cc"+
		"\u00e6\u0000\u14ec\u14ed\u0005\u02ff\u0000\u0000\u14ed\u14ef\u0001\u0000"+
		"\u0000\u0000\u14ee\u14d9\u0001\u0000\u0000\u0000\u14ee\u14e7\u0001\u0000"+
		"\u0000\u0000\u14ef\u01e5\u0001\u0000\u0000\u0000\u14f0\u14f2\u0005\u0112"+
		"\u0000\u0000\u14f1\u14f0\u0001\u0000\u0000\u0000\u14f1\u14f2\u0001\u0000"+
		"\u0000\u0000\u14f2\u14f3\u0001\u0000\u0000\u0000\u14f3\u1506\u0005\u0124"+
		"\u0000\u0000\u14f4\u14f6\u0005\u0131\u0000\u0000\u14f5\u14f7\u0005\u018d"+
		"\u0000\u0000\u14f6\u14f5\u0001\u0000\u0000\u0000\u14f6\u14f7\u0001\u0000"+
		"\u0000\u0000\u14f7\u14f8\u0001\u0000\u0000\u0000\u14f8\u1506\u0005\u0124"+
		"\u0000\u0000\u14f9\u14fb\u0005\u01e4\u0000\u0000\u14fa\u14fc\u0005\u018d"+
		"\u0000\u0000\u14fb\u14fa\u0001\u0000\u0000\u0000\u14fb\u14fc\u0001\u0000"+
		"\u0000\u0000\u14fc\u14fd\u0001\u0000\u0000\u0000\u14fd\u1506\u0005\u0124"+
		"\u0000\u0000\u14fe\u1500\u0005\u00ed\u0000\u0000\u14ff\u1501\u0005\u018d"+
		"\u0000\u0000\u1500\u14ff\u0001\u0000\u0000\u0000\u1500\u1501\u0001\u0000"+
		"\u0000\u0000\u1501\u1502\u0001\u0000\u0000\u0000\u1502\u1506\u0005\u0124"+
		"\u0000\u0000\u1503\u1504\u0005\u0081\u0000\u0000\u1504\u1506\u0005\u0124"+
		"\u0000\u0000\u1505\u14f1\u0001\u0000\u0000\u0000\u1505\u14f4\u0001\u0000"+
		"\u0000\u0000\u1505\u14f9\u0001\u0000\u0000\u0000\u1505\u14fe\u0001\u0000"+
		"\u0000\u0000\u1505\u1503\u0001\u0000\u0000\u0000\u1506\u01e7\u0001\u0000"+
		"\u0000\u0000\u1507\u1508\u0005\u0180\u0000\u0000\u1508\u1516\u0003\u01ea"+
		"\u00f5\u0000\u1509\u150a\u0005\u0271\u0000\u0000\u150a\u150b\u0005\u02fe"+
		"\u0000\u0000\u150b\u1510\u0003\u0208\u0104\u0000\u150c\u150d\u0005\u02f8"+
		"\u0000\u0000\u150d\u150f\u0003\u0208\u0104\u0000\u150e\u150c\u0001\u0000"+
		"\u0000\u0000\u150f\u1512\u0001\u0000\u0000\u0000\u1510\u150e\u0001\u0000"+
		"\u0000\u0000\u1510\u1511\u0001\u0000\u0000\u0000\u1511\u1513\u0001\u0000"+
		"\u0000\u0000\u1512\u1510\u0001\u0000\u0000\u0000\u1513\u1514\u0005\u02ff"+
		"\u0000\u0000\u1514\u1516\u0001\u0000\u0000\u0000\u1515\u1507\u0001\u0000"+
		"\u0000\u0000\u1515\u1509\u0001\u0000\u0000\u0000\u1516\u01e9\u0001\u0000"+
		"\u0000\u0000\u1517\u1518\u0006\u00f5\uffff\uffff\u0000\u1518\u1524\u0003"+
		"\u01b0\u00d8\u0000\u1519\u151a\u0003\u01b0\u00d8\u0000\u151a\u151b\u0003"+
		"\u01c6\u00e3\u0000\u151b\u151c\u0003\u01b0\u00d8\u0000\u151c\u1524\u0001"+
		"\u0000\u0000\u0000\u151d\u151e\u0005\u02fe\u0000\u0000\u151e\u151f\u0003"+
		"\u01ea\u00f5\u0000\u151f\u1520\u0005\u02ff\u0000\u0000\u1520\u1524\u0001"+
		"\u0000\u0000\u0000\u1521\u1522\u0005\u016d\u0000\u0000\u1522\u1524\u0003"+
		"\u01ea\u00f5\u0001\u1523\u1517\u0001\u0000\u0000\u0000\u1523\u1519\u0001"+
		"\u0000\u0000\u0000\u1523\u151d\u0001\u0000\u0000\u0000\u1523\u1521\u0001"+
		"\u0000\u0000\u0000\u1524\u152d\u0001\u0000\u0000\u0000\u1525\u1526\n\u0003"+
		"\u0000\u0000\u1526\u1527\u0005\u0017\u0000\u0000\u1527\u152c\u0003\u01ea"+
		"\u00f5\u0004\u1528\u1529\n\u0002\u0000\u0000\u1529\u152a\u0005\u0187\u0000"+
		"\u0000\u152a\u152c\u0003\u01ea\u00f5\u0003\u152b\u1525\u0001\u0000\u0000"+
		"\u0000\u152b\u1528\u0001\u0000\u0000\u0000\u152c\u152f\u0001\u0000\u0000"+
		"\u0000\u152d\u152b\u0001\u0000\u0000\u0000\u152d\u152e\u0001\u0000\u0000"+
		"\u0000\u152e\u01eb\u0001\u0000\u0000\u0000\u152f\u152d\u0001\u0000\u0000"+
		"\u0000\u1530\u154b\u0005\u02fd\u0000\u0000\u1531\u1533\u0007\u0006\u0000"+
		"\u0000\u1532\u1531\u0001\u0000\u0000\u0000\u1532\u1533\u0001\u0000\u0000"+
		"\u0000\u1533\u1535\u0001\u0000\u0000\u0000\u1534\u1536\u0003\u0200\u0100"+
		"\u0000\u1535\u1534\u0001\u0000\u0000\u0000\u1535\u1536\u0001\u0000\u0000"+
		"\u0000\u1536\u1537\u0001\u0000\u0000\u0000\u1537\u154b\u0003\u01d8\u00ec"+
		"\u0000\u1538\u153a\u0007\u0006\u0000\u0000\u1539\u1538\u0001\u0000\u0000"+
		"\u0000\u1539\u153a\u0001\u0000\u0000\u0000\u153a\u153c\u0001\u0000\u0000"+
		"\u0000\u153b\u153d\u0003\u0200\u0100\u0000\u153c\u153b\u0001\u0000\u0000"+
		"\u0000\u153c\u153d\u0001\u0000\u0000\u0000\u153d\u153e\u0001\u0000\u0000"+
		"\u0000\u153e\u153f\u0003\u01d8\u00ec\u0000\u153f\u1540\u0001\u0000\u0000"+
		"\u0000\u1540\u1541\u0005\u0188\u0000\u0000\u1541\u1543\u00056\u0000\u0000"+
		"\u1542\u1544\u0007\u0006\u0000\u0000\u1543\u1542\u0001\u0000\u0000\u0000"+
		"\u1543\u1544\u0001\u0000\u0000\u0000\u1544\u1546\u0001\u0000\u0000\u0000"+
		"\u1545\u1547\u0003\u0200\u0100\u0000\u1546\u1545\u0001\u0000\u0000\u0000"+
		"\u1546\u1547\u0001\u0000\u0000\u0000\u1547\u1548\u0001\u0000\u0000\u0000"+
		"\u1548\u1549\u0003\u01d8\u00ec\u0000\u1549\u154b\u0001\u0000\u0000\u0000"+
		"\u154a\u1530\u0001\u0000\u0000\u0000\u154a\u1532\u0001\u0000\u0000\u0000"+
		"\u154a\u1539\u0001\u0000\u0000\u0000\u154b\u01ed\u0001\u0000\u0000\u0000"+
		"\u154c\u154d\u0005\u016d\u0000\u0000\u154d\u154e\u0005\u0172\u0000\u0000"+
		"\u154e\u01ef\u0001\u0000\u0000\u0000\u154f\u1551\u0003\u01ee\u00f7\u0000"+
		"\u1550\u154f\u0001\u0000\u0000\u0000\u1551\u1552\u0001\u0000\u0000\u0000"+
		"\u1552\u1550\u0001\u0000\u0000\u0000\u1552\u1553\u0001\u0000\u0000\u0000"+
		"\u1553\u01f1\u0001\u0000\u0000\u0000\u1554\u1555\u0005\u0286\u0000\u0000"+
		"\u1555\u1556\u0005\u02fe\u0000\u0000\u1556\u1557\u0003\u01d2\u00e9\u0000"+
		"\u1557\u1558\u0005\u02ff\u0000\u0000\u1558\u155a\u0001\u0000\u0000\u0000"+
		"\u1559\u1554\u0001\u0000\u0000\u0000\u1559\u155a\u0001\u0000\u0000\u0000"+
		"\u155a\u155f\u0001\u0000\u0000\u0000\u155b\u155c\u0005\u0271\u0000\u0000"+
		"\u155c\u155d\u0005\u010c\u0000\u0000\u155d\u155e\u0005\u023a\u0000\u0000"+
		"\u155e\u1560\u0003\u0200\u0100\u0000\u155f\u155b\u0001\u0000\u0000\u0000"+
		"\u155f\u1560\u0001\u0000\u0000\u0000\u1560\u01f3\u0001\u0000\u0000\u0000"+
		"\u1561\u1567\u0003\u0200\u0100\u0000\u1562\u1563\u0005\u02fe\u0000\u0000"+
		"\u1563\u1564\u0003\u01b0\u00d8\u0000\u1564\u1565\u0005\u02ff\u0000\u0000"+
		"\u1565\u1567\u0001\u0000\u0000\u0000\u1566\u1561\u0001\u0000\u0000\u0000"+
		"\u1566\u1562\u0001\u0000\u0000\u0000\u1567\u1569\u0001\u0000\u0000\u0000"+
		"\u1568\u156a\u0003\u0200\u0100\u0000\u1569\u1568\u0001\u0000\u0000\u0000"+
		"\u1569\u156a\u0001\u0000\u0000\u0000\u156a\u156c\u0001\u0000\u0000\u0000"+
		"\u156b\u156d\u00070\u0000\u0000\u156c\u156b\u0001\u0000\u0000\u0000\u156c"+
		"\u156d\u0001\u0000\u0000\u0000\u156d\u1570\u0001\u0000\u0000\u0000\u156e"+
		"\u156f\u0005\u0175\u0000\u0000\u156f\u1571\u0007 \u0000\u0000\u1570\u156e"+
		"\u0001\u0000\u0000\u0000\u1570\u1571\u0001\u0000\u0000\u0000\u1571\u01f5"+
		"\u0001\u0000\u0000\u0000\u1572\u1573\u0005m\u0000\u0000\u1573\u1575\u0003"+
		"\u01ca\u00e5\u0000\u1574\u1572\u0001\u0000\u0000\u0000\u1574\u1575\u0001"+
		"\u0000\u0000\u0000\u1575\u15b7\u0001\u0000\u0000\u0000\u1576\u1577\u0005"+
		"N\u0000\u0000\u1577\u1578\u0005\u02fe\u0000\u0000\u1578\u1579\u0003\u01b0"+
		"\u00d8\u0000\u1579\u157c\u0005\u02ff\u0000\u0000\u157a\u157b\u0005\u0167"+
		"\u0000\u0000\u157b\u157d\u0005\u0293\u0000\u0000\u157c\u157a\u0001\u0000"+
		"\u0000\u0000\u157c\u157d\u0001\u0000\u0000\u0000\u157d\u15b8\u0001\u0000"+
		"\u0000\u0000\u157e\u157f\u0005\u0263\u0000\u0000\u157f\u1580\u0005\u02fe"+
		"\u0000\u0000\u1580\u1581\u0003\u01ce\u00e7\u0000\u1581\u1582\u0005\u02ff"+
		"\u0000\u0000\u1582\u15b8\u0001\u0000\u0000\u0000\u1583\u1584\u0005\u01b4"+
		"\u0000\u0000\u1584\u1585\u0005\u0126\u0000\u0000\u1585\u1586\u0005\u02fe"+
		"\u0000\u0000\u1586\u1587\u0003\u01ce\u00e7\u0000\u1587\u1588\u0005\u02ff"+
		"\u0000\u0000\u1588\u1589\u0003\u01f2\u00f9\u0000\u1589\u15b8\u0001\u0000"+
		"\u0000\u0000\u158a\u158d\u0005\u00cd\u0000\u0000\u158b\u158c\u0005\u0271"+
		"\u0000\u0000\u158c\u158e\u0003\u01da\u00ed\u0000\u158d\u158b\u0001\u0000"+
		"\u0000\u0000\u158d\u158e\u0001\u0000\u0000\u0000\u158e\u158f\u0001\u0000"+
		"\u0000\u0000\u158f\u1590\u0005\u02fe\u0000\u0000\u1590\u1591\u0003\u01f4"+
		"\u00fa\u0000\u1591\u1592\u0005\u0286\u0000\u0000\u1592\u1593\u0003\u01ce"+
		"\u00e7\u0000\u1593\u1594\u0005\u02ff\u0000\u0000\u1594\u1595\u0003\u01f2"+
		"\u00f9\u0000\u1595\u1596\u0005\u0283\u0000\u0000\u1596\u1597\u0005\u02fe"+
		"\u0000\u0000\u1597\u1598\u0003\u01ea\u00f5\u0000\u1598\u1599\u0005\u02ff"+
		"\u0000\u0000\u1599\u159b\u0001\u0000\u0000\u0000\u159a\u158a\u0001\u0000"+
		"\u0000\u0000\u159a\u159b\u0001\u0000\u0000\u0000\u159b\u15b8\u0001\u0000"+
		"\u0000\u0000\u159c\u159d\u0005\u00e5\u0000\u0000\u159d\u159e\u0005\u0126"+
		"\u0000\u0000\u159e\u159f\u0005\u02fe\u0000\u0000\u159f\u15a0\u0003\u01ce"+
		"\u00e7\u0000\u15a0\u15a1\u0005\u02ff\u0000\u0000\u15a1\u15a2\u0005\u01c5"+
		"\u0000\u0000\u15a2\u15a4\u0003\u0200\u0100\u0000\u15a3\u15a5\u0003\u01ce"+
		"\u00e7\u0000\u15a4\u15a3\u0001\u0000\u0000\u0000\u15a4\u15a5\u0001\u0000"+
		"\u0000\u0000\u15a5\u15ab\u0001\u0000\u0000\u0000\u15a6\u15a7\u0005\u0146"+
		"\u0000\u0000\u15a7\u15ac\u0005\u00ed\u0000\u0000\u15a8\u15a9\u0005\u0146"+
		"\u0000\u0000\u15a9\u15ac\u0005\u019e\u0000\u0000\u15aa\u15ac\u0005\u0147"+
		"\u0000\u0000\u15ab\u15a6\u0001\u0000\u0000\u0000\u15ab\u15a8\u0001\u0000"+
		"\u0000\u0000\u15ab\u15aa\u0001\u0000\u0000\u0000\u15ab\u15ac\u0001\u0000"+
		"\u0000\u0000\u15ac\u15b0\u0001\u0000\u0000\u0000\u15ad\u15ae\u0005\u0180"+
		"\u0000\u0000\u15ae\u15af\u0005\u00a3\u0000\u0000\u15af\u15b1\u0003\u0200"+
		"\u0100\u0000\u15b0\u15ad\u0001\u0000\u0000\u0000\u15b0\u15b1\u0001\u0000"+
		"\u0000\u0000\u15b1\u15b5\u0001\u0000\u0000\u0000\u15b2\u15b3\u0005\u0180"+
		"\u0000\u0000\u15b3\u15b4\u0005\u0269\u0000\u0000\u15b4\u15b6\u0003\u0200"+
		"\u0100\u0000\u15b5\u15b2\u0001\u0000\u0000\u0000\u15b5\u15b6\u0001\u0000"+
		"\u0000\u0000\u15b6\u15b8\u0001\u0000\u0000\u0000\u15b7\u1576\u0001\u0000"+
		"\u0000\u0000\u15b7\u157e\u0001\u0000\u0000\u0000\u15b7\u1583\u0001\u0000"+
		"\u0000\u0000\u15b7\u159a\u0001\u0000\u0000\u0000\u15b7\u159c\u0001\u0000"+
		"\u0000\u0000\u15b8\u15bd\u0001\u0000\u0000\u0000\u15b9\u15bb\u0005\u016d"+
		"\u0000\u0000\u15ba\u15b9\u0001\u0000\u0000\u0000\u15ba\u15bb\u0001\u0000"+
		"\u0000\u0000\u15bb\u15bc\u0001\u0000\u0000\u0000\u15bc\u15be\u0005\u009d"+
		"\u0000\u0000\u15bd\u15ba\u0001\u0000\u0000\u0000\u15bd\u15be\u0001\u0000"+
		"\u0000\u0000\u15be\u15c1\u0001\u0000\u0000\u0000\u15bf\u15c0\u0005\u0111"+
		"\u0000\u0000\u15c0\u15c2\u0007\u0017\u0000\u0000\u15c1\u15bf\u0001\u0000"+
		"\u0000\u0000\u15c1\u15c2\u0001\u0000\u0000\u0000\u15c2\u01f7\u0001\u0000"+
		"\u0000\u0000\u15c3\u15c8\u0003\u01ca\u00e5\u0000\u15c4\u15c8\u0005\u008d"+
		"\u0000\u0000\u15c5\u15c8\u0005\u0206\u0000\u0000\u15c6\u15c8\u0005\u01b9"+
		"\u0000\u0000\u15c7\u15c3\u0001\u0000\u0000\u0000\u15c7\u15c4\u0001\u0000"+
		"\u0000\u0000\u15c7\u15c5\u0001\u0000\u0000\u0000\u15c7\u15c6\u0001\u0000"+
		"\u0000\u0000\u15c8\u01f9\u0001\u0000\u0000\u0000\u15c9\u15ce\u0003\u01f8"+
		"\u00fc\u0000\u15ca\u15cb\u0005\u02f8\u0000\u0000\u15cb\u15cd\u0003\u01f8"+
		"\u00fc\u0000\u15cc\u15ca\u0001\u0000\u0000\u0000\u15cd\u15d0\u0001\u0000"+
		"\u0000\u0000\u15ce\u15cc\u0001\u0000\u0000\u0000\u15ce\u15cf\u0001\u0000"+
		"\u0000\u0000\u15cf\u01fb\u0001\u0000\u0000\u0000\u15d0\u15ce\u0001\u0000"+
		"\u0000\u0000\u15d1\u15dd\u0005\u0180\u0000\u0000\u15d2\u15dd\u0005\u017c"+
		"\u0000\u0000\u15d3\u15dd\u0005\u0259\u0000\u0000\u15d4\u15dd\u0005\u00da"+
		"\u0000\u0000\u15d5\u15dd\u0005\u028d\u0000\u0000\u15d6\u15dd\u0005\u0167"+
		"\u0000\u0000\u15d7\u15dd\u0005\u016a\u0000\u0000\u15d8\u15dd\u0005\u0308"+
		"\u0000\u0000\u15d9\u15dd\u0005\u0304\u0000\u0000\u15da\u15dd\u0005\u0305"+
		"\u0000\u0000\u15db\u15dd\u0003\u0200\u0100\u0000\u15dc\u15d1\u0001\u0000"+
		"\u0000\u0000\u15dc\u15d2\u0001\u0000\u0000\u0000\u15dc\u15d3\u0001\u0000"+
		"\u0000\u0000\u15dc\u15d4\u0001\u0000\u0000\u0000\u15dc\u15d5\u0001\u0000"+
		"\u0000\u0000\u15dc\u15d6\u0001\u0000\u0000\u0000\u15dc\u15d7\u0001\u0000"+
		"\u0000\u0000\u15dc\u15d8\u0001\u0000\u0000\u0000\u15dc\u15d9\u0001\u0000"+
		"\u0000\u0000\u15dc\u15da\u0001\u0000\u0000\u0000\u15dc\u15db\u0001\u0000"+
		"\u0000\u0000\u15dd\u01fd\u0001\u0000\u0000\u0000\u15de\u15df\u00071\u0000"+
		"\u0000\u15df\u01ff\u0001\u0000\u0000\u0000\u15e0\u15e1\u0006\u0100\uffff"+
		"\uffff\u0000\u15e1\u15e7\u0003\u01fe\u00ff\u0000\u15e2\u15e7\u0005\u0309"+
		"\u0000\u0000\u15e3\u15e7\u0005\u030a\u0000\u0000\u15e4\u15e7\u0003\u01c2"+
		"\u00e1\u0000\u15e5\u15e7\u0005\u030c\u0000\u0000\u15e6\u15e0\u0001\u0000"+
		"\u0000\u0000\u15e6\u15e2\u0001\u0000\u0000\u0000\u15e6\u15e3\u0001\u0000"+
		"\u0000\u0000\u15e6\u15e4\u0001\u0000\u0000\u0000\u15e6\u15e5\u0001\u0000"+
		"\u0000\u0000\u15e7\u15ed\u0001\u0000\u0000\u0000\u15e8\u15e9\n\u0003\u0000"+
		"\u0000\u15e9\u15ea\u0005\u0307\u0000\u0000\u15ea\u15ec\u0003\u0200\u0100"+
		"\u0004\u15eb\u15e8\u0001\u0000\u0000\u0000\u15ec\u15ef\u0001\u0000\u0000"+
		"\u0000\u15ed\u15eb\u0001\u0000\u0000\u0000\u15ed\u15ee\u0001\u0000\u0000"+
		"\u0000\u15ee\u0201\u0001\u0000\u0000\u0000\u15ef\u15ed\u0001\u0000\u0000"+
		"\u0000\u15f0\u15f1\t\u0000\u0000\u0000\u15f1\u0203\u0001\u0000\u0000\u0000"+
		"\u15f2\u15f3\u0003\u0200\u0100\u0000\u15f3\u0205\u0001\u0000\u0000\u0000"+
		"\u15f4\u15f5\u0003\u0200\u0100\u0000\u15f5\u0207\u0001\u0000\u0000\u0000"+
		"\u15f6\u15f7\u0003\u0200\u0100\u0000\u15f7\u0209\u0001\u0000\u0000\u0000"+
		"\u15f8\u15f9\u0003\u0200\u0100\u0000\u15f9\u020b\u0001\u0000\u0000\u0000"+
		"\u15fa\u15fb\u0003\u0200\u0100\u0000\u15fb\u020d\u0001\u0000\u0000\u0000"+
		"\u15fc\u15fd\u0003\u0200\u0100\u0000\u15fd\u020f\u0001\u0000\u0000\u0000"+
		"\u15fe\u15ff\u0003\u0200\u0100\u0000\u15ff\u0211\u0001\u0000\u0000\u0000"+
		"\u02b3\u0217\u021b\u0253\u027f\u029f\u02bc\u02d3\u02e1\u02f1\u02fa\u02fe"+
		"\u0325\u0333\u033e\u0348\u0350\u0359\u035f\u0365\u0368\u036c\u0370\u0374"+
		"\u0378\u037d\u0383\u0387\u0390\u0398\u03a1\u03aa\u03b4\u03be\u03c7\u03cc"+
		"\u03d2\u03db\u03df\u03e6\u03ed\u0407\u0409\u0410\u0418\u041b\u041f\u0428"+
		"\u042b\u042f\u0433\u043e\u044a\u0451\u046a\u0470\u047b\u048e\u049a\u04aa"+
		"\u04b0\u04b2\u04b6\u04c0\u04c9\u04cb\u04d6\u04f1\u04fd\u0511\u0515\u051a"+
		"\u051c\u0524\u052e\u0538\u0552\u0566\u056d\u0573\u0578\u0585\u058a\u0591"+
		"\u0597\u059c\u05a7\u05ac\u05b4\u05b9\u05bd\u05d7\u05d9\u05df\u05e4\u05e8"+
		"\u05ec\u05f0\u05f4\u05fe\u0605\u0615\u061f\u062f\u0642\u064e\u0670\u0680"+
		"\u0693\u06a5\u06e2\u0702\u071a\u072f\u0745\u074c\u0781\u0791\u0794\u07a4"+
		"\u07aa\u07ae\u07b4\u07ba\u07c0\u07c6\u07cc\u07d2\u07d8\u07de\u07e4\u07e8"+
		"\u07ee\u07f4\u07fa\u0803\u0806\u0809\u080e\u0811\u0821\u0827\u082b\u0831"+
		"\u0837\u083b\u0852\u0858\u085c\u0862\u0868\u086e\u0874\u087a\u0880\u0886"+
		"\u088c\u0892\u0896\u089c\u08a2\u08a6\u08b6\u08bc\u08c2\u08d6\u08dd\u08e5"+
		"\u08f1\u08f7\u08fb\u090a\u090f\u0914\u0919\u091e\u0923\u0928\u092d\u0933"+
		"\u0938\u093c\u0946\u094c\u0954\u0956\u0961\u0969\u0974\u0982\u098e\u0990"+
		"\u0997\u099e\u09a6\u09b1\u09b5\u09ba\u09c3\u09c8\u09d1\u09e0\u09f5\u09f7"+
		"\u09f9\u09fd\u0a01\u0a06\u0a09\u0a0f\u0a13\u0a17\u0a1c\u0a1f\u0a26\u0a29"+
		"\u0a2c\u0a34\u0a38\u0a3a\u0a42\u0a49\u0a4c\u0a50\u0a56\u0a59\u0a66\u0a6c"+
		"\u0a72\u0a78\u0a7e\u0a84\u0a88\u0a8c\u0a99\u0aa1\u0aa5\u0aae\u0ab5\u0abe"+
		"\u0ac6\u0ad7\u0adb\u0ae2\u0aea\u0af0\u0b04\u0b19\u0b1b\u0b1d\u0b24\u0b2f"+
		"\u0b33\u0b37\u0b3e\u0b41\u0b48\u0b52\u0b5b\u0b5f\u0b65\u0b6a\u0b6d\u0b73"+
		"\u0b79\u0b7d\u0b80\u0b84\u0b87\u0b8a\u0b93\u0b95\u0bb8\u0bbb\u0bbe\u0bc6"+
		"\u0bcd\u0bd2\u0bd6\u0bda\u0be1\u0be6\u0bea\u0bed\u0bf0\u0bf4\u0bfb\u0bfe"+
		"\u0c2c\u0c33\u0c37\u0c3d\u0c48\u0c50\u0c56\u0c5a\u0c60\u0c64\u0c6a\u0c72"+
		"\u0c76\u0c7d\u0c81\u0c87\u0c8b\u0c93\u0c97\u0c9e\u0ca2\u0ca8\u0cac\u0cb2"+
		"\u0cb9\u0cbd\u0cc1\u0cc5\u0cca\u0cce\u0cd5\u0cd9\u0ce2\u0ce8\u0cef\u0cf5"+
		"\u0cfc\u0d02\u0d08\u0d0e\u0d12\u0d18\u0d20\u0d26\u0d2c\u0d30\u0d36\u0d3a"+
		"\u0d40\u0d44\u0d4a\u0d52\u0d56\u0d5c\u0d60\u0d66\u0d70\u0d74\u0d7c\u0d80"+
		"\u0d88\u0d8c\u0d94\u0d98\u0d9e\u0daa\u0db0\u0db6\u0dba\u0dc0\u0dc9\u0dd1"+
		"\u0dda\u0dde\u0de3\u0de7\u0dea\u0df3\u0df8\u0e03\u0e0c\u0e13\u0e19\u0e1d"+
		"\u0e20\u0e26\u0e2e\u0e33\u0e36\u0e3f\u0e41\u0e43\u0e46\u0e4f\u0e52\u0e56"+
		"\u0e69\u0e6c\u0e6f\u0e7e\u0e82\u0e84\u0e87\u0e89\u0e91\u0e99\u0ea1\u0ead"+
		"\u0eb3\u0eb7\u0ebe\u0ec6\u0ecd\u0ed4\u0eda\u0ee2\u0ee6\u0ef1\u0f16\u0f2a"+
		"\u0f30\u0f35\u0f39\u0f3d\u0f42\u0f48\u0f4c\u0f4f\u0f52\u0f55\u0f58\u0f5b"+
		"\u0f5e\u0f61\u0f64\u0f67\u0f6a\u0f6d\u0f73\u0f76\u0f7a\u0f7e\u0f82\u0f87"+
		"\u0f8d\u0f91\u0f94\u0f97\u0f9a\u0f9d\u0fa0\u0fa3\u0fa6\u0fa9\u0fac\u0faf"+
		"\u0fb3\u0fba\u0fc2\u0fcb\u0fd1\u0fd7\u0fdb\u0fe2\u0fe4\u0fea\u0ff0\u0ff5"+
		"\u0ff9\u1006\u100d\u1010\u1017\u1027\u102e\u1032\u1035\u1039\u103d\u1040"+
		"\u1044\u1047\u104c\u104f\u1053\u1057\u105a\u105d\u1062\u1069\u106c\u1075"+
		"\u107d\u1084\u1088\u108b\u108e\u1091\u1095\u1098\u109b\u10a3\u10a5\u10a7"+
		"\u10aa\u10b1\u10b7\u10bb\u10be\u10c1\u10c4\u10c7\u10ca\u10d0\u10d2\u10dc"+
		"\u10e9\u10f4\u10f9\u10fd\u1105\u110d\u1118\u111d\u1120\u1123\u1128\u112b"+
		"\u112e\u1132\u1137\u113b\u1147\u1155\u115f\u1163\u116e\u1173\u1178\u117d"+
		"\u1181\u118a\u118f\u1195\u119f\u11a2\u11a8\u11ad\u11b2\u11bf\u11c7\u11ca"+
		"\u11cf\u11d1\u11d9\u11e3\u11e5\u11fc\u1204\u1234\u1246\u124b\u125b\u126d"+
		"\u1272\u1276\u127b\u1282\u128f\u1297\u1299\u12a1\u12a9\u12ab\u12b7\u12bb"+
		"\u12c7\u12cb\u12cf\u12d7\u12dd\u12e4\u12e8\u12eb\u12ee\u12f1\u12f8\u1300"+
		"\u1307\u1312\u1318\u1322\u1328\u132e\u1339\u1347\u134a\u1359\u136b\u1370"+
		"\u1376\u137b\u1381\u1387\u1391\u1397\u139a\u13a2\u13a7\u13ae\u13b2\u13bb"+
		"\u13c7\u13d0\u13d3\u13e1\u13e3\u13e7\u13ee\u13f6\u13fc\u1403\u140a\u140e"+
		"\u1413\u141b\u1420\u1431\u1437\u1439\u1444\u1448\u1451\u1454\u145a\u145e"+
		"\u1461\u146b\u1474\u1476\u1479\u147f\u1488\u148d\u1490\u1495\u1498\u149b"+
		"\u14a5\u14ab\u14b9\u14be\u14c2\u14c6\u14ca\u14ce\u14d1\u14d5\u14d9\u14e1"+
		"\u14e4\u14e7\u14ee\u14f1\u14f6\u14fb\u1500\u1505\u1510\u1515\u1523\u152b"+
		"\u152d\u1532\u1535\u1539\u153c\u1543\u1546\u154a\u1552\u1559\u155f\u1566"+
		"\u1569\u156c\u1570\u1574\u157c\u158d\u159a\u15a4\u15ab\u15b0\u15b5\u15b7"+
		"\u15ba\u15bd\u15c1\u15c7\u15ce\u15dc\u15e6\u15ed";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}