// Generated from antlr_psql\antlr4\PostgreSQLParser.g4 by ANTLR 4.7.2
package org.antlr.sql.dialects.psql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PostgreSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		WHITESPACE=1, BLOCK_COMMENT=2, LINE_COMMENT=3, A_=4, ABORT=5, ABS=6, ABSOLUTE=7, 
		ACCESS=8, ACTION=9, ADA=10, ADD=11, ADMIN=12, AFTER=13, AGGREGATE=14, 
		ALIAS=15, ALL=16, ALLOCATE=17, ALSO=18, ALTER=19, ALWAYS=20, ANALYSE=21, 
		ANALYZE=22, AND=23, ANY=24, ARE=25, ARRAY=26, AS=27, ASC=28, ASENSITIVE=29, 
		ASSERTION=30, ASSIGNMENT=31, ASYMMETRIC=32, AT=33, ATOMIC=34, ATTRIBUTE=35, 
		ATTRIBUTES=36, AUTHORIZATION=37, AVG=38, BACKWARD=39, BEFORE=40, BEGIN=41, 
		BERNOULLI=42, BETWEEN=43, BIGINT=44, BINARY=45, BIT=46, BITVAR=47, BIT_LENGTH=48, 
		BLOB=49, BOOLEAN=50, BOTH=51, BREADTH=52, BY=53, C_=54, CACHE=55, CALL=56, 
		CALLED=57, CARDINALITY=58, CASCADE=59, CASCADED=60, CASE=61, CAST=62, 
		CATALOG=63, CATALOG_NAME=64, CEIL=65, CEILING=66, CHAIN=67, CHAR=68, CHARACTER=69, 
		CHARACTERISTICS=70, CHARACTERS=71, CHARACTER_LENGTH=72, CHARACTER_SET_CATALOG=73, 
		CHARACTER_SET_NAME=74, CHARACTER_SET_SCHEMA=75, CHAR_LENGTH=76, CHECK=77, 
		CHECKED=78, CHECKPOINT=79, CLASS=80, CLASS_ORIGIN=81, CLOB=82, CLOSE=83, 
		CLUSTER=84, COALESCE=85, COBOL=86, COLLATE=87, COLLATION=88, COLLATION_CATALOG=89, 
		COLLATION_NAME=90, COLLATION_SCHEMA=91, COLLECT=92, COLUMN=93, COLUMN_NAME=94, 
		COMMAND_FUNCTION=95, COMMAND_FUNCTION_CODE=96, COMMENT=97, COMMIT=98, 
		COMMITTED=99, COMPLETION=100, CONDITION=101, CONDITION_NUMBER=102, CONFIGURATION=103, 
		CONNECT=104, CONNECTION=105, CONNECTION_NAME=106, CONSTRAINT=107, CONSTRAINTS=108, 
		CONSTRAINT_CATALOG=109, CONSTRAINT_NAME=110, CONSTRAINT_SCHEMA=111, CONSTRUCTOR=112, 
		CONTAINS=113, CONTINUE=114, CONVERSION=115, CONVERT=116, COPY=117, CORR=118, 
		CORRESPONDING=119, COUNT=120, COVAR_POP=121, COVAR_SAMP=122, CREATE=123, 
		CREATEDB=124, CREATEUSER=125, CROSS=126, CSV=127, CUBE=128, CUME_DIST=129, 
		CURRENT=130, CURRENT_DATE=131, CURRENT_DEFAULT_TRANSFORM_GROUP=132, CURRENT_PATH=133, 
		CURRENT_ROLE=134, CURRENT_TIME=135, CURRENT_TIMESTAMP=136, CURRENT_TRANSFORM_GROUP_FOR_TYPE=137, 
		CURRENT_USER=138, CURSOR=139, CURSOR_NAME=140, CYCLE=141, DATA=142, DATABASE=143, 
		DATE=144, DATETIME_INTERVAL_CODE=145, DATETIME_INTERVAL_PRECISION=146, 
		DAY=147, DEALLOCATE=148, DEC=149, DECIMAL=150, DECLARE=151, DEFAULT=152, 
		DEFAULTS=153, DEFERRABLE=154, DEFERRED=155, DEFINED=156, DEFINER=157, 
		DEGREE=158, DELETE=159, DELIMITER=160, DELIMITERS=161, DENSE_RANK=162, 
		DEPTH=163, DEREF=164, DERIVED=165, DESC=166, DESCRIBE=167, DESCRIPTOR=168, 
		DESTROY=169, DESTRUCTOR=170, DETERMINISTIC=171, DIAGNOSTICS=172, DICTIONARY=173, 
		DISCONNECT=174, DISPATCH=175, DISTINCT=176, DO=177, DOMAIN=178, DOUBLE=179, 
		DROP=180, DYNAMIC=181, DYNAMIC_FUNCTION=182, DYNAMIC_FUNCTION_CODE=183, 
		EACH=184, ELEMENT=185, ELSE=186, ENCODING=187, ENCRYPTED=188, END=189, 
		END_EXEC=190, EQUALS=191, ESCAPE=192, EVERY=193, EXCEPT=194, EXCEPTION=195, 
		EXCLUDE=196, EXCLUDING=197, EXCLUSIVE=198, EXEC=199, EXECUTE=200, EXISTING=201, 
		EXISTS=202, EXP=203, EXPLAIN=204, EXTENSION=205, EXTERNAL=206, EXTRACT=207, 
		FALSE=208, FETCH=209, FILTER=210, FINAL=211, FIRST=212, FLOAT=213, FLOOR=214, 
		FOLLOWING=215, FOR=216, FORCE=217, FOREIGN=218, FORTRAN=219, FORWARD=220, 
		FOUND=221, FREE=222, FREEZE=223, FROM=224, FULL=225, FUNCTION=226, FUSION=227, 
		G_=228, GENERAL=229, GENERATED=230, GET=231, GLOBAL=232, GO=233, GOTO=234, 
		GRANT=235, GRANTED=236, GROUP=237, GROUPING=238, HANDLER=239, HAVING=240, 
		HIERARCHY=241, HOLD=242, HOST=243, HOUR=244, IDENTITY=245, IGNORE=246, 
		ILIKE=247, IMMEDIATE=248, IMMUTABLE=249, IMPLEMENTATION=250, IMPLICIT=251, 
		IN=252, INCLUDING=253, INCREMENT=254, INDEX=255, INDICATOR=256, INFIX=257, 
		INHERITS=258, INITIALIZE=259, INITIALLY=260, INNER=261, INOUT=262, INPUT=263, 
		INSENSITIVE=264, INSERT=265, INSTANCE=266, INSTANTIABLE=267, INSTEAD=268, 
		INT=269, INTEGER=270, INTERSECT=271, INTERSECTION=272, INTERVAL=273, INTO=274, 
		INVOKER=275, IS=276, ISNULL=277, ISOLATION=278, ITERATE=279, JOIN=280, 
		K_=281, KEY=282, KEY_MEMBER=283, KEY_TYPE=284, LANCOMPILER=285, LANGUAGE=286, 
		LARGE=287, LAST=288, LATERAL=289, LEADING=290, LEFT=291, LENGTH=292, LESS=293, 
		LEVEL=294, LIKE=295, LIMIT=296, LISTEN=297, LN=298, LOAD=299, LOCAL=300, 
		LOCALTIME=301, LOCALTIMESTAMP=302, LOCATION=303, LOCATOR=304, LOCK=305, 
		LOCKED=306, LOWER=307, M_=308, MAP=309, MAPPING=310, MATCH=311, MATCHED=312, 
		MAX=313, MAXVALUE=314, MEMBER=315, MERGE=316, MESSAGE_LENGTH=317, MESSAGE_OCTET_LENGTH=318, 
		MESSAGE_TEXT=319, METHOD=320, MIN=321, MINUTE=322, MINVALUE=323, MOD=324, 
		MODE=325, MODIFIES=326, MODIFY=327, MODULE=328, MONTH=329, MORE_=330, 
		MOVE=331, MULTISET=332, MUMPS=333, NAME=334, NAMES=335, NATIONAL=336, 
		NATURAL=337, NCHAR=338, NCLOB=339, NESTING=340, NEW=341, NEXT=342, NO=343, 
		NOCREATEDB=344, NOCREATEUSER=345, NONE=346, NORMALIZE=347, NORMALIZED=348, 
		NOT=349, NOTHING=350, NOTIFY=351, NOTNULL=352, NOWAIT=353, NULL=354, NULLABLE=355, 
		NULLIF=356, NULLS=357, NUMBER=358, NUMERIC=359, OBJECT=360, OCTETS=361, 
		OCTET_LENGTH=362, OF=363, OFF=364, OFFSET=365, OIDS=366, OLD=367, ON=368, 
		ONLY=369, OPEN=370, OPERATION=371, OPERATOR=372, OPTION=373, OPTIONS=374, 
		OR=375, ORDER=376, ORDERING=377, ORDINALITY=378, OTHERS=379, OUT=380, 
		OUTER=381, OUTPUT=382, OVER=383, OVERLAPS=384, OVERLAY=385, OVERRIDING=386, 
		OWNER=387, PAD=388, PARAMETER=389, PARAMETERS=390, PARAMETER_MODE=391, 
		PARAMETER_NAME=392, PARAMETER_ORDINAL_POSITION=393, PARAMETER_SPECIFIC_CATALOG=394, 
		PARAMETER_SPECIFIC_NAME=395, PARAMETER_SPECIFIC_SCHEMA=396, PARSER=397, 
		PARTIAL=398, PARTITION=399, PASCAL=400, PASSWORD=401, PATH=402, PERCENTILE_CONT=403, 
		PERCENTILE_DISC=404, PERCENT_RANK=405, PLACING=406, PLI=407, POSITION=408, 
		POSTFIX=409, POWER=410, PRECEDING=411, PRECISION=412, PREFIX=413, PREORDER=414, 
		PREPARE=415, PRESERVE=416, PRIMARY=417, PRIOR=418, PRIVILEGES=419, PROCEDURAL=420, 
		PROCEDURE=421, PUBLIC=422, PUBLICATION=423, QUOTE=424, RANGE=425, RANK=426, 
		READ=427, READS=428, REAL=429, RECHECK=430, RECURSIVE=431, REF=432, REFERENCES=433, 
		REFERENCING=434, REGR_AVGX=435, REGR_AVGY=436, REGR_COUNT=437, REGR_INTERCEPT=438, 
		REGR_R2=439, REGR_SLOPE=440, REGR_SXX=441, REGR_SXY=442, REGR_SYY=443, 
		REINDEX=444, RELATIVE=445, RELEASE=446, RENAME=447, REPEATABLE=448, REPLACE=449, 
		RESET=450, RESTART=451, RESTRICT=452, RESULT=453, RETURN=454, RETURNED_CARDINALITY=455, 
		RETURNED_LENGTH=456, RETURNED_OCTET_LENGTH=457, RETURNED_SQLSTATE=458, 
		RETURNS=459, REVOKE=460, RIGHT=461, ROLE=462, ROLLBACK=463, ROLLUP=464, 
		ROUTINE=465, ROUTINE_CATALOG=466, ROUTINE_NAME=467, ROUTINE_SCHEMA=468, 
		ROW=469, ROWS=470, ROW_COUNT=471, ROW_NUMBER=472, RULE=473, SAVEPOINT=474, 
		SCALE=475, SCHEMA=476, SCHEMA_NAME=477, SCOPE=478, SCOPE_CATALOG=479, 
		SCOPE_NAME=480, SCOPE_SCHEMA=481, SCROLL=482, SEARCH=483, SECOND=484, 
		SECTION=485, SECURITY=486, SELECT=487, SELF=488, SENSITIVE=489, SEQUENCE=490, 
		SERIALIZABLE=491, SERVER_NAME=492, SESSION=493, SESSION_USER=494, SET=495, 
		SETOF=496, SETS=497, SHARE=498, SHOW=499, SIMILAR=500, SIMPLE=501, SIZE=502, 
		SKIP_=503, SMALLINT=504, SOME=505, SOURCE=506, SPACE=507, SPECIFIC=508, 
		SPECIFICTYPE=509, SPECIFIC_NAME=510, SQL=511, SQLCODE=512, SQLERROR=513, 
		SQLEXCEPTION=514, SQLSTATE=515, SQLWARNING=516, SQRT=517, STABLE=518, 
		START=519, STATE=520, STATEMENT=521, STATIC=522, STATISTICS=523, STDDEV_POP=524, 
		STDDEV_SAMP=525, STDIN=526, STDOUT=527, STORAGE=528, STRICT=529, STRUCTURE=530, 
		STYLE=531, SUBCLASS_ORIGIN=532, SUBSCRIPTION=533, SUBLIST=534, SUBMULTISET=535, 
		SUBSTRING=536, SUM=537, SYMMETRIC=538, SYSID=539, SYSTEM=540, SYSTEM_USER=541, 
		TABLE=542, TABLESAMPLE=543, TABLESPACE=544, TABLE_NAME=545, TEMP=546, 
		TEMPLATE=547, TEMPORARY=548, TERMINATE=549, THAN=550, THEN=551, TIES=552, 
		TIME=553, TIME_TZ=554, TIMESTAMP=555, TIMESTAMP_TZ=556, TIMEZONE_HOUR=557, 
		TIMEZONE_MINUTE=558, TO=559, TOAST=560, TOP_LEVEL_COUNT=561, TRAILING=562, 
		TRANSACTION=563, TRANSACTIONS_COMMITTED=564, TRANSACTIONS_ROLLED_BACK=565, 
		TRANSACTION_ACTIVE=566, TRANSFORM=567, TRANSFORMS=568, TRANSLATE=569, 
		TRANSLATION=570, TREAT=571, TRIGGER=572, TRIGGER_CATALOG=573, TRIGGER_NAME=574, 
		TRIGGER_SCHEMA=575, TRIM=576, TRUE=577, TRUNCATE=578, TRUSTED=579, TYPE=580, 
		UESCAPE=581, UNBOUNDED=582, UNCOMMITTED=583, UNDER=584, UNENCRYPTED=585, 
		UNION=586, UNIQUE=587, UNKNOWN=588, UNLISTEN=589, UNNAMED=590, UNNEST=591, 
		UNTIL=592, UPDATE=593, UPPER=594, USAGE=595, USER=596, USER_DEFINED_TYPE_CATALOG=597, 
		USER_DEFINED_TYPE_CODE=598, USER_DEFINED_TYPE_NAME=599, USER_DEFINED_TYPE_SCHEMA=600, 
		USING=601, VACUUM=602, VALID=603, VALIDATOR=604, VALUE=605, VALUES=606, 
		VARCHAR=607, VARIABLE=608, VARIADIC=609, VARYING=610, VAR_POP=611, VAR_SAMP=612, 
		VERBOSE=613, VIEW=614, VOLATILE=615, WHEN=616, WHENEVER=617, WHERE=618, 
		WIDTH_BUCKET=619, WINDOW=620, WITH=621, WITHIN=622, WITHOUT=623, WORK=624, 
		WRITE=625, YEAR=626, ZONE=627, SUPERUSER=628, NOSUPERUSER=629, CREATEROLE=630, 
		NOCREATEROLE=631, INHERIT=632, NOINHERIT=633, LOGIN=634, NOLOGIN=635, 
		REPLICATION=636, NOREPLICATION=637, BYPASSRLS=638, NOBYPASSRLS=639, SFUNC=640, 
		STYPE=641, SSPACE=642, FINALFUNC=643, FINALFUNC_EXTRA=644, COMBINEFUNC=645, 
		SERIALFUNC=646, DESERIALFUNC=647, INITCOND=648, MSFUNC=649, MINVFUNC=650, 
		MSTYPE=651, MSSPACE=652, MFINALFUNC=653, MFINALFUNC_EXTRA=654, MINITCOND=655, 
		SORTOP=656, PARALLEL=657, HYPOTHETICAL=658, SAFE=659, RESTRICTED=660, 
		UNSAFE=661, BASETYPE=662, IF=663, LOCALE=664, LC_COLLATE=665, LC_CTYPE=666, 
		PROVIDER=667, VERSION=668, ALLOW_CONNECTIONS=669, IS_TEMPLATE=670, EVENT=671, 
		WRAPPER=672, SERVER=673, BTREE=674, HASH_=675, GIST=676, SPGIST=677, GIN=678, 
		BRIN=679, CONCURRENTLY=680, INLINE=681, MATERIALIZED=682, LEFTARG=683, 
		RIGHTARG=684, COMMUTATOR=685, NEGATOR=686, HASHES=687, MERGES=688, FAMILY=689, 
		POLICY=690, OWNED=691, ABSTIME=692, BOOL=693, BOX=694, FLOAT4=695, FLOAT8=696, 
		INT2=697, INT4=698, INT8=699, JSON=700, JSONB=701, LINE=702, POINT=703, 
		RELTIME=704, TEXT=705, COMMA=706, COLON=707, COLON_COLON=708, DOLLAR=709, 
		DOLLAR_DOLLAR=710, STAR=711, OPEN_PAREN=712, CLOSE_PAREN=713, OPEN_BRACKET=714, 
		CLOSE_BRACKET=715, BIT_STRING=716, REGEX_STRING=717, NUMERIC_LITERAL=718, 
		INTEGER_LITERAL=719, HEX_INTEGER_LITERAL=720, DOT=721, SINGLEQ_STRING_LITERAL=722, 
		DOUBLEQ_STRING_LITERAL=723, IDENTIFIER=724, AMP=725, AMP_AMP=726, AMP_LT=727, 
		AT_AT=728, AT_GT=729, AT_SIGN=730, BANG=731, BANG_BANG=732, BANG_EQUAL=733, 
		CARET=734, EQUAL=735, EQUAL_GT=736, GT=737, GTE=738, GT_GT=739, HASH=740, 
		HASH_EQ=741, HASH_GT=742, HASH_GT_GT=743, HASH_HASH=744, HYPHEN_GT=745, 
		HYPHEN_GT_GT=746, HYPHEN_PIPE_HYPHEN=747, LT=748, LTE=749, LT_AT=750, 
		LT_CARET=751, LT_GT=752, LT_HYPHEN_GT=753, LT_LT=754, LT_LT_EQ=755, LT_QMARK_GT=756, 
		MINUS=757, PERCENT=758, PIPE=759, PIPE_PIPE=760, PIPE_PIPE_SLASH=761, 
		PIPE_SLASH=762, PLUS=763, QMARK=764, QMARK_AMP=765, QMARK_HASH=766, QMARK_HYPHEN=767, 
		QMARK_PIPE=768, SLASH=769, TIL=770, TIL_EQ=771, TIL_GTE_TIL=772, TIL_GT_TIL=773, 
		TIL_LTE_TIL=774, TIL_LT_TIL=775, TIL_STAR=776, TIL_TIL=777;
	public static final int
		RULE_root = 0, RULE_stmt = 1, RULE_abort_stmt = 2, RULE_alter_stmt = 3, 
		RULE_alter_aggregate_stmt = 4, RULE_alter_collation_stmt = 5, RULE_alter_conversion_stmt = 6, 
		RULE_alter_database_stmt = 7, RULE_alter_default_privileges_stmt = 8, 
		RULE_alter_domain_stmt = 9, RULE_alter_event_trigger_stmt = 10, RULE_alter_extension_stmt = 11, 
		RULE_alter_foreign_data_wrapper_stmt = 12, RULE_alter_foreign_table_stmt = 13, 
		RULE_alter_function_stmt = 14, RULE_alter_group_stmt = 15, RULE_alter_index_stmt = 16, 
		RULE_alter_language_stmt = 17, RULE_alter_large_object_stmt = 18, RULE_alter_materialize_view_stmt = 19, 
		RULE_alter_operator_stmt = 20, RULE_alter_operator_class_stmt = 21, RULE_alter_operator_family_stmt = 22, 
		RULE_alter_policy_stmt = 23, RULE_alter_publication_stmt = 24, RULE_alter_role_stmt = 25, 
		RULE_alter_rule_stmt = 26, RULE_alter_schema_stmt = 27, RULE_alter_sequence_stmt = 28, 
		RULE_alter_server_stmt = 29, RULE_alter_statistics_stmt = 30, RULE_alter_subscription_stmt = 31, 
		RULE_alter_system_stmt = 32, RULE_alter_table_stmt = 33, RULE_alter_tablespace_stmt = 34, 
		RULE_alter_text_search_config_stmt = 35, RULE_alter_text_search_dict_stmt = 36, 
		RULE_alter_text_search_parser_stmt = 37, RULE_alter_text_search_template_stmt = 38, 
		RULE_alter_trigger_stmt = 39, RULE_alter_type_stmt = 40, RULE_alter_user_stmt = 41, 
		RULE_alter_user_mapping_stmt = 42, RULE_alter_view_stmt = 43, RULE_analyze_stmt = 44, 
		RULE_close_stmt = 45, RULE_cluster_stmt = 46, RULE_comment_stmt = 47, 
		RULE_commit_stmt = 48, RULE_commit_prepared_stmt = 49, RULE_copy_stmt = 50, 
		RULE_create_stmt = 51, RULE_create_access_method_stmt = 52, RULE_create_aggregate_stmt = 53, 
		RULE_create_cast_stmt = 54, RULE_create_collation_opt = 55, RULE_create_collation_opt_list = 56, 
		RULE_create_collation_stmt = 57, RULE_create_conversion_stmt = 58, RULE_create_database_stmt = 59, 
		RULE_domain_constraint = 60, RULE_create_domain_stmt = 61, RULE_create_event_trigger_cond = 62, 
		RULE_create_event_trigger_stmt = 63, RULE_create_foreign_data_options = 64, 
		RULE_create_foreign_data_stmt = 65, RULE_create_foreign_table_stmt = 66, 
		RULE_create_function_stmt = 67, RULE_create_group_stmt = 68, RULE_create_index_stmt = 69, 
		RULE_create_language_stmt = 70, RULE_create_materialized_view_stmt = 71, 
		RULE_create_operator_stmt = 72, RULE_create_operator_class_opt = 73, RULE_create_operator_class_stmt = 74, 
		RULE_create_operator_family_stmt = 75, RULE_create_policy_stmt = 76, RULE_create_role_stmt = 77, 
		RULE_create_rule_event = 78, RULE_create_rule_stmt = 79, RULE_create_schema_stmt = 80, 
		RULE_create_sequence_stmt = 81, RULE_create_server_stmt = 82, RULE_create_statistics_stmt = 83, 
		RULE_create_subscription_stmt = 84, RULE_create_table_stmt = 85, RULE_create_table_as_stmt = 86, 
		RULE_create_tablespace_stmt = 87, RULE_create_text_search_config_stmt = 88, 
		RULE_create_text_search_dict_stmt = 89, RULE_create_text_search_parser_stmt = 90, 
		RULE_create_text_search_template_stmt = 91, RULE_create_transform_stmt = 92, 
		RULE_create_trigger_stmt = 93, RULE_create_type_stmt = 94, RULE_create_user_stmt = 95, 
		RULE_create_user_mapping_stmt = 96, RULE_create_view_stmt = 97, RULE_deallocate_stmt = 98, 
		RULE_declare_stmt = 99, RULE_delete_stmt = 100, RULE_discard_stmt = 101, 
		RULE_drop_stmt = 102, RULE_drop_access_method_stmt = 103, RULE_drop_aggregate_stmt = 104, 
		RULE_drop_cast_stmt = 105, RULE_drop_collation_stmt = 106, RULE_drop_conversion_stmt = 107, 
		RULE_drop_database_stmt = 108, RULE_drop_domain_stmt = 109, RULE_drop_event_trigger_stmt = 110, 
		RULE_drop_extension_stmt = 111, RULE_drop_foreign_data_wrapper_stmt = 112, 
		RULE_drop_foreign_table_stmt = 113, RULE_drop_function_stmt = 114, RULE_drop_group_stmt = 115, 
		RULE_drop_index_stmt = 116, RULE_drop_language_stmt = 117, RULE_drop_materialized_view_stmt = 118, 
		RULE_drop_operator_stmt = 119, RULE_drop_operator_class_stmt = 120, RULE_drop_operator_family_stmt = 121, 
		RULE_drop_owned_stmt = 122, RULE_drop_policy_stmt = 123, RULE_drop_publication_stmt = 124, 
		RULE_drop_role_stmt = 125, RULE_drop_rule_stmt = 126, RULE_drop_schema_stmt = 127, 
		RULE_drop_sequence_stmt = 128, RULE_drop_server_stmt = 129, RULE_drop_statistics_stmt = 130, 
		RULE_drop_subscription_stmt = 131, RULE_drop_table_stmt = 132, RULE_drop_tablespace_stmt = 133, 
		RULE_drop_text_search_config_stmt = 134, RULE_drop_text_search_dict_stmt = 135, 
		RULE_drop_text_search_parser_stmt = 136, RULE_drop_text_search_template_stmt = 137, 
		RULE_drop_transform_stmt = 138, RULE_drop_trigger_stmt = 139, RULE_drop_type_stmt = 140, 
		RULE_drop_user_stmt = 141, RULE_drop_user_mapping_stmt = 142, RULE_drop_view_stmt = 143, 
		RULE_execute_stmt = 144, RULE_explain_stmt = 145, RULE_fetch_stmt = 146, 
		RULE_grant_stmt = 147, RULE_import_foreign_schema_stmt = 148, RULE_insert_stmt = 149, 
		RULE_listen_stmt = 150, RULE_load_stmt = 151, RULE_lock_stmt = 152, RULE_move_stmt = 153, 
		RULE_notify_stmt = 154, RULE_prepare_stmt = 155, RULE_prepare_transaction_stmt = 156, 
		RULE_reassign_owned_stmt = 157, RULE_refresh_materialized_view_stmt = 158, 
		RULE_reindex_stmt = 159, RULE_release_savepoint_stmt = 160, RULE_reset_stmt = 161, 
		RULE_revoke_stmt = 162, RULE_rollback_stmt = 163, RULE_rollback_prepared_stmt = 164, 
		RULE_rollback_to_savepoint_stmt = 165, RULE_savepoint_stmt = 166, RULE_security_label_stmt = 167, 
		RULE_select_stmt = 168, RULE_set_stmt = 169, RULE_set_constraints_stmt = 170, 
		RULE_set_role_stmt = 171, RULE_set_session_authorization_stmt = 172, RULE_set_transaction_stmt = 173, 
		RULE_show_stmt = 174, RULE_truncate_stmt = 175, RULE_unlisten_stmt = 176, 
		RULE_update_stmt = 177, RULE_vacuum_stmt = 178, RULE_values_stmt = 179, 
		RULE_selector_clause = 180, RULE_from_clause = 181, RULE_where_clause = 182, 
		RULE_group_by_clause = 183, RULE_grouping_elem = 184, RULE_grouping_elem_list = 185, 
		RULE_having_clause = 186, RULE_frame = 187, RULE_frame_start = 188, RULE_frame_end = 189, 
		RULE_frame_clause = 190, RULE_window_definition = 191, RULE_window_clause = 192, 
		RULE_combine_clause = 193, RULE_order_by_clause = 194, RULE_order_by_item = 195, 
		RULE_limit_clause = 196, RULE_offset_clause = 197, RULE_fetch_clause = 198, 
		RULE_for_clause = 199, RULE_expr = 200, RULE_bool_expr = 201, RULE_expr_list = 202, 
		RULE_expr_list_list = 203, RULE_func_sig_arg = 204, RULE_func_sig_arg_list = 205, 
		RULE_func_sig = 206, RULE_func_sig_list = 207, RULE_type_literal = 208, 
		RULE_type_literal_list = 209, RULE_oper = 210, RULE_aggregate = 211, RULE_name_ = 212, 
		RULE_name_list = 213, RULE_identifier_list = 214, RULE_table_name_ = 215, 
		RULE_type = 216, RULE_type_list = 217, RULE_index_method = 218, RULE_func_name = 219, 
		RULE_func_call = 220, RULE_array_cons_expr = 221, RULE_from_item = 222, 
		RULE_with_column_alias = 223, RULE_join_type = 224, RULE_join_clause = 225, 
		RULE_predicate = 226, RULE_aggregate_signature = 227, RULE_role_name = 228, 
		RULE_role_name_list = 229, RULE_non_reserved_keyword = 230, RULE_identifier = 231, 
		RULE_todo_fill_in = 232, RULE_todo_implement = 233, RULE_correlation_name = 234, 
		RULE_column_name = 235, RULE_alias = 236, RULE_column_alias = 237, RULE_column_definition = 238, 
		RULE_window_name = 239;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "stmt", "abort_stmt", "alter_stmt", "alter_aggregate_stmt", "alter_collation_stmt", 
			"alter_conversion_stmt", "alter_database_stmt", "alter_default_privileges_stmt", 
			"alter_domain_stmt", "alter_event_trigger_stmt", "alter_extension_stmt", 
			"alter_foreign_data_wrapper_stmt", "alter_foreign_table_stmt", "alter_function_stmt", 
			"alter_group_stmt", "alter_index_stmt", "alter_language_stmt", "alter_large_object_stmt", 
			"alter_materialize_view_stmt", "alter_operator_stmt", "alter_operator_class_stmt", 
			"alter_operator_family_stmt", "alter_policy_stmt", "alter_publication_stmt", 
			"alter_role_stmt", "alter_rule_stmt", "alter_schema_stmt", "alter_sequence_stmt", 
			"alter_server_stmt", "alter_statistics_stmt", "alter_subscription_stmt", 
			"alter_system_stmt", "alter_table_stmt", "alter_tablespace_stmt", "alter_text_search_config_stmt", 
			"alter_text_search_dict_stmt", "alter_text_search_parser_stmt", "alter_text_search_template_stmt", 
			"alter_trigger_stmt", "alter_type_stmt", "alter_user_stmt", "alter_user_mapping_stmt", 
			"alter_view_stmt", "analyze_stmt", "close_stmt", "cluster_stmt", "comment_stmt", 
			"commit_stmt", "commit_prepared_stmt", "copy_stmt", "create_stmt", "create_access_method_stmt", 
			"create_aggregate_stmt", "create_cast_stmt", "create_collation_opt", 
			"create_collation_opt_list", "create_collation_stmt", "create_conversion_stmt", 
			"create_database_stmt", "domain_constraint", "create_domain_stmt", "create_event_trigger_cond", 
			"create_event_trigger_stmt", "create_foreign_data_options", "create_foreign_data_stmt", 
			"create_foreign_table_stmt", "create_function_stmt", "create_group_stmt", 
			"create_index_stmt", "create_language_stmt", "create_materialized_view_stmt", 
			"create_operator_stmt", "create_operator_class_opt", "create_operator_class_stmt", 
			"create_operator_family_stmt", "create_policy_stmt", "create_role_stmt", 
			"create_rule_event", "create_rule_stmt", "create_schema_stmt", "create_sequence_stmt", 
			"create_server_stmt", "create_statistics_stmt", "create_subscription_stmt", 
			"create_table_stmt", "create_table_as_stmt", "create_tablespace_stmt", 
			"create_text_search_config_stmt", "create_text_search_dict_stmt", "create_text_search_parser_stmt", 
			"create_text_search_template_stmt", "create_transform_stmt", "create_trigger_stmt", 
			"create_type_stmt", "create_user_stmt", "create_user_mapping_stmt", "create_view_stmt", 
			"deallocate_stmt", "declare_stmt", "delete_stmt", "discard_stmt", "drop_stmt", 
			"drop_access_method_stmt", "drop_aggregate_stmt", "drop_cast_stmt", "drop_collation_stmt", 
			"drop_conversion_stmt", "drop_database_stmt", "drop_domain_stmt", "drop_event_trigger_stmt", 
			"drop_extension_stmt", "drop_foreign_data_wrapper_stmt", "drop_foreign_table_stmt", 
			"drop_function_stmt", "drop_group_stmt", "drop_index_stmt", "drop_language_stmt", 
			"drop_materialized_view_stmt", "drop_operator_stmt", "drop_operator_class_stmt", 
			"drop_operator_family_stmt", "drop_owned_stmt", "drop_policy_stmt", "drop_publication_stmt", 
			"drop_role_stmt", "drop_rule_stmt", "drop_schema_stmt", "drop_sequence_stmt", 
			"drop_server_stmt", "drop_statistics_stmt", "drop_subscription_stmt", 
			"drop_table_stmt", "drop_tablespace_stmt", "drop_text_search_config_stmt", 
			"drop_text_search_dict_stmt", "drop_text_search_parser_stmt", "drop_text_search_template_stmt", 
			"drop_transform_stmt", "drop_trigger_stmt", "drop_type_stmt", "drop_user_stmt", 
			"drop_user_mapping_stmt", "drop_view_stmt", "execute_stmt", "explain_stmt", 
			"fetch_stmt", "grant_stmt", "import_foreign_schema_stmt", "insert_stmt", 
			"listen_stmt", "load_stmt", "lock_stmt", "move_stmt", "notify_stmt", 
			"prepare_stmt", "prepare_transaction_stmt", "reassign_owned_stmt", "refresh_materialized_view_stmt", 
			"reindex_stmt", "release_savepoint_stmt", "reset_stmt", "revoke_stmt", 
			"rollback_stmt", "rollback_prepared_stmt", "rollback_to_savepoint_stmt", 
			"savepoint_stmt", "security_label_stmt", "select_stmt", "set_stmt", "set_constraints_stmt", 
			"set_role_stmt", "set_session_authorization_stmt", "set_transaction_stmt", 
			"show_stmt", "truncate_stmt", "unlisten_stmt", "update_stmt", "vacuum_stmt", 
			"values_stmt", "selector_clause", "from_clause", "where_clause", "group_by_clause", 
			"grouping_elem", "grouping_elem_list", "having_clause", "frame", "frame_start", 
			"frame_end", "frame_clause", "window_definition", "window_clause", "combine_clause", 
			"order_by_clause", "order_by_item", "limit_clause", "offset_clause", 
			"fetch_clause", "for_clause", "expr", "bool_expr", "expr_list", "expr_list_list", 
			"func_sig_arg", "func_sig_arg_list", "func_sig", "func_sig_list", "type_literal", 
			"type_literal_list", "oper", "aggregate", "name_", "name_list", "identifier_list", 
			"table_name_", "type", "type_list", "index_method", "func_name", "func_call", 
			"array_cons_expr", "from_item", "with_column_alias", "join_type", "join_clause", 
			"predicate", "aggregate_signature", "role_name", "role_name_list", "non_reserved_keyword", 
			"identifier", "todo_fill_in", "todo_implement", "correlation_name", "column_name", 
			"alias", "column_alias", "column_definition", "window_name"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "','", "':'", 
			"'::'", "'$'", "'$$'", "'*'", "'('", "')'", "'['", "']'", null, null, 
			null, null, null, "'.'", null, null, null, "'&'", "'&&'", "'&<'", "'@@'", 
			"'@>'", "'@'", "'!'", "'!!'", "'!='", "'^'", "'='", "'=>'", "'>'", "'>='", 
			"'>>'", "'#'", "'#='", "'#>'", "'#>>'", "'##'", "'->'", "'->>'", "'-|-'", 
			"'<'", "'<='", "'<@'", "'<^'", "'<>'", "'<->'", "'<<'", "'<<='", "'<?>'", 
			"'-'", "'%'", "'|'", "'||'", "'||/'", "'|/'", "'+'", "'?'", "'?&'", "'?#'", 
			"'?-'", "'?|'", "'/'", "'~'", "'~='", "'~>=~'", "'~>~'", "'~<=~'", "'~<~'", 
			"'~*'", "'~~'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT", "A_", "ABORT", "ABS", 
			"ABSOLUTE", "ACCESS", "ACTION", "ADA", "ADD", "ADMIN", "AFTER", "AGGREGATE", 
			"ALIAS", "ALL", "ALLOCATE", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", 
			"AND", "ANY", "ARE", "ARRAY", "AS", "ASC", "ASENSITIVE", "ASSERTION", 
			"ASSIGNMENT", "ASYMMETRIC", "AT", "ATOMIC", "ATTRIBUTE", "ATTRIBUTES", 
			"AUTHORIZATION", "AVG", "BACKWARD", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", 
			"BIGINT", "BINARY", "BIT", "BITVAR", "BIT_LENGTH", "BLOB", "BOOLEAN", 
			"BOTH", "BREADTH", "BY", "C_", "CACHE", "CALL", "CALLED", "CARDINALITY", 
			"CASCADE", "CASCADED", "CASE", "CAST", "CATALOG", "CATALOG_NAME", "CEIL", 
			"CEILING", "CHAIN", "CHAR", "CHARACTER", "CHARACTERISTICS", "CHARACTERS", 
			"CHARACTER_LENGTH", "CHARACTER_SET_CATALOG", "CHARACTER_SET_NAME", "CHARACTER_SET_SCHEMA", 
			"CHAR_LENGTH", "CHECK", "CHECKED", "CHECKPOINT", "CLASS", "CLASS_ORIGIN", 
			"CLOB", "CLOSE", "CLUSTER", "COALESCE", "COBOL", "COLLATE", "COLLATION", 
			"COLLATION_CATALOG", "COLLATION_NAME", "COLLATION_SCHEMA", "COLLECT", 
			"COLUMN", "COLUMN_NAME", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
			"COMMENT", "COMMIT", "COMMITTED", "COMPLETION", "CONDITION", "CONDITION_NUMBER", 
			"CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTION_NAME", "CONSTRAINT", 
			"CONSTRAINTS", "CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", 
			"CONSTRUCTOR", "CONTAINS", "CONTINUE", "CONVERSION", "CONVERT", "COPY", 
			"CORR", "CORRESPONDING", "COUNT", "COVAR_POP", "COVAR_SAMP", "CREATE", 
			"CREATEDB", "CREATEUSER", "CROSS", "CSV", "CUBE", "CUME_DIST", "CURRENT", 
			"CURRENT_DATE", "CURRENT_DEFAULT_TRANSFORM_GROUP", "CURRENT_PATH", "CURRENT_ROLE", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_TRANSFORM_GROUP_FOR_TYPE", 
			"CURRENT_USER", "CURSOR", "CURSOR_NAME", "CYCLE", "DATA", "DATABASE", 
			"DATE", "DATETIME_INTERVAL_CODE", "DATETIME_INTERVAL_PRECISION", "DAY", 
			"DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", 
			"DEFERRED", "DEFINED", "DEFINER", "DEGREE", "DELETE", "DELIMITER", "DELIMITERS", 
			"DENSE_RANK", "DEPTH", "DEREF", "DERIVED", "DESC", "DESCRIBE", "DESCRIPTOR", 
			"DESTROY", "DESTRUCTOR", "DETERMINISTIC", "DIAGNOSTICS", "DICTIONARY", 
			"DISCONNECT", "DISPATCH", "DISTINCT", "DO", "DOMAIN", "DOUBLE", "DROP", 
			"DYNAMIC", "DYNAMIC_FUNCTION", "DYNAMIC_FUNCTION_CODE", "EACH", "ELEMENT", 
			"ELSE", "ENCODING", "ENCRYPTED", "END", "END_EXEC", "EQUALS", "ESCAPE", 
			"EVERY", "EXCEPT", "EXCEPTION", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", 
			"EXEC", "EXECUTE", "EXISTING", "EXISTS", "EXP", "EXPLAIN", "EXTENSION", 
			"EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FILTER", "FINAL", "FIRST", 
			"FLOAT", "FLOOR", "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORTRAN", 
			"FORWARD", "FOUND", "FREE", "FREEZE", "FROM", "FULL", "FUNCTION", "FUSION", 
			"G_", "GENERAL", "GENERATED", "GET", "GLOBAL", "GO", "GOTO", "GRANT", 
			"GRANTED", "GROUP", "GROUPING", "HANDLER", "HAVING", "HIERARCHY", "HOLD", 
			"HOST", "HOUR", "IDENTITY", "IGNORE", "ILIKE", "IMMEDIATE", "IMMUTABLE", 
			"IMPLEMENTATION", "IMPLICIT", "IN", "INCLUDING", "INCREMENT", "INDEX", 
			"INDICATOR", "INFIX", "INHERITS", "INITIALIZE", "INITIALLY", "INNER", 
			"INOUT", "INPUT", "INSENSITIVE", "INSERT", "INSTANCE", "INSTANTIABLE", 
			"INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERSECTION", "INTERVAL", 
			"INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "ITERATE", "JOIN", "K_", 
			"KEY", "KEY_MEMBER", "KEY_TYPE", "LANCOMPILER", "LANGUAGE", "LARGE", 
			"LAST", "LATERAL", "LEADING", "LEFT", "LENGTH", "LESS", "LEVEL", "LIKE", 
			"LIMIT", "LISTEN", "LN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
			"LOCATION", "LOCATOR", "LOCK", "LOCKED", "LOWER", "M_", "MAP", "MAPPING", 
			"MATCH", "MATCHED", "MAX", "MAXVALUE", "MEMBER", "MERGE", "MESSAGE_LENGTH", 
			"MESSAGE_OCTET_LENGTH", "MESSAGE_TEXT", "METHOD", "MIN", "MINUTE", "MINVALUE", 
			"MOD", "MODE", "MODIFIES", "MODIFY", "MODULE", "MONTH", "MORE_", "MOVE", 
			"MULTISET", "MUMPS", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", 
			"NCLOB", "NESTING", "NEW", "NEXT", "NO", "NOCREATEDB", "NOCREATEUSER", 
			"NONE", "NORMALIZE", "NORMALIZED", "NOT", "NOTHING", "NOTIFY", "NOTNULL", 
			"NOWAIT", "NULL", "NULLABLE", "NULLIF", "NULLS", "NUMBER", "NUMERIC", 
			"OBJECT", "OCTETS", "OCTET_LENGTH", "OF", "OFF", "OFFSET", "OIDS", "OLD", 
			"ON", "ONLY", "OPEN", "OPERATION", "OPERATOR", "OPTION", "OPTIONS", "OR", 
			"ORDER", "ORDERING", "ORDINALITY", "OTHERS", "OUT", "OUTER", "OUTPUT", 
			"OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNER", "PAD", "PARAMETER", 
			"PARAMETERS", "PARAMETER_MODE", "PARAMETER_NAME", "PARAMETER_ORDINAL_POSITION", 
			"PARAMETER_SPECIFIC_CATALOG", "PARAMETER_SPECIFIC_NAME", "PARAMETER_SPECIFIC_SCHEMA", 
			"PARSER", "PARTIAL", "PARTITION", "PASCAL", "PASSWORD", "PATH", "PERCENTILE_CONT", 
			"PERCENTILE_DISC", "PERCENT_RANK", "PLACING", "PLI", "POSITION", "POSTFIX", 
			"POWER", "PRECEDING", "PRECISION", "PREFIX", "PREORDER", "PREPARE", "PRESERVE", 
			"PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PUBLIC", 
			"PUBLICATION", "QUOTE", "RANGE", "RANK", "READ", "READS", "REAL", "RECHECK", 
			"RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REGR_AVGX", "REGR_AVGY", 
			"REGR_COUNT", "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
			"REGR_SXY", "REGR_SYY", "REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", 
			"REPLACE", "RESET", "RESTART", "RESTRICT", "RESULT", "RETURN", "RETURNED_CARDINALITY", 
			"RETURNED_LENGTH", "RETURNED_OCTET_LENGTH", "RETURNED_SQLSTATE", "RETURNS", 
			"REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINE_CATALOG", 
			"ROUTINE_NAME", "ROUTINE_SCHEMA", "ROW", "ROWS", "ROW_COUNT", "ROW_NUMBER", 
			"RULE", "SAVEPOINT", "SCALE", "SCHEMA", "SCHEMA_NAME", "SCOPE", "SCOPE_CATALOG", 
			"SCOPE_NAME", "SCOPE_SCHEMA", "SCROLL", "SEARCH", "SECOND", "SECTION", 
			"SECURITY", "SELECT", "SELF", "SENSITIVE", "SEQUENCE", "SERIALIZABLE", 
			"SERVER_NAME", "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", 
			"SHOW", "SIMILAR", "SIMPLE", "SIZE", "SKIP_", "SMALLINT", "SOME", "SOURCE", 
			"SPACE", "SPECIFIC", "SPECIFICTYPE", "SPECIFIC_NAME", "SQL", "SQLCODE", 
			"SQLERROR", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQRT", "STABLE", 
			"START", "STATE", "STATEMENT", "STATIC", "STATISTICS", "STDDEV_POP", 
			"STDDEV_SAMP", "STDIN", "STDOUT", "STORAGE", "STRICT", "STRUCTURE", "STYLE", 
			"SUBCLASS_ORIGIN", "SUBSCRIPTION", "SUBLIST", "SUBMULTISET", "SUBSTRING", 
			"SUM", "SYMMETRIC", "SYSID", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
			"TABLESPACE", "TABLE_NAME", "TEMP", "TEMPLATE", "TEMPORARY", "TERMINATE", 
			"THAN", "THEN", "TIES", "TIME", "TIME_TZ", "TIMESTAMP", "TIMESTAMP_TZ", 
			"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", "TOAST", "TOP_LEVEL_COUNT", 
			"TRAILING", "TRANSACTION", "TRANSACTIONS_COMMITTED", "TRANSACTIONS_ROLLED_BACK", 
			"TRANSACTION_ACTIVE", "TRANSFORM", "TRANSFORMS", "TRANSLATE", "TRANSLATION", 
			"TREAT", "TRIGGER", "TRIGGER_CATALOG", "TRIGGER_NAME", "TRIGGER_SCHEMA", 
			"TRIM", "TRUE", "TRUNCATE", "TRUSTED", "TYPE", "UESCAPE", "UNBOUNDED", 
			"UNCOMMITTED", "UNDER", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", 
			"UNLISTEN", "UNNAMED", "UNNEST", "UNTIL", "UPDATE", "UPPER", "USAGE", 
			"USER", "USER_DEFINED_TYPE_CATALOG", "USER_DEFINED_TYPE_CODE", "USER_DEFINED_TYPE_NAME", 
			"USER_DEFINED_TYPE_SCHEMA", "USING", "VACUUM", "VALID", "VALIDATOR", 
			"VALUE", "VALUES", "VARCHAR", "VARIABLE", "VARIADIC", "VARYING", "VAR_POP", 
			"VAR_SAMP", "VERBOSE", "VIEW", "VOLATILE", "WHEN", "WHENEVER", "WHERE", 
			"WIDTH_BUCKET", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRITE", 
			"YEAR", "ZONE", "SUPERUSER", "NOSUPERUSER", "CREATEROLE", "NOCREATEROLE", 
			"INHERIT", "NOINHERIT", "LOGIN", "NOLOGIN", "REPLICATION", "NOREPLICATION", 
			"BYPASSRLS", "NOBYPASSRLS", "SFUNC", "STYPE", "SSPACE", "FINALFUNC", 
			"FINALFUNC_EXTRA", "COMBINEFUNC", "SERIALFUNC", "DESERIALFUNC", "INITCOND", 
			"MSFUNC", "MINVFUNC", "MSTYPE", "MSSPACE", "MFINALFUNC", "MFINALFUNC_EXTRA", 
			"MINITCOND", "SORTOP", "PARALLEL", "HYPOTHETICAL", "SAFE", "RESTRICTED", 
			"UNSAFE", "BASETYPE", "IF", "LOCALE", "LC_COLLATE", "LC_CTYPE", "PROVIDER", 
			"VERSION", "ALLOW_CONNECTIONS", "IS_TEMPLATE", "EVENT", "WRAPPER", "SERVER", 
			"BTREE", "HASH_", "GIST", "SPGIST", "GIN", "BRIN", "CONCURRENTLY", "INLINE", 
			"MATERIALIZED", "LEFTARG", "RIGHTARG", "COMMUTATOR", "NEGATOR", "HASHES", 
			"MERGES", "FAMILY", "POLICY", "OWNED", "ABSTIME", "BOOL", "BOX", "FLOAT4", 
			"FLOAT8", "INT2", "INT4", "INT8", "JSON", "JSONB", "LINE", "POINT", "RELTIME", 
			"TEXT", "COMMA", "COLON", "COLON_COLON", "DOLLAR", "DOLLAR_DOLLAR", "STAR", 
			"OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", "BIT_STRING", 
			"REGEX_STRING", "NUMERIC_LITERAL", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
			"DOT", "SINGLEQ_STRING_LITERAL", "DOUBLEQ_STRING_LITERAL", "IDENTIFIER", 
			"AMP", "AMP_AMP", "AMP_LT", "AT_AT", "AT_GT", "AT_SIGN", "BANG", "BANG_BANG", 
			"BANG_EQUAL", "CARET", "EQUAL", "EQUAL_GT", "GT", "GTE", "GT_GT", "HASH", 
			"HASH_EQ", "HASH_GT", "HASH_GT_GT", "HASH_HASH", "HYPHEN_GT", "HYPHEN_GT_GT", 
			"HYPHEN_PIPE_HYPHEN", "LT", "LTE", "LT_AT", "LT_CARET", "LT_GT", "LT_HYPHEN_GT", 
			"LT_LT", "LT_LT_EQ", "LT_QMARK_GT", "MINUS", "PERCENT", "PIPE", "PIPE_PIPE", 
			"PIPE_PIPE_SLASH", "PIPE_SLASH", "PLUS", "QMARK", "QMARK_AMP", "QMARK_HASH", 
			"QMARK_HYPHEN", "QMARK_PIPE", "SLASH", "TIL", "TIL_EQ", "TIL_GTE_TIL", 
			"TIL_GT_TIL", "TIL_LTE_TIL", "TIL_LT_TIL", "TIL_STAR", "TIL_TIL"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PostgreSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PostgreSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PostgreSQLParser.EOF, 0); }
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CREATE - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELECT - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (TRUNCATE - 578)) | (1L << (TRUSTED - 578)) | (1L << (TYPE - 578)) | (1L << (UESCAPE - 578)) | (1L << (UNBOUNDED - 578)) | (1L << (UNCOMMITTED - 578)) | (1L << (UNDER - 578)) | (1L << (UNENCRYPTED - 578)) | (1L << (UNKNOWN - 578)) | (1L << (UNLISTEN - 578)) | (1L << (UNNAMED - 578)) | (1L << (UNNEST - 578)) | (1L << (UNTIL - 578)) | (1L << (UPDATE - 578)) | (1L << (UPPER - 578)) | (1L << (USAGE - 578)) | (1L << (USER_DEFINED_TYPE_CATALOG - 578)) | (1L << (USER_DEFINED_TYPE_CODE - 578)) | (1L << (USER_DEFINED_TYPE_NAME - 578)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 578)) | (1L << (VACUUM - 578)) | (1L << (VALID - 578)) | (1L << (VALIDATOR - 578)) | (1L << (VALUE - 578)) | (1L << (VALUES - 578)) | (1L << (VARCHAR - 578)) | (1L << (VARYING - 578)) | (1L << (VAR_POP - 578)) | (1L << (VAR_SAMP - 578)) | (1L << (VIEW - 578)) | (1L << (VOLATILE - 578)) | (1L << (WHENEVER - 578)) | (1L << (WIDTH_BUCKET - 578)) | (1L << (WITHIN - 578)) | (1L << (WITHOUT - 578)) | (1L << (WORK - 578)) | (1L << (WRITE - 578)) | (1L << (YEAR - 578)) | (1L << (ZONE - 578)))) != 0) || ((((_la - 705)) & ~0x3f) == 0 && ((1L << (_la - 705)) & ((1L << (TEXT - 705)) | (1L << (OPEN_PAREN - 705)) | (1L << (IDENTIFIER - 705)))) != 0)) {
				{
				{
				setState(480);
				stmt();
				}
				}
				setState(485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(486);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public Abort_stmtContext abort_stmt() {
			return getRuleContext(Abort_stmtContext.class,0);
		}
		public Alter_stmtContext alter_stmt() {
			return getRuleContext(Alter_stmtContext.class,0);
		}
		public Analyze_stmtContext analyze_stmt() {
			return getRuleContext(Analyze_stmtContext.class,0);
		}
		public Create_stmtContext create_stmt() {
			return getRuleContext(Create_stmtContext.class,0);
		}
		public Close_stmtContext close_stmt() {
			return getRuleContext(Close_stmtContext.class,0);
		}
		public Cluster_stmtContext cluster_stmt() {
			return getRuleContext(Cluster_stmtContext.class,0);
		}
		public Comment_stmtContext comment_stmt() {
			return getRuleContext(Comment_stmtContext.class,0);
		}
		public Commit_stmtContext commit_stmt() {
			return getRuleContext(Commit_stmtContext.class,0);
		}
		public Commit_prepared_stmtContext commit_prepared_stmt() {
			return getRuleContext(Commit_prepared_stmtContext.class,0);
		}
		public Copy_stmtContext copy_stmt() {
			return getRuleContext(Copy_stmtContext.class,0);
		}
		public Deallocate_stmtContext deallocate_stmt() {
			return getRuleContext(Deallocate_stmtContext.class,0);
		}
		public Declare_stmtContext declare_stmt() {
			return getRuleContext(Declare_stmtContext.class,0);
		}
		public Delete_stmtContext delete_stmt() {
			return getRuleContext(Delete_stmtContext.class,0);
		}
		public Discard_stmtContext discard_stmt() {
			return getRuleContext(Discard_stmtContext.class,0);
		}
		public Drop_stmtContext drop_stmt() {
			return getRuleContext(Drop_stmtContext.class,0);
		}
		public Execute_stmtContext execute_stmt() {
			return getRuleContext(Execute_stmtContext.class,0);
		}
		public Explain_stmtContext explain_stmt() {
			return getRuleContext(Explain_stmtContext.class,0);
		}
		public Fetch_stmtContext fetch_stmt() {
			return getRuleContext(Fetch_stmtContext.class,0);
		}
		public Grant_stmtContext grant_stmt() {
			return getRuleContext(Grant_stmtContext.class,0);
		}
		public Import_foreign_schema_stmtContext import_foreign_schema_stmt() {
			return getRuleContext(Import_foreign_schema_stmtContext.class,0);
		}
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Listen_stmtContext listen_stmt() {
			return getRuleContext(Listen_stmtContext.class,0);
		}
		public Load_stmtContext load_stmt() {
			return getRuleContext(Load_stmtContext.class,0);
		}
		public Lock_stmtContext lock_stmt() {
			return getRuleContext(Lock_stmtContext.class,0);
		}
		public Move_stmtContext move_stmt() {
			return getRuleContext(Move_stmtContext.class,0);
		}
		public Notify_stmtContext notify_stmt() {
			return getRuleContext(Notify_stmtContext.class,0);
		}
		public Prepare_stmtContext prepare_stmt() {
			return getRuleContext(Prepare_stmtContext.class,0);
		}
		public Prepare_transaction_stmtContext prepare_transaction_stmt() {
			return getRuleContext(Prepare_transaction_stmtContext.class,0);
		}
		public Reassign_owned_stmtContext reassign_owned_stmt() {
			return getRuleContext(Reassign_owned_stmtContext.class,0);
		}
		public Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() {
			return getRuleContext(Refresh_materialized_view_stmtContext.class,0);
		}
		public Reindex_stmtContext reindex_stmt() {
			return getRuleContext(Reindex_stmtContext.class,0);
		}
		public Release_savepoint_stmtContext release_savepoint_stmt() {
			return getRuleContext(Release_savepoint_stmtContext.class,0);
		}
		public Reset_stmtContext reset_stmt() {
			return getRuleContext(Reset_stmtContext.class,0);
		}
		public Revoke_stmtContext revoke_stmt() {
			return getRuleContext(Revoke_stmtContext.class,0);
		}
		public Rollback_stmtContext rollback_stmt() {
			return getRuleContext(Rollback_stmtContext.class,0);
		}
		public Rollback_prepared_stmtContext rollback_prepared_stmt() {
			return getRuleContext(Rollback_prepared_stmtContext.class,0);
		}
		public Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() {
			return getRuleContext(Rollback_to_savepoint_stmtContext.class,0);
		}
		public Savepoint_stmtContext savepoint_stmt() {
			return getRuleContext(Savepoint_stmtContext.class,0);
		}
		public Security_label_stmtContext security_label_stmt() {
			return getRuleContext(Security_label_stmtContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public Set_stmtContext set_stmt() {
			return getRuleContext(Set_stmtContext.class,0);
		}
		public Set_constraints_stmtContext set_constraints_stmt() {
			return getRuleContext(Set_constraints_stmtContext.class,0);
		}
		public Set_role_stmtContext set_role_stmt() {
			return getRuleContext(Set_role_stmtContext.class,0);
		}
		public Set_session_authorization_stmtContext set_session_authorization_stmt() {
			return getRuleContext(Set_session_authorization_stmtContext.class,0);
		}
		public Set_transaction_stmtContext set_transaction_stmt() {
			return getRuleContext(Set_transaction_stmtContext.class,0);
		}
		public Show_stmtContext show_stmt() {
			return getRuleContext(Show_stmtContext.class,0);
		}
		public Truncate_stmtContext truncate_stmt() {
			return getRuleContext(Truncate_stmtContext.class,0);
		}
		public Unlisten_stmtContext unlisten_stmt() {
			return getRuleContext(Unlisten_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Vacuum_stmtContext vacuum_stmt() {
			return getRuleContext(Vacuum_stmtContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(488);
				abort_stmt();
				}
				break;
			case 2:
				{
				setState(489);
				alter_stmt();
				}
				break;
			case 3:
				{
				setState(490);
				analyze_stmt();
				}
				break;
			case 4:
				{
				setState(491);
				create_stmt();
				}
				break;
			case 5:
				{
				setState(492);
				close_stmt();
				}
				break;
			case 6:
				{
				setState(493);
				cluster_stmt();
				}
				break;
			case 7:
				{
				setState(494);
				comment_stmt();
				}
				break;
			case 8:
				{
				setState(495);
				commit_stmt();
				}
				break;
			case 9:
				{
				setState(496);
				commit_prepared_stmt();
				}
				break;
			case 10:
				{
				setState(497);
				copy_stmt();
				}
				break;
			case 11:
				{
				setState(498);
				deallocate_stmt();
				}
				break;
			case 12:
				{
				setState(499);
				declare_stmt();
				}
				break;
			case 13:
				{
				setState(500);
				delete_stmt();
				}
				break;
			case 14:
				{
				setState(501);
				discard_stmt();
				}
				break;
			case 15:
				{
				setState(502);
				drop_stmt();
				}
				break;
			case 16:
				{
				setState(503);
				execute_stmt();
				}
				break;
			case 17:
				{
				setState(504);
				explain_stmt();
				}
				break;
			case 18:
				{
				setState(505);
				fetch_stmt();
				}
				break;
			case 19:
				{
				setState(506);
				grant_stmt();
				}
				break;
			case 20:
				{
				setState(507);
				import_foreign_schema_stmt();
				}
				break;
			case 21:
				{
				setState(508);
				insert_stmt();
				}
				break;
			case 22:
				{
				setState(509);
				listen_stmt();
				}
				break;
			case 23:
				{
				setState(510);
				load_stmt();
				}
				break;
			case 24:
				{
				setState(511);
				lock_stmt();
				}
				break;
			case 25:
				{
				setState(512);
				move_stmt();
				}
				break;
			case 26:
				{
				setState(513);
				notify_stmt();
				}
				break;
			case 27:
				{
				setState(514);
				prepare_stmt();
				}
				break;
			case 28:
				{
				setState(515);
				prepare_transaction_stmt();
				}
				break;
			case 29:
				{
				setState(516);
				reassign_owned_stmt();
				}
				break;
			case 30:
				{
				setState(517);
				refresh_materialized_view_stmt();
				}
				break;
			case 31:
				{
				setState(518);
				reindex_stmt();
				}
				break;
			case 32:
				{
				setState(519);
				release_savepoint_stmt();
				}
				break;
			case 33:
				{
				setState(520);
				reset_stmt();
				}
				break;
			case 34:
				{
				setState(521);
				revoke_stmt();
				}
				break;
			case 35:
				{
				setState(522);
				rollback_stmt();
				}
				break;
			case 36:
				{
				setState(523);
				rollback_prepared_stmt();
				}
				break;
			case 37:
				{
				setState(524);
				rollback_to_savepoint_stmt();
				}
				break;
			case 38:
				{
				setState(525);
				savepoint_stmt();
				}
				break;
			case 39:
				{
				setState(526);
				security_label_stmt();
				}
				break;
			case 40:
				{
				setState(527);
				select_stmt();
				}
				break;
			case 41:
				{
				{
				setState(528);
				match(OPEN_PAREN);
				setState(529);
				select_stmt();
				setState(530);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 42:
				{
				setState(532);
				set_stmt();
				}
				break;
			case 43:
				{
				setState(533);
				set_constraints_stmt();
				}
				break;
			case 44:
				{
				setState(534);
				set_role_stmt();
				}
				break;
			case 45:
				{
				setState(535);
				set_session_authorization_stmt();
				}
				break;
			case 46:
				{
				setState(536);
				set_transaction_stmt();
				}
				break;
			case 47:
				{
				setState(537);
				show_stmt();
				}
				break;
			case 48:
				{
				setState(538);
				truncate_stmt();
				}
				break;
			case 49:
				{
				setState(539);
				unlisten_stmt();
				}
				break;
			case 50:
				{
				setState(540);
				update_stmt();
				}
				break;
			case 51:
				{
				setState(541);
				vacuum_stmt();
				}
				break;
			case 52:
				{
				setState(542);
				values_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Abort_stmtContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Abort_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abort_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAbort_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAbort_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAbort_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Abort_stmtContext abort_stmt() throws RecognitionException {
		Abort_stmtContext _localctx = new Abort_stmtContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_abort_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(545);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_stmtContext extends ParserRuleContext {
		public Alter_aggregate_stmtContext alter_aggregate_stmt() {
			return getRuleContext(Alter_aggregate_stmtContext.class,0);
		}
		public Alter_collation_stmtContext alter_collation_stmt() {
			return getRuleContext(Alter_collation_stmtContext.class,0);
		}
		public Alter_conversion_stmtContext alter_conversion_stmt() {
			return getRuleContext(Alter_conversion_stmtContext.class,0);
		}
		public Alter_database_stmtContext alter_database_stmt() {
			return getRuleContext(Alter_database_stmtContext.class,0);
		}
		public Alter_default_privileges_stmtContext alter_default_privileges_stmt() {
			return getRuleContext(Alter_default_privileges_stmtContext.class,0);
		}
		public Alter_domain_stmtContext alter_domain_stmt() {
			return getRuleContext(Alter_domain_stmtContext.class,0);
		}
		public Alter_event_trigger_stmtContext alter_event_trigger_stmt() {
			return getRuleContext(Alter_event_trigger_stmtContext.class,0);
		}
		public Alter_extension_stmtContext alter_extension_stmt() {
			return getRuleContext(Alter_extension_stmtContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() {
			return getRuleContext(Alter_foreign_data_wrapper_stmtContext.class,0);
		}
		public Alter_foreign_table_stmtContext alter_foreign_table_stmt() {
			return getRuleContext(Alter_foreign_table_stmtContext.class,0);
		}
		public Alter_function_stmtContext alter_function_stmt() {
			return getRuleContext(Alter_function_stmtContext.class,0);
		}
		public Alter_group_stmtContext alter_group_stmt() {
			return getRuleContext(Alter_group_stmtContext.class,0);
		}
		public Alter_index_stmtContext alter_index_stmt() {
			return getRuleContext(Alter_index_stmtContext.class,0);
		}
		public Alter_language_stmtContext alter_language_stmt() {
			return getRuleContext(Alter_language_stmtContext.class,0);
		}
		public Alter_large_object_stmtContext alter_large_object_stmt() {
			return getRuleContext(Alter_large_object_stmtContext.class,0);
		}
		public Alter_materialize_view_stmtContext alter_materialize_view_stmt() {
			return getRuleContext(Alter_materialize_view_stmtContext.class,0);
		}
		public Alter_operator_stmtContext alter_operator_stmt() {
			return getRuleContext(Alter_operator_stmtContext.class,0);
		}
		public Alter_operator_class_stmtContext alter_operator_class_stmt() {
			return getRuleContext(Alter_operator_class_stmtContext.class,0);
		}
		public Alter_operator_family_stmtContext alter_operator_family_stmt() {
			return getRuleContext(Alter_operator_family_stmtContext.class,0);
		}
		public Alter_policy_stmtContext alter_policy_stmt() {
			return getRuleContext(Alter_policy_stmtContext.class,0);
		}
		public Alter_publication_stmtContext alter_publication_stmt() {
			return getRuleContext(Alter_publication_stmtContext.class,0);
		}
		public Alter_role_stmtContext alter_role_stmt() {
			return getRuleContext(Alter_role_stmtContext.class,0);
		}
		public Alter_rule_stmtContext alter_rule_stmt() {
			return getRuleContext(Alter_rule_stmtContext.class,0);
		}
		public Alter_schema_stmtContext alter_schema_stmt() {
			return getRuleContext(Alter_schema_stmtContext.class,0);
		}
		public Alter_sequence_stmtContext alter_sequence_stmt() {
			return getRuleContext(Alter_sequence_stmtContext.class,0);
		}
		public Alter_server_stmtContext alter_server_stmt() {
			return getRuleContext(Alter_server_stmtContext.class,0);
		}
		public Alter_statistics_stmtContext alter_statistics_stmt() {
			return getRuleContext(Alter_statistics_stmtContext.class,0);
		}
		public Alter_subscription_stmtContext alter_subscription_stmt() {
			return getRuleContext(Alter_subscription_stmtContext.class,0);
		}
		public Alter_system_stmtContext alter_system_stmt() {
			return getRuleContext(Alter_system_stmtContext.class,0);
		}
		public Alter_table_stmtContext alter_table_stmt() {
			return getRuleContext(Alter_table_stmtContext.class,0);
		}
		public Alter_tablespace_stmtContext alter_tablespace_stmt() {
			return getRuleContext(Alter_tablespace_stmtContext.class,0);
		}
		public Alter_text_search_config_stmtContext alter_text_search_config_stmt() {
			return getRuleContext(Alter_text_search_config_stmtContext.class,0);
		}
		public Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() {
			return getRuleContext(Alter_text_search_dict_stmtContext.class,0);
		}
		public Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() {
			return getRuleContext(Alter_text_search_parser_stmtContext.class,0);
		}
		public Alter_text_search_template_stmtContext alter_text_search_template_stmt() {
			return getRuleContext(Alter_text_search_template_stmtContext.class,0);
		}
		public Alter_trigger_stmtContext alter_trigger_stmt() {
			return getRuleContext(Alter_trigger_stmtContext.class,0);
		}
		public Alter_type_stmtContext alter_type_stmt() {
			return getRuleContext(Alter_type_stmtContext.class,0);
		}
		public Alter_user_stmtContext alter_user_stmt() {
			return getRuleContext(Alter_user_stmtContext.class,0);
		}
		public Alter_user_mapping_stmtContext alter_user_mapping_stmt() {
			return getRuleContext(Alter_user_mapping_stmtContext.class,0);
		}
		public Alter_view_stmtContext alter_view_stmt() {
			return getRuleContext(Alter_view_stmtContext.class,0);
		}
		public Alter_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_stmtContext alter_stmt() throws RecognitionException {
		Alter_stmtContext _localctx = new Alter_stmtContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_stmt);
		try {
			setState(587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(547);
				alter_aggregate_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(548);
				alter_collation_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(549);
				alter_conversion_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(550);
				alter_database_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(551);
				alter_default_privileges_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(552);
				alter_domain_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(553);
				alter_event_trigger_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(554);
				alter_extension_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(555);
				alter_foreign_data_wrapper_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(556);
				alter_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(557);
				alter_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(558);
				alter_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(559);
				alter_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(560);
				alter_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(561);
				alter_large_object_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(562);
				alter_materialize_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(563);
				alter_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(564);
				alter_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(565);
				alter_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(566);
				alter_policy_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(567);
				alter_publication_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(568);
				alter_role_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(569);
				alter_rule_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(570);
				alter_schema_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(571);
				alter_sequence_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(572);
				alter_server_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(573);
				alter_statistics_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(574);
				alter_subscription_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(575);
				alter_system_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(576);
				alter_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(577);
				alter_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(578);
				alter_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(579);
				alter_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(580);
				alter_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(581);
				alter_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(582);
				alter_trigger_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(583);
				alter_type_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(584);
				alter_user_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(585);
				alter_user_mapping_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(586);
				alter_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_aggregate_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_aggregate_stmtContext alter_aggregate_stmt() throws RecognitionException {
		Alter_aggregate_stmtContext _localctx = new Alter_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_aggregate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collation_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collation_stmtContext alter_collation_stmt() throws RecognitionException {
		Alter_collation_stmtContext _localctx = new Alter_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_collation_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(591);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_conversion_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_conversion_stmtContext alter_conversion_stmt() throws RecognitionException {
		Alter_conversion_stmtContext _localctx = new Alter_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_conversion_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(593);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_stmtContext alter_database_stmt() throws RecognitionException {
		Alter_database_stmtContext _localctx = new Alter_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_database_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(595);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_default_privileges_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_default_privileges_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_default_privileges_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_default_privileges_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_default_privileges_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_default_privileges_stmtContext alter_default_privileges_stmt() throws RecognitionException {
		Alter_default_privileges_stmtContext _localctx = new Alter_default_privileges_stmtContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_default_privileges_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(597);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_domain_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_domain_stmtContext alter_domain_stmt() throws RecognitionException {
		Alter_domain_stmtContext _localctx = new Alter_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_domain_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(599);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_event_trigger_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_event_trigger_stmtContext alter_event_trigger_stmt() throws RecognitionException {
		Alter_event_trigger_stmtContext _localctx = new Alter_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_event_trigger_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(601);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_extension_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_extension_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_extension_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_extension_stmtContext alter_extension_stmt() throws RecognitionException {
		Alter_extension_stmtContext _localctx = new Alter_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_extension_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(603);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_data_wrapper_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_data_wrapper_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_data_wrapper_stmtContext alter_foreign_data_wrapper_stmt() throws RecognitionException {
		Alter_foreign_data_wrapper_stmtContext _localctx = new Alter_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_foreign_data_wrapper_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(605);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_foreign_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_foreign_table_stmtContext alter_foreign_table_stmt() throws RecognitionException {
		Alter_foreign_table_stmtContext _localctx = new Alter_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_foreign_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(607);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_stmtContext alter_function_stmt() throws RecognitionException {
		Alter_function_stmtContext _localctx = new Alter_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_function_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(609);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_group_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_group_stmtContext alter_group_stmt() throws RecognitionException {
		Alter_group_stmtContext _localctx = new Alter_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_group_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(611);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_index_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_index_stmtContext alter_index_stmt() throws RecognitionException {
		Alter_index_stmtContext _localctx = new Alter_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_index_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(613);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_language_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_language_stmtContext alter_language_stmt() throws RecognitionException {
		Alter_language_stmtContext _localctx = new Alter_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_language_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(615);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_large_object_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_large_object_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_large_object_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_large_object_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_large_object_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_large_object_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_large_object_stmtContext alter_large_object_stmt() throws RecognitionException {
		Alter_large_object_stmtContext _localctx = new Alter_large_object_stmtContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_large_object_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(617);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_materialize_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_materialize_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_materialize_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_materialize_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_materialize_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_materialize_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_materialize_view_stmtContext alter_materialize_view_stmt() throws RecognitionException {
		Alter_materialize_view_stmtContext _localctx = new Alter_materialize_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_materialize_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(619);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_stmtContext alter_operator_stmt() throws RecognitionException {
		Alter_operator_stmtContext _localctx = new Alter_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(621);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_class_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_class_stmtContext alter_operator_class_stmt() throws RecognitionException {
		Alter_operator_class_stmtContext _localctx = new Alter_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_operator_class_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(623);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_operator_family_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_operator_family_stmtContext alter_operator_family_stmt() throws RecognitionException {
		Alter_operator_family_stmtContext _localctx = new Alter_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(625);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_policy_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_policy_stmtContext alter_policy_stmt() throws RecognitionException {
		Alter_policy_stmtContext _localctx = new Alter_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_policy_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(627);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_publication_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_publication_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_publication_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_publication_stmtContext alter_publication_stmt() throws RecognitionException {
		Alter_publication_stmtContext _localctx = new Alter_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_publication_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(629);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_role_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_stmtContext alter_role_stmt() throws RecognitionException {
		Alter_role_stmtContext _localctx = new Alter_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_role_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(631);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_rule_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_rule_stmtContext alter_rule_stmt() throws RecognitionException {
		Alter_rule_stmtContext _localctx = new Alter_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_rule_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(633);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_stmtContext alter_schema_stmt() throws RecognitionException {
		Alter_schema_stmtContext _localctx = new Alter_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_schema_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(635);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequence_stmtContext alter_sequence_stmt() throws RecognitionException {
		Alter_sequence_stmtContext _localctx = new Alter_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_sequence_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(637);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_stmtContext alter_server_stmt() throws RecognitionException {
		Alter_server_stmtContext _localctx = new Alter_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(639);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_statistics_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_statistics_stmtContext alter_statistics_stmt() throws RecognitionException {
		Alter_statistics_stmtContext _localctx = new Alter_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_statistics_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(641);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_subscription_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_subscription_stmtContext alter_subscription_stmt() throws RecognitionException {
		Alter_subscription_stmtContext _localctx = new Alter_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_subscription_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(643);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_system_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_system_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_system_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_system_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_system_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_system_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_system_stmtContext alter_system_stmt() throws RecognitionException {
		Alter_system_stmtContext _localctx = new Alter_system_stmtContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_system_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(645);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_stmtContext alter_table_stmt() throws RecognitionException {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(647);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tablespace_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tablespace_stmtContext alter_tablespace_stmt() throws RecognitionException {
		Alter_tablespace_stmtContext _localctx = new Alter_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(649);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_text_search_config_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_config_stmtContext alter_text_search_config_stmt() throws RecognitionException {
		Alter_text_search_config_stmtContext _localctx = new Alter_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_text_search_config_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(651);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_dict_stmtContext alter_text_search_dict_stmt() throws RecognitionException {
		Alter_text_search_dict_stmtContext _localctx = new Alter_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(653);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_parser_stmtContext alter_text_search_parser_stmt() throws RecognitionException {
		Alter_text_search_parser_stmtContext _localctx = new Alter_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(655);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_text_search_template_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_text_search_template_stmtContext alter_text_search_template_stmt() throws RecognitionException {
		Alter_text_search_template_stmtContext _localctx = new Alter_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_text_search_template_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(657);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_trigger_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_trigger_stmtContext alter_trigger_stmt() throws RecognitionException {
		Alter_trigger_stmtContext _localctx = new Alter_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_trigger_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(659);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_type_stmtContext alter_type_stmt() throws RecognitionException {
		Alter_type_stmtContext _localctx = new Alter_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(661);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_stmtContext alter_user_stmt() throws RecognitionException {
		Alter_user_stmtContext _localctx = new Alter_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(663);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_mapping_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_mapping_stmtContext alter_user_mapping_stmt() throws RecognitionException {
		Alter_user_mapping_stmtContext _localctx = new Alter_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(665);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Alter_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlter_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlter_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlter_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_view_stmtContext alter_view_stmt() throws RecognitionException {
		Alter_view_stmtContext _localctx = new Alter_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(667);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analyze_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Analyze_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyze_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAnalyze_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAnalyze_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAnalyze_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Analyze_stmtContext analyze_stmt() throws RecognitionException {
		Analyze_stmtContext _localctx = new Analyze_stmtContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_analyze_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(669);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Close_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterClose_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitClose_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitClose_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_stmtContext close_stmt() throws RecognitionException {
		Close_stmtContext _localctx = new Close_stmtContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_close_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(671);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Cluster_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCluster_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCluster_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCluster_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_stmtContext cluster_stmt() throws RecognitionException {
		Cluster_stmtContext _localctx = new Cluster_stmtContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_cluster_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(673);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Comment_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterComment_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitComment_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitComment_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_stmtContext comment_stmt() throws RecognitionException {
		Comment_stmtContext _localctx = new Comment_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_comment_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(675);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommit_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommit_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommit_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_stmtContext commit_stmt() throws RecognitionException {
		Commit_stmtContext _localctx = new Commit_stmtContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_commit_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(677);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_prepared_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Commit_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCommit_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCommit_prepared_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCommit_prepared_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_prepared_stmtContext commit_prepared_stmt() throws RecognitionException {
		Commit_prepared_stmtContext _localctx = new Commit_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_commit_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(679);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Copy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCopy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCopy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCopy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_stmtContext copy_stmt() throws RecognitionException {
		Copy_stmtContext _localctx = new Copy_stmtContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_copy_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(681);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_stmtContext extends ParserRuleContext {
		public Create_access_method_stmtContext create_access_method_stmt() {
			return getRuleContext(Create_access_method_stmtContext.class,0);
		}
		public Create_aggregate_stmtContext create_aggregate_stmt() {
			return getRuleContext(Create_aggregate_stmtContext.class,0);
		}
		public Create_cast_stmtContext create_cast_stmt() {
			return getRuleContext(Create_cast_stmtContext.class,0);
		}
		public Create_collation_stmtContext create_collation_stmt() {
			return getRuleContext(Create_collation_stmtContext.class,0);
		}
		public Create_conversion_stmtContext create_conversion_stmt() {
			return getRuleContext(Create_conversion_stmtContext.class,0);
		}
		public Create_database_stmtContext create_database_stmt() {
			return getRuleContext(Create_database_stmtContext.class,0);
		}
		public Create_domain_stmtContext create_domain_stmt() {
			return getRuleContext(Create_domain_stmtContext.class,0);
		}
		public Create_event_trigger_stmtContext create_event_trigger_stmt() {
			return getRuleContext(Create_event_trigger_stmtContext.class,0);
		}
		public Create_foreign_data_stmtContext create_foreign_data_stmt() {
			return getRuleContext(Create_foreign_data_stmtContext.class,0);
		}
		public Create_foreign_table_stmtContext create_foreign_table_stmt() {
			return getRuleContext(Create_foreign_table_stmtContext.class,0);
		}
		public Create_function_stmtContext create_function_stmt() {
			return getRuleContext(Create_function_stmtContext.class,0);
		}
		public Create_group_stmtContext create_group_stmt() {
			return getRuleContext(Create_group_stmtContext.class,0);
		}
		public Create_index_stmtContext create_index_stmt() {
			return getRuleContext(Create_index_stmtContext.class,0);
		}
		public Create_language_stmtContext create_language_stmt() {
			return getRuleContext(Create_language_stmtContext.class,0);
		}
		public Create_materialized_view_stmtContext create_materialized_view_stmt() {
			return getRuleContext(Create_materialized_view_stmtContext.class,0);
		}
		public Create_operator_stmtContext create_operator_stmt() {
			return getRuleContext(Create_operator_stmtContext.class,0);
		}
		public Create_operator_class_stmtContext create_operator_class_stmt() {
			return getRuleContext(Create_operator_class_stmtContext.class,0);
		}
		public Create_operator_family_stmtContext create_operator_family_stmt() {
			return getRuleContext(Create_operator_family_stmtContext.class,0);
		}
		public Create_policy_stmtContext create_policy_stmt() {
			return getRuleContext(Create_policy_stmtContext.class,0);
		}
		public Create_role_stmtContext create_role_stmt() {
			return getRuleContext(Create_role_stmtContext.class,0);
		}
		public Create_rule_stmtContext create_rule_stmt() {
			return getRuleContext(Create_rule_stmtContext.class,0);
		}
		public Create_schema_stmtContext create_schema_stmt() {
			return getRuleContext(Create_schema_stmtContext.class,0);
		}
		public Create_sequence_stmtContext create_sequence_stmt() {
			return getRuleContext(Create_sequence_stmtContext.class,0);
		}
		public Create_server_stmtContext create_server_stmt() {
			return getRuleContext(Create_server_stmtContext.class,0);
		}
		public Create_statistics_stmtContext create_statistics_stmt() {
			return getRuleContext(Create_statistics_stmtContext.class,0);
		}
		public Create_subscription_stmtContext create_subscription_stmt() {
			return getRuleContext(Create_subscription_stmtContext.class,0);
		}
		public Create_table_stmtContext create_table_stmt() {
			return getRuleContext(Create_table_stmtContext.class,0);
		}
		public Create_table_as_stmtContext create_table_as_stmt() {
			return getRuleContext(Create_table_as_stmtContext.class,0);
		}
		public Create_tablespace_stmtContext create_tablespace_stmt() {
			return getRuleContext(Create_tablespace_stmtContext.class,0);
		}
		public Create_text_search_config_stmtContext create_text_search_config_stmt() {
			return getRuleContext(Create_text_search_config_stmtContext.class,0);
		}
		public Create_text_search_dict_stmtContext create_text_search_dict_stmt() {
			return getRuleContext(Create_text_search_dict_stmtContext.class,0);
		}
		public Create_text_search_parser_stmtContext create_text_search_parser_stmt() {
			return getRuleContext(Create_text_search_parser_stmtContext.class,0);
		}
		public Create_text_search_template_stmtContext create_text_search_template_stmt() {
			return getRuleContext(Create_text_search_template_stmtContext.class,0);
		}
		public Create_transform_stmtContext create_transform_stmt() {
			return getRuleContext(Create_transform_stmtContext.class,0);
		}
		public Create_trigger_stmtContext create_trigger_stmt() {
			return getRuleContext(Create_trigger_stmtContext.class,0);
		}
		public Create_type_stmtContext create_type_stmt() {
			return getRuleContext(Create_type_stmtContext.class,0);
		}
		public Create_user_stmtContext create_user_stmt() {
			return getRuleContext(Create_user_stmtContext.class,0);
		}
		public Create_user_mapping_stmtContext create_user_mapping_stmt() {
			return getRuleContext(Create_user_mapping_stmtContext.class,0);
		}
		public Create_view_stmtContext create_view_stmt() {
			return getRuleContext(Create_view_stmtContext.class,0);
		}
		public Create_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_stmtContext create_stmt() throws RecognitionException {
		Create_stmtContext _localctx = new Create_stmtContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_create_stmt);
		try {
			setState(722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(683);
				create_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(684);
				create_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(685);
				create_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(686);
				create_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(687);
				create_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(688);
				create_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(689);
				create_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(690);
				create_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(691);
				create_foreign_data_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(692);
				create_foreign_table_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(693);
				create_function_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(694);
				create_group_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(695);
				create_index_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(696);
				create_language_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(697);
				create_materialized_view_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(698);
				create_operator_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(699);
				create_operator_class_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(700);
				create_operator_family_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(701);
				create_policy_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(702);
				create_role_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(703);
				create_rule_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(704);
				create_schema_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(705);
				create_sequence_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(706);
				create_server_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(707);
				create_statistics_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(708);
				create_subscription_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(709);
				create_table_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(710);
				create_table_as_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(711);
				create_tablespace_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(712);
				create_text_search_config_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(713);
				create_text_search_dict_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(714);
				create_text_search_parser_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(715);
				create_text_search_template_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(716);
				create_transform_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(717);
				create_trigger_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(718);
				create_type_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(719);
				create_user_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(720);
				create_user_mapping_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(721);
				create_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_access_method_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public Create_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_access_method_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_access_method_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_access_method_stmtContext create_access_method_stmt() throws RecognitionException {
		Create_access_method_stmtContext _localctx = new Create_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_create_access_method_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(724);
			match(CREATE);
			setState(725);
			match(ACCESS);
			setState(726);
			match(METHOD);
			setState(727);
			name_();
			setState(728);
			match(TYPE);
			setState(729);
			match(INDEX);
			setState(730);
			match(HANDLER);
			setState(731);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_aggregate_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<Type_listContext> type_list() {
			return getRuleContexts(Type_listContext.class);
		}
		public Type_listContext type_list(int i) {
			return getRuleContext(Type_listContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode SFUNC() { return getToken(PostgreSQLParser.SFUNC, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode STYPE() { return getToken(PostgreSQLParser.STYPE, 0); }
		public TerminalNode SSPACE() { return getToken(PostgreSQLParser.SSPACE, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode FINALFUNC() { return getToken(PostgreSQLParser.FINALFUNC, 0); }
		public TerminalNode FINALFUNC_EXTRA() { return getToken(PostgreSQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(PostgreSQLParser.COMBINEFUNC, 0); }
		public TerminalNode SERIALFUNC() { return getToken(PostgreSQLParser.SERIALFUNC, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(PostgreSQLParser.DESERIALFUNC, 0); }
		public TerminalNode INITCOND() { return getToken(PostgreSQLParser.INITCOND, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MSFUNC() { return getToken(PostgreSQLParser.MSFUNC, 0); }
		public TerminalNode MINVFUNC() { return getToken(PostgreSQLParser.MINVFUNC, 0); }
		public TerminalNode MSTYPE() { return getToken(PostgreSQLParser.MSTYPE, 0); }
		public TerminalNode MSSPACE() { return getToken(PostgreSQLParser.MSSPACE, 0); }
		public TerminalNode MFINALFUNC() { return getToken(PostgreSQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(PostgreSQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MINITCOND() { return getToken(PostgreSQLParser.MINITCOND, 0); }
		public TerminalNode SORTOP() { return getToken(PostgreSQLParser.SORTOP, 0); }
		public TerminalNode PARALLEL() { return getToken(PostgreSQLParser.PARALLEL, 0); }
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSQLParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSQLParser.VARIADIC, i);
		}
		public TerminalNode SAFE() { return getToken(PostgreSQLParser.SAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PostgreSQLParser.RESTRICTED, 0); }
		public TerminalNode UNSAFE() { return getToken(PostgreSQLParser.UNSAFE, 0); }
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(PostgreSQLParser.HYPOTHETICAL, 0); }
		public TerminalNode BASETYPE() { return getToken(PostgreSQLParser.BASETYPE, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Create_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_aggregate_stmtContext create_aggregate_stmt() throws RecognitionException {
		Create_aggregate_stmtContext _localctx = new Create_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_aggregate_stmt);
		int _la;
		try {
			setState(1015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(733);
				match(CREATE);
				setState(734);
				match(AGGREGATE);
				setState(735);
				name_();
				setState(736);
				match(OPEN_PAREN);
				setState(738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(737);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(741);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(740);
					name_();
					}
					break;
				}
				setState(743);
				type_list();
				setState(744);
				match(CLOSE_PAREN);
				setState(745);
				match(OPEN_PAREN);
				setState(746);
				match(SFUNC);
				setState(747);
				match(EQUAL);
				setState(748);
				identifier(0);
				setState(749);
				match(COMMA);
				setState(750);
				match(STYPE);
				setState(751);
				match(EQUAL);
				setState(752);
				identifier(0);
				setState(757);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
				case 1:
					{
					setState(753);
					match(COMMA);
					setState(754);
					match(SSPACE);
					setState(755);
					match(EQUAL);
					setState(756);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(759);
					match(COMMA);
					setState(760);
					match(FINALFUNC);
					setState(761);
					match(EQUAL);
					setState(762);
					identifier(0);
					}
					break;
				}
				setState(767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(765);
					match(COMMA);
					setState(766);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
				case 1:
					{
					setState(769);
					match(COMMA);
					setState(770);
					match(COMBINEFUNC);
					setState(771);
					match(EQUAL);
					setState(772);
					identifier(0);
					}
					break;
				}
				setState(779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(775);
					match(COMMA);
					setState(776);
					match(SERIALFUNC);
					setState(777);
					match(EQUAL);
					setState(778);
					identifier(0);
					}
					break;
				}
				setState(785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(781);
					match(COMMA);
					setState(782);
					match(DESERIALFUNC);
					setState(783);
					match(EQUAL);
					setState(784);
					identifier(0);
					}
					break;
				}
				setState(791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(787);
					match(COMMA);
					setState(788);
					match(INITCOND);
					setState(789);
					match(EQUAL);
					setState(790);
					expr(0);
					}
					break;
				}
				setState(797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(793);
					match(COMMA);
					setState(794);
					match(MSFUNC);
					setState(795);
					match(EQUAL);
					setState(796);
					identifier(0);
					}
					break;
				}
				setState(803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(799);
					match(COMMA);
					setState(800);
					match(MINVFUNC);
					setState(801);
					match(EQUAL);
					setState(802);
					identifier(0);
					}
					break;
				}
				setState(809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(805);
					match(COMMA);
					setState(806);
					match(MSTYPE);
					setState(807);
					match(EQUAL);
					setState(808);
					identifier(0);
					}
					break;
				}
				setState(815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(811);
					match(COMMA);
					setState(812);
					match(MSSPACE);
					setState(813);
					match(EQUAL);
					setState(814);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(821);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(817);
					match(COMMA);
					setState(818);
					match(MFINALFUNC);
					setState(819);
					match(EQUAL);
					setState(820);
					identifier(0);
					}
					break;
				}
				setState(825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(823);
					match(COMMA);
					setState(824);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(827);
					match(COMMA);
					setState(828);
					match(MINITCOND);
					setState(829);
					match(EQUAL);
					setState(830);
					identifier(0);
					}
					break;
				}
				setState(837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					setState(833);
					match(COMMA);
					setState(834);
					match(SORTOP);
					setState(835);
					match(EQUAL);
					setState(836);
					identifier(0);
					}
					break;
				}
				setState(843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(839);
					match(COMMA);
					setState(840);
					match(PARALLEL);
					setState(841);
					match(EQUAL);
					setState(842);
					_la = _input.LA(1);
					if ( !(((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (SAFE - 659)) | (1L << (RESTRICTED - 659)) | (1L << (UNSAFE - 659)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(845);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(847);
				match(CREATE);
				setState(848);
				match(AGGREGATE);
				setState(849);
				name_();
				setState(850);
				match(OPEN_PAREN);
				setState(858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (IN - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (TRUNCATE - 578)) | (1L << (TRUSTED - 578)) | (1L << (TYPE - 578)) | (1L << (UESCAPE - 578)) | (1L << (UNBOUNDED - 578)) | (1L << (UNCOMMITTED - 578)) | (1L << (UNDER - 578)) | (1L << (UNENCRYPTED - 578)) | (1L << (UNKNOWN - 578)) | (1L << (UNLISTEN - 578)) | (1L << (UNNAMED - 578)) | (1L << (UNNEST - 578)) | (1L << (UNTIL - 578)) | (1L << (UPDATE - 578)) | (1L << (UPPER - 578)) | (1L << (USAGE - 578)) | (1L << (USER_DEFINED_TYPE_CATALOG - 578)) | (1L << (USER_DEFINED_TYPE_CODE - 578)) | (1L << (USER_DEFINED_TYPE_NAME - 578)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 578)) | (1L << (VACUUM - 578)) | (1L << (VALID - 578)) | (1L << (VALIDATOR - 578)) | (1L << (VALUE - 578)) | (1L << (VALUES - 578)) | (1L << (VARCHAR - 578)) | (1L << (VARIADIC - 578)) | (1L << (VARYING - 578)) | (1L << (VAR_POP - 578)) | (1L << (VAR_SAMP - 578)) | (1L << (VIEW - 578)) | (1L << (VOLATILE - 578)) | (1L << (WHENEVER - 578)) | (1L << (WIDTH_BUCKET - 578)) | (1L << (WITHIN - 578)) | (1L << (WITHOUT - 578)) | (1L << (WORK - 578)) | (1L << (WRITE - 578)) | (1L << (YEAR - 578)) | (1L << (ZONE - 578)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (SINGLEQ_STRING_LITERAL - 692)) | (1L << (DOUBLEQ_STRING_LITERAL - 692)) | (1L << (IDENTIFIER - 692)))) != 0)) {
					{
					setState(852);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IN || _la==VARIADIC) {
						{
						setState(851);
						_la = _input.LA(1);
						if ( !(_la==IN || _la==VARIADIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(855);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						setState(854);
						name_();
						}
						break;
					}
					setState(857);
					type_list();
					}
				}

				setState(860);
				match(ORDER);
				setState(861);
				match(BY);
				setState(863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(862);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					setState(865);
					name_();
					}
					break;
				}
				setState(868);
				type_list();
				setState(869);
				match(CLOSE_PAREN);
				setState(870);
				match(OPEN_PAREN);
				setState(871);
				match(SFUNC);
				setState(872);
				match(EQUAL);
				setState(873);
				identifier(0);
				setState(874);
				match(COMMA);
				setState(875);
				match(STYPE);
				setState(876);
				match(EQUAL);
				setState(877);
				identifier(0);
				setState(882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(878);
					match(COMMA);
					setState(879);
					match(SSPACE);
					setState(880);
					match(EQUAL);
					setState(881);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(884);
					match(COMMA);
					setState(885);
					match(FINALFUNC);
					setState(886);
					match(EQUAL);
					setState(887);
					identifier(0);
					}
					break;
				}
				setState(892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(890);
					match(COMMA);
					setState(891);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(894);
					match(COMMA);
					setState(895);
					match(INITCOND);
					setState(896);
					match(EQUAL);
					setState(897);
					expr(0);
					}
					break;
				}
				setState(904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					setState(900);
					match(COMMA);
					setState(901);
					match(PARALLEL);
					setState(902);
					match(EQUAL);
					setState(903);
					_la = _input.LA(1);
					if ( !(((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (SAFE - 659)) | (1L << (RESTRICTED - 659)) | (1L << (UNSAFE - 659)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(906);
					match(COMMA);
					setState(907);
					match(HYPOTHETICAL);
					}
				}

				setState(910);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(912);
				match(CREATE);
				setState(913);
				match(AGGREGATE);
				setState(914);
				name_();
				setState(915);
				match(OPEN_PAREN);
				setState(916);
				match(BASETYPE);
				setState(917);
				match(EQUAL);
				setState(918);
				type(0);
				setState(919);
				match(COMMA);
				setState(920);
				match(SFUNC);
				setState(921);
				match(EQUAL);
				setState(922);
				identifier(0);
				setState(923);
				match(COMMA);
				setState(924);
				match(STYPE);
				setState(925);
				match(EQUAL);
				setState(926);
				identifier(0);
				setState(931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
				case 1:
					{
					setState(927);
					match(COMMA);
					setState(928);
					match(SSPACE);
					setState(929);
					match(EQUAL);
					setState(930);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(933);
					match(COMMA);
					setState(934);
					match(FINALFUNC);
					setState(935);
					match(EQUAL);
					setState(936);
					identifier(0);
					}
					break;
				}
				setState(941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(939);
					match(COMMA);
					setState(940);
					match(FINALFUNC_EXTRA);
					}
					break;
				}
				setState(947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(943);
					match(COMMA);
					setState(944);
					match(COMBINEFUNC);
					setState(945);
					match(EQUAL);
					setState(946);
					identifier(0);
					}
					break;
				}
				setState(953);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(949);
					match(COMMA);
					setState(950);
					match(SERIALFUNC);
					setState(951);
					match(EQUAL);
					setState(952);
					identifier(0);
					}
					break;
				}
				setState(959);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(955);
					match(COMMA);
					setState(956);
					match(DESERIALFUNC);
					setState(957);
					match(EQUAL);
					setState(958);
					identifier(0);
					}
					break;
				}
				setState(965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(961);
					match(COMMA);
					setState(962);
					match(INITCOND);
					setState(963);
					match(EQUAL);
					setState(964);
					expr(0);
					}
					break;
				}
				setState(971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(967);
					match(COMMA);
					setState(968);
					match(MSFUNC);
					setState(969);
					match(EQUAL);
					setState(970);
					identifier(0);
					}
					break;
				}
				setState(977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(973);
					match(COMMA);
					setState(974);
					match(MINVFUNC);
					setState(975);
					match(EQUAL);
					setState(976);
					identifier(0);
					}
					break;
				}
				setState(983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(979);
					match(COMMA);
					setState(980);
					match(MSTYPE);
					setState(981);
					match(EQUAL);
					setState(982);
					identifier(0);
					}
					break;
				}
				setState(989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(985);
					match(COMMA);
					setState(986);
					match(MSSPACE);
					setState(987);
					match(EQUAL);
					setState(988);
					match(INTEGER_LITERAL);
					}
					break;
				}
				setState(995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(991);
					match(COMMA);
					setState(992);
					match(MFINALFUNC);
					setState(993);
					match(EQUAL);
					setState(994);
					identifier(0);
					}
					break;
				}
				setState(999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(997);
					match(COMMA);
					setState(998);
					match(MFINALFUNC_EXTRA);
					}
					break;
				}
				setState(1005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(1001);
					match(COMMA);
					setState(1002);
					match(MINITCOND);
					setState(1003);
					match(EQUAL);
					setState(1004);
					identifier(0);
					}
					break;
				}
				setState(1011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1007);
					match(COMMA);
					setState(1008);
					match(SORTOP);
					setState(1009);
					match(EQUAL);
					setState(1010);
					identifier(0);
					}
				}

				setState(1013);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cast_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSQLParser.AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLParser.IMPLICIT, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public Create_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_cast_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_cast_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_cast_stmtContext create_cast_stmt() throws RecognitionException {
		Create_cast_stmtContext _localctx = new Create_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_create_cast_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1017);
			match(CREATE);
			setState(1018);
			match(CAST);
			setState(1019);
			match(OPEN_PAREN);
			setState(1020);
			type(0);
			setState(1021);
			match(AS);
			setState(1022);
			type(0);
			setState(1023);
			match(CLOSE_PAREN);
			setState(1037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				{
				setState(1024);
				match(WITH);
				setState(1025);
				match(FUNCTION);
				setState(1026);
				identifier(0);
				setState(1031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1027);
					match(OPEN_PAREN);
					setState(1028);
					type_list();
					setState(1029);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1033);
				match(WITHOUT);
				setState(1034);
				match(FUNCTION);
				}
				}
				break;
			case 3:
				{
				{
				setState(1035);
				match(WITH);
				setState(1036);
				match(INOUT);
				}
				}
				break;
			}
			setState(1043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
			case 1:
				{
				setState(1039);
				match(AS);
				setState(1040);
				match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				setState(1041);
				match(AS);
				setState(1042);
				match(IMPLICIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_collation_optContext extends ParserRuleContext {
		public TerminalNode LOCALE() { return getToken(PostgreSQLParser.LOCALE, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LC_COLLATE() { return getToken(PostgreSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSQLParser.LC_CTYPE, 0); }
		public TerminalNode PROVIDER() { return getToken(PostgreSQLParser.PROVIDER, 0); }
		public TerminalNode VERSION() { return getToken(PostgreSQLParser.VERSION, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public Create_collation_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_optContext create_collation_opt() throws RecognitionException {
		Create_collation_optContext _localctx = new Create_collation_optContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_create_collation_opt);
		try {
			setState(1063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCALE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1045);
				match(LOCALE);
				setState(1046);
				match(EQUAL);
				setState(1047);
				expr(0);
				}
				break;
			case LC_COLLATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1048);
				match(LC_COLLATE);
				setState(1049);
				match(EQUAL);
				setState(1050);
				expr(0);
				}
				break;
			case LC_CTYPE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1051);
				match(LC_CTYPE);
				setState(1052);
				match(EQUAL);
				setState(1053);
				expr(0);
				}
				break;
			case PROVIDER:
				enterOuterAlt(_localctx, 4);
				{
				setState(1054);
				match(PROVIDER);
				setState(1055);
				match(EQUAL);
				setState(1056);
				expr(0);
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 5);
				{
				setState(1057);
				match(VERSION);
				setState(1058);
				match(EQUAL);
				setState(1059);
				expr(0);
				}
				break;
			case DOUBLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1060);
				match(DOUBLEQ_STRING_LITERAL);
				setState(1061);
				match(EQUAL);
				setState(1062);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_collation_opt_listContext extends ParserRuleContext {
		public List<Create_collation_optContext> create_collation_opt() {
			return getRuleContexts(Create_collation_optContext.class);
		}
		public Create_collation_optContext create_collation_opt(int i) {
			return getRuleContext(Create_collation_optContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Create_collation_opt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_opt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_opt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_opt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_opt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_opt_listContext create_collation_opt_list() throws RecognitionException {
		Create_collation_opt_listContext _localctx = new Create_collation_opt_listContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_collation_opt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1065);
			create_collation_opt();
			setState(1070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1066);
				match(COMMA);
				setState(1067);
				create_collation_opt();
				}
				}
				setState(1072);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_collation_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Create_collation_opt_listContext create_collation_opt_list() {
			return getRuleContext(Create_collation_opt_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Create_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_collation_stmtContext create_collation_stmt() throws RecognitionException {
		Create_collation_stmtContext _localctx = new Create_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_create_collation_stmt);
		int _la;
		try {
			setState(1096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1073);
				match(CREATE);
				setState(1074);
				match(COLLATION);
				setState(1078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1075);
					match(IF);
					setState(1076);
					match(NOT);
					setState(1077);
					match(EXISTS);
					}
				}

				setState(1080);
				name_();
				setState(1081);
				match(OPEN_PAREN);
				setState(1082);
				create_collation_opt_list();
				setState(1083);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1085);
				match(CREATE);
				setState(1086);
				match(COLLATION);
				setState(1090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1087);
					match(IF);
					setState(1088);
					match(NOT);
					setState(1089);
					match(EXISTS);
					}
				}

				setState(1092);
				name_();
				setState(1093);
				match(FROM);
				setState(1094);
				name_();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_conversion_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public Create_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_conversion_stmtContext create_conversion_stmt() throws RecognitionException {
		Create_conversion_stmtContext _localctx = new Create_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_create_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098);
			match(CREATE);
			setState(1100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1099);
				match(DEFAULT);
				}
			}

			setState(1102);
			match(CONVERSION);
			setState(1103);
			identifier(0);
			setState(1104);
			match(FOR);
			setState(1105);
			match(SINGLEQ_STRING_LITERAL);
			setState(1106);
			match(TO);
			setState(1107);
			match(SINGLEQ_STRING_LITERAL);
			setState(1108);
			match(FROM);
			setState(1109);
			name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode LC_COLLATE() { return getToken(PostgreSQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(PostgreSQLParser.LC_CTYPE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(PostgreSQLParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode IS_TEMPLATE() { return getToken(PostgreSQLParser.IS_TEMPLATE, 0); }
		public Create_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_stmtContext create_database_stmt() throws RecognitionException {
		Create_database_stmtContext _localctx = new Create_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_create_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			match(CREATE);
			setState(1112);
			match(DATABASE);
			setState(1113);
			name_();
			{
			setState(1115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1114);
				match(WITH);
				}
			}

			setState(1120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(1117);
				match(OWNER);
				setState(1118);
				match(EQUAL);
				setState(1119);
				name_();
				}
				break;
			}
			setState(1125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1122);
				match(TEMPLATE);
				setState(1123);
				match(EQUAL);
				setState(1124);
				name_();
				}
				break;
			}
			setState(1130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(1127);
				match(ENCODING);
				setState(1128);
				match(EQUAL);
				setState(1129);
				name_();
				}
				break;
			}
			setState(1135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_COLLATE) {
				{
				setState(1132);
				match(LC_COLLATE);
				setState(1133);
				match(EQUAL);
				setState(1134);
				name_();
				}
			}

			setState(1140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LC_CTYPE) {
				{
				setState(1137);
				match(LC_CTYPE);
				setState(1138);
				match(EQUAL);
				setState(1139);
				name_();
				}
			}

			setState(1145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1142);
				match(TABLESPACE);
				setState(1143);
				match(EQUAL);
				setState(1144);
				name_();
				}
				break;
			}
			setState(1150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW_CONNECTIONS) {
				{
				setState(1147);
				match(ALLOW_CONNECTIONS);
				setState(1148);
				match(EQUAL);
				setState(1149);
				name_();
				}
			}

			setState(1156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1152);
				match(CONNECTION);
				setState(1153);
				match(LIMIT);
				setState(1154);
				match(EQUAL);
				setState(1155);
				match(INTEGER_LITERAL);
				}
				break;
			}
			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS_TEMPLATE) {
				{
				setState(1158);
				match(IS_TEMPLATE);
				setState(1159);
				match(EQUAL);
				setState(1160);
				match(INTEGER_LITERAL);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_constraintContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PostgreSQLParser.CONSTRAINT, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Domain_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDomain_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDomain_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDomain_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Domain_constraintContext domain_constraint() throws RecognitionException {
		Domain_constraintContext _localctx = new Domain_constraintContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_domain_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1163);
				match(CONSTRAINT);
				setState(1164);
				name_();
				}
			}

			setState(1175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				{
				setState(1167);
				match(NOT);
				setState(1168);
				match(NULL);
				}
				break;
			case NULL:
				{
				setState(1169);
				match(NULL);
				}
				break;
			case CHECK:
				{
				setState(1170);
				match(CHECK);
				setState(1171);
				match(OPEN_PAREN);
				setState(1172);
				expr(0);
				setState(1173);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_domain_stmtContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Domain_constraintContext> domain_constraint() {
			return getRuleContexts(Domain_constraintContext.class);
		}
		public Domain_constraintContext domain_constraint(int i) {
			return getRuleContext(Domain_constraintContext.class,i);
		}
		public List<TerminalNode> COLLATE() { return getTokens(PostgreSQLParser.COLLATE); }
		public TerminalNode COLLATE(int i) {
			return getToken(PostgreSQLParser.COLLATE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PostgreSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PostgreSQLParser.DEFAULT, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Create_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_domain_stmtContext create_domain_stmt() throws RecognitionException {
		Create_domain_stmtContext _localctx = new Create_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(CREATE);
			setState(1178);
			match(DOMAIN);
			setState(1179);
			name_();
			setState(1181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1180);
				match(AS);
				}
			}

			setState(1183);
			type(0);
			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (CHECK - 77)) | (1L << (COLLATE - 77)) | (1L << (CONSTRAINT - 77)))) != 0) || _la==DEFAULT || _la==NOT || _la==NULL) {
				{
				setState(1189);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					{
					setState(1184);
					match(COLLATE);
					setState(1185);
					name_();
					}
					}
					break;
				case DEFAULT:
					{
					{
					setState(1186);
					match(DEFAULT);
					setState(1187);
					expr(0);
					}
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case NOT:
				case NULL:
					{
					setState(1188);
					domain_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_trigger_condContext extends ParserRuleContext {
		public IdentifierContext filter;
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<TerminalNode> AND() { return getTokens(PostgreSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PostgreSQLParser.AND, i);
		}
		public List<Create_event_trigger_condContext> create_event_trigger_cond() {
			return getRuleContexts(Create_event_trigger_condContext.class);
		}
		public Create_event_trigger_condContext create_event_trigger_cond(int i) {
			return getRuleContext(Create_event_trigger_condContext.class,i);
		}
		public Create_event_trigger_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_event_trigger_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_event_trigger_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_event_trigger_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_trigger_condContext create_event_trigger_cond() throws RecognitionException {
		Create_event_trigger_condContext _localctx = new Create_event_trigger_condContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_event_trigger_cond);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1194);
			((Create_event_trigger_condContext)_localctx).filter = identifier(0);
			setState(1195);
			match(IN);
			setState(1196);
			match(OPEN_PAREN);
			setState(1197);
			match(SINGLEQ_STRING_LITERAL);
			setState(1202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1198);
				match(COMMA);
				setState(1199);
				match(SINGLEQ_STRING_LITERAL);
				}
				}
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1205);
			match(CLOSE_PAREN);
			setState(1210);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1206);
					match(AND);
					setState(1207);
					create_event_trigger_cond();
					}
					} 
				}
				setState(1212);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext trigger;
		public IdentifierContext event;
		public IdentifierContext fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public Create_event_trigger_condContext create_event_trigger_cond() {
			return getRuleContext(Create_event_trigger_condContext.class,0);
		}
		public Create_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_trigger_stmtContext create_event_trigger_stmt() throws RecognitionException {
		Create_event_trigger_stmtContext _localctx = new Create_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			match(CREATE);
			setState(1214);
			match(EVENT);
			setState(1215);
			match(TRIGGER);
			setState(1216);
			((Create_event_trigger_stmtContext)_localctx).trigger = identifier(0);
			setState(1217);
			match(ON);
			setState(1218);
			((Create_event_trigger_stmtContext)_localctx).event = identifier(0);
			setState(1221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1219);
				match(WHEN);
				setState(1220);
				create_event_trigger_cond();
				}
			}

			setState(1223);
			match(EXECUTE);
			setState(1224);
			match(PROCEDURE);
			setState(1225);
			((Create_event_trigger_stmtContext)_localctx).fn_name = identifier(0);
			setState(1226);
			match(OPEN_PAREN);
			setState(1227);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_foreign_data_optionsContext extends ParserRuleContext {
		public Name_Context opt;
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_data_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_data_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_data_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_data_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_data_optionsContext create_foreign_data_options() throws RecognitionException {
		Create_foreign_data_optionsContext _localctx = new Create_foreign_data_optionsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_create_foreign_data_options);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1229);
			((Create_foreign_data_optionsContext)_localctx).opt = name_();
			setState(1230);
			match(SINGLEQ_STRING_LITERAL);
			setState(1235);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1231);
					match(COMMA);
					setState(1232);
					create_foreign_data_options();
					}
					} 
				}
				setState(1237);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,76,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_foreign_data_stmtContext extends ParserRuleContext {
		public IdentifierContext wrapper;
		public IdentifierContext handler;
		public IdentifierContext validator;
		public Create_foreign_data_optionsContext opts;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> HANDLER() { return getTokens(PostgreSQLParser.HANDLER); }
		public TerminalNode HANDLER(int i) {
			return getToken(PostgreSQLParser.HANDLER, i);
		}
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Create_foreign_data_optionsContext create_foreign_data_options() {
			return getRuleContext(Create_foreign_data_optionsContext.class,0);
		}
		public Create_foreign_data_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_data_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_data_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_data_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_data_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_data_stmtContext create_foreign_data_stmt() throws RecognitionException {
		Create_foreign_data_stmtContext _localctx = new Create_foreign_data_stmtContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_foreign_data_stmt);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			match(CREATE);
			setState(1239);
			match(FOREIGN);
			setState(1240);
			match(DATA);
			setState(1241);
			match(WRAPPER);
			setState(1242);
			((Create_foreign_data_stmtContext)_localctx).wrapper = identifier(0);
			setState(1249);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(1247);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case HANDLER:
						{
						setState(1243);
						match(HANDLER);
						setState(1244);
						((Create_foreign_data_stmtContext)_localctx).handler = identifier(0);
						}
						break;
					case NO:
						{
						setState(1245);
						match(NO);
						setState(1246);
						match(HANDLER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(1251);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,78,_ctx);
			}
			setState(1256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1252);
				match(VALIDATOR);
				setState(1253);
				((Create_foreign_data_stmtContext)_localctx).validator = identifier(0);
				}
				break;
			case 2:
				{
				setState(1254);
				match(NO);
				setState(1255);
				match(VALIDATOR);
				}
				break;
			}
			setState(1263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1258);
				match(OPTIONS);
				setState(1259);
				match(OPEN_PAREN);
				setState(1260);
				((Create_foreign_data_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(1261);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_foreign_table_stmtContext extends ParserRuleContext {
		public IdentifierContext table_name_TODO;
		public IdentifierContext column_name_TODO;
		public IdentifierContext data_type;
		public Create_foreign_data_optionsContext opts;
		public Name_Context server_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public List<TerminalNode> OPTIONS() { return getTokens(PostgreSQLParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(PostgreSQLParser.OPTIONS, i);
		}
		public TerminalNode COLLATE() { return getToken(PostgreSQLParser.COLLATE, 0); }
		public Create_collation_optContext create_collation_opt() {
			return getRuleContext(Create_collation_optContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public List<Create_foreign_data_optionsContext> create_foreign_data_options() {
			return getRuleContexts(Create_foreign_data_optionsContext.class);
		}
		public Create_foreign_data_optionsContext create_foreign_data_options(int i) {
			return getRuleContext(Create_foreign_data_optionsContext.class,i);
		}
		public Create_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_foreign_table_stmtContext create_foreign_table_stmt() throws RecognitionException {
		Create_foreign_table_stmtContext _localctx = new Create_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			match(CREATE);
			setState(1266);
			match(FOREIGN);
			setState(1267);
			match(TABLE);
			setState(1271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1268);
				match(IF);
				setState(1269);
				match(NOT);
				setState(1270);
				match(EXISTS);
				}
			}

			setState(1273);
			((Create_foreign_table_stmtContext)_localctx).table_name_TODO = identifier(0);
			setState(1274);
			match(OPEN_PAREN);
			setState(1275);
			((Create_foreign_table_stmtContext)_localctx).column_name_TODO = identifier(0);
			setState(1276);
			((Create_foreign_table_stmtContext)_localctx).data_type = identifier(0);
			setState(1282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(1277);
				match(OPTIONS);
				setState(1278);
				match(OPEN_PAREN);
				setState(1279);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(1280);
				match(CLOSE_PAREN);
				}
			}

			setState(1286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1284);
				match(COLLATE);
				setState(1285);
				create_collation_opt();
				}
			}

			setState(1288);
			match(CLOSE_PAREN);
			setState(1291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(1289);
				match(INHERITS);
				setState(1290);
				name_list();
				}
			}

			setState(1293);
			match(SERVER);
			setState(1294);
			((Create_foreign_table_stmtContext)_localctx).server_name = name_();
			setState(1300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1295);
				match(OPTIONS);
				setState(1296);
				match(OPEN_PAREN);
				setState(1297);
				((Create_foreign_table_stmtContext)_localctx).opts = create_foreign_data_options();
				setState(1298);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_stmtContext extends ParserRuleContext {
		public Name_Context fn_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public Create_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_stmtContext create_function_stmt() throws RecognitionException {
		Create_function_stmtContext _localctx = new Create_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			match(CREATE);
			setState(1305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1303);
				match(OR);
				setState(1304);
				match(REPLACE);
				}
			}

			setState(1307);
			match(FUNCTION);
			setState(1308);
			((Create_function_stmtContext)_localctx).fn_name = name_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_group_stmtContext extends ParserRuleContext {
		public IdentifierContext group;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public List<TerminalNode> GROUP() { return getTokens(PostgreSQLParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSQLParser.GROUP, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSQLParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSQLParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSQLParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSQLParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSQLParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSQLParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSQLParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSQLParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSQLParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSQLParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSQLParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSQLParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> CREATEUSER() { return getTokens(PostgreSQLParser.CREATEUSER); }
		public TerminalNode CREATEUSER(int i) {
			return getToken(PostgreSQLParser.CREATEUSER, i);
		}
		public List<TerminalNode> NOCREATEUSER() { return getTokens(PostgreSQLParser.NOCREATEUSER); }
		public TerminalNode NOCREATEUSER(int i) {
			return getToken(PostgreSQLParser.NOCREATEUSER, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSQLParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSQLParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSQLParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSQLParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSQLParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSQLParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSQLParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSQLParser.NOLOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSQLParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSQLParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSQLParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSQLParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> ROLE() { return getTokens(PostgreSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSQLParser.ROLE, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSQLParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSQLParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSQLParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSQLParser.SYSID, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSQLParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSQLParser.ENCRYPTED, i);
		}
		public List<TerminalNode> UNENCRYPTED() { return getTokens(PostgreSQLParser.UNENCRYPTED); }
		public TerminalNode UNENCRYPTED(int i) {
			return getToken(PostgreSQLParser.UNENCRYPTED, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_group_stmtContext create_group_stmt() throws RecognitionException {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_group_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1310);
			match(CREATE);
			setState(1311);
			match(GROUP);
			setState(1312);
			((Create_group_stmtContext)_localctx).group = identifier(0);
			setState(1354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1313);
					match(WITH);
					}
				}

				setState(1350); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(1350);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
						case 1:
							{
							setState(1316);
							match(SUPERUSER);
							}
							break;
						case 2:
							{
							setState(1317);
							match(NOSUPERUSER);
							}
							break;
						case 3:
							{
							setState(1318);
							match(CREATEDB);
							}
							break;
						case 4:
							{
							setState(1319);
							match(NOCREATEDB);
							}
							break;
						case 5:
							{
							setState(1320);
							match(CREATEROLE);
							}
							break;
						case 6:
							{
							setState(1321);
							match(NOCREATEROLE);
							}
							break;
						case 7:
							{
							setState(1322);
							match(CREATEUSER);
							}
							break;
						case 8:
							{
							setState(1323);
							match(NOCREATEUSER);
							}
							break;
						case 9:
							{
							setState(1324);
							match(INHERIT);
							}
							break;
						case 10:
							{
							setState(1325);
							match(NOINHERIT);
							}
							break;
						case 11:
							{
							setState(1326);
							match(LOGIN);
							}
							break;
						case 12:
							{
							setState(1327);
							match(NOLOGIN);
							}
							break;
						case 13:
							{
							setState(1329);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==ENCRYPTED || _la==UNENCRYPTED) {
								{
								setState(1328);
								_la = _input.LA(1);
								if ( !(_la==ENCRYPTED || _la==UNENCRYPTED) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							setState(1331);
							match(PASSWORD);
							setState(1332);
							_la = _input.LA(1);
							if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 14:
							{
							setState(1333);
							match(VALID);
							setState(1334);
							match(UNTIL);
							setState(1335);
							match(SINGLEQ_STRING_LITERAL);
							}
							break;
						case 15:
							{
							setState(1336);
							match(IN);
							setState(1337);
							match(ROLE);
							setState(1338);
							name_list();
							}
							break;
						case 16:
							{
							setState(1339);
							match(IN);
							setState(1340);
							match(GROUP);
							setState(1341);
							name_list();
							}
							break;
						case 17:
							{
							setState(1342);
							match(ROLE);
							setState(1343);
							name_list();
							}
							break;
						case 18:
							{
							setState(1344);
							match(ADMIN);
							setState(1345);
							name_list();
							}
							break;
						case 19:
							{
							setState(1346);
							match(USER);
							setState(1347);
							name_list();
							}
							break;
						case 20:
							{
							setState(1348);
							match(SYSID);
							setState(1349);
							match(INTEGER_LITERAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1352); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,90,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_index_stmtContext extends ParserRuleContext {
		public IdentifierContext index_name;
		public IdentifierContext tableName;
		public IdentifierContext tablespace_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(PostgreSQLParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_index_stmtContext create_index_stmt() throws RecognitionException {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1356);
			match(CREATE);
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1357);
				match(UNIQUE);
				}
			}

			setState(1360);
			match(INDEX);
			setState(1362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(1361);
				match(CONCURRENTLY);
				}
			}

			setState(1370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (TRUNCATE - 578)) | (1L << (TRUSTED - 578)) | (1L << (TYPE - 578)) | (1L << (UESCAPE - 578)) | (1L << (UNBOUNDED - 578)) | (1L << (UNCOMMITTED - 578)) | (1L << (UNDER - 578)) | (1L << (UNENCRYPTED - 578)) | (1L << (UNKNOWN - 578)) | (1L << (UNLISTEN - 578)) | (1L << (UNNAMED - 578)) | (1L << (UNNEST - 578)) | (1L << (UNTIL - 578)) | (1L << (UPDATE - 578)) | (1L << (UPPER - 578)) | (1L << (USAGE - 578)) | (1L << (USER_DEFINED_TYPE_CATALOG - 578)) | (1L << (USER_DEFINED_TYPE_CODE - 578)) | (1L << (USER_DEFINED_TYPE_NAME - 578)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 578)) | (1L << (VACUUM - 578)) | (1L << (VALID - 578)) | (1L << (VALIDATOR - 578)) | (1L << (VALUE - 578)) | (1L << (VALUES - 578)) | (1L << (VARCHAR - 578)) | (1L << (VARYING - 578)) | (1L << (VAR_POP - 578)) | (1L << (VAR_SAMP - 578)) | (1L << (VIEW - 578)) | (1L << (VOLATILE - 578)) | (1L << (WHENEVER - 578)) | (1L << (WIDTH_BUCKET - 578)) | (1L << (WITHIN - 578)) | (1L << (WITHOUT - 578)) | (1L << (WORK - 578)) | (1L << (WRITE - 578)) | (1L << (YEAR - 578)) | (1L << (ZONE - 578)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (IF - 663)) | (1L << (TEXT - 663)) | (1L << (IDENTIFIER - 663)))) != 0)) {
				{
				setState(1367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1364);
					match(IF);
					setState(1365);
					match(NOT);
					setState(1366);
					match(EXISTS);
					}
				}

				setState(1369);
				((Create_index_stmtContext)_localctx).index_name = identifier(0);
				}
			}

			setState(1372);
			match(ON);
			setState(1373);
			((Create_index_stmtContext)_localctx).tableName = identifier(0);
			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1374);
				match(USING);
				setState(1375);
				index_method();
				}
			}

			setState(1380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1378);
				match(TABLESPACE);
				setState(1379);
				((Create_index_stmtContext)_localctx).tablespace_name = identifier(0);
				}
				break;
			}
			setState(1384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1382);
				match(WHERE);
				setState(1383);
				predicate(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_language_stmtContext extends ParserRuleContext {
		public IdentifierContext language_name;
		public IdentifierContext call_handler;
		public IdentifierContext inline_handler;
		public IdentifierContext valfunction;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode INLINE() { return getToken(PostgreSQLParser.INLINE, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public Create_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_language_stmtContext create_language_stmt() throws RecognitionException {
		Create_language_stmtContext _localctx = new Create_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_language_stmt);
		int _la;
		try {
			setState(1419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1386);
				match(CREATE);
				setState(1389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1387);
					match(OR);
					setState(1388);
					match(REPLACE);
					}
				}

				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1391);
					match(PROCEDURAL);
					}
				}

				setState(1394);
				match(LANGUAGE);
				setState(1395);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1396);
				match(CREATE);
				setState(1399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1397);
					match(OR);
					setState(1398);
					match(REPLACE);
					}
				}

				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRUSTED) {
					{
					setState(1401);
					match(TRUSTED);
					}
				}

				setState(1405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1404);
					match(PROCEDURAL);
					}
				}

				setState(1407);
				match(LANGUAGE);
				setState(1408);
				((Create_language_stmtContext)_localctx).language_name = identifier(0);
				setState(1409);
				match(HANDLER);
				setState(1410);
				((Create_language_stmtContext)_localctx).call_handler = identifier(0);
				setState(1413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(1411);
					match(INLINE);
					setState(1412);
					((Create_language_stmtContext)_localctx).inline_handler = identifier(0);
					}
				}

				setState(1417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1415);
					match(VALIDATOR);
					setState(1416);
					((Create_language_stmtContext)_localctx).valfunction = identifier(0);
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_materialized_view_stmtContext extends ParserRuleContext {
		public IdentifierContext tableName;
		public Identifier_listContext columns;
		public IdentifierContext tablespace_name;
		public Select_stmtContext query;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> WITH() { return getTokens(PostgreSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PostgreSQLParser.WITH, i);
		}
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public Create_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_materialized_view_stmtContext create_materialized_view_stmt() throws RecognitionException {
		Create_materialized_view_stmtContext _localctx = new Create_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1421);
			match(CREATE);
			setState(1422);
			match(MATERIALIZED);
			setState(1423);
			match(VIEW);
			setState(1427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1424);
				match(IF);
				setState(1425);
				match(NOT);
				setState(1426);
				match(EXISTS);
				}
			}

			setState(1429);
			((Create_materialized_view_stmtContext)_localctx).tableName = identifier(0);
			setState(1434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1430);
				match(OPEN_PAREN);
				setState(1431);
				((Create_materialized_view_stmtContext)_localctx).columns = identifier_list();
				setState(1432);
				match(CLOSE_PAREN);
				}
			}

			setState(1437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1436);
				match(WITH);
				}
			}

			setState(1441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1439);
				match(TABLESPACE);
				setState(1440);
				((Create_materialized_view_stmtContext)_localctx).tablespace_name = identifier(0);
				}
			}

			setState(1443);
			match(AS);
			setState(1444);
			((Create_materialized_view_stmtContext)_localctx).query = select_stmt();
			setState(1450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1445);
				match(WITH);
				setState(1447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1446);
					match(NO);
					}
				}

				setState(1449);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_stmtContext extends ParserRuleContext {
		public IdentifierContext opName;
		public IdentifierContext function_name;
		public Name_Context left_type;
		public Name_Context right_type;
		public Name_Context com_op;
		public Name_Context neg_op;
		public Name_Context res_proc;
		public Name_Context join_proc;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(PostgreSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(PostgreSQLParser.EQUAL, i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode LEFTARG() { return getToken(PostgreSQLParser.LEFTARG, 0); }
		public TerminalNode RIGHTARG() { return getToken(PostgreSQLParser.RIGHTARG, 0); }
		public TerminalNode COMMUTATOR() { return getToken(PostgreSQLParser.COMMUTATOR, 0); }
		public TerminalNode NEGATOR() { return getToken(PostgreSQLParser.NEGATOR, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode HASHES() { return getToken(PostgreSQLParser.HASHES, 0); }
		public TerminalNode MERGES() { return getToken(PostgreSQLParser.MERGES, 0); }
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public Create_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_stmtContext create_operator_stmt() throws RecognitionException {
		Create_operator_stmtContext _localctx = new Create_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_operator_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			match(CREATE);
			setState(1453);
			match(OPERATOR);
			setState(1454);
			((Create_operator_stmtContext)_localctx).opName = identifier(0);
			setState(1455);
			match(OPEN_PAREN);
			setState(1456);
			match(PROCEDURE);
			setState(1457);
			match(EQUAL);
			setState(1458);
			((Create_operator_stmtContext)_localctx).function_name = identifier(0);
			setState(1463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				setState(1459);
				match(COMMA);
				setState(1460);
				match(LEFTARG);
				setState(1461);
				match(EQUAL);
				setState(1462);
				((Create_operator_stmtContext)_localctx).left_type = name_();
				}
				break;
			}
			setState(1469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1465);
				match(COMMA);
				setState(1466);
				match(RIGHTARG);
				setState(1467);
				match(EQUAL);
				setState(1468);
				((Create_operator_stmtContext)_localctx).right_type = name_();
				}
				break;
			}
			setState(1475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1471);
				match(COMMA);
				setState(1472);
				match(COMMUTATOR);
				setState(1473);
				match(EQUAL);
				setState(1474);
				((Create_operator_stmtContext)_localctx).com_op = name_();
				}
				break;
			}
			setState(1481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1477);
				match(COMMA);
				setState(1478);
				match(NEGATOR);
				setState(1479);
				match(EQUAL);
				setState(1480);
				((Create_operator_stmtContext)_localctx).neg_op = name_();
				}
				break;
			}
			setState(1487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1483);
				match(COMMA);
				setState(1484);
				match(RESTRICT);
				setState(1485);
				match(EQUAL);
				setState(1486);
				((Create_operator_stmtContext)_localctx).res_proc = name_();
				}
				break;
			}
			setState(1493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1489);
				match(COMMA);
				setState(1490);
				match(JOIN);
				setState(1491);
				match(EQUAL);
				setState(1492);
				((Create_operator_stmtContext)_localctx).join_proc = name_();
				}
				break;
			}
			setState(1497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1495);
				match(COMMA);
				setState(1496);
				match(HASHES);
				}
				break;
			}
			setState(1501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1499);
				match(COMMA);
				setState(1500);
				match(MERGES);
				}
			}

			setState(1503);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_class_optContext extends ParserRuleContext {
		public Token strategy_number;
		public IdentifierContext opName;
		public Token support_number;
		public IdentifierContext func_name_;
		public IdentifierContext storage_type;
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public TerminalNode COMMA() { return getToken(PostgreSQLParser.COMMA, 0); }
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Type_listContext type_list() {
			return getRuleContext(Type_listContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public Create_operator_class_optContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_opt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_class_opt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_class_opt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_class_opt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_class_optContext create_operator_class_opt() throws RecognitionException {
		Create_operator_class_optContext _localctx = new Create_operator_class_optContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_create_operator_class_opt);
		int _la;
		try {
			setState(1535);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1505);
				match(OPERATOR);
				setState(1506);
				((Create_operator_class_optContext)_localctx).strategy_number = match(INTEGER_LITERAL);
				setState(1507);
				((Create_operator_class_optContext)_localctx).opName = identifier(0);
				setState(1514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					setState(1508);
					match(OPEN_PAREN);
					setState(1509);
					identifier(0);
					setState(1510);
					match(COMMA);
					setState(1511);
					identifier(0);
					setState(1512);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1516);
				match(FUNCTION);
				setState(1517);
				((Create_operator_class_optContext)_localctx).support_number = match(INTEGER_LITERAL);
				setState(1526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(1518);
					match(OPEN_PAREN);
					setState(1519);
					identifier(0);
					setState(1522);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1520);
						match(COMMA);
						setState(1521);
						identifier(0);
						}
					}

					setState(1524);
					match(CLOSE_PAREN);
					}
				}

				setState(1528);
				((Create_operator_class_optContext)_localctx).func_name_ = identifier(0);
				setState(1529);
				match(OPEN_PAREN);
				setState(1530);
				type_list();
				setState(1531);
				match(CLOSE_PAREN);
				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1533);
				match(STORAGE);
				setState(1534);
				((Create_operator_class_optContext)_localctx).storage_type = identifier(0);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext data_type;
		public IdentifierContext family_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Create_operator_class_optContext> create_operator_class_opt() {
			return getRuleContexts(Create_operator_class_optContext.class);
		}
		public Create_operator_class_optContext create_operator_class_opt(int i) {
			return getRuleContext(Create_operator_class_optContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PostgreSQLParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Create_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_class_stmtContext create_operator_class_stmt() throws RecognitionException {
		Create_operator_class_stmtContext _localctx = new Create_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1537);
			match(CREATE);
			setState(1538);
			match(OPERATOR);
			setState(1539);
			match(CLASS);
			setState(1540);
			((Create_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(1542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(1541);
				match(DEFAULT);
				}
			}

			setState(1544);
			match(FOR);
			setState(1545);
			match(TYPE);
			setState(1546);
			((Create_operator_class_stmtContext)_localctx).data_type = identifier(0);
			setState(1547);
			match(USING);
			setState(1548);
			index_method();
			setState(1551);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(1549);
				match(FAMILY);
				setState(1550);
				((Create_operator_class_stmtContext)_localctx).family_name = identifier(0);
				}
			}

			setState(1553);
			match(AS);
			setState(1554);
			create_operator_class_opt();
			setState(1559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1555);
				match(COMMA);
				setState(1556);
				create_operator_class_opt();
				}
				}
				setState(1561);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_operator_family_stmtContext create_operator_family_stmt() throws RecognitionException {
		Create_operator_family_stmtContext _localctx = new Create_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_create_operator_family_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1562);
			match(CREATE);
			setState(1563);
			match(OPERATOR);
			setState(1564);
			match(FAMILY);
			setState(1565);
			((Create_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(1566);
			match(USING);
			setState(1567);
			index_method();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext tableName;
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(PostgreSQLParser.CHECK, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Create_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_policy_stmtContext create_policy_stmt() throws RecognitionException {
		Create_policy_stmtContext _localctx = new Create_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1569);
			match(CREATE);
			setState(1570);
			match(POLICY);
			setState(1571);
			((Create_policy_stmtContext)_localctx).name = identifier(0);
			setState(1572);
			match(ON);
			setState(1573);
			((Create_policy_stmtContext)_localctx).tableName = identifier(0);
			setState(1576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1574);
				match(FOR);
				setState(1575);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(1578);
				match(TO);
				setState(1579);
				((Create_policy_stmtContext)_localctx).role = role_name();
				}
			}

			setState(1587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1582);
				match(USING);
				setState(1583);
				match(OPEN_PAREN);
				setState(1584);
				predicate(0);
				setState(1585);
				match(CLOSE_PAREN);
				}
			}

			setState(1595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1589);
				match(WITH);
				setState(1590);
				match(CHECK);
				setState(1591);
				match(OPEN_PAREN);
				setState(1592);
				predicate(0);
				setState(1593);
				match(CLOSE_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_role_stmtContext extends ParserRuleContext {
		public Role_nameContext role;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public List<TerminalNode> ROLE() { return getTokens(PostgreSQLParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(PostgreSQLParser.ROLE, i);
		}
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public List<TerminalNode> SUPERUSER() { return getTokens(PostgreSQLParser.SUPERUSER); }
		public TerminalNode SUPERUSER(int i) {
			return getToken(PostgreSQLParser.SUPERUSER, i);
		}
		public List<TerminalNode> NOSUPERUSER() { return getTokens(PostgreSQLParser.NOSUPERUSER); }
		public TerminalNode NOSUPERUSER(int i) {
			return getToken(PostgreSQLParser.NOSUPERUSER, i);
		}
		public List<TerminalNode> CREATEDB() { return getTokens(PostgreSQLParser.CREATEDB); }
		public TerminalNode CREATEDB(int i) {
			return getToken(PostgreSQLParser.CREATEDB, i);
		}
		public List<TerminalNode> NOCREATEDB() { return getTokens(PostgreSQLParser.NOCREATEDB); }
		public TerminalNode NOCREATEDB(int i) {
			return getToken(PostgreSQLParser.NOCREATEDB, i);
		}
		public List<TerminalNode> CREATEROLE() { return getTokens(PostgreSQLParser.CREATEROLE); }
		public TerminalNode CREATEROLE(int i) {
			return getToken(PostgreSQLParser.CREATEROLE, i);
		}
		public List<TerminalNode> NOCREATEROLE() { return getTokens(PostgreSQLParser.NOCREATEROLE); }
		public TerminalNode NOCREATEROLE(int i) {
			return getToken(PostgreSQLParser.NOCREATEROLE, i);
		}
		public List<TerminalNode> INHERIT() { return getTokens(PostgreSQLParser.INHERIT); }
		public TerminalNode INHERIT(int i) {
			return getToken(PostgreSQLParser.INHERIT, i);
		}
		public List<TerminalNode> NOINHERIT() { return getTokens(PostgreSQLParser.NOINHERIT); }
		public TerminalNode NOINHERIT(int i) {
			return getToken(PostgreSQLParser.NOINHERIT, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(PostgreSQLParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(PostgreSQLParser.LOGIN, i);
		}
		public List<TerminalNode> NOLOGIN() { return getTokens(PostgreSQLParser.NOLOGIN); }
		public TerminalNode NOLOGIN(int i) {
			return getToken(PostgreSQLParser.NOLOGIN, i);
		}
		public List<TerminalNode> REPLICATION() { return getTokens(PostgreSQLParser.REPLICATION); }
		public TerminalNode REPLICATION(int i) {
			return getToken(PostgreSQLParser.REPLICATION, i);
		}
		public List<TerminalNode> NOREPLICATION() { return getTokens(PostgreSQLParser.NOREPLICATION); }
		public TerminalNode NOREPLICATION(int i) {
			return getToken(PostgreSQLParser.NOREPLICATION, i);
		}
		public List<TerminalNode> BYPASSRLS() { return getTokens(PostgreSQLParser.BYPASSRLS); }
		public TerminalNode BYPASSRLS(int i) {
			return getToken(PostgreSQLParser.BYPASSRLS, i);
		}
		public List<TerminalNode> NOBYPASSRLS() { return getTokens(PostgreSQLParser.NOBYPASSRLS); }
		public TerminalNode NOBYPASSRLS(int i) {
			return getToken(PostgreSQLParser.NOBYPASSRLS, i);
		}
		public List<TerminalNode> CONNECTION() { return getTokens(PostgreSQLParser.CONNECTION); }
		public TerminalNode CONNECTION(int i) {
			return getToken(PostgreSQLParser.CONNECTION, i);
		}
		public List<TerminalNode> LIMIT() { return getTokens(PostgreSQLParser.LIMIT); }
		public TerminalNode LIMIT(int i) {
			return getToken(PostgreSQLParser.LIMIT, i);
		}
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(PostgreSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(PostgreSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> VALID() { return getTokens(PostgreSQLParser.VALID); }
		public TerminalNode VALID(int i) {
			return getToken(PostgreSQLParser.VALID, i);
		}
		public List<TerminalNode> UNTIL() { return getTokens(PostgreSQLParser.UNTIL); }
		public TerminalNode UNTIL(int i) {
			return getToken(PostgreSQLParser.UNTIL, i);
		}
		public List<TerminalNode> SINGLEQ_STRING_LITERAL() { return getTokens(PostgreSQLParser.SINGLEQ_STRING_LITERAL); }
		public TerminalNode SINGLEQ_STRING_LITERAL(int i) {
			return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<Name_listContext> name_list() {
			return getRuleContexts(Name_listContext.class);
		}
		public Name_listContext name_list(int i) {
			return getRuleContext(Name_listContext.class,i);
		}
		public List<TerminalNode> GROUP() { return getTokens(PostgreSQLParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(PostgreSQLParser.GROUP, i);
		}
		public List<TerminalNode> ADMIN() { return getTokens(PostgreSQLParser.ADMIN); }
		public TerminalNode ADMIN(int i) {
			return getToken(PostgreSQLParser.ADMIN, i);
		}
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public List<TerminalNode> SYSID() { return getTokens(PostgreSQLParser.SYSID); }
		public TerminalNode SYSID(int i) {
			return getToken(PostgreSQLParser.SYSID, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PostgreSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PostgreSQLParser.NULL, i);
		}
		public List<TerminalNode> ENCRYPTED() { return getTokens(PostgreSQLParser.ENCRYPTED); }
		public TerminalNode ENCRYPTED(int i) {
			return getToken(PostgreSQLParser.ENCRYPTED, i);
		}
		public Create_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_role_stmtContext create_role_stmt() throws RecognitionException {
		Create_role_stmtContext _localctx = new Create_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_role_stmt);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1597);
			match(CREATE);
			setState(1598);
			match(ROLE);
			setState(1599);
			((Create_role_stmtContext)_localctx).role = role_name();
			setState(1646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				setState(1601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1600);
					match(WITH);
					}
				}

				setState(1642); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(1642);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
						case 1:
							{
							setState(1603);
							match(SUPERUSER);
							}
							break;
						case 2:
							{
							setState(1604);
							match(NOSUPERUSER);
							}
							break;
						case 3:
							{
							setState(1605);
							match(CREATEDB);
							}
							break;
						case 4:
							{
							setState(1606);
							match(NOCREATEDB);
							}
							break;
						case 5:
							{
							setState(1607);
							match(CREATEROLE);
							}
							break;
						case 6:
							{
							setState(1608);
							match(NOCREATEROLE);
							}
							break;
						case 7:
							{
							setState(1609);
							match(INHERIT);
							}
							break;
						case 8:
							{
							setState(1610);
							match(NOINHERIT);
							}
							break;
						case 9:
							{
							setState(1611);
							match(LOGIN);
							}
							break;
						case 10:
							{
							setState(1612);
							match(NOLOGIN);
							}
							break;
						case 11:
							{
							setState(1613);
							match(REPLICATION);
							}
							break;
						case 12:
							{
							setState(1614);
							match(NOREPLICATION);
							}
							break;
						case 13:
							{
							setState(1615);
							match(BYPASSRLS);
							}
							break;
						case 14:
							{
							setState(1616);
							match(NOBYPASSRLS);
							}
							break;
						case 15:
							{
							setState(1617);
							match(CONNECTION);
							setState(1618);
							match(LIMIT);
							setState(1619);
							match(INTEGER_LITERAL);
							}
							break;
						case 16:
							{
							setState(1621);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==ENCRYPTED) {
								{
								setState(1620);
								match(ENCRYPTED);
								}
							}

							setState(1623);
							match(PASSWORD);
							setState(1624);
							_la = _input.LA(1);
							if ( !(_la==NULL || _la==SINGLEQ_STRING_LITERAL) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 17:
							{
							setState(1625);
							match(VALID);
							setState(1626);
							match(UNTIL);
							setState(1627);
							match(SINGLEQ_STRING_LITERAL);
							}
							break;
						case 18:
							{
							setState(1628);
							match(IN);
							setState(1629);
							match(ROLE);
							setState(1630);
							name_list();
							}
							break;
						case 19:
							{
							setState(1631);
							match(IN);
							setState(1632);
							match(GROUP);
							setState(1633);
							name_list();
							}
							break;
						case 20:
							{
							setState(1634);
							match(ROLE);
							setState(1635);
							name_list();
							}
							break;
						case 21:
							{
							setState(1636);
							match(ADMIN);
							setState(1637);
							name_list();
							}
							break;
						case 22:
							{
							setState(1638);
							match(USER);
							setState(1639);
							name_list();
							}
							break;
						case 23:
							{
							setState(1640);
							match(SYSID);
							setState(1641);
							match(INTEGER_LITERAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1644); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_rule_eventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public Create_rule_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_rule_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_rule_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_rule_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_rule_eventContext create_rule_event() throws RecognitionException {
		Create_rule_eventContext _localctx = new Create_rule_eventContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_create_rule_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1648);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public Create_rule_eventContext event;
		public IdentifierContext tableName;
		public IdentifierContext command;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(PostgreSQLParser.TO, 0); }
		public TerminalNode DO() { return getToken(PostgreSQLParser.DO, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Create_rule_eventContext create_rule_event() {
			return getRuleContext(Create_rule_eventContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public Create_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_rule_stmtContext create_rule_stmt() throws RecognitionException {
		Create_rule_stmtContext _localctx = new Create_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1650);
			match(CREATE);
			setState(1653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1651);
				match(OR);
				setState(1652);
				match(REPLACE);
				}
			}

			setState(1655);
			match(RULE);
			setState(1656);
			((Create_rule_stmtContext)_localctx).name = name_();
			setState(1657);
			match(AS);
			setState(1658);
			match(ON);
			setState(1659);
			((Create_rule_stmtContext)_localctx).event = create_rule_event();
			setState(1660);
			match(TO);
			setState(1661);
			((Create_rule_stmtContext)_localctx).tableName = identifier(0);
			setState(1664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1662);
				match(WHERE);
				setState(1663);
				predicate(0);
				}
			}

			setState(1666);
			match(DO);
			setState(1668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				setState(1667);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				setState(1670);
				match(NOTHING);
				}
				break;
			case 2:
				{
				setState(1671);
				((Create_rule_stmtContext)_localctx).command = identifier(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_stmtContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(PostgreSQLParser.AUTHORIZATION, 0); }
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Create_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_stmtContext create_schema_stmt() throws RecognitionException {
		Create_schema_stmtContext _localctx = new Create_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_schema_stmt);
		int _la;
		try {
			setState(1708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1674);
				match(CREATE);
				setState(1675);
				match(SCHEMA);
				setState(1676);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(1679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1677);
					match(AUTHORIZATION);
					setState(1678);
					role_name();
					}
					break;
				}
				setState(1682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1681);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1684);
				match(CREATE);
				setState(1685);
				match(SCHEMA);
				setState(1686);
				match(AUTHORIZATION);
				setState(1687);
				role_name();
				setState(1689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(1688);
					todo_fill_in();
					}
					break;
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1691);
				match(CREATE);
				setState(1692);
				match(SCHEMA);
				setState(1693);
				match(IF);
				setState(1694);
				match(NOT);
				setState(1695);
				match(EXISTS);
				setState(1696);
				((Create_schema_stmtContext)_localctx).schema_name = identifier(0);
				setState(1699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(1697);
					match(AUTHORIZATION);
					setState(1698);
					role_name();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1701);
				match(CREATE);
				setState(1702);
				match(SCHEMA);
				setState(1703);
				match(IF);
				setState(1704);
				match(NOT);
				setState(1705);
				match(EXISTS);
				setState(1706);
				match(AUTHORIZATION);
				setState(1707);
				role_name();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token increment;
		public Token minvalue;
		public Token maxvalue;
		public Token start;
		public Token cache;
		public IdentifierContext table_name;
		public IdentifierContext column_name_;
		public TerminalNode CREATE() { return getToken(PostgreSQLParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(PostgreSQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(PostgreSQLParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public List<TerminalNode> BY() { return getTokens(PostgreSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(PostgreSQLParser.BY, i);
		}
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public List<TerminalNode> INTEGER_LITERAL() { return getTokens(PostgreSQLParser.INTEGER_LITERAL); }
		public TerminalNode INTEGER_LITERAL(int i) {
			return getToken(PostgreSQLParser.INTEGER_LITERAL, i);
		}
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Create_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequence_stmtContext create_sequence_stmt() throws RecognitionException {
		Create_sequence_stmtContext _localctx = new Create_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			match(CREATE);
			setState(1712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(1711);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1714);
			match(SEQUENCE);
			setState(1718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1715);
				match(IF);
				setState(1716);
				match(NOT);
				setState(1717);
				match(EXISTS);
				}
			}

			setState(1720);
			((Create_sequence_stmtContext)_localctx).name = identifier(0);
			setState(1726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				setState(1721);
				match(INCREMENT);
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1722);
					match(BY);
					}
				}

				setState(1725);
				((Create_sequence_stmtContext)_localctx).increment = match(INTEGER_LITERAL);
				}
				break;
			}
			setState(1732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(1728);
				match(MINVALUE);
				setState(1729);
				((Create_sequence_stmtContext)_localctx).minvalue = match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				setState(1730);
				match(NO);
				setState(1731);
				match(MINVALUE);
				}
				break;
			}
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(1734);
				match(MAXVALUE);
				setState(1735);
				((Create_sequence_stmtContext)_localctx).maxvalue = match(INTEGER_LITERAL);
				}
				break;
			case 2:
				{
				setState(1736);
				match(NO);
				setState(1737);
				match(MAXVALUE);
				}
				break;
			}
			setState(1745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1740);
				match(START);
				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1741);
					match(WITH);
					}
				}

				setState(1744);
				((Create_sequence_stmtContext)_localctx).start = match(INTEGER_LITERAL);
				}
				break;
			}
			setState(1749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1747);
				match(CACHE);
				setState(1748);
				((Create_sequence_stmtContext)_localctx).cache = match(INTEGER_LITERAL);
				}
				break;
			}
			setState(1755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1751);
					match(NO);
					}
				}

				setState(1754);
				match(CYCLE);
				}
				break;
			}
			setState(1766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(1757);
				match(OWNED);
				setState(1758);
				match(BY);
				setState(1764);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					{
					setState(1759);
					((Create_sequence_stmtContext)_localctx).table_name = identifier(0);
					setState(1760);
					match(DOT);
					setState(1761);
					((Create_sequence_stmtContext)_localctx).column_name_ = identifier(0);
					}
					}
					break;
				case 2:
					{
					setState(1763);
					match(NONE);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_stmtContext create_server_stmt() throws RecognitionException {
		Create_server_stmtContext _localctx = new Create_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_server_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1768);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statistics_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statistics_stmtContext create_statistics_stmt() throws RecognitionException {
		Create_statistics_stmtContext _localctx = new Create_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_statistics_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_subscription_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_subscription_stmtContext create_subscription_stmt() throws RecognitionException {
		Create_subscription_stmtContext _localctx = new Create_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_subscription_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1772);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_stmtContext create_table_stmt() throws RecognitionException {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_table_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1774);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_as_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_table_as_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_table_as_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_table_as_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_table_as_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_stmtContext create_table_as_stmt() throws RecognitionException {
		Create_table_as_stmtContext _localctx = new Create_table_as_stmtContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_table_as_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1776);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespace_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tablespace_stmtContext create_tablespace_stmt() throws RecognitionException {
		Create_tablespace_stmtContext _localctx = new Create_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_tablespace_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1778);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_search_config_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_config_stmtContext create_text_search_config_stmt() throws RecognitionException {
		Create_text_search_config_stmtContext _localctx = new Create_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_text_search_config_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_search_dict_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_dict_stmtContext create_text_search_dict_stmt() throws RecognitionException {
		Create_text_search_dict_stmtContext _localctx = new Create_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_text_search_dict_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1782);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_search_parser_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_parser_stmtContext create_text_search_parser_stmt() throws RecognitionException {
		Create_text_search_parser_stmtContext _localctx = new Create_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_text_search_parser_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1784);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_search_template_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_search_template_stmtContext create_text_search_template_stmt() throws RecognitionException {
		Create_text_search_template_stmtContext _localctx = new Create_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_create_text_search_template_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_transform_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_transform_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_transform_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_transform_stmtContext create_transform_stmt() throws RecognitionException {
		Create_transform_stmtContext _localctx = new Create_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_transform_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_trigger_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_trigger_stmtContext create_trigger_stmt() throws RecognitionException {
		Create_trigger_stmtContext _localctx = new Create_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_trigger_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_type_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_type_stmtContext create_type_stmt() throws RecognitionException {
		Create_type_stmtContext _localctx = new Create_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_type_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1792);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_stmtContext create_user_stmt() throws RecognitionException {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_user_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_mapping_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_mapping_stmtContext create_user_mapping_stmt() throws RecognitionException {
		Create_user_mapping_stmtContext _localctx = new Create_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_user_mapping_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1796);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCreate_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCreate_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCreate_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_view_stmtContext create_view_stmt() throws RecognitionException {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deallocate_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Deallocate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeallocate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeallocate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeallocate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deallocate_stmtContext deallocate_stmt() throws RecognitionException {
		Deallocate_stmtContext _localctx = new Deallocate_stmtContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_deallocate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1800);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Declare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDeclare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDeclare_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDeclare_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_stmtContext declare_stmt() throws RecognitionException {
		Declare_stmtContext _localctx = new Declare_stmtContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_declare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1802);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Delete_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDelete_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDelete_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDelete_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_stmtContext delete_stmt() throws RecognitionException {
		Delete_stmtContext _localctx = new Delete_stmtContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_delete_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Discard_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Discard_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDiscard_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDiscard_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDiscard_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Discard_stmtContext discard_stmt() throws RecognitionException {
		Discard_stmtContext _localctx = new Discard_stmtContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_discard_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_stmtContext extends ParserRuleContext {
		public Drop_access_method_stmtContext drop_access_method_stmt() {
			return getRuleContext(Drop_access_method_stmtContext.class,0);
		}
		public Drop_aggregate_stmtContext drop_aggregate_stmt() {
			return getRuleContext(Drop_aggregate_stmtContext.class,0);
		}
		public Drop_cast_stmtContext drop_cast_stmt() {
			return getRuleContext(Drop_cast_stmtContext.class,0);
		}
		public Drop_collation_stmtContext drop_collation_stmt() {
			return getRuleContext(Drop_collation_stmtContext.class,0);
		}
		public Drop_conversion_stmtContext drop_conversion_stmt() {
			return getRuleContext(Drop_conversion_stmtContext.class,0);
		}
		public Drop_database_stmtContext drop_database_stmt() {
			return getRuleContext(Drop_database_stmtContext.class,0);
		}
		public Drop_domain_stmtContext drop_domain_stmt() {
			return getRuleContext(Drop_domain_stmtContext.class,0);
		}
		public Drop_event_trigger_stmtContext drop_event_trigger_stmt() {
			return getRuleContext(Drop_event_trigger_stmtContext.class,0);
		}
		public Drop_extension_stmtContext drop_extension_stmt() {
			return getRuleContext(Drop_extension_stmtContext.class,0);
		}
		public Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() {
			return getRuleContext(Drop_foreign_data_wrapper_stmtContext.class,0);
		}
		public Drop_foreign_table_stmtContext drop_foreign_table_stmt() {
			return getRuleContext(Drop_foreign_table_stmtContext.class,0);
		}
		public Drop_function_stmtContext drop_function_stmt() {
			return getRuleContext(Drop_function_stmtContext.class,0);
		}
		public Drop_group_stmtContext drop_group_stmt() {
			return getRuleContext(Drop_group_stmtContext.class,0);
		}
		public Drop_index_stmtContext drop_index_stmt() {
			return getRuleContext(Drop_index_stmtContext.class,0);
		}
		public Drop_language_stmtContext drop_language_stmt() {
			return getRuleContext(Drop_language_stmtContext.class,0);
		}
		public Drop_materialized_view_stmtContext drop_materialized_view_stmt() {
			return getRuleContext(Drop_materialized_view_stmtContext.class,0);
		}
		public Drop_operator_stmtContext drop_operator_stmt() {
			return getRuleContext(Drop_operator_stmtContext.class,0);
		}
		public Drop_operator_class_stmtContext drop_operator_class_stmt() {
			return getRuleContext(Drop_operator_class_stmtContext.class,0);
		}
		public Drop_operator_family_stmtContext drop_operator_family_stmt() {
			return getRuleContext(Drop_operator_family_stmtContext.class,0);
		}
		public Drop_owned_stmtContext drop_owned_stmt() {
			return getRuleContext(Drop_owned_stmtContext.class,0);
		}
		public Drop_policy_stmtContext drop_policy_stmt() {
			return getRuleContext(Drop_policy_stmtContext.class,0);
		}
		public Drop_publication_stmtContext drop_publication_stmt() {
			return getRuleContext(Drop_publication_stmtContext.class,0);
		}
		public Drop_role_stmtContext drop_role_stmt() {
			return getRuleContext(Drop_role_stmtContext.class,0);
		}
		public Drop_rule_stmtContext drop_rule_stmt() {
			return getRuleContext(Drop_rule_stmtContext.class,0);
		}
		public Drop_schema_stmtContext drop_schema_stmt() {
			return getRuleContext(Drop_schema_stmtContext.class,0);
		}
		public Drop_sequence_stmtContext drop_sequence_stmt() {
			return getRuleContext(Drop_sequence_stmtContext.class,0);
		}
		public Drop_server_stmtContext drop_server_stmt() {
			return getRuleContext(Drop_server_stmtContext.class,0);
		}
		public Drop_statistics_stmtContext drop_statistics_stmt() {
			return getRuleContext(Drop_statistics_stmtContext.class,0);
		}
		public Drop_subscription_stmtContext drop_subscription_stmt() {
			return getRuleContext(Drop_subscription_stmtContext.class,0);
		}
		public Drop_table_stmtContext drop_table_stmt() {
			return getRuleContext(Drop_table_stmtContext.class,0);
		}
		public Drop_tablespace_stmtContext drop_tablespace_stmt() {
			return getRuleContext(Drop_tablespace_stmtContext.class,0);
		}
		public Drop_text_search_config_stmtContext drop_text_search_config_stmt() {
			return getRuleContext(Drop_text_search_config_stmtContext.class,0);
		}
		public Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() {
			return getRuleContext(Drop_text_search_dict_stmtContext.class,0);
		}
		public Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() {
			return getRuleContext(Drop_text_search_parser_stmtContext.class,0);
		}
		public Drop_text_search_template_stmtContext drop_text_search_template_stmt() {
			return getRuleContext(Drop_text_search_template_stmtContext.class,0);
		}
		public Drop_transform_stmtContext drop_transform_stmt() {
			return getRuleContext(Drop_transform_stmtContext.class,0);
		}
		public Drop_trigger_stmtContext drop_trigger_stmt() {
			return getRuleContext(Drop_trigger_stmtContext.class,0);
		}
		public Drop_type_stmtContext drop_type_stmt() {
			return getRuleContext(Drop_type_stmtContext.class,0);
		}
		public Drop_user_stmtContext drop_user_stmt() {
			return getRuleContext(Drop_user_stmtContext.class,0);
		}
		public Drop_user_mapping_stmtContext drop_user_mapping_stmt() {
			return getRuleContext(Drop_user_mapping_stmtContext.class,0);
		}
		public Drop_view_stmtContext drop_view_stmt() {
			return getRuleContext(Drop_view_stmtContext.class,0);
		}
		public Drop_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_stmtContext drop_stmt() throws RecognitionException {
		Drop_stmtContext _localctx = new Drop_stmtContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_stmt);
		try {
			setState(1849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1808);
				drop_access_method_stmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1809);
				drop_aggregate_stmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1810);
				drop_cast_stmt();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1811);
				drop_collation_stmt();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1812);
				drop_conversion_stmt();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1813);
				drop_database_stmt();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1814);
				drop_domain_stmt();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1815);
				drop_event_trigger_stmt();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1816);
				drop_extension_stmt();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1817);
				drop_foreign_data_wrapper_stmt();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1818);
				drop_foreign_table_stmt();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1819);
				drop_function_stmt();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1820);
				drop_group_stmt();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1821);
				drop_index_stmt();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1822);
				drop_language_stmt();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1823);
				drop_materialized_view_stmt();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1824);
				drop_operator_stmt();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1825);
				drop_operator_class_stmt();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1826);
				drop_operator_family_stmt();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1827);
				drop_owned_stmt();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1828);
				drop_policy_stmt();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1829);
				drop_publication_stmt();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1830);
				drop_role_stmt();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1831);
				drop_rule_stmt();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1832);
				drop_schema_stmt();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1833);
				drop_sequence_stmt();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1834);
				drop_server_stmt();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1835);
				drop_statistics_stmt();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1836);
				drop_subscription_stmt();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1837);
				drop_table_stmt();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1838);
				drop_tablespace_stmt();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1839);
				drop_text_search_config_stmt();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1840);
				drop_text_search_dict_stmt();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1841);
				drop_text_search_parser_stmt();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1842);
				drop_text_search_template_stmt();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1843);
				drop_transform_stmt();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1844);
				drop_trigger_stmt();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1845);
				drop_type_stmt();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1846);
				drop_user_stmt();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1847);
				drop_user_mapping_stmt();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1848);
				drop_view_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_access_method_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_access_method_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_method_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_access_method_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_access_method_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_access_method_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_access_method_stmtContext drop_access_method_stmt() throws RecognitionException {
		Drop_access_method_stmtContext _localctx = new Drop_access_method_stmtContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_access_method_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1851);
			match(DROP);
			setState(1852);
			match(ACCESS);
			setState(1853);
			match(METHOD);
			setState(1856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1854);
				match(IF);
				setState(1855);
				match(EXISTS);
				}
			}

			setState(1858);
			((Drop_access_method_stmtContext)_localctx).name = identifier(0);
			setState(1860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(1859);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregate_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Aggregate_signatureContext aggregate_signature() {
			return getRuleContext(Aggregate_signatureContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_aggregate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_aggregate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_aggregate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_aggregate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregate_stmtContext drop_aggregate_stmt() throws RecognitionException {
		Drop_aggregate_stmtContext _localctx = new Drop_aggregate_stmtContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_aggregate_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(DROP);
			setState(1863);
			match(AGGREGATE);
			setState(1866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1864);
				match(IF);
				setState(1865);
				match(EXISTS);
				}
			}

			setState(1868);
			((Drop_aggregate_stmtContext)_localctx).name = identifier(0);
			setState(1869);
			match(OPEN_PAREN);
			setState(1870);
			aggregate_signature();
			setState(1871);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cast_stmtContext extends ParserRuleContext {
		public TypeContext source_type;
		public IdentifierContext target_type;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_cast_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cast_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_cast_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_cast_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_cast_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_cast_stmtContext drop_cast_stmt() throws RecognitionException {
		Drop_cast_stmtContext _localctx = new Drop_cast_stmtContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_cast_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			match(DROP);
			setState(1874);
			match(CAST);
			setState(1877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1875);
				match(IF);
				setState(1876);
				match(EXISTS);
				}
			}

			setState(1879);
			match(OPEN_PAREN);
			setState(1880);
			((Drop_cast_stmtContext)_localctx).source_type = type(0);
			setState(1881);
			match(AS);
			setState(1882);
			((Drop_cast_stmtContext)_localctx).target_type = identifier(0);
			setState(1883);
			match(CLOSE_PAREN);
			setState(1885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(1884);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_collation_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(PostgreSQLParser.COLLATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_collation_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_collation_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_collation_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_collation_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_collation_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_collation_stmtContext drop_collation_stmt() throws RecognitionException {
		Drop_collation_stmtContext _localctx = new Drop_collation_stmtContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_collation_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			match(DROP);
			setState(1888);
			match(COLLATION);
			setState(1891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1889);
				match(IF);
				setState(1890);
				match(EXISTS);
				}
			}

			setState(1893);
			((Drop_collation_stmtContext)_localctx).names = identifier_list();
			setState(1895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(1894);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_conversion_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_conversion_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_conversion_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_conversion_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_conversion_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_conversion_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_conversion_stmtContext drop_conversion_stmt() throws RecognitionException {
		Drop_conversion_stmtContext _localctx = new Drop_conversion_stmtContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_conversion_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			match(DROP);
			setState(1898);
			match(CONVERSION);
			setState(1901);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1899);
				match(IF);
				setState(1900);
				match(EXISTS);
				}
			}

			setState(1903);
			((Drop_conversion_stmtContext)_localctx).name = identifier(0);
			setState(1905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(1904);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_database_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_database_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_database_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_database_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_stmtContext drop_database_stmt() throws RecognitionException {
		Drop_database_stmtContext _localctx = new Drop_database_stmtContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_database_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907);
			match(DROP);
			setState(1908);
			match(DATABASE);
			setState(1911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1909);
				match(IF);
				setState(1910);
				match(EXISTS);
				}
			}

			setState(1913);
			((Drop_database_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_domain_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_domain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_domain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_domain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_domain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_domain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_domain_stmtContext drop_domain_stmt() throws RecognitionException {
		Drop_domain_stmtContext _localctx = new Drop_domain_stmtContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_domain_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1915);
			match(DROP);
			setState(1916);
			match(DOMAIN);
			setState(1919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1917);
				match(IF);
				setState(1918);
				match(EXISTS);
				}
			}

			setState(1921);
			((Drop_domain_stmtContext)_localctx).names = identifier_list();
			setState(1923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(1922);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(PostgreSQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_event_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_event_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_event_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_event_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_trigger_stmtContext drop_event_trigger_stmt() throws RecognitionException {
		Drop_event_trigger_stmtContext _localctx = new Drop_event_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_event_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1925);
			match(DROP);
			setState(1926);
			match(EVENT);
			setState(1927);
			match(TRIGGER);
			setState(1930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1928);
				match(IF);
				setState(1929);
				match(EXISTS);
				}
			}

			setState(1932);
			((Drop_event_trigger_stmtContext)_localctx).name = identifier(0);
			setState(1934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1933);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_extension_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(PostgreSQLParser.EXTENSION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_extension_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_extension_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_extension_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_extension_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_extension_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_extension_stmtContext drop_extension_stmt() throws RecognitionException {
		Drop_extension_stmtContext _localctx = new Drop_extension_stmtContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_extension_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1936);
			match(DROP);
			setState(1937);
			match(EXTENSION);
			setState(1940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1938);
				match(IF);
				setState(1939);
				match(EXISTS);
				}
			}

			setState(1942);
			((Drop_extension_stmtContext)_localctx).names = identifier_list();
			setState(1944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(1943);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_foreign_data_wrapper_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(PostgreSQLParser.WRAPPER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_foreign_data_wrapper_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_data_wrapper_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_foreign_data_wrapper_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_foreign_data_wrapper_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_foreign_data_wrapper_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_foreign_data_wrapper_stmtContext drop_foreign_data_wrapper_stmt() throws RecognitionException {
		Drop_foreign_data_wrapper_stmtContext _localctx = new Drop_foreign_data_wrapper_stmtContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_foreign_data_wrapper_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1946);
			match(DROP);
			setState(1947);
			match(FOREIGN);
			setState(1948);
			match(DATA);
			setState(1949);
			match(WRAPPER);
			setState(1952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1950);
				match(IF);
				setState(1951);
				match(EXISTS);
				}
			}

			setState(1954);
			((Drop_foreign_data_wrapper_stmtContext)_localctx).names = identifier_list();
			setState(1956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(1955);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_foreign_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(PostgreSQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_foreign_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_foreign_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_foreign_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_foreign_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_foreign_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_foreign_table_stmtContext drop_foreign_table_stmt() throws RecognitionException {
		Drop_foreign_table_stmtContext _localctx = new Drop_foreign_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_foreign_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1958);
			match(DROP);
			setState(1959);
			match(FOREIGN);
			setState(1960);
			match(TABLE);
			setState(1963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1961);
				match(IF);
				setState(1962);
				match(EXISTS);
				}
			}

			setState(1965);
			((Drop_foreign_table_stmtContext)_localctx).names = identifier_list();
			setState(1967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(1966);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_function_stmtContext extends ParserRuleContext {
		public Func_sig_listContext functions;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public Func_sig_listContext func_sig_list() {
			return getRuleContext(Func_sig_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_function_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_function_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_function_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_function_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_function_stmtContext drop_function_stmt() throws RecognitionException {
		Drop_function_stmtContext _localctx = new Drop_function_stmtContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_function_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			match(DROP);
			setState(1970);
			match(FUNCTION);
			setState(1973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1971);
				match(IF);
				setState(1972);
				match(EXISTS);
				}
			}

			setState(1975);
			((Drop_function_stmtContext)_localctx).functions = func_sig_list();
			setState(1977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(1976);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_group_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_group_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_group_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_group_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_group_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_group_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_group_stmtContext drop_group_stmt() throws RecognitionException {
		Drop_group_stmtContext _localctx = new Drop_group_stmtContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_group_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1979);
			match(DROP);
			setState(1980);
			match(GROUP);
			setState(1983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1981);
				match(IF);
				setState(1982);
				match(EXISTS);
				}
			}

			setState(1985);
			((Drop_group_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_index_stmtContext extends ParserRuleContext {
		public Name_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public Name_listContext name_list() {
			return getRuleContext(Name_listContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(PostgreSQLParser.CONCURRENTLY, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_index_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_index_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_index_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_index_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_index_stmtContext drop_index_stmt() throws RecognitionException {
		Drop_index_stmtContext _localctx = new Drop_index_stmtContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_index_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1987);
			match(DROP);
			setState(1988);
			match(INDEX);
			setState(1990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(1989);
				match(CONCURRENTLY);
				}
			}

			setState(1994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1992);
				match(IF);
				setState(1993);
				match(EXISTS);
				}
			}

			setState(1996);
			((Drop_index_stmtContext)_localctx).names = name_list();
			setState(1998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(1997);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_language_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_language_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_language_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_language_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_language_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_language_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_language_stmtContext drop_language_stmt() throws RecognitionException {
		Drop_language_stmtContext _localctx = new Drop_language_stmtContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_language_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2000);
			match(DROP);
			setState(2002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(2001);
				match(PROCEDURAL);
				}
			}

			setState(2004);
			match(LANGUAGE);
			setState(2007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2005);
				match(IF);
				setState(2006);
				match(EXISTS);
				}
			}

			setState(2009);
			((Drop_language_stmtContext)_localctx).name = identifier(0);
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2010);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_materialized_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PostgreSQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_materialized_view_stmtContext drop_materialized_view_stmt() throws RecognitionException {
		Drop_materialized_view_stmtContext _localctx = new Drop_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_materialized_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2013);
			match(DROP);
			setState(2014);
			match(MATERIALIZED);
			setState(2015);
			match(VIEW);
			setState(2018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2016);
				match(IF);
				setState(2017);
				match(EXISTS);
				}
			}

			setState(2020);
			((Drop_materialized_view_stmtContext)_localctx).names = identifier_list();
			setState(2022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2021);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Drop_operator_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_stmtContext drop_operator_stmt() throws RecognitionException {
		Drop_operator_stmtContext _localctx = new Drop_operator_stmtContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_operator_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2024);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_class_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_operator_class_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_class_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_class_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_class_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_class_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_class_stmtContext drop_operator_class_stmt() throws RecognitionException {
		Drop_operator_class_stmtContext _localctx = new Drop_operator_class_stmtContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_operator_class_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2026);
			match(DROP);
			setState(2027);
			match(OPERATOR);
			setState(2028);
			match(CLASS);
			setState(2031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2029);
				match(IF);
				setState(2030);
				match(EXISTS);
				}
			}

			setState(2033);
			((Drop_operator_class_stmtContext)_localctx).name = identifier(0);
			setState(2034);
			match(USING);
			setState(2035);
			index_method();
			setState(2037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2036);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_operator_family_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(PostgreSQLParser.FAMILY, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public Index_methodContext index_method() {
			return getRuleContext(Index_methodContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_operator_family_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_operator_family_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_operator_family_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_operator_family_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_operator_family_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_operator_family_stmtContext drop_operator_family_stmt() throws RecognitionException {
		Drop_operator_family_stmtContext _localctx = new Drop_operator_family_stmtContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_operator_family_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2039);
			match(DROP);
			setState(2040);
			match(OPERATOR);
			setState(2041);
			match(FAMILY);
			setState(2044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2042);
				match(IF);
				setState(2043);
				match(EXISTS);
				}
			}

			setState(2046);
			((Drop_operator_family_stmtContext)_localctx).name = identifier(0);
			setState(2047);
			match(USING);
			setState(2048);
			index_method();
			setState(2050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2049);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_owned_stmtContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(PostgreSQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Role_name_listContext role_name_list() {
			return getRuleContext(Role_name_listContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_owned_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_owned_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_owned_stmtContext drop_owned_stmt() throws RecognitionException {
		Drop_owned_stmtContext _localctx = new Drop_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_owned_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			match(DROP);
			setState(2053);
			match(OWNED);
			setState(2054);
			match(BY);
			setState(2055);
			role_name_list();
			setState(2057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2056);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_policy_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(PostgreSQLParser.POLICY, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_policy_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_policy_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_policy_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_policy_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_policy_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_policy_stmtContext drop_policy_stmt() throws RecognitionException {
		Drop_policy_stmtContext _localctx = new Drop_policy_stmtContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_policy_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2059);
			match(DROP);
			setState(2060);
			match(POLICY);
			setState(2063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2061);
				match(IF);
				setState(2062);
				match(EXISTS);
				}
			}

			setState(2065);
			((Drop_policy_stmtContext)_localctx).name = identifier(0);
			setState(2066);
			match(ON);
			setState(2067);
			((Drop_policy_stmtContext)_localctx).table_name = identifier(0);
			setState(2069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2068);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_publication_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(PostgreSQLParser.PUBLICATION, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_publication_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_publication_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_publication_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_publication_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_publication_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_publication_stmtContext drop_publication_stmt() throws RecognitionException {
		Drop_publication_stmtContext _localctx = new Drop_publication_stmtContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_publication_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			match(DROP);
			setState(2072);
			match(PUBLICATION);
			setState(2075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2073);
				match(IF);
				setState(2074);
				match(EXISTS);
				}
			}

			setState(2077);
			((Drop_publication_stmtContext)_localctx).names = identifier_list();
			setState(2079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2078);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_role_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_role_stmtContext drop_role_stmt() throws RecognitionException {
		Drop_role_stmtContext _localctx = new Drop_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_role_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(DROP);
			setState(2082);
			match(ROLE);
			setState(2085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2083);
				match(IF);
				setState(2084);
				match(EXISTS);
				}
			}

			setState(2087);
			((Drop_role_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_rule_stmtContext extends ParserRuleContext {
		public Name_Context name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_rule_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_rule_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_rule_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_rule_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_rule_stmtContext drop_rule_stmt() throws RecognitionException {
		Drop_rule_stmtContext _localctx = new Drop_rule_stmtContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_rule_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			match(DROP);
			setState(2090);
			match(RULE);
			setState(2093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2091);
				match(IF);
				setState(2092);
				match(EXISTS);
				}
			}

			setState(2095);
			((Drop_rule_stmtContext)_localctx).name = name_();
			setState(2096);
			match(ON);
			setState(2097);
			((Drop_rule_stmtContext)_localctx).table_name = identifier(0);
			setState(2099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2098);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schema_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_stmtContext drop_schema_stmt() throws RecognitionException {
		Drop_schema_stmtContext _localctx = new Drop_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_schema_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101);
			match(DROP);
			setState(2102);
			match(SCHEMA);
			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2103);
				match(IF);
				setState(2104);
				match(EXISTS);
				}
			}

			setState(2107);
			((Drop_schema_stmtContext)_localctx).names = identifier_list();
			setState(2109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(2108);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequence_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_sequence_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_sequence_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_sequence_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_sequence_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequence_stmtContext drop_sequence_stmt() throws RecognitionException {
		Drop_sequence_stmtContext _localctx = new Drop_sequence_stmtContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_sequence_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2111);
			match(DROP);
			setState(2112);
			match(SEQUENCE);
			setState(2115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2113);
				match(IF);
				setState(2114);
				match(EXISTS);
				}
			}

			setState(2117);
			((Drop_sequence_stmtContext)_localctx).names = identifier_list();
			setState(2119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2118);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_server_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_server_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_server_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_server_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_server_stmtContext drop_server_stmt() throws RecognitionException {
		Drop_server_stmtContext _localctx = new Drop_server_stmtContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_server_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2121);
			match(DROP);
			setState(2122);
			match(SERVER);
			setState(2125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2123);
				match(IF);
				setState(2124);
				match(EXISTS);
				}
			}

			setState(2127);
			((Drop_server_stmtContext)_localctx).names = identifier_list();
			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2128);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_statistics_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_statistics_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_statistics_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_statistics_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statistics_stmtContext drop_statistics_stmt() throws RecognitionException {
		Drop_statistics_stmtContext _localctx = new Drop_statistics_stmtContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_statistics_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			match(DROP);
			setState(2132);
			match(STATISTICS);
			setState(2135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2133);
				match(IF);
				setState(2134);
				match(EXISTS);
				}
			}

			setState(2137);
			((Drop_statistics_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_subscription_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(PostgreSQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_subscription_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subscription_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_subscription_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_subscription_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_subscription_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_subscription_stmtContext drop_subscription_stmt() throws RecognitionException {
		Drop_subscription_stmtContext _localctx = new Drop_subscription_stmtContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_subscription_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2139);
			match(DROP);
			setState(2140);
			match(SUBSCRIPTION);
			setState(2143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2141);
				match(IF);
				setState(2142);
				match(EXISTS);
				}
			}

			setState(2145);
			((Drop_subscription_stmtContext)_localctx).name = identifier(0);
			setState(2147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2146);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PostgreSQLParser.TABLE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_table_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_table_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_table_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_table_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_stmtContext drop_table_stmt() throws RecognitionException {
		Drop_table_stmtContext _localctx = new Drop_table_stmtContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_table_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149);
			match(DROP);
			setState(2150);
			match(TABLE);
			setState(2153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2151);
				match(IF);
				setState(2152);
				match(EXISTS);
				}
			}

			setState(2155);
			((Drop_table_stmtContext)_localctx).names = identifier_list();
			setState(2157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2156);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tablespace_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_tablespace_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tablespace_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_tablespace_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_tablespace_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_tablespace_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tablespace_stmtContext drop_tablespace_stmt() throws RecognitionException {
		Drop_tablespace_stmtContext _localctx = new Drop_tablespace_stmtContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_drop_tablespace_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(DROP);
			setState(2160);
			match(TABLESPACE);
			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2161);
				match(IF);
				setState(2162);
				match(EXISTS);
				}
			}

			setState(2165);
			((Drop_tablespace_stmtContext)_localctx).name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_search_config_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(PostgreSQLParser.CONFIGURATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_config_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_config_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_config_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_config_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_config_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_config_stmtContext drop_text_search_config_stmt() throws RecognitionException {
		Drop_text_search_config_stmtContext _localctx = new Drop_text_search_config_stmtContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_drop_text_search_config_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2167);
			match(DROP);
			setState(2168);
			match(TEXT);
			setState(2169);
			match(SEARCH);
			setState(2170);
			match(CONFIGURATION);
			setState(2173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2171);
				match(IF);
				setState(2172);
				match(EXISTS);
				}
			}

			setState(2175);
			((Drop_text_search_config_stmtContext)_localctx).name = identifier(0);
			setState(2177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2176);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_search_dict_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_dict_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_dict_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_dict_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_dict_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_dict_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_dict_stmtContext drop_text_search_dict_stmt() throws RecognitionException {
		Drop_text_search_dict_stmtContext _localctx = new Drop_text_search_dict_stmtContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_text_search_dict_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2179);
			match(DROP);
			setState(2180);
			match(TEXT);
			setState(2181);
			match(SEARCH);
			setState(2182);
			match(DICTIONARY);
			setState(2185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2183);
				match(IF);
				setState(2184);
				match(EXISTS);
				}
			}

			setState(2187);
			((Drop_text_search_dict_stmtContext)_localctx).name = identifier(0);
			setState(2189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				setState(2188);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_search_parser_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(PostgreSQLParser.PARSER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_parser_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_parser_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_parser_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_parser_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_parser_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_parser_stmtContext drop_text_search_parser_stmt() throws RecognitionException {
		Drop_text_search_parser_stmtContext _localctx = new Drop_text_search_parser_stmtContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_drop_text_search_parser_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2191);
			match(DROP);
			setState(2192);
			match(TEXT);
			setState(2193);
			match(SEARCH);
			setState(2194);
			match(PARSER);
			setState(2197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2195);
				match(IF);
				setState(2196);
				match(EXISTS);
				}
			}

			setState(2199);
			((Drop_text_search_parser_stmtContext)_localctx).name = identifier(0);
			setState(2201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2200);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_search_template_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_text_search_template_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_search_template_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_text_search_template_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_text_search_template_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_text_search_template_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_search_template_stmtContext drop_text_search_template_stmt() throws RecognitionException {
		Drop_text_search_template_stmtContext _localctx = new Drop_text_search_template_stmtContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_drop_text_search_template_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2203);
			match(DROP);
			setState(2204);
			match(TEXT);
			setState(2205);
			match(SEARCH);
			setState(2206);
			match(TEMPLATE);
			setState(2209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2207);
				match(IF);
				setState(2208);
				match(EXISTS);
				}
			}

			setState(2211);
			((Drop_text_search_template_stmtContext)_localctx).name = identifier(0);
			setState(2213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2212);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_transform_stmtContext extends ParserRuleContext {
		public IdentifierContext type_name;
		public IdentifierContext lang_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_transform_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_transform_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_transform_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_transform_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_transform_stmtContext drop_transform_stmt() throws RecognitionException {
		Drop_transform_stmtContext _localctx = new Drop_transform_stmtContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_drop_transform_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2215);
			match(DROP);
			setState(2216);
			match(TRANSFORM);
			setState(2219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2217);
				match(IF);
				setState(2218);
				match(EXISTS);
				}
			}

			setState(2221);
			match(FOR);
			setState(2222);
			((Drop_transform_stmtContext)_localctx).type_name = identifier(0);
			setState(2223);
			match(LANGUAGE);
			setState(2224);
			((Drop_transform_stmtContext)_localctx).lang_name = identifier(0);
			setState(2225);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_trigger_stmtContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext table_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_trigger_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_trigger_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_trigger_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_trigger_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_trigger_stmtContext drop_trigger_stmt() throws RecognitionException {
		Drop_trigger_stmtContext _localctx = new Drop_trigger_stmtContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_trigger_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			match(DROP);
			setState(2228);
			match(TRIGGER);
			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2229);
				match(IF);
				setState(2230);
				match(EXISTS);
				}
			}

			setState(2233);
			((Drop_trigger_stmtContext)_localctx).name = identifier(0);
			setState(2234);
			match(ON);
			setState(2235);
			((Drop_trigger_stmtContext)_localctx).table_name = identifier(0);
			setState(2237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2236);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_type_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_type_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_type_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_type_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_type_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_type_stmtContext drop_type_stmt() throws RecognitionException {
		Drop_type_stmtContext _localctx = new Drop_type_stmtContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_type_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			match(DROP);
			setState(2240);
			match(TYPE);
			setState(2243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2241);
				match(IF);
				setState(2242);
				match(EXISTS);
				}
			}

			setState(2245);
			((Drop_type_stmtContext)_localctx).names = identifier_list();
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2246);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode USER() { return getToken(PostgreSQLParser.USER, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Drop_user_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_user_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_user_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_user_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_stmtContext drop_user_stmt() throws RecognitionException {
		Drop_user_stmtContext _localctx = new Drop_user_stmtContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_user_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			match(DROP);
			setState(2250);
			match(USER);
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2251);
				match(IF);
				setState(2252);
				match(EXISTS);
				}
			}

			setState(2255);
			((Drop_user_stmtContext)_localctx).names = identifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_mapping_stmtContext extends ParserRuleContext {
		public Name_Context user_name;
		public IdentifierContext server_name;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public List<TerminalNode> USER() { return getTokens(PostgreSQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(PostgreSQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(PostgreSQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(PostgreSQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public Drop_user_mapping_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_mapping_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_user_mapping_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_user_mapping_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_user_mapping_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_mapping_stmtContext drop_user_mapping_stmt() throws RecognitionException {
		Drop_user_mapping_stmtContext _localctx = new Drop_user_mapping_stmtContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_user_mapping_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			match(DROP);
			setState(2258);
			match(USER);
			setState(2259);
			match(MAPPING);
			setState(2262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2260);
				match(IF);
				setState(2261);
				match(EXISTS);
				}
			}

			setState(2264);
			match(FOR);
			setState(2270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2265);
				((Drop_user_mapping_stmtContext)_localctx).user_name = name_();
				}
				break;
			case 2:
				{
				setState(2266);
				match(USER);
				}
				break;
			case 3:
				{
				setState(2267);
				match(CURRENT_USER);
				}
				break;
			case 4:
				{
				setState(2268);
				match(SESSION_USER);
				}
				break;
			case 5:
				{
				setState(2269);
				match(PUBLIC);
				}
				break;
			}
			setState(2272);
			match(SERVER);
			setState(2273);
			((Drop_user_mapping_stmtContext)_localctx).server_name = identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_stmtContext extends ParserRuleContext {
		public Identifier_listContext names;
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public Identifier_listContext identifier_list() {
			return getRuleContext(Identifier_listContext.class,0);
		}
		public TerminalNode IF() { return getToken(PostgreSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public Drop_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterDrop_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitDrop_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitDrop_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_stmtContext drop_view_stmt() throws RecognitionException {
		Drop_view_stmtContext _localctx = new Drop_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_view_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			match(DROP);
			setState(2276);
			match(VIEW);
			setState(2279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2277);
				match(IF);
				setState(2278);
				match(EXISTS);
				}
			}

			setState(2281);
			((Drop_view_stmtContext)_localctx).names = identifier_list();
			setState(2283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2282);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Execute_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExecute_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExecute_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExecute_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_stmtContext execute_stmt() throws RecognitionException {
		Execute_stmtContext _localctx = new Execute_stmtContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_execute_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Explain_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExplain_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExplain_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExplain_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_stmtContext explain_stmt() throws RecognitionException {
		Explain_stmtContext _localctx = new Explain_stmtContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_explain_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2287);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Fetch_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_stmtContext fetch_stmt() throws RecognitionException {
		Fetch_stmtContext _localctx = new Fetch_stmtContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_fetch_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Grant_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrant_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrant_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrant_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_stmtContext grant_stmt() throws RecognitionException {
		Grant_stmtContext _localctx = new Grant_stmtContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_grant_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2291);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Import_foreign_schema_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Import_foreign_schema_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_import_foreign_schema_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterImport_foreign_schema_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitImport_foreign_schema_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitImport_foreign_schema_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Import_foreign_schema_stmtContext import_foreign_schema_stmt() throws RecognitionException {
		Import_foreign_schema_stmtContext _localctx = new Import_foreign_schema_stmtContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_import_foreign_schema_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2293);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterInsert_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitInsert_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitInsert_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_insert_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2295);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Listen_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Listen_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterListen_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitListen_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitListen_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Listen_stmtContext listen_stmt() throws RecognitionException {
		Listen_stmtContext _localctx = new Listen_stmtContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_listen_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2297);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Load_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLoad_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLoad_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLoad_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_stmtContext load_stmt() throws RecognitionException {
		Load_stmtContext _localctx = new Load_stmtContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_load_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2299);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Lock_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLock_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLock_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLock_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_stmtContext lock_stmt() throws RecognitionException {
		Lock_stmtContext _localctx = new Lock_stmtContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_lock_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Move_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Move_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterMove_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitMove_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitMove_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Move_stmtContext move_stmt() throws RecognitionException {
		Move_stmtContext _localctx = new Move_stmtContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_move_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notify_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Notify_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNotify_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNotify_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNotify_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_stmtContext notify_stmt() throws RecognitionException {
		Notify_stmtContext _localctx = new Notify_stmtContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_notify_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Prepare_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrepare_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrepare_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrepare_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_stmtContext prepare_stmt() throws RecognitionException {
		Prepare_stmtContext _localctx = new Prepare_stmtContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_prepare_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepare_transaction_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Prepare_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPrepare_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPrepare_transaction_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPrepare_transaction_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepare_transaction_stmtContext prepare_transaction_stmt() throws RecognitionException {
		Prepare_transaction_stmtContext _localctx = new Prepare_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_prepare_transaction_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2309);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reassign_owned_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Reassign_owned_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reassign_owned_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReassign_owned_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReassign_owned_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReassign_owned_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reassign_owned_stmtContext reassign_owned_stmt() throws RecognitionException {
		Reassign_owned_stmtContext _localctx = new Reassign_owned_stmtContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_reassign_owned_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Refresh_materialized_view_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Refresh_materialized_view_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_materialized_view_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRefresh_materialized_view_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRefresh_materialized_view_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRefresh_materialized_view_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Refresh_materialized_view_stmtContext refresh_materialized_view_stmt() throws RecognitionException {
		Refresh_materialized_view_stmtContext _localctx = new Refresh_materialized_view_stmtContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_refresh_materialized_view_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2313);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reindex_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Reindex_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindex_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReindex_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReindex_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReindex_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reindex_stmtContext reindex_stmt() throws RecognitionException {
		Reindex_stmtContext _localctx = new Reindex_stmtContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_reindex_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2315);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_savepoint_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Release_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRelease_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRelease_savepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRelease_savepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_savepoint_stmtContext release_savepoint_stmt() throws RecognitionException {
		Release_savepoint_stmtContext _localctx = new Release_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_release_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2317);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reset_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Reset_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reset_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterReset_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitReset_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitReset_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reset_stmtContext reset_stmt() throws RecognitionException {
		Reset_stmtContext _localctx = new Reset_stmtContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_reset_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2319);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Revoke_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRevoke_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRevoke_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRevoke_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_stmtContext revoke_stmt() throws RecognitionException {
		Revoke_stmtContext _localctx = new Revoke_stmtContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_revoke_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_stmtContext rollback_stmt() throws RecognitionException {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_rollback_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2323);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_prepared_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Rollback_prepared_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_prepared_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_prepared_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_prepared_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_prepared_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_prepared_stmtContext rollback_prepared_stmt() throws RecognitionException {
		Rollback_prepared_stmtContext _localctx = new Rollback_prepared_stmtContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_rollback_prepared_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_to_savepoint_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Rollback_to_savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRollback_to_savepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRollback_to_savepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRollback_to_savepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_to_savepoint_stmtContext rollback_to_savepoint_stmt() throws RecognitionException {
		Rollback_to_savepoint_stmtContext _localctx = new Rollback_to_savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_rollback_to_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2327);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Savepoint_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSavepoint_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSavepoint_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSavepoint_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_stmtContext savepoint_stmt() throws RecognitionException {
		Savepoint_stmtContext _localctx = new Savepoint_stmtContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_savepoint_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2329);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_label_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Security_label_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_label_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSecurity_label_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSecurity_label_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSecurity_label_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_label_stmtContext security_label_stmt() throws RecognitionException {
		Security_label_stmtContext _localctx = new Security_label_stmtContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_security_label_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_stmtContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PostgreSQLParser.SELECT, 0); }
		public Selector_clauseContext selector_clause() {
			return getRuleContext(Selector_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Window_clauseContext window_clause() {
			return getRuleContext(Window_clauseContext.class,0);
		}
		public Combine_clauseContext combine_clause() {
			return getRuleContext(Combine_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelect_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelect_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelect_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_stmtContext select_stmt() throws RecognitionException {
		Select_stmtContext _localctx = new Select_stmtContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_select_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2333);
			match(SELECT);
			setState(2334);
			selector_clause();
			setState(2336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2335);
				from_clause();
				}
			}

			setState(2339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2338);
				where_clause();
				}
			}

			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(2341);
				group_by_clause();
				}
			}

			setState(2345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(2344);
				having_clause();
				}
			}

			setState(2348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(2347);
				window_clause();
				}
			}

			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==INTERSECT || _la==UNION) {
				{
				setState(2350);
				combine_clause();
				}
			}

			setState(2354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2353);
				order_by_clause();
				}
				break;
			}
			setState(2357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2356);
				limit_clause();
				}
				break;
			}
			setState(2360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2359);
				offset_clause();
				}
				break;
			}
			setState(2363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(2362);
				fetch_clause();
				}
				break;
			}
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				{
				setState(2365);
				for_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_stmtContext set_stmt() throws RecognitionException {
		Set_stmtContext _localctx = new Set_stmtContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_set_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraints_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_constraints_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraints_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_constraints_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_constraints_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_constraints_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraints_stmtContext set_constraints_stmt() throws RecognitionException {
		Set_constraints_stmtContext _localctx = new Set_constraints_stmtContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_set_constraints_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_role_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_role_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_role_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_role_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_role_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_role_stmtContext set_role_stmt() throws RecognitionException {
		Set_role_stmtContext _localctx = new Set_role_stmtContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_set_role_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_authorization_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_session_authorization_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_authorization_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_session_authorization_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_session_authorization_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_session_authorization_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_authorization_stmtContext set_session_authorization_stmt() throws RecognitionException {
		Set_session_authorization_stmtContext _localctx = new Set_session_authorization_stmtContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_set_session_authorization_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Set_transaction_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSet_transaction_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSet_transaction_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSet_transaction_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_stmtContext set_transaction_stmt() throws RecognitionException {
		Set_transaction_stmtContext _localctx = new Set_transaction_stmtContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_set_transaction_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Show_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterShow_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitShow_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitShow_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_stmtContext show_stmt() throws RecognitionException {
		Show_stmtContext _localctx = new Show_stmtContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_show_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2378);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Truncate_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTruncate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTruncate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTruncate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_stmtContext truncate_stmt() throws RecognitionException {
		Truncate_stmtContext _localctx = new Truncate_stmtContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_truncate_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unlisten_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Unlisten_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUnlisten_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUnlisten_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUnlisten_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unlisten_stmtContext unlisten_stmt() throws RecognitionException {
		Unlisten_stmtContext _localctx = new Unlisten_stmtContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_unlisten_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterUpdate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitUpdate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitUpdate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_update_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vacuum_stmtContext extends ParserRuleContext {
		public Todo_implementContext todo_implement() {
			return getRuleContext(Todo_implementContext.class,0);
		}
		public Vacuum_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuum_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterVacuum_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitVacuum_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitVacuum_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vacuum_stmtContext vacuum_stmt() throws RecognitionException {
		Vacuum_stmtContext _localctx = new Vacuum_stmtContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_vacuum_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2386);
			todo_implement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_stmtContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public Expr_list_listContext expr_list_list() {
			return getRuleContext(Expr_list_listContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public Fetch_clauseContext fetch_clause() {
			return getRuleContext(Fetch_clauseContext.class,0);
		}
		public Values_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterValues_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitValues_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitValues_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_stmtContext values_stmt() throws RecognitionException {
		Values_stmtContext _localctx = new Values_stmtContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_values_stmt);
		try {
			setState(2405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(2388);
				match(VALUES);
				setState(2389);
				expr_list_list();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(2390);
				match(VALUES);
				setState(2391);
				expr_list();
				}
				setState(2394);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2393);
					order_by_clause();
					}
					break;
				}
				setState(2397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2396);
					limit_clause();
					}
					break;
				}
				setState(2400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2399);
					offset_clause();
					}
					break;
				}
				setState(2403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2402);
					fetch_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selector_clauseContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public List<TerminalNode> STAR() { return getTokens(PostgreSQLParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(PostgreSQLParser.STAR, i);
		}
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public List<TerminalNode> AS() { return getTokens(PostgreSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PostgreSQLParser.AS, i);
		}
		public Selector_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selector_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterSelector_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitSelector_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitSelector_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selector_clauseContext selector_clause() throws RecognitionException {
		Selector_clauseContext _localctx = new Selector_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_selector_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				{
				setState(2407);
				match(ALL);
				}
				break;
			case 2:
				{
				{
				setState(2408);
				match(DISTINCT);
				setState(2411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2409);
					match(ON);
					setState(2410);
					expr_list();
					}
				}

				}
				}
				break;
			}
			setState(2439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				setState(2415);
				match(STAR);
				}
				break;
			case 2:
				{
				{
				setState(2416);
				expr(0);
				setState(2421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(2418);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2417);
						match(AS);
						}
					}

					setState(2420);
					name_();
					}
					break;
				}
				setState(2436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2423);
					match(COMMA);
					setState(2432);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STAR:
						{
						setState(2424);
						match(STAR);
						}
						break;
					case WHITESPACE:
					case A_:
					case ABORT:
					case ABS:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADA:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALL:
					case ALLOCATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ARE:
					case ARRAY:
					case ASENSITIVE:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATOMIC:
					case ATTRIBUTE:
					case ATTRIBUTES:
					case AVG:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BERNOULLI:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BIT_LENGTH:
					case BLOB:
					case BOOLEAN:
					case BREADTH:
					case BY:
					case C_:
					case CACHE:
					case CALL:
					case CALLED:
					case CARDINALITY:
					case CASCADE:
					case CASCADED:
					case CASE:
					case CAST:
					case CATALOG:
					case CATALOG_NAME:
					case CEIL:
					case CEILING:
					case CHAIN:
					case CHAR:
					case CHARACTER:
					case CHARACTERISTICS:
					case CHARACTERS:
					case CHARACTER_LENGTH:
					case CHARACTER_SET_CATALOG:
					case CHARACTER_SET_NAME:
					case CHARACTER_SET_SCHEMA:
					case CHAR_LENGTH:
					case CHECKPOINT:
					case CLASS:
					case CLASS_ORIGIN:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COALESCE:
					case COBOL:
					case COLLATION_CATALOG:
					case COLLATION_NAME:
					case COLLATION_SCHEMA:
					case COLLECT:
					case COLUMN_NAME:
					case COMMAND_FUNCTION:
					case COMMAND_FUNCTION_CODE:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case CONDITION:
					case CONDITION_NUMBER:
					case CONNECT:
					case CONNECTION:
					case CONNECTION_NAME:
					case CONSTRAINTS:
					case CONSTRAINT_CATALOG:
					case CONSTRAINT_NAME:
					case CONSTRAINT_SCHEMA:
					case CONSTRUCTOR:
					case CONTAINS:
					case CONTINUE:
					case CONVERSION:
					case CONVERT:
					case COPY:
					case CORR:
					case CORRESPONDING:
					case COUNT:
					case COVAR_POP:
					case COVAR_SAMP:
					case CSV:
					case CUBE:
					case CUME_DIST:
					case CURRENT:
					case CURRENT_DATE:
					case CURRENT_DEFAULT_TRANSFORM_GROUP:
					case CURRENT_PATH:
					case CURRENT_ROLE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
					case CURRENT_USER:
					case CURSOR:
					case CURSOR_NAME:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DATE:
					case DATETIME_INTERVAL_CODE:
					case DATETIME_INTERVAL_PRECISION:
					case DAY:
					case DEALLOCATE:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINED:
					case DEFINER:
					case DEGREE:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DENSE_RANK:
					case DEPTH:
					case DEREF:
					case DERIVED:
					case DESCRIBE:
					case DESCRIPTOR:
					case DETERMINISTIC:
					case DIAGNOSTICS:
					case DICTIONARY:
					case DISCONNECT:
					case DISPATCH:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case DYNAMIC:
					case DYNAMIC_FUNCTION:
					case DYNAMIC_FUNCTION_CODE:
					case EACH:
					case ELEMENT:
					case ENCODING:
					case ENCRYPTED:
					case END:
					case EQUALS:
					case ESCAPE:
					case EVERY:
					case EXCEPTION:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXEC:
					case EXECUTE:
					case EXISTS:
					case EXP:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FALSE:
					case FILTER:
					case FINAL:
					case FIRST:
					case FLOAT:
					case FLOOR:
					case FOLLOWING:
					case FORCE:
					case FORTRAN:
					case FORWARD:
					case FOUND:
					case FREE:
					case FUNCTION:
					case FUSION:
					case G_:
					case GENERAL:
					case GENERATED:
					case GET:
					case GLOBAL:
					case GO:
					case GOTO:
					case GRANTED:
					case GROUPING:
					case HANDLER:
					case HIERARCHY:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IGNORE:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLEMENTATION:
					case IMPLICIT:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDICATOR:
					case INHERITS:
					case INOUT:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTANCE:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERSECTION:
					case INTERVAL:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case KEY_MEMBER:
					case KEY_TYPE:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEFT:
					case LENGTH:
					case LEVEL:
					case LISTEN:
					case LN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCATOR:
					case LOCK:
					case LOCKED:
					case LOWER:
					case M_:
					case MAP:
					case MATCH:
					case MATCHED:
					case MAX:
					case MAXVALUE:
					case MEMBER:
					case MERGE:
					case MESSAGE_LENGTH:
					case MESSAGE_OCTET_LENGTH:
					case MESSAGE_TEXT:
					case METHOD:
					case MIN:
					case MINUTE:
					case MINVALUE:
					case MOD:
					case MODE:
					case MODIFIES:
					case MODULE:
					case MONTH:
					case MORE_:
					case MOVE:
					case MULTISET:
					case MUMPS:
					case NAME:
					case NAMES:
					case NATIONAL:
					case NCHAR:
					case NCLOB:
					case NESTING:
					case NEW:
					case NEXT:
					case NO:
					case NONE:
					case NORMALIZE:
					case NORMALIZED:
					case NOT:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULL:
					case NULLABLE:
					case NULLIF:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case OBJECT:
					case OCTETS:
					case OCTET_LENGTH:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPEN:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDERING:
					case ORDINALITY:
					case OTHERS:
					case OUT:
					case OUTPUT:
					case OVER:
					case OVERLAY:
					case OVERRIDING:
					case OWNER:
					case PAD:
					case PARAMETER:
					case PARAMETER_MODE:
					case PARAMETER_NAME:
					case PARAMETER_ORDINAL_POSITION:
					case PARAMETER_SPECIFIC_CATALOG:
					case PARAMETER_SPECIFIC_NAME:
					case PARAMETER_SPECIFIC_SCHEMA:
					case PARTIAL:
					case PARTITION:
					case PASCAL:
					case PASSWORD:
					case PATH:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case PERCENT_RANK:
					case PLI:
					case POSITION:
					case POWER:
					case PRECEDING:
					case PRECISION:
					case PREPARE:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PUBLIC:
					case QUOTE:
					case RANGE:
					case RANK:
					case READ:
					case READS:
					case REAL:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REGR_AVGX:
					case REGR_AVGY:
					case REGR_COUNT:
					case REGR_INTERCEPT:
					case REGR_SLOPE:
					case REGR_SXX:
					case REGR_SXY:
					case REGR_SYY:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RESULT:
					case RETURN:
					case RETURNED_CARDINALITY:
					case RETURNED_LENGTH:
					case RETURNED_OCTET_LENGTH:
					case RETURNED_SQLSTATE:
					case RETURNS:
					case REVOKE:
					case RIGHT:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINE_CATALOG:
					case ROUTINE_NAME:
					case ROUTINE_SCHEMA:
					case ROW:
					case ROWS:
					case ROW_COUNT:
					case ROW_NUMBER:
					case RULE:
					case SAVEPOINT:
					case SCALE:
					case SCHEMA:
					case SCHEMA_NAME:
					case SCOPE:
					case SCOPE_CATALOG:
					case SCOPE_NAME:
					case SCOPE_SCHEMA:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECTION:
					case SECURITY:
					case SELF:
					case SENSITIVE:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER_NAME:
					case SESSION:
					case SET:
					case SETOF:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SIZE:
					case SMALLINT:
					case SOURCE:
					case SPACE:
					case SPECIFIC:
					case SPECIFICTYPE:
					case SPECIFIC_NAME:
					case SQL:
					case SQLCODE:
					case SQLERROR:
					case SQLEXCEPTION:
					case SQLSTATE:
					case SQLWARNING:
					case SQRT:
					case STABLE:
					case START:
					case STATE:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STRICT:
					case STRUCTURE:
					case STYLE:
					case SUBCLASS_ORIGIN:
					case SUBMULTISET:
					case SUBSTRING:
					case SUM:
					case SYSID:
					case SYSTEM:
					case SYSTEM_USER:
					case TABLESPACE:
					case TABLE_NAME:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TIES:
					case TIME:
					case TIME_TZ:
					case TIMESTAMP:
					case TIMESTAMP_TZ:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TOP_LEVEL_COUNT:
					case TRANSACTION:
					case TRANSACTIONS_COMMITTED:
					case TRANSACTIONS_ROLLED_BACK:
					case TRANSACTION_ACTIVE:
					case TRANSFORM:
					case TRANSFORMS:
					case TRANSLATE:
					case TRANSLATION:
					case TREAT:
					case TRIGGER:
					case TRIGGER_CATALOG:
					case TRIGGER_NAME:
					case TRIGGER_SCHEMA:
					case TRIM:
					case TRUE:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case UESCAPE:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNDER:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNNAMED:
					case UNNEST:
					case UNTIL:
					case UPDATE:
					case UPPER:
					case USAGE:
					case USER_DEFINED_TYPE_CATALOG:
					case USER_DEFINED_TYPE_CODE:
					case USER_DEFINED_TYPE_NAME:
					case USER_DEFINED_TYPE_SCHEMA:
					case VACUUM:
					case VALID:
					case VALIDATOR:
					case VALUE:
					case VALUES:
					case VARCHAR:
					case VARYING:
					case VAR_POP:
					case VAR_SAMP:
					case VIEW:
					case VOLATILE:
					case WHENEVER:
					case WIDTH_BUCKET:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRITE:
					case YEAR:
					case ZONE:
					case ABSTIME:
					case BOOL:
					case BOX:
					case FLOAT4:
					case FLOAT8:
					case INT2:
					case INT4:
					case INT8:
					case JSON:
					case JSONB:
					case LINE:
					case POINT:
					case RELTIME:
					case TEXT:
					case DOLLAR:
					case DOLLAR_DOLLAR:
					case OPEN_PAREN:
					case BIT_STRING:
					case REGEX_STRING:
					case NUMERIC_LITERAL:
					case INTEGER_LITERAL:
					case HEX_INTEGER_LITERAL:
					case SINGLEQ_STRING_LITERAL:
					case DOUBLEQ_STRING_LITERAL:
					case IDENTIFIER:
					case AT_SIGN:
					case BANG_BANG:
					case MINUS:
					case PLUS:
					case QMARK_HYPHEN:
					case TIL:
						{
						setState(2425);
						expr(0);
						setState(2430);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
						case 1:
							{
							setState(2427);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AS) {
								{
								setState(2426);
								match(AS);
								}
							}

							setState(2429);
							name_();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2438);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_from_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			match(FROM);
			setState(2442);
			from_item(0);
			setState(2447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2443);
				match(COMMA);
				setState(2444);
				from_item(0);
				}
				}
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2450);
			match(WHERE);
			setState(2451);
			predicate(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_group_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2453);
			match(GROUP);
			setState(2454);
			match(BY);
			setState(2455);
			grouping_elem();
			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2456);
				match(COMMA);
				setState(2457);
				grouping_elem();
				}
				}
				setState(2462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elemContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public Grouping_elem_listContext grouping_elem_list() {
			return getRuleContext(Grouping_elem_listContext.class,0);
		}
		public Grouping_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_elemContext grouping_elem() throws RecognitionException {
		Grouping_elemContext _localctx = new Grouping_elemContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_grouping_elem);
		int _la;
		try {
			setState(2488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2463);
				match(OPEN_PAREN);
				setState(2464);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2465);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2466);
				expr_list();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2467);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2468);
				match(OPEN_PAREN);
				setState(2471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					setState(2469);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2470);
					expr_list();
					}
					break;
				}
				setState(2480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2473);
					match(COMMA);
					setState(2476);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
					case 1:
						{
						setState(2474);
						expr(0);
						}
						break;
					case 2:
						{
						setState(2475);
						expr_list();
						}
						break;
					}
					}
					}
					setState(2482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2483);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2485);
				match(GROUPING);
				setState(2486);
				match(SETS);
				setState(2487);
				grouping_elem_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elem_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Grouping_elemContext> grouping_elem() {
			return getRuleContexts(Grouping_elemContext.class);
		}
		public Grouping_elemContext grouping_elem(int i) {
			return getRuleContext(Grouping_elemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Grouping_elem_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_elem_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterGrouping_elem_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitGrouping_elem_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitGrouping_elem_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_elem_listContext grouping_elem_list() throws RecognitionException {
		Grouping_elem_listContext _localctx = new Grouping_elem_listContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_grouping_elem_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2490);
			match(OPEN_PAREN);
			setState(2491);
			grouping_elem();
			setState(2496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2492);
				match(COMMA);
				setState(2493);
				grouping_elem();
				}
				}
				setState(2498);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2499);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PostgreSQLParser.HAVING, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_having_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(HAVING);
			setState(2502);
			predicate(0);
			setState(2507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2503);
				match(COMMA);
				setState(2504);
				predicate(0);
				}
				}
				setState(2509);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public FrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameContext frame() throws RecognitionException {
		FrameContext _localctx = new FrameContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_frame);
		try {
			setState(2520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2510);
				match(UNBOUNDED);
				setState(2511);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2512);
				match(INTEGER_LITERAL);
				setState(2513);
				match(PRECEDING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2514);
				match(CURRENT);
				setState(2515);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2516);
				match(INTEGER_LITERAL);
				setState(2517);
				match(FOLLOWING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2518);
				match(UNBOUNDED);
				setState(2519);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_startContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_start(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_start(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_startContext frame_start() throws RecognitionException {
		Frame_startContext _localctx = new Frame_startContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_frame_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_endContext extends ParserRuleContext {
		public FrameContext frame() {
			return getRuleContext(FrameContext.class,0);
		}
		public Frame_endContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_end(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_end(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_end(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_endContext frame_end() throws RecognitionException {
		Frame_endContext _localctx = new Frame_endContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_frame_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2524);
			frame();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Frame_clauseContext extends ParserRuleContext {
		public Frame_startContext frame_start() {
			return getRuleContext(Frame_startContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public Frame_endContext frame_end() {
			return getRuleContext(Frame_endContext.class,0);
		}
		public Frame_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frame_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrame_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrame_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrame_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Frame_clauseContext frame_clause() throws RecognitionException {
		Frame_clauseContext _localctx = new Frame_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_frame_clause);
		int _la;
		try {
			setState(2534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2526);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2527);
				frame_start();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2528);
				_la = _input.LA(1);
				if ( !(_la==RANGE || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2529);
				match(BETWEEN);
				setState(2530);
				frame_start();
				setState(2531);
				match(AND);
				setState(2532);
				frame_end();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_definitionContext extends ParserRuleContext {
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Window_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_definitionContext window_definition() throws RecognitionException {
		Window_definitionContext _localctx = new Window_definitionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_window_definition);
		int _la;
		try {
			setState(2548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2536);
				window_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2537);
				match(PARTITION);
				setState(2538);
				match(BY);
				setState(2539);
				expr(0);
				setState(2544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2540);
					match(COMMA);
					setState(2541);
					expr(0);
					}
					}
					setState(2546);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2547);
				order_by_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_clauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(PostgreSQLParser.WINDOW, 0); }
		public Window_nameContext window_name() {
			return getRuleContext(Window_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Window_definitionContext window_definition() {
			return getRuleContext(Window_definitionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Window_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_clauseContext window_clause() throws RecognitionException {
		Window_clauseContext _localctx = new Window_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_window_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			match(WINDOW);
			setState(2551);
			window_name();
			setState(2552);
			match(AS);
			setState(2553);
			match(OPEN_PAREN);
			setState(2554);
			window_definition();
			setState(2555);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Combine_clauseContext extends ParserRuleContext {
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PostgreSQLParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PostgreSQLParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(PostgreSQLParser.EXCEPT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public Combine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_combine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCombine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCombine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCombine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Combine_clauseContext combine_clause() throws RecognitionException {
		Combine_clauseContext _localctx = new Combine_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_combine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			_la = _input.LA(1);
			if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2558);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2561);
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public List<Order_by_itemContext> order_by_item() {
			return getRuleContexts(Order_by_itemContext.class);
		}
		public Order_by_itemContext order_by_item(int i) {
			return getRuleContext(Order_by_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_order_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			match(ORDER);
			setState(2564);
			match(BY);
			setState(2565);
			order_by_item();
			setState(2570);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2566);
					match(COMMA);
					setState(2567);
					order_by_item();
					}
					} 
				}
				setState(2572);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_itemContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode ASC() { return getToken(PostgreSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PostgreSQLParser.DESC, 0); }
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public List<TerminalNode> NULLS() { return getTokens(PostgreSQLParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PostgreSQLParser.NULLS, i);
		}
		public List<TerminalNode> FIRST() { return getTokens(PostgreSQLParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PostgreSQLParser.FIRST, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PostgreSQLParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PostgreSQLParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOrder_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOrder_by_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOrder_by_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_itemContext order_by_item() throws RecognitionException {
		Order_by_itemContext _localctx = new Order_by_itemContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_order_by_item);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2573);
				expr(0);
				}
				break;
			case 2:
				{
				setState(2574);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			}
			setState(2581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2577);
				match(ASC);
				}
				break;
			case 2:
				{
				setState(2578);
				match(DESC);
				}
				break;
			case 3:
				{
				setState(2579);
				match(USING);
				setState(2580);
				expr(0);
				}
				break;
			}
			setState(2594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				{
				setState(2583);
				match(NULLS);
				setState(2584);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(2591);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2586);
						match(COMMA);
						{
						setState(2587);
						match(NULLS);
						setState(2588);
						_la = _input.LA(1);
						if ( !(_la==FIRST || _la==LAST) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						} 
					}
					setState(2593);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(PostgreSQLParser.LIMIT, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_limit_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			match(LIMIT);
			setState(2597);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==INTEGER_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(PostgreSQLParser.OFFSET, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_offset_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2599);
			match(OFFSET);
			setState(2600);
			match(INTEGER_LITERAL);
			setState(2602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2601);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_clauseContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(PostgreSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public Fetch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFetch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFetch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFetch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_clauseContext fetch_clause() throws RecognitionException {
		Fetch_clauseContext _localctx = new Fetch_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_fetch_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2604);
			match(FETCH);
			setState(2605);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGER_LITERAL) {
				{
				setState(2606);
				match(INTEGER_LITERAL);
				}
			}

			setState(2609);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2610);
			match(ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PostgreSQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public List<Table_name_Context> table_name_() {
			return getRuleContexts(Table_name_Context.class);
		}
		public Table_name_Context table_name_(int i) {
			return getRuleContext(Table_name_Context.class,i);
		}
		public List<TerminalNode> NOWAIT() { return getTokens(PostgreSQLParser.NOWAIT); }
		public TerminalNode NOWAIT(int i) {
			return getToken(PostgreSQLParser.NOWAIT, i);
		}
		public List<TerminalNode> SKIP_() { return getTokens(PostgreSQLParser.SKIP_); }
		public TerminalNode SKIP_(int i) {
			return getToken(PostgreSQLParser.SKIP_, i);
		}
		public List<TerminalNode> LOCKED() { return getTokens(PostgreSQLParser.LOCKED); }
		public TerminalNode LOCKED(int i) {
			return getToken(PostgreSQLParser.LOCKED, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_for_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(FOR);
			setState(2620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(2613);
				match(UPDATE);
				}
				break;
			case NO:
				{
				setState(2614);
				match(NO);
				setState(2615);
				match(KEY);
				setState(2616);
				match(UPDATE);
				}
				break;
			case SHARE:
				{
				setState(2617);
				match(SHARE);
				}
				break;
			case KEY:
				{
				setState(2618);
				match(KEY);
				setState(2619);
				match(SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2622);
				match(OF);
				setState(2623);
				table_name_();
				setState(2628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2624);
					match(COMMA);
					setState(2625);
					table_name_();
					}
					}
					setState(2630);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2636);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NOWAIT:
						{
						setState(2633);
						match(NOWAIT);
						}
						break;
					case SKIP_:
						{
						setState(2634);
						match(SKIP_);
						setState(2635);
						match(LOCKED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public Token op;
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(PostgreSQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(PostgreSQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(PostgreSQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(PostgreSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode HEX_INTEGER_LITERAL() { return getToken(PostgreSQLParser.HEX_INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC_LITERAL() { return getToken(PostgreSQLParser.NUMERIC_LITERAL, 0); }
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(PostgreSQLParser.BIT_STRING, 0); }
		public TerminalNode REGEX_STRING() { return getToken(PostgreSQLParser.REGEX_STRING, 0); }
		public List<TerminalNode> DOLLAR_DOLLAR() { return getTokens(PostgreSQLParser.DOLLAR_DOLLAR); }
		public TerminalNode DOLLAR_DOLLAR(int i) {
			return getToken(PostgreSQLParser.DOLLAR_DOLLAR, i);
		}
		public List<TerminalNode> DOLLAR() { return getTokens(PostgreSQLParser.DOLLAR); }
		public TerminalNode DOLLAR(int i) {
			return getToken(PostgreSQLParser.DOLLAR, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Bool_exprContext bool_expr() {
			return getRuleContext(Bool_exprContext.class,0);
		}
		public Values_stmtContext values_stmt() {
			return getRuleContext(Values_stmtContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Type_literalContext type_literal() {
			return getRuleContext(Type_literalContext.class,0);
		}
		public TerminalNode BANG_BANG() { return getToken(PostgreSQLParser.BANG_BANG, 0); }
		public TerminalNode AT_SIGN() { return getToken(PostgreSQLParser.AT_SIGN, 0); }
		public TerminalNode PLUS() { return getToken(PostgreSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(PostgreSQLParser.MINUS, 0); }
		public TerminalNode TIL() { return getToken(PostgreSQLParser.TIL, 0); }
		public TerminalNode QMARK_HYPHEN() { return getToken(PostgreSQLParser.QMARK_HYPHEN, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PostgreSQLParser.CAST, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode CASE() { return getToken(PostgreSQLParser.CASE, 0); }
		public TerminalNode WHEN() { return getToken(PostgreSQLParser.WHEN, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PostgreSQLParser.THEN, 0); }
		public TerminalNode END() { return getToken(PostgreSQLParser.END, 0); }
		public TerminalNode ELSE() { return getToken(PostgreSQLParser.ELSE, 0); }
		public AggregateContext aggregate() {
			return getRuleContext(AggregateContext.class,0);
		}
		public Array_cons_exprContext array_cons_expr() {
			return getRuleContext(Array_cons_exprContext.class,0);
		}
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode CARET() { return getToken(PostgreSQLParser.CARET, 0); }
		public TerminalNode PIPE_SLASH() { return getToken(PostgreSQLParser.PIPE_SLASH, 0); }
		public TerminalNode PIPE_PIPE_SLASH() { return getToken(PostgreSQLParser.PIPE_PIPE_SLASH, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode SLASH() { return getToken(PostgreSQLParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(PostgreSQLParser.PERCENT, 0); }
		public TerminalNode AMP() { return getToken(PostgreSQLParser.AMP, 0); }
		public TerminalNode PIPE() { return getToken(PostgreSQLParser.PIPE, 0); }
		public TerminalNode HASH() { return getToken(PostgreSQLParser.HASH, 0); }
		public TerminalNode LT_LT() { return getToken(PostgreSQLParser.LT_LT, 0); }
		public TerminalNode LT_LT_EQ() { return getToken(PostgreSQLParser.LT_LT_EQ, 0); }
		public TerminalNode GT_GT() { return getToken(PostgreSQLParser.GT_GT, 0); }
		public TerminalNode AT_AT() { return getToken(PostgreSQLParser.AT_AT, 0); }
		public TerminalNode LT_HYPHEN_GT() { return getToken(PostgreSQLParser.LT_HYPHEN_GT, 0); }
		public TerminalNode AT_GT() { return getToken(PostgreSQLParser.AT_GT, 0); }
		public TerminalNode LT_AT() { return getToken(PostgreSQLParser.LT_AT, 0); }
		public TerminalNode TIL_EQ() { return getToken(PostgreSQLParser.TIL_EQ, 0); }
		public TerminalNode TIL_STAR() { return getToken(PostgreSQLParser.TIL_STAR, 0); }
		public TerminalNode TIL_TIL() { return getToken(PostgreSQLParser.TIL_TIL, 0); }
		public TerminalNode TIL_LT_TIL() { return getToken(PostgreSQLParser.TIL_LT_TIL, 0); }
		public TerminalNode TIL_GT_TIL() { return getToken(PostgreSQLParser.TIL_GT_TIL, 0); }
		public TerminalNode TIL_LTE_TIL() { return getToken(PostgreSQLParser.TIL_LTE_TIL, 0); }
		public TerminalNode TIL_GTE_TIL() { return getToken(PostgreSQLParser.TIL_GTE_TIL, 0); }
		public TerminalNode LT_QMARK_GT() { return getToken(PostgreSQLParser.LT_QMARK_GT, 0); }
		public TerminalNode HYPHEN_GT() { return getToken(PostgreSQLParser.HYPHEN_GT, 0); }
		public TerminalNode HYPHEN_GT_GT() { return getToken(PostgreSQLParser.HYPHEN_GT_GT, 0); }
		public TerminalNode HASH_HASH() { return getToken(PostgreSQLParser.HASH_HASH, 0); }
		public TerminalNode HASH_GT() { return getToken(PostgreSQLParser.HASH_GT, 0); }
		public TerminalNode HASH_GT_GT() { return getToken(PostgreSQLParser.HASH_GT_GT, 0); }
		public TerminalNode QMARK() { return getToken(PostgreSQLParser.QMARK, 0); }
		public TerminalNode QMARK_PIPE() { return getToken(PostgreSQLParser.QMARK_PIPE, 0); }
		public TerminalNode QMARK_AMP() { return getToken(PostgreSQLParser.QMARK_AMP, 0); }
		public TerminalNode QMARK_HASH() { return getToken(PostgreSQLParser.QMARK_HASH, 0); }
		public TerminalNode LT_CARET() { return getToken(PostgreSQLParser.LT_CARET, 0); }
		public TerminalNode AMP_LT() { return getToken(PostgreSQLParser.AMP_LT, 0); }
		public TerminalNode HYPHEN_PIPE_HYPHEN() { return getToken(PostgreSQLParser.HYPHEN_PIPE_HYPHEN, 0); }
		public TerminalNode HASH_EQ() { return getToken(PostgreSQLParser.HASH_EQ, 0); }
		public TerminalNode AMP_AMP() { return getToken(PostgreSQLParser.AMP_AMP, 0); }
		public TerminalNode PIPE_PIPE() { return getToken(PostgreSQLParser.PIPE_PIPE, 0); }
		public TerminalNode EQUAL_GT() { return getToken(PostgreSQLParser.EQUAL_GT, 0); }
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public TerminalNode LIKE() { return getToken(PostgreSQLParser.LIKE, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode LT() { return getToken(PostgreSQLParser.LT, 0); }
		public TerminalNode GT() { return getToken(PostgreSQLParser.GT, 0); }
		public TerminalNode EQUAL() { return getToken(PostgreSQLParser.EQUAL, 0); }
		public TerminalNode LTE() { return getToken(PostgreSQLParser.LTE, 0); }
		public TerminalNode GTE() { return getToken(PostgreSQLParser.GTE, 0); }
		public TerminalNode LT_GT() { return getToken(PostgreSQLParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(PostgreSQLParser.BANG_EQUAL, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public TerminalNode BANG() { return getToken(PostgreSQLParser.BANG, 0); }
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(PostgreSQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(PostgreSQLParser.NOTNULL, 0); }
		public TerminalNode COLON() { return getToken(PostgreSQLParser.COLON, 0); }
		public TerminalNode COLON_COLON() { return getToken(PostgreSQLParser.COLON_COLON, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 400;
		enterRecursionRule(_localctx, 400, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2642);
				match(NULL);
				}
				break;
			case 2:
				{
				setState(2643);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				{
				setState(2644);
				match(CURRENT_ROLE);
				}
				break;
			case 4:
				{
				setState(2645);
				match(CURRENT_TIME);
				}
				break;
			case 5:
				{
				setState(2646);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				{
				setState(2647);
				match(CURRENT_USER);
				}
				break;
			case 7:
				{
				setState(2648);
				match(INTEGER_LITERAL);
				}
				break;
			case 8:
				{
				setState(2649);
				match(HEX_INTEGER_LITERAL);
				}
				break;
			case 9:
				{
				setState(2650);
				match(NUMERIC_LITERAL);
				}
				break;
			case 10:
				{
				setState(2651);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 11:
				{
				setState(2652);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			case 12:
				{
				setState(2653);
				match(BIT_STRING);
				}
				break;
			case 13:
				{
				setState(2654);
				match(REGEX_STRING);
				}
				break;
			case 14:
				{
				setState(2655);
				match(DOLLAR_DOLLAR);
				setState(2657); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2656);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==DOLLAR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2659); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,283,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2661);
				match(DOLLAR_DOLLAR);
				}
				break;
			case 15:
				{
				setState(2662);
				match(DOLLAR);
				setState(2663);
				identifier(0);
				setState(2665); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2664);
					_la = _input.LA(1);
					if ( _la <= 0 || (_la==DOLLAR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2667); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << BLOCK_COMMENT) | (1L << LINE_COMMENT) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALIAS) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYSE) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << ASYMMETRIC) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AUTHORIZATION) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BINARY) | (1L << BIT) | (1L << BITVAR) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECK - 64)) | (1L << (CHECKED - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATE - 64)) | (1L << (COLLATION - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPLETION - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONFIGURATION - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CREATE - 64)) | (1L << (CREATEDB - 64)) | (1L << (CREATEUSER - 64)) | (1L << (CROSS - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_ROLE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESC - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DESTROY - 128)) | (1L << (DESTRUCTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DISTINCT - 128)) | (1L << (DO - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (END_EXEC - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPT - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTING - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FALSE - 192)) | (1L << (FETCH - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOR - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FREEZE - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HAVING - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOST - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (ILIKE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (IN - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INFIX - 256)) | (1L << (INHERITS - 256)) | (1L << (INITIALIZE - 256)) | (1L << (INITIALLY - 256)) | (1L << (INNER - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECT - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INTO - 256)) | (1L << (INVOKER - 256)) | (1L << (IS - 256)) | (1L << (ISNULL - 256)) | (1L << (ISOLATION - 256)) | (1L << (ITERATE - 256)) | (1L << (JOIN - 256)) | (1L << (K_ - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANCOMPILER - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LATERAL - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCALTIME - 256)) | (1L << (LOCALTIMESTAMP - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MAPPING - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODIFY - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NATURAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NOCREATEDB - 320)) | (1L << (NOCREATEUSER - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOT - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOTNULL - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OFFSET - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (ON - 320)) | (1L << (ONLY - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATION - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (OR - 320)) | (1L << (ORDER - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTER - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (OVERLAPS - 384)) | (1L << (OVERLAY - 384)) | (1L << (OVERRIDING - 384)) | (1L << (OWNER - 384)) | (1L << (PAD - 384)) | (1L << (PARAMETER - 384)) | (1L << (PARAMETERS - 384)) | (1L << (PARAMETER_MODE - 384)) | (1L << (PARAMETER_NAME - 384)) | (1L << (PARAMETER_ORDINAL_POSITION - 384)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 384)) | (1L << (PARAMETER_SPECIFIC_NAME - 384)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 384)) | (1L << (PARSER - 384)) | (1L << (PARTIAL - 384)) | (1L << (PARTITION - 384)) | (1L << (PASCAL - 384)) | (1L << (PASSWORD - 384)) | (1L << (PATH - 384)) | (1L << (PERCENTILE_CONT - 384)) | (1L << (PERCENTILE_DISC - 384)) | (1L << (PERCENT_RANK - 384)) | (1L << (PLACING - 384)) | (1L << (PLI - 384)) | (1L << (POSITION - 384)) | (1L << (POSTFIX - 384)) | (1L << (POWER - 384)) | (1L << (PRECEDING - 384)) | (1L << (PRECISION - 384)) | (1L << (PREFIX - 384)) | (1L << (PREORDER - 384)) | (1L << (PREPARE - 384)) | (1L << (PRESERVE - 384)) | (1L << (PRIMARY - 384)) | (1L << (PRIOR - 384)) | (1L << (PRIVILEGES - 384)) | (1L << (PROCEDURAL - 384)) | (1L << (PROCEDURE - 384)) | (1L << (PUBLIC - 384)) | (1L << (PUBLICATION - 384)) | (1L << (QUOTE - 384)) | (1L << (RANGE - 384)) | (1L << (RANK - 384)) | (1L << (READ - 384)) | (1L << (READS - 384)) | (1L << (REAL - 384)) | (1L << (RECHECK - 384)) | (1L << (RECURSIVE - 384)) | (1L << (REF - 384)) | (1L << (REFERENCES - 384)) | (1L << (REFERENCING - 384)) | (1L << (REGR_AVGX - 384)) | (1L << (REGR_AVGY - 384)) | (1L << (REGR_COUNT - 384)) | (1L << (REGR_INTERCEPT - 384)) | (1L << (REGR_R2 - 384)) | (1L << (REGR_SLOPE - 384)) | (1L << (REGR_SXX - 384)) | (1L << (REGR_SXY - 384)) | (1L << (REGR_SYY - 384)) | (1L << (REINDEX - 384)) | (1L << (RELATIVE - 384)) | (1L << (RELEASE - 384)) | (1L << (RENAME - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (REPEATABLE - 448)) | (1L << (REPLACE - 448)) | (1L << (RESET - 448)) | (1L << (RESTART - 448)) | (1L << (RESTRICT - 448)) | (1L << (RESULT - 448)) | (1L << (RETURN - 448)) | (1L << (RETURNED_CARDINALITY - 448)) | (1L << (RETURNED_LENGTH - 448)) | (1L << (RETURNED_OCTET_LENGTH - 448)) | (1L << (RETURNED_SQLSTATE - 448)) | (1L << (RETURNS - 448)) | (1L << (REVOKE - 448)) | (1L << (RIGHT - 448)) | (1L << (ROLE - 448)) | (1L << (ROLLBACK - 448)) | (1L << (ROLLUP - 448)) | (1L << (ROUTINE - 448)) | (1L << (ROUTINE_CATALOG - 448)) | (1L << (ROUTINE_NAME - 448)) | (1L << (ROUTINE_SCHEMA - 448)) | (1L << (ROW - 448)) | (1L << (ROWS - 448)) | (1L << (ROW_COUNT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (RULE - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (SCALE - 448)) | (1L << (SCHEMA - 448)) | (1L << (SCHEMA_NAME - 448)) | (1L << (SCOPE - 448)) | (1L << (SCOPE_CATALOG - 448)) | (1L << (SCOPE_NAME - 448)) | (1L << (SCOPE_SCHEMA - 448)) | (1L << (SCROLL - 448)) | (1L << (SEARCH - 448)) | (1L << (SECOND - 448)) | (1L << (SECTION - 448)) | (1L << (SECURITY - 448)) | (1L << (SELECT - 448)) | (1L << (SELF - 448)) | (1L << (SENSITIVE - 448)) | (1L << (SEQUENCE - 448)) | (1L << (SERIALIZABLE - 448)) | (1L << (SERVER_NAME - 448)) | (1L << (SESSION - 448)) | (1L << (SESSION_USER - 448)) | (1L << (SET - 448)) | (1L << (SETOF - 448)) | (1L << (SETS - 448)) | (1L << (SHARE - 448)) | (1L << (SHOW - 448)) | (1L << (SIMILAR - 448)) | (1L << (SIMPLE - 448)) | (1L << (SIZE - 448)) | (1L << (SKIP_ - 448)) | (1L << (SMALLINT - 448)) | (1L << (SOME - 448)) | (1L << (SOURCE - 448)) | (1L << (SPACE - 448)) | (1L << (SPECIFIC - 448)) | (1L << (SPECIFICTYPE - 448)) | (1L << (SPECIFIC_NAME - 448)) | (1L << (SQL - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (SQLCODE - 512)) | (1L << (SQLERROR - 512)) | (1L << (SQLEXCEPTION - 512)) | (1L << (SQLSTATE - 512)) | (1L << (SQLWARNING - 512)) | (1L << (SQRT - 512)) | (1L << (STABLE - 512)) | (1L << (START - 512)) | (1L << (STATE - 512)) | (1L << (STATEMENT - 512)) | (1L << (STATIC - 512)) | (1L << (STATISTICS - 512)) | (1L << (STDDEV_POP - 512)) | (1L << (STDDEV_SAMP - 512)) | (1L << (STDIN - 512)) | (1L << (STDOUT - 512)) | (1L << (STORAGE - 512)) | (1L << (STRICT - 512)) | (1L << (STRUCTURE - 512)) | (1L << (STYLE - 512)) | (1L << (SUBCLASS_ORIGIN - 512)) | (1L << (SUBSCRIPTION - 512)) | (1L << (SUBLIST - 512)) | (1L << (SUBMULTISET - 512)) | (1L << (SUBSTRING - 512)) | (1L << (SUM - 512)) | (1L << (SYMMETRIC - 512)) | (1L << (SYSID - 512)) | (1L << (SYSTEM - 512)) | (1L << (SYSTEM_USER - 512)) | (1L << (TABLE - 512)) | (1L << (TABLESAMPLE - 512)) | (1L << (TABLESPACE - 512)) | (1L << (TABLE_NAME - 512)) | (1L << (TEMP - 512)) | (1L << (TEMPLATE - 512)) | (1L << (TEMPORARY - 512)) | (1L << (TERMINATE - 512)) | (1L << (THAN - 512)) | (1L << (THEN - 512)) | (1L << (TIES - 512)) | (1L << (TIME - 512)) | (1L << (TIME_TZ - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (TIMESTAMP_TZ - 512)) | (1L << (TIMEZONE_HOUR - 512)) | (1L << (TIMEZONE_MINUTE - 512)) | (1L << (TO - 512)) | (1L << (TOAST - 512)) | (1L << (TOP_LEVEL_COUNT - 512)) | (1L << (TRAILING - 512)) | (1L << (TRANSACTION - 512)) | (1L << (TRANSACTIONS_COMMITTED - 512)) | (1L << (TRANSACTIONS_ROLLED_BACK - 512)) | (1L << (TRANSACTION_ACTIVE - 512)) | (1L << (TRANSFORM - 512)) | (1L << (TRANSFORMS - 512)) | (1L << (TRANSLATE - 512)) | (1L << (TRANSLATION - 512)) | (1L << (TREAT - 512)) | (1L << (TRIGGER - 512)) | (1L << (TRIGGER_CATALOG - 512)) | (1L << (TRIGGER_NAME - 512)) | (1L << (TRIGGER_SCHEMA - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (TRIM - 576)) | (1L << (TRUE - 576)) | (1L << (TRUNCATE - 576)) | (1L << (TRUSTED - 576)) | (1L << (TYPE - 576)) | (1L << (UESCAPE - 576)) | (1L << (UNBOUNDED - 576)) | (1L << (UNCOMMITTED - 576)) | (1L << (UNDER - 576)) | (1L << (UNENCRYPTED - 576)) | (1L << (UNION - 576)) | (1L << (UNIQUE - 576)) | (1L << (UNKNOWN - 576)) | (1L << (UNLISTEN - 576)) | (1L << (UNNAMED - 576)) | (1L << (UNNEST - 576)) | (1L << (UNTIL - 576)) | (1L << (UPDATE - 576)) | (1L << (UPPER - 576)) | (1L << (USAGE - 576)) | (1L << (USER - 576)) | (1L << (USER_DEFINED_TYPE_CATALOG - 576)) | (1L << (USER_DEFINED_TYPE_CODE - 576)) | (1L << (USER_DEFINED_TYPE_NAME - 576)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 576)) | (1L << (USING - 576)) | (1L << (VACUUM - 576)) | (1L << (VALID - 576)) | (1L << (VALIDATOR - 576)) | (1L << (VALUE - 576)) | (1L << (VALUES - 576)) | (1L << (VARCHAR - 576)) | (1L << (VARIABLE - 576)) | (1L << (VARIADIC - 576)) | (1L << (VARYING - 576)) | (1L << (VAR_POP - 576)) | (1L << (VAR_SAMP - 576)) | (1L << (VERBOSE - 576)) | (1L << (VIEW - 576)) | (1L << (VOLATILE - 576)) | (1L << (WHEN - 576)) | (1L << (WHENEVER - 576)) | (1L << (WHERE - 576)) | (1L << (WIDTH_BUCKET - 576)) | (1L << (WINDOW - 576)) | (1L << (WITH - 576)) | (1L << (WITHIN - 576)) | (1L << (WITHOUT - 576)) | (1L << (WORK - 576)) | (1L << (WRITE - 576)) | (1L << (YEAR - 576)) | (1L << (ZONE - 576)) | (1L << (SUPERUSER - 576)) | (1L << (NOSUPERUSER - 576)) | (1L << (CREATEROLE - 576)) | (1L << (NOCREATEROLE - 576)) | (1L << (INHERIT - 576)) | (1L << (NOINHERIT - 576)) | (1L << (LOGIN - 576)) | (1L << (NOLOGIN - 576)) | (1L << (REPLICATION - 576)) | (1L << (NOREPLICATION - 576)) | (1L << (BYPASSRLS - 576)) | (1L << (NOBYPASSRLS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (SFUNC - 640)) | (1L << (STYPE - 640)) | (1L << (SSPACE - 640)) | (1L << (FINALFUNC - 640)) | (1L << (FINALFUNC_EXTRA - 640)) | (1L << (COMBINEFUNC - 640)) | (1L << (SERIALFUNC - 640)) | (1L << (DESERIALFUNC - 640)) | (1L << (INITCOND - 640)) | (1L << (MSFUNC - 640)) | (1L << (MINVFUNC - 640)) | (1L << (MSTYPE - 640)) | (1L << (MSSPACE - 640)) | (1L << (MFINALFUNC - 640)) | (1L << (MFINALFUNC_EXTRA - 640)) | (1L << (MINITCOND - 640)) | (1L << (SORTOP - 640)) | (1L << (PARALLEL - 640)) | (1L << (HYPOTHETICAL - 640)) | (1L << (SAFE - 640)) | (1L << (RESTRICTED - 640)) | (1L << (UNSAFE - 640)) | (1L << (BASETYPE - 640)) | (1L << (IF - 640)) | (1L << (LOCALE - 640)) | (1L << (LC_COLLATE - 640)) | (1L << (LC_CTYPE - 640)) | (1L << (PROVIDER - 640)) | (1L << (VERSION - 640)) | (1L << (ALLOW_CONNECTIONS - 640)) | (1L << (IS_TEMPLATE - 640)) | (1L << (EVENT - 640)) | (1L << (WRAPPER - 640)) | (1L << (SERVER - 640)) | (1L << (BTREE - 640)) | (1L << (HASH_ - 640)) | (1L << (GIST - 640)) | (1L << (SPGIST - 640)) | (1L << (GIN - 640)) | (1L << (BRIN - 640)) | (1L << (CONCURRENTLY - 640)) | (1L << (INLINE - 640)) | (1L << (MATERIALIZED - 640)) | (1L << (LEFTARG - 640)) | (1L << (RIGHTARG - 640)) | (1L << (COMMUTATOR - 640)) | (1L << (NEGATOR - 640)) | (1L << (HASHES - 640)) | (1L << (MERGES - 640)) | (1L << (FAMILY - 640)) | (1L << (POLICY - 640)) | (1L << (OWNED - 640)) | (1L << (ABSTIME - 640)) | (1L << (BOOL - 640)) | (1L << (BOX - 640)) | (1L << (FLOAT4 - 640)) | (1L << (FLOAT8 - 640)) | (1L << (INT2 - 640)) | (1L << (INT4 - 640)) | (1L << (INT8 - 640)) | (1L << (JSON - 640)) | (1L << (JSONB - 640)) | (1L << (LINE - 640)) | (1L << (POINT - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (RELTIME - 704)) | (1L << (TEXT - 704)) | (1L << (COMMA - 704)) | (1L << (COLON - 704)) | (1L << (COLON_COLON - 704)) | (1L << (DOLLAR_DOLLAR - 704)) | (1L << (STAR - 704)) | (1L << (OPEN_PAREN - 704)) | (1L << (CLOSE_PAREN - 704)) | (1L << (OPEN_BRACKET - 704)) | (1L << (CLOSE_BRACKET - 704)) | (1L << (BIT_STRING - 704)) | (1L << (REGEX_STRING - 704)) | (1L << (NUMERIC_LITERAL - 704)) | (1L << (INTEGER_LITERAL - 704)) | (1L << (HEX_INTEGER_LITERAL - 704)) | (1L << (DOT - 704)) | (1L << (SINGLEQ_STRING_LITERAL - 704)) | (1L << (DOUBLEQ_STRING_LITERAL - 704)) | (1L << (IDENTIFIER - 704)) | (1L << (AMP - 704)) | (1L << (AMP_AMP - 704)) | (1L << (AMP_LT - 704)) | (1L << (AT_AT - 704)) | (1L << (AT_GT - 704)) | (1L << (AT_SIGN - 704)) | (1L << (BANG - 704)) | (1L << (BANG_BANG - 704)) | (1L << (BANG_EQUAL - 704)) | (1L << (CARET - 704)) | (1L << (EQUAL - 704)) | (1L << (EQUAL_GT - 704)) | (1L << (GT - 704)) | (1L << (GTE - 704)) | (1L << (GT_GT - 704)) | (1L << (HASH - 704)) | (1L << (HASH_EQ - 704)) | (1L << (HASH_GT - 704)) | (1L << (HASH_GT_GT - 704)) | (1L << (HASH_HASH - 704)) | (1L << (HYPHEN_GT - 704)) | (1L << (HYPHEN_GT_GT - 704)) | (1L << (HYPHEN_PIPE_HYPHEN - 704)) | (1L << (LT - 704)) | (1L << (LTE - 704)) | (1L << (LT_AT - 704)) | (1L << (LT_CARET - 704)) | (1L << (LT_GT - 704)) | (1L << (LT_HYPHEN_GT - 704)) | (1L << (LT_LT - 704)) | (1L << (LT_LT_EQ - 704)) | (1L << (LT_QMARK_GT - 704)) | (1L << (MINUS - 704)) | (1L << (PERCENT - 704)) | (1L << (PIPE - 704)) | (1L << (PIPE_PIPE - 704)) | (1L << (PIPE_PIPE_SLASH - 704)) | (1L << (PIPE_SLASH - 704)) | (1L << (PLUS - 704)) | (1L << (QMARK - 704)) | (1L << (QMARK_AMP - 704)) | (1L << (QMARK_HASH - 704)) | (1L << (QMARK_HYPHEN - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (QMARK_PIPE - 768)) | (1L << (SLASH - 768)) | (1L << (TIL - 768)) | (1L << (TIL_EQ - 768)) | (1L << (TIL_GTE_TIL - 768)) | (1L << (TIL_GT_TIL - 768)) | (1L << (TIL_LTE_TIL - 768)) | (1L << (TIL_LT_TIL - 768)) | (1L << (TIL_STAR - 768)) | (1L << (TIL_TIL - 768)))) != 0) );
				setState(2669);
				match(DOLLAR);
				setState(2670);
				identifier(0);
				setState(2671);
				match(DOLLAR);
				}
				break;
			case 16:
				{
				setState(2673);
				bool_expr(0);
				}
				break;
			case 17:
				{
				setState(2674);
				values_stmt();
				}
				break;
			case 18:
				{
				setState(2675);
				expr_list();
				}
				break;
			case 19:
				{
				setState(2676);
				match(OPEN_PAREN);
				setState(2677);
				expr(0);
				setState(2678);
				match(CLOSE_PAREN);
				}
				break;
			case 20:
				{
				setState(2680);
				type_literal();
				setState(2681);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case 21:
				{
				setState(2683);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 730)) & ~0x3f) == 0 && ((1L << (_la - 730)) & ((1L << (AT_SIGN - 730)) | (1L << (BANG_BANG - 730)) | (1L << (MINUS - 730)) | (1L << (PLUS - 730)))) != 0)) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2684);
				expr(25);
				}
				break;
			case 22:
				{
				setState(2685);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==QMARK_HYPHEN || _la==TIL) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2686);
				expr(24);
				}
				break;
			case 23:
				{
				setState(2687);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==NOT) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2688);
				expr(12);
				}
				break;
			case 24:
				{
				setState(2689);
				func_call();
				}
				break;
			case 25:
				{
				setState(2690);
				identifier(0);
				}
				break;
			case 26:
				{
				setState(2691);
				match(CAST);
				setState(2692);
				match(OPEN_PAREN);
				setState(2693);
				expr(0);
				setState(2694);
				match(AS);
				setState(2695);
				type(0);
				setState(2696);
				match(CLOSE_PAREN);
				}
				break;
			case 27:
				{
				setState(2698);
				correlation_name();
				setState(2699);
				match(DOT);
				setState(2700);
				column_name();
				}
				break;
			case 28:
				{
				setState(2702);
				match(CASE);
				setState(2703);
				match(WHEN);
				setState(2704);
				predicate(0);
				setState(2705);
				match(THEN);
				setState(2706);
				expr(0);
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2707);
					match(ELSE);
					setState(2708);
					expr(0);
					}
				}

				setState(2711);
				match(END);
				}
				break;
			case 29:
				{
				setState(2713);
				aggregate();
				}
				break;
			case 30:
				{
				setState(2714);
				array_cons_expr();
				}
				break;
			case 31:
				{
				setState(2715);
				match(OPEN_PAREN);
				setState(2716);
				select_stmt();
				setState(2717);
				match(CLOSE_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2787);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2785);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2721);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(2722);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 734)) & ~0x3f) == 0 && ((1L << (_la - 734)) & ((1L << (CARET - 734)) | (1L << (PIPE_PIPE_SLASH - 734)) | (1L << (PIPE_SLASH - 734)))) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2723);
						expr(23);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2724);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(2725);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (STAR - 711)) | (1L << (PERCENT - 711)) | (1L << (SLASH - 711)))) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2726);
						expr(22);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2727);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(2728);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2729);
						expr(21);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2730);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(2731);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==NOT || _la==OR || ((((_la - 725)) & ~0x3f) == 0 && ((1L << (_la - 725)) & ((1L << (AMP - 725)) | (1L << (AMP_AMP - 725)) | (1L << (AMP_LT - 725)) | (1L << (AT_AT - 725)) | (1L << (AT_GT - 725)) | (1L << (EQUAL_GT - 725)) | (1L << (GT_GT - 725)) | (1L << (HASH - 725)) | (1L << (HASH_EQ - 725)) | (1L << (HASH_GT - 725)) | (1L << (HASH_GT_GT - 725)) | (1L << (HASH_HASH - 725)) | (1L << (HYPHEN_GT - 725)) | (1L << (HYPHEN_GT_GT - 725)) | (1L << (HYPHEN_PIPE_HYPHEN - 725)) | (1L << (LT_AT - 725)) | (1L << (LT_CARET - 725)) | (1L << (LT_HYPHEN_GT - 725)) | (1L << (LT_LT - 725)) | (1L << (LT_LT_EQ - 725)) | (1L << (LT_QMARK_GT - 725)) | (1L << (PIPE - 725)) | (1L << (PIPE_PIPE - 725)) | (1L << (QMARK - 725)) | (1L << (QMARK_AMP - 725)) | (1L << (QMARK_HASH - 725)) | (1L << (QMARK_PIPE - 725)) | (1L << (TIL - 725)) | (1L << (TIL_EQ - 725)) | (1L << (TIL_GTE_TIL - 725)) | (1L << (TIL_GT_TIL - 725)) | (1L << (TIL_LTE_TIL - 725)) | (1L << (TIL_LT_TIL - 725)) | (1L << (TIL_STAR - 725)) | (1L << (TIL_TIL - 725)))) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2732);
						expr(20);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2733);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(2735);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2734);
							match(NOT);
							}
						}

						setState(2737);
						match(LIKE);
						setState(2738);
						expr(19);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2739);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(2741);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2740);
							match(NOT);
							}
						}

						setState(2743);
						match(BETWEEN);
						setState(2744);
						expr(0);
						setState(2745);
						match(AND);
						setState(2746);
						expr(18);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2748);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(2749);
						match(IN);
						setState(2750);
						expr(17);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2751);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(2752);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (BANG_EQUAL - 733)) | (1L << (EQUAL - 733)) | (1L << (GT - 733)) | (1L << (GTE - 733)) | (1L << (LT - 733)) | (1L << (LTE - 733)) | (1L << (LT_GT - 733)))) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2753);
						expr(16);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2754);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(2755);
						match(OPEN_BRACKET);
						setState(2756);
						expr(0);
						setState(2757);
						match(CLOSE_BRACKET);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2759);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(2760);
						((ExprContext)_localctx).op = match(BANG);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2761);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(2762);
						((ExprContext)_localctx).op = match(IS);
						setState(2765);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FALSE:
						case NOT:
						case TRUE:
							{
							setState(2763);
							bool_expr(0);
							}
							break;
						case NULL:
							{
							setState(2764);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2767);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(2768);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ISNULL || _la==NOTNULL) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2769);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2770);
						match(OPEN_BRACKET);
						setState(2771);
						expr(0);
						setState(2772);
						match(COLON);
						setState(2773);
						expr(0);
						setState(2774);
						match(CLOSE_BRACKET);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2776);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2777);
						match(COLON_COLON);
						setState(2778);
						type(0);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(2779);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2780);
						match(DOT);
						setState(2783);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case WHITESPACE:
						case A_:
						case ABORT:
						case ABS:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADA:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALLOCATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ARE:
						case ASENSITIVE:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATOMIC:
						case ATTRIBUTE:
						case ATTRIBUTES:
						case AVG:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BERNOULLI:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BIT_LENGTH:
						case BLOB:
						case BOOLEAN:
						case BREADTH:
						case BY:
						case C_:
						case CACHE:
						case CALL:
						case CALLED:
						case CARDINALITY:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CATALOG_NAME:
						case CEIL:
						case CEILING:
						case CHAIN:
						case CHAR:
						case CHARACTER:
						case CHARACTERISTICS:
						case CHARACTERS:
						case CHARACTER_LENGTH:
						case CHARACTER_SET_CATALOG:
						case CHARACTER_SET_NAME:
						case CHARACTER_SET_SCHEMA:
						case CHAR_LENGTH:
						case CHECKPOINT:
						case CLASS:
						case CLASS_ORIGIN:
						case CLOB:
						case CLOSE:
						case CLUSTER:
						case COALESCE:
						case COBOL:
						case COLLATION_CATALOG:
						case COLLATION_NAME:
						case COLLATION_SCHEMA:
						case COLLECT:
						case COLUMN_NAME:
						case COMMAND_FUNCTION:
						case COMMAND_FUNCTION_CODE:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case CONDITION:
						case CONDITION_NUMBER:
						case CONNECT:
						case CONNECTION:
						case CONNECTION_NAME:
						case CONSTRAINTS:
						case CONSTRAINT_CATALOG:
						case CONSTRAINT_NAME:
						case CONSTRAINT_SCHEMA:
						case CONSTRUCTOR:
						case CONTAINS:
						case CONTINUE:
						case CONVERSION:
						case CONVERT:
						case COPY:
						case CORR:
						case CORRESPONDING:
						case COUNT:
						case COVAR_POP:
						case COVAR_SAMP:
						case CSV:
						case CUBE:
						case CUME_DIST:
						case CURRENT:
						case CURRENT_DEFAULT_TRANSFORM_GROUP:
						case CURRENT_PATH:
						case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
						case CURSOR:
						case CURSOR_NAME:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DATE:
						case DATETIME_INTERVAL_CODE:
						case DATETIME_INTERVAL_PRECISION:
						case DAY:
						case DEALLOCATE:
						case DEC:
						case DECIMAL:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINED:
						case DEFINER:
						case DEGREE:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DENSE_RANK:
						case DEPTH:
						case DEREF:
						case DERIVED:
						case DESCRIBE:
						case DESCRIPTOR:
						case DETERMINISTIC:
						case DIAGNOSTICS:
						case DICTIONARY:
						case DISCONNECT:
						case DISPATCH:
						case DOMAIN:
						case DOUBLE:
						case DROP:
						case DYNAMIC:
						case DYNAMIC_FUNCTION:
						case DYNAMIC_FUNCTION_CODE:
						case EACH:
						case ELEMENT:
						case ENCODING:
						case ENCRYPTED:
						case END:
						case EQUALS:
						case ESCAPE:
						case EVERY:
						case EXCEPTION:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXEC:
						case EXECUTE:
						case EXISTS:
						case EXP:
						case EXPLAIN:
						case EXTERNAL:
						case EXTRACT:
						case FILTER:
						case FINAL:
						case FIRST:
						case FLOAT:
						case FLOOR:
						case FOLLOWING:
						case FORCE:
						case FORTRAN:
						case FORWARD:
						case FOUND:
						case FREE:
						case FUNCTION:
						case FUSION:
						case G_:
						case GENERAL:
						case GENERATED:
						case GET:
						case GLOBAL:
						case GO:
						case GOTO:
						case GRANTED:
						case GROUPING:
						case HANDLER:
						case HIERARCHY:
						case HOLD:
						case HOUR:
						case IDENTITY:
						case IGNORE:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLEMENTATION:
						case IMPLICIT:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDICATOR:
						case INHERITS:
						case INOUT:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTANCE:
						case INSTANTIABLE:
						case INSTEAD:
						case INT:
						case INTEGER:
						case INTERSECTION:
						case INTERVAL:
						case INVOKER:
						case ISOLATION:
						case KEY:
						case KEY_MEMBER:
						case KEY_TYPE:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEFT:
						case LENGTH:
						case LEVEL:
						case LISTEN:
						case LN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCATOR:
						case LOCK:
						case LOCKED:
						case LOWER:
						case M_:
						case MAP:
						case MATCH:
						case MATCHED:
						case MAX:
						case MAXVALUE:
						case MEMBER:
						case MERGE:
						case MESSAGE_LENGTH:
						case MESSAGE_OCTET_LENGTH:
						case MESSAGE_TEXT:
						case METHOD:
						case MIN:
						case MINUTE:
						case MINVALUE:
						case MOD:
						case MODE:
						case MODIFIES:
						case MODULE:
						case MONTH:
						case MORE_:
						case MOVE:
						case MULTISET:
						case MUMPS:
						case NAME:
						case NAMES:
						case NATIONAL:
						case NCHAR:
						case NCLOB:
						case NESTING:
						case NEW:
						case NEXT:
						case NO:
						case NONE:
						case NORMALIZE:
						case NORMALIZED:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLABLE:
						case NULLIF:
						case NULLS:
						case NUMBER:
						case NUMERIC:
						case OBJECT:
						case OCTETS:
						case OCTET_LENGTH:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPEN:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDERING:
						case ORDINALITY:
						case OTHERS:
						case OUT:
						case OUTPUT:
						case OVER:
						case OVERLAY:
						case OVERRIDING:
						case OWNER:
						case PAD:
						case PARAMETER:
						case PARAMETER_MODE:
						case PARAMETER_NAME:
						case PARAMETER_ORDINAL_POSITION:
						case PARAMETER_SPECIFIC_CATALOG:
						case PARAMETER_SPECIFIC_NAME:
						case PARAMETER_SPECIFIC_SCHEMA:
						case PARTIAL:
						case PARTITION:
						case PASCAL:
						case PASSWORD:
						case PATH:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case PERCENT_RANK:
						case PLI:
						case POSITION:
						case POWER:
						case PRECEDING:
						case PRECISION:
						case PREPARE:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PUBLIC:
						case QUOTE:
						case RANGE:
						case RANK:
						case READ:
						case READS:
						case REAL:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REGR_AVGX:
						case REGR_AVGY:
						case REGR_COUNT:
						case REGR_INTERCEPT:
						case REGR_SLOPE:
						case REGR_SXX:
						case REGR_SXY:
						case REGR_SYY:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RESULT:
						case RETURN:
						case RETURNED_CARDINALITY:
						case RETURNED_LENGTH:
						case RETURNED_OCTET_LENGTH:
						case RETURNED_SQLSTATE:
						case RETURNS:
						case REVOKE:
						case RIGHT:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINE_CATALOG:
						case ROUTINE_NAME:
						case ROUTINE_SCHEMA:
						case ROW:
						case ROWS:
						case ROW_COUNT:
						case ROW_NUMBER:
						case RULE:
						case SAVEPOINT:
						case SCALE:
						case SCHEMA:
						case SCHEMA_NAME:
						case SCOPE:
						case SCOPE_CATALOG:
						case SCOPE_NAME:
						case SCOPE_SCHEMA:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECTION:
						case SECURITY:
						case SELF:
						case SENSITIVE:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER_NAME:
						case SESSION:
						case SET:
						case SETOF:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SIZE:
						case SMALLINT:
						case SOURCE:
						case SPACE:
						case SPECIFIC:
						case SPECIFICTYPE:
						case SPECIFIC_NAME:
						case SQL:
						case SQLCODE:
						case SQLERROR:
						case SQLEXCEPTION:
						case SQLSTATE:
						case SQLWARNING:
						case SQRT:
						case STABLE:
						case START:
						case STATE:
						case STATEMENT:
						case STATIC:
						case STATISTICS:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STRICT:
						case STRUCTURE:
						case STYLE:
						case SUBCLASS_ORIGIN:
						case SUBMULTISET:
						case SUBSTRING:
						case SUM:
						case SYSID:
						case SYSTEM:
						case SYSTEM_USER:
						case TABLESPACE:
						case TABLE_NAME:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TIES:
						case TIME:
						case TIMESTAMP:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TOP_LEVEL_COUNT:
						case TRANSACTION:
						case TRANSACTIONS_COMMITTED:
						case TRANSACTIONS_ROLLED_BACK:
						case TRANSACTION_ACTIVE:
						case TRANSFORM:
						case TRANSFORMS:
						case TRANSLATE:
						case TRANSLATION:
						case TREAT:
						case TRIGGER:
						case TRIGGER_CATALOG:
						case TRIGGER_NAME:
						case TRIGGER_SCHEMA:
						case TRIM:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case UESCAPE:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNDER:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNNAMED:
						case UNNEST:
						case UNTIL:
						case UPDATE:
						case UPPER:
						case USAGE:
						case USER_DEFINED_TYPE_CATALOG:
						case USER_DEFINED_TYPE_CODE:
						case USER_DEFINED_TYPE_NAME:
						case USER_DEFINED_TYPE_SCHEMA:
						case VACUUM:
						case VALID:
						case VALIDATOR:
						case VALUE:
						case VALUES:
						case VARCHAR:
						case VARYING:
						case VAR_POP:
						case VAR_SAMP:
						case VIEW:
						case VOLATILE:
						case WHENEVER:
						case WIDTH_BUCKET:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRITE:
						case YEAR:
						case ZONE:
						case TEXT:
						case IDENTIFIER:
							{
							setState(2781);
							identifier(0);
							}
							break;
						case STAR:
							{
							setState(2782);
							match(STAR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(2789);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Bool_exprContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(PostgreSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PostgreSQLParser.FALSE, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public List<Bool_exprContext> bool_expr() {
			return getRuleContexts(Bool_exprContext.class);
		}
		public Bool_exprContext bool_expr(int i) {
			return getRuleContext(Bool_exprContext.class,i);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public Bool_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterBool_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitBool_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitBool_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_exprContext bool_expr() throws RecognitionException {
		return bool_expr(0);
	}

	private Bool_exprContext bool_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Bool_exprContext _localctx = new Bool_exprContext(_ctx, _parentState);
		Bool_exprContext _prevctx = _localctx;
		int _startState = 402;
		enterRecursionRule(_localctx, 402, RULE_bool_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				{
				setState(2791);
				match(TRUE);
				}
				break;
			case FALSE:
				{
				setState(2792);
				match(FALSE);
				}
				break;
			case NOT:
				{
				setState(2793);
				match(NOT);
				setState(2794);
				bool_expr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(2805);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2803);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
					case 1:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(2797);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2798);
						match(AND);
						setState(2799);
						bool_expr(3);
						}
						break;
					case 2:
						{
						_localctx = new Bool_exprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bool_expr);
						setState(2800);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2801);
						match(OR);
						setState(2802);
						bool_expr(2);
						}
						break;
					}
					} 
				}
				setState(2807);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Expr_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2808);
			match(OPEN_PAREN);
			setState(2809);
			expr(0);
			setState(2814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2810);
				match(COMMA);
				setState(2811);
				expr(0);
				}
				}
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2817);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expr_list_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Expr_list_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterExpr_list_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitExpr_list_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitExpr_list_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_list_listContext expr_list_list() throws RecognitionException {
		Expr_list_listContext _localctx = new Expr_list_listContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_expr_list_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			match(OPEN_PAREN);
			setState(2820);
			expr_list();
			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2821);
				match(COMMA);
				setState(2822);
				expr_list();
				}
				}
				setState(2827);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2828);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_sig_argContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public TypeContext argtype;
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public Func_sig_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_argContext func_sig_arg() throws RecognitionException {
		Func_sig_argContext _localctx = new Func_sig_argContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_func_sig_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (IN - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (TRUNCATE - 578)) | (1L << (TRUSTED - 578)) | (1L << (TYPE - 578)) | (1L << (UESCAPE - 578)) | (1L << (UNBOUNDED - 578)) | (1L << (UNCOMMITTED - 578)) | (1L << (UNDER - 578)) | (1L << (UNENCRYPTED - 578)) | (1L << (UNKNOWN - 578)) | (1L << (UNLISTEN - 578)) | (1L << (UNNAMED - 578)) | (1L << (UNNEST - 578)) | (1L << (UNTIL - 578)) | (1L << (UPDATE - 578)) | (1L << (UPPER - 578)) | (1L << (USAGE - 578)) | (1L << (USER_DEFINED_TYPE_CATALOG - 578)) | (1L << (USER_DEFINED_TYPE_CODE - 578)) | (1L << (USER_DEFINED_TYPE_NAME - 578)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 578)) | (1L << (VACUUM - 578)) | (1L << (VALID - 578)) | (1L << (VALIDATOR - 578)) | (1L << (VALUE - 578)) | (1L << (VALUES - 578)) | (1L << (VARCHAR - 578)) | (1L << (VARIADIC - 578)) | (1L << (VARYING - 578)) | (1L << (VAR_POP - 578)) | (1L << (VAR_SAMP - 578)) | (1L << (VIEW - 578)) | (1L << (VOLATILE - 578)) | (1L << (WHENEVER - 578)) | (1L << (WIDTH_BUCKET - 578)) | (1L << (WITHIN - 578)) | (1L << (WITHOUT - 578)) | (1L << (WORK - 578)) | (1L << (WRITE - 578)) | (1L << (YEAR - 578)) | (1L << (ZONE - 578)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (IDENTIFIER - 692)))) != 0)) {
				{
				setState(2831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2830);
					((Func_sig_argContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==OUT || _la==VARIADIC) ) {
						((Func_sig_argContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2834);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(2833);
					((Func_sig_argContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(2836);
				((Func_sig_argContext)_localctx).argtype = type(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_sig_arg_listContext extends ParserRuleContext {
		public List<Func_sig_argContext> func_sig_arg() {
			return getRuleContexts(Func_sig_argContext.class);
		}
		public Func_sig_argContext func_sig_arg(int i) {
			return getRuleContext(Func_sig_argContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_sig_arg_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_arg_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_arg_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_arg_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_arg_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_arg_listContext func_sig_arg_list() throws RecognitionException {
		Func_sig_arg_listContext _localctx = new Func_sig_arg_listContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_func_sig_arg_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			func_sig_arg();
			setState(2844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2840);
				match(COMMA);
				setState(2841);
				func_sig_arg();
				}
				}
				setState(2846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_sigContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public Func_sig_arg_listContext func_sig_arg_list() {
			return getRuleContext(Func_sig_arg_listContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public Func_sigContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sigContext func_sig() throws RecognitionException {
		Func_sigContext _localctx = new Func_sigContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_func_sig);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			((Func_sigContext)_localctx).name = identifier(0);
			setState(2852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2848);
				match(OPEN_PAREN);
				setState(2849);
				func_sig_arg_list();
				setState(2850);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_sig_listContext extends ParserRuleContext {
		public List<Func_sigContext> func_sig() {
			return getRuleContexts(Func_sigContext.class);
		}
		public Func_sigContext func_sig(int i) {
			return getRuleContext(Func_sigContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Func_sig_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_sig_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_sig_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_sig_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_sig_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_sig_listContext func_sig_list() throws RecognitionException {
		Func_sig_listContext _localctx = new Func_sig_listContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_func_sig_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			func_sig();
			setState(2859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2855);
				match(COMMA);
				setState(2856);
				func_sig();
				}
				}
				setState(2861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_literalContext extends ParserRuleContext {
		public TerminalNode ABSTIME() { return getToken(PostgreSQLParser.ABSTIME, 0); }
		public TerminalNode BOOL() { return getToken(PostgreSQLParser.BOOL, 0); }
		public TerminalNode BOX() { return getToken(PostgreSQLParser.BOX, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLParser.DATE, 0); }
		public TerminalNode FLOAT4() { return getToken(PostgreSQLParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(PostgreSQLParser.FLOAT8, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode JSON() { return getToken(PostgreSQLParser.JSON, 0); }
		public TerminalNode JSONB() { return getToken(PostgreSQLParser.JSONB, 0); }
		public TerminalNode LINE() { return getToken(PostgreSQLParser.LINE, 0); }
		public TerminalNode POINT() { return getToken(PostgreSQLParser.POINT, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLParser.NAME, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public List<TerminalNode> TIME() { return getTokens(PostgreSQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(PostgreSQLParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(PostgreSQLParser.TIMESTAMP_TZ, 0); }
		public TerminalNode TIME_TZ() { return getToken(PostgreSQLParser.TIME_TZ, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLParser.INT, 0); }
		public TerminalNode INT2() { return getToken(PostgreSQLParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(PostgreSQLParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(PostgreSQLParser.INT8, 0); }
		public TerminalNode RELTIME() { return getToken(PostgreSQLParser.RELTIME, 0); }
		public Type_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_literalContext type_literal() throws RecognitionException {
		Type_literalContext _localctx = new Type_literalContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_type_literal);
		int _la;
		try {
			setState(2908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2862);
				match(ABSTIME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2863);
				match(BOOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2864);
				match(BOX);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2865);
				match(DATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2866);
				match(FLOAT4);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2867);
				match(FLOAT8);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2868);
				match(INTERVAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2869);
				match(JSON);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2870);
				match(JSONB);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2871);
				match(LINE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2872);
				match(POINT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2873);
				match(NAME);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2874);
				match(NUMERIC);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2875);
				match(TEXT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2876);
				match(TIMESTAMP);
				setState(2880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2877);
					_la = _input.LA(1);
					if ( !(_la==AT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2878);
					match(TIME);
					setState(2879);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2882);
				match(TIMESTAMP);
				setState(2886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2883);
					match(WITHOUT);
					setState(2884);
					match(TIME);
					setState(2885);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2888);
				match(TIMESTAMP_TZ);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2889);
				match(TIME);
				setState(2893);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(2890);
					match(WITH);
					setState(2891);
					match(TIME);
					setState(2892);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2895);
				match(TIME);
				setState(2899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2896);
					match(WITHOUT);
					setState(2897);
					match(TIME);
					setState(2898);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2901);
				match(TIME_TZ);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2902);
				match(INT);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2903);
				match(INT2);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2904);
				match(INT4);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2905);
				match(INT8);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2906);
				match(INTERVAL);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2907);
				match(RELTIME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_literal_listContext extends ParserRuleContext {
		public List<Type_literalContext> type_literal() {
			return getRuleContexts(Type_literalContext.class);
		}
		public Type_literalContext type_literal(int i) {
			return getRuleContext(Type_literalContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_literal_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_literal_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_literal_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_literal_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_literal_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_literal_listContext type_literal_list() throws RecognitionException {
		Type_literal_listContext _localctx = new Type_literal_listContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_type_literal_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2910);
			type_literal();
			setState(2915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2911);
				match(COMMA);
				setState(2912);
				type_literal();
				}
				}
				setState(2917);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLParser.DATE, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode IN() { return getToken(PostgreSQLParser.IN, 0); }
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public OperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterOper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitOper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitOper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperContext oper() throws RecognitionException {
		OperContext _localctx = new OperContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_oper);
		try {
			setState(2927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2919);
				match(IS);
				setState(2920);
				match(OF);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2921);
				match(DATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2922);
				match(INTERVAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2923);
				match(DOUBLE);
				setState(2924);
				match(PRECISION);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2925);
				match(IN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2926);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(PostgreSQLParser.WHERE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PostgreSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(PostgreSQLParser.DISTINCT, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PostgreSQLParser.GROUP, 0); }
		public AggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateContext aggregate() throws RecognitionException {
		AggregateContext _localctx = new AggregateContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_aggregate);
		int _la;
		try {
			setState(2992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2929);
				identifier(0);
				setState(2930);
				match(OPEN_PAREN);
				setState(2932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2931);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2934);
				expr(0);
				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2935);
					match(COMMA);
					setState(2936);
					expr(0);
					}
					}
					setState(2941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2942);
					order_by_clause();
					}
				}

				setState(2945);
				match(CLOSE_PAREN);
				setState(2952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(2946);
					match(FILTER);
					setState(2947);
					match(OPEN_PAREN);
					setState(2948);
					match(WHERE);
					setState(2949);
					where_clause();
					setState(2950);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2954);
				identifier(0);
				setState(2955);
				match(OPEN_PAREN);
				setState(2956);
				match(STAR);
				setState(2957);
				match(CLOSE_PAREN);
				setState(2964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2958);
					match(FILTER);
					setState(2959);
					match(OPEN_PAREN);
					setState(2960);
					match(WHERE);
					setState(2961);
					where_clause();
					setState(2962);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2966);
				identifier(0);
				setState(2967);
				match(OPEN_PAREN);
				setState(2976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ARRAY) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_ROLE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FALSE - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOT - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TRUE - 577)) | (1L << (TRUNCATE - 577)) | (1L << (TRUSTED - 577)) | (1L << (TYPE - 577)) | (1L << (UESCAPE - 577)) | (1L << (UNBOUNDED - 577)) | (1L << (UNCOMMITTED - 577)) | (1L << (UNDER - 577)) | (1L << (UNENCRYPTED - 577)) | (1L << (UNKNOWN - 577)) | (1L << (UNLISTEN - 577)) | (1L << (UNNAMED - 577)) | (1L << (UNNEST - 577)) | (1L << (UNTIL - 577)) | (1L << (UPDATE - 577)) | (1L << (UPPER - 577)) | (1L << (USAGE - 577)) | (1L << (USER_DEFINED_TYPE_CATALOG - 577)) | (1L << (USER_DEFINED_TYPE_CODE - 577)) | (1L << (USER_DEFINED_TYPE_NAME - 577)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 577)) | (1L << (VACUUM - 577)) | (1L << (VALID - 577)) | (1L << (VALIDATOR - 577)) | (1L << (VALUE - 577)) | (1L << (VALUES - 577)) | (1L << (VARCHAR - 577)) | (1L << (VARYING - 577)) | (1L << (VAR_POP - 577)) | (1L << (VAR_SAMP - 577)) | (1L << (VIEW - 577)) | (1L << (VOLATILE - 577)) | (1L << (WHENEVER - 577)) | (1L << (WIDTH_BUCKET - 577)) | (1L << (WITHIN - 577)) | (1L << (WITHOUT - 577)) | (1L << (WORK - 577)) | (1L << (WRITE - 577)) | (1L << (YEAR - 577)) | (1L << (ZONE - 577)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (DOLLAR - 692)) | (1L << (DOLLAR_DOLLAR - 692)) | (1L << (OPEN_PAREN - 692)) | (1L << (BIT_STRING - 692)) | (1L << (REGEX_STRING - 692)) | (1L << (NUMERIC_LITERAL - 692)) | (1L << (INTEGER_LITERAL - 692)) | (1L << (HEX_INTEGER_LITERAL - 692)) | (1L << (SINGLEQ_STRING_LITERAL - 692)) | (1L << (DOUBLEQ_STRING_LITERAL - 692)) | (1L << (IDENTIFIER - 692)) | (1L << (AT_SIGN - 692)) | (1L << (BANG_BANG - 692)))) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (MINUS - 757)) | (1L << (PLUS - 757)) | (1L << (QMARK_HYPHEN - 757)) | (1L << (TIL - 757)))) != 0)) {
					{
					setState(2968);
					expr(0);
					setState(2973);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2969);
						match(COMMA);
						setState(2970);
						expr(0);
						}
						}
						setState(2975);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2978);
				match(CLOSE_PAREN);
				setState(2979);
				match(WITHIN);
				setState(2980);
				match(GROUP);
				setState(2981);
				match(OPEN_PAREN);
				setState(2982);
				order_by_clause();
				setState(2983);
				match(CLOSE_PAREN);
				setState(2990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(2984);
					match(FILTER);
					setState(2985);
					match(OPEN_PAREN);
					setState(2986);
					match(WHERE);
					setState(2987);
					where_clause();
					setState(2988);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_Context extends ParserRuleContext {
		public TerminalNode SINGLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.SINGLEQ_STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQ_STRING_LITERAL() { return getToken(PostgreSQLParser.DOUBLEQ_STRING_LITERAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_Context name_() throws RecognitionException {
		Name_Context _localctx = new Name_Context(_ctx, getState());
		enterRule(_localctx, 424, RULE_name_);
		try {
			setState(2997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2994);
				match(SINGLEQ_STRING_LITERAL);
				}
				break;
			case DOUBLEQ_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2995);
				match(DOUBLEQ_STRING_LITERAL);
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHAR_LENGTH:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINTS:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case OCTET_LENGTH:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROWS:
			case ROW_COUNT:
			case ROW_NUMBER:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFICTYPE:
			case SPECIFIC_NAME:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLESPACE:
			case TABLE_NAME:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSACTION_ACTIVE:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VAR_POP:
			case VAR_SAMP:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case TEXT:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2996);
				identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Name_listContext extends ParserRuleContext {
		public List<Name_Context> name_() {
			return getRuleContexts(Name_Context.class);
		}
		public Name_Context name_(int i) {
			return getRuleContext(Name_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterName_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitName_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitName_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Name_listContext name_list() throws RecognitionException {
		Name_listContext _localctx = new Name_listContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			name_();
			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3000);
				match(COMMA);
				setState(3001);
				name_();
				}
				}
				setState(3006);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identifier_listContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identifier_listContext identifier_list() throws RecognitionException {
		Identifier_listContext _localctx = new Identifier_listContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_identifier_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3007);
			identifier(0);
			setState(3012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3008);
				match(COMMA);
				setState(3009);
				identifier(0);
				}
				}
				setState(3014);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_name_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTable_name_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTable_name_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTable_name_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_Context table_name_() throws RecognitionException {
		Table_name_Context _localctx = new Table_name_Context(_ctx, getState());
		enterRule(_localctx, 430, RULE_table_name_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public Type_literalContext type_literal() {
			return getRuleContext(Type_literalContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode INTEGER_LITERAL() { return getToken(PostgreSQLParser.INTEGER_LITERAL, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		return type(0);
	}

	private TypeContext type(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TypeContext _localctx = new TypeContext(_ctx, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 432;
		enterRecursionRule(_localctx, 432, RULE_type, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(3018);
				type_literal();
				}
				break;
			case 2:
				{
				setState(3019);
				match(VARCHAR);
				setState(3020);
				match(OPEN_PAREN);
				setState(3022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER_LITERAL) {
					{
					setState(3021);
					match(INTEGER_LITERAL);
					}
				}

				setState(3024);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				{
				setState(3025);
				match(NUMERIC);
				setState(3026);
				match(OPEN_PAREN);
				setState(3035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ARRAY) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_ROLE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FALSE - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOT - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TRUE - 577)) | (1L << (TRUNCATE - 577)) | (1L << (TRUSTED - 577)) | (1L << (TYPE - 577)) | (1L << (UESCAPE - 577)) | (1L << (UNBOUNDED - 577)) | (1L << (UNCOMMITTED - 577)) | (1L << (UNDER - 577)) | (1L << (UNENCRYPTED - 577)) | (1L << (UNKNOWN - 577)) | (1L << (UNLISTEN - 577)) | (1L << (UNNAMED - 577)) | (1L << (UNNEST - 577)) | (1L << (UNTIL - 577)) | (1L << (UPDATE - 577)) | (1L << (UPPER - 577)) | (1L << (USAGE - 577)) | (1L << (USER_DEFINED_TYPE_CATALOG - 577)) | (1L << (USER_DEFINED_TYPE_CODE - 577)) | (1L << (USER_DEFINED_TYPE_NAME - 577)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 577)) | (1L << (VACUUM - 577)) | (1L << (VALID - 577)) | (1L << (VALIDATOR - 577)) | (1L << (VALUE - 577)) | (1L << (VALUES - 577)) | (1L << (VARCHAR - 577)) | (1L << (VARYING - 577)) | (1L << (VAR_POP - 577)) | (1L << (VAR_SAMP - 577)) | (1L << (VIEW - 577)) | (1L << (VOLATILE - 577)) | (1L << (WHENEVER - 577)) | (1L << (WIDTH_BUCKET - 577)) | (1L << (WITHIN - 577)) | (1L << (WITHOUT - 577)) | (1L << (WORK - 577)) | (1L << (WRITE - 577)) | (1L << (YEAR - 577)) | (1L << (ZONE - 577)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (DOLLAR - 692)) | (1L << (DOLLAR_DOLLAR - 692)) | (1L << (OPEN_PAREN - 692)) | (1L << (BIT_STRING - 692)) | (1L << (REGEX_STRING - 692)) | (1L << (NUMERIC_LITERAL - 692)) | (1L << (INTEGER_LITERAL - 692)) | (1L << (HEX_INTEGER_LITERAL - 692)) | (1L << (SINGLEQ_STRING_LITERAL - 692)) | (1L << (DOUBLEQ_STRING_LITERAL - 692)) | (1L << (IDENTIFIER - 692)) | (1L << (AT_SIGN - 692)) | (1L << (BANG_BANG - 692)))) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (MINUS - 757)) | (1L << (PLUS - 757)) | (1L << (QMARK_HYPHEN - 757)) | (1L << (TIL - 757)))) != 0)) {
					{
					setState(3027);
					expr(0);
					setState(3032);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3028);
						match(COMMA);
						setState(3029);
						expr(0);
						}
						}
						setState(3034);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3037);
				match(CLOSE_PAREN);
				}
				break;
			case 4:
				{
				setState(3038);
				identifier(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3049);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_type);
					setState(3041);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3042);
					match(OPEN_BRACKET);
					setState(3044);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INTEGER_LITERAL) {
						{
						setState(3043);
						match(INTEGER_LITERAL);
						}
					}

					setState(3046);
					match(CLOSE_BRACKET);
					}
					} 
				}
				setState(3051);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Type_listContext extends ParserRuleContext {
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterType_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitType_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitType_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_listContext type_list() throws RecognitionException {
		Type_listContext _localctx = new Type_listContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3052);
			type(0);
			setState(3057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3053);
				match(COMMA);
				setState(3054);
				type(0);
				}
				}
				setState(3059);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_methodContext extends ParserRuleContext {
		public Token builtin;
		public IdentifierContext unknown;
		public TerminalNode BTREE() { return getToken(PostgreSQLParser.BTREE, 0); }
		public TerminalNode HASH_() { return getToken(PostgreSQLParser.HASH_, 0); }
		public TerminalNode GIST() { return getToken(PostgreSQLParser.GIST, 0); }
		public TerminalNode SPGIST() { return getToken(PostgreSQLParser.SPGIST, 0); }
		public TerminalNode GIN() { return getToken(PostgreSQLParser.GIN, 0); }
		public TerminalNode BRIN() { return getToken(PostgreSQLParser.BRIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIndex_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIndex_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIndex_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_methodContext index_method() throws RecognitionException {
		Index_methodContext _localctx = new Index_methodContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_index_method);
		int _la;
		try {
			setState(3062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BTREE:
			case HASH_:
			case GIST:
			case SPGIST:
			case GIN:
			case BRIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				((Index_methodContext)_localctx).builtin = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 674)) & ~0x3f) == 0 && ((1L << (_la - 674)) & ((1L << (BTREE - 674)) | (1L << (HASH_ - 674)) | (1L << (GIST - 674)) | (1L << (SPGIST - 674)) | (1L << (GIN - 674)) | (1L << (BRIN - 674)))) != 0)) ) {
					((Index_methodContext)_localctx).builtin = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHAR_LENGTH:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINTS:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case OCTET_LENGTH:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROWS:
			case ROW_COUNT:
			case ROW_NUMBER:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFICTYPE:
			case SPECIFIC_NAME:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLESPACE:
			case TABLE_NAME:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSACTION_ACTIVE:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VAR_POP:
			case VAR_SAMP:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case TEXT:
			case IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				((Index_methodContext)_localctx).unknown = identifier(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_nameContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Func_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_nameContext func_name() throws RecognitionException {
		Func_nameContext _localctx = new Func_nameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_func_name);
		try {
			setState(3066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3064);
				type(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3065);
				identifier(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_callContext extends ParserRuleContext {
		public Func_nameContext func_name() {
			return getRuleContext(Func_nameContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public TerminalNode VARIADIC() { return getToken(PostgreSQLParser.VARIADIC, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Todo_fill_inContext todo_fill_in() {
			return getRuleContext(Todo_fill_inContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public Func_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFunc_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFunc_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFunc_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_callContext func_call() throws RecognitionException {
		Func_callContext _localctx = new Func_callContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_func_call);
		int _la;
		try {
			int _alt;
			setState(3100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3068);
				func_name();
				setState(3069);
				match(OPEN_PAREN);
				setState(3070);
				match(VARIADIC);
				setState(3071);
				expr(0);
				setState(3072);
				match(CLOSE_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3074);
				func_name();
				setState(3075);
				match(OPEN_PAREN);
				setState(3089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ARRAY) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_ROLE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FALSE - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOT - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TRUE - 577)) | (1L << (TRUNCATE - 577)) | (1L << (TRUSTED - 577)) | (1L << (TYPE - 577)) | (1L << (UESCAPE - 577)) | (1L << (UNBOUNDED - 577)) | (1L << (UNCOMMITTED - 577)) | (1L << (UNDER - 577)) | (1L << (UNENCRYPTED - 577)) | (1L << (UNKNOWN - 577)) | (1L << (UNLISTEN - 577)) | (1L << (UNNAMED - 577)) | (1L << (UNNEST - 577)) | (1L << (UNTIL - 577)) | (1L << (UPDATE - 577)) | (1L << (UPPER - 577)) | (1L << (USAGE - 577)) | (1L << (USER_DEFINED_TYPE_CATALOG - 577)) | (1L << (USER_DEFINED_TYPE_CODE - 577)) | (1L << (USER_DEFINED_TYPE_NAME - 577)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 577)) | (1L << (VACUUM - 577)) | (1L << (VALID - 577)) | (1L << (VALIDATOR - 577)) | (1L << (VALUE - 577)) | (1L << (VALUES - 577)) | (1L << (VARCHAR - 577)) | (1L << (VARYING - 577)) | (1L << (VAR_POP - 577)) | (1L << (VAR_SAMP - 577)) | (1L << (VIEW - 577)) | (1L << (VOLATILE - 577)) | (1L << (WHENEVER - 577)) | (1L << (WIDTH_BUCKET - 577)) | (1L << (WITHIN - 577)) | (1L << (WITHOUT - 577)) | (1L << (WORK - 577)) | (1L << (WRITE - 577)) | (1L << (YEAR - 577)) | (1L << (ZONE - 577)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (DOLLAR - 692)) | (1L << (DOLLAR_DOLLAR - 692)) | (1L << (OPEN_PAREN - 692)) | (1L << (BIT_STRING - 692)) | (1L << (REGEX_STRING - 692)) | (1L << (NUMERIC_LITERAL - 692)) | (1L << (INTEGER_LITERAL - 692)) | (1L << (HEX_INTEGER_LITERAL - 692)) | (1L << (SINGLEQ_STRING_LITERAL - 692)) | (1L << (DOUBLEQ_STRING_LITERAL - 692)) | (1L << (IDENTIFIER - 692)) | (1L << (AT_SIGN - 692)) | (1L << (BANG_BANG - 692)))) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (MINUS - 757)) | (1L << (PLUS - 757)) | (1L << (QMARK_HYPHEN - 757)) | (1L << (TIL - 757)))) != 0)) {
					{
					setState(3076);
					expr(0);
					setState(3081);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3077);
							match(COMMA);
							setState(3078);
							expr(0);
							}
							} 
						}
						setState(3083);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
					}
					setState(3087);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3084);
						match(COMMA);
						setState(3085);
						match(VARIADIC);
						setState(3086);
						expr(0);
						}
					}

					}
				}

				setState(3091);
				match(CLOSE_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3093);
				func_name();
				setState(3094);
				match(OPEN_PAREN);
				setState(3095);
				todo_fill_in();
				setState(3096);
				match(FROM);
				setState(3097);
				expr(0);
				setState(3098);
				match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_cons_exprContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(PostgreSQLParser.ARRAY, 0); }
		public TerminalNode OPEN_BRACKET() { return getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
		public TerminalNode CLOSE_BRACKET() { return getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Array_cons_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_cons_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterArray_cons_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitArray_cons_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitArray_cons_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_cons_exprContext array_cons_expr() throws RecognitionException {
		Array_cons_exprContext _localctx = new Array_cons_exprContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_array_cons_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3102);
			match(ARRAY);
			setState(3103);
			match(OPEN_BRACKET);
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ARRAY) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CASE) | (1L << CAST) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_ROLE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FALSE - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOT - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIME_TZ - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMESTAMP_TZ - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (TRUE - 577)) | (1L << (TRUNCATE - 577)) | (1L << (TRUSTED - 577)) | (1L << (TYPE - 577)) | (1L << (UESCAPE - 577)) | (1L << (UNBOUNDED - 577)) | (1L << (UNCOMMITTED - 577)) | (1L << (UNDER - 577)) | (1L << (UNENCRYPTED - 577)) | (1L << (UNKNOWN - 577)) | (1L << (UNLISTEN - 577)) | (1L << (UNNAMED - 577)) | (1L << (UNNEST - 577)) | (1L << (UNTIL - 577)) | (1L << (UPDATE - 577)) | (1L << (UPPER - 577)) | (1L << (USAGE - 577)) | (1L << (USER_DEFINED_TYPE_CATALOG - 577)) | (1L << (USER_DEFINED_TYPE_CODE - 577)) | (1L << (USER_DEFINED_TYPE_NAME - 577)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 577)) | (1L << (VACUUM - 577)) | (1L << (VALID - 577)) | (1L << (VALIDATOR - 577)) | (1L << (VALUE - 577)) | (1L << (VALUES - 577)) | (1L << (VARCHAR - 577)) | (1L << (VARYING - 577)) | (1L << (VAR_POP - 577)) | (1L << (VAR_SAMP - 577)) | (1L << (VIEW - 577)) | (1L << (VOLATILE - 577)) | (1L << (WHENEVER - 577)) | (1L << (WIDTH_BUCKET - 577)) | (1L << (WITHIN - 577)) | (1L << (WITHOUT - 577)) | (1L << (WORK - 577)) | (1L << (WRITE - 577)) | (1L << (YEAR - 577)) | (1L << (ZONE - 577)))) != 0) || ((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (ABSTIME - 692)) | (1L << (BOOL - 692)) | (1L << (BOX - 692)) | (1L << (FLOAT4 - 692)) | (1L << (FLOAT8 - 692)) | (1L << (INT2 - 692)) | (1L << (INT4 - 692)) | (1L << (INT8 - 692)) | (1L << (JSON - 692)) | (1L << (JSONB - 692)) | (1L << (LINE - 692)) | (1L << (POINT - 692)) | (1L << (RELTIME - 692)) | (1L << (TEXT - 692)) | (1L << (DOLLAR - 692)) | (1L << (DOLLAR_DOLLAR - 692)) | (1L << (OPEN_PAREN - 692)) | (1L << (BIT_STRING - 692)) | (1L << (REGEX_STRING - 692)) | (1L << (NUMERIC_LITERAL - 692)) | (1L << (INTEGER_LITERAL - 692)) | (1L << (HEX_INTEGER_LITERAL - 692)) | (1L << (SINGLEQ_STRING_LITERAL - 692)) | (1L << (DOUBLEQ_STRING_LITERAL - 692)) | (1L << (IDENTIFIER - 692)) | (1L << (AT_SIGN - 692)) | (1L << (BANG_BANG - 692)))) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & ((1L << (MINUS - 757)) | (1L << (PLUS - 757)) | (1L << (QMARK_HYPHEN - 757)) | (1L << (TIL - 757)))) != 0)) {
				{
				setState(3104);
				expr(0);
				setState(3109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3105);
					match(COMMA);
					setState(3106);
					expr(0);
					}
					}
					setState(3111);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3114);
			match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_itemContext extends ParserRuleContext {
		public Table_name_Context table_name_() {
			return getRuleContext(Table_name_Context.class,0);
		}
		public TerminalNode ONLY() { return getToken(PostgreSQLParser.ONLY, 0); }
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public With_column_aliasContext with_column_alias() {
			return getRuleContext(With_column_aliasContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(PostgreSQLParser.TABLESAMPLE, 0); }
		public List<Todo_fill_inContext> todo_fill_in() {
			return getRuleContexts(Todo_fill_inContext.class);
		}
		public Todo_fill_inContext todo_fill_in(int i) {
			return getRuleContext(Todo_fill_inContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(PostgreSQLParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(PostgreSQLParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public StmtContext stmt() {
			return getRuleContext(StmtContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(PostgreSQLParser.LATERAL, 0); }
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Func_callContext func_call() {
			return getRuleContext(Func_callContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PostgreSQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(PostgreSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Join_clauseContext join_clause() {
			return getRuleContext(Join_clauseContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(PostgreSQLParser.NATURAL, 0); }
		public From_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterFrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitFrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitFrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_itemContext from_item() throws RecognitionException {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_itemContext _localctx = new From_itemContext(_ctx, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 444;
		enterRecursionRule(_localctx, 444, RULE_from_item, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(3117);
					match(ONLY);
					}
				}

				setState(3120);
				table_name_();
				setState(3122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3121);
					match(STAR);
					}
					break;
				}
				setState(3125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(3124);
					with_column_alias();
					}
					break;
				}
				setState(3146);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3127);
					match(TABLESAMPLE);
					setState(3128);
					todo_fill_in();
					setState(3129);
					match(OPEN_PAREN);
					setState(3130);
					expr(0);
					setState(3135);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3131);
						match(COMMA);
						setState(3132);
						expr(0);
						}
						}
						setState(3137);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3138);
					match(CLOSE_PAREN);
					setState(3144);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
					case 1:
						{
						setState(3139);
						match(REPEATABLE);
						setState(3140);
						match(OPEN_PAREN);
						setState(3141);
						todo_fill_in();
						setState(3142);
						match(CLOSE_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(3148);
					match(LATERAL);
					}
				}

				setState(3151);
				match(OPEN_PAREN);
				setState(3152);
				stmt();
				setState(3153);
				match(CLOSE_PAREN);
				setState(3155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3154);
					match(AS);
					}
				}

				setState(3157);
				alias();
				setState(3169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3158);
					match(OPEN_PAREN);
					setState(3159);
					column_alias();
					setState(3164);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3160);
						match(COMMA);
						setState(3161);
						column_alias();
						}
						}
						setState(3166);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3167);
					match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(3171);
					match(LATERAL);
					}
				}

				setState(3174);
				func_call();
				setState(3177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3175);
					match(WITH);
					setState(3176);
					match(ORDINALITY);
					}
					break;
				}
				setState(3180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3179);
					with_column_alias();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(3183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(3182);
					match(LATERAL);
					}
				}

				setState(3185);
				func_call();
				setState(3186);
				match(AS);
				setState(3187);
				match(OPEN_PAREN);
				setState(3188);
				column_definition();
				setState(3193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3189);
					match(COMMA);
					setState(3190);
					column_definition();
					}
					}
					setState(3195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3196);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				{
				setState(3199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(3198);
					match(LATERAL);
					}
				}

				setState(3201);
				match(ROWS);
				setState(3202);
				match(FROM);
				setState(3203);
				match(OPEN_PAREN);
				setState(3204);
				func_call();
				setState(3205);
				match(CLOSE_PAREN);
				setState(3218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3206);
					match(AS);
					setState(3207);
					match(OPEN_PAREN);
					setState(3208);
					column_definition();
					setState(3213);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3209);
						match(COMMA);
						setState(3210);
						column_definition();
						}
						}
						setState(3215);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3216);
					match(CLOSE_PAREN);
					}
				}

				setState(3220);
				match(CLOSE_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3234);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,358,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new From_itemContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_from_item);
					setState(3224);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3226);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATURAL) {
						{
						setState(3225);
						match(NATURAL);
						}
					}

					setState(3228);
					join_type();
					setState(3229);
					from_item(0);
					setState(3230);
					join_clause();
					}
					} 
				}
				setState(3236);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,358,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class With_column_aliasContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(PostgreSQLParser.AS, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public With_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWith_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWith_column_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWith_column_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_column_aliasContext with_column_alias() throws RecognitionException {
		With_column_aliasContext _localctx = new With_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_with_column_alias);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3237);
				match(AS);
				}
			}

			setState(3240);
			alias();
			setState(3249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3241);
				column_alias();
				setState(3246);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3242);
						match(COMMA);
						setState(3243);
						column_alias();
						}
						} 
					}
					setState(3248);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PostgreSQLParser.JOIN, 0); }
		public TerminalNode INNER() { return getToken(PostgreSQLParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(PostgreSQLParser.OUTER, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(PostgreSQLParser.FULL, 0); }
		public TerminalNode CROSS() { return getToken(PostgreSQLParser.CROSS, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_join_type);
		int _la;
		try {
			setState(3272);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(3251);
					match(INNER);
					}
				}

				setState(3254);
				match(JOIN);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3255);
				match(LEFT);
				setState(3257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3256);
					match(OUTER);
					}
				}

				setState(3259);
				match(JOIN);
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3260);
				match(RIGHT);
				setState(3262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3261);
					match(OUTER);
					}
				}

				setState(3264);
				match(JOIN);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3265);
				match(FULL);
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3266);
					match(OUTER);
					}
				}

				setState(3269);
				match(JOIN);
				}
				break;
			case CROSS:
				enterOuterAlt(_localctx, 5);
				{
				setState(3270);
				match(CROSS);
				setState(3271);
				match(JOIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PostgreSQLParser.ON, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode USING() { return getToken(PostgreSQLParser.USING, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_join_clause);
		int _la;
		try {
			setState(3288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3274);
				match(ON);
				setState(3275);
				predicate(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276);
				match(USING);
				setState(3277);
				match(OPEN_PAREN);
				setState(3278);
				column_name();
				setState(3283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3279);
					match(COMMA);
					setState(3280);
					column_name();
					}
					}
					setState(3285);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3286);
				match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public OperContext oper() {
			return getRuleContext(OperContext.class,0);
		}
		public TerminalNode IS() { return getToken(PostgreSQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(PostgreSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(PostgreSQLParser.NOT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(PostgreSQLParser.OPEN_PAREN, 0); }
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public Select_stmtContext select_stmt() {
			return getRuleContext(Select_stmtContext.class,0);
		}
		public TerminalNode AND() { return getToken(PostgreSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(PostgreSQLParser.OR, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 452;
		enterRecursionRule(_localctx, 452, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3291);
				expr(0);
				}
				break;
			case 2:
				{
				setState(3292);
				expr(0);
				setState(3293);
				oper();
				setState(3294);
				expr(0);
				}
				break;
			case 3:
				{
				setState(3296);
				expr(0);
				{
				setState(3297);
				match(IS);
				setState(3299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3298);
					match(NOT);
					}
				}

				setState(3301);
				match(NULL);
				}
				}
				break;
			case 4:
				{
				setState(3303);
				match(OPEN_PAREN);
				setState(3304);
				predicate(0);
				setState(3305);
				match(CLOSE_PAREN);
				}
				break;
			case 5:
				{
				setState(3307);
				match(EXISTS);
				setState(3308);
				match(OPEN_PAREN);
				setState(3309);
				select_stmt();
				setState(3310);
				match(CLOSE_PAREN);
				}
				break;
			case 6:
				{
				setState(3312);
				match(NOT);
				setState(3313);
				predicate(1);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3324);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3322);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
					case 1:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3316);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3317);
						match(AND);
						setState(3318);
						predicate(4);
						}
						break;
					case 2:
						{
						_localctx = new PredicateContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3319);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3320);
						match(OR);
						setState(3321);
						predicate(3);
						}
						break;
					}
					} 
				}
				setState(3326);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,372,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Aggregate_signatureContext extends ParserRuleContext {
		public Token argmode;
		public IdentifierContext argname;
		public Type_listContext argtype;
		public TerminalNode STAR() { return getToken(PostgreSQLParser.STAR, 0); }
		public List<Type_listContext> type_list() {
			return getRuleContexts(Type_listContext.class);
		}
		public Type_listContext type_list(int i) {
			return getRuleContext(Type_listContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> IN() { return getTokens(PostgreSQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PostgreSQLParser.IN, i);
		}
		public List<TerminalNode> VARIADIC() { return getTokens(PostgreSQLParser.VARIADIC); }
		public TerminalNode VARIADIC(int i) {
			return getToken(PostgreSQLParser.VARIADIC, i);
		}
		public TerminalNode ORDER() { return getToken(PostgreSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public Aggregate_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAggregate_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAggregate_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAggregate_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_signatureContext aggregate_signature() throws RecognitionException {
		Aggregate_signatureContext _localctx = new Aggregate_signatureContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_aggregate_signature);
		int _la;
		try {
			setState(3353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(3328);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3331);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(3334);
				((Aggregate_signatureContext)_localctx).argtype = type_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(3335);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3338);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(3341);
				((Aggregate_signatureContext)_localctx).argtype = type_list();
				}
				setState(3343);
				match(ORDER);
				setState(3344);
				match(BY);
				setState(3346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN || _la==VARIADIC) {
					{
					setState(3345);
					((Aggregate_signatureContext)_localctx).argmode = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==VARIADIC) ) {
						((Aggregate_signatureContext)_localctx).argmode = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3348);
					((Aggregate_signatureContext)_localctx).argname = identifier(0);
					}
					break;
				}
				setState(3351);
				((Aggregate_signatureContext)_localctx).argtype = type_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_nameContext extends ParserRuleContext {
		public Name_Context name;
		public Name_Context name_() {
			return getRuleContext(Name_Context.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(PostgreSQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(PostgreSQLParser.SESSION_USER, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_role_name);
		try {
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3355);
				((Role_nameContext)_localctx).name = name_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3356);
				match(CURRENT_USER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3357);
				match(SESSION_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3358);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_name_listContext extends ParserRuleContext {
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PostgreSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PostgreSQLParser.COMMA, i);
		}
		public Role_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterRole_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitRole_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitRole_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_name_listContext role_name_list() throws RecognitionException {
		Role_name_listContext _localctx = new Role_name_listContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_role_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361);
			role_name();
			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3362);
				match(COMMA);
				setState(3363);
				role_name();
				}
				}
				setState(3368);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_reserved_keywordContext extends ParserRuleContext {
		public TerminalNode A_() { return getToken(PostgreSQLParser.A_, 0); }
		public TerminalNode ABORT() { return getToken(PostgreSQLParser.ABORT, 0); }
		public TerminalNode ABS() { return getToken(PostgreSQLParser.ABS, 0); }
		public TerminalNode ABSOLUTE() { return getToken(PostgreSQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(PostgreSQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(PostgreSQLParser.ACTION, 0); }
		public TerminalNode ADA() { return getToken(PostgreSQLParser.ADA, 0); }
		public TerminalNode ADD() { return getToken(PostgreSQLParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(PostgreSQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(PostgreSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(PostgreSQLParser.AGGREGATE, 0); }
		public TerminalNode ALLOCATE() { return getToken(PostgreSQLParser.ALLOCATE, 0); }
		public TerminalNode ALSO() { return getToken(PostgreSQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(PostgreSQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(PostgreSQLParser.ALWAYS, 0); }
		public TerminalNode ARE() { return getToken(PostgreSQLParser.ARE, 0); }
		public TerminalNode ASENSITIVE() { return getToken(PostgreSQLParser.ASENSITIVE, 0); }
		public TerminalNode ASSERTION() { return getToken(PostgreSQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(PostgreSQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(PostgreSQLParser.AT, 0); }
		public TerminalNode ATOMIC() { return getToken(PostgreSQLParser.ATOMIC, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PostgreSQLParser.ATTRIBUTE, 0); }
		public TerminalNode ATTRIBUTES() { return getToken(PostgreSQLParser.ATTRIBUTES, 0); }
		public TerminalNode AVG() { return getToken(PostgreSQLParser.AVG, 0); }
		public TerminalNode BACKWARD() { return getToken(PostgreSQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(PostgreSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(PostgreSQLParser.BEGIN, 0); }
		public TerminalNode BERNOULLI() { return getToken(PostgreSQLParser.BERNOULLI, 0); }
		public TerminalNode BETWEEN() { return getToken(PostgreSQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(PostgreSQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(PostgreSQLParser.BIT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(PostgreSQLParser.BIT_LENGTH, 0); }
		public TerminalNode BLOB() { return getToken(PostgreSQLParser.BLOB, 0); }
		public TerminalNode BOOLEAN() { return getToken(PostgreSQLParser.BOOLEAN, 0); }
		public TerminalNode BREADTH() { return getToken(PostgreSQLParser.BREADTH, 0); }
		public TerminalNode BY() { return getToken(PostgreSQLParser.BY, 0); }
		public TerminalNode C_() { return getToken(PostgreSQLParser.C_, 0); }
		public TerminalNode CACHE() { return getToken(PostgreSQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PostgreSQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(PostgreSQLParser.CALLED, 0); }
		public TerminalNode CARDINALITY() { return getToken(PostgreSQLParser.CARDINALITY, 0); }
		public TerminalNode CASCADE() { return getToken(PostgreSQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(PostgreSQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(PostgreSQLParser.CATALOG, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(PostgreSQLParser.CATALOG_NAME, 0); }
		public TerminalNode CEIL() { return getToken(PostgreSQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(PostgreSQLParser.CEILING, 0); }
		public TerminalNode CHAIN() { return getToken(PostgreSQLParser.CHAIN, 0); }
		public TerminalNode CHAR() { return getToken(PostgreSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PostgreSQLParser.CHARACTER, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(PostgreSQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHARACTERS() { return getToken(PostgreSQLParser.CHARACTERS, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(PostgreSQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARACTER_SET_CATALOG() { return getToken(PostgreSQLParser.CHARACTER_SET_CATALOG, 0); }
		public TerminalNode CHARACTER_SET_NAME() { return getToken(PostgreSQLParser.CHARACTER_SET_NAME, 0); }
		public TerminalNode CHARACTER_SET_SCHEMA() { return getToken(PostgreSQLParser.CHARACTER_SET_SCHEMA, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(PostgreSQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHECKPOINT() { return getToken(PostgreSQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(PostgreSQLParser.CLASS, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(PostgreSQLParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLOB() { return getToken(PostgreSQLParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PostgreSQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PostgreSQLParser.CLUSTER, 0); }
		public TerminalNode COALESCE() { return getToken(PostgreSQLParser.COALESCE, 0); }
		public TerminalNode COBOL() { return getToken(PostgreSQLParser.COBOL, 0); }
		public TerminalNode COLLATION_CATALOG() { return getToken(PostgreSQLParser.COLLATION_CATALOG, 0); }
		public TerminalNode COLLATION_NAME() { return getToken(PostgreSQLParser.COLLATION_NAME, 0); }
		public TerminalNode COLLATION_SCHEMA() { return getToken(PostgreSQLParser.COLLATION_SCHEMA, 0); }
		public TerminalNode COLLECT() { return getToken(PostgreSQLParser.COLLECT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(PostgreSQLParser.COLUMN_NAME, 0); }
		public TerminalNode COMMAND_FUNCTION() { return getToken(PostgreSQLParser.COMMAND_FUNCTION, 0); }
		public TerminalNode COMMAND_FUNCTION_CODE() { return getToken(PostgreSQLParser.COMMAND_FUNCTION_CODE, 0); }
		public TerminalNode COMMENT() { return getToken(PostgreSQLParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PostgreSQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PostgreSQLParser.COMMITTED, 0); }
		public TerminalNode CONDITION() { return getToken(PostgreSQLParser.CONDITION, 0); }
		public TerminalNode CONDITION_NUMBER() { return getToken(PostgreSQLParser.CONDITION_NUMBER, 0); }
		public TerminalNode CONNECT() { return getToken(PostgreSQLParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(PostgreSQLParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_NAME() { return getToken(PostgreSQLParser.CONNECTION_NAME, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PostgreSQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(PostgreSQLParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(PostgreSQLParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(PostgreSQLParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PostgreSQLParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTAINS() { return getToken(PostgreSQLParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(PostgreSQLParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(PostgreSQLParser.CONVERSION, 0); }
		public TerminalNode CONVERT() { return getToken(PostgreSQLParser.CONVERT, 0); }
		public TerminalNode COPY() { return getToken(PostgreSQLParser.COPY, 0); }
		public TerminalNode CORR() { return getToken(PostgreSQLParser.CORR, 0); }
		public TerminalNode CORRESPONDING() { return getToken(PostgreSQLParser.CORRESPONDING, 0); }
		public TerminalNode COUNT() { return getToken(PostgreSQLParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(PostgreSQLParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(PostgreSQLParser.COVAR_SAMP, 0); }
		public TerminalNode CSV() { return getToken(PostgreSQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(PostgreSQLParser.CUBE, 0); }
		public TerminalNode CUME_DIST() { return getToken(PostgreSQLParser.CUME_DIST, 0); }
		public TerminalNode CURRENT() { return getToken(PostgreSQLParser.CURRENT, 0); }
		public TerminalNode CURRENT_DEFAULT_TRANSFORM_GROUP() { return getToken(PostgreSQLParser.CURRENT_DEFAULT_TRANSFORM_GROUP, 0); }
		public TerminalNode CURRENT_PATH() { return getToken(PostgreSQLParser.CURRENT_PATH, 0); }
		public TerminalNode CURRENT_TRANSFORM_GROUP_FOR_TYPE() { return getToken(PostgreSQLParser.CURRENT_TRANSFORM_GROUP_FOR_TYPE, 0); }
		public TerminalNode CURSOR() { return getToken(PostgreSQLParser.CURSOR, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(PostgreSQLParser.CURSOR_NAME, 0); }
		public TerminalNode CYCLE() { return getToken(PostgreSQLParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PostgreSQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PostgreSQLParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(PostgreSQLParser.DATE, 0); }
		public TerminalNode DATETIME_INTERVAL_CODE() { return getToken(PostgreSQLParser.DATETIME_INTERVAL_CODE, 0); }
		public TerminalNode DATETIME_INTERVAL_PRECISION() { return getToken(PostgreSQLParser.DATETIME_INTERVAL_PRECISION, 0); }
		public TerminalNode DAY() { return getToken(PostgreSQLParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(PostgreSQLParser.DEALLOCATE, 0); }
		public TerminalNode DEC() { return getToken(PostgreSQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PostgreSQLParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(PostgreSQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(PostgreSQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PostgreSQLParser.DEFERRED, 0); }
		public TerminalNode DEFINED() { return getToken(PostgreSQLParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(PostgreSQLParser.DEFINER, 0); }
		public TerminalNode DEGREE() { return getToken(PostgreSQLParser.DEGREE, 0); }
		public TerminalNode DELETE() { return getToken(PostgreSQLParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(PostgreSQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(PostgreSQLParser.DELIMITERS, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PostgreSQLParser.DENSE_RANK, 0); }
		public TerminalNode DEPTH() { return getToken(PostgreSQLParser.DEPTH, 0); }
		public TerminalNode DEREF() { return getToken(PostgreSQLParser.DEREF, 0); }
		public TerminalNode DERIVED() { return getToken(PostgreSQLParser.DERIVED, 0); }
		public TerminalNode DESCRIBE() { return getToken(PostgreSQLParser.DESCRIBE, 0); }
		public TerminalNode DESCRIPTOR() { return getToken(PostgreSQLParser.DESCRIPTOR, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PostgreSQLParser.DETERMINISTIC, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(PostgreSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DICTIONARY() { return getToken(PostgreSQLParser.DICTIONARY, 0); }
		public TerminalNode DISCONNECT() { return getToken(PostgreSQLParser.DISCONNECT, 0); }
		public TerminalNode DISPATCH() { return getToken(PostgreSQLParser.DISPATCH, 0); }
		public TerminalNode DOMAIN() { return getToken(PostgreSQLParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(PostgreSQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(PostgreSQLParser.DROP, 0); }
		public TerminalNode DYNAMIC() { return getToken(PostgreSQLParser.DYNAMIC, 0); }
		public TerminalNode DYNAMIC_FUNCTION() { return getToken(PostgreSQLParser.DYNAMIC_FUNCTION, 0); }
		public TerminalNode DYNAMIC_FUNCTION_CODE() { return getToken(PostgreSQLParser.DYNAMIC_FUNCTION_CODE, 0); }
		public TerminalNode EACH() { return getToken(PostgreSQLParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PostgreSQLParser.ELEMENT, 0); }
		public TerminalNode ENCODING() { return getToken(PostgreSQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(PostgreSQLParser.ENCRYPTED, 0); }
		public TerminalNode END() { return getToken(PostgreSQLParser.END, 0); }
		public TerminalNode EQUALS() { return getToken(PostgreSQLParser.EQUALS, 0); }
		public TerminalNode ESCAPE() { return getToken(PostgreSQLParser.ESCAPE, 0); }
		public TerminalNode EVERY() { return getToken(PostgreSQLParser.EVERY, 0); }
		public TerminalNode EXCEPTION() { return getToken(PostgreSQLParser.EXCEPTION, 0); }
		public TerminalNode EXCLUDE() { return getToken(PostgreSQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(PostgreSQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PostgreSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXEC() { return getToken(PostgreSQLParser.EXEC, 0); }
		public TerminalNode EXECUTE() { return getToken(PostgreSQLParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(PostgreSQLParser.EXISTS, 0); }
		public TerminalNode EXP() { return getToken(PostgreSQLParser.EXP, 0); }
		public TerminalNode EXPLAIN() { return getToken(PostgreSQLParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PostgreSQLParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PostgreSQLParser.EXTRACT, 0); }
		public TerminalNode FILTER() { return getToken(PostgreSQLParser.FILTER, 0); }
		public TerminalNode FINAL() { return getToken(PostgreSQLParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PostgreSQLParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(PostgreSQLParser.FLOAT, 0); }
		public TerminalNode FLOOR() { return getToken(PostgreSQLParser.FLOOR, 0); }
		public TerminalNode FOLLOWING() { return getToken(PostgreSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(PostgreSQLParser.FORCE, 0); }
		public TerminalNode FORTRAN() { return getToken(PostgreSQLParser.FORTRAN, 0); }
		public TerminalNode FORWARD() { return getToken(PostgreSQLParser.FORWARD, 0); }
		public TerminalNode FOUND() { return getToken(PostgreSQLParser.FOUND, 0); }
		public TerminalNode FREE() { return getToken(PostgreSQLParser.FREE, 0); }
		public TerminalNode FUNCTION() { return getToken(PostgreSQLParser.FUNCTION, 0); }
		public TerminalNode FUSION() { return getToken(PostgreSQLParser.FUSION, 0); }
		public TerminalNode G_() { return getToken(PostgreSQLParser.G_, 0); }
		public TerminalNode GENERAL() { return getToken(PostgreSQLParser.GENERAL, 0); }
		public TerminalNode GENERATED() { return getToken(PostgreSQLParser.GENERATED, 0); }
		public TerminalNode GET() { return getToken(PostgreSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(PostgreSQLParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(PostgreSQLParser.GO, 0); }
		public TerminalNode GOTO() { return getToken(PostgreSQLParser.GOTO, 0); }
		public TerminalNode GRANTED() { return getToken(PostgreSQLParser.GRANTED, 0); }
		public TerminalNode GROUPING() { return getToken(PostgreSQLParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(PostgreSQLParser.HANDLER, 0); }
		public TerminalNode HIERARCHY() { return getToken(PostgreSQLParser.HIERARCHY, 0); }
		public TerminalNode HOLD() { return getToken(PostgreSQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(PostgreSQLParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(PostgreSQLParser.IDENTITY, 0); }
		public TerminalNode IGNORE() { return getToken(PostgreSQLParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PostgreSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(PostgreSQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLEMENTATION() { return getToken(PostgreSQLParser.IMPLEMENTATION, 0); }
		public TerminalNode IMPLICIT() { return getToken(PostgreSQLParser.IMPLICIT, 0); }
		public TerminalNode INCLUDING() { return getToken(PostgreSQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PostgreSQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(PostgreSQLParser.INDEX, 0); }
		public TerminalNode INDICATOR() { return getToken(PostgreSQLParser.INDICATOR, 0); }
		public TerminalNode INHERITS() { return getToken(PostgreSQLParser.INHERITS, 0); }
		public TerminalNode INOUT() { return getToken(PostgreSQLParser.INOUT, 0); }
		public TerminalNode INPUT() { return getToken(PostgreSQLParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(PostgreSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(PostgreSQLParser.INSERT, 0); }
		public TerminalNode INSTANCE() { return getToken(PostgreSQLParser.INSTANCE, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PostgreSQLParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PostgreSQLParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PostgreSQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PostgreSQLParser.INTEGER, 0); }
		public TerminalNode INTERSECTION() { return getToken(PostgreSQLParser.INTERSECTION, 0); }
		public TerminalNode INTERVAL() { return getToken(PostgreSQLParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(PostgreSQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(PostgreSQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(PostgreSQLParser.KEY, 0); }
		public TerminalNode KEY_MEMBER() { return getToken(PostgreSQLParser.KEY_MEMBER, 0); }
		public TerminalNode KEY_TYPE() { return getToken(PostgreSQLParser.KEY_TYPE, 0); }
		public TerminalNode LANGUAGE() { return getToken(PostgreSQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(PostgreSQLParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(PostgreSQLParser.LAST, 0); }
		public TerminalNode LEFT() { return getToken(PostgreSQLParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(PostgreSQLParser.LENGTH, 0); }
		public TerminalNode LEVEL() { return getToken(PostgreSQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(PostgreSQLParser.LISTEN, 0); }
		public TerminalNode LN() { return getToken(PostgreSQLParser.LN, 0); }
		public TerminalNode LOAD() { return getToken(PostgreSQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(PostgreSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(PostgreSQLParser.LOCATION, 0); }
		public TerminalNode LOCATOR() { return getToken(PostgreSQLParser.LOCATOR, 0); }
		public TerminalNode LOCK() { return getToken(PostgreSQLParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(PostgreSQLParser.LOCKED, 0); }
		public TerminalNode LOWER() { return getToken(PostgreSQLParser.LOWER, 0); }
		public TerminalNode M_() { return getToken(PostgreSQLParser.M_, 0); }
		public TerminalNode MAP() { return getToken(PostgreSQLParser.MAP, 0); }
		public TerminalNode MATCH() { return getToken(PostgreSQLParser.MATCH, 0); }
		public TerminalNode MATCHED() { return getToken(PostgreSQLParser.MATCHED, 0); }
		public TerminalNode MAX() { return getToken(PostgreSQLParser.MAX, 0); }
		public TerminalNode MAXVALUE() { return getToken(PostgreSQLParser.MAXVALUE, 0); }
		public TerminalNode MEMBER() { return getToken(PostgreSQLParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PostgreSQLParser.MERGE, 0); }
		public TerminalNode MESSAGE_LENGTH() { return getToken(PostgreSQLParser.MESSAGE_LENGTH, 0); }
		public TerminalNode MESSAGE_OCTET_LENGTH() { return getToken(PostgreSQLParser.MESSAGE_OCTET_LENGTH, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(PostgreSQLParser.MESSAGE_TEXT, 0); }
		public TerminalNode METHOD() { return getToken(PostgreSQLParser.METHOD, 0); }
		public TerminalNode MIN() { return getToken(PostgreSQLParser.MIN, 0); }
		public TerminalNode MINUTE() { return getToken(PostgreSQLParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PostgreSQLParser.MINVALUE, 0); }
		public TerminalNode MOD() { return getToken(PostgreSQLParser.MOD, 0); }
		public TerminalNode MODE() { return getToken(PostgreSQLParser.MODE, 0); }
		public TerminalNode MODIFIES() { return getToken(PostgreSQLParser.MODIFIES, 0); }
		public TerminalNode MODULE() { return getToken(PostgreSQLParser.MODULE, 0); }
		public TerminalNode MONTH() { return getToken(PostgreSQLParser.MONTH, 0); }
		public TerminalNode MORE_() { return getToken(PostgreSQLParser.MORE_, 0); }
		public TerminalNode MOVE() { return getToken(PostgreSQLParser.MOVE, 0); }
		public TerminalNode MULTISET() { return getToken(PostgreSQLParser.MULTISET, 0); }
		public TerminalNode MUMPS() { return getToken(PostgreSQLParser.MUMPS, 0); }
		public TerminalNode NAME() { return getToken(PostgreSQLParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(PostgreSQLParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(PostgreSQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(PostgreSQLParser.NCHAR, 0); }
		public TerminalNode NCLOB() { return getToken(PostgreSQLParser.NCLOB, 0); }
		public TerminalNode NESTING() { return getToken(PostgreSQLParser.NESTING, 0); }
		public TerminalNode NEW() { return getToken(PostgreSQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(PostgreSQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(PostgreSQLParser.NO, 0); }
		public TerminalNode NONE() { return getToken(PostgreSQLParser.NONE, 0); }
		public TerminalNode NORMALIZE() { return getToken(PostgreSQLParser.NORMALIZE, 0); }
		public TerminalNode NORMALIZED() { return getToken(PostgreSQLParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(PostgreSQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(PostgreSQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(PostgreSQLParser.NOWAIT, 0); }
		public TerminalNode NULLABLE() { return getToken(PostgreSQLParser.NULLABLE, 0); }
		public TerminalNode NULLIF() { return getToken(PostgreSQLParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(PostgreSQLParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PostgreSQLParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PostgreSQLParser.NUMERIC, 0); }
		public TerminalNode OBJECT() { return getToken(PostgreSQLParser.OBJECT, 0); }
		public TerminalNode OCTETS() { return getToken(PostgreSQLParser.OCTETS, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(PostgreSQLParser.OCTET_LENGTH, 0); }
		public TerminalNode OF() { return getToken(PostgreSQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(PostgreSQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(PostgreSQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(PostgreSQLParser.OLD, 0); }
		public TerminalNode OPEN() { return getToken(PostgreSQLParser.OPEN, 0); }
		public TerminalNode OPERATOR() { return getToken(PostgreSQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(PostgreSQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(PostgreSQLParser.OPTIONS, 0); }
		public TerminalNode ORDERING() { return getToken(PostgreSQLParser.ORDERING, 0); }
		public TerminalNode ORDINALITY() { return getToken(PostgreSQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(PostgreSQLParser.OTHERS, 0); }
		public TerminalNode OUT() { return getToken(PostgreSQLParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(PostgreSQLParser.OUTPUT, 0); }
		public TerminalNode OVER() { return getToken(PostgreSQLParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(PostgreSQLParser.OVERLAY, 0); }
		public TerminalNode OVERRIDING() { return getToken(PostgreSQLParser.OVERRIDING, 0); }
		public TerminalNode OWNER() { return getToken(PostgreSQLParser.OWNER, 0); }
		public TerminalNode PAD() { return getToken(PostgreSQLParser.PAD, 0); }
		public TerminalNode PARAMETER() { return getToken(PostgreSQLParser.PARAMETER, 0); }
		public TerminalNode PARAMETER_MODE() { return getToken(PostgreSQLParser.PARAMETER_MODE, 0); }
		public TerminalNode PARAMETER_NAME() { return getToken(PostgreSQLParser.PARAMETER_NAME, 0); }
		public TerminalNode PARAMETER_ORDINAL_POSITION() { return getToken(PostgreSQLParser.PARAMETER_ORDINAL_POSITION, 0); }
		public TerminalNode PARAMETER_SPECIFIC_CATALOG() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_CATALOG, 0); }
		public TerminalNode PARAMETER_SPECIFIC_NAME() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_NAME, 0); }
		public TerminalNode PARAMETER_SPECIFIC_SCHEMA() { return getToken(PostgreSQLParser.PARAMETER_SPECIFIC_SCHEMA, 0); }
		public TerminalNode PARTIAL() { return getToken(PostgreSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(PostgreSQLParser.PARTITION, 0); }
		public TerminalNode PASCAL() { return getToken(PostgreSQLParser.PASCAL, 0); }
		public TerminalNode PASSWORD() { return getToken(PostgreSQLParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(PostgreSQLParser.PATH, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PostgreSQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PostgreSQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PostgreSQLParser.PERCENT_RANK, 0); }
		public TerminalNode PLI() { return getToken(PostgreSQLParser.PLI, 0); }
		public TerminalNode POSITION() { return getToken(PostgreSQLParser.POSITION, 0); }
		public TerminalNode POWER() { return getToken(PostgreSQLParser.POWER, 0); }
		public TerminalNode PRECEDING() { return getToken(PostgreSQLParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PostgreSQLParser.PRECISION, 0); }
		public TerminalNode PREPARE() { return getToken(PostgreSQLParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(PostgreSQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(PostgreSQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PostgreSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(PostgreSQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(PostgreSQLParser.PROCEDURE, 0); }
		public TerminalNode PUBLIC() { return getToken(PostgreSQLParser.PUBLIC, 0); }
		public TerminalNode QUOTE() { return getToken(PostgreSQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(PostgreSQLParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(PostgreSQLParser.RANK, 0); }
		public TerminalNode READ() { return getToken(PostgreSQLParser.READ, 0); }
		public TerminalNode READS() { return getToken(PostgreSQLParser.READS, 0); }
		public TerminalNode REAL() { return getToken(PostgreSQLParser.REAL, 0); }
		public TerminalNode RECHECK() { return getToken(PostgreSQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(PostgreSQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(PostgreSQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(PostgreSQLParser.REFERENCING, 0); }
		public TerminalNode REGR_AVGX() { return getToken(PostgreSQLParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(PostgreSQLParser.REGR_AVGY, 0); }
		public TerminalNode REGR_COUNT() { return getToken(PostgreSQLParser.REGR_COUNT, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(PostgreSQLParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(PostgreSQLParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_SXX() { return getToken(PostgreSQLParser.REGR_SXX, 0); }
		public TerminalNode REGR_SXY() { return getToken(PostgreSQLParser.REGR_SXY, 0); }
		public TerminalNode REGR_SYY() { return getToken(PostgreSQLParser.REGR_SYY, 0); }
		public TerminalNode REINDEX() { return getToken(PostgreSQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(PostgreSQLParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(PostgreSQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(PostgreSQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(PostgreSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(PostgreSQLParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(PostgreSQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(PostgreSQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(PostgreSQLParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(PostgreSQLParser.RESULT, 0); }
		public TerminalNode RETURN() { return getToken(PostgreSQLParser.RETURN, 0); }
		public TerminalNode RETURNED_CARDINALITY() { return getToken(PostgreSQLParser.RETURNED_CARDINALITY, 0); }
		public TerminalNode RETURNED_LENGTH() { return getToken(PostgreSQLParser.RETURNED_LENGTH, 0); }
		public TerminalNode RETURNED_OCTET_LENGTH() { return getToken(PostgreSQLParser.RETURNED_OCTET_LENGTH, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(PostgreSQLParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(PostgreSQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(PostgreSQLParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PostgreSQLParser.RIGHT, 0); }
		public TerminalNode ROLE() { return getToken(PostgreSQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PostgreSQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PostgreSQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(PostgreSQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINE_CATALOG() { return getToken(PostgreSQLParser.ROUTINE_CATALOG, 0); }
		public TerminalNode ROUTINE_NAME() { return getToken(PostgreSQLParser.ROUTINE_NAME, 0); }
		public TerminalNode ROUTINE_SCHEMA() { return getToken(PostgreSQLParser.ROUTINE_SCHEMA, 0); }
		public TerminalNode ROW() { return getToken(PostgreSQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(PostgreSQLParser.ROWS, 0); }
		public TerminalNode ROW_COUNT() { return getToken(PostgreSQLParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PostgreSQLParser.ROW_NUMBER, 0); }
		public TerminalNode RULE() { return getToken(PostgreSQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PostgreSQLParser.SAVEPOINT, 0); }
		public TerminalNode SCALE() { return getToken(PostgreSQLParser.SCALE, 0); }
		public TerminalNode SCHEMA() { return getToken(PostgreSQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(PostgreSQLParser.SCHEMA_NAME, 0); }
		public TerminalNode SCOPE() { return getToken(PostgreSQLParser.SCOPE, 0); }
		public TerminalNode SCOPE_CATALOG() { return getToken(PostgreSQLParser.SCOPE_CATALOG, 0); }
		public TerminalNode SCOPE_NAME() { return getToken(PostgreSQLParser.SCOPE_NAME, 0); }
		public TerminalNode SCOPE_SCHEMA() { return getToken(PostgreSQLParser.SCOPE_SCHEMA, 0); }
		public TerminalNode SCROLL() { return getToken(PostgreSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(PostgreSQLParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(PostgreSQLParser.SECOND, 0); }
		public TerminalNode SECTION() { return getToken(PostgreSQLParser.SECTION, 0); }
		public TerminalNode SECURITY() { return getToken(PostgreSQLParser.SECURITY, 0); }
		public TerminalNode SELF() { return getToken(PostgreSQLParser.SELF, 0); }
		public TerminalNode SENSITIVE() { return getToken(PostgreSQLParser.SENSITIVE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PostgreSQLParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PostgreSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER_NAME() { return getToken(PostgreSQLParser.SERVER_NAME, 0); }
		public TerminalNode SESSION() { return getToken(PostgreSQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(PostgreSQLParser.SET, 0); }
		public TerminalNode SETOF() { return getToken(PostgreSQLParser.SETOF, 0); }
		public TerminalNode SETS() { return getToken(PostgreSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(PostgreSQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(PostgreSQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(PostgreSQLParser.SIMPLE, 0); }
		public TerminalNode SIZE() { return getToken(PostgreSQLParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(PostgreSQLParser.SMALLINT, 0); }
		public TerminalNode SOURCE() { return getToken(PostgreSQLParser.SOURCE, 0); }
		public TerminalNode SPACE() { return getToken(PostgreSQLParser.SPACE, 0); }
		public TerminalNode SPECIFIC() { return getToken(PostgreSQLParser.SPECIFIC, 0); }
		public TerminalNode SPECIFICTYPE() { return getToken(PostgreSQLParser.SPECIFICTYPE, 0); }
		public TerminalNode SPECIFIC_NAME() { return getToken(PostgreSQLParser.SPECIFIC_NAME, 0); }
		public TerminalNode SQL() { return getToken(PostgreSQLParser.SQL, 0); }
		public TerminalNode SQLCODE() { return getToken(PostgreSQLParser.SQLCODE, 0); }
		public TerminalNode SQLERROR() { return getToken(PostgreSQLParser.SQLERROR, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(PostgreSQLParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(PostgreSQLParser.SQLSTATE, 0); }
		public TerminalNode SQLWARNING() { return getToken(PostgreSQLParser.SQLWARNING, 0); }
		public TerminalNode SQRT() { return getToken(PostgreSQLParser.SQRT, 0); }
		public TerminalNode STABLE() { return getToken(PostgreSQLParser.STABLE, 0); }
		public TerminalNode START() { return getToken(PostgreSQLParser.START, 0); }
		public TerminalNode STATE() { return getToken(PostgreSQLParser.STATE, 0); }
		public TerminalNode STATEMENT() { return getToken(PostgreSQLParser.STATEMENT, 0); }
		public TerminalNode STATIC() { return getToken(PostgreSQLParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PostgreSQLParser.STATISTICS, 0); }
		public TerminalNode STDDEV_POP() { return getToken(PostgreSQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(PostgreSQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STDIN() { return getToken(PostgreSQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(PostgreSQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(PostgreSQLParser.STORAGE, 0); }
		public TerminalNode STRICT() { return getToken(PostgreSQLParser.STRICT, 0); }
		public TerminalNode STRUCTURE() { return getToken(PostgreSQLParser.STRUCTURE, 0); }
		public TerminalNode STYLE() { return getToken(PostgreSQLParser.STYLE, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(PostgreSQLParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PostgreSQLParser.SUBMULTISET, 0); }
		public TerminalNode SUBSTRING() { return getToken(PostgreSQLParser.SUBSTRING, 0); }
		public TerminalNode SUM() { return getToken(PostgreSQLParser.SUM, 0); }
		public TerminalNode SYSID() { return getToken(PostgreSQLParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(PostgreSQLParser.SYSTEM, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(PostgreSQLParser.SYSTEM_USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(PostgreSQLParser.TABLESPACE, 0); }
		public TerminalNode TABLE_NAME() { return getToken(PostgreSQLParser.TABLE_NAME, 0); }
		public TerminalNode TEMP() { return getToken(PostgreSQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(PostgreSQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PostgreSQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(PostgreSQLParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(PostgreSQLParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(PostgreSQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PostgreSQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PostgreSQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PostgreSQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TOP_LEVEL_COUNT() { return getToken(PostgreSQLParser.TOP_LEVEL_COUNT, 0); }
		public TerminalNode TRANSACTION() { return getToken(PostgreSQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS_COMMITTED() { return getToken(PostgreSQLParser.TRANSACTIONS_COMMITTED, 0); }
		public TerminalNode TRANSACTIONS_ROLLED_BACK() { return getToken(PostgreSQLParser.TRANSACTIONS_ROLLED_BACK, 0); }
		public TerminalNode TRANSACTION_ACTIVE() { return getToken(PostgreSQLParser.TRANSACTION_ACTIVE, 0); }
		public TerminalNode TRANSFORM() { return getToken(PostgreSQLParser.TRANSFORM, 0); }
		public TerminalNode TRANSFORMS() { return getToken(PostgreSQLParser.TRANSFORMS, 0); }
		public TerminalNode TRANSLATE() { return getToken(PostgreSQLParser.TRANSLATE, 0); }
		public TerminalNode TRANSLATION() { return getToken(PostgreSQLParser.TRANSLATION, 0); }
		public TerminalNode TREAT() { return getToken(PostgreSQLParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PostgreSQLParser.TRIGGER, 0); }
		public TerminalNode TRIGGER_CATALOG() { return getToken(PostgreSQLParser.TRIGGER_CATALOG, 0); }
		public TerminalNode TRIGGER_NAME() { return getToken(PostgreSQLParser.TRIGGER_NAME, 0); }
		public TerminalNode TRIGGER_SCHEMA() { return getToken(PostgreSQLParser.TRIGGER_SCHEMA, 0); }
		public TerminalNode TRIM() { return getToken(PostgreSQLParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PostgreSQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(PostgreSQLParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(PostgreSQLParser.TYPE, 0); }
		public TerminalNode UESCAPE() { return getToken(PostgreSQLParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PostgreSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(PostgreSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNDER() { return getToken(PostgreSQLParser.UNDER, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(PostgreSQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(PostgreSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(PostgreSQLParser.UNLISTEN, 0); }
		public TerminalNode UNNAMED() { return getToken(PostgreSQLParser.UNNAMED, 0); }
		public TerminalNode UNNEST() { return getToken(PostgreSQLParser.UNNEST, 0); }
		public TerminalNode UNTIL() { return getToken(PostgreSQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(PostgreSQLParser.UPDATE, 0); }
		public TerminalNode UPPER() { return getToken(PostgreSQLParser.UPPER, 0); }
		public TerminalNode USAGE() { return getToken(PostgreSQLParser.USAGE, 0); }
		public TerminalNode USER_DEFINED_TYPE_CATALOG() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_CATALOG, 0); }
		public TerminalNode USER_DEFINED_TYPE_CODE() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_CODE, 0); }
		public TerminalNode USER_DEFINED_TYPE_NAME() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_NAME, 0); }
		public TerminalNode USER_DEFINED_TYPE_SCHEMA() { return getToken(PostgreSQLParser.USER_DEFINED_TYPE_SCHEMA, 0); }
		public TerminalNode VACUUM() { return getToken(PostgreSQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(PostgreSQLParser.VALID, 0); }
		public TerminalNode VALIDATOR() { return getToken(PostgreSQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(PostgreSQLParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(PostgreSQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(PostgreSQLParser.VARCHAR, 0); }
		public TerminalNode VARYING() { return getToken(PostgreSQLParser.VARYING, 0); }
		public TerminalNode VAR_POP() { return getToken(PostgreSQLParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(PostgreSQLParser.VAR_SAMP, 0); }
		public TerminalNode VIEW() { return getToken(PostgreSQLParser.VIEW, 0); }
		public TerminalNode VOLATILE() { return getToken(PostgreSQLParser.VOLATILE, 0); }
		public TerminalNode WHENEVER() { return getToken(PostgreSQLParser.WHENEVER, 0); }
		public TerminalNode WHITESPACE() { return getToken(PostgreSQLParser.WHITESPACE, 0); }
		public TerminalNode WIDTH_BUCKET() { return getToken(PostgreSQLParser.WIDTH_BUCKET, 0); }
		public TerminalNode WITHIN() { return getToken(PostgreSQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(PostgreSQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(PostgreSQLParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PostgreSQLParser.WRITE, 0); }
		public TerminalNode YEAR() { return getToken(PostgreSQLParser.YEAR, 0); }
		public TerminalNode ZONE() { return getToken(PostgreSQLParser.ZONE, 0); }
		public Non_reserved_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterNon_reserved_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitNon_reserved_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitNon_reserved_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_keywordContext non_reserved_keyword() throws RecognitionException {
		Non_reserved_keywordContext _localctx = new Non_reserved_keywordContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_non_reserved_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHITESPACE) | (1L << A_) | (1L << ABORT) | (1L << ABS) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADA) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALLOCATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ARE) | (1L << ASENSITIVE) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATOMIC) | (1L << ATTRIBUTE) | (1L << ATTRIBUTES) | (1L << AVG) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BERNOULLI) | (1L << BETWEEN) | (1L << BIGINT) | (1L << BIT) | (1L << BIT_LENGTH) | (1L << BLOB) | (1L << BOOLEAN) | (1L << BREADTH) | (1L << BY) | (1L << C_) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CARDINALITY) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CATALOG_NAME - 64)) | (1L << (CEIL - 64)) | (1L << (CEILING - 64)) | (1L << (CHAIN - 64)) | (1L << (CHAR - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHARACTERISTICS - 64)) | (1L << (CHARACTERS - 64)) | (1L << (CHARACTER_LENGTH - 64)) | (1L << (CHARACTER_SET_CATALOG - 64)) | (1L << (CHARACTER_SET_NAME - 64)) | (1L << (CHARACTER_SET_SCHEMA - 64)) | (1L << (CHAR_LENGTH - 64)) | (1L << (CHECKPOINT - 64)) | (1L << (CLASS - 64)) | (1L << (CLASS_ORIGIN - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COBOL - 64)) | (1L << (COLLATION_CATALOG - 64)) | (1L << (COLLATION_NAME - 64)) | (1L << (COLLATION_SCHEMA - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN_NAME - 64)) | (1L << (COMMAND_FUNCTION - 64)) | (1L << (COMMAND_FUNCTION_CODE - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (CONDITION - 64)) | (1L << (CONDITION_NUMBER - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECTION - 64)) | (1L << (CONNECTION_NAME - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRAINT_CATALOG - 64)) | (1L << (CONSTRAINT_NAME - 64)) | (1L << (CONSTRAINT_SCHEMA - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINS - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERSION - 64)) | (1L << (CONVERT - 64)) | (1L << (COPY - 64)) | (1L << (CORR - 64)) | (1L << (CORRESPONDING - 64)) | (1L << (COUNT - 64)) | (1L << (COVAR_POP - 64)) | (1L << (COVAR_SAMP - 64)) | (1L << (CSV - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CUBE - 128)) | (1L << (CUME_DIST - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DEFAULT_TRANSFORM_GROUP - 128)) | (1L << (CURRENT_PATH - 128)) | (1L << (CURRENT_TRANSFORM_GROUP_FOR_TYPE - 128)) | (1L << (CURSOR - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME_INTERVAL_CODE - 128)) | (1L << (DATETIME_INTERVAL_PRECISION - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINED - 128)) | (1L << (DEFINER - 128)) | (1L << (DEGREE - 128)) | (1L << (DELETE - 128)) | (1L << (DELIMITER - 128)) | (1L << (DELIMITERS - 128)) | (1L << (DENSE_RANK - 128)) | (1L << (DEPTH - 128)) | (1L << (DEREF - 128)) | (1L << (DERIVED - 128)) | (1L << (DESCRIBE - 128)) | (1L << (DESCRIPTOR - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIAGNOSTICS - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISCONNECT - 128)) | (1L << (DISPATCH - 128)) | (1L << (DOMAIN - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DYNAMIC_FUNCTION - 128)) | (1L << (DYNAMIC_FUNCTION_CODE - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPTED - 128)) | (1L << (END - 128)) | (1L << (EQUALS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ESCAPE - 192)) | (1L << (EVERY - 192)) | (1L << (EXCEPTION - 192)) | (1L << (EXCLUDE - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXCLUSIVE - 192)) | (1L << (EXEC - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXISTS - 192)) | (1L << (EXP - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FLOAT - 192)) | (1L << (FLOOR - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)) | (1L << (FORTRAN - 192)) | (1L << (FORWARD - 192)) | (1L << (FOUND - 192)) | (1L << (FREE - 192)) | (1L << (FUNCTION - 192)) | (1L << (FUSION - 192)) | (1L << (G_ - 192)) | (1L << (GENERAL - 192)) | (1L << (GENERATED - 192)) | (1L << (GET - 192)) | (1L << (GLOBAL - 192)) | (1L << (GO - 192)) | (1L << (GOTO - 192)) | (1L << (GRANTED - 192)) | (1L << (GROUPING - 192)) | (1L << (HANDLER - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HOLD - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTITY - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (IMMUTABLE - 192)) | (1L << (IMPLEMENTATION - 192)) | (1L << (IMPLICIT - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDEX - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDICATOR - 256)) | (1L << (INHERITS - 256)) | (1L << (INOUT - 256)) | (1L << (INPUT - 256)) | (1L << (INSENSITIVE - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANCE - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECTION - 256)) | (1L << (INTERVAL - 256)) | (1L << (INVOKER - 256)) | (1L << (ISOLATION - 256)) | (1L << (KEY - 256)) | (1L << (KEY_MEMBER - 256)) | (1L << (KEY_TYPE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LEFT - 256)) | (1L << (LENGTH - 256)) | (1L << (LEVEL - 256)) | (1L << (LISTEN - 256)) | (1L << (LN - 256)) | (1L << (LOAD - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCK - 256)) | (1L << (LOCKED - 256)) | (1L << (LOWER - 256)) | (1L << (M_ - 256)) | (1L << (MAP - 256)) | (1L << (MATCH - 256)) | (1L << (MATCHED - 256)) | (1L << (MAX - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEMBER - 256)) | (1L << (MERGE - 256)) | (1L << (MESSAGE_LENGTH - 256)) | (1L << (MESSAGE_OCTET_LENGTH - 256)) | (1L << (MESSAGE_TEXT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (METHOD - 320)) | (1L << (MIN - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MOD - 320)) | (1L << (MODE - 320)) | (1L << (MODIFIES - 320)) | (1L << (MODULE - 320)) | (1L << (MONTH - 320)) | (1L << (MORE_ - 320)) | (1L << (MOVE - 320)) | (1L << (MULTISET - 320)) | (1L << (MUMPS - 320)) | (1L << (NAME - 320)) | (1L << (NAMES - 320)) | (1L << (NATIONAL - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTING - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NO - 320)) | (1L << (NONE - 320)) | (1L << (NORMALIZE - 320)) | (1L << (NORMALIZED - 320)) | (1L << (NOTHING - 320)) | (1L << (NOTIFY - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULLABLE - 320)) | (1L << (NULLIF - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (OBJECT - 320)) | (1L << (OCTETS - 320)) | (1L << (OCTET_LENGTH - 320)) | (1L << (OF - 320)) | (1L << (OFF - 320)) | (1L << (OIDS - 320)) | (1L << (OLD - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTION - 320)) | (1L << (OPTIONS - 320)) | (1L << (ORDERING - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OTHERS - 320)) | (1L << (OUT - 320)) | (1L << (OUTPUT - 320)) | (1L << (OVER - 320)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (OVERLAY - 385)) | (1L << (OVERRIDING - 385)) | (1L << (OWNER - 385)) | (1L << (PAD - 385)) | (1L << (PARAMETER - 385)) | (1L << (PARAMETER_MODE - 385)) | (1L << (PARAMETER_NAME - 385)) | (1L << (PARAMETER_ORDINAL_POSITION - 385)) | (1L << (PARAMETER_SPECIFIC_CATALOG - 385)) | (1L << (PARAMETER_SPECIFIC_NAME - 385)) | (1L << (PARAMETER_SPECIFIC_SCHEMA - 385)) | (1L << (PARTIAL - 385)) | (1L << (PARTITION - 385)) | (1L << (PASCAL - 385)) | (1L << (PASSWORD - 385)) | (1L << (PATH - 385)) | (1L << (PERCENTILE_CONT - 385)) | (1L << (PERCENTILE_DISC - 385)) | (1L << (PERCENT_RANK - 385)) | (1L << (PLI - 385)) | (1L << (POSITION - 385)) | (1L << (POWER - 385)) | (1L << (PRECEDING - 385)) | (1L << (PRECISION - 385)) | (1L << (PREPARE - 385)) | (1L << (PRESERVE - 385)) | (1L << (PRIOR - 385)) | (1L << (PRIVILEGES - 385)) | (1L << (PROCEDURAL - 385)) | (1L << (PROCEDURE - 385)) | (1L << (PUBLIC - 385)) | (1L << (QUOTE - 385)) | (1L << (RANGE - 385)) | (1L << (RANK - 385)) | (1L << (READ - 385)) | (1L << (READS - 385)) | (1L << (REAL - 385)) | (1L << (RECHECK - 385)) | (1L << (RECURSIVE - 385)) | (1L << (REF - 385)) | (1L << (REFERENCING - 385)) | (1L << (REGR_AVGX - 385)) | (1L << (REGR_AVGY - 385)) | (1L << (REGR_COUNT - 385)) | (1L << (REGR_INTERCEPT - 385)) | (1L << (REGR_SLOPE - 385)) | (1L << (REGR_SXX - 385)) | (1L << (REGR_SXY - 385)) | (1L << (REGR_SYY - 385)) | (1L << (REINDEX - 385)) | (1L << (RELATIVE - 385)) | (1L << (RELEASE - 385)) | (1L << (RENAME - 385)) | (1L << (REPEATABLE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (REPLACE - 449)) | (1L << (RESET - 449)) | (1L << (RESTART - 449)) | (1L << (RESTRICT - 449)) | (1L << (RESULT - 449)) | (1L << (RETURN - 449)) | (1L << (RETURNED_CARDINALITY - 449)) | (1L << (RETURNED_LENGTH - 449)) | (1L << (RETURNED_OCTET_LENGTH - 449)) | (1L << (RETURNED_SQLSTATE - 449)) | (1L << (RETURNS - 449)) | (1L << (REVOKE - 449)) | (1L << (RIGHT - 449)) | (1L << (ROLE - 449)) | (1L << (ROLLBACK - 449)) | (1L << (ROLLUP - 449)) | (1L << (ROUTINE - 449)) | (1L << (ROUTINE_CATALOG - 449)) | (1L << (ROUTINE_NAME - 449)) | (1L << (ROUTINE_SCHEMA - 449)) | (1L << (ROW - 449)) | (1L << (ROWS - 449)) | (1L << (ROW_COUNT - 449)) | (1L << (ROW_NUMBER - 449)) | (1L << (RULE - 449)) | (1L << (SAVEPOINT - 449)) | (1L << (SCALE - 449)) | (1L << (SCHEMA - 449)) | (1L << (SCHEMA_NAME - 449)) | (1L << (SCOPE - 449)) | (1L << (SCOPE_CATALOG - 449)) | (1L << (SCOPE_NAME - 449)) | (1L << (SCOPE_SCHEMA - 449)) | (1L << (SCROLL - 449)) | (1L << (SEARCH - 449)) | (1L << (SECOND - 449)) | (1L << (SECTION - 449)) | (1L << (SECURITY - 449)) | (1L << (SELF - 449)) | (1L << (SENSITIVE - 449)) | (1L << (SEQUENCE - 449)) | (1L << (SERIALIZABLE - 449)) | (1L << (SERVER_NAME - 449)) | (1L << (SESSION - 449)) | (1L << (SET - 449)) | (1L << (SETOF - 449)) | (1L << (SETS - 449)) | (1L << (SHARE - 449)) | (1L << (SHOW - 449)) | (1L << (SIMPLE - 449)) | (1L << (SIZE - 449)) | (1L << (SMALLINT - 449)) | (1L << (SOURCE - 449)) | (1L << (SPACE - 449)) | (1L << (SPECIFIC - 449)) | (1L << (SPECIFICTYPE - 449)) | (1L << (SPECIFIC_NAME - 449)) | (1L << (SQL - 449)) | (1L << (SQLCODE - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SQLERROR - 513)) | (1L << (SQLEXCEPTION - 513)) | (1L << (SQLSTATE - 513)) | (1L << (SQLWARNING - 513)) | (1L << (SQRT - 513)) | (1L << (STABLE - 513)) | (1L << (START - 513)) | (1L << (STATE - 513)) | (1L << (STATEMENT - 513)) | (1L << (STATIC - 513)) | (1L << (STATISTICS - 513)) | (1L << (STDDEV_POP - 513)) | (1L << (STDDEV_SAMP - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (STORAGE - 513)) | (1L << (STRICT - 513)) | (1L << (STRUCTURE - 513)) | (1L << (STYLE - 513)) | (1L << (SUBCLASS_ORIGIN - 513)) | (1L << (SUBMULTISET - 513)) | (1L << (SUBSTRING - 513)) | (1L << (SUM - 513)) | (1L << (SYSID - 513)) | (1L << (SYSTEM - 513)) | (1L << (SYSTEM_USER - 513)) | (1L << (TABLESPACE - 513)) | (1L << (TABLE_NAME - 513)) | (1L << (TEMP - 513)) | (1L << (TEMPLATE - 513)) | (1L << (TEMPORARY - 513)) | (1L << (TIES - 513)) | (1L << (TIME - 513)) | (1L << (TIMESTAMP - 513)) | (1L << (TIMEZONE_HOUR - 513)) | (1L << (TIMEZONE_MINUTE - 513)) | (1L << (TOP_LEVEL_COUNT - 513)) | (1L << (TRANSACTION - 513)) | (1L << (TRANSACTIONS_COMMITTED - 513)) | (1L << (TRANSACTIONS_ROLLED_BACK - 513)) | (1L << (TRANSACTION_ACTIVE - 513)) | (1L << (TRANSFORM - 513)) | (1L << (TRANSFORMS - 513)) | (1L << (TRANSLATE - 513)) | (1L << (TRANSLATION - 513)) | (1L << (TREAT - 513)) | (1L << (TRIGGER - 513)) | (1L << (TRIGGER_CATALOG - 513)) | (1L << (TRIGGER_NAME - 513)) | (1L << (TRIGGER_SCHEMA - 513)) | (1L << (TRIM - 513)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (TRUNCATE - 578)) | (1L << (TRUSTED - 578)) | (1L << (TYPE - 578)) | (1L << (UESCAPE - 578)) | (1L << (UNBOUNDED - 578)) | (1L << (UNCOMMITTED - 578)) | (1L << (UNDER - 578)) | (1L << (UNENCRYPTED - 578)) | (1L << (UNKNOWN - 578)) | (1L << (UNLISTEN - 578)) | (1L << (UNNAMED - 578)) | (1L << (UNNEST - 578)) | (1L << (UNTIL - 578)) | (1L << (UPDATE - 578)) | (1L << (UPPER - 578)) | (1L << (USAGE - 578)) | (1L << (USER_DEFINED_TYPE_CATALOG - 578)) | (1L << (USER_DEFINED_TYPE_CODE - 578)) | (1L << (USER_DEFINED_TYPE_NAME - 578)) | (1L << (USER_DEFINED_TYPE_SCHEMA - 578)) | (1L << (VACUUM - 578)) | (1L << (VALID - 578)) | (1L << (VALIDATOR - 578)) | (1L << (VALUE - 578)) | (1L << (VALUES - 578)) | (1L << (VARCHAR - 578)) | (1L << (VARYING - 578)) | (1L << (VAR_POP - 578)) | (1L << (VAR_SAMP - 578)) | (1L << (VIEW - 578)) | (1L << (VOLATILE - 578)) | (1L << (WHENEVER - 578)) | (1L << (WIDTH_BUCKET - 578)) | (1L << (WITHIN - 578)) | (1L << (WITHOUT - 578)) | (1L << (WORK - 578)) | (1L << (WRITE - 578)) | (1L << (YEAR - 578)) | (1L << (ZONE - 578)))) != 0) || _la==TEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Non_reserved_keywordContext non_reserved_keyword() {
			return getRuleContext(Non_reserved_keywordContext.class,0);
		}
		public TerminalNode IDENTIFIER() { return getToken(PostgreSQLParser.IDENTIFIER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(PostgreSQLParser.DOT, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		return identifier(0);
	}

	private IdentifierContext identifier(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IdentifierContext _localctx = new IdentifierContext(_ctx, _parentState);
		IdentifierContext _prevctx = _localctx;
		int _startState = 462;
		enterRecursionRule(_localctx, 462, RULE_identifier, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHITESPACE:
			case A_:
			case ABORT:
			case ABS:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADA:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALLOCATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ARE:
			case ASENSITIVE:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATOMIC:
			case ATTRIBUTE:
			case ATTRIBUTES:
			case AVG:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BERNOULLI:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BIT_LENGTH:
			case BLOB:
			case BOOLEAN:
			case BREADTH:
			case BY:
			case C_:
			case CACHE:
			case CALL:
			case CALLED:
			case CARDINALITY:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CHAIN:
			case CHAR:
			case CHARACTER:
			case CHARACTERISTICS:
			case CHARACTERS:
			case CHARACTER_LENGTH:
			case CHARACTER_SET_CATALOG:
			case CHARACTER_SET_NAME:
			case CHARACTER_SET_SCHEMA:
			case CHAR_LENGTH:
			case CHECKPOINT:
			case CLASS:
			case CLASS_ORIGIN:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COBOL:
			case COLLATION_CATALOG:
			case COLLATION_NAME:
			case COLLATION_SCHEMA:
			case COLLECT:
			case COLUMN_NAME:
			case COMMAND_FUNCTION:
			case COMMAND_FUNCTION_CODE:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case CONDITION:
			case CONDITION_NUMBER:
			case CONNECT:
			case CONNECTION:
			case CONNECTION_NAME:
			case CONSTRAINTS:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONSTRUCTOR:
			case CONTAINS:
			case CONTINUE:
			case CONVERSION:
			case CONVERT:
			case COPY:
			case CORR:
			case CORRESPONDING:
			case COUNT:
			case COVAR_POP:
			case COVAR_SAMP:
			case CSV:
			case CUBE:
			case CUME_DIST:
			case CURRENT:
			case CURRENT_DEFAULT_TRANSFORM_GROUP:
			case CURRENT_PATH:
			case CURRENT_TRANSFORM_GROUP_FOR_TYPE:
			case CURSOR:
			case CURSOR_NAME:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DATETIME_INTERVAL_CODE:
			case DATETIME_INTERVAL_PRECISION:
			case DAY:
			case DEALLOCATE:
			case DEC:
			case DECIMAL:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINED:
			case DEFINER:
			case DEGREE:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DENSE_RANK:
			case DEPTH:
			case DEREF:
			case DERIVED:
			case DESCRIBE:
			case DESCRIPTOR:
			case DETERMINISTIC:
			case DIAGNOSTICS:
			case DICTIONARY:
			case DISCONNECT:
			case DISPATCH:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case DYNAMIC:
			case DYNAMIC_FUNCTION:
			case DYNAMIC_FUNCTION_CODE:
			case EACH:
			case ELEMENT:
			case ENCODING:
			case ENCRYPTED:
			case END:
			case EQUALS:
			case ESCAPE:
			case EVERY:
			case EXCEPTION:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXEC:
			case EXECUTE:
			case EXISTS:
			case EXP:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FINAL:
			case FIRST:
			case FLOAT:
			case FLOOR:
			case FOLLOWING:
			case FORCE:
			case FORTRAN:
			case FORWARD:
			case FOUND:
			case FREE:
			case FUNCTION:
			case FUSION:
			case G_:
			case GENERAL:
			case GENERATED:
			case GET:
			case GLOBAL:
			case GO:
			case GOTO:
			case GRANTED:
			case GROUPING:
			case HANDLER:
			case HIERARCHY:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IGNORE:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLEMENTATION:
			case IMPLICIT:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDICATOR:
			case INHERITS:
			case INOUT:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTANCE:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERSECTION:
			case INTERVAL:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case KEY_MEMBER:
			case KEY_TYPE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEFT:
			case LENGTH:
			case LEVEL:
			case LISTEN:
			case LN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCATOR:
			case LOCK:
			case LOCKED:
			case LOWER:
			case M_:
			case MAP:
			case MATCH:
			case MATCHED:
			case MAX:
			case MAXVALUE:
			case MEMBER:
			case MERGE:
			case MESSAGE_LENGTH:
			case MESSAGE_OCTET_LENGTH:
			case MESSAGE_TEXT:
			case METHOD:
			case MIN:
			case MINUTE:
			case MINVALUE:
			case MOD:
			case MODE:
			case MODIFIES:
			case MODULE:
			case MONTH:
			case MORE_:
			case MOVE:
			case MULTISET:
			case MUMPS:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NCLOB:
			case NESTING:
			case NEW:
			case NEXT:
			case NO:
			case NONE:
			case NORMALIZE:
			case NORMALIZED:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLABLE:
			case NULLIF:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case OBJECT:
			case OCTETS:
			case OCTET_LENGTH:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPEN:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDERING:
			case ORDINALITY:
			case OTHERS:
			case OUT:
			case OUTPUT:
			case OVER:
			case OVERLAY:
			case OVERRIDING:
			case OWNER:
			case PAD:
			case PARAMETER:
			case PARAMETER_MODE:
			case PARAMETER_NAME:
			case PARAMETER_ORDINAL_POSITION:
			case PARAMETER_SPECIFIC_CATALOG:
			case PARAMETER_SPECIFIC_NAME:
			case PARAMETER_SPECIFIC_SCHEMA:
			case PARTIAL:
			case PARTITION:
			case PASCAL:
			case PASSWORD:
			case PATH:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case PERCENT_RANK:
			case PLI:
			case POSITION:
			case POWER:
			case PRECEDING:
			case PRECISION:
			case PREPARE:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PUBLIC:
			case QUOTE:
			case RANGE:
			case RANK:
			case READ:
			case READS:
			case REAL:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_COUNT:
			case REGR_INTERCEPT:
			case REGR_SLOPE:
			case REGR_SXX:
			case REGR_SXY:
			case REGR_SYY:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RESULT:
			case RETURN:
			case RETURNED_CARDINALITY:
			case RETURNED_LENGTH:
			case RETURNED_OCTET_LENGTH:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REVOKE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINE_CATALOG:
			case ROUTINE_NAME:
			case ROUTINE_SCHEMA:
			case ROW:
			case ROWS:
			case ROW_COUNT:
			case ROW_NUMBER:
			case RULE:
			case SAVEPOINT:
			case SCALE:
			case SCHEMA:
			case SCHEMA_NAME:
			case SCOPE:
			case SCOPE_CATALOG:
			case SCOPE_NAME:
			case SCOPE_SCHEMA:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECTION:
			case SECURITY:
			case SELF:
			case SENSITIVE:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER_NAME:
			case SESSION:
			case SET:
			case SETOF:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SIZE:
			case SMALLINT:
			case SOURCE:
			case SPACE:
			case SPECIFIC:
			case SPECIFICTYPE:
			case SPECIFIC_NAME:
			case SQL:
			case SQLCODE:
			case SQLERROR:
			case SQLEXCEPTION:
			case SQLSTATE:
			case SQLWARNING:
			case SQRT:
			case STABLE:
			case START:
			case STATE:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STRICT:
			case STRUCTURE:
			case STYLE:
			case SUBCLASS_ORIGIN:
			case SUBMULTISET:
			case SUBSTRING:
			case SUM:
			case SYSID:
			case SYSTEM:
			case SYSTEM_USER:
			case TABLESPACE:
			case TABLE_NAME:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TOP_LEVEL_COUNT:
			case TRANSACTION:
			case TRANSACTIONS_COMMITTED:
			case TRANSACTIONS_ROLLED_BACK:
			case TRANSACTION_ACTIVE:
			case TRANSFORM:
			case TRANSFORMS:
			case TRANSLATE:
			case TRANSLATION:
			case TREAT:
			case TRIGGER:
			case TRIGGER_CATALOG:
			case TRIGGER_NAME:
			case TRIGGER_SCHEMA:
			case TRIM:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case UESCAPE:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDER:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNNAMED:
			case UNNEST:
			case UNTIL:
			case UPDATE:
			case UPPER:
			case USAGE:
			case USER_DEFINED_TYPE_CATALOG:
			case USER_DEFINED_TYPE_CODE:
			case USER_DEFINED_TYPE_NAME:
			case USER_DEFINED_TYPE_SCHEMA:
			case VACUUM:
			case VALID:
			case VALIDATOR:
			case VALUE:
			case VALUES:
			case VARCHAR:
			case VARYING:
			case VAR_POP:
			case VAR_SAMP:
			case VIEW:
			case VOLATILE:
			case WHENEVER:
			case WIDTH_BUCKET:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRITE:
			case YEAR:
			case ZONE:
			case TEXT:
				{
				setState(3372);
				non_reserved_keyword();
				}
				break;
			case IDENTIFIER:
				{
				setState(3373);
				match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(3381);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_identifier);
					setState(3376);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3377);
					match(DOT);
					setState(3378);
					identifier(2);
					}
					} 
				}
				setState(3383);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Todo_fill_inContext extends ParserRuleContext {
		public Todo_fill_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_fill_in; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTodo_fill_in(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTodo_fill_in(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTodo_fill_in(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_fill_inContext todo_fill_in() throws RecognitionException {
		Todo_fill_inContext _localctx = new Todo_fill_inContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_todo_fill_in);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3384);
			matchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Todo_implementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Todo_implementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_implement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterTodo_implement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitTodo_implement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitTodo_implement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_implementContext todo_implement() throws RecognitionException {
		Todo_implementContext _localctx = new Todo_implementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_todo_implement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Correlation_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitCorrelation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_column_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3394);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_column_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Window_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).enterWindow_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PostgreSQLParserListener ) ((PostgreSQLParserListener)listener).exitWindow_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PostgreSQLParserVisitor ) return ((PostgreSQLParserVisitor<? extends T>)visitor).visitWindow_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_nameContext window_name() throws RecognitionException {
		Window_nameContext _localctx = new Window_nameContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_window_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			identifier(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 200:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 201:
			return bool_expr_sempred((Bool_exprContext)_localctx, predIndex);
		case 216:
			return type_sempred((TypeContext)_localctx, predIndex);
		case 222:
			return from_item_sempred((From_itemContext)_localctx, predIndex);
		case 226:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 231:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 22);
		case 1:
			return precpred(_ctx, 21);
		case 2:
			return precpred(_ctx, 20);
		case 3:
			return precpred(_ctx, 19);
		case 4:
			return precpred(_ctx, 18);
		case 5:
			return precpred(_ctx, 17);
		case 6:
			return precpred(_ctx, 16);
		case 7:
			return precpred(_ctx, 15);
		case 8:
			return precpred(_ctx, 28);
		case 9:
			return precpred(_ctx, 23);
		case 10:
			return precpred(_ctx, 14);
		case 11:
			return precpred(_ctx, 13);
		case 12:
			return precpred(_ctx, 6);
		case 13:
			return precpred(_ctx, 5);
		case 14:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean bool_expr_sempred(Bool_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15:
			return precpred(_ctx, 2);
		case 16:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19:
			return precpred(_ctx, 3);
		case 20:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u030b\u0d4b\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\3\2\7\2\u01e4\n\2\f\2\16\2\u01e7\13\2\3\2\3\2\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0222"+
		"\n\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u024e\n\5\3\6\3\6\3\7\3\7\3\b\3\b"+
		"\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3"+
		"\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3"+
		"\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3"+
		"\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3"+
		"(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3"+
		"\62\3\63\3\63\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3"+
		"\65\3\65\5\65\u02d5\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\67\3\67\3\67\3\67\3\67\5\67\u02e5\n\67\3\67\5\67\u02e8\n\67\3\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u02f8"+
		"\n\67\3\67\3\67\3\67\3\67\5\67\u02fe\n\67\3\67\3\67\5\67\u0302\n\67\3"+
		"\67\3\67\3\67\3\67\5\67\u0308\n\67\3\67\3\67\3\67\3\67\5\67\u030e\n\67"+
		"\3\67\3\67\3\67\3\67\5\67\u0314\n\67\3\67\3\67\3\67\3\67\5\67\u031a\n"+
		"\67\3\67\3\67\3\67\3\67\5\67\u0320\n\67\3\67\3\67\3\67\3\67\5\67\u0326"+
		"\n\67\3\67\3\67\3\67\3\67\5\67\u032c\n\67\3\67\3\67\3\67\3\67\5\67\u0332"+
		"\n\67\3\67\3\67\3\67\3\67\5\67\u0338\n\67\3\67\3\67\5\67\u033c\n\67\3"+
		"\67\3\67\3\67\3\67\5\67\u0342\n\67\3\67\3\67\3\67\3\67\5\67\u0348\n\67"+
		"\3\67\3\67\3\67\3\67\5\67\u034e\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\5\67\u0357\n\67\3\67\5\67\u035a\n\67\3\67\5\67\u035d\n\67\3\67\3\67\3"+
		"\67\5\67\u0362\n\67\3\67\5\67\u0365\n\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0375\n\67\3\67\3\67\3\67"+
		"\3\67\5\67\u037b\n\67\3\67\3\67\5\67\u037f\n\67\3\67\3\67\3\67\3\67\5"+
		"\67\u0385\n\67\3\67\3\67\3\67\3\67\5\67\u038b\n\67\3\67\3\67\5\67\u038f"+
		"\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u03a6\n\67\3\67\3\67\3\67"+
		"\3\67\5\67\u03ac\n\67\3\67\3\67\5\67\u03b0\n\67\3\67\3\67\3\67\3\67\5"+
		"\67\u03b6\n\67\3\67\3\67\3\67\3\67\5\67\u03bc\n\67\3\67\3\67\3\67\3\67"+
		"\5\67\u03c2\n\67\3\67\3\67\3\67\3\67\5\67\u03c8\n\67\3\67\3\67\3\67\3"+
		"\67\5\67\u03ce\n\67\3\67\3\67\3\67\3\67\5\67\u03d4\n\67\3\67\3\67\3\67"+
		"\3\67\5\67\u03da\n\67\3\67\3\67\3\67\3\67\5\67\u03e0\n\67\3\67\3\67\3"+
		"\67\3\67\5\67\u03e6\n\67\3\67\3\67\5\67\u03ea\n\67\3\67\3\67\3\67\3\67"+
		"\5\67\u03f0\n\67\3\67\3\67\3\67\3\67\5\67\u03f6\n\67\3\67\3\67\5\67\u03fa"+
		"\n\67\38\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u040a\n8\38\38\38\3"+
		"8\58\u0410\n8\38\38\38\38\58\u0416\n8\39\39\39\39\39\39\39\39\39\39\3"+
		"9\39\39\39\39\39\39\39\59\u042a\n9\3:\3:\3:\7:\u042f\n:\f:\16:\u0432\13"+
		":\3;\3;\3;\3;\3;\5;\u0439\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0445\n"+
		";\3;\3;\3;\3;\5;\u044b\n;\3<\3<\5<\u044f\n<\3<\3<\3<\3<\3<\3<\3<\3<\3"+
		"<\3=\3=\3=\3=\5=\u045e\n=\3=\3=\3=\5=\u0463\n=\3=\3=\3=\5=\u0468\n=\3"+
		"=\3=\3=\5=\u046d\n=\3=\3=\3=\5=\u0472\n=\3=\3=\3=\5=\u0477\n=\3=\3=\3"+
		"=\5=\u047c\n=\3=\3=\3=\5=\u0481\n=\3=\3=\3=\3=\5=\u0487\n=\3=\3=\3=\5"+
		"=\u048c\n=\3>\3>\5>\u0490\n>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u049a\n>\3?\3"+
		"?\3?\3?\5?\u04a0\n?\3?\3?\3?\3?\3?\3?\7?\u04a8\n?\f?\16?\u04ab\13?\3@"+
		"\3@\3@\3@\3@\3@\7@\u04b3\n@\f@\16@\u04b6\13@\3@\3@\3@\7@\u04bb\n@\f@\16"+
		"@\u04be\13@\3A\3A\3A\3A\3A\3A\3A\3A\5A\u04c8\nA\3A\3A\3A\3A\3A\3A\3B\3"+
		"B\3B\3B\7B\u04d4\nB\fB\16B\u04d7\13B\3C\3C\3C\3C\3C\3C\3C\3C\3C\7C\u04e2"+
		"\nC\fC\16C\u04e5\13C\3C\3C\3C\3C\5C\u04eb\nC\3C\3C\3C\3C\3C\5C\u04f2\n"+
		"C\3D\3D\3D\3D\3D\3D\5D\u04fa\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0505\n"+
		"D\3D\3D\5D\u0509\nD\3D\3D\3D\5D\u050e\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0517"+
		"\nD\3E\3E\3E\5E\u051c\nE\3E\3E\3E\3F\3F\3F\3F\5F\u0525\nF\3F\3F\3F\3F"+
		"\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0534\nF\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F"+
		"\3F\3F\3F\3F\3F\3F\3F\3F\3F\6F\u0549\nF\rF\16F\u054a\5F\u054d\nF\3G\3"+
		"G\5G\u0551\nG\3G\3G\5G\u0555\nG\3G\3G\3G\5G\u055a\nG\3G\5G\u055d\nG\3"+
		"G\3G\3G\3G\5G\u0563\nG\3G\3G\5G\u0567\nG\3G\3G\5G\u056b\nG\3H\3H\3H\5"+
		"H\u0570\nH\3H\5H\u0573\nH\3H\3H\3H\3H\3H\5H\u057a\nH\3H\5H\u057d\nH\3"+
		"H\5H\u0580\nH\3H\3H\3H\3H\3H\3H\5H\u0588\nH\3H\3H\5H\u058c\nH\5H\u058e"+
		"\nH\3I\3I\3I\3I\3I\3I\5I\u0596\nI\3I\3I\3I\3I\3I\5I\u059d\nI\3I\5I\u05a0"+
		"\nI\3I\3I\5I\u05a4\nI\3I\3I\3I\3I\5I\u05aa\nI\3I\5I\u05ad\nI\3J\3J\3J"+
		"\3J\3J\3J\3J\3J\3J\3J\3J\5J\u05ba\nJ\3J\3J\3J\3J\5J\u05c0\nJ\3J\3J\3J"+
		"\3J\5J\u05c6\nJ\3J\3J\3J\3J\5J\u05cc\nJ\3J\3J\3J\3J\5J\u05d2\nJ\3J\3J"+
		"\3J\3J\5J\u05d8\nJ\3J\3J\5J\u05dc\nJ\3J\3J\5J\u05e0\nJ\3J\3J\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\5K\u05ed\nK\3K\3K\3K\3K\3K\3K\5K\u05f5\nK\3K\3K\5K"+
		"\u05f9\nK\3K\3K\3K\3K\3K\3K\3K\5K\u0602\nK\3L\3L\3L\3L\3L\5L\u0609\nL"+
		"\3L\3L\3L\3L\3L\3L\3L\5L\u0612\nL\3L\3L\3L\3L\7L\u0618\nL\fL\16L\u061b"+
		"\13L\3M\3M\3M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3N\3N\5N\u062b\nN\3N\3N\5N\u062f"+
		"\nN\3N\3N\3N\3N\3N\5N\u0636\nN\3N\3N\3N\3N\3N\3N\5N\u063e\nN\3O\3O\3O"+
		"\3O\5O\u0644\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\5O\u0658\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\6O\u066d\nO\rO\16O\u066e\5O\u0671\nO\3P\3P\3Q\3Q\3Q\5Q\u0678\nQ\3Q\3"+
		"Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0683\nQ\3Q\3Q\5Q\u0687\nQ\3Q\3Q\5Q\u068b\n"+
		"Q\3R\3R\3R\3R\3R\5R\u0692\nR\3R\5R\u0695\nR\3R\3R\3R\3R\3R\5R\u069c\n"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u06a6\nR\3R\3R\3R\3R\3R\3R\3R\5R\u06af\n"+
		"R\3S\3S\5S\u06b3\nS\3S\3S\3S\3S\5S\u06b9\nS\3S\3S\3S\5S\u06be\nS\3S\5"+
		"S\u06c1\nS\3S\3S\3S\3S\5S\u06c7\nS\3S\3S\3S\3S\5S\u06cd\nS\3S\3S\5S\u06d1"+
		"\nS\3S\5S\u06d4\nS\3S\3S\5S\u06d8\nS\3S\5S\u06db\nS\3S\5S\u06de\nS\3S"+
		"\3S\3S\3S\3S\3S\3S\5S\u06e7\nS\5S\u06e9\nS\3T\3T\3U\3U\3V\3V\3W\3W\3X"+
		"\3X\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3"+
		"c\3d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3"+
		"h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3"+
		"h\3h\3h\3h\5h\u073c\nh\3i\3i\3i\3i\3i\5i\u0743\ni\3i\3i\5i\u0747\ni\3"+
		"j\3j\3j\3j\5j\u074d\nj\3j\3j\3j\3j\3j\3k\3k\3k\3k\5k\u0758\nk\3k\3k\3"+
		"k\3k\3k\3k\5k\u0760\nk\3l\3l\3l\3l\5l\u0766\nl\3l\3l\5l\u076a\nl\3m\3"+
		"m\3m\3m\5m\u0770\nm\3m\3m\5m\u0774\nm\3n\3n\3n\3n\5n\u077a\nn\3n\3n\3"+
		"o\3o\3o\3o\5o\u0782\no\3o\3o\5o\u0786\no\3p\3p\3p\3p\3p\5p\u078d\np\3"+
		"p\3p\5p\u0791\np\3q\3q\3q\3q\5q\u0797\nq\3q\3q\5q\u079b\nq\3r\3r\3r\3"+
		"r\3r\3r\5r\u07a3\nr\3r\3r\5r\u07a7\nr\3s\3s\3s\3s\3s\5s\u07ae\ns\3s\3"+
		"s\5s\u07b2\ns\3t\3t\3t\3t\5t\u07b8\nt\3t\3t\5t\u07bc\nt\3u\3u\3u\3u\5"+
		"u\u07c2\nu\3u\3u\3v\3v\3v\5v\u07c9\nv\3v\3v\5v\u07cd\nv\3v\3v\5v\u07d1"+
		"\nv\3w\3w\5w\u07d5\nw\3w\3w\3w\5w\u07da\nw\3w\3w\5w\u07de\nw\3x\3x\3x"+
		"\3x\3x\5x\u07e5\nx\3x\3x\5x\u07e9\nx\3y\3y\3z\3z\3z\3z\3z\5z\u07f2\nz"+
		"\3z\3z\3z\3z\5z\u07f8\nz\3{\3{\3{\3{\3{\5{\u07ff\n{\3{\3{\3{\3{\5{\u0805"+
		"\n{\3|\3|\3|\3|\3|\5|\u080c\n|\3}\3}\3}\3}\5}\u0812\n}\3}\3}\3}\3}\5}"+
		"\u0818\n}\3~\3~\3~\3~\5~\u081e\n~\3~\3~\5~\u0822\n~\3\177\3\177\3\177"+
		"\3\177\5\177\u0828\n\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\5"+
		"\u0080\u0830\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0836\n\u0080"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u083c\n\u0081\3\u0081\3\u0081"+
		"\5\u0081\u0840\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0846\n"+
		"\u0082\3\u0082\3\u0082\5\u0082\u084a\n\u0082\3\u0083\3\u0083\3\u0083\3"+
		"\u0083\5\u0083\u0850\n\u0083\3\u0083\3\u0083\5\u0083\u0854\n\u0083\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\5\u0084\u085a\n\u0084\3\u0084\3\u0084\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\5\u0085\u0862\n\u0085\3\u0085\3\u0085\5\u0085"+
		"\u0866\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u086c\n\u0086\3"+
		"\u0086\3\u0086\5\u0086\u0870\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\5"+
		"\u0087\u0876\n\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\5\u0088\u0880\n\u0088\3\u0088\3\u0088\5\u0088\u0884\n\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u088c\n\u0089"+
		"\3\u0089\3\u0089\5\u0089\u0890\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0898\n\u008a\3\u008a\3\u008a\5\u008a\u089c\n"+
		"\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u08a4\n"+
		"\u008b\3\u008b\3\u008b\5\u008b\u08a8\n\u008b\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\5\u008c\u08ae\n\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u08ba\n\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\5\u008d\u08c0\n\u008d\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\5\u008e\u08c6\n\u008e\3\u008e\3\u008e\5\u008e\u08ca\n\u008e\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u08d0\n\u008f\3\u008f\3\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u08d9\n\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u08e1\n\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u08ea\n\u0091\3\u0091"+
		"\3\u0091\5\u0091\u08ee\n\u0091\3\u0092\3\u0092\3\u0093\3\u0093\3\u0094"+
		"\3\u0094\3\u0095\3\u0095\3\u0096\3\u0096\3\u0097\3\u0097\3\u0098\3\u0098"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d"+
		"\3\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\5\u00aa\u0923\n\u00aa\3\u00aa\5\u00aa\u0926\n\u00aa\3\u00aa\5"+
		"\u00aa\u0929\n\u00aa\3\u00aa\5\u00aa\u092c\n\u00aa\3\u00aa\5\u00aa\u092f"+
		"\n\u00aa\3\u00aa\5\u00aa\u0932\n\u00aa\3\u00aa\5\u00aa\u0935\n\u00aa\3"+
		"\u00aa\5\u00aa\u0938\n\u00aa\3\u00aa\5\u00aa\u093b\n\u00aa\3\u00aa\5\u00aa"+
		"\u093e\n\u00aa\3\u00aa\5\u00aa\u0941\n\u00aa\3\u00ab\3\u00ab\3\u00ac\3"+
		"\u00ac\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0"+
		"\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u095d\n\u00b5\3\u00b5"+
		"\5\u00b5\u0960\n\u00b5\3\u00b5\5\u00b5\u0963\n\u00b5\3\u00b5\5\u00b5\u0966"+
		"\n\u00b5\5\u00b5\u0968\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6"+
		"\u096e\n\u00b6\5\u00b6\u0970\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0975"+
		"\n\u00b6\3\u00b6\5\u00b6\u0978\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\5\u00b6\u097e\n\u00b6\3\u00b6\5\u00b6\u0981\n\u00b6\5\u00b6\u0983\n\u00b6"+
		"\7\u00b6\u0985\n\u00b6\f\u00b6\16\u00b6\u0988\13\u00b6\5\u00b6\u098a\n"+
		"\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u0990\n\u00b7\f\u00b7\16"+
		"\u00b7\u0993\13\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\7\u00b9\u099d\n\u00b9\f\u00b9\16\u00b9\u09a0\13\u00b9"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u09aa\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u09af\n\u00ba\7\u00ba\u09b1"+
		"\n\u00ba\f\u00ba\16\u00ba\u09b4\13\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u09bb\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb"+
		"\u09c1\n\u00bb\f\u00bb\16\u00bb\u09c4\13\u00bb\3\u00bb\3\u00bb\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u09cc\n\u00bc\f\u00bc\16\u00bc\u09cf"+
		"\13\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u09db\n\u00bd\3\u00be\3\u00be\3\u00bf\3\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0"+
		"\u09e9\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1"+
		"\u09f1\n\u00c1\f\u00c1\16\u00c1\u09f4\13\u00c1\3\u00c1\5\u00c1\u09f7\n"+
		"\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\5\u00c3\u0a02\n\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\7\u00c4\u0a0b\n\u00c4\f\u00c4\16\u00c4\u0a0e\13\u00c4"+
		"\3\u00c5\3\u00c5\5\u00c5\u0a12\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u0a18\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\7\u00c5\u0a20\n\u00c5\f\u00c5\16\u00c5\u0a23\13\u00c5\5\u00c5\u0a25\n"+
		"\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0a2d\n"+
		"\u00c7\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0a32\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\5\u00c9\u0a3f\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0a45\n"+
		"\u00c9\f\u00c9\16\u00c9\u0a48\13\u00c9\5\u00c9\u0a4a\n\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\7\u00c9\u0a4f\n\u00c9\f\u00c9\16\u00c9\u0a52\13\u00c9\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\6\u00ca\u0a64"+
		"\n\u00ca\r\u00ca\16\u00ca\u0a65\3\u00ca\3\u00ca\3\u00ca\3\u00ca\6\u00ca"+
		"\u0a6c\n\u00ca\r\u00ca\16\u00ca\u0a6d\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\5\u00ca\u0a98\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u0aa2\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u0ab2\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u0ab8\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0ad0\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0ae2"+
		"\n\u00ca\7\u00ca\u0ae4\n\u00ca\f\u00ca\16\u00ca\u0ae7\13\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0aee\n\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0af6\n\u00cb\f\u00cb\16\u00cb"+
		"\u0af9\13\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u0aff\n\u00cc"+
		"\f\u00cc\16\u00cc\u0b02\13\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\7\u00cd\u0b0a\n\u00cd\f\u00cd\16\u00cd\u0b0d\13\u00cd\3\u00cd"+
		"\3\u00cd\3\u00ce\5\u00ce\u0b12\n\u00ce\3\u00ce\5\u00ce\u0b15\n\u00ce\3"+
		"\u00ce\5\u00ce\u0b18\n\u00ce\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u0b1d\n\u00cf"+
		"\f\u00cf\16\u00cf\u0b20\13\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u0b27\n\u00d0\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0b2c\n\u00d1\f"+
		"\u00d1\16\u00d1\u0b2f\13\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0b43\n\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u0b49\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\5\u00d2\u0b50\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u0b56\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\5\u00d2\u0b5f\n\u00d2\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u0b64\n\u00d3\f"+
		"\u00d3\16\u00d3\u0b67\13\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0b72\n\u00d4\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u0b77\n\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0b7c\n"+
		"\u00d5\f\u00d5\16\u00d5\u0b7f\13\u00d5\3\u00d5\5\u00d5\u0b82\n\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0b8b\n"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\5\u00d5\u0b97\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\7\u00d5\u0b9e\n\u00d5\f\u00d5\16\u00d5\u0ba1\13\u00d5\5\u00d5"+
		"\u0ba3\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0bb1\n\u00d5\5\u00d5"+
		"\u0bb3\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0bb8\n\u00d6\3\u00d7\3"+
		"\u00d7\3\u00d7\7\u00d7\u0bbd\n\u00d7\f\u00d7\16\u00d7\u0bc0\13\u00d7\3"+
		"\u00d8\3\u00d8\3\u00d8\7\u00d8\u0bc5\n\u00d8\f\u00d8\16\u00d8\u0bc8\13"+
		"\u00d8\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da"+
		"\u0bd1\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da"+
		"\u0bd9\n\u00da\f\u00da\16\u00da\u0bdc\13\u00da\5\u00da\u0bde\n\u00da\3"+
		"\u00da\3\u00da\5\u00da\u0be2\n\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0be7"+
		"\n\u00da\3\u00da\7\u00da\u0bea\n\u00da\f\u00da\16\u00da\u0bed\13\u00da"+
		"\3\u00db\3\u00db\3\u00db\7\u00db\u0bf2\n\u00db\f\u00db\16\u00db\u0bf5"+
		"\13\u00db\3\u00dc\3\u00dc\5\u00dc\u0bf9\n\u00dc\3\u00dd\3\u00dd\5\u00dd"+
		"\u0bfd\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0c0a\n\u00de\f\u00de\16\u00de"+
		"\u0c0d\13\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0c12\n\u00de\5\u00de"+
		"\u0c14\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\5\u00de\u0c1f\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\7\u00df\u0c26\n\u00df\f\u00df\16\u00df\u0c29\13\u00df\5\u00df"+
		"\u0c2b\n\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\5\u00e0\u0c31\n\u00e0\3"+
		"\u00e0\3\u00e0\5\u00e0\u0c35\n\u00e0\3\u00e0\5\u00e0\u0c38\n\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0c40\n\u00e0\f\u00e0"+
		"\16\u00e0\u0c43\13\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0c4b\n\u00e0\5\u00e0\u0c4d\n\u00e0\3\u00e0\5\u00e0\u0c50\n\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c56\n\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0c5d\n\u00e0\f\u00e0\16\u00e0\u0c60"+
		"\13\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c64\n\u00e0\3\u00e0\5\u00e0\u0c67"+
		"\n\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c6c\n\u00e0\3\u00e0\5\u00e0"+
		"\u0c6f\n\u00e0\3\u00e0\5\u00e0\u0c72\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\7\u00e0\u0c7a\n\u00e0\f\u00e0\16\u00e0\u0c7d\13"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c82\n\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0"+
		"\u0c8e\n\u00e0\f\u00e0\16\u00e0\u0c91\13\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u0c95\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u0c99\n\u00e0\3\u00e0\3\u00e0\5"+
		"\u00e0\u0c9d\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u0ca3\n\u00e0"+
		"\f\u00e0\16\u00e0\u0ca6\13\u00e0\3\u00e1\5\u00e1\u0ca9\n\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0caf\n\u00e1\f\u00e1\16\u00e1\u0cb2"+
		"\13\u00e1\5\u00e1\u0cb4\n\u00e1\3\u00e2\5\u00e2\u0cb7\n\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u0cbc\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u0cc1\n\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0cc6\n\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\5\u00e2\u0ccb\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\7\u00e3\u0cd4\n\u00e3\f\u00e3\16\u00e3\u0cd7\13"+
		"\u00e3\3\u00e3\3\u00e3\5\u00e3\u0cdb\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0ce6\n\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0cf5\n\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0cfd\n\u00e4\f\u00e4\16\u00e4"+
		"\u0d00\13\u00e4\3\u00e5\3\u00e5\5\u00e5\u0d04\n\u00e5\3\u00e5\5\u00e5"+
		"\u0d07\n\u00e5\3\u00e5\3\u00e5\5\u00e5\u0d0b\n\u00e5\3\u00e5\5\u00e5\u0d0e"+
		"\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0d15\n\u00e5"+
		"\3\u00e5\5\u00e5\u0d18\n\u00e5\3\u00e5\3\u00e5\5\u00e5\u0d1c\n\u00e5\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0d22\n\u00e6\3\u00e7\3\u00e7\3"+
		"\u00e7\7\u00e7\u0d27\n\u00e7\f\u00e7\16\u00e7\u0d2a\13\u00e7\3\u00e8\3"+
		"\u00e8\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0d31\n\u00e9\3\u00e9\3\u00e9\3"+
		"\u00e9\7\u00e9\u0d36\n\u00e9\f\u00e9\16\u00e9\u0d39\13\u00e9\3\u00ea\3"+
		"\u00ea\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\2\b\u0192\u0194"+
		"\u01b2\u01be\u01c6\u01d0\u00f2\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\2!\4\2\u00fe\u00fe\u0263\u0263"+
		"\3\2\u0295\u0297\4\2\u00be\u00be\u024b\u024b\4\2\u0164\u0164\u02d4\u02d4"+
		"\7\2\22\22\u00a1\u00a1\u010b\u010b\u01e9\u01e9\u0253\u0253\6\2\u00a1\u00a1"+
		"\u010b\u010b\u01e9\u01e9\u0253\u0253\4\2\24\24\u010e\u010e\4\2\u0224\u0224"+
		"\u0226\u0226\4\2==\u01c6\u01c6\4\2\u0082\u0082\u01d2\u01d2\4\2\u01ab\u01ab"+
		"\u01d8\u01d8\5\2\u00c4\u00c4\u0111\u0111\u024c\u024c\4\2\22\22\u00b2\u00b2"+
		"\4\2\u00d6\u00d6\u0122\u0122\4\2\22\22\u02d1\u02d1\3\2\u01d7\u01d8\4\2"+
		"\u00d6\u00d6\u0158\u0158\3\2\u02c7\u02c7\6\2\u02dc\u02dc\u02de\u02de\u02f7"+
		"\u02f7\u02fd\u02fd\4\2\u0301\u0301\u0304\u0304\4\2\22\22\u015f\u015f\4"+
		"\2\u02e0\u02e0\u02fb\u02fc\5\2\u02c9\u02c9\u02f8\u02f8\u0303\u0303\4\2"+
		"\u02f7\u02f7\u02fd\u02fd\16\2\31\31\u015f\u015f\u0179\u0179\u02d7\u02db"+
		"\u02e2\u02e2\u02e5\u02ed\u02f0\u02f1\u02f3\u02f6\u02f9\u02fa\u02fe\u0300"+
		"\u0302\u0302\u0304\u030b\7\2\u02df\u02df\u02e1\u02e1\u02e3\u02e4\u02ee"+
		"\u02ef\u02f2\u02f2\4\2\u0117\u0117\u0162\u0162\6\2\u00fe\u00fe\u0108\u0108"+
		"\u017e\u017e\u0263\u0263\4\2##\u026f\u026f\3\2\u02a4\u02a9c\2\3\3\6\20"+
		"\23\26\33\33\37!#&(.\60\60\62\64\66>ANQX[^`eghjln|\u0081\u0084\u0086\u0087"+
		"\u008b\u008b\u008d\u0099\u009b\u009b\u009d\u00a7\u00a9\u00aa\u00ad\u00b1"+
		"\u00b4\u00bb\u00bd\u00bf\u00c1\u00c3\u00c5\u00ca\u00cc\u00ce\u00d0\u00d1"+
		"\u00d4\u00d9\u00db\u00db\u00dd\u00e0\u00e4\u00ec\u00ee\u00ee\u00f0\u00f1"+
		"\u00f3\u00f4\u00f6\u00f8\u00fa\u00fd\u00ff\u0102\u0104\u0104\u0108\u0110"+
		"\u0112\u0113\u0115\u0115\u0118\u0118\u011c\u011e\u0120\u0122\u0125\u0126"+
		"\u0128\u0128\u012b\u012e\u0131\u0137\u0139\u0148\u014a\u0152\u0154\u0159"+
		"\u015c\u015e\u0160\u0161\u0163\u0163\u0165\u016e\u0170\u0171\u0174\u0174"+
		"\u0176\u0178\u017b\u017e\u0180\u0181\u0183\u0187\u0189\u018e\u0190\u0197"+
		"\u0199\u019a\u019c\u019e\u01a1\u01a2\u01a4\u01a8\u01aa\u01b2\u01b4\u01b8"+
		"\u01ba\u01e8\u01ea\u01ef\u01f1\u01f5\u01f7\u01f8\u01fa\u01fa\u01fc\u0216"+
		"\u0219\u021b\u021d\u021f\u0222\u0226\u022a\u022b\u022d\u022d\u022f\u0230"+
		"\u0233\u0233\u0235\u0242\u0244\u024b\u024e\u0255\u0257\u025a\u025c\u0261"+
		"\u0264\u0266\u0268\u0269\u026b\u026b\u026d\u026d\u0270\u0275\u02c3\u02c3"+
		"\2\u0f1e\2\u01e5\3\2\2\2\4\u0221\3\2\2\2\6\u0223\3\2\2\2\b\u024d\3\2\2"+
		"\2\n\u024f\3\2\2\2\f\u0251\3\2\2\2\16\u0253\3\2\2\2\20\u0255\3\2\2\2\22"+
		"\u0257\3\2\2\2\24\u0259\3\2\2\2\26\u025b\3\2\2\2\30\u025d\3\2\2\2\32\u025f"+
		"\3\2\2\2\34\u0261\3\2\2\2\36\u0263\3\2\2\2 \u0265\3\2\2\2\"\u0267\3\2"+
		"\2\2$\u0269\3\2\2\2&\u026b\3\2\2\2(\u026d\3\2\2\2*\u026f\3\2\2\2,\u0271"+
		"\3\2\2\2.\u0273\3\2\2\2\60\u0275\3\2\2\2\62\u0277\3\2\2\2\64\u0279\3\2"+
		"\2\2\66\u027b\3\2\2\28\u027d\3\2\2\2:\u027f\3\2\2\2<\u0281\3\2\2\2>\u0283"+
		"\3\2\2\2@\u0285\3\2\2\2B\u0287\3\2\2\2D\u0289\3\2\2\2F\u028b\3\2\2\2H"+
		"\u028d\3\2\2\2J\u028f\3\2\2\2L\u0291\3\2\2\2N\u0293\3\2\2\2P\u0295\3\2"+
		"\2\2R\u0297\3\2\2\2T\u0299\3\2\2\2V\u029b\3\2\2\2X\u029d\3\2\2\2Z\u029f"+
		"\3\2\2\2\\\u02a1\3\2\2\2^\u02a3\3\2\2\2`\u02a5\3\2\2\2b\u02a7\3\2\2\2"+
		"d\u02a9\3\2\2\2f\u02ab\3\2\2\2h\u02d4\3\2\2\2j\u02d6\3\2\2\2l\u03f9\3"+
		"\2\2\2n\u03fb\3\2\2\2p\u0429\3\2\2\2r\u042b\3\2\2\2t\u044a\3\2\2\2v\u044c"+
		"\3\2\2\2x\u0459\3\2\2\2z\u048f\3\2\2\2|\u049b\3\2\2\2~\u04ac\3\2\2\2\u0080"+
		"\u04bf\3\2\2\2\u0082\u04cf\3\2\2\2\u0084\u04d8\3\2\2\2\u0086\u04f3\3\2"+
		"\2\2\u0088\u0518\3\2\2\2\u008a\u0520\3\2\2\2\u008c\u054e\3\2\2\2\u008e"+
		"\u058d\3\2\2\2\u0090\u058f\3\2\2\2\u0092\u05ae\3\2\2\2\u0094\u0601\3\2"+
		"\2\2\u0096\u0603\3\2\2\2\u0098\u061c\3\2\2\2\u009a\u0623\3\2\2\2\u009c"+
		"\u063f\3\2\2\2\u009e\u0672\3\2\2\2\u00a0\u0674\3\2\2\2\u00a2\u06ae\3\2"+
		"\2\2\u00a4\u06b0\3\2\2\2\u00a6\u06ea\3\2\2\2\u00a8\u06ec\3\2\2\2\u00aa"+
		"\u06ee\3\2\2\2\u00ac\u06f0\3\2\2\2\u00ae\u06f2\3\2\2\2\u00b0\u06f4\3\2"+
		"\2\2\u00b2\u06f6\3\2\2\2\u00b4\u06f8\3\2\2\2\u00b6\u06fa\3\2\2\2\u00b8"+
		"\u06fc\3\2\2\2\u00ba\u06fe\3\2\2\2\u00bc\u0700\3\2\2\2\u00be\u0702\3\2"+
		"\2\2\u00c0\u0704\3\2\2\2\u00c2\u0706\3\2\2\2\u00c4\u0708\3\2\2\2\u00c6"+
		"\u070a\3\2\2\2\u00c8\u070c\3\2\2\2\u00ca\u070e\3\2\2\2\u00cc\u0710\3\2"+
		"\2\2\u00ce\u073b\3\2\2\2\u00d0\u073d\3\2\2\2\u00d2\u0748\3\2\2\2\u00d4"+
		"\u0753\3\2\2\2\u00d6\u0761\3\2\2\2\u00d8\u076b\3\2\2\2\u00da\u0775\3\2"+
		"\2\2\u00dc\u077d\3\2\2\2\u00de\u0787\3\2\2\2\u00e0\u0792\3\2\2\2\u00e2"+
		"\u079c\3\2\2\2\u00e4\u07a8\3\2\2\2\u00e6\u07b3\3\2\2\2\u00e8\u07bd\3\2"+
		"\2\2\u00ea\u07c5\3\2\2\2\u00ec\u07d2\3\2\2\2\u00ee\u07df\3\2\2\2\u00f0"+
		"\u07ea\3\2\2\2\u00f2\u07ec\3\2\2\2\u00f4\u07f9\3\2\2\2\u00f6\u0806\3\2"+
		"\2\2\u00f8\u080d\3\2\2\2\u00fa\u0819\3\2\2\2\u00fc\u0823\3\2\2\2\u00fe"+
		"\u082b\3\2\2\2\u0100\u0837\3\2\2\2\u0102\u0841\3\2\2\2\u0104\u084b\3\2"+
		"\2\2\u0106\u0855\3\2\2\2\u0108\u085d\3\2\2\2\u010a\u0867\3\2\2\2\u010c"+
		"\u0871\3\2\2\2\u010e\u0879\3\2\2\2\u0110\u0885\3\2\2\2\u0112\u0891\3\2"+
		"\2\2\u0114\u089d\3\2\2\2\u0116\u08a9\3\2\2\2\u0118\u08b5\3\2\2\2\u011a"+
		"\u08c1\3\2\2\2\u011c\u08cb\3\2\2\2\u011e\u08d3\3\2\2\2\u0120\u08e5\3\2"+
		"\2\2\u0122\u08ef\3\2\2\2\u0124\u08f1\3\2\2\2\u0126\u08f3\3\2\2\2\u0128"+
		"\u08f5\3\2\2\2\u012a\u08f7\3\2\2\2\u012c\u08f9\3\2\2\2\u012e\u08fb\3\2"+
		"\2\2\u0130\u08fd\3\2\2\2\u0132\u08ff\3\2\2\2\u0134\u0901\3\2\2\2\u0136"+
		"\u0903\3\2\2\2\u0138\u0905\3\2\2\2\u013a\u0907\3\2\2\2\u013c\u0909\3\2"+
		"\2\2\u013e\u090b\3\2\2\2\u0140\u090d\3\2\2\2\u0142\u090f\3\2\2\2\u0144"+
		"\u0911\3\2\2\2\u0146\u0913\3\2\2\2\u0148\u0915\3\2\2\2\u014a\u0917\3\2"+
		"\2\2\u014c\u0919\3\2\2\2\u014e\u091b\3\2\2\2\u0150\u091d\3\2\2\2\u0152"+
		"\u091f\3\2\2\2\u0154\u0942\3\2\2\2\u0156\u0944\3\2\2\2\u0158\u0946\3\2"+
		"\2\2\u015a\u0948\3\2\2\2\u015c\u094a\3\2\2\2\u015e\u094c\3\2\2\2\u0160"+
		"\u094e\3\2\2\2\u0162\u0950\3\2\2\2\u0164\u0952\3\2\2\2\u0166\u0954\3\2"+
		"\2\2\u0168\u0967\3\2\2\2\u016a\u096f\3\2\2\2\u016c\u098b\3\2\2\2\u016e"+
		"\u0994\3\2\2\2\u0170\u0997\3\2\2\2\u0172\u09ba\3\2\2\2\u0174\u09bc\3\2"+
		"\2\2\u0176\u09c7\3\2\2\2\u0178\u09da\3\2\2\2\u017a\u09dc\3\2\2\2\u017c"+
		"\u09de\3\2\2\2\u017e\u09e8\3\2\2\2\u0180\u09f6\3\2\2\2\u0182\u09f8\3\2"+
		"\2\2\u0184\u09ff\3\2\2\2\u0186\u0a05\3\2\2\2\u0188\u0a11\3\2\2\2\u018a"+
		"\u0a26\3\2\2\2\u018c\u0a29\3\2\2\2\u018e\u0a2e\3\2\2\2\u0190\u0a36\3\2"+
		"\2\2\u0192\u0aa1\3\2\2\2\u0194\u0aed\3\2\2\2\u0196\u0afa\3\2\2\2\u0198"+
		"\u0b05\3\2\2\2\u019a\u0b17\3\2\2\2\u019c\u0b19\3\2\2\2\u019e\u0b21\3\2"+
		"\2\2\u01a0\u0b28\3\2\2\2\u01a2\u0b5e\3\2\2\2\u01a4\u0b60\3\2\2\2\u01a6"+
		"\u0b71\3\2\2\2\u01a8\u0bb2\3\2\2\2\u01aa\u0bb7\3\2\2\2\u01ac\u0bb9\3\2"+
		"\2\2\u01ae\u0bc1\3\2\2\2\u01b0\u0bc9\3\2\2\2\u01b2\u0be1\3\2\2\2\u01b4"+
		"\u0bee\3\2\2\2\u01b6\u0bf8\3\2\2\2\u01b8\u0bfc\3\2\2\2\u01ba\u0c1e\3\2"+
		"\2\2\u01bc\u0c20\3\2\2\2\u01be\u0c98\3\2\2\2\u01c0\u0ca8\3\2\2\2\u01c2"+
		"\u0cca\3\2\2\2\u01c4\u0cda\3\2\2\2\u01c6\u0cf4\3\2\2\2\u01c8\u0d1b\3\2"+
		"\2\2\u01ca\u0d21\3\2\2\2\u01cc\u0d23\3\2\2\2\u01ce\u0d2b\3\2\2\2\u01d0"+
		"\u0d30\3\2\2\2\u01d2\u0d3a\3\2\2\2\u01d4\u0d3c\3\2\2\2\u01d6\u0d3e\3\2"+
		"\2\2\u01d8\u0d40\3\2\2\2\u01da\u0d42\3\2\2\2\u01dc\u0d44\3\2\2\2\u01de"+
		"\u0d46\3\2\2\2\u01e0\u0d48\3\2\2\2\u01e2\u01e4\5\4\3\2\u01e3\u01e2\3\2"+
		"\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6"+
		"\u01e8\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8\u01e9\7\2\2\3\u01e9\3\3\2\2\2"+
		"\u01ea\u0222\5\6\4\2\u01eb\u0222\5\b\5\2\u01ec\u0222\5Z.\2\u01ed\u0222"+
		"\5h\65\2\u01ee\u0222\5\\/\2\u01ef\u0222\5^\60\2\u01f0\u0222\5`\61\2\u01f1"+
		"\u0222\5b\62\2\u01f2\u0222\5d\63\2\u01f3\u0222\5f\64\2\u01f4\u0222\5\u00c6"+
		"d\2\u01f5\u0222\5\u00c8e\2\u01f6\u0222\5\u00caf\2\u01f7\u0222\5\u00cc"+
		"g\2\u01f8\u0222\5\u00ceh\2\u01f9\u0222\5\u0122\u0092\2\u01fa\u0222\5\u0124"+
		"\u0093\2\u01fb\u0222\5\u0126\u0094\2\u01fc\u0222\5\u0128\u0095\2\u01fd"+
		"\u0222\5\u012a\u0096\2\u01fe\u0222\5\u012c\u0097\2\u01ff\u0222\5\u012e"+
		"\u0098\2\u0200\u0222\5\u0130\u0099\2\u0201\u0222\5\u0132\u009a\2\u0202"+
		"\u0222\5\u0134\u009b\2\u0203\u0222\5\u0136\u009c\2\u0204\u0222\5\u0138"+
		"\u009d\2\u0205\u0222\5\u013a\u009e\2\u0206\u0222\5\u013c\u009f\2\u0207"+
		"\u0222\5\u013e\u00a0\2\u0208\u0222\5\u0140\u00a1\2\u0209\u0222\5\u0142"+
		"\u00a2\2\u020a\u0222\5\u0144\u00a3\2\u020b\u0222\5\u0146\u00a4\2\u020c"+
		"\u0222\5\u0148\u00a5\2\u020d\u0222\5\u014a\u00a6\2\u020e\u0222\5\u014c"+
		"\u00a7\2\u020f\u0222\5\u014e\u00a8\2\u0210\u0222\5\u0150\u00a9\2\u0211"+
		"\u0222\5\u0152\u00aa\2\u0212\u0213\7\u02ca\2\2\u0213\u0214\5\u0152\u00aa"+
		"\2\u0214\u0215\7\u02cb\2\2\u0215\u0222\3\2\2\2\u0216\u0222\5\u0154\u00ab"+
		"\2\u0217\u0222\5\u0156\u00ac\2\u0218\u0222\5\u0158\u00ad\2\u0219\u0222"+
		"\5\u015a\u00ae\2\u021a\u0222\5\u015c\u00af\2\u021b\u0222\5\u015e\u00b0"+
		"\2\u021c\u0222\5\u0160\u00b1\2\u021d\u0222\5\u0162\u00b2\2\u021e\u0222"+
		"\5\u0164\u00b3\2\u021f\u0222\5\u0166\u00b4\2\u0220\u0222\5\u0168\u00b5"+
		"\2\u0221\u01ea\3\2\2\2\u0221\u01eb\3\2\2\2\u0221\u01ec\3\2\2\2\u0221\u01ed"+
		"\3\2\2\2\u0221\u01ee\3\2\2\2\u0221\u01ef\3\2\2\2\u0221\u01f0\3\2\2\2\u0221"+
		"\u01f1\3\2\2\2\u0221\u01f2\3\2\2\2\u0221\u01f3\3\2\2\2\u0221\u01f4\3\2"+
		"\2\2\u0221\u01f5\3\2\2\2\u0221\u01f6\3\2\2\2\u0221\u01f7\3\2\2\2\u0221"+
		"\u01f8\3\2\2\2\u0221\u01f9\3\2\2\2\u0221\u01fa\3\2\2\2\u0221\u01fb\3\2"+
		"\2\2\u0221\u01fc\3\2\2\2\u0221\u01fd\3\2\2\2\u0221\u01fe\3\2\2\2\u0221"+
		"\u01ff\3\2\2\2\u0221\u0200\3\2\2\2\u0221\u0201\3\2\2\2\u0221\u0202\3\2"+
		"\2\2\u0221\u0203\3\2\2\2\u0221\u0204\3\2\2\2\u0221\u0205\3\2\2\2\u0221"+
		"\u0206\3\2\2\2\u0221\u0207\3\2\2\2\u0221\u0208\3\2\2\2\u0221\u0209\3\2"+
		"\2\2\u0221\u020a\3\2\2\2\u0221\u020b\3\2\2\2\u0221\u020c\3\2\2\2\u0221"+
		"\u020d\3\2\2\2\u0221\u020e\3\2\2\2\u0221\u020f\3\2\2\2\u0221\u0210\3\2"+
		"\2\2\u0221\u0211\3\2\2\2\u0221\u0212\3\2\2\2\u0221\u0216\3\2\2\2\u0221"+
		"\u0217\3\2\2\2\u0221\u0218\3\2\2\2\u0221\u0219\3\2\2\2\u0221\u021a\3\2"+
		"\2\2\u0221\u021b\3\2\2\2\u0221\u021c\3\2\2\2\u0221\u021d\3\2\2\2\u0221"+
		"\u021e\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0220\3\2\2\2\u0222\5\3\2\2\2"+
		"\u0223\u0224\5\u01d0\u00e9\2\u0224\7\3\2\2\2\u0225\u024e\5\n\6\2\u0226"+
		"\u024e\5\f\7\2\u0227\u024e\5\16\b\2\u0228\u024e\5\20\t\2\u0229\u024e\5"+
		"\22\n\2\u022a\u024e\5\24\13\2\u022b\u024e\5\26\f\2\u022c\u024e\5\30\r"+
		"\2\u022d\u024e\5\32\16\2\u022e\u024e\5\34\17\2\u022f\u024e\5\36\20\2\u0230"+
		"\u024e\5 \21\2\u0231\u024e\5\"\22\2\u0232\u024e\5$\23\2\u0233\u024e\5"+
		"&\24\2\u0234\u024e\5(\25\2\u0235\u024e\5*\26\2\u0236\u024e\5,\27\2\u0237"+
		"\u024e\5.\30\2\u0238\u024e\5\60\31\2\u0239\u024e\5\62\32\2\u023a\u024e"+
		"\5\64\33\2\u023b\u024e\5\66\34\2\u023c\u024e\58\35\2\u023d\u024e\5:\36"+
		"\2\u023e\u024e\5<\37\2\u023f\u024e\5> \2\u0240\u024e\5@!\2\u0241\u024e"+
		"\5B\"\2\u0242\u024e\5D#\2\u0243\u024e\5F$\2\u0244\u024e\5H%\2\u0245\u024e"+
		"\5J&\2\u0246\u024e\5L\'\2\u0247\u024e\5N(\2\u0248\u024e\5P)\2\u0249\u024e"+
		"\5R*\2\u024a\u024e\5T+\2\u024b\u024e\5V,\2\u024c\u024e\5X-\2\u024d\u0225"+
		"\3\2\2\2\u024d\u0226\3\2\2\2\u024d\u0227\3\2\2\2\u024d\u0228\3\2\2\2\u024d"+
		"\u0229\3\2\2\2\u024d\u022a\3\2\2\2\u024d\u022b\3\2\2\2\u024d\u022c\3\2"+
		"\2\2\u024d\u022d\3\2\2\2\u024d\u022e\3\2\2\2\u024d\u022f\3\2\2\2\u024d"+
		"\u0230\3\2\2\2\u024d\u0231\3\2\2\2\u024d\u0232\3\2\2\2\u024d\u0233\3\2"+
		"\2\2\u024d\u0234\3\2\2\2\u024d\u0235\3\2\2\2\u024d\u0236\3\2\2\2\u024d"+
		"\u0237\3\2\2\2\u024d\u0238\3\2\2\2\u024d\u0239\3\2\2\2\u024d\u023a\3\2"+
		"\2\2\u024d\u023b\3\2\2\2\u024d\u023c\3\2\2\2\u024d\u023d\3\2\2\2\u024d"+
		"\u023e\3\2\2\2\u024d\u023f\3\2\2\2\u024d\u0240\3\2\2\2\u024d\u0241\3\2"+
		"\2\2\u024d\u0242\3\2\2\2\u024d\u0243\3\2\2\2\u024d\u0244\3\2\2\2\u024d"+
		"\u0245\3\2\2\2\u024d\u0246\3\2\2\2\u024d\u0247\3\2\2\2\u024d\u0248\3\2"+
		"\2\2\u024d\u0249\3\2\2\2\u024d\u024a\3\2\2\2\u024d\u024b\3\2\2\2\u024d"+
		"\u024c\3\2\2\2\u024e\t\3\2\2\2\u024f\u0250\5\u01d4\u00eb\2\u0250\13\3"+
		"\2\2\2\u0251\u0252\5\u01d4\u00eb\2\u0252\r\3\2\2\2\u0253\u0254\5\u01d4"+
		"\u00eb\2\u0254\17\3\2\2\2\u0255\u0256\5\u01d4\u00eb\2\u0256\21\3\2\2\2"+
		"\u0257\u0258\5\u01d4\u00eb\2\u0258\23\3\2\2\2\u0259\u025a\5\u01d4\u00eb"+
		"\2\u025a\25\3\2\2\2\u025b\u025c\5\u01d4\u00eb\2\u025c\27\3\2\2\2\u025d"+
		"\u025e\5\u01d4\u00eb\2\u025e\31\3\2\2\2\u025f\u0260\5\u01d4\u00eb\2\u0260"+
		"\33\3\2\2\2\u0261\u0262\5\u01d4\u00eb\2\u0262\35\3\2\2\2\u0263\u0264\5"+
		"\u01d4\u00eb\2\u0264\37\3\2\2\2\u0265\u0266\5\u01d4\u00eb\2\u0266!\3\2"+
		"\2\2\u0267\u0268\5\u01d4\u00eb\2\u0268#\3\2\2\2\u0269\u026a\5\u01d4\u00eb"+
		"\2\u026a%\3\2\2\2\u026b\u026c\5\u01d4\u00eb\2\u026c\'\3\2\2\2\u026d\u026e"+
		"\5\u01d4\u00eb\2\u026e)\3\2\2\2\u026f\u0270\5\u01d4\u00eb\2\u0270+\3\2"+
		"\2\2\u0271\u0272\5\u01d4\u00eb\2\u0272-\3\2\2\2\u0273\u0274\5\u01d4\u00eb"+
		"\2\u0274/\3\2\2\2\u0275\u0276\5\u01d4\u00eb\2\u0276\61\3\2\2\2\u0277\u0278"+
		"\5\u01d4\u00eb\2\u0278\63\3\2\2\2\u0279\u027a\5\u01d4\u00eb\2\u027a\65"+
		"\3\2\2\2\u027b\u027c\5\u01d4\u00eb\2\u027c\67\3\2\2\2\u027d\u027e\5\u01d4"+
		"\u00eb\2\u027e9\3\2\2\2\u027f\u0280\5\u01d4\u00eb\2\u0280;\3\2\2\2\u0281"+
		"\u0282\5\u01d4\u00eb\2\u0282=\3\2\2\2\u0283\u0284\5\u01d4\u00eb\2\u0284"+
		"?\3\2\2\2\u0285\u0286\5\u01d4\u00eb\2\u0286A\3\2\2\2\u0287\u0288\5\u01d4"+
		"\u00eb\2\u0288C\3\2\2\2\u0289\u028a\5\u01d4\u00eb\2\u028aE\3\2\2\2\u028b"+
		"\u028c\5\u01d4\u00eb\2\u028cG\3\2\2\2\u028d\u028e\5\u01d4\u00eb\2\u028e"+
		"I\3\2\2\2\u028f\u0290\5\u01d4\u00eb\2\u0290K\3\2\2\2\u0291\u0292\5\u01d4"+
		"\u00eb\2\u0292M\3\2\2\2\u0293\u0294\5\u01d4\u00eb\2\u0294O\3\2\2\2\u0295"+
		"\u0296\5\u01d4\u00eb\2\u0296Q\3\2\2\2\u0297\u0298\5\u01d4\u00eb\2\u0298"+
		"S\3\2\2\2\u0299\u029a\5\u01d4\u00eb\2\u029aU\3\2\2\2\u029b\u029c\5\u01d4"+
		"\u00eb\2\u029cW\3\2\2\2\u029d\u029e\5\u01d4\u00eb\2\u029eY\3\2\2\2\u029f"+
		"\u02a0\5\u01d4\u00eb\2\u02a0[\3\2\2\2\u02a1\u02a2\5\u01d4\u00eb\2\u02a2"+
		"]\3\2\2\2\u02a3\u02a4\5\u01d4\u00eb\2\u02a4_\3\2\2\2\u02a5\u02a6\5\u01d4"+
		"\u00eb\2\u02a6a\3\2\2\2\u02a7\u02a8\5\u01d4\u00eb\2\u02a8c\3\2\2\2\u02a9"+
		"\u02aa\5\u01d4\u00eb\2\u02aae\3\2\2\2\u02ab\u02ac\5\u01d4\u00eb\2\u02ac"+
		"g\3\2\2\2\u02ad\u02d5\5j\66\2\u02ae\u02d5\5l\67\2\u02af\u02d5\5n8\2\u02b0"+
		"\u02d5\5t;\2\u02b1\u02d5\5v<\2\u02b2\u02d5\5x=\2\u02b3\u02d5\5|?\2\u02b4"+
		"\u02d5\5\u0080A\2\u02b5\u02d5\5\u0084C\2\u02b6\u02d5\5\u0086D\2\u02b7"+
		"\u02d5\5\u0088E\2\u02b8\u02d5\5\u008aF\2\u02b9\u02d5\5\u008cG\2\u02ba"+
		"\u02d5\5\u008eH\2\u02bb\u02d5\5\u0090I\2\u02bc\u02d5\5\u0092J\2\u02bd"+
		"\u02d5\5\u0096L\2\u02be\u02d5\5\u0098M\2\u02bf\u02d5\5\u009aN\2\u02c0"+
		"\u02d5\5\u009cO\2\u02c1\u02d5\5\u00a0Q\2\u02c2\u02d5\5\u00a2R\2\u02c3"+
		"\u02d5\5\u00a4S\2\u02c4\u02d5\5\u00a6T\2\u02c5\u02d5\5\u00a8U\2\u02c6"+
		"\u02d5\5\u00aaV\2\u02c7\u02d5\5\u00acW\2\u02c8\u02d5\5\u00aeX\2\u02c9"+
		"\u02d5\5\u00b0Y\2\u02ca\u02d5\5\u00b2Z\2\u02cb\u02d5\5\u00b4[\2\u02cc"+
		"\u02d5\5\u00b6\\\2\u02cd\u02d5\5\u00b8]\2\u02ce\u02d5\5\u00ba^\2\u02cf"+
		"\u02d5\5\u00bc_\2\u02d0\u02d5\5\u00be`\2\u02d1\u02d5\5\u00c0a\2\u02d2"+
		"\u02d5\5\u00c2b\2\u02d3\u02d5\5\u00c4c\2\u02d4\u02ad\3\2\2\2\u02d4\u02ae"+
		"\3\2\2\2\u02d4\u02af\3\2\2\2\u02d4\u02b0\3\2\2\2\u02d4\u02b1\3\2\2\2\u02d4"+
		"\u02b2\3\2\2\2\u02d4\u02b3\3\2\2\2\u02d4\u02b4\3\2\2\2\u02d4\u02b5\3\2"+
		"\2\2\u02d4\u02b6\3\2\2\2\u02d4\u02b7\3\2\2\2\u02d4\u02b8\3\2\2\2\u02d4"+
		"\u02b9\3\2\2\2\u02d4\u02ba\3\2\2\2\u02d4\u02bb\3\2\2\2\u02d4\u02bc\3\2"+
		"\2\2\u02d4\u02bd\3\2\2\2\u02d4\u02be\3\2\2\2\u02d4\u02bf\3\2\2\2\u02d4"+
		"\u02c0\3\2\2\2\u02d4\u02c1\3\2\2\2\u02d4\u02c2\3\2\2\2\u02d4\u02c3\3\2"+
		"\2\2\u02d4\u02c4\3\2\2\2\u02d4\u02c5\3\2\2\2\u02d4\u02c6\3\2\2\2\u02d4"+
		"\u02c7\3\2\2\2\u02d4\u02c8\3\2\2\2\u02d4\u02c9\3\2\2\2\u02d4\u02ca\3\2"+
		"\2\2\u02d4\u02cb\3\2\2\2\u02d4\u02cc\3\2\2\2\u02d4\u02cd\3\2\2\2\u02d4"+
		"\u02ce\3\2\2\2\u02d4\u02cf\3\2\2\2\u02d4\u02d0\3\2\2\2\u02d4\u02d1\3\2"+
		"\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5i\3\2\2\2\u02d6\u02d7"+
		"\7}\2\2\u02d7\u02d8\7\n\2\2\u02d8\u02d9\7\u0142\2\2\u02d9\u02da\5\u01aa"+
		"\u00d6\2\u02da\u02db\7\u0246\2\2\u02db\u02dc\7\u0101\2\2\u02dc\u02dd\7"+
		"\u00f1\2\2\u02dd\u02de\5\u01aa\u00d6\2\u02dek\3\2\2\2\u02df\u02e0\7}\2"+
		"\2\u02e0\u02e1\7\20\2\2\u02e1\u02e2\5\u01aa\u00d6\2\u02e2\u02e4\7\u02ca"+
		"\2\2\u02e3\u02e5\t\2\2\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5"+
		"\u02e7\3\2\2\2\u02e6\u02e8\5\u01aa\u00d6\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8"+
		"\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\5\u01b4\u00db\2\u02ea\u02eb\7"+
		"\u02cb\2\2\u02eb\u02ec\7\u02ca\2\2\u02ec\u02ed\7\u0282\2\2\u02ed\u02ee"+
		"\7\u02e1\2\2\u02ee\u02ef\5\u01d0\u00e9\2\u02ef\u02f0\7\u02c4\2\2\u02f0"+
		"\u02f1\7\u0283\2\2\u02f1\u02f2\7\u02e1\2\2\u02f2\u02f7\5\u01d0\u00e9\2"+
		"\u02f3\u02f4\7\u02c4\2\2\u02f4\u02f5\7\u0284\2\2\u02f5\u02f6\7\u02e1\2"+
		"\2\u02f6\u02f8\7\u02d1\2\2\u02f7\u02f3\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8"+
		"\u02fd\3\2\2\2\u02f9\u02fa\7\u02c4\2\2\u02fa\u02fb\7\u0285\2\2\u02fb\u02fc"+
		"\7\u02e1\2\2\u02fc\u02fe\5\u01d0\u00e9\2\u02fd\u02f9\3\2\2\2\u02fd\u02fe"+
		"\3\2\2\2\u02fe\u0301\3\2\2\2\u02ff\u0300\7\u02c4\2\2\u0300\u0302\7\u0286"+
		"\2\2\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0307\3\2\2\2\u0303"+
		"\u0304\7\u02c4\2\2\u0304\u0305\7\u0287\2\2\u0305\u0306\7\u02e1\2\2\u0306"+
		"\u0308\5\u01d0\u00e9\2\u0307\u0303\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030d"+
		"\3\2\2\2\u0309\u030a\7\u02c4\2\2\u030a\u030b\7\u0288\2\2\u030b\u030c\7"+
		"\u02e1\2\2\u030c\u030e\5\u01d0\u00e9\2\u030d\u0309\3\2\2\2\u030d\u030e"+
		"\3\2\2\2\u030e\u0313\3\2\2\2\u030f\u0310\7\u02c4\2\2\u0310\u0311\7\u0289"+
		"\2\2\u0311\u0312\7\u02e1\2\2\u0312\u0314\5\u01d0\u00e9\2\u0313\u030f\3"+
		"\2\2\2\u0313\u0314\3\2\2\2\u0314\u0319\3\2\2\2\u0315\u0316\7\u02c4\2\2"+
		"\u0316\u0317\7\u028a\2\2\u0317\u0318\7\u02e1\2\2\u0318\u031a\5\u0192\u00ca"+
		"\2\u0319\u0315\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031f\3\2\2\2\u031b\u031c"+
		"\7\u02c4\2\2\u031c\u031d\7\u028b\2\2\u031d\u031e\7\u02e1\2\2\u031e\u0320"+
		"\5\u01d0\u00e9\2\u031f\u031b\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0325\3"+
		"\2\2\2\u0321\u0322\7\u02c4\2\2\u0322\u0323\7\u028c\2\2\u0323\u0324\7\u02e1"+
		"\2\2\u0324\u0326\5\u01d0\u00e9\2\u0325\u0321\3\2\2\2\u0325\u0326\3\2\2"+
		"\2\u0326\u032b\3\2\2\2\u0327\u0328\7\u02c4\2\2\u0328\u0329\7\u028d\2\2"+
		"\u0329\u032a\7\u02e1\2\2\u032a\u032c\5\u01d0\u00e9\2\u032b\u0327\3\2\2"+
		"\2\u032b\u032c\3\2\2\2\u032c\u0331\3\2\2\2\u032d\u032e\7\u02c4\2\2\u032e"+
		"\u032f\7\u028e\2\2\u032f\u0330\7\u02e1\2\2\u0330\u0332\7\u02d1\2\2\u0331"+
		"\u032d\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0337\3\2\2\2\u0333\u0334\7\u02c4"+
		"\2\2\u0334\u0335\7\u028f\2\2\u0335\u0336\7\u02e1\2\2\u0336\u0338\5\u01d0"+
		"\u00e9\2\u0337\u0333\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033b\3\2\2\2\u0339"+
		"\u033a\7\u02c4\2\2\u033a\u033c\7\u0290\2\2\u033b\u0339\3\2\2\2\u033b\u033c"+
		"\3\2\2\2\u033c\u0341\3\2\2\2\u033d\u033e\7\u02c4\2\2\u033e\u033f\7\u0291"+
		"\2\2\u033f\u0340\7\u02e1\2\2\u0340\u0342\5\u01d0\u00e9\2\u0341\u033d\3"+
		"\2\2\2\u0341\u0342\3\2\2\2\u0342\u0347\3\2\2\2\u0343\u0344\7\u02c4\2\2"+
		"\u0344\u0345\7\u0292\2\2\u0345\u0346\7\u02e1\2\2\u0346\u0348\5\u01d0\u00e9"+
		"\2\u0347\u0343\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034d\3\2\2\2\u0349\u034a"+
		"\7\u02c4\2\2\u034a\u034b\7\u0293\2\2\u034b\u034c\7\u02e1\2\2\u034c\u034e"+
		"\t\3\2\2\u034d\u0349\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f"+
		"\u0350\7\u02cb\2\2\u0350\u03fa\3\2\2\2\u0351\u0352\7}\2\2\u0352\u0353"+
		"\7\20\2\2\u0353\u0354\5\u01aa\u00d6\2\u0354\u035c\7\u02ca\2\2\u0355\u0357"+
		"\t\2\2\2\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0359\3\2\2\2\u0358"+
		"\u035a\5\u01aa\u00d6\2\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035b"+
		"\3\2\2\2\u035b\u035d\5\u01b4\u00db\2\u035c\u0356\3\2\2\2\u035c\u035d\3"+
		"\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\7\u017a\2\2\u035f\u0361\7\67\2"+
		"\2\u0360\u0362\t\2\2\2\u0361\u0360\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0364"+
		"\3\2\2\2\u0363\u0365\5\u01aa\u00d6\2\u0364\u0363\3\2\2\2\u0364\u0365\3"+
		"\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\5\u01b4\u00db\2\u0367\u0368\7\u02cb"+
		"\2\2\u0368\u0369\7\u02ca\2\2\u0369\u036a\7\u0282\2\2\u036a\u036b\7\u02e1"+
		"\2\2\u036b\u036c\5\u01d0\u00e9\2\u036c\u036d\7\u02c4\2\2\u036d\u036e\7"+
		"\u0283\2\2\u036e\u036f\7\u02e1\2\2\u036f\u0374\5\u01d0\u00e9\2\u0370\u0371"+
		"\7\u02c4\2\2\u0371\u0372\7\u0284\2\2\u0372\u0373\7\u02e1\2\2\u0373\u0375"+
		"\7\u02d1\2\2\u0374\u0370\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u037a\3\2\2"+
		"\2\u0376\u0377\7\u02c4\2\2\u0377\u0378\7\u0285\2\2\u0378\u0379\7\u02e1"+
		"\2\2\u0379\u037b\5\u01d0\u00e9\2\u037a\u0376\3\2\2\2\u037a\u037b\3\2\2"+
		"\2\u037b\u037e\3\2\2\2\u037c\u037d\7\u02c4\2\2\u037d\u037f\7\u0286\2\2"+
		"\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0384\3\2\2\2\u0380\u0381"+
		"\7\u02c4\2\2\u0381\u0382\7\u028a\2\2\u0382\u0383\7\u02e1\2\2\u0383\u0385"+
		"\5\u0192\u00ca\2\u0384\u0380\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u038a\3"+
		"\2\2\2\u0386\u0387\7\u02c4\2\2\u0387\u0388\7\u0293\2\2\u0388\u0389\7\u02e1"+
		"\2\2\u0389\u038b\t\3\2\2\u038a\u0386\3\2\2\2\u038a\u038b\3\2\2\2\u038b"+
		"\u038e\3\2\2\2\u038c\u038d\7\u02c4\2\2\u038d\u038f\7\u0294\2\2\u038e\u038c"+
		"\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\7\u02cb\2"+
		"\2\u0391\u03fa\3\2\2\2\u0392\u0393\7}\2\2\u0393\u0394\7\20\2\2\u0394\u0395"+
		"\5\u01aa\u00d6\2\u0395\u0396\7\u02ca\2\2\u0396\u0397\7\u0298\2\2\u0397"+
		"\u0398\7\u02e1\2\2\u0398\u0399\5\u01b2\u00da\2\u0399\u039a\7\u02c4\2\2"+
		"\u039a\u039b\7\u0282\2\2\u039b\u039c\7\u02e1\2\2\u039c\u039d\5\u01d0\u00e9"+
		"\2\u039d\u039e\7\u02c4\2\2\u039e\u039f\7\u0283\2\2\u039f\u03a0\7\u02e1"+
		"\2\2\u03a0\u03a5\5\u01d0\u00e9\2\u03a1\u03a2\7\u02c4\2\2\u03a2\u03a3\7"+
		"\u0284\2\2\u03a3\u03a4\7\u02e1\2\2\u03a4\u03a6\7\u02d1\2\2\u03a5\u03a1"+
		"\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03ab\3\2\2\2\u03a7\u03a8\7\u02c4\2"+
		"\2\u03a8\u03a9\7\u0285\2\2\u03a9\u03aa\7\u02e1\2\2\u03aa\u03ac\5\u01d0"+
		"\u00e9\2\u03ab\u03a7\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad"+
		"\u03ae\7\u02c4\2\2\u03ae\u03b0\7\u0286\2\2\u03af\u03ad\3\2\2\2\u03af\u03b0"+
		"\3\2\2\2\u03b0\u03b5\3\2\2\2\u03b1\u03b2\7\u02c4\2\2\u03b2\u03b3\7\u0287"+
		"\2\2\u03b3\u03b4\7\u02e1\2\2\u03b4\u03b6\5\u01d0\u00e9\2\u03b5\u03b1\3"+
		"\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03bb\3\2\2\2\u03b7\u03b8\7\u02c4\2\2"+
		"\u03b8\u03b9\7\u0288\2\2\u03b9\u03ba\7\u02e1\2\2\u03ba\u03bc\5\u01d0\u00e9"+
		"\2\u03bb\u03b7\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03c1\3\2\2\2\u03bd\u03be"+
		"\7\u02c4\2\2\u03be\u03bf\7\u0289\2\2\u03bf\u03c0\7\u02e1\2\2\u03c0\u03c2"+
		"\5\u01d0\u00e9\2\u03c1\u03bd\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c7\3"+
		"\2\2\2\u03c3\u03c4\7\u02c4\2\2\u03c4\u03c5\7\u028a\2\2\u03c5\u03c6\7\u02e1"+
		"\2\2\u03c6\u03c8\5\u0192\u00ca\2\u03c7\u03c3\3\2\2\2\u03c7\u03c8\3\2\2"+
		"\2\u03c8\u03cd\3\2\2\2\u03c9\u03ca\7\u02c4\2\2\u03ca\u03cb\7\u028b\2\2"+
		"\u03cb\u03cc\7\u02e1\2\2\u03cc\u03ce\5\u01d0\u00e9\2\u03cd\u03c9\3\2\2"+
		"\2\u03cd\u03ce\3\2\2\2\u03ce\u03d3\3\2\2\2\u03cf\u03d0\7\u02c4\2\2\u03d0"+
		"\u03d1\7\u028c\2\2\u03d1\u03d2\7\u02e1\2\2\u03d2\u03d4\5\u01d0\u00e9\2"+
		"\u03d3\u03cf\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d9\3\2\2\2\u03d5\u03d6"+
		"\7\u02c4\2\2\u03d6\u03d7\7\u028d\2\2\u03d7\u03d8\7\u02e1\2\2\u03d8\u03da"+
		"\5\u01d0\u00e9\2\u03d9\u03d5\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03df\3"+
		"\2\2\2\u03db\u03dc\7\u02c4\2\2\u03dc\u03dd\7\u028e\2\2\u03dd\u03de\7\u02e1"+
		"\2\2\u03de\u03e0\7\u02d1\2\2\u03df\u03db\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0"+
		"\u03e5\3\2\2\2\u03e1\u03e2\7\u02c4\2\2\u03e2\u03e3\7\u028f\2\2\u03e3\u03e4"+
		"\7\u02e1\2\2\u03e4\u03e6\5\u01d0\u00e9\2\u03e5\u03e1\3\2\2\2\u03e5\u03e6"+
		"\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e8\7\u02c4\2\2\u03e8\u03ea\7\u0290"+
		"\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ef\3\2\2\2\u03eb"+
		"\u03ec\7\u02c4\2\2\u03ec\u03ed\7\u0291\2\2\u03ed\u03ee\7\u02e1\2\2\u03ee"+
		"\u03f0\5\u01d0\u00e9\2\u03ef\u03eb\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f5"+
		"\3\2\2\2\u03f1\u03f2\7\u02c4\2\2\u03f2\u03f3\7\u0292\2\2\u03f3\u03f4\7"+
		"\u02e1\2\2\u03f4\u03f6\5\u01d0\u00e9\2\u03f5\u03f1\3\2\2\2\u03f5\u03f6"+
		"\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\7\u02cb\2\2\u03f8\u03fa\3\2\2"+
		"\2\u03f9\u02df\3\2\2\2\u03f9\u0351\3\2\2\2\u03f9\u0392\3\2\2\2\u03fam"+
		"\3\2\2\2\u03fb\u03fc\7}\2\2\u03fc\u03fd\7@\2\2\u03fd\u03fe\7\u02ca\2\2"+
		"\u03fe\u03ff\5\u01b2\u00da\2\u03ff\u0400\7\35\2\2\u0400\u0401\5\u01b2"+
		"\u00da\2\u0401\u040f\7\u02cb\2\2\u0402\u0403\7\u026f\2\2\u0403\u0404\7"+
		"\u00e4\2\2\u0404\u0409\5\u01d0\u00e9\2\u0405\u0406\7\u02ca\2\2\u0406\u0407"+
		"\5\u01b4\u00db\2\u0407\u0408\7\u02cb\2\2\u0408\u040a\3\2\2\2\u0409\u0405"+
		"\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u0410\3\2\2\2\u040b\u040c\7\u0271\2"+
		"\2\u040c\u0410\7\u00e4\2\2\u040d\u040e\7\u026f\2\2\u040e\u0410\7\u0108"+
		"\2\2\u040f\u0402\3\2\2\2\u040f\u040b\3\2\2\2\u040f\u040d\3\2\2\2\u0410"+
		"\u0415\3\2\2\2\u0411\u0412\7\35\2\2\u0412\u0416\7!\2\2\u0413\u0414\7\35"+
		"\2\2\u0414\u0416\7\u00fd\2\2\u0415\u0411\3\2\2\2\u0415\u0413\3\2\2\2\u0415"+
		"\u0416\3\2\2\2\u0416o\3\2\2\2\u0417\u0418\7\u029a\2\2\u0418\u0419\7\u02e1"+
		"\2\2\u0419\u042a\5\u0192\u00ca\2\u041a\u041b\7\u029b\2\2\u041b\u041c\7"+
		"\u02e1\2\2\u041c\u042a\5\u0192\u00ca\2\u041d\u041e\7\u029c\2\2\u041e\u041f"+
		"\7\u02e1\2\2\u041f\u042a\5\u0192\u00ca\2\u0420\u0421\7\u029d\2\2\u0421"+
		"\u0422\7\u02e1\2\2\u0422\u042a\5\u0192\u00ca\2\u0423\u0424\7\u029e\2\2"+
		"\u0424\u0425\7\u02e1\2\2\u0425\u042a\5\u0192\u00ca\2\u0426\u0427\7\u02d5"+
		"\2\2\u0427\u0428\7\u02e1\2\2\u0428\u042a\5\u0192\u00ca\2\u0429\u0417\3"+
		"\2\2\2\u0429\u041a\3\2\2\2\u0429\u041d\3\2\2\2\u0429\u0420\3\2\2\2\u0429"+
		"\u0423\3\2\2\2\u0429\u0426\3\2\2\2\u042aq\3\2\2\2\u042b\u0430\5p9\2\u042c"+
		"\u042d\7\u02c4\2\2\u042d\u042f\5p9\2\u042e\u042c\3\2\2\2\u042f\u0432\3"+
		"\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431s\3\2\2\2\u0432\u0430"+
		"\3\2\2\2\u0433\u0434\7}\2\2\u0434\u0438\7Z\2\2\u0435\u0436\7\u0299\2\2"+
		"\u0436\u0437\7\u015f\2\2\u0437\u0439\7\u00cc\2\2\u0438\u0435\3\2\2\2\u0438"+
		"\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\5\u01aa\u00d6\2\u043b\u043c"+
		"\7\u02ca\2\2\u043c\u043d\5r:\2\u043d\u043e\7\u02cb\2\2\u043e\u044b\3\2"+
		"\2\2\u043f\u0440\7}\2\2\u0440\u0444\7Z\2\2\u0441\u0442\7\u0299\2\2\u0442"+
		"\u0443\7\u015f\2\2\u0443\u0445\7\u00cc\2\2\u0444\u0441\3\2\2\2\u0444\u0445"+
		"\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\5\u01aa\u00d6\2\u0447\u0448\7"+
		"\u00e2\2\2\u0448\u0449\5\u01aa\u00d6\2\u0449\u044b\3\2\2\2\u044a\u0433"+
		"\3\2\2\2\u044a\u043f\3\2\2\2\u044bu\3\2\2\2\u044c\u044e\7}\2\2\u044d\u044f"+
		"\7\u009a\2\2\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\3\2\2"+
		"\2\u0450\u0451\7u\2\2\u0451\u0452\5\u01d0\u00e9\2\u0452\u0453\7\u00da"+
		"\2\2\u0453\u0454\7\u02d4\2\2\u0454\u0455\7\u0231\2\2\u0455\u0456\7\u02d4"+
		"\2\2\u0456\u0457\7\u00e2\2\2\u0457\u0458\5\u01aa\u00d6\2\u0458w\3\2\2"+
		"\2\u0459\u045a\7}\2\2\u045a\u045b\7\u0091\2\2\u045b\u045d\5\u01aa\u00d6"+
		"\2\u045c\u045e\7\u026f\2\2\u045d\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e"+
		"\u0462\3\2\2\2\u045f\u0460\7\u0185\2\2\u0460\u0461\7\u02e1\2\2\u0461\u0463"+
		"\5\u01aa\u00d6\2\u0462\u045f\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0467\3"+
		"\2\2\2\u0464\u0465\7\u0225\2\2\u0465\u0466\7\u02e1\2\2\u0466\u0468\5\u01aa"+
		"\u00d6\2\u0467\u0464\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046c\3\2\2\2\u0469"+
		"\u046a\7\u00bd\2\2\u046a\u046b\7\u02e1\2\2\u046b\u046d\5\u01aa\u00d6\2"+
		"\u046c\u0469\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0471\3\2\2\2\u046e\u046f"+
		"\7\u029b\2\2\u046f\u0470\7\u02e1\2\2\u0470\u0472\5\u01aa\u00d6\2\u0471"+
		"\u046e\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0476\3\2\2\2\u0473\u0474\7\u029c"+
		"\2\2\u0474\u0475\7\u02e1\2\2\u0475\u0477\5\u01aa\u00d6\2\u0476\u0473\3"+
		"\2\2\2\u0476\u0477\3\2\2\2\u0477\u047b\3\2\2\2\u0478\u0479\7\u0222\2\2"+
		"\u0479\u047a\7\u02e1\2\2\u047a\u047c\5\u01aa\u00d6\2\u047b\u0478\3\2\2"+
		"\2\u047b\u047c\3\2\2\2\u047c\u0480\3\2\2\2\u047d\u047e\7\u029f\2\2\u047e"+
		"\u047f\7\u02e1\2\2\u047f\u0481\5\u01aa\u00d6\2\u0480\u047d\3\2\2\2\u0480"+
		"\u0481\3\2\2\2\u0481\u0486\3\2\2\2\u0482\u0483\7k\2\2\u0483\u0484\7\u012a"+
		"\2\2\u0484\u0485\7\u02e1\2\2\u0485\u0487\7\u02d1\2\2\u0486\u0482\3\2\2"+
		"\2\u0486\u0487\3\2\2\2\u0487\u048b\3\2\2\2\u0488\u0489\7\u02a0\2\2\u0489"+
		"\u048a\7\u02e1\2\2\u048a\u048c\7\u02d1\2\2\u048b\u0488\3\2\2\2\u048b\u048c"+
		"\3\2\2\2\u048cy\3\2\2\2\u048d\u048e\7m\2\2\u048e\u0490\5\u01aa\u00d6\2"+
		"\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0499\3\2\2\2\u0491\u0492"+
		"\7\u015f\2\2\u0492\u049a\7\u0164\2\2\u0493\u049a\7\u0164\2\2\u0494\u0495"+
		"\7O\2\2\u0495\u0496\7\u02ca\2\2\u0496\u0497\5\u0192\u00ca\2\u0497\u0498"+
		"\7\u02cb\2\2\u0498\u049a\3\2\2\2\u0499\u0491\3\2\2\2\u0499\u0493\3\2\2"+
		"\2\u0499\u0494\3\2\2\2\u049a{\3\2\2\2\u049b\u049c\7}\2\2\u049c\u049d\7"+
		"\u00b4\2\2\u049d\u049f\5\u01aa\u00d6\2\u049e\u04a0\7\35\2\2\u049f\u049e"+
		"\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a9\5\u01b2\u00da"+
		"\2\u04a2\u04a3\7Y\2\2\u04a3\u04a8\5\u01aa\u00d6\2\u04a4\u04a5\7\u009a"+
		"\2\2\u04a5\u04a8\5\u0192\u00ca\2\u04a6\u04a8\5z>\2\u04a7\u04a2\3\2\2\2"+
		"\u04a7\u04a4\3\2\2\2\u04a7\u04a6\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9\u04a7"+
		"\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa}\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac"+
		"\u04ad\5\u01d0\u00e9\2\u04ad\u04ae\7\u00fe\2\2\u04ae\u04af\7\u02ca\2\2"+
		"\u04af\u04b4\7\u02d4\2\2\u04b0\u04b1\7\u02c4\2\2\u04b1\u04b3\7\u02d4\2"+
		"\2\u04b2\u04b0\3\2\2\2\u04b3\u04b6\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5"+
		"\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b7\u04bc\7\u02cb\2"+
		"\2\u04b8\u04b9\7\31\2\2\u04b9\u04bb\5~@\2\u04ba\u04b8\3\2\2\2\u04bb\u04be"+
		"\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\177\3\2\2\2\u04be"+
		"\u04bc\3\2\2\2\u04bf\u04c0\7}\2\2\u04c0\u04c1\7\u02a1\2\2\u04c1\u04c2"+
		"\7\u023e\2\2\u04c2\u04c3\5\u01d0\u00e9\2\u04c3\u04c4\7\u0172\2\2\u04c4"+
		"\u04c7\5\u01d0\u00e9\2\u04c5\u04c6\7\u026a\2\2\u04c6\u04c8\5~@\2\u04c7"+
		"\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca\7\u00ca"+
		"\2\2\u04ca\u04cb\7\u01a7\2\2\u04cb\u04cc\5\u01d0\u00e9\2\u04cc\u04cd\7"+
		"\u02ca\2\2\u04cd\u04ce\7\u02cb\2\2\u04ce\u0081\3\2\2\2\u04cf\u04d0\5\u01aa"+
		"\u00d6\2\u04d0\u04d5\7\u02d4\2\2\u04d1\u04d2\7\u02c4\2\2\u04d2\u04d4\5"+
		"\u0082B\2\u04d3\u04d1\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d3\3\2\2\2"+
		"\u04d5\u04d6\3\2\2\2\u04d6\u0083\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d8\u04d9"+
		"\7}\2\2\u04d9\u04da\7\u00dc\2\2\u04da\u04db\7\u0090\2\2\u04db\u04dc\7"+
		"\u02a2\2\2\u04dc\u04e3\5\u01d0\u00e9\2\u04dd\u04de\7\u00f1\2\2\u04de\u04e2"+
		"\5\u01d0\u00e9\2\u04df\u04e0\7\u0159\2\2\u04e0\u04e2\7\u00f1\2\2\u04e1"+
		"\u04dd\3\2\2\2\u04e1\u04df\3\2\2\2\u04e2\u04e5\3\2\2\2\u04e3\u04e1\3\2"+
		"\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04ea\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6"+
		"\u04e7\7\u025e\2\2\u04e7\u04eb\5\u01d0\u00e9\2\u04e8\u04e9\7\u0159\2\2"+
		"\u04e9\u04eb\7\u025e\2\2\u04ea\u04e6\3\2\2\2\u04ea\u04e8\3\2\2\2\u04ea"+
		"\u04eb\3\2\2\2\u04eb\u04f1\3\2\2\2\u04ec\u04ed\7\u0178\2\2\u04ed\u04ee"+
		"\7\u02ca\2\2\u04ee\u04ef\5\u0082B\2\u04ef\u04f0\7\u02cb\2\2\u04f0\u04f2"+
		"\3\2\2\2\u04f1\u04ec\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u0085\3\2\2\2\u04f3"+
		"\u04f4\7}\2\2\u04f4\u04f5\7\u00dc\2\2\u04f5\u04f9\7\u0220\2\2\u04f6\u04f7"+
		"\7\u0299\2\2\u04f7\u04f8\7\u015f\2\2\u04f8\u04fa\7\u00cc\2\2\u04f9\u04f6"+
		"\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\u04fc\5\u01d0\u00e9"+
		"\2\u04fc\u04fd\7\u02ca\2\2\u04fd\u04fe\5\u01d0\u00e9\2\u04fe\u0504\5\u01d0"+
		"\u00e9\2\u04ff\u0500\7\u0178\2\2\u0500\u0501\7\u02ca\2\2\u0501\u0502\5"+
		"\u0082B\2\u0502\u0503\7\u02cb\2\2\u0503\u0505\3\2\2\2\u0504\u04ff\3\2"+
		"\2\2\u0504\u0505\3\2\2\2\u0505\u0508\3\2\2\2\u0506\u0507\7Y\2\2\u0507"+
		"\u0509\5p9\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050a\3\2\2"+
		"\2\u050a\u050d\7\u02cb\2\2\u050b\u050c\7\u0104\2\2\u050c\u050e\5\u01ac"+
		"\u00d7\2\u050d\u050b\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f"+
		"\u0510\7\u02a3\2\2\u0510\u0516\5\u01aa\u00d6\2\u0511\u0512\7\u0178\2\2"+
		"\u0512\u0513\7\u02ca\2\2\u0513\u0514\5\u0082B\2\u0514\u0515\7\u02cb\2"+
		"\2\u0515\u0517\3\2\2\2\u0516\u0511\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0087"+
		"\3\2\2\2\u0518\u051b\7}\2\2\u0519\u051a\7\u0179\2\2\u051a\u051c\7\u01c3"+
		"\2\2\u051b\u0519\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051d\3\2\2\2\u051d"+
		"\u051e\7\u00e4\2\2\u051e\u051f\5\u01aa\u00d6\2\u051f\u0089\3\2\2\2\u0520"+
		"\u0521\7}\2\2\u0521\u0522\7\u00ef\2\2\u0522\u054c\5\u01d0\u00e9\2\u0523"+
		"\u0525\7\u026f\2\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0548"+
		"\3\2\2\2\u0526\u0549\7\u0276\2\2\u0527\u0549\7\u0277\2\2\u0528\u0549\7"+
		"~\2\2\u0529\u0549\7\u015a\2\2\u052a\u0549\7\u0278\2\2\u052b\u0549\7\u0279"+
		"\2\2\u052c\u0549\7\177\2\2\u052d\u0549\7\u015b\2\2\u052e\u0549\7\u027a"+
		"\2\2\u052f\u0549\7\u027b\2\2\u0530\u0549\7\u027c\2\2\u0531\u0549\7\u027d"+
		"\2\2\u0532\u0534\t\4\2\2\u0533\u0532\3\2\2\2\u0533\u0534\3\2\2\2\u0534"+
		"\u0535\3\2\2\2\u0535\u0536\7\u0193\2\2\u0536\u0549\t\5\2\2\u0537\u0538"+
		"\7\u025d\2\2\u0538\u0539\7\u0252\2\2\u0539\u0549\7\u02d4\2\2\u053a\u053b"+
		"\7\u00fe\2\2\u053b\u053c\7\u01d0\2\2\u053c\u0549\5\u01ac\u00d7\2\u053d"+
		"\u053e\7\u00fe\2\2\u053e\u053f\7\u00ef\2\2\u053f\u0549\5\u01ac\u00d7\2"+
		"\u0540\u0541\7\u01d0\2\2\u0541\u0549\5\u01ac\u00d7\2\u0542\u0543\7\16"+
		"\2\2\u0543\u0549\5\u01ac\u00d7\2\u0544\u0545\7\u0256\2\2\u0545\u0549\5"+
		"\u01ac\u00d7\2\u0546\u0547\7\u021d\2\2\u0547\u0549\7\u02d1\2\2\u0548\u0526"+
		"\3\2\2\2\u0548\u0527\3\2\2\2\u0548\u0528\3\2\2\2\u0548\u0529\3\2\2\2\u0548"+
		"\u052a\3\2\2\2\u0548\u052b\3\2\2\2\u0548\u052c\3\2\2\2\u0548\u052d\3\2"+
		"\2\2\u0548\u052e\3\2\2\2\u0548\u052f\3\2\2\2\u0548\u0530\3\2\2\2\u0548"+
		"\u0531\3\2\2\2\u0548\u0533\3\2\2\2\u0548\u0537\3\2\2\2\u0548\u053a\3\2"+
		"\2\2\u0548\u053d\3\2\2\2\u0548\u0540\3\2\2\2\u0548\u0542\3\2\2\2\u0548"+
		"\u0544\3\2\2\2\u0548\u0546\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u0548\3\2"+
		"\2\2\u054a\u054b\3\2\2\2\u054b\u054d\3\2\2\2\u054c\u0524\3\2\2\2\u054c"+
		"\u054d\3\2\2\2\u054d\u008b\3\2\2\2\u054e\u0550\7}\2\2\u054f\u0551\7\u024d"+
		"\2\2\u0550\u054f\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0552\3\2\2\2\u0552"+
		"\u0554\7\u0101\2\2\u0553\u0555\7\u02aa\2\2\u0554\u0553\3\2\2\2\u0554\u0555"+
		"\3\2\2\2\u0555\u055c\3\2\2\2\u0556\u0557\7\u0299\2\2\u0557\u0558\7\u015f"+
		"\2\2\u0558\u055a\7\u00cc\2\2\u0559\u0556\3\2\2\2\u0559\u055a\3\2\2\2\u055a"+
		"\u055b\3\2\2\2\u055b\u055d\5\u01d0\u00e9\2\u055c\u0559\3\2\2\2\u055c\u055d"+
		"\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f\7\u0172\2\2\u055f\u0562\5\u01d0"+
		"\u00e9\2\u0560\u0561\7\u025b\2\2\u0561\u0563\5\u01b6\u00dc\2\u0562\u0560"+
		"\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0566\3\2\2\2\u0564\u0565\7\u0222\2"+
		"\2\u0565\u0567\5\u01d0\u00e9\2\u0566\u0564\3\2\2\2\u0566\u0567\3\2\2\2"+
		"\u0567\u056a\3\2\2\2\u0568\u0569\7\u026c\2\2\u0569\u056b\5\u01c6\u00e4"+
		"\2\u056a\u0568\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u008d\3\2\2\2\u056c\u056f"+
		"\7}\2\2\u056d\u056e\7\u0179\2\2\u056e\u0570\7\u01c3\2\2\u056f\u056d\3"+
		"\2\2\2\u056f\u0570\3\2\2\2\u0570\u0572\3\2\2\2\u0571\u0573\7\u01a6\2\2"+
		"\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575"+
		"\7\u0120\2\2\u0575\u058e\5\u01d0\u00e9\2\u0576\u0579\7}\2\2\u0577\u0578"+
		"\7\u0179\2\2\u0578\u057a\7\u01c3\2\2\u0579\u0577\3\2\2\2\u0579\u057a\3"+
		"\2\2\2\u057a\u057c\3\2\2\2\u057b\u057d\7\u0245\2\2\u057c\u057b\3\2\2\2"+
		"\u057c\u057d\3\2\2\2\u057d\u057f\3\2\2\2\u057e\u0580\7\u01a6\2\2\u057f"+
		"\u057e\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582\7\u0120"+
		"\2\2\u0582\u0583\5\u01d0\u00e9\2\u0583\u0584\7\u00f1\2\2\u0584\u0587\5"+
		"\u01d0\u00e9\2\u0585\u0586\7\u02ab\2\2\u0586\u0588\5\u01d0\u00e9\2\u0587"+
		"\u0585\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u058b\3\2\2\2\u0589\u058a\7\u025e"+
		"\2\2\u058a\u058c\5\u01d0\u00e9\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2"+
		"\2\u058c\u058e\3\2\2\2\u058d\u056c\3\2\2\2\u058d\u0576\3\2\2\2\u058e\u008f"+
		"\3\2\2\2\u058f\u0590\7}\2\2\u0590\u0591\7\u02ac\2\2\u0591\u0595\7\u0268"+
		"\2\2\u0592\u0593\7\u0299\2\2\u0593\u0594\7\u015f\2\2\u0594\u0596\7\u00cc"+
		"\2\2\u0595\u0592\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0597\3\2\2\2\u0597"+
		"\u059c\5\u01d0\u00e9\2\u0598\u0599\7\u02ca\2\2\u0599\u059a\5\u01ae\u00d8"+
		"\2\u059a\u059b\7\u02cb\2\2\u059b\u059d\3\2\2\2\u059c\u0598\3\2\2\2\u059c"+
		"\u059d\3\2\2\2\u059d\u059f\3\2\2\2\u059e\u05a0\7\u026f\2\2\u059f\u059e"+
		"\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a3\3\2\2\2\u05a1\u05a2\7\u0222\2"+
		"\2\u05a2\u05a4\5\u01d0\u00e9\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2"+
		"\u05a4\u05a5\3\2\2\2\u05a5\u05a6\7\35\2\2\u05a6\u05ac\5\u0152\u00aa\2"+
		"\u05a7\u05a9\7\u026f\2\2\u05a8\u05aa\7\u0159\2\2\u05a9\u05a8\3\2\2\2\u05a9"+
		"\u05aa\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\7\u0090\2\2\u05ac\u05a7"+
		"\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u0091\3\2\2\2\u05ae\u05af\7}\2\2\u05af"+
		"\u05b0\7\u0176\2\2\u05b0\u05b1\5\u01d0\u00e9\2\u05b1\u05b2\7\u02ca\2\2"+
		"\u05b2\u05b3\7\u01a7\2\2\u05b3\u05b4\7\u02e1\2\2\u05b4\u05b9\5\u01d0\u00e9"+
		"\2\u05b5\u05b6\7\u02c4\2\2\u05b6\u05b7\7\u02ad\2\2\u05b7\u05b8\7\u02e1"+
		"\2\2\u05b8\u05ba\5\u01aa\u00d6\2\u05b9\u05b5\3\2\2\2\u05b9\u05ba\3\2\2"+
		"\2\u05ba\u05bf\3\2\2\2\u05bb\u05bc\7\u02c4\2\2\u05bc\u05bd\7\u02ae\2\2"+
		"\u05bd\u05be\7\u02e1\2\2\u05be\u05c0\5\u01aa\u00d6\2\u05bf\u05bb\3\2\2"+
		"\2\u05bf\u05c0\3\2\2\2\u05c0\u05c5\3\2\2\2\u05c1\u05c2\7\u02c4\2\2\u05c2"+
		"\u05c3\7\u02af\2\2\u05c3\u05c4\7\u02e1\2\2\u05c4\u05c6\5\u01aa\u00d6\2"+
		"\u05c5\u05c1\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05cb\3\2\2\2\u05c7\u05c8"+
		"\7\u02c4\2\2\u05c8\u05c9\7\u02b0\2\2\u05c9\u05ca\7\u02e1\2\2\u05ca\u05cc"+
		"\5\u01aa\u00d6\2\u05cb\u05c7\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05d1\3"+
		"\2\2\2\u05cd\u05ce\7\u02c4\2\2\u05ce\u05cf\7\u01c6\2\2\u05cf\u05d0\7\u02e1"+
		"\2\2\u05d0\u05d2\5\u01aa\u00d6\2\u05d1\u05cd\3\2\2\2\u05d1\u05d2\3\2\2"+
		"\2\u05d2\u05d7\3\2\2\2\u05d3\u05d4\7\u02c4\2\2\u05d4\u05d5\7\u011a\2\2"+
		"\u05d5\u05d6\7\u02e1\2\2\u05d6\u05d8\5\u01aa\u00d6\2\u05d7\u05d3\3\2\2"+
		"\2\u05d7\u05d8\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05da\7\u02c4\2\2\u05da"+
		"\u05dc\7\u02b1\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05df"+
		"\3\2\2\2\u05dd\u05de\7\u02c4\2\2\u05de\u05e0\7\u02b2\2\2\u05df\u05dd\3"+
		"\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2\7\u02cb\2\2"+
		"\u05e2\u0093\3\2\2\2\u05e3\u05e4\7\u0176\2\2\u05e4\u05e5\7\u02d1\2\2\u05e5"+
		"\u05ec\5\u01d0\u00e9\2\u05e6\u05e7\7\u02ca\2\2\u05e7\u05e8\5\u01d0\u00e9"+
		"\2\u05e8\u05e9\7\u02c4\2\2\u05e9\u05ea\5\u01d0\u00e9\2\u05ea\u05eb\7\u02cb"+
		"\2\2\u05eb\u05ed\3\2\2\2\u05ec\u05e6\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed"+
		"\u0602\3\2\2\2\u05ee\u05ef\7\u00e4\2\2\u05ef\u05f8\7\u02d1\2\2\u05f0\u05f1"+
		"\7\u02ca\2\2\u05f1\u05f4\5\u01d0\u00e9\2\u05f2\u05f3\7\u02c4\2\2\u05f3"+
		"\u05f5\5\u01d0\u00e9\2\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u05f6"+
		"\3\2\2\2\u05f6\u05f7\7\u02cb\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05f0\3\2\2"+
		"\2\u05f8\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u01d0\u00e9\2"+
		"\u05fb\u05fc\7\u02ca\2\2\u05fc\u05fd\5\u01b4\u00db\2\u05fd\u05fe\7\u02cb"+
		"\2\2\u05fe\u0602\3\2\2\2\u05ff\u0600\7\u0212\2\2\u0600\u0602\5\u01d0\u00e9"+
		"\2\u0601\u05e3\3\2\2\2\u0601\u05ee\3\2\2\2\u0601\u05ff\3\2\2\2\u0602\u0095"+
		"\3\2\2\2\u0603\u0604\7}\2\2\u0604\u0605\7\u0176\2\2\u0605\u0606\7R\2\2"+
		"\u0606\u0608\5\u01d0\u00e9\2\u0607\u0609\7\u009a\2\2\u0608\u0607\3\2\2"+
		"\2\u0608\u0609\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060b\7\u00da\2\2\u060b"+
		"\u060c\7\u0246\2\2\u060c\u060d\5\u01d0\u00e9\2\u060d\u060e\7\u025b\2\2"+
		"\u060e\u0611\5\u01b6\u00dc\2\u060f\u0610\7\u02b3\2\2\u0610\u0612\5\u01d0"+
		"\u00e9\2\u0611\u060f\3\2\2\2\u0611\u0612\3\2\2\2\u0612\u0613\3\2\2\2\u0613"+
		"\u0614\7\35\2\2\u0614\u0619\5\u0094K\2\u0615\u0616\7\u02c4\2\2\u0616\u0618"+
		"\5\u0094K\2\u0617\u0615\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617\3\2\2"+
		"\2\u0619\u061a\3\2\2\2\u061a\u0097\3\2\2\2\u061b\u0619\3\2\2\2\u061c\u061d"+
		"\7}\2\2\u061d\u061e\7\u0176\2\2\u061e\u061f\7\u02b3\2\2\u061f\u0620\5"+
		"\u01d0\u00e9\2\u0620\u0621\7\u025b\2\2\u0621\u0622\5\u01b6\u00dc\2\u0622"+
		"\u0099\3\2\2\2\u0623\u0624\7}\2\2\u0624\u0625\7\u02b4\2\2\u0625\u0626"+
		"\5\u01d0\u00e9\2\u0626\u0627\7\u0172\2\2\u0627\u062a\5\u01d0\u00e9\2\u0628"+
		"\u0629\7\u00da\2\2\u0629\u062b\t\6\2\2\u062a\u0628\3\2\2\2\u062a\u062b"+
		"\3\2\2\2\u062b\u062e\3\2\2\2\u062c\u062d\7\u0231\2\2\u062d\u062f\5\u01ca"+
		"\u00e6\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0635\3\2\2\2\u0630"+
		"\u0631\7\u025b\2\2\u0631\u0632\7\u02ca\2\2\u0632\u0633\5\u01c6\u00e4\2"+
		"\u0633\u0634\7\u02cb\2\2\u0634\u0636\3\2\2\2\u0635\u0630\3\2\2\2\u0635"+
		"\u0636\3\2\2\2\u0636\u063d\3\2\2\2\u0637\u0638\7\u026f\2\2\u0638\u0639"+
		"\7O\2\2\u0639\u063a\7\u02ca\2\2\u063a\u063b\5\u01c6\u00e4\2\u063b\u063c"+
		"\7\u02cb\2\2\u063c\u063e\3\2\2\2\u063d\u0637\3\2\2\2\u063d\u063e\3\2\2"+
		"\2\u063e\u009b\3\2\2\2\u063f\u0640\7}\2\2\u0640\u0641\7\u01d0\2\2\u0641"+
		"\u0670\5\u01ca\u00e6\2\u0642\u0644\7\u026f\2\2\u0643\u0642\3\2\2\2\u0643"+
		"\u0644\3\2\2\2\u0644\u066c\3\2\2\2\u0645\u066d\7\u0276\2\2\u0646\u066d"+
		"\7\u0277\2\2\u0647\u066d\7~\2\2\u0648\u066d\7\u015a\2\2\u0649\u066d\7"+
		"\u0278\2\2\u064a\u066d\7\u0279\2\2\u064b\u066d\7\u027a\2\2\u064c\u066d"+
		"\7\u027b\2\2\u064d\u066d\7\u027c\2\2\u064e\u066d\7\u027d\2\2\u064f\u066d"+
		"\7\u027e\2\2\u0650\u066d\7\u027f\2\2\u0651\u066d\7\u0280\2\2\u0652\u066d"+
		"\7\u0281\2\2\u0653\u0654\7k\2\2\u0654\u0655\7\u012a\2\2\u0655\u066d\7"+
		"\u02d1\2\2\u0656\u0658\7\u00be\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2"+
		"\2\2\u0658\u0659\3\2\2\2\u0659\u065a\7\u0193\2\2\u065a\u066d\t\5\2\2\u065b"+
		"\u065c\7\u025d\2\2\u065c\u065d\7\u0252\2\2\u065d\u066d\7\u02d4\2\2\u065e"+
		"\u065f\7\u00fe\2\2\u065f\u0660\7\u01d0\2\2\u0660\u066d\5\u01ac\u00d7\2"+
		"\u0661\u0662\7\u00fe\2\2\u0662\u0663\7\u00ef\2\2\u0663\u066d\5\u01ac\u00d7"+
		"\2\u0664\u0665\7\u01d0\2\2\u0665\u066d\5\u01ac\u00d7\2\u0666\u0667\7\16"+
		"\2\2\u0667\u066d\5\u01ac\u00d7\2\u0668\u0669\7\u0256\2\2\u0669\u066d\5"+
		"\u01ac\u00d7\2\u066a\u066b\7\u021d\2\2\u066b\u066d\7\u02d1\2\2\u066c\u0645"+
		"\3\2\2\2\u066c\u0646\3\2\2\2\u066c\u0647\3\2\2\2\u066c\u0648\3\2\2\2\u066c"+
		"\u0649\3\2\2\2\u066c\u064a\3\2\2\2\u066c\u064b\3\2\2\2\u066c\u064c\3\2"+
		"\2\2\u066c\u064d\3\2\2\2\u066c\u064e\3\2\2\2\u066c\u064f\3\2\2\2\u066c"+
		"\u0650\3\2\2\2\u066c\u0651\3\2\2\2\u066c\u0652\3\2\2\2\u066c\u0653\3\2"+
		"\2\2\u066c\u0657\3\2\2\2\u066c\u065b\3\2\2\2\u066c\u065e\3\2\2\2\u066c"+
		"\u0661\3\2\2\2\u066c\u0664\3\2\2\2\u066c\u0666\3\2\2\2\u066c\u0668\3\2"+
		"\2\2\u066c\u066a\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u066c\3\2\2\2\u066e"+
		"\u066f\3\2\2\2\u066f\u0671\3\2\2\2\u0670\u0643\3\2\2\2\u0670\u0671\3\2"+
		"\2\2\u0671\u009d\3\2\2\2\u0672\u0673\t\7\2\2\u0673\u009f\3\2\2\2\u0674"+
		"\u0677\7}\2\2\u0675\u0676\7\u0179\2\2\u0676\u0678\7\u01c3\2\2\u0677\u0675"+
		"\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\7\u01db\2"+
		"\2\u067a\u067b\5\u01aa\u00d6\2\u067b\u067c\7\35\2\2\u067c\u067d\7\u0172"+
		"\2\2\u067d\u067e\5\u009eP\2\u067e\u067f\7\u0231\2\2\u067f\u0682\5\u01d0"+
		"\u00e9\2\u0680\u0681\7\u026c\2\2\u0681\u0683\5\u01c6\u00e4\2\u0682\u0680"+
		"\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u0686\7\u00b3\2"+
		"\2\u0685\u0687\t\b\2\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u068a"+
		"\3\2\2\2\u0688\u068b\7\u0160\2\2\u0689\u068b\5\u01d0\u00e9\2\u068a\u0688"+
		"\3\2\2\2\u068a\u0689\3\2\2\2\u068b\u00a1\3\2\2\2\u068c\u068d\7}\2\2\u068d"+
		"\u068e\7\u01de\2\2\u068e\u0691\5\u01d0\u00e9\2\u068f\u0690\7\'\2\2\u0690"+
		"\u0692\5\u01ca\u00e6\2\u0691\u068f\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u0694"+
		"\3\2\2\2\u0693\u0695\5\u01d2\u00ea\2\u0694\u0693\3\2\2\2\u0694\u0695\3"+
		"\2\2\2\u0695\u06af\3\2\2\2\u0696\u0697\7}\2\2\u0697\u0698\7\u01de\2\2"+
		"\u0698\u0699\7\'\2\2\u0699\u069b\5\u01ca\u00e6\2\u069a\u069c\5\u01d2\u00ea"+
		"\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u06af\3\2\2\2\u069d\u069e"+
		"\7}\2\2\u069e\u069f\7\u01de\2\2\u069f\u06a0\7\u0299\2\2\u06a0\u06a1\7"+
		"\u015f\2\2\u06a1\u06a2\7\u00cc\2\2\u06a2\u06a5\5\u01d0\u00e9\2\u06a3\u06a4"+
		"\7\'\2\2\u06a4\u06a6\5\u01ca\u00e6\2\u06a5\u06a3\3\2\2\2\u06a5\u06a6\3"+
		"\2\2\2\u06a6\u06af\3\2\2\2\u06a7\u06a8\7}\2\2\u06a8\u06a9\7\u01de\2\2"+
		"\u06a9\u06aa\7\u0299\2\2\u06aa\u06ab\7\u015f\2\2\u06ab\u06ac\7\u00cc\2"+
		"\2\u06ac\u06ad\7\'\2\2\u06ad\u06af\5\u01ca\u00e6\2\u06ae\u068c\3\2\2\2"+
		"\u06ae\u0696\3\2\2\2\u06ae\u069d\3\2\2\2\u06ae\u06a7\3\2\2\2\u06af\u00a3"+
		"\3\2\2\2\u06b0\u06b2\7}\2\2\u06b1\u06b3\t\t\2\2\u06b2\u06b1\3\2\2\2\u06b2"+
		"\u06b3\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b8\7\u01ec\2\2\u06b5\u06b6"+
		"\7\u0299\2\2\u06b6\u06b7\7\u015f\2\2\u06b7\u06b9\7\u00cc\2\2\u06b8\u06b5"+
		"\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06c0\5\u01d0\u00e9"+
		"\2\u06bb\u06bd\7\u0100\2\2\u06bc\u06be\7\67\2\2\u06bd\u06bc\3\2\2\2\u06bd"+
		"\u06be\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c1\7\u02d1\2\2\u06c0\u06bb"+
		"\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c6\3\2\2\2\u06c2\u06c3\7\u0145\2"+
		"\2\u06c3\u06c7\7\u02d1\2\2\u06c4\u06c5\7\u0159\2\2\u06c5\u06c7\7\u0145"+
		"\2\2\u06c6\u06c2\3\2\2\2\u06c6\u06c4\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7"+
		"\u06cc\3\2\2\2\u06c8\u06c9\7\u013c\2\2\u06c9\u06cd\7\u02d1\2\2\u06ca\u06cb"+
		"\7\u0159\2\2\u06cb\u06cd\7\u013c\2\2\u06cc\u06c8\3\2\2\2\u06cc\u06ca\3"+
		"\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06d3\3\2\2\2\u06ce\u06d0\7\u0209\2\2"+
		"\u06cf\u06d1\7\u026f\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1"+
		"\u06d2\3\2\2\2\u06d2\u06d4\7\u02d1\2\2\u06d3\u06ce\3\2\2\2\u06d3\u06d4"+
		"\3\2\2\2\u06d4\u06d7\3\2\2\2\u06d5\u06d6\79\2\2\u06d6\u06d8\7\u02d1\2"+
		"\2\u06d7\u06d5\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06dd\3\2\2\2\u06d9\u06db"+
		"\7\u0159\2\2\u06da\u06d9\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\3\2\2"+
		"\2\u06dc\u06de\7\u008f\2\2\u06dd\u06da\3\2\2\2\u06dd\u06de\3\2\2\2\u06de"+
		"\u06e8\3\2\2\2\u06df\u06e0\7\u02b5\2\2\u06e0\u06e6\7\67\2\2\u06e1\u06e2"+
		"\5\u01d0\u00e9\2\u06e2\u06e3\7\u02d3\2\2\u06e3\u06e4\5\u01d0\u00e9\2\u06e4"+
		"\u06e7\3\2\2\2\u06e5\u06e7\7\u015c\2\2\u06e6\u06e1\3\2\2\2\u06e6\u06e5"+
		"\3\2\2\2\u06e7\u06e9\3\2\2\2\u06e8\u06df\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9"+
		"\u00a5\3\2\2\2\u06ea\u06eb\5\u01d4\u00eb\2\u06eb\u00a7\3\2\2\2\u06ec\u06ed"+
		"\5\u01d4\u00eb\2\u06ed\u00a9\3\2\2\2\u06ee\u06ef\5\u01d4\u00eb\2\u06ef"+
		"\u00ab\3\2\2\2\u06f0\u06f1\5\u01d4\u00eb\2\u06f1\u00ad\3\2\2\2\u06f2\u06f3"+
		"\5\u01d4\u00eb\2\u06f3\u00af\3\2\2\2\u06f4\u06f5\5\u01d4\u00eb\2\u06f5"+
		"\u00b1\3\2\2\2\u06f6\u06f7\5\u01d4\u00eb\2\u06f7\u00b3\3\2\2\2\u06f8\u06f9"+
		"\5\u01d4\u00eb\2\u06f9\u00b5\3\2\2\2\u06fa\u06fb\5\u01d4\u00eb\2\u06fb"+
		"\u00b7\3\2\2\2\u06fc\u06fd\5\u01d4\u00eb\2\u06fd\u00b9\3\2\2\2\u06fe\u06ff"+
		"\5\u01d4\u00eb\2\u06ff\u00bb\3\2\2\2\u0700\u0701\5\u01d4\u00eb\2\u0701"+
		"\u00bd\3\2\2\2\u0702\u0703\5\u01d4\u00eb\2\u0703\u00bf\3\2\2\2\u0704\u0705"+
		"\5\u01d4\u00eb\2\u0705\u00c1\3\2\2\2\u0706\u0707\5\u01d4\u00eb\2\u0707"+
		"\u00c3\3\2\2\2\u0708\u0709\5\u01d4\u00eb\2\u0709\u00c5\3\2\2\2\u070a\u070b"+
		"\5\u01d4\u00eb\2\u070b\u00c7\3\2\2\2\u070c\u070d\5\u01d4\u00eb\2\u070d"+
		"\u00c9\3\2\2\2\u070e\u070f\5\u01d4\u00eb\2\u070f\u00cb\3\2\2\2\u0710\u0711"+
		"\5\u01d4\u00eb\2\u0711\u00cd\3\2\2\2\u0712\u073c\5\u00d0i\2\u0713\u073c"+
		"\5\u00d2j\2\u0714\u073c\5\u00d4k\2\u0715\u073c\5\u00d6l\2\u0716\u073c"+
		"\5\u00d8m\2\u0717\u073c\5\u00dan\2\u0718\u073c\5\u00dco\2\u0719\u073c"+
		"\5\u00dep\2\u071a\u073c\5\u00e0q\2\u071b\u073c\5\u00e2r\2\u071c\u073c"+
		"\5\u00e4s\2\u071d\u073c\5\u00e6t\2\u071e\u073c\5\u00e8u\2\u071f\u073c"+
		"\5\u00eav\2\u0720\u073c\5\u00ecw\2\u0721\u073c\5\u00eex\2\u0722\u073c"+
		"\5\u00f0y\2\u0723\u073c\5\u00f2z\2\u0724\u073c\5\u00f4{\2\u0725\u073c"+
		"\5\u00f6|\2\u0726\u073c\5\u00f8}\2\u0727\u073c\5\u00fa~\2\u0728\u073c"+
		"\5\u00fc\177\2\u0729\u073c\5\u00fe\u0080\2\u072a\u073c\5\u0100\u0081\2"+
		"\u072b\u073c\5\u0102\u0082\2\u072c\u073c\5\u0104\u0083\2\u072d\u073c\5"+
		"\u0106\u0084\2\u072e\u073c\5\u0108\u0085\2\u072f\u073c\5\u010a\u0086\2"+
		"\u0730\u073c\5\u010c\u0087\2\u0731\u073c\5\u010e\u0088\2\u0732\u073c\5"+
		"\u0110\u0089\2\u0733\u073c\5\u0112\u008a\2\u0734\u073c\5\u0114\u008b\2"+
		"\u0735\u073c\5\u0116\u008c\2\u0736\u073c\5\u0118\u008d\2\u0737\u073c\5"+
		"\u011a\u008e\2\u0738\u073c\5\u011c\u008f\2\u0739\u073c\5\u011e\u0090\2"+
		"\u073a\u073c\5\u0120\u0091\2\u073b\u0712\3\2\2\2\u073b\u0713\3\2\2\2\u073b"+
		"\u0714\3\2\2\2\u073b\u0715\3\2\2\2\u073b\u0716\3\2\2\2\u073b\u0717\3\2"+
		"\2\2\u073b\u0718\3\2\2\2\u073b\u0719\3\2\2\2\u073b\u071a\3\2\2\2\u073b"+
		"\u071b\3\2\2\2\u073b\u071c\3\2\2\2\u073b\u071d\3\2\2\2\u073b\u071e\3\2"+
		"\2\2\u073b\u071f\3\2\2\2\u073b\u0720\3\2\2\2\u073b\u0721\3\2\2\2\u073b"+
		"\u0722\3\2\2\2\u073b\u0723\3\2\2\2\u073b\u0724\3\2\2\2\u073b\u0725\3\2"+
		"\2\2\u073b\u0726\3\2\2\2\u073b\u0727\3\2\2\2\u073b\u0728\3\2\2\2\u073b"+
		"\u0729\3\2\2\2\u073b\u072a\3\2\2\2\u073b\u072b\3\2\2\2\u073b\u072c\3\2"+
		"\2\2\u073b\u072d\3\2\2\2\u073b\u072e\3\2\2\2\u073b\u072f\3\2\2\2\u073b"+
		"\u0730\3\2\2\2\u073b\u0731\3\2\2\2\u073b\u0732\3\2\2\2\u073b\u0733\3\2"+
		"\2\2\u073b\u0734\3\2\2\2\u073b\u0735\3\2\2\2\u073b\u0736\3\2\2\2\u073b"+
		"\u0737\3\2\2\2\u073b\u0738\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073a\3\2"+
		"\2\2\u073c\u00cf\3\2\2\2\u073d\u073e\7\u00b6\2\2\u073e\u073f\7\n\2\2\u073f"+
		"\u0742\7\u0142\2\2\u0740\u0741\7\u0299\2\2\u0741\u0743\7\u00cc\2\2\u0742"+
		"\u0740\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0746\5\u01d0"+
		"\u00e9\2\u0745\u0747\t\n\2\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2\2\2\u0747"+
		"\u00d1\3\2\2\2\u0748\u0749\7\u00b6\2\2\u0749\u074c\7\20\2\2\u074a\u074b"+
		"\7\u0299\2\2\u074b\u074d\7\u00cc\2\2\u074c\u074a\3\2\2\2\u074c\u074d\3"+
		"\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\5\u01d0\u00e9\2\u074f\u0750\7\u02ca"+
		"\2\2\u0750\u0751\5\u01c8\u00e5\2\u0751\u0752\7\u02cb\2\2\u0752\u00d3\3"+
		"\2\2\2\u0753\u0754\7\u00b6\2\2\u0754\u0757\7@\2\2\u0755\u0756\7\u0299"+
		"\2\2\u0756\u0758\7\u00cc\2\2\u0757\u0755\3\2\2\2\u0757\u0758\3\2\2\2\u0758"+
		"\u0759\3\2\2\2\u0759\u075a\7\u02ca\2\2\u075a\u075b\5\u01b2\u00da\2\u075b"+
		"\u075c\7\35\2\2\u075c\u075d\5\u01d0\u00e9\2\u075d\u075f\7\u02cb\2\2\u075e"+
		"\u0760\t\n\2\2\u075f\u075e\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u00d5\3\2"+
		"\2\2\u0761\u0762\7\u00b6\2\2\u0762\u0765\7Z\2\2\u0763\u0764\7\u0299\2"+
		"\2\u0764\u0766\7\u00cc\2\2\u0765\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766"+
		"\u0767\3\2\2\2\u0767\u0769\5\u01ae\u00d8\2\u0768\u076a\t\n\2\2\u0769\u0768"+
		"\3\2\2\2\u0769\u076a\3\2\2\2\u076a\u00d7\3\2\2\2\u076b\u076c\7\u00b6\2"+
		"\2\u076c\u076f\7u\2\2\u076d\u076e\7\u0299\2\2\u076e\u0770\7\u00cc\2\2"+
		"\u076f\u076d\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0773"+
		"\5\u01d0\u00e9\2\u0772\u0774\t\n\2\2\u0773\u0772\3\2\2\2\u0773\u0774\3"+
		"\2\2\2\u0774\u00d9\3\2\2\2\u0775\u0776\7\u00b6\2\2\u0776\u0779\7\u0091"+
		"\2\2\u0777\u0778\7\u0299\2\2\u0778\u077a\7\u00cc\2\2\u0779\u0777\3\2\2"+
		"\2\u0779\u077a\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c\5\u01d0\u00e9\2"+
		"\u077c\u00db\3\2\2\2\u077d\u077e\7\u00b6\2\2\u077e\u0781\7\u00b4\2\2\u077f"+
		"\u0780\7\u0299\2\2\u0780\u0782\7\u00cc\2\2\u0781\u077f\3\2\2\2\u0781\u0782"+
		"\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u0785\5\u01ae\u00d8\2\u0784\u0786\t"+
		"\n\2\2\u0785\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u00dd\3\2\2\2\u0787"+
		"\u0788\7\u00b6\2\2\u0788\u0789\7\u02a1\2\2\u0789\u078c\7\u023e\2\2\u078a"+
		"\u078b\7\u0299\2\2\u078b\u078d\7\u00cc\2\2\u078c\u078a\3\2\2\2\u078c\u078d"+
		"\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\5\u01d0\u00e9\2\u078f\u0791\t"+
		"\n\2\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u00df\3\2\2\2\u0792"+
		"\u0793\7\u00b6\2\2\u0793\u0796\7\u00cf\2\2\u0794\u0795\7\u0299\2\2\u0795"+
		"\u0797\7\u00cc\2\2\u0796\u0794\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798"+
		"\3\2\2\2\u0798\u079a\5\u01ae\u00d8\2\u0799\u079b\t\n\2\2\u079a\u0799\3"+
		"\2\2\2\u079a\u079b\3\2\2\2\u079b\u00e1\3\2\2\2\u079c\u079d\7\u00b6\2\2"+
		"\u079d\u079e\7\u00dc\2\2\u079e\u079f\7\u0090\2\2\u079f\u07a2\7\u02a2\2"+
		"\2\u07a0\u07a1\7\u0299\2\2\u07a1\u07a3\7\u00cc\2\2\u07a2\u07a0\3\2\2\2"+
		"\u07a2\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a6\5\u01ae\u00d8\2\u07a5"+
		"\u07a7\t\n\2\2\u07a6\u07a5\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u00e3\3\2"+
		"\2\2\u07a8\u07a9\7\u00b6\2\2\u07a9\u07aa\7\u00dc\2\2\u07aa\u07ad\7\u0220"+
		"\2\2\u07ab\u07ac\7\u0299\2\2\u07ac\u07ae\7\u00cc\2\2\u07ad\u07ab\3\2\2"+
		"\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\5\u01ae\u00d8\2"+
		"\u07b0\u07b2\t\n\2\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u00e5"+
		"\3\2\2\2\u07b3\u07b4\7\u00b6\2\2\u07b4\u07b7\7\u00e4\2\2\u07b5\u07b6\7"+
		"\u0299\2\2\u07b6\u07b8\7\u00cc\2\2\u07b7\u07b5\3\2\2\2\u07b7\u07b8\3\2"+
		"\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bb\5\u01a0\u00d1\2\u07ba\u07bc\t\n\2"+
		"\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u00e7\3\2\2\2\u07bd\u07be"+
		"\7\u00b6\2\2\u07be\u07c1\7\u00ef\2\2\u07bf\u07c0\7\u0299\2\2\u07c0\u07c2"+
		"\7\u00cc\2\2\u07c1\u07bf\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2"+
		"\2\u07c3\u07c4\5\u01ae\u00d8\2\u07c4\u00e9\3\2\2\2\u07c5\u07c6\7\u00b6"+
		"\2\2\u07c6\u07c8\7\u0101\2\2\u07c7\u07c9\7\u02aa\2\2\u07c8\u07c7\3\2\2"+
		"\2\u07c8\u07c9\3\2\2\2\u07c9\u07cc\3\2\2\2\u07ca\u07cb\7\u0299\2\2\u07cb"+
		"\u07cd\7\u00cc\2\2\u07cc\u07ca\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07ce"+
		"\3\2\2\2\u07ce\u07d0\5\u01ac\u00d7\2\u07cf\u07d1\t\n\2\2\u07d0\u07cf\3"+
		"\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u00eb\3\2\2\2\u07d2\u07d4\7\u00b6\2\2"+
		"\u07d3\u07d5\7\u01a6\2\2\u07d4\u07d3\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5"+
		"\u07d6\3\2\2\2\u07d6\u07d9\7\u0120\2\2\u07d7\u07d8\7\u0299\2\2\u07d8\u07da"+
		"\7\u00cc\2\2\u07d9\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07db\3\2\2"+
		"\2\u07db\u07dd\5\u01d0\u00e9\2\u07dc\u07de\t\n\2\2\u07dd\u07dc\3\2\2\2"+
		"\u07dd\u07de\3\2\2\2\u07de\u00ed\3\2\2\2\u07df\u07e0\7\u00b6\2\2\u07e0"+
		"\u07e1\7\u02ac\2\2\u07e1\u07e4\7\u0268\2\2\u07e2\u07e3\7\u0299\2\2\u07e3"+
		"\u07e5\7\u00cc\2\2\u07e4\u07e2\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07e6"+
		"\3\2\2\2\u07e6\u07e8\5\u01ae\u00d8\2\u07e7\u07e9\t\n\2\2\u07e8\u07e7\3"+
		"\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u00ef\3\2\2\2\u07ea\u07eb\5\u01d4\u00eb"+
		"\2\u07eb\u00f1\3\2\2\2\u07ec\u07ed\7\u00b6\2\2\u07ed\u07ee\7\u0176\2\2"+
		"\u07ee\u07f1\7R\2\2\u07ef\u07f0\7\u0299\2\2\u07f0\u07f2\7\u00cc\2\2\u07f1"+
		"\u07ef\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\5\u01d0"+
		"\u00e9\2\u07f4\u07f5\7\u025b\2\2\u07f5\u07f7\5\u01b6\u00dc\2\u07f6\u07f8"+
		"\t\n\2\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u00f3\3\2\2\2\u07f9"+
		"\u07fa\7\u00b6\2\2\u07fa\u07fb\7\u0176\2\2\u07fb\u07fe\7\u02b3\2\2\u07fc"+
		"\u07fd\7\u0299\2\2\u07fd\u07ff\7\u00cc\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff"+
		"\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0801\5\u01d0\u00e9\2\u0801\u0802\7"+
		"\u025b\2\2\u0802\u0804\5\u01b6\u00dc\2\u0803\u0805\t\n\2\2\u0804\u0803"+
		"\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u00f5\3\2\2\2\u0806\u0807\7\u00b6\2"+
		"\2\u0807\u0808\7\u02b5\2\2\u0808\u0809\7\67\2\2\u0809\u080b\5\u01cc\u00e7"+
		"\2\u080a\u080c\t\n\2\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u00f7"+
		"\3\2\2\2\u080d\u080e\7\u00b6\2\2\u080e\u0811\7\u02b4\2\2\u080f\u0810\7"+
		"\u0299\2\2\u0810\u0812\7\u00cc\2\2\u0811\u080f\3\2\2\2\u0811\u0812\3\2"+
		"\2\2\u0812\u0813\3\2\2\2\u0813\u0814\5\u01d0\u00e9\2\u0814\u0815\7\u0172"+
		"\2\2\u0815\u0817\5\u01d0\u00e9\2\u0816\u0818\t\n\2\2\u0817\u0816\3\2\2"+
		"\2\u0817\u0818\3\2\2\2\u0818\u00f9\3\2\2\2\u0819\u081a\7\u00b6\2\2\u081a"+
		"\u081d\7\u01a9\2\2\u081b\u081c\7\u0299\2\2\u081c\u081e\7\u00cc\2\2\u081d"+
		"\u081b\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u0821\5\u01ae"+
		"\u00d8\2\u0820\u0822\t\n\2\2\u0821\u0820\3\2\2\2\u0821\u0822\3\2\2\2\u0822"+
		"\u00fb\3\2\2\2\u0823\u0824\7\u00b6\2\2\u0824\u0827\7\u01d0\2\2\u0825\u0826"+
		"\7\u0299\2\2\u0826\u0828\7\u00cc\2\2\u0827\u0825\3\2\2\2\u0827\u0828\3"+
		"\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a\5\u01ae\u00d8\2\u082a\u00fd\3\2"+
		"\2\2\u082b\u082c\7\u00b6\2\2\u082c\u082f\7\u01db\2\2\u082d\u082e\7\u0299"+
		"\2\2\u082e\u0830\7\u00cc\2\2\u082f\u082d\3\2\2\2\u082f\u0830\3\2\2\2\u0830"+
		"\u0831\3\2\2\2\u0831\u0832\5\u01aa\u00d6\2\u0832\u0833\7\u0172\2\2\u0833"+
		"\u0835\5\u01d0\u00e9\2\u0834\u0836\t\n\2\2\u0835\u0834\3\2\2\2\u0835\u0836"+
		"\3\2\2\2\u0836\u00ff\3\2\2\2\u0837\u0838\7\u00b6\2\2\u0838\u083b\7\u01de"+
		"\2\2\u0839\u083a\7\u0299\2\2\u083a\u083c\7\u00cc\2\2\u083b\u0839\3\2\2"+
		"\2\u083b\u083c\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083f\5\u01ae\u00d8\2"+
		"\u083e\u0840\t\n\2\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0101"+
		"\3\2\2\2\u0841\u0842\7\u00b6\2\2\u0842\u0845\7\u01ec\2\2\u0843\u0844\7"+
		"\u0299\2\2\u0844\u0846\7\u00cc\2\2\u0845\u0843\3\2\2\2\u0845\u0846\3\2"+
		"\2\2\u0846\u0847\3\2\2\2\u0847\u0849\5\u01ae\u00d8\2\u0848\u084a\t\n\2"+
		"\2\u0849\u0848\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u0103\3\2\2\2\u084b\u084c"+
		"\7\u00b6\2\2\u084c\u084f\7\u02a3\2\2\u084d\u084e\7\u0299\2\2\u084e\u0850"+
		"\7\u00cc\2\2\u084f\u084d\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0851\3\2\2"+
		"\2\u0851\u0853\5\u01ae\u00d8\2\u0852\u0854\t\n\2\2\u0853\u0852\3\2\2\2"+
		"\u0853\u0854\3\2\2\2\u0854\u0105\3\2\2\2\u0855\u0856\7\u00b6\2\2\u0856"+
		"\u0859\7\u020d\2\2\u0857\u0858\7\u0299\2\2\u0858\u085a\7\u00cc\2\2\u0859"+
		"\u0857\3\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u0859\u085a\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u085c\5\u01ae\u00d8\2"+
		"\u085c\u0107\3\2\2\2\u085d\u085e\7\u00b6\2\2\u085e\u0861\7\u0217\2\2\u085f"+
		"\u0860\7\u0299\2\2\u0860\u0862\7\u00cc\2\2\u0861\u085f\3\2\2\2\u0861\u0862"+
		"\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0865\5\u01d0\u00e9\2\u0864\u0866\t"+
		"\n\2\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0109\3\2\2\2\u0867"+
		"\u0868\7\u00b6\2\2\u0868\u086b\7\u0220\2\2\u0869\u086a\7\u0299\2\2\u086a"+
		"\u086c\7\u00cc\2\2\u086b\u0869\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086d"+
		"\3\2\2\2\u086d\u086f\5\u01ae\u00d8\2\u086e\u0870\t\n\2\2\u086f\u086e\3"+
		"\2\2\2\u086f\u0870\3\2\2\2\u0870\u010b\3\2\2\2\u0871\u0872\7\u00b6\2\2"+
		"\u0872\u0875\7\u0222\2\2\u0873\u0874\7\u0299\2\2\u0874\u0876\7\u00cc\2"+
		"\2\u0875\u0873\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878"+
		"\5\u01d0\u00e9\2\u0878\u010d\3\2\2\2\u0879\u087a\7\u00b6\2\2\u087a\u087b"+
		"\7\u02c3\2\2\u087b\u087c\7\u01e5\2\2\u087c\u087f\7i\2\2\u087d\u087e\7"+
		"\u0299\2\2\u087e\u0880\7\u00cc\2\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2"+
		"\2\2\u0880\u0881\3\2\2\2\u0881\u0883\5\u01d0\u00e9\2\u0882\u0884\t\n\2"+
		"\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u010f\3\2\2\2\u0885\u0886"+
		"\7\u00b6\2\2\u0886\u0887\7\u02c3\2\2\u0887\u0888\7\u01e5\2\2\u0888\u088b"+
		"\7\u00af\2\2\u0889\u088a\7\u0299\2\2\u088a\u088c\7\u00cc\2\2\u088b\u0889"+
		"\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088d\3\2\2\2\u088d\u088f\5\u01d0\u00e9"+
		"\2\u088e\u0890\t\n\2\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0111"+
		"\3\2\2\2\u0891\u0892\7\u00b6\2\2\u0892\u0893\7\u02c3\2\2\u0893\u0894\7"+
		"\u01e5\2\2\u0894\u0897\7\u018f\2\2\u0895\u0896\7\u0299\2\2\u0896\u0898"+
		"\7\u00cc\2\2\u0897\u0895\3\2\2\2\u0897\u0898\3\2\2\2\u0898\u0899\3\2\2"+
		"\2\u0899\u089b\5\u01d0\u00e9\2\u089a\u089c\t\n\2\2\u089b\u089a\3\2\2\2"+
		"\u089b\u089c\3\2\2\2\u089c\u0113\3\2\2\2\u089d\u089e\7\u00b6\2\2\u089e"+
		"\u089f\7\u02c3\2\2\u089f\u08a0\7\u01e5\2\2\u08a0\u08a3\7\u0225\2\2\u08a1"+
		"\u08a2\7\u0299\2\2\u08a2\u08a4\7\u00cc\2\2\u08a3\u08a1\3\2\2\2\u08a3\u08a4"+
		"\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a7\5\u01d0\u00e9\2\u08a6\u08a8\t"+
		"\n\2\2\u08a7\u08a6\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u0115\3\2\2\2\u08a9"+
		"\u08aa\7\u00b6\2\2\u08aa\u08ad\7\u0239\2\2\u08ab\u08ac\7\u0299\2\2\u08ac"+
		"\u08ae\7\u00cc\2\2\u08ad\u08ab\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08af"+
		"\3\2\2\2\u08af\u08b0\7\u00da\2\2\u08b0\u08b1\5\u01d0\u00e9\2\u08b1\u08b2"+
		"\7\u0120\2\2\u08b2\u08b3\5\u01d0\u00e9\2\u08b3\u08b4\t\n\2\2\u08b4\u0117"+
		"\3\2\2\2\u08b5\u08b6\7\u00b6\2\2\u08b6\u08b9\7\u023e\2\2\u08b7\u08b8\7"+
		"\u0299\2\2\u08b8\u08ba\7\u00cc\2\2\u08b9\u08b7\3\2\2\2\u08b9\u08ba\3\2"+
		"\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bc\5\u01d0\u00e9\2\u08bc\u08bd\7\u0172"+
		"\2\2\u08bd\u08bf\5\u01d0\u00e9\2\u08be\u08c0\t\n\2\2\u08bf\u08be\3\2\2"+
		"\2\u08bf\u08c0\3\2\2\2\u08c0\u0119\3\2\2\2\u08c1\u08c2\7\u00b6\2\2\u08c2"+
		"\u08c5\7\u0246\2\2\u08c3\u08c4\7\u0299\2\2\u08c4\u08c6\7\u00cc\2\2\u08c5"+
		"\u08c3\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c9\5\u01ae"+
		"\u00d8\2\u08c8\u08ca\t\n\2\2\u08c9\u08c8\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca"+
		"\u011b\3\2\2\2\u08cb\u08cc\7\u00b6\2\2\u08cc\u08cf\7\u0256\2\2\u08cd\u08ce"+
		"\7\u0299\2\2\u08ce\u08d0\7\u00cc\2\2\u08cf\u08cd\3\2\2\2\u08cf\u08d0\3"+
		"\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08d2\5\u01ae\u00d8\2\u08d2\u011d\3\2"+
		"\2\2\u08d3\u08d4\7\u00b6\2\2\u08d4\u08d5\7\u0256\2\2\u08d5\u08d8\7\u0138"+
		"\2\2\u08d6\u08d7\7\u0299\2\2\u08d7\u08d9\7\u00cc\2\2\u08d8\u08d6\3\2\2"+
		"\2\u08d8\u08d9\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08e0\7\u00da\2\2\u08db"+
		"\u08e1\5\u01aa\u00d6\2\u08dc\u08e1\7\u0256\2\2\u08dd\u08e1\7\u008c\2\2"+
		"\u08de\u08e1\7\u01f0\2\2\u08df\u08e1\7\u01a8\2\2\u08e0\u08db\3\2\2\2\u08e0"+
		"\u08dc\3\2\2\2\u08e0\u08dd\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08df\3\2"+
		"\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e3\7\u02a3\2\2\u08e3\u08e4\5\u01d0\u00e9"+
		"\2\u08e4\u011f\3\2\2\2\u08e5\u08e6\7\u00b6\2\2\u08e6\u08e9\7\u0268\2\2"+
		"\u08e7\u08e8\7\u0299\2\2\u08e8\u08ea\7\u00cc\2\2\u08e9\u08e7\3\2\2\2\u08e9"+
		"\u08ea\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ed\5\u01ae\u00d8\2\u08ec\u08ee"+
		"\t\n\2\2\u08ed\u08ec\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u0121\3\2\2\2\u08ef"+
		"\u08f0\5\u01d4\u00eb\2\u08f0\u0123\3\2\2\2\u08f1\u08f2\5\u01d4\u00eb\2"+
		"\u08f2\u0125\3\2\2\2\u08f3\u08f4\5\u01d4\u00eb\2\u08f4\u0127\3\2\2\2\u08f5"+
		"\u08f6\5\u01d4\u00eb\2\u08f6\u0129\3\2\2\2\u08f7\u08f8\5\u01d4\u00eb\2"+
		"\u08f8\u012b\3\2\2\2\u08f9\u08fa\5\u01d4\u00eb\2\u08fa\u012d\3\2\2\2\u08fb"+
		"\u08fc\5\u01d4\u00eb\2\u08fc\u012f\3\2\2\2\u08fd\u08fe\5\u01d4\u00eb\2"+
		"\u08fe\u0131\3\2\2\2\u08ff\u0900\5\u01d4\u00eb\2\u0900\u0133\3\2\2\2\u0901"+
		"\u0902\5\u01d4\u00eb\2\u0902\u0135\3\2\2\2\u0903\u0904\5\u01d4\u00eb\2"+
		"\u0904\u0137\3\2\2\2\u0905\u0906\5\u01d4\u00eb\2\u0906\u0139\3\2\2\2\u0907"+
		"\u0908\5\u01d4\u00eb\2\u0908\u013b\3\2\2\2\u0909\u090a\5\u01d4\u00eb\2"+
		"\u090a\u013d\3\2\2\2\u090b\u090c\5\u01d4\u00eb\2\u090c\u013f\3\2\2\2\u090d"+
		"\u090e\5\u01d4\u00eb\2\u090e\u0141\3\2\2\2\u090f\u0910\5\u01d4\u00eb\2"+
		"\u0910\u0143\3\2\2\2\u0911\u0912\5\u01d4\u00eb\2\u0912\u0145\3\2\2\2\u0913"+
		"\u0914\5\u01d4\u00eb\2\u0914\u0147\3\2\2\2\u0915\u0916\5\u01d4\u00eb\2"+
		"\u0916\u0149\3\2\2\2\u0917\u0918\5\u01d4\u00eb\2\u0918\u014b\3\2\2\2\u0919"+
		"\u091a\5\u01d4\u00eb\2\u091a\u014d\3\2\2\2\u091b\u091c\5\u01d4\u00eb\2"+
		"\u091c\u014f\3\2\2\2\u091d\u091e\5\u01d4\u00eb\2\u091e\u0151\3\2\2\2\u091f"+
		"\u0920\7\u01e9\2\2\u0920\u0922\5\u016a\u00b6\2\u0921\u0923\5\u016c\u00b7"+
		"\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0925\3\2\2\2\u0924\u0926"+
		"\5\u016e\u00b8\2\u0925\u0924\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0928\3"+
		"\2\2\2\u0927\u0929\5\u0170\u00b9\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2"+
		"\2\2\u0929\u092b\3\2\2\2\u092a\u092c\5\u0176\u00bc\2\u092b\u092a\3\2\2"+
		"\2\u092b\u092c\3\2\2\2\u092c\u092e\3\2\2\2\u092d\u092f\5\u0182\u00c2\2"+
		"\u092e\u092d\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0931\3\2\2\2\u0930\u0932"+
		"\5\u0184\u00c3\2\u0931\u0930\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0934\3"+
		"\2\2\2\u0933\u0935\5\u0186\u00c4\2\u0934\u0933\3\2\2\2\u0934\u0935\3\2"+
		"\2\2\u0935\u0937\3\2\2\2\u0936\u0938\5\u018a\u00c6\2\u0937\u0936\3\2\2"+
		"\2\u0937\u0938\3\2\2\2\u0938\u093a\3\2\2\2\u0939\u093b\5\u018c\u00c7\2"+
		"\u093a\u0939\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093d\3\2\2\2\u093c\u093e"+
		"\5\u018e\u00c8\2\u093d\u093c\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0940\3"+
		"\2\2\2\u093f\u0941\5\u0190\u00c9\2\u0940\u093f\3\2\2\2\u0940\u0941\3\2"+
		"\2\2\u0941\u0153\3\2\2\2\u0942\u0943\5\u01d4\u00eb\2\u0943\u0155\3\2\2"+
		"\2\u0944\u0945\5\u01d4\u00eb\2\u0945\u0157\3\2\2\2\u0946\u0947\5\u01d4"+
		"\u00eb\2\u0947\u0159\3\2\2\2\u0948\u0949\5\u01d4\u00eb\2\u0949\u015b\3"+
		"\2\2\2\u094a\u094b\5\u01d4\u00eb\2\u094b\u015d\3\2\2\2\u094c\u094d\5\u01d4"+
		"\u00eb\2\u094d\u015f\3\2\2\2\u094e\u094f\5\u01d4\u00eb\2\u094f\u0161\3"+
		"\2\2\2\u0950\u0951\5\u01d4\u00eb\2\u0951\u0163\3\2\2\2\u0952\u0953\5\u01d4"+
		"\u00eb\2\u0953\u0165\3\2\2\2\u0954\u0955\5\u01d4\u00eb\2\u0955\u0167\3"+
		"\2\2\2\u0956\u0957\7\u0260\2\2\u0957\u0968\5\u0198\u00cd\2\u0958\u0959"+
		"\7\u0260\2\2\u0959\u095a\5\u0196\u00cc\2\u095a\u095c\3\2\2\2\u095b\u095d"+
		"\5\u0186\u00c4\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095f\3"+
		"\2\2\2\u095e\u0960\5\u018a\u00c6\2\u095f\u095e\3\2\2\2\u095f\u0960\3\2"+
		"\2\2\u0960\u0962\3\2\2\2\u0961\u0963\5\u018c\u00c7\2\u0962\u0961\3\2\2"+
		"\2\u0962\u0963\3\2\2\2\u0963\u0965\3\2\2\2\u0964\u0966\5\u018e\u00c8\2"+
		"\u0965\u0964\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0968\3\2\2\2\u0967\u0956"+
		"\3\2\2\2\u0967\u0958\3\2\2\2\u0968\u0169\3\2\2\2\u0969\u0970\7\22\2\2"+
		"\u096a\u096d\7\u00b2\2\2\u096b\u096c\7\u0172\2\2\u096c\u096e\5\u0196\u00cc"+
		"\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0970\3\2\2\2\u096f\u0969"+
		"\3\2\2\2\u096f\u096a\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0989\3\2\2\2\u0971"+
		"\u098a\7\u02c9\2\2\u0972\u0977\5\u0192\u00ca\2\u0973\u0975\7\35\2\2\u0974"+
		"\u0973\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0978\5\u01aa"+
		"\u00d6\2\u0977\u0974\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u0986\3\2\2\2\u0979"+
		"\u0982\7\u02c4\2\2\u097a\u0983\7\u02c9\2\2\u097b\u0980\5\u0192\u00ca\2"+
		"\u097c\u097e\7\35\2\2\u097d\u097c\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u097f"+
		"\3\2\2\2\u097f\u0981\5\u01aa\u00d6\2\u0980\u097d\3\2\2\2\u0980\u0981\3"+
		"\2\2\2\u0981\u0983\3\2\2\2\u0982\u097a\3\2\2\2\u0982\u097b\3\2\2\2\u0983"+
		"\u0985\3\2\2\2\u0984\u0979\3\2\2\2\u0985\u0988\3\2\2\2\u0986\u0984\3\2"+
		"\2\2\u0986\u0987\3\2\2\2\u0987\u098a\3\2\2\2\u0988\u0986\3\2\2\2\u0989"+
		"\u0971\3\2\2\2\u0989\u0972\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u016b\3\2"+
		"\2\2\u098b\u098c\7\u00e2\2\2\u098c\u0991\5\u01be\u00e0\2\u098d\u098e\7"+
		"\u02c4\2\2\u098e\u0990\5\u01be\u00e0\2\u098f\u098d\3\2\2\2\u0990\u0993"+
		"\3\2\2\2\u0991\u098f\3\2\2\2\u0991\u0992\3\2\2\2\u0992\u016d\3\2\2\2\u0993"+
		"\u0991\3\2\2\2\u0994\u0995\7\u026c\2\2\u0995\u0996\5\u01c6\u00e4\2\u0996"+
		"\u016f\3\2\2\2\u0997\u0998\7\u00ef\2\2\u0998\u0999\7\67\2\2\u0999\u099e"+
		"\5\u0172\u00ba\2\u099a\u099b\7\u02c4\2\2\u099b\u099d\5\u0172\u00ba\2\u099c"+
		"\u099a\3\2\2\2\u099d\u09a0\3\2\2\2\u099e\u099c\3\2\2\2\u099e\u099f\3\2"+
		"\2\2\u099f\u0171\3\2\2\2\u09a0\u099e\3\2\2\2\u09a1\u09a2\7\u02ca\2\2\u09a2"+
		"\u09bb\7\u02cb\2\2\u09a3\u09bb\5\u0192\u00ca\2\u09a4\u09bb\5\u0196\u00cc"+
		"\2\u09a5\u09a6\t\13\2\2\u09a6\u09a9\7\u02ca\2\2\u09a7\u09aa\5\u0192\u00ca"+
		"\2\u09a8\u09aa\5\u0196\u00cc\2\u09a9\u09a7\3\2\2\2\u09a9\u09a8\3\2\2\2"+
		"\u09aa\u09b2\3\2\2\2\u09ab\u09ae\7\u02c4\2\2\u09ac\u09af\5\u0192\u00ca"+
		"\2\u09ad\u09af\5\u0196\u00cc\2\u09ae\u09ac\3\2\2\2\u09ae\u09ad\3\2\2\2"+
		"\u09af\u09b1\3\2\2\2\u09b0\u09ab\3\2\2\2\u09b1\u09b4\3\2\2\2\u09b2\u09b0"+
		"\3\2\2\2\u09b2\u09b3\3\2\2\2\u09b3\u09b5\3\2\2\2\u09b4\u09b2\3\2\2\2\u09b5"+
		"\u09b6\7\u02cb\2\2\u09b6\u09bb\3\2\2\2\u09b7\u09b8\7\u00f0\2\2\u09b8\u09b9"+
		"\7\u01f3\2\2\u09b9\u09bb\5\u0174\u00bb\2\u09ba\u09a1\3\2\2\2\u09ba\u09a3"+
		"\3\2\2\2\u09ba\u09a4\3\2\2\2\u09ba\u09a5\3\2\2\2\u09ba\u09b7\3\2\2\2\u09bb"+
		"\u0173\3\2\2\2\u09bc\u09bd\7\u02ca\2\2\u09bd\u09c2\5\u0172\u00ba\2\u09be"+
		"\u09bf\7\u02c4\2\2\u09bf\u09c1\5\u0172\u00ba\2\u09c0\u09be\3\2\2\2\u09c1"+
		"\u09c4\3\2\2\2\u09c2\u09c0\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c5\3\2"+
		"\2\2\u09c4\u09c2\3\2\2\2\u09c5\u09c6\7\u02cb\2\2\u09c6\u0175\3\2\2\2\u09c7"+
		"\u09c8\7\u00f2\2\2\u09c8\u09cd\5\u01c6\u00e4\2\u09c9\u09ca\7\u02c4\2\2"+
		"\u09ca\u09cc\5\u01c6\u00e4\2\u09cb\u09c9\3\2\2\2\u09cc\u09cf\3\2\2\2\u09cd"+
		"\u09cb\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u0177\3\2\2\2\u09cf\u09cd\3\2"+
		"\2\2\u09d0\u09d1\7\u0248\2\2\u09d1\u09db\7\u019d\2\2\u09d2\u09d3\7\u02d1"+
		"\2\2\u09d3\u09db\7\u019d\2\2\u09d4\u09d5\7\u0084\2\2\u09d5\u09db\7\u01d7"+
		"\2\2\u09d6\u09d7\7\u02d1\2\2\u09d7\u09db\7\u00d9\2\2\u09d8\u09d9\7\u0248"+
		"\2\2\u09d9\u09db\7\u00d9\2\2\u09da\u09d0\3\2\2\2\u09da\u09d2\3\2\2\2\u09da"+
		"\u09d4\3\2\2\2\u09da\u09d6\3\2\2\2\u09da\u09d8\3\2\2\2\u09db\u0179\3\2"+
		"\2\2\u09dc\u09dd\5\u0178\u00bd\2\u09dd\u017b\3\2\2\2\u09de\u09df\5\u0178"+
		"\u00bd\2\u09df\u017d\3\2\2\2\u09e0\u09e1\t\f\2\2\u09e1\u09e9\5\u017a\u00be"+
		"\2\u09e2\u09e3\t\f\2\2\u09e3\u09e4\7-\2\2\u09e4\u09e5\5\u017a\u00be\2"+
		"\u09e5\u09e6\7\31\2\2\u09e6\u09e7\5\u017c\u00bf\2\u09e7\u09e9\3\2\2\2"+
		"\u09e8\u09e0\3\2\2\2\u09e8\u09e2\3\2\2\2\u09e9\u017f\3\2\2\2\u09ea\u09f7"+
		"\5\u01e0\u00f1\2\u09eb\u09ec\7\u0191\2\2\u09ec\u09ed\7\67\2\2\u09ed\u09f2"+
		"\5\u0192\u00ca\2\u09ee\u09ef\7\u02c4\2\2\u09ef\u09f1\5\u0192\u00ca\2\u09f0"+
		"\u09ee\3\2\2\2\u09f1\u09f4\3\2\2\2\u09f2\u09f0\3\2\2\2\u09f2\u09f3\3\2"+
		"\2\2\u09f3\u09f7\3\2\2\2\u09f4\u09f2\3\2\2\2\u09f5\u09f7\5\u0186\u00c4"+
		"\2\u09f6\u09ea\3\2\2\2\u09f6\u09eb\3\2\2\2\u09f6\u09f5\3\2\2\2\u09f7\u0181"+
		"\3\2\2\2\u09f8\u09f9\7\u026e\2\2\u09f9\u09fa\5\u01e0\u00f1\2\u09fa\u09fb"+
		"\7\35\2\2\u09fb\u09fc\7\u02ca\2\2\u09fc\u09fd\5\u0180\u00c1\2\u09fd\u09fe"+
		"\7\u02cb\2\2\u09fe\u0183\3\2\2\2\u09ff\u0a01\t\r\2\2\u0a00\u0a02\t\16"+
		"\2\2\u0a01\u0a00\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03"+
		"\u0a04\5\u0152\u00aa\2\u0a04\u0185\3\2\2\2\u0a05\u0a06\7\u017a\2\2\u0a06"+
		"\u0a07\7\67\2\2\u0a07\u0a0c\5\u0188\u00c5\2\u0a08\u0a09\7\u02c4\2\2\u0a09"+
		"\u0a0b\5\u0188\u00c5\2\u0a0a\u0a08\3\2\2\2\u0a0b\u0a0e\3\2\2\2\u0a0c\u0a0a"+
		"\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0187\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0f"+
		"\u0a12\5\u0192\u00ca\2\u0a10\u0a12\7\u02d5\2\2\u0a11\u0a0f\3\2\2\2\u0a11"+
		"\u0a10\3\2\2\2\u0a12\u0a17\3\2\2\2\u0a13\u0a18\7\36\2\2\u0a14\u0a18\7"+
		"\u00a8\2\2\u0a15\u0a16\7\u025b\2\2\u0a16\u0a18\5\u0192\u00ca\2\u0a17\u0a13"+
		"\3\2\2\2\u0a17\u0a14\3\2\2\2\u0a17\u0a15\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18"+
		"\u0a24\3\2\2\2\u0a19\u0a1a\7\u0167\2\2\u0a1a\u0a1b\t\17\2\2\u0a1b\u0a21"+
		"\3\2\2\2\u0a1c\u0a1d\7\u02c4\2\2\u0a1d\u0a1e\7\u0167\2\2\u0a1e\u0a20\t"+
		"\17\2\2\u0a1f\u0a1c\3\2\2\2\u0a20\u0a23\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a21"+
		"\u0a22\3\2\2\2\u0a22\u0a25\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a24\u0a19\3\2"+
		"\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0189\3\2\2\2\u0a26\u0a27\7\u012a\2\2\u0a27"+
		"\u0a28\t\20\2\2\u0a28\u018b\3\2\2\2\u0a29\u0a2a\7\u016f\2\2\u0a2a\u0a2c"+
		"\7\u02d1\2\2\u0a2b\u0a2d\t\21\2\2\u0a2c\u0a2b\3\2\2\2\u0a2c\u0a2d\3\2"+
		"\2\2\u0a2d\u018d\3\2\2\2\u0a2e\u0a2f\7\u00d3\2\2\u0a2f\u0a31\t\22\2\2"+
		"\u0a30\u0a32\7\u02d1\2\2\u0a31\u0a30\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32"+
		"\u0a33\3\2\2\2\u0a33\u0a34\t\21\2\2\u0a34\u0a35\7\u0173\2\2\u0a35\u018f"+
		"\3\2\2\2\u0a36\u0a3e\7\u00da\2\2\u0a37\u0a3f\7\u0253\2\2\u0a38\u0a39\7"+
		"\u0159\2\2\u0a39\u0a3a\7\u011c\2\2\u0a3a\u0a3f\7\u0253\2\2\u0a3b\u0a3f"+
		"\7\u01f4\2\2\u0a3c\u0a3d\7\u011c\2\2\u0a3d\u0a3f\7\u01f4\2\2\u0a3e\u0a37"+
		"\3\2\2\2\u0a3e\u0a38\3\2\2\2\u0a3e\u0a3b\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3f"+
		"\u0a49\3\2\2\2\u0a40\u0a41\7\u016d\2\2\u0a41\u0a46\5\u01b0\u00d9\2\u0a42"+
		"\u0a43\7\u02c4\2\2\u0a43\u0a45\5\u01b0\u00d9\2\u0a44\u0a42\3\2\2\2\u0a45"+
		"\u0a48\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a4a\3\2"+
		"\2\2\u0a48\u0a46\3\2\2\2\u0a49\u0a40\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a"+
		"\u0a50\3\2\2\2\u0a4b\u0a4f\7\u0163\2\2\u0a4c\u0a4d\7\u01f9\2\2\u0a4d\u0a4f"+
		"\7\u0134\2\2\u0a4e\u0a4b\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4f\u0a52\3\2\2"+
		"\2\u0a50\u0a4e\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0191\3\2\2\2\u0a52\u0a50"+
		"\3\2\2\2\u0a53\u0a54\b\u00ca\1\2\u0a54\u0aa2\7\u0164\2\2\u0a55\u0aa2\7"+
		"\u0085\2\2\u0a56\u0aa2\7\u0088\2\2\u0a57\u0aa2\7\u0089\2\2\u0a58\u0aa2"+
		"\7\u008a\2\2\u0a59\u0aa2\7\u008c\2\2\u0a5a\u0aa2\7\u02d1\2\2\u0a5b\u0aa2"+
		"\7\u02d2\2\2\u0a5c\u0aa2\7\u02d0\2\2\u0a5d\u0aa2\7\u02d4\2\2\u0a5e\u0aa2"+
		"\7\u02d5\2\2\u0a5f\u0aa2\7\u02ce\2\2\u0a60\u0aa2\7\u02cf\2\2\u0a61\u0a63"+
		"\7\u02c8\2\2\u0a62\u0a64\n\23\2\2\u0a63\u0a62\3\2\2\2\u0a64\u0a65\3\2"+
		"\2\2\u0a65\u0a63\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67"+
		"\u0aa2\7\u02c8\2\2\u0a68\u0a69\7\u02c7\2\2\u0a69\u0a6b\5\u01d0\u00e9\2"+
		"\u0a6a\u0a6c\n\23\2\2\u0a6b\u0a6a\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6b"+
		"\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70\7\u02c7\2"+
		"\2\u0a70\u0a71\5\u01d0\u00e9\2\u0a71\u0a72\7\u02c7\2\2\u0a72\u0aa2\3\2"+
		"\2\2\u0a73\u0aa2\5\u0194\u00cb\2\u0a74\u0aa2\5\u0168\u00b5\2\u0a75\u0aa2"+
		"\5\u0196\u00cc\2\u0a76\u0a77\7\u02ca\2\2\u0a77\u0a78\5\u0192\u00ca\2\u0a78"+
		"\u0a79\7\u02cb\2\2\u0a79\u0aa2\3\2\2\2\u0a7a\u0a7b\5\u01a2\u00d2\2\u0a7b"+
		"\u0a7c\7\u02d4\2\2\u0a7c\u0aa2\3\2\2\2\u0a7d\u0a7e\t\24\2\2\u0a7e\u0aa2"+
		"\5\u0192\u00ca\33\u0a7f\u0a80\t\25\2\2\u0a80\u0aa2\5\u0192\u00ca\32\u0a81"+
		"\u0a82\t\26\2\2\u0a82\u0aa2\5\u0192\u00ca\16\u0a83\u0aa2\5\u01ba\u00de"+
		"\2\u0a84\u0aa2\5\u01d0\u00e9\2\u0a85\u0a86\7@\2\2\u0a86\u0a87\7\u02ca"+
		"\2\2\u0a87\u0a88\5\u0192\u00ca\2\u0a88\u0a89\7\35\2\2\u0a89\u0a8a\5\u01b2"+
		"\u00da\2\u0a8a\u0a8b\7\u02cb\2\2\u0a8b\u0aa2\3\2\2\2\u0a8c\u0a8d\5\u01d6"+
		"\u00ec\2\u0a8d\u0a8e\7\u02d3\2\2\u0a8e\u0a8f\5\u01d8\u00ed\2\u0a8f\u0aa2"+
		"\3\2\2\2\u0a90\u0a91\7?\2\2\u0a91\u0a92\7\u026a\2\2\u0a92\u0a93\5\u01c6"+
		"\u00e4\2\u0a93\u0a94\7\u0229\2\2\u0a94\u0a97\5\u0192\u00ca\2\u0a95\u0a96"+
		"\7\u00bc\2\2\u0a96\u0a98\5\u0192\u00ca\2\u0a97\u0a95\3\2\2\2\u0a97\u0a98"+
		"\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9a\7\u00bf\2\2\u0a9a\u0aa2\3\2\2"+
		"\2\u0a9b\u0aa2\5\u01a8\u00d5\2\u0a9c\u0aa2\5\u01bc\u00df\2\u0a9d\u0a9e"+
		"\7\u02ca\2\2\u0a9e\u0a9f\5\u0152\u00aa\2\u0a9f\u0aa0\7\u02cb\2\2\u0aa0"+
		"\u0aa2\3\2\2\2\u0aa1\u0a53\3\2\2\2\u0aa1\u0a55\3\2\2\2\u0aa1\u0a56\3\2"+
		"\2\2\u0aa1\u0a57\3\2\2\2\u0aa1\u0a58\3\2\2\2\u0aa1\u0a59\3\2\2\2\u0aa1"+
		"\u0a5a\3\2\2\2\u0aa1\u0a5b\3\2\2\2\u0aa1\u0a5c\3\2\2\2\u0aa1\u0a5d\3\2"+
		"\2\2\u0aa1\u0a5e\3\2\2\2\u0aa1\u0a5f\3\2\2\2\u0aa1\u0a60\3\2\2\2\u0aa1"+
		"\u0a61\3\2\2\2\u0aa1\u0a68\3\2\2\2\u0aa1\u0a73\3\2\2\2\u0aa1\u0a74\3\2"+
		"\2\2\u0aa1\u0a75\3\2\2\2\u0aa1\u0a76\3\2\2\2\u0aa1\u0a7a\3\2\2\2\u0aa1"+
		"\u0a7d\3\2\2\2\u0aa1\u0a7f\3\2\2\2\u0aa1\u0a81\3\2\2\2\u0aa1\u0a83\3\2"+
		"\2\2\u0aa1\u0a84\3\2\2\2\u0aa1\u0a85\3\2\2\2\u0aa1\u0a8c\3\2\2\2\u0aa1"+
		"\u0a90\3\2\2\2\u0aa1\u0a9b\3\2\2\2\u0aa1\u0a9c\3\2\2\2\u0aa1\u0a9d\3\2"+
		"\2\2\u0aa2\u0ae5\3\2\2\2\u0aa3\u0aa4\f\30\2\2\u0aa4\u0aa5\t\27\2\2\u0aa5"+
		"\u0ae4\5\u0192\u00ca\31\u0aa6\u0aa7\f\27\2\2\u0aa7\u0aa8\t\30\2\2\u0aa8"+
		"\u0ae4\5\u0192\u00ca\30\u0aa9\u0aaa\f\26\2\2\u0aaa\u0aab\t\31\2\2\u0aab"+
		"\u0ae4\5\u0192\u00ca\27\u0aac\u0aad\f\25\2\2\u0aad\u0aae\t\32\2\2\u0aae"+
		"\u0ae4\5\u0192\u00ca\26\u0aaf\u0ab1\f\24\2\2\u0ab0\u0ab2\7\u015f\2\2\u0ab1"+
		"\u0ab0\3\2\2\2\u0ab1\u0ab2\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab4\7\u0129"+
		"\2\2\u0ab4\u0ae4\5\u0192\u00ca\25\u0ab5\u0ab7\f\23\2\2\u0ab6\u0ab8\7\u015f"+
		"\2\2\u0ab7\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9"+
		"\u0aba\7-\2\2\u0aba\u0abb\5\u0192\u00ca\2\u0abb\u0abc\7\31\2\2\u0abc\u0abd"+
		"\5\u0192\u00ca\24\u0abd\u0ae4\3\2\2\2\u0abe\u0abf\f\22\2\2\u0abf\u0ac0"+
		"\7\u00fe\2\2\u0ac0\u0ae4\5\u0192\u00ca\23\u0ac1\u0ac2\f\21\2\2\u0ac2\u0ac3"+
		"\t\33\2\2\u0ac3\u0ae4\5\u0192\u00ca\22\u0ac4\u0ac5\f\36\2\2\u0ac5\u0ac6"+
		"\7\u02cc\2\2\u0ac6\u0ac7\5\u0192\u00ca\2\u0ac7\u0ac8\7\u02cd\2\2\u0ac8"+
		"\u0ae4\3\2\2\2\u0ac9\u0aca\f\31\2\2\u0aca\u0ae4\7\u02dd\2\2\u0acb\u0acc"+
		"\f\20\2\2\u0acc\u0acf\7\u0116\2\2\u0acd\u0ad0\5\u0194\u00cb\2\u0ace\u0ad0"+
		"\7\u0164\2\2\u0acf\u0acd\3\2\2\2\u0acf\u0ace\3\2\2\2\u0ad0\u0ae4\3\2\2"+
		"\2\u0ad1\u0ad2\f\17\2\2\u0ad2\u0ae4\t\34\2\2\u0ad3\u0ad4\f\b\2\2\u0ad4"+
		"\u0ad5\7\u02cc\2\2\u0ad5\u0ad6\5\u0192\u00ca\2\u0ad6\u0ad7\7\u02c5\2\2"+
		"\u0ad7\u0ad8\5\u0192\u00ca\2\u0ad8\u0ad9\7\u02cd\2\2\u0ad9\u0ae4\3\2\2"+
		"\2\u0ada\u0adb\f\7\2\2\u0adb\u0adc\7\u02c6\2\2\u0adc\u0ae4\5\u01b2\u00da"+
		"\2\u0add\u0ade\f\6\2\2\u0ade\u0ae1\7\u02d3\2\2\u0adf\u0ae2\5\u01d0\u00e9"+
		"\2\u0ae0\u0ae2\7\u02c9\2\2\u0ae1\u0adf\3\2\2\2\u0ae1\u0ae0\3\2\2\2\u0ae2"+
		"\u0ae4\3\2\2\2\u0ae3\u0aa3\3\2\2\2\u0ae3\u0aa6\3\2\2\2\u0ae3\u0aa9\3\2"+
		"\2\2\u0ae3\u0aac\3\2\2\2\u0ae3\u0aaf\3\2\2\2\u0ae3\u0ab5\3\2\2\2\u0ae3"+
		"\u0abe\3\2\2\2\u0ae3\u0ac1\3\2\2\2\u0ae3\u0ac4\3\2\2\2\u0ae3\u0ac9\3\2"+
		"\2\2\u0ae3\u0acb\3\2\2\2\u0ae3\u0ad1\3\2\2\2\u0ae3\u0ad3\3\2\2\2\u0ae3"+
		"\u0ada\3\2\2\2\u0ae3\u0add\3\2\2\2\u0ae4\u0ae7\3\2\2\2\u0ae5\u0ae3\3\2"+
		"\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0193\3\2\2\2\u0ae7\u0ae5\3\2\2\2\u0ae8"+
		"\u0ae9\b\u00cb\1\2\u0ae9\u0aee\7\u0243\2\2\u0aea\u0aee\7\u00d2\2\2\u0aeb"+
		"\u0aec\7\u015f\2\2\u0aec\u0aee\5\u0194\u00cb\5\u0aed\u0ae8\3\2\2\2\u0aed"+
		"\u0aea\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aee\u0af7\3\2\2\2\u0aef\u0af0\f\4"+
		"\2\2\u0af0\u0af1\7\31\2\2\u0af1\u0af6\5\u0194\u00cb\5\u0af2\u0af3\f\3"+
		"\2\2\u0af3\u0af4\7\u0179\2\2\u0af4\u0af6\5\u0194\u00cb\4\u0af5\u0aef\3"+
		"\2\2\2\u0af5\u0af2\3\2\2\2\u0af6\u0af9\3\2\2\2\u0af7\u0af5\3\2\2\2\u0af7"+
		"\u0af8\3\2\2\2\u0af8\u0195\3\2\2\2\u0af9\u0af7\3\2\2\2\u0afa\u0afb\7\u02ca"+
		"\2\2\u0afb\u0b00\5\u0192\u00ca\2\u0afc\u0afd\7\u02c4\2\2\u0afd\u0aff\5"+
		"\u0192\u00ca\2\u0afe\u0afc\3\2\2\2\u0aff\u0b02\3\2\2\2\u0b00\u0afe\3\2"+
		"\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b03"+
		"\u0b04\7\u02cb\2\2\u0b04\u0197\3\2\2\2\u0b05\u0b06\7\u02ca\2\2\u0b06\u0b0b"+
		"\5\u0196\u00cc\2\u0b07\u0b08\7\u02c4\2\2\u0b08\u0b0a\5\u0196\u00cc\2\u0b09"+
		"\u0b07\3\2\2\2\u0b0a\u0b0d\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0b\u0b0c\3\2"+
		"\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0e\u0b0f\7\u02cb\2\2\u0b0f"+
		"\u0199\3\2\2\2\u0b10\u0b12\t\35\2\2\u0b11\u0b10\3\2\2\2\u0b11\u0b12\3"+
		"\2\2\2\u0b12\u0b14\3\2\2\2\u0b13\u0b15\5\u01d0\u00e9\2\u0b14\u0b13\3\2"+
		"\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b18\5\u01b2\u00da"+
		"\2\u0b17\u0b11\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u019b\3\2\2\2\u0b19\u0b1e"+
		"\5\u019a\u00ce\2\u0b1a\u0b1b\7\u02c4\2\2\u0b1b\u0b1d\5\u019a\u00ce\2\u0b1c"+
		"\u0b1a\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c\3\2\2\2\u0b1e\u0b1f\3\2"+
		"\2\2\u0b1f\u019d\3\2\2\2\u0b20\u0b1e\3\2\2\2\u0b21\u0b26\5\u01d0\u00e9"+
		"\2\u0b22\u0b23\7\u02ca\2\2\u0b23\u0b24\5\u019c\u00cf\2\u0b24\u0b25\7\u02cb"+
		"\2\2\u0b25\u0b27\3\2\2\2\u0b26\u0b22\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27"+
		"\u019f\3\2\2\2\u0b28\u0b2d\5\u019e\u00d0\2\u0b29\u0b2a\7\u02c4\2\2\u0b2a"+
		"\u0b2c\5\u019e\u00d0\2\u0b2b\u0b29\3\2\2\2\u0b2c\u0b2f\3\2\2\2\u0b2d\u0b2b"+
		"\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u01a1\3\2\2\2\u0b2f\u0b2d\3\2\2\2\u0b30"+
		"\u0b5f\7\u02b6\2\2\u0b31\u0b5f\7\u02b7\2\2\u0b32\u0b5f\7\u02b8\2\2\u0b33"+
		"\u0b5f\7\u0092\2\2\u0b34\u0b5f\7\u02b9\2\2\u0b35\u0b5f\7\u02ba\2\2\u0b36"+
		"\u0b5f\7\u0113\2\2\u0b37\u0b5f\7\u02be\2\2\u0b38\u0b5f\7\u02bf\2\2\u0b39"+
		"\u0b5f\7\u02c0\2\2\u0b3a\u0b5f\7\u02c1\2\2\u0b3b\u0b5f\7\u0150\2\2\u0b3c"+
		"\u0b5f\7\u0169\2\2\u0b3d\u0b5f\7\u02c3\2\2\u0b3e\u0b42\7\u022d\2\2\u0b3f"+
		"\u0b40\t\36\2\2\u0b40\u0b41\7\u022b\2\2\u0b41\u0b43\7\u0275\2\2\u0b42"+
		"\u0b3f\3\2\2\2\u0b42\u0b43\3\2\2\2\u0b43\u0b5f\3\2\2\2\u0b44\u0b48\7\u022d"+
		"\2\2\u0b45\u0b46\7\u0271\2\2\u0b46\u0b47\7\u022b\2\2\u0b47\u0b49\7\u0275"+
		"\2\2\u0b48\u0b45\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b5f\3\2\2\2\u0b4a"+
		"\u0b5f\7\u022e\2\2\u0b4b\u0b4f\7\u022b\2\2\u0b4c\u0b4d\7\u026f\2\2\u0b4d"+
		"\u0b4e\7\u022b\2\2\u0b4e\u0b50\7\u0275\2\2\u0b4f\u0b4c\3\2\2\2\u0b4f\u0b50"+
		"\3\2\2\2\u0b50\u0b5f\3\2\2\2\u0b51\u0b55\7\u022b\2\2\u0b52\u0b53\7\u0271"+
		"\2\2\u0b53\u0b54\7\u022b\2\2\u0b54\u0b56\7\u0275\2\2\u0b55\u0b52\3\2\2"+
		"\2\u0b55\u0b56\3\2\2\2\u0b56\u0b5f\3\2\2\2\u0b57\u0b5f\7\u022c\2\2\u0b58"+
		"\u0b5f\7\u010f\2\2\u0b59\u0b5f\7\u02bb\2\2\u0b5a\u0b5f\7\u02bc\2\2\u0b5b"+
		"\u0b5f\7\u02bd\2\2\u0b5c\u0b5f\7\u0113\2\2\u0b5d\u0b5f\7\u02c2\2\2\u0b5e"+
		"\u0b30\3\2\2\2\u0b5e\u0b31\3\2\2\2\u0b5e\u0b32\3\2\2\2\u0b5e\u0b33\3\2"+
		"\2\2\u0b5e\u0b34\3\2\2\2\u0b5e\u0b35\3\2\2\2\u0b5e\u0b36\3\2\2\2\u0b5e"+
		"\u0b37\3\2\2\2\u0b5e\u0b38\3\2\2\2\u0b5e\u0b39\3\2\2\2\u0b5e\u0b3a\3\2"+
		"\2\2\u0b5e\u0b3b\3\2\2\2\u0b5e\u0b3c\3\2\2\2\u0b5e\u0b3d\3\2\2\2\u0b5e"+
		"\u0b3e\3\2\2\2\u0b5e\u0b44\3\2\2\2\u0b5e\u0b4a\3\2\2\2\u0b5e\u0b4b\3\2"+
		"\2\2\u0b5e\u0b51\3\2\2\2\u0b5e\u0b57\3\2\2\2\u0b5e\u0b58\3\2\2\2\u0b5e"+
		"\u0b59\3\2\2\2\u0b5e\u0b5a\3\2\2\2\u0b5e\u0b5b\3\2\2\2\u0b5e\u0b5c\3\2"+
		"\2\2\u0b5e\u0b5d\3\2\2\2\u0b5f\u01a3\3\2\2\2\u0b60\u0b65\5\u01a2\u00d2"+
		"\2\u0b61\u0b62\7\u02c4\2\2\u0b62\u0b64\5\u01a2\u00d2\2\u0b63\u0b61\3\2"+
		"\2\2\u0b64\u0b67\3\2\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66"+
		"\u01a5\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b68\u0b72\3\2\2\2\u0b69\u0b6a\7\u0116"+
		"\2\2\u0b6a\u0b72\7\u016d\2\2\u0b6b\u0b72\7\u0092\2\2\u0b6c\u0b72\7\u0113"+
		"\2\2\u0b6d\u0b6e\7\u00b5\2\2\u0b6e\u0b72\7\u019e\2\2\u0b6f\u0b72\7\u00fe"+
		"\2\2\u0b70\u0b72\7\22\2\2\u0b71\u0b68\3\2\2\2\u0b71\u0b69\3\2\2\2\u0b71"+
		"\u0b6b\3\2\2\2\u0b71\u0b6c\3\2\2\2\u0b71\u0b6d\3\2\2\2\u0b71\u0b6f\3\2"+
		"\2\2\u0b71\u0b70\3\2\2\2\u0b72\u01a7\3\2\2\2\u0b73\u0b74\5\u01d0\u00e9"+
		"\2\u0b74\u0b76\7\u02ca\2\2\u0b75\u0b77\t\16\2\2\u0b76\u0b75\3\2\2\2\u0b76"+
		"\u0b77\3\2\2\2\u0b77\u0b78\3\2\2\2\u0b78\u0b7d\5\u0192\u00ca\2\u0b79\u0b7a"+
		"\7\u02c4\2\2\u0b7a\u0b7c\5\u0192\u00ca\2\u0b7b\u0b79\3\2\2\2\u0b7c\u0b7f"+
		"\3\2\2\2\u0b7d\u0b7b\3\2\2\2\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b81\3\2\2\2\u0b7f"+
		"\u0b7d\3\2\2\2\u0b80\u0b82\5\u0186\u00c4\2\u0b81\u0b80\3\2\2\2\u0b81\u0b82"+
		"\3\2\2\2\u0b82\u0b83\3\2\2\2\u0b83\u0b8a\7\u02cb\2\2\u0b84\u0b85\7\u00d4"+
		"\2\2\u0b85\u0b86\7\u02ca\2\2\u0b86\u0b87\7\u026c\2\2\u0b87\u0b88\5\u016e"+
		"\u00b8\2\u0b88\u0b89\7\u02cb\2\2\u0b89\u0b8b\3\2\2\2\u0b8a\u0b84\3\2\2"+
		"\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0bb3\3\2\2\2\u0b8c\u0b8d\5\u01d0\u00e9\2"+
		"\u0b8d\u0b8e\7\u02ca\2\2\u0b8e\u0b8f\7\u02c9\2\2\u0b8f\u0b96\7\u02cb\2"+
		"\2\u0b90\u0b91\7\u00d4\2\2\u0b91\u0b92\7\u02ca\2\2\u0b92\u0b93\7\u026c"+
		"\2\2\u0b93\u0b94\5\u016e\u00b8\2\u0b94\u0b95\7\u02cb\2\2\u0b95\u0b97\3"+
		"\2\2\2\u0b96\u0b90\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0bb3\3\2\2\2\u0b98"+
		"\u0b99\5\u01d0\u00e9\2\u0b99\u0ba2\7\u02ca\2\2\u0b9a\u0b9f\5\u0192\u00ca"+
		"\2\u0b9b\u0b9c\7\u02c4\2\2\u0b9c\u0b9e\5\u0192\u00ca\2\u0b9d\u0b9b\3\2"+
		"\2\2\u0b9e\u0ba1\3\2\2\2\u0b9f\u0b9d\3\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0"+
		"\u0ba3\3\2\2\2\u0ba1\u0b9f\3\2\2\2\u0ba2\u0b9a\3\2\2\2\u0ba2\u0ba3\3\2"+
		"\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0ba5\7\u02cb\2\2\u0ba5\u0ba6\7\u0270\2"+
		"\2\u0ba6\u0ba7\7\u00ef\2\2\u0ba7\u0ba8\7\u02ca\2\2\u0ba8\u0ba9\5\u0186"+
		"\u00c4\2\u0ba9\u0bb0\7\u02cb\2\2\u0baa\u0bab\7\u00d4\2\2\u0bab\u0bac\7"+
		"\u02ca\2\2\u0bac\u0bad\7\u026c\2\2\u0bad\u0bae\5\u016e\u00b8\2\u0bae\u0baf"+
		"\7\u02cb\2\2\u0baf\u0bb1\3\2\2\2\u0bb0\u0baa\3\2\2\2\u0bb0\u0bb1\3\2\2"+
		"\2\u0bb1\u0bb3\3\2\2\2\u0bb2\u0b73\3\2\2\2\u0bb2\u0b8c\3\2\2\2\u0bb2\u0b98"+
		"\3\2\2\2\u0bb3\u01a9\3\2\2\2\u0bb4\u0bb8\7\u02d4\2\2\u0bb5\u0bb8\7\u02d5"+
		"\2\2\u0bb6\u0bb8\5\u01d0\u00e9\2\u0bb7\u0bb4\3\2\2\2\u0bb7\u0bb5\3\2\2"+
		"\2\u0bb7\u0bb6\3\2\2\2\u0bb8\u01ab\3\2\2\2\u0bb9\u0bbe\5\u01aa\u00d6\2"+
		"\u0bba\u0bbb\7\u02c4\2\2\u0bbb\u0bbd\5\u01aa\u00d6\2\u0bbc\u0bba\3\2\2"+
		"\2\u0bbd\u0bc0\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u01ad"+
		"\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc1\u0bc6\5\u01d0\u00e9\2\u0bc2\u0bc3\7"+
		"\u02c4\2\2\u0bc3\u0bc5\5\u01d0\u00e9\2\u0bc4\u0bc2\3\2\2\2\u0bc5\u0bc8"+
		"\3\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u01af\3\2\2\2\u0bc8"+
		"\u0bc6\3\2\2\2\u0bc9\u0bca\5\u01d0\u00e9\2\u0bca\u01b1\3\2\2\2\u0bcb\u0bcc"+
		"\b\u00da\1\2\u0bcc\u0be2\5\u01a2\u00d2\2\u0bcd\u0bce\7\u0261\2\2\u0bce"+
		"\u0bd0\7\u02ca\2\2\u0bcf\u0bd1\7\u02d1\2\2\u0bd0\u0bcf\3\2\2\2\u0bd0\u0bd1"+
		"\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0be2\7\u02cb\2\2\u0bd3\u0bd4\7\u0169"+
		"\2\2\u0bd4\u0bdd\7\u02ca\2\2\u0bd5\u0bda\5\u0192\u00ca\2\u0bd6\u0bd7\7"+
		"\u02c4\2\2\u0bd7\u0bd9\5\u0192\u00ca\2\u0bd8\u0bd6\3\2\2\2\u0bd9\u0bdc"+
		"\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc"+
		"\u0bda\3\2\2\2\u0bdd\u0bd5\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0bdf\3\2"+
		"\2\2\u0bdf\u0be2\7\u02cb\2\2\u0be0\u0be2\5\u01d0\u00e9\2\u0be1\u0bcb\3"+
		"\2\2\2\u0be1\u0bcd\3\2\2\2\u0be1\u0bd3\3\2\2\2\u0be1\u0be0\3\2\2\2\u0be2"+
		"\u0beb\3\2\2\2\u0be3\u0be4\f\3\2\2\u0be4\u0be6\7\u02cc\2\2\u0be5\u0be7"+
		"\7\u02d1\2\2\u0be6\u0be5\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be8\3\2\2"+
		"\2\u0be8\u0bea\7\u02cd\2\2\u0be9\u0be3\3\2\2\2\u0bea\u0bed\3\2\2\2\u0beb"+
		"\u0be9\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u01b3\3\2\2\2\u0bed\u0beb\3\2"+
		"\2\2\u0bee\u0bf3\5\u01b2\u00da\2\u0bef\u0bf0\7\u02c4\2\2\u0bf0\u0bf2\5"+
		"\u01b2\u00da\2\u0bf1\u0bef\3\2\2\2\u0bf2\u0bf5\3\2\2\2\u0bf3\u0bf1\3\2"+
		"\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u01b5\3\2\2\2\u0bf5\u0bf3\3\2\2\2\u0bf6"+
		"\u0bf9\t\37\2\2\u0bf7\u0bf9\5\u01d0\u00e9\2\u0bf8\u0bf6\3\2\2\2\u0bf8"+
		"\u0bf7\3\2\2\2\u0bf9\u01b7\3\2\2\2\u0bfa\u0bfd\5\u01b2\u00da\2\u0bfb\u0bfd"+
		"\5\u01d0\u00e9\2\u0bfc\u0bfa\3\2\2\2\u0bfc\u0bfb\3\2\2\2\u0bfd\u01b9\3"+
		"\2\2\2\u0bfe\u0bff\5\u01b8\u00dd\2\u0bff\u0c00\7\u02ca\2\2\u0c00\u0c01"+
		"\7\u0263\2\2\u0c01\u0c02\5\u0192\u00ca\2\u0c02\u0c03\7\u02cb\2\2\u0c03"+
		"\u0c1f\3\2\2\2\u0c04\u0c05\5\u01b8\u00dd\2\u0c05\u0c13\7\u02ca\2\2\u0c06"+
		"\u0c0b\5\u0192\u00ca\2\u0c07\u0c08\7\u02c4\2\2\u0c08\u0c0a\5\u0192\u00ca"+
		"\2\u0c09\u0c07\3\2\2\2\u0c0a\u0c0d\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c"+
		"\3\2\2\2\u0c0c\u0c11\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0e\u0c0f\7\u02c4\2"+
		"\2\u0c0f\u0c10\7\u0263\2\2\u0c10\u0c12\5\u0192\u00ca\2\u0c11\u0c0e\3\2"+
		"\2\2\u0c11\u0c12\3\2\2\2\u0c12\u0c14\3\2\2\2\u0c13\u0c06\3\2\2\2\u0c13"+
		"\u0c14\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c16\7\u02cb\2\2\u0c16\u0c1f"+
		"\3\2\2\2\u0c17\u0c18\5\u01b8\u00dd\2\u0c18\u0c19\7\u02ca\2\2\u0c19\u0c1a"+
		"\5\u01d2\u00ea\2\u0c1a\u0c1b\7\u00e2\2\2\u0c1b\u0c1c\5\u0192\u00ca\2\u0c1c"+
		"\u0c1d\7\u02cb\2\2\u0c1d\u0c1f\3\2\2\2\u0c1e\u0bfe\3\2\2\2\u0c1e\u0c04"+
		"\3\2\2\2\u0c1e\u0c17\3\2\2\2\u0c1f\u01bb\3\2\2\2\u0c20\u0c21\7\34\2\2"+
		"\u0c21\u0c2a\7\u02cc\2\2\u0c22\u0c27\5\u0192\u00ca\2\u0c23\u0c24\7\u02c4"+
		"\2\2\u0c24\u0c26\5\u0192\u00ca\2\u0c25\u0c23\3\2\2\2\u0c26\u0c29\3\2\2"+
		"\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2b\3\2\2\2\u0c29\u0c27"+
		"\3\2\2\2\u0c2a\u0c22\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c"+
		"\u0c2d\7\u02cd\2\2\u0c2d\u01bd\3\2\2\2\u0c2e\u0c30\b\u00e0\1\2\u0c2f\u0c31"+
		"\7\u0173\2\2\u0c30\u0c2f\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c32\3\2\2"+
		"\2\u0c32\u0c34\5\u01b0\u00d9\2\u0c33\u0c35\7\u02c9\2\2\u0c34\u0c33\3\2"+
		"\2\2\u0c34\u0c35\3\2\2\2\u0c35\u0c37\3\2\2\2\u0c36\u0c38\5\u01c0\u00e1"+
		"\2\u0c37\u0c36\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c4c\3\2\2\2\u0c39\u0c3a"+
		"\7\u0221\2\2\u0c3a\u0c3b\5\u01d2\u00ea\2\u0c3b\u0c3c\7\u02ca\2\2\u0c3c"+
		"\u0c41\5\u0192\u00ca\2\u0c3d\u0c3e\7\u02c4\2\2\u0c3e\u0c40\5\u0192\u00ca"+
		"\2\u0c3f\u0c3d\3\2\2\2\u0c40\u0c43\3\2\2\2\u0c41\u0c3f\3\2\2\2\u0c41\u0c42"+
		"\3\2\2\2\u0c42\u0c44\3\2\2\2\u0c43\u0c41\3\2\2\2\u0c44\u0c4a\7\u02cb\2"+
		"\2\u0c45\u0c46\7\u01c2\2\2\u0c46\u0c47\7\u02ca\2\2\u0c47\u0c48\5\u01d2"+
		"\u00ea\2\u0c48\u0c49\7\u02cb\2\2\u0c49\u0c4b\3\2\2\2\u0c4a\u0c45\3\2\2"+
		"\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4d\3\2\2\2\u0c4c\u0c39\3\2\2\2\u0c4c\u0c4d"+
		"\3\2\2\2\u0c4d\u0c99\3\2\2\2\u0c4e\u0c50\7\u0123\2\2\u0c4f\u0c4e\3\2\2"+
		"\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u0c52\7\u02ca\2\2\u0c52"+
		"\u0c53\5\4\3\2\u0c53\u0c55\7\u02cb\2\2\u0c54\u0c56\7\35\2\2\u0c55\u0c54"+
		"\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c63\5\u01da\u00ee"+
		"\2\u0c58\u0c59\7\u02ca\2\2\u0c59\u0c5e\5\u01dc\u00ef\2\u0c5a\u0c5b\7\u02c4"+
		"\2\2\u0c5b\u0c5d\5\u01dc\u00ef\2\u0c5c\u0c5a\3\2\2\2\u0c5d\u0c60\3\2\2"+
		"\2\u0c5e\u0c5c\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f\u0c61\3\2\2\2\u0c60\u0c5e"+
		"\3\2\2\2\u0c61\u0c62\7\u02cb\2\2\u0c62\u0c64\3\2\2\2\u0c63\u0c58\3\2\2"+
		"\2\u0c63\u0c64\3\2\2\2\u0c64\u0c99\3\2\2\2\u0c65\u0c67\7\u0123\2\2\u0c66"+
		"\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c6b\5\u01ba"+
		"\u00de\2\u0c69\u0c6a\7\u026f\2\2\u0c6a\u0c6c\7\u017c\2\2\u0c6b\u0c69\3"+
		"\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c6e\3\2\2\2\u0c6d\u0c6f\5\u01c0\u00e1"+
		"\2\u0c6e\u0c6d\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f\u0c99\3\2\2\2\u0c70\u0c72"+
		"\7\u0123\2\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c73\3\2\2"+
		"\2\u0c73\u0c74\5\u01ba\u00de\2\u0c74\u0c75\7\35\2\2\u0c75\u0c76\7\u02ca"+
		"\2\2\u0c76\u0c7b\5\u01de\u00f0\2\u0c77\u0c78\7\u02c4\2\2\u0c78\u0c7a\5"+
		"\u01de\u00f0\2\u0c79\u0c77\3\2\2\2\u0c7a\u0c7d\3\2\2\2\u0c7b\u0c79\3\2"+
		"\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0c7e\3\2\2\2\u0c7d\u0c7b\3\2\2\2\u0c7e"+
		"\u0c7f\7\u02cb\2\2\u0c7f\u0c99\3\2\2\2\u0c80\u0c82\7\u0123\2\2\u0c81\u0c80"+
		"\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c84\7\u01d8\2"+
		"\2\u0c84\u0c85\7\u00e2\2\2\u0c85\u0c86\7\u02ca\2\2\u0c86\u0c87\5\u01ba"+
		"\u00de\2\u0c87\u0c94\7\u02cb\2\2\u0c88\u0c89\7\35\2\2\u0c89\u0c8a\7\u02ca"+
		"\2\2\u0c8a\u0c8f\5\u01de\u00f0\2\u0c8b\u0c8c\7\u02c4\2\2\u0c8c\u0c8e\5"+
		"\u01de\u00f0\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c8d\3\2"+
		"\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c92\3\2\2\2\u0c91\u0c8f\3\2\2\2\u0c92"+
		"\u0c93\7\u02cb\2\2\u0c93\u0c95\3\2\2\2\u0c94\u0c88\3\2\2\2\u0c94\u0c95"+
		"\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c97\7\u02cb\2\2\u0c97\u0c99\3\2\2"+
		"\2\u0c98\u0c2e\3\2\2\2\u0c98\u0c4f\3\2\2\2\u0c98\u0c66\3\2\2\2\u0c98\u0c71"+
		"\3\2\2\2\u0c98\u0c81\3\2\2\2\u0c99\u0ca4\3\2\2\2\u0c9a\u0c9c\f\3\2\2\u0c9b"+
		"\u0c9d\7\u0153\2\2\u0c9c\u0c9b\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9e"+
		"\3\2\2\2\u0c9e\u0c9f\5\u01c2\u00e2\2\u0c9f\u0ca0\5\u01be\u00e0\2\u0ca0"+
		"\u0ca1\5\u01c4\u00e3\2\u0ca1\u0ca3\3\2\2\2\u0ca2\u0c9a\3\2\2\2\u0ca3\u0ca6"+
		"\3\2\2\2\u0ca4\u0ca2\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u01bf\3\2\2\2\u0ca6"+
		"\u0ca4\3\2\2\2\u0ca7\u0ca9\7\35\2\2\u0ca8\u0ca7\3\2\2\2\u0ca8\u0ca9\3"+
		"\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u0cb3\5\u01da\u00ee\2\u0cab\u0cb0\5\u01dc"+
		"\u00ef\2\u0cac\u0cad\7\u02c4\2\2\u0cad\u0caf\5\u01dc\u00ef\2\u0cae\u0cac"+
		"\3\2\2\2\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1"+
		"\u0cb4\3\2\2\2\u0cb2\u0cb0\3\2\2\2\u0cb3\u0cab\3\2\2\2\u0cb3\u0cb4\3\2"+
		"\2\2\u0cb4\u01c1\3\2\2\2\u0cb5\u0cb7\7\u0107\2\2\u0cb6\u0cb5\3\2\2\2\u0cb6"+
		"\u0cb7\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0ccb\7\u011a\2\2\u0cb9\u0cbb"+
		"\7\u0125\2\2\u0cba\u0cbc\7\u017f\2\2\u0cbb\u0cba\3\2\2\2\u0cbb\u0cbc\3"+
		"\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0ccb\7\u011a\2\2\u0cbe\u0cc0\7\u01cf"+
		"\2\2\u0cbf\u0cc1\7\u017f\2\2\u0cc0\u0cbf\3\2\2\2\u0cc0\u0cc1\3\2\2\2\u0cc1"+
		"\u0cc2\3\2\2\2\u0cc2\u0ccb\7\u011a\2\2\u0cc3\u0cc5\7\u00e3\2\2\u0cc4\u0cc6"+
		"\7\u017f\2\2\u0cc5\u0cc4\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\3\2\2"+
		"\2\u0cc7\u0ccb\7\u011a\2\2\u0cc8\u0cc9\7\u0080\2\2\u0cc9\u0ccb\7\u011a"+
		"\2\2\u0cca\u0cb6\3\2\2\2\u0cca\u0cb9\3\2\2\2\u0cca\u0cbe\3\2\2\2\u0cca"+
		"\u0cc3\3\2\2\2\u0cca\u0cc8\3\2\2\2\u0ccb\u01c3\3\2\2\2\u0ccc\u0ccd\7\u0172"+
		"\2\2\u0ccd\u0cdb\5\u01c6\u00e4\2\u0cce\u0ccf\7\u025b\2\2\u0ccf\u0cd0\7"+
		"\u02ca\2\2\u0cd0\u0cd5\5\u01d8\u00ed\2\u0cd1\u0cd2\7\u02c4\2\2\u0cd2\u0cd4"+
		"\5\u01d8\u00ed\2\u0cd3\u0cd1\3\2\2\2\u0cd4\u0cd7\3\2\2\2\u0cd5\u0cd3\3"+
		"\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u0cd8\3\2\2\2\u0cd7\u0cd5\3\2\2\2\u0cd8"+
		"\u0cd9\7\u02cb\2\2\u0cd9\u0cdb\3\2\2\2\u0cda\u0ccc\3\2\2\2\u0cda\u0cce"+
		"\3\2\2\2\u0cdb\u01c5\3\2\2\2\u0cdc\u0cdd\b\u00e4\1\2\u0cdd\u0cf5\5\u0192"+
		"\u00ca\2\u0cde\u0cdf\5\u0192\u00ca\2\u0cdf\u0ce0\5\u01a6\u00d4\2\u0ce0"+
		"\u0ce1\5\u0192\u00ca\2\u0ce1\u0cf5\3\2\2\2\u0ce2\u0ce3\5\u0192\u00ca\2"+
		"\u0ce3\u0ce5\7\u0116\2\2\u0ce4\u0ce6\7\u015f\2\2\u0ce5\u0ce4\3\2\2\2\u0ce5"+
		"\u0ce6\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce8\7\u0164\2\2\u0ce8\u0cf5"+
		"\3\2\2\2\u0ce9\u0cea\7\u02ca\2\2\u0cea\u0ceb\5\u01c6\u00e4\2\u0ceb\u0cec"+
		"\7\u02cb\2\2\u0cec\u0cf5\3\2\2\2\u0ced\u0cee\7\u00cc\2\2\u0cee\u0cef\7"+
		"\u02ca\2\2\u0cef\u0cf0\5\u0152\u00aa\2\u0cf0\u0cf1\7\u02cb\2\2\u0cf1\u0cf5"+
		"\3\2\2\2\u0cf2\u0cf3\7\u015f\2\2\u0cf3\u0cf5\5\u01c6\u00e4\3\u0cf4\u0cdc"+
		"\3\2\2\2\u0cf4\u0cde\3\2\2\2\u0cf4\u0ce2\3\2\2\2\u0cf4\u0ce9\3\2\2\2\u0cf4"+
		"\u0ced\3\2\2\2\u0cf4\u0cf2\3\2\2\2\u0cf5\u0cfe\3\2\2\2\u0cf6\u0cf7\f\5"+
		"\2\2\u0cf7\u0cf8\7\31\2\2\u0cf8\u0cfd\5\u01c6\u00e4\6\u0cf9\u0cfa\f\4"+
		"\2\2\u0cfa\u0cfb\7\u0179\2\2\u0cfb\u0cfd\5\u01c6\u00e4\5\u0cfc\u0cf6\3"+
		"\2\2\2\u0cfc\u0cf9\3\2\2\2\u0cfd\u0d00\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cfe"+
		"\u0cff\3\2\2\2\u0cff\u01c7\3\2\2\2\u0d00\u0cfe\3\2\2\2\u0d01\u0d1c\7\u02c9"+
		"\2\2\u0d02\u0d04\t\2\2\2\u0d03\u0d02\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04"+
		"\u0d06\3\2\2\2\u0d05\u0d07\5\u01d0\u00e9\2\u0d06\u0d05\3\2\2\2\u0d06\u0d07"+
		"\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d1c\5\u01b4\u00db\2\u0d09\u0d0b\t"+
		"\2\2\2\u0d0a\u0d09\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\3\2\2\2\u0d0c"+
		"\u0d0e\5\u01d0\u00e9\2\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u0d0f"+
		"\3\2\2\2\u0d0f\u0d10\5\u01b4\u00db\2\u0d10\u0d11\3\2\2\2\u0d11\u0d12\7"+
		"\u017a\2\2\u0d12\u0d14\7\67\2\2\u0d13\u0d15\t\2\2\2\u0d14\u0d13\3\2\2"+
		"\2\u0d14\u0d15\3\2\2\2\u0d15\u0d17\3\2\2\2\u0d16\u0d18\5\u01d0\u00e9\2"+
		"\u0d17\u0d16\3\2\2\2\u0d17\u0d18\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1a"+
		"\5\u01b4\u00db\2\u0d1a\u0d1c\3\2\2\2\u0d1b\u0d01\3\2\2\2\u0d1b\u0d03\3"+
		"\2\2\2\u0d1b\u0d0a\3\2\2\2\u0d1c\u01c9\3\2\2\2\u0d1d\u0d22\5\u01aa\u00d6"+
		"\2\u0d1e\u0d22\7\u008c\2\2\u0d1f\u0d22\7\u01f0\2\2\u0d20\u0d22\7\u01a8"+
		"\2\2\u0d21\u0d1d\3\2\2\2\u0d21\u0d1e\3\2\2\2\u0d21\u0d1f\3\2\2\2\u0d21"+
		"\u0d20\3\2\2\2\u0d22\u01cb\3\2\2\2\u0d23\u0d28\5\u01ca\u00e6\2\u0d24\u0d25"+
		"\7\u02c4\2\2\u0d25\u0d27\5\u01ca\u00e6\2\u0d26\u0d24\3\2\2\2\u0d27\u0d2a"+
		"\3\2\2\2\u0d28\u0d26\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u01cd\3\2\2\2\u0d2a"+
		"\u0d28\3\2\2\2\u0d2b\u0d2c\t \2\2\u0d2c\u01cf\3\2\2\2\u0d2d\u0d2e\b\u00e9"+
		"\1\2\u0d2e\u0d31\5\u01ce\u00e8\2\u0d2f\u0d31\7\u02d6\2\2\u0d30\u0d2d\3"+
		"\2\2\2\u0d30\u0d2f\3\2\2\2\u0d31\u0d37\3\2\2\2\u0d32\u0d33\f\3\2\2\u0d33"+
		"\u0d34\7\u02d3\2\2\u0d34\u0d36\5\u01d0\u00e9\4\u0d35\u0d32\3\2\2\2\u0d36"+
		"\u0d39\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u01d1\3\2"+
		"\2\2\u0d39\u0d37\3\2\2\2\u0d3a\u0d3b\13\2\2\2\u0d3b\u01d3\3\2\2\2\u0d3c"+
		"\u0d3d\5\u01d0\u00e9\2\u0d3d\u01d5\3\2\2\2\u0d3e\u0d3f\5\u01d0\u00e9\2"+
		"\u0d3f\u01d7\3\2\2\2\u0d40\u0d41\5\u01d0\u00e9\2\u0d41\u01d9\3\2\2\2\u0d42"+
		"\u0d43\5\u01d0\u00e9\2\u0d43\u01db\3\2\2\2\u0d44\u0d45\5\u01d0\u00e9\2"+
		"\u0d45\u01dd\3\2\2\2\u0d46\u0d47\5\u01d0\u00e9\2\u0d47\u01df\3\2\2\2\u0d48"+
		"\u0d49\5\u01d0\u00e9\2\u0d49\u01e1\3\2\2\2\u0182\u01e5\u0221\u024d\u02d4"+
		"\u02e4\u02e7\u02f7\u02fd\u0301\u0307\u030d\u0313\u0319\u031f\u0325\u032b"+
		"\u0331\u0337\u033b\u0341\u0347\u034d\u0356\u0359\u035c\u0361\u0364\u0374"+
		"\u037a\u037e\u0384\u038a\u038e\u03a5\u03ab\u03af\u03b5\u03bb\u03c1\u03c7"+
		"\u03cd\u03d3\u03d9\u03df\u03e5\u03e9\u03ef\u03f5\u03f9\u0409\u040f\u0415"+
		"\u0429\u0430\u0438\u0444\u044a\u044e\u045d\u0462\u0467\u046c\u0471\u0476"+
		"\u047b\u0480\u0486\u048b\u048f\u0499\u049f\u04a7\u04a9\u04b4\u04bc\u04c7"+
		"\u04d5\u04e1\u04e3\u04ea\u04f1\u04f9\u0504\u0508\u050d\u0516\u051b\u0524"+
		"\u0533\u0548\u054a\u054c\u0550\u0554\u0559\u055c\u0562\u0566\u056a\u056f"+
		"\u0572\u0579\u057c\u057f\u0587\u058b\u058d\u0595\u059c\u059f\u05a3\u05a9"+
		"\u05ac\u05b9\u05bf\u05c5\u05cb\u05d1\u05d7\u05db\u05df\u05ec\u05f4\u05f8"+
		"\u0601\u0608\u0611\u0619\u062a\u062e\u0635\u063d\u0643\u0657\u066c\u066e"+
		"\u0670\u0677\u0682\u0686\u068a\u0691\u0694\u069b\u06a5\u06ae\u06b2\u06b8"+
		"\u06bd\u06c0\u06c6\u06cc\u06d0\u06d3\u06d7\u06da\u06dd\u06e6\u06e8\u073b"+
		"\u0742\u0746\u074c\u0757\u075f\u0765\u0769\u076f\u0773\u0779\u0781\u0785"+
		"\u078c\u0790\u0796\u079a\u07a2\u07a6\u07ad\u07b1\u07b7\u07bb\u07c1\u07c8"+
		"\u07cc\u07d0\u07d4\u07d9\u07dd\u07e4\u07e8\u07f1\u07f7\u07fe\u0804\u080b"+
		"\u0811\u0817\u081d\u0821\u0827\u082f\u0835\u083b\u083f\u0845\u0849\u084f"+
		"\u0853\u0859\u0861\u0865\u086b\u086f\u0875\u087f\u0883\u088b\u088f\u0897"+
		"\u089b\u08a3\u08a7\u08ad\u08b9\u08bf\u08c5\u08c9\u08cf\u08d8\u08e0\u08e9"+
		"\u08ed\u0922\u0925\u0928\u092b\u092e\u0931\u0934\u0937\u093a\u093d\u0940"+
		"\u095c\u095f\u0962\u0965\u0967\u096d\u096f\u0974\u0977\u097d\u0980\u0982"+
		"\u0986\u0989\u0991\u099e\u09a9\u09ae\u09b2\u09ba\u09c2\u09cd\u09da\u09e8"+
		"\u09f2\u09f6\u0a01\u0a0c\u0a11\u0a17\u0a21\u0a24\u0a2c\u0a31\u0a3e\u0a46"+
		"\u0a49\u0a4e\u0a50\u0a65\u0a6d\u0a97\u0aa1\u0ab1\u0ab7\u0acf\u0ae1\u0ae3"+
		"\u0ae5\u0aed\u0af5\u0af7\u0b00\u0b0b\u0b11\u0b14\u0b17\u0b1e\u0b26\u0b2d"+
		"\u0b42\u0b48\u0b4f\u0b55\u0b5e\u0b65\u0b71\u0b76\u0b7d\u0b81\u0b8a\u0b96"+
		"\u0b9f\u0ba2\u0bb0\u0bb2\u0bb7\u0bbe\u0bc6\u0bd0\u0bda\u0bdd\u0be1\u0be6"+
		"\u0beb\u0bf3\u0bf8\u0bfc\u0c0b\u0c11\u0c13\u0c1e\u0c27\u0c2a\u0c30\u0c34"+
		"\u0c37\u0c41\u0c4a\u0c4c\u0c4f\u0c55\u0c5e\u0c63\u0c66\u0c6b\u0c6e\u0c71"+
		"\u0c7b\u0c81\u0c8f\u0c94\u0c98\u0c9c\u0ca4\u0ca8\u0cb0\u0cb3\u0cb6\u0cbb"+
		"\u0cc0\u0cc5\u0cca\u0cd5\u0cda\u0ce5\u0cf4\u0cfc\u0cfe\u0d03\u0d06\u0d0a"+
		"\u0d0d\u0d14\u0d17\u0d1b\u0d21\u0d28\u0d30\u0d37";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}