// Generated from java-escape by ANTLR 4.11.1
package org.antlr.sql.dialects.vsql;
import java.util.List;

import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class VSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.11.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		K_ALL=1, K_AND=2, K_ANY=3, K_ARRAY=4, K_AS=5, K_ASC=6, K_AUTHORIZATION=7, 
		K_BETWEEN=8, K_BIGINT=9, K_BINARY=10, K_BIT=11, K_BOOLEAN=12, K_BOTH=13, 
		K_CASE=14, K_CAST=15, K_CHAR=16, K_CHAR_LENGTH=17, K_CHARACTER_LENGTH=18, 
		K_CHECK=19, K_COLLATE=20, K_COLUMN=21, K_CONSTRAINT=22, K_CORRELATION=23, 
		K_CREATE=24, K_CROSS=25, K_CURRENT_DATABASE=26, K_CURRENT_DATE=27, K_CURRENT_SCHEMA=28, 
		K_CURRENT_TIME=29, K_CURRENT_TIMESTAMP=30, K_CURRENT_USER=31, K_DATEDIFF=32, 
		K_DATETIME=33, K_DECIMAL=34, K_DECODE=35, K_DEFAULT=36, K_DEFERRABLE=37, 
		K_DESC=38, K_DISTINCT=39, K_ELSE=40, K_ENCODED=41, K_END=42, K_EXCEPT=43, 
		K_EXISTS=44, K_EXTRACT=45, K_FALSE=46, K_FLOAT=47, K_FOR=48, K_FOREIGN=49, 
		K_FROM=50, K_FULL=51, K_GRANT=52, K_GROUP=53, K_HAVING=54, K_ILIKE=55, 
		K_ILIKEB=56, K_IN=57, K_INITIALLY=58, K_INNER=59, K_INOUT=60, K_INT=61, 
		K_INTEGER=62, K_INTERSECT=63, K_INTERVAL=64, K_INTERVALYM=65, K_INTO=66, 
		K_IS=67, K_ISNULL=68, K_JOIN=69, K_KSAFE=70, K_LEADING=71, K_LEFT=72, 
		K_LIKE=73, K_LIKEB=74, K_LIMIT=75, K_LOCALTIME=76, K_LOCALTIMESTAMP=77, 
		K_MATCH=78, K_MINUS=79, K_MONEY=80, K_NATURAL=81, K_NCHAR=82, K_NEW=83, 
		K_NONE=84, K_NOT=85, K_NOTNULL=86, K_NULL=87, K_NULLSEQUAL=88, K_NUMBER=89, 
		K_NUMERIC=90, K_OFFSET=91, K_OLD=92, K_ON=93, K_ONLY=94, K_OR=95, K_ORDER=96, 
		K_OUT=97, K_OUTER=98, K_OVER=99, K_OVERLAPS=100, K_OVERLAY=101, K_PINNED=102, 
		K_POSITION=103, K_PRECISION=104, K_PRIMARY=105, K_REAL=106, K_REFERENCES=107, 
		K_RIGHT=108, K_ROW=109, K_SCHEMA=110, K_SELECT=111, K_SESSION_USER=112, 
		K_SIMILAR=113, K_SMALLDATETIME=114, K_SMALLINT=115, K_SOME=116, K_SUBSTRING=117, 
		K_SYSDATE=118, K_TABLE=119, K_TEXT=120, K_THEN=121, K_TIME=122, K_TIMESERIES=123, 
		K_TIMESTAMP=124, K_TIMESTAMPADD=125, K_TIMESTAMPDIFF=126, K_TIMESTAMPTZ=127, 
		K_TIMETZ=128, K_TIMEZONE=129, K_TINYINT=130, K_TO=131, K_TRAILING=132, 
		K_TREAT=133, K_TRIM=134, K_TRUE=135, K_UNBOUNDED=136, K_UNION=137, K_UNIQUE=138, 
		K_USER=139, K_USING=140, K_UUID=141, K_VARBINARY=142, K_VARCHAR=143, K_VARCHAR2=144, 
		K_WHEN=145, K_WHERE=146, K_WINDOW=147, K_WITH=148, K_WITHIN=149, K_ABORT=150, 
		K_ABSOLUTE=151, K_ACCESS=152, K_ACCESSRANK=153, K_ACCOUNT=154, K_ACTION=155, 
		K_ACTIVATE=156, K_ACTIVEPARTITIONCOUNT=157, K_ADD=158, K_ADMIN=159, K_AFTER=160, 
		K_AGGREGATE=161, K_ALSO=162, K_ALTER=163, K_ANALYSE=164, K_ANALYTIC=165, 
		K_ANALYZE=166, K_ANNOTATED=167, K_ANTI=168, K_ASSERTION=169, K_ASSIGNMENT=170, 
		K_AT=171, K_AUTHENTICATION=172, K_AUTO=173, K_AUTO_INCREMENT=174, K_AVAILABLE=175, 
		K_BACKWARD=176, K_BASENAME=177, K_BATCH=178, K_BEFORE=179, K_BEGIN=180, 
		K_BEST=181, K_BLOCK=182, K_BLOCK_DICT=183, K_BLOCKDICT_COMP=184, K_BROADCAST=185, 
		K_BY=186, K_BYTEA=187, K_BYTES=188, K_BZIP=189, K_BZIP_COMP=190, K_CACHE=191, 
		K_CALLED=192, K_CASCADE=193, K_CATALOGPATH=194, K_CHAIN=195, K_CHARACTER=196, 
		K_CHARACTERISTICS=197, K_CHARACTERS=198, K_CHECKPOINT=199, K_CLASS=200, 
		K_CLEAR=201, K_CLOSE=202, K_CLUSTER=203, K_COLSIZES=204, K_COLUMNS_COUNT=205, 
		K_COMMENT=206, K_COMMIT=207, K_COMMITTED=208, K_COMMONDELTA_COMP=209, 
		K_COMMUNAL=210, K_COMPLEX=211, K_CONNECT=212, K_CONSTRAINTS=213, K_CONTROL=214, 
		K_COPY=215, K_CPUAFFINITYMODE=216, K_CPUAFFINITYSET=217, K_CREATEDB=218, 
		K_CREATEUSER=219, K_CSV=220, K_CUBE=221, K_CURRENT=222, K_CURSOR=223, 
		K_CUSTOM=224, K_CUSTOM_PARTITIONS=225, K_CYCLE=226, K_DATA=227, K_DATABASE=228, 
		K_DATAPATH=229, K_DAY=230, K_DEACTIVATE=231, K_DEALLOCATE=232, K_DEC=233, 
		K_DECLARE=234, K_DEFAULTS=235, K_DEFERRED=236, K_DEFINE=237, K_DEFINER=238, 
		K_DELETE=239, K_DELIMITER=240, K_DELIMITERS=241, K_DELTARANGE_COMP=242, 
		K_DELTARANGE_COMP_SP=243, K_DELTAVAL=244, K_DEPENDS=245, K_DETERMINES=246, 
		K_DIRECT=247, K_DIRECTCOLS=248, K_DIRECTED=249, K_DIRECTGROUPED=250, K_DIRECTPROJ=251, 
		K_DISABLE=252, K_DISABLED=253, K_DISCONNECT=254, K_DISTVALINDEX=255, K_DO=256, 
		K_DOMAIN=257, K_DOUBLE=258, K_DROP=259, K_DURABLE=260, K_EACH=261, K_ENABLE=262, 
		K_ENABLED=263, K_ENCLOSED=264, K_ENCODING=265, K_ENCRYPTED=266, K_ENFORCELENGTH=267, 
		K_EPHEMERAL=268, K_EPOCH=269, K_ERROR=270, K_ESCAPE=271, K_EVENT=272, 
		K_EVENTS=273, K_EXCEPTION=274, K_EXCEPTIONS=275, K_EXCLUDE=276, K_EXCLUDING=277, 
		K_EXCLUSIVE=278, K_EXECUTE=279, K_EXECUTIONPARALLELISM=280, K_EXPIRE=281, 
		K_EXPLAIN=282, K_EXPORT=283, K_EXTERNAL=284, K_FAILED_LOGIN_ATTEMPTS=285, 
		K_FAULT=286, K_FENCED=287, K_FETCH=288, K_FILESYSTEM=289, K_FILLER=290, 
		K_FILTER=291, K_FIRST=292, K_FIXEDWIDTH=293, K_FLEX=294, K_FLEXIBLE=295, 
		K_FOLLOWING=296, K_FORCE=297, K_FORMAT=298, K_FORWARD=299, K_FREEZE=300, 
		K_FUNCTION=301, K_FUNCTIONS=302, K_GCDDELTA=303, K_GET=304, K_GLOBAL=305, 
		K_GRACEPERIOD=306, K_GROUPED=307, K_GROUPING=308, K_GZIP=309, K_GZIP_COMP=310, 
		K_HANDLER=311, K_HCATALOG=312, K_HCATALOG_CONNECTION_TIMEOUT=313, K_HCATALOG_DB=314, 
		K_HCATALOG_SCHEMA=315, K_HCATALOG_SLOW_TRANSFER_LIMIT=316, K_HCATALOG_SLOW_TRANSFER_TIME=317, 
		K_HCATALOG_USER=318, K_HIGH=319, K_HIVE_PARTITION_COLS=320, K_HIVESERVER2_HOSTNAME=321, 
		K_HOLD=322, K_HOST=323, K_HOSTNAME=324, K_HOUR=325, K_HOURS=326, K_IDENTIFIED=327, 
		K_IDENTITY=328, K_IDLESESSIONTIMEOUT=329, K_IF=330, K_IGNORE=331, K_IMMEDIATE=332, 
		K_IMMUTABLE=333, K_IMPLICIT=334, K_INCLUDE=335, K_INCLUDING=336, K_INCREMENT=337, 
		K_INDEX=338, K_INHERITS=339, K_INPUT=340, K_INSENSITIVE=341, K_INSERT=342, 
		K_INSTEAD=343, K_INTERFACE=344, K_INTERPOLATE=345, K_INVOKER=346, K_ISOLATION=347, 
		K_JSON=348, K_KEY=349, K_LABEL=350, K_LANCOMPILER=351, K_LANGUAGE=352, 
		K_LARGE=353, K_LAST=354, K_LATEST=355, K_LESS=356, K_LEVEL=357, K_LIBRARY=358, 
		K_LISTEN=359, K_LOAD=360, K_LOCAL=361, K_LOCATION=362, K_LOCK=363, K_LONG=364, 
		K_LOW=365, K_LZO=366, K_MANAGED=367, K_MASK=368, K_MATCHED=369, K_MATERIALIZE=370, 
		K_MAXCONCURRENCY=371, K_MAXCONCURRENCYGRACE=372, K_MAXCONNECTIONS=373, 
		K_MAXMEMORYSIZE=374, K_MAXPAYLOAD=375, K_MAXQUERYMEMORYSIZE=376, K_MAXVALUE=377, 
		K_MEDIUM=378, K_MEMORYCAP=379, K_MEMORYSIZE=380, K_MERGE=381, K_MERGEOUT=382, 
		K_METHOD=383, K_MICROSECONDS=384, K_MILLISECONDS=385, K_MINUTE=386, K_MINUTES=387, 
		K_MINVALUE=388, K_MODE=389, K_MODEL=390, K_MONTH=391, K_MOVE=392, K_MOVEOUT=393, 
		K_NAME=394, K_NATIONAL=395, K_NATIVE=396, K_NETWORK=397, K_NEXT=398, K_NO=399, 
		K_NOCREATEDB=400, K_NOCREATEUSER=401, K_NODE=402, K_NODES=403, K_NOTHING=404, 
		K_NOTIFIER=405, K_NOTIFY=406, K_NOWAIT=407, K_NULLAWARE=408, K_NULLCOLS=409, 
		K_NULLS=410, K_OBJECT=411, K_OCTETS=412, K_OF=413, K_OFF=414, K_OIDS=415, 
		K_OPERATOR=416, K_OPT=417, K_OPTIMIZER=418, K_OPTION=419, K_OPTVER=420, 
		K_ORC=421, K_OTHERS=422, K_OWNER=423, K_PARAMETER=424, K_PARAMETERS=425, 
		K_PARQUET=426, K_PARSER=427, K_PARTIAL=428, K_PARTITION=429, K_PARTITIONING=430, 
		K_PASSWORD=431, K_PASSWORD_GRACE_TIME=432, K_PASSWORD_LIFE_TIME=433, K_PASSWORD_LOCK_TIME=434, 
		K_PASSWORD_MAX_LENGTH=435, K_PASSWORD_MIN_DIGITS=436, K_PASSWORD_MIN_LENGTH=437, 
		K_PASSWORD_MIN_LETTERS=438, K_PASSWORD_MIN_LOWERCASE_LETTERS=439, K_PASSWORD_MIN_SYMBOLS=440, 
		K_PASSWORD_MIN_UPPERCASE_LETTERS=441, K_PASSWORD_REUSE_MAX=442, K_PASSWORD_REUSE_TIME=443, 
		K_PATTERN=444, K_PERCENT=445, K_PERMANENT=446, K_PLACING=447, K_PLANNEDCONCURRENCY=448, 
		K_POLICY=449, K_POOL=450, K_PORT=451, K_PRECEDING=452, K_PREPARE=453, 
		K_PREPASS=454, K_PRESERVE=455, K_PREVIOUS=456, K_PRIOR=457, K_PRIORITY=458, 
		K_PRIVILEGES=459, K_PROCEDURAL=460, K_PROCEDURE=461, K_PROFILE=462, K_PROJECTION=463, 
		K_PROJECTIONS=464, K_PSDATE=465, K_QUERY=466, K_QUEUETIMEOUT=467, K_QUOTE=468, 
		K_RANGE=469, K_RAW=470, K_READ=471, K_RECHECK=472, K_RECORD=473, K_RECOVER=474, 
		K_RECURSIVE=475, K_REFRESH=476, K_REINDEX=477, K_REJECTED=478, K_REJECTMAX=479, 
		K_RELATIVE=480, K_RELEASE=481, K_REMOVE=482, K_RENAME=483, K_REORGANIZE=484, 
		K_REPEATABLE=485, K_REPLACE=486, K_RESET=487, K_RESOURCE=488, K_RESTART=489, 
		K_RESTRICT=490, K_RESULTS=491, K_RETURN=492, K_RETURNREJECTED=493, K_REVOKE=494, 
		K_RLE=495, K_ROLE=496, K_ROLES=497, K_ROLLBACK=498, K_ROLLUP=499, K_ROWS=500, 
		K_RULE=501, K_RUNTIMECAP=502, K_RUNTIMEPRIORITY=503, K_RUNTIMEPRIORITYTHRESHOLD=504, 
		K_SAVE=505, K_SAVEPOINT=506, K_SCROLL=507, K_SEARCH_PATH=508, K_SECOND=509, 
		K_SECONDS=510, K_SECURITY=511, K_SECURITY_ALGORITHM=512, K_SEGMENTED=513, 
		K_SEMI=514, K_SEMIALL=515, K_SEQUENCE=516, K_SEQUENCES=517, K_SERIALIZABLE=518, 
		K_SESSION=519, K_SET=520, K_SETOF=521, K_SETS=522, K_SHARE=523, K_SHARED=524, 
		K_SHOW=525, K_SIMPLE=526, K_SINGLEINITIATOR=527, K_SITE=528, K_SITES=529, 
		K_SKIP=530, K_SOURCE=531, K_SPLIT=532, K_SSL_CONFIG=533, K_STABLE=534, 
		K_STANDBY=535, K_START=536, K_STATEMENT=537, K_STATISTICS=538, K_STDIN=539, 
		K_STDOUT=540, K_STEMMER=541, K_STORAGE=542, K_STREAM=543, K_STRENGTH=544, 
		K_STRICT=545, K_SUBNET=546, K_SYSID=547, K_SYSTEM=548, K_TABLES=549, K_TABLESAMPLE=550, 
		K_TABLESPACE=551, K_TEMP=552, K_TEMPLATE=553, K_TEMPORARY=554, K_TEMPSPACECAP=555, 
		K_TERMINATOR=556, K_THAN=557, K_TIES=558, K_TLS=559, K_TOAST=560, K_TOKENIZER=561, 
		K_TOLERANCE=562, K_TRANSACTION=563, K_TRANSFORM=564, K_TRICKLE=565, K_TRIGGER=566, 
		K_TRUNCATE=567, K_TRUSTED=568, K_TUNING=569, K_TYPE=570, K_UDPARAMETER=571, 
		K_UNCOMMITTED=572, K_UNCOMPRESSED=573, K_UNI=574, K_UNINDEXED=575, K_UNKNOWN=576, 
		K_UNLIMITED=577, K_UNLISTEN=578, K_UNLOCK=579, K_UNPACKER=580, K_UNSEGMENTED=581, 
		K_UPDATE=582, K_USAGE=583, K_VACUUM=584, K_VALIDATE=585, K_VALIDATOR=586, 
		K_VALINDEX=587, K_VALUE=588, K_VALUES=589, K_VARYING=590, K_VERBOSE=591, 
		K_VERTICA=592, K_VIEW=593, K_VOLATILE=594, K_WAIT=595, K_WEBHDFS_ADDRESS=596, 
		K_WEBSERVICE_HOSTNAME=597, K_WEBSERVICE_PORT=598, K_WITHOUT=599, K_WORK=600, 
		K_WRITE=601, K_YEAR=602, K_ZONE=603, K_UDPARAMETERS=604, K_ALLNODES=605, 
		K_PUBLIC=606, K_DIRECTORY=607, K_ROWGROUPSIZEMB=608, K_COMPRESSION=609, 
		K_FILESIZEMB=610, K_FILEMODE=611, K_DIRMODE=612, K_ZSTD=613, K_ROUTE=614, 
		K_ROUTING=615, K_ESCAPE_STRING_WARNING=616, K_STANDARD_CONFORMING_STRINGS=617, 
		K_AUTOCOMMIT=618, K_LOCALE=619, K_MULTIPLEACTIVERESULTSETS=620, K_RESOURCE_POOL=621, 
		K_INTERVALSTYLE=622, K_PLAIN=623, K_UNITS=624, K_DATESTYLE=625, K_ISO=626, 
		K_MDY=627, K_POSTGRES=628, K_SQL=629, K_GERMAN=630, K_DMY=631, K_TLSMODE=632, 
		K_PREFER=633, K_INT8=634, K_FLOAT8=635, K_GEOMETRY=636, K_GEOGRAPHY=637, 
		K_DATE=638, K_ADDRESS=639, K_BALANCE=640, K_GBYTYPE=641, K_HASH=642, K_PIPE=643, 
		K_SYN_JOIN=644, K_ENABLE_WITH_CLAUSE_MATERIALIZATION=645, K_EARLY_MATERIALIZATION=646, 
		K_CREATETYPE=647, K_SYNTACTIC_JOIN=648, K_BRANCH=649, K_DATATYPE=650, 
		K_VERBATIM=651, K_IGNORECONST=652, K_UTYPE=653, K_JTYPE=654, K_DISTRIB=655, 
		K_PROJS=656, K_SKIP_PROJS=657, COMMA=658, MINUS=659, STAR=660, PLUS=661, 
		DCOLON=662, OPEN_PAREN=663, CLOSE_PAREN=664, DOT=665, SEMI=666, UNDERSCORE=667, 
		AMP_AMP=668, AMP_LT=669, BANG=670, ABS=671, BANG_BANG=672, BANG_EQUAL=673, 
		EQUAL=674, EQUAL2=675, GT=676, GTE=677, LT=678, LTE=679, LT_GT=680, SQROOT=681, 
		CUBEROOT=682, EXP=683, MOD=684, DIV2=685, DIV=686, DPIPE=687, OPEN_SQUARE_BRACKET=688, 
		CLOSE_SQUARE_BRACKET=689, O_AND=690, O_OR=691, O_XOR=692, O_NOT=693, O_SHIFT_LEFT=694, 
		O_SHIFT_RIGHT=695, IPV4_ADDR=696, IPV6_ADDR=697, SPACE=698, COMMENT=699, 
		LINE_COMMENT=700, COMMAND=701, OPEN_HINT=702, CLOSE_HINT=703, DOUBLE_QUOTE_STRING=704, 
		PARAM=705, WORD=706, SINGLE_QUOTE_STRING=707, FLOAT=708, REAL=709, DECIMAL=710, 
		ANY=711;
	public static final int
		RULE_root = 0, RULE_sqlStatement = 1, RULE_statement = 2, RULE_alter_access_policy_statement = 3, 
		RULE_alter_authentication_statement = 4, RULE_alter_database_drop_statement = 5, 
		RULE_alter_fault_group_statement = 6, RULE_alter_function_statement = 7, 
		RULE_alter_hcatalog_schema_statement = 8, RULE_alter_library_statement = 9, 
		RULE_alter_model_statement = 10, RULE_alter_network_interface_statement = 11, 
		RULE_alter_node_statement = 12, RULE_alter_notfifier_statement = 13, RULE_notifier_params = 14, 
		RULE_alter_projection_statement = 15, RULE_alter_profile_statement = 16, 
		RULE_alter_profile_rename_statement = 17, RULE_alter_resource_pool_statement = 18, 
		RULE_resource_pool_param = 19, RULE_alter_role_rename_statement = 20, 
		RULE_alter_schema_statement = 21, RULE_alter_sequence_statement = 22, 
		RULE_sequence_params = 23, RULE_alter_session_statement = 24, RULE_alter_subnet_statement = 25, 
		RULE_alter_table_rename_statement = 26, RULE_alter_table_general_statment = 27, 
		RULE_alter_table_item = 28, RULE_alter_user_statement = 29, RULE_user_params = 30, 
		RULE_alter_view_statement = 31, RULE_todo_statement = 32, RULE_begin_transaction_statement = 33, 
		RULE_comment_on_statement = 34, RULE_comment_on_column_statement = 35, 
		RULE_comment_on_constraint_statement = 36, RULE_comment_on_function_statement = 37, 
		RULE_comment_on_transform_function_statement = 38, RULE_comment_on_library_statement = 39, 
		RULE_comment_on_node_statement = 40, RULE_comment_on_schema_statement = 41, 
		RULE_comment_on_sequence_statement = 42, RULE_comment_on_table_statement = 43, 
		RULE_comment_on_view_statement = 44, RULE_comment_on_projection_statement = 45, 
		RULE_comment_value = 46, RULE_commit_statement = 47, RULE_connect_statement = 48, 
		RULE_copy_column = 49, RULE_column_option = 50, RULE_path = 51, RULE_local_path = 52, 
		RULE_inputFormat = 53, RULE_vertica_source = 54, RULE_udl_clause = 55, 
		RULE_copy_statement_option = 56, RULE_copy_statement = 57, RULE_copy_local_statement = 58, 
		RULE_copy_from_vertica_statement = 59, RULE_create_access_policy_statement = 60, 
		RULE_create_authentication_statement = 61, RULE_create_branch_statement = 62, 
		RULE_create_external_table_as_copy_statement = 63, RULE_create_fault_group_statement = 64, 
		RULE_create_flex_table_statement = 65, RULE_create_flex_external_table_as_copy_statement = 66, 
		RULE_create_function_statements_statement = 67, RULE_create_or_replace_transform_function_statement = 68, 
		RULE_create_or_replace_source_function_statement = 69, RULE_create_or_replace_parser_function_statement = 70, 
		RULE_create_or_replace_udf_function_statement = 71, RULE_create_or_replace_sql_function_statement = 72, 
		RULE_expreDefininition = 73, RULE_create_or_replace_filter_statement = 74, 
		RULE_create_or_replace_analytic_function_statement = 75, RULE_create_or_replace_aggregate_function_statement = 76, 
		RULE_create_hcatalog_schema_statement = 77, RULE_hcatalog_schema_param = 78, 
		RULE_create_library_statement = 79, RULE_create_load_balance_group_statement = 80, 
		RULE_create_local_temporary_view_statement = 81, RULE_create_location_statement = 82, 
		RULE_create_network_address_statement = 83, RULE_create_network_interface_statement = 84, 
		RULE_create_notifier_statement = 85, RULE_create_procedure_statement = 86, 
		RULE_argument_list = 87, RULE_argument_item = 88, RULE_create_profile_statement = 89, 
		RULE_projection_clause_item = 90, RULE_ksafe_clause = 91, RULE_ifNotExistsClause = 92, 
		RULE_create_projection_statement = 93, RULE_create_projection_live_aggregate_projections_statement = 94, 
		RULE_create_projection_live_aggregate_projections_gr_statement = 95, RULE_create_projection_live_aggregate_projections_topk_statement = 96, 
		RULE_create_projection_udtfs_statement = 97, RULE_columns = 98, RULE_batch_query = 99, 
		RULE_prepass_query = 100, RULE_create_resource_pool_statement = 101, RULE_create_role_statement = 102, 
		RULE_create_routing_rule_statement = 103, RULE_create_schema_statement = 104, 
		RULE_create_sequence_statement = 105, RULE_create_subnet_statement = 106, 
		RULE_create_table_statement = 107, RULE_schema_privileges_clause = 108, 
		RULE_create_table_as_statement = 109, RULE_column_name_list = 110, RULE_column_name_list_item = 111, 
		RULE_access_rank = 112, RULE_grouped_clause = 113, RULE_create_table_like_statement = 114, 
		RULE_create_table_default_statement = 115, RULE_table_constraint = 116, 
		RULE_column_definition_list = 117, RULE_column_definition = 118, RULE_column_constraint = 119, 
		RULE_load_method = 120, RULE_segmentation_clause = 121, RULE_create_temporary_table_statement = 122, 
		RULE_create_temporary_table_with_def_statement = 123, RULE_create_temporary_table_from_table_statement = 124, 
		RULE_encodedBy_clause = 125, RULE_column_ref = 126, RULE_create_text_index_statement = 127, 
		RULE_create_user_statement = 128, RULE_create_view_statement = 129, RULE_delete_statement = 130, 
		RULE_directed_query_statements_statement = 131, RULE_activate_directed_query_statement = 132, 
		RULE_create_directed_query_statement = 133, RULE_deactivate_directed_query_statement = 134, 
		RULE_drop_directed_query_statement = 135, RULE_get_directed_query_statement = 136, 
		RULE_save_query = 137, RULE_disconnect_statement = 138, RULE_drop_access_policy_statement = 139, 
		RULE_drop_aggregate_function_statement = 140, RULE_drop_authentication_statement = 141, 
		RULE_drop_branch_statement = 142, RULE_drop_fault_group_statement = 143, 
		RULE_drop_function_statement = 144, RULE_drop_source_statement = 145, 
		RULE_drop_filter_statement = 146, RULE_drop_parser_statement = 147, RULE_drop_model_statement = 148, 
		RULE_drop_library_statement = 149, RULE_drop_load_balance_group_statement = 150, 
		RULE_drop_network_address_statement = 151, RULE_drop_network_interface_statement = 152, 
		RULE_drop_notifier_statement = 153, RULE_drop_procedure_statement = 154, 
		RULE_drop_profile_statement = 155, RULE_drop_projection_statement = 156, 
		RULE_drop_resource_pool_statement = 157, RULE_drop_role_statement = 158, 
		RULE_drop_routing_rule_statement = 159, RULE_drop_schema_statement = 160, 
		RULE_drop_sequence_statement = 161, RULE_drop_subnet_statement = 162, 
		RULE_drop_table_statement = 163, RULE_drop_text_index_statement = 164, 
		RULE_drop_transform_function_statement = 165, RULE_drop_user_statement = 166, 
		RULE_drop_view_statement = 167, RULE_end_statement = 168, RULE_explain_statement = 169, 
		RULE_export_to_parquet_statement = 170, RULE_export_to_vertica_statement = 171, 
		RULE_grant_statements_statement = 172, RULE_grant_on_view_statement = 173, 
		RULE_grant_on_ude_statement = 174, RULE_grant_on_table_statement = 175, 
		RULE_grant_on_location_statement = 176, RULE_grant_on_sequence_statement = 177, 
		RULE_grant_on_schema_statement = 178, RULE_schema_privilege = 179, RULE_grant_on_role_statement = 180, 
		RULE_grant_on_resourcepool_statement = 181, RULE_grant_on_procedure_statement = 182, 
		RULE_grant_on_model_statement = 183, RULE_grant_on_library_statement = 184, 
		RULE_grant_privileges_on_database_statement = 185, RULE_grant_authentication_to_statement = 186, 
		RULE_withGrantOption = 187, RULE_grantees = 188, RULE_grantee = 189, RULE_grant_authentication_statement = 190, 
		RULE_insert_statement = 191, RULE_insert_values = 192, RULE_merge_statement = 193, 
		RULE_matchingClause = 194, RULE_profile_statement = 195, RULE_release_savepoint_statement = 196, 
		RULE_revoke_statements_statement = 197, RULE_revoke_on_view_statement = 198, 
		RULE_revoke_on_function_statement = 199, RULE_revoke_on_table_statement = 200, 
		RULE_revoke_on_location_statement = 201, RULE_revoke_on_sequence_statement = 202, 
		RULE_revoke_on_schema_statement = 203, RULE_revoke_on_role_statement = 204, 
		RULE_revoke_on_resource_pool_statement = 205, RULE_revoke_on_prodecure_statement = 206, 
		RULE_revoke_on_model_statement = 207, RULE_revoke_on_library_statement = 208, 
		RULE_revoke_on_database_statement = 209, RULE_revoke_authentication_statement = 210, 
		RULE_rollback_statement = 211, RULE_rollback_to_savepoint_statement = 212, 
		RULE_savepoint_statement = 213, RULE_with_statement = 214, RULE_at_epoch_clause = 215, 
		RULE_select_statement = 216, RULE_set_datestyle_statement = 217, RULE_set_escape_string_warning_statement = 218, 
		RULE_set_intervalstyle_statement = 219, RULE_set_locale_statement = 220, 
		RULE_set_role_statement = 221, RULE_set_search_path_statement = 222, RULE_set_session_autocommit_statement = 223, 
		RULE_set_session_characteristics_as_transaction_statement = 224, RULE_set_session_graceperiod_statement = 225, 
		RULE_set_session_idlesessiontimeout_statement = 226, RULE_set_session_memorycap_statement = 227, 
		RULE_set_session_multipleactiveresultsets_statement = 228, RULE_set_session_resource_pool_statement = 229, 
		RULE_set_session_runtimecap_statement = 230, RULE_set_session_tempspacecap_statement = 231, 
		RULE_set_standard_conforming_strings_statement = 232, RULE_set_time_zone_statement = 233, 
		RULE_show_statement = 234, RULE_show_current_statement = 235, RULE_show_database_statement = 236, 
		RULE_show_node_statement = 237, RULE_show_session_statement = 238, RULE_start_transaction_statement = 239, 
		RULE_truncate_table_statement = 240, RULE_update_statement = 241, RULE_simple_select_query_clause = 242, 
		RULE_select_query = 243, RULE_offset_clause = 244, RULE_limit_clause = 245, 
		RULE_select_clause = 246, RULE_intersect_clause = 247, RULE_except_clause = 248, 
		RULE_from_clause = 249, RULE_into_clause = 250, RULE_timeseries_clause = 251, 
		RULE_over_clause = 252, RULE_as_over_clause = 253, RULE_groupBy_clause = 254, 
		RULE_having_clause = 255, RULE_where_clause = 256, RULE_orderby_clause = 257, 
		RULE_match_clause = 258, RULE_partition_clause = 259, RULE_encoding_clause = 260, 
		RULE_owner_clause = 261, RULE_rename_clause = 262, RULE_set_schema_clause = 263, 
		RULE_orderbyItem = 264, RULE_predicates = 265, RULE_tableSample = 266, 
		RULE_dataset = 267, RULE_joinedTable = 268, RULE_elements = 269, RULE_element = 270, 
		RULE_el = 271, RULE_expressions = 272, RULE_castExpr = 273, RULE_castOperator = 274, 
		RULE_expression = 275, RULE_arrayExpr = 276, RULE_predicate = 277, RULE_nullPredicate = 278, 
		RULE_likePredicate = 279, RULE_joinPredicate = 280, RULE_interpolatePredicate = 281, 
		RULE_columnValuePredicate = 282, RULE_inPredicate = 283, RULE_constantExp = 284, 
		RULE_betweenPredicate = 285, RULE_booleanPredicate = 286, RULE_caseExp = 287, 
		RULE_alias = 288, RULE_functionCall = 289, RULE_elementWithUsing = 290, 
		RULE_usingClause = 291, RULE_commaSeparatedKeyValuePairs = 292, RULE_values = 293, 
		RULE_keyValuePair = 294, RULE_hints = 295, RULE_hint = 296, RULE_columnReference = 297, 
		RULE_tableReference = 298, RULE_viewReference = 299, RULE_sourceReference = 300, 
		RULE_filterReference = 301, RULE_parserReference = 302, RULE_projectionReference = 303, 
		RULE_procedureReference = 304, RULE_procedure = 305, RULE_functionReference = 306, 
		RULE_libraryReference = 307, RULE_sequenceReference = 308, RULE_modelReference = 309, 
		RULE_txtIndexReference = 310, RULE_schemaReference = 311, RULE_dbname = 312, 
		RULE_txtIndex = 313, RULE_host = 314, RULE_port = 315, RULE_source = 316, 
		RULE_notifier = 317, RULE_model = 318, RULE_filter = 319, RULE_parserName = 320, 
		RULE_view = 321, RULE_lb_group = 322, RULE_network_address = 323, RULE_routingRule = 324, 
		RULE_branch_identifier = 325, RULE_role = 326, RULE_lang = 327, RULE_resourcePool = 328, 
		RULE_schema = 329, RULE_udParam = 330, RULE_table = 331, RULE_params = 332, 
		RULE_projection = 333, RULE_library = 334, RULE_function = 335, RULE_param = 336, 
		RULE_node = 337, RULE_sequence = 338, RULE_column = 339, RULE_string = 340, 
		RULE_singleChar = 341, RULE_number = 342, RULE_integerNumber = 343, RULE_asteriskExp = 344, 
		RULE_subnet = 345, RULE_user = 346, RULE_owner = 347, RULE_method = 348, 
		RULE_faultGroup = 349, RULE_auth_method_name = 350, RULE_constraint = 351, 
		RULE_network_interface = 352, RULE_profile = 353, RULE_id = 354, RULE_value = 355, 
		RULE_enableOrDisable = 356, RULE_enabledOrDisabled = 357, RULE_nullOrNotNull = 358, 
		RULE_address = 359, RULE_compressionType = 360, RULE_password_parameter = 361, 
		RULE_operator = 362, RULE_bitwiseOperator = 363, RULE_booleanOperators = 364, 
		RULE_otherOperator = 365, RULE_mathematicalOperator = 366, RULE_comparisonOperator = 367, 
		RULE_isolationLevel = 368, RULE_transactionMode = 369, RULE_bool_expression = 370, 
		RULE_dataTypes = 371, RULE_binaryTypes = 372, RULE_booleanTypes = 373, 
		RULE_charTypes = 374, RULE_dateTypes = 375, RULE_apNumericTypes = 376, 
		RULE_eNumericTypes = 377, RULE_spatialTypes = 378, RULE_uuidTypes = 379, 
		RULE_otherTypes = 380, RULE_nonReserved = 381;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatement", "statement", "alter_access_policy_statement", 
			"alter_authentication_statement", "alter_database_drop_statement", "alter_fault_group_statement", 
			"alter_function_statement", "alter_hcatalog_schema_statement", "alter_library_statement", 
			"alter_model_statement", "alter_network_interface_statement", "alter_node_statement", 
			"alter_notfifier_statement", "notifier_params", "alter_projection_statement", 
			"alter_profile_statement", "alter_profile_rename_statement", "alter_resource_pool_statement", 
			"resource_pool_param", "alter_role_rename_statement", "alter_schema_statement", 
			"alter_sequence_statement", "sequence_params", "alter_session_statement", 
			"alter_subnet_statement", "alter_table_rename_statement", "alter_table_general_statment", 
			"alter_table_item", "alter_user_statement", "user_params", "alter_view_statement", 
			"todo_statement", "begin_transaction_statement", "comment_on_statement", 
			"comment_on_column_statement", "comment_on_constraint_statement", "comment_on_function_statement", 
			"comment_on_transform_function_statement", "comment_on_library_statement", 
			"comment_on_node_statement", "comment_on_schema_statement", "comment_on_sequence_statement", 
			"comment_on_table_statement", "comment_on_view_statement", "comment_on_projection_statement", 
			"comment_value", "commit_statement", "connect_statement", "copy_column", 
			"column_option", "path", "local_path", "inputFormat", "vertica_source", 
			"udl_clause", "copy_statement_option", "copy_statement", "copy_local_statement", 
			"copy_from_vertica_statement", "create_access_policy_statement", "create_authentication_statement", 
			"create_branch_statement", "create_external_table_as_copy_statement", 
			"create_fault_group_statement", "create_flex_table_statement", "create_flex_external_table_as_copy_statement", 
			"create_function_statements_statement", "create_or_replace_transform_function_statement", 
			"create_or_replace_source_function_statement", "create_or_replace_parser_function_statement", 
			"create_or_replace_udf_function_statement", "create_or_replace_sql_function_statement", 
			"expreDefininition", "create_or_replace_filter_statement", "create_or_replace_analytic_function_statement", 
			"create_or_replace_aggregate_function_statement", "create_hcatalog_schema_statement", 
			"hcatalog_schema_param", "create_library_statement", "create_load_balance_group_statement", 
			"create_local_temporary_view_statement", "create_location_statement", 
			"create_network_address_statement", "create_network_interface_statement", 
			"create_notifier_statement", "create_procedure_statement", "argument_list", 
			"argument_item", "create_profile_statement", "projection_clause_item", 
			"ksafe_clause", "ifNotExistsClause", "create_projection_statement", "create_projection_live_aggregate_projections_statement", 
			"create_projection_live_aggregate_projections_gr_statement", "create_projection_live_aggregate_projections_topk_statement", 
			"create_projection_udtfs_statement", "columns", "batch_query", "prepass_query", 
			"create_resource_pool_statement", "create_role_statement", "create_routing_rule_statement", 
			"create_schema_statement", "create_sequence_statement", "create_subnet_statement", 
			"create_table_statement", "schema_privileges_clause", "create_table_as_statement", 
			"column_name_list", "column_name_list_item", "access_rank", "grouped_clause", 
			"create_table_like_statement", "create_table_default_statement", "table_constraint", 
			"column_definition_list", "column_definition", "column_constraint", "load_method", 
			"segmentation_clause", "create_temporary_table_statement", "create_temporary_table_with_def_statement", 
			"create_temporary_table_from_table_statement", "encodedBy_clause", "column_ref", 
			"create_text_index_statement", "create_user_statement", "create_view_statement", 
			"delete_statement", "directed_query_statements_statement", "activate_directed_query_statement", 
			"create_directed_query_statement", "deactivate_directed_query_statement", 
			"drop_directed_query_statement", "get_directed_query_statement", "save_query", 
			"disconnect_statement", "drop_access_policy_statement", "drop_aggregate_function_statement", 
			"drop_authentication_statement", "drop_branch_statement", "drop_fault_group_statement", 
			"drop_function_statement", "drop_source_statement", "drop_filter_statement", 
			"drop_parser_statement", "drop_model_statement", "drop_library_statement", 
			"drop_load_balance_group_statement", "drop_network_address_statement", 
			"drop_network_interface_statement", "drop_notifier_statement", "drop_procedure_statement", 
			"drop_profile_statement", "drop_projection_statement", "drop_resource_pool_statement", 
			"drop_role_statement", "drop_routing_rule_statement", "drop_schema_statement", 
			"drop_sequence_statement", "drop_subnet_statement", "drop_table_statement", 
			"drop_text_index_statement", "drop_transform_function_statement", "drop_user_statement", 
			"drop_view_statement", "end_statement", "explain_statement", "export_to_parquet_statement", 
			"export_to_vertica_statement", "grant_statements_statement", "grant_on_view_statement", 
			"grant_on_ude_statement", "grant_on_table_statement", "grant_on_location_statement", 
			"grant_on_sequence_statement", "grant_on_schema_statement", "schema_privilege", 
			"grant_on_role_statement", "grant_on_resourcepool_statement", "grant_on_procedure_statement", 
			"grant_on_model_statement", "grant_on_library_statement", "grant_privileges_on_database_statement", 
			"grant_authentication_to_statement", "withGrantOption", "grantees", "grantee", 
			"grant_authentication_statement", "insert_statement", "insert_values", 
			"merge_statement", "matchingClause", "profile_statement", "release_savepoint_statement", 
			"revoke_statements_statement", "revoke_on_view_statement", "revoke_on_function_statement", 
			"revoke_on_table_statement", "revoke_on_location_statement", "revoke_on_sequence_statement", 
			"revoke_on_schema_statement", "revoke_on_role_statement", "revoke_on_resource_pool_statement", 
			"revoke_on_prodecure_statement", "revoke_on_model_statement", "revoke_on_library_statement", 
			"revoke_on_database_statement", "revoke_authentication_statement", "rollback_statement", 
			"rollback_to_savepoint_statement", "savepoint_statement", "with_statement", 
			"at_epoch_clause", "select_statement", "set_datestyle_statement", "set_escape_string_warning_statement", 
			"set_intervalstyle_statement", "set_locale_statement", "set_role_statement", 
			"set_search_path_statement", "set_session_autocommit_statement", "set_session_characteristics_as_transaction_statement", 
			"set_session_graceperiod_statement", "set_session_idlesessiontimeout_statement", 
			"set_session_memorycap_statement", "set_session_multipleactiveresultsets_statement", 
			"set_session_resource_pool_statement", "set_session_runtimecap_statement", 
			"set_session_tempspacecap_statement", "set_standard_conforming_strings_statement", 
			"set_time_zone_statement", "show_statement", "show_current_statement", 
			"show_database_statement", "show_node_statement", "show_session_statement", 
			"start_transaction_statement", "truncate_table_statement", "update_statement", 
			"simple_select_query_clause", "select_query", "offset_clause", "limit_clause", 
			"select_clause", "intersect_clause", "except_clause", "from_clause", 
			"into_clause", "timeseries_clause", "over_clause", "as_over_clause", 
			"groupBy_clause", "having_clause", "where_clause", "orderby_clause", 
			"match_clause", "partition_clause", "encoding_clause", "owner_clause", 
			"rename_clause", "set_schema_clause", "orderbyItem", "predicates", "tableSample", 
			"dataset", "joinedTable", "elements", "element", "el", "expressions", 
			"castExpr", "castOperator", "expression", "arrayExpr", "predicate", "nullPredicate", 
			"likePredicate", "joinPredicate", "interpolatePredicate", "columnValuePredicate", 
			"inPredicate", "constantExp", "betweenPredicate", "booleanPredicate", 
			"caseExp", "alias", "functionCall", "elementWithUsing", "usingClause", 
			"commaSeparatedKeyValuePairs", "values", "keyValuePair", "hints", "hint", 
			"columnReference", "tableReference", "viewReference", "sourceReference", 
			"filterReference", "parserReference", "projectionReference", "procedureReference", 
			"procedure", "functionReference", "libraryReference", "sequenceReference", 
			"modelReference", "txtIndexReference", "schemaReference", "dbname", "txtIndex", 
			"host", "port", "source", "notifier", "model", "filter", "parserName", 
			"view", "lb_group", "network_address", "routingRule", "branch_identifier", 
			"role", "lang", "resourcePool", "schema", "udParam", "table", "params", 
			"projection", "library", "function", "param", "node", "sequence", "column", 
			"string", "singleChar", "number", "integerNumber", "asteriskExp", "subnet", 
			"user", "owner", "method", "faultGroup", "auth_method_name", "constraint", 
			"network_interface", "profile", "id", "value", "enableOrDisable", "enabledOrDisabled", 
			"nullOrNotNull", "address", "compressionType", "password_parameter", 
			"operator", "bitwiseOperator", "booleanOperators", "otherOperator", "mathematicalOperator", 
			"comparisonOperator", "isolationLevel", "transactionMode", "bool_expression", 
			"dataTypes", "binaryTypes", "booleanTypes", "charTypes", "dateTypes", 
			"apNumericTypes", "eNumericTypes", "spatialTypes", "uuidTypes", "otherTypes", 
			"nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "','", "'-'", 
			"'*'", "'+'", "'::'", "'('", "')'", "'.'", "';'", "'_'", "'&&'", "'&<'", 
			"'!'", "'@'", "'!!'", "'!='", "'='", "'<=>'", "'>'", "'>='", "'<'", "'<='", 
			"'<>'", "'|/'", "'||/'", "'^'", "'%'", "'//'", "'/'", "'||'", "'['", 
			"']'", "'&'", "'|'", "'#'", "'~'", "'<<'", "'>>'", null, null, null, 
			null, null, null, "'/*+'", "'*/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "K_ALL", "K_AND", "K_ANY", "K_ARRAY", "K_AS", "K_ASC", "K_AUTHORIZATION", 
			"K_BETWEEN", "K_BIGINT", "K_BINARY", "K_BIT", "K_BOOLEAN", "K_BOTH", 
			"K_CASE", "K_CAST", "K_CHAR", "K_CHAR_LENGTH", "K_CHARACTER_LENGTH", 
			"K_CHECK", "K_COLLATE", "K_COLUMN", "K_CONSTRAINT", "K_CORRELATION", 
			"K_CREATE", "K_CROSS", "K_CURRENT_DATABASE", "K_CURRENT_DATE", "K_CURRENT_SCHEMA", 
			"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_CURRENT_USER", "K_DATEDIFF", 
			"K_DATETIME", "K_DECIMAL", "K_DECODE", "K_DEFAULT", "K_DEFERRABLE", "K_DESC", 
			"K_DISTINCT", "K_ELSE", "K_ENCODED", "K_END", "K_EXCEPT", "K_EXISTS", 
			"K_EXTRACT", "K_FALSE", "K_FLOAT", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
			"K_GRANT", "K_GROUP", "K_HAVING", "K_ILIKE", "K_ILIKEB", "K_IN", "K_INITIALLY", 
			"K_INNER", "K_INOUT", "K_INT", "K_INTEGER", "K_INTERSECT", "K_INTERVAL", 
			"K_INTERVALYM", "K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KSAFE", "K_LEADING", 
			"K_LEFT", "K_LIKE", "K_LIKEB", "K_LIMIT", "K_LOCALTIME", "K_LOCALTIMESTAMP", 
			"K_MATCH", "K_MINUS", "K_MONEY", "K_NATURAL", "K_NCHAR", "K_NEW", "K_NONE", 
			"K_NOT", "K_NOTNULL", "K_NULL", "K_NULLSEQUAL", "K_NUMBER", "K_NUMERIC", 
			"K_OFFSET", "K_OLD", "K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUT", "K_OUTER", 
			"K_OVER", "K_OVERLAPS", "K_OVERLAY", "K_PINNED", "K_POSITION", "K_PRECISION", 
			"K_PRIMARY", "K_REAL", "K_REFERENCES", "K_RIGHT", "K_ROW", "K_SCHEMA", 
			"K_SELECT", "K_SESSION_USER", "K_SIMILAR", "K_SMALLDATETIME", "K_SMALLINT", 
			"K_SOME", "K_SUBSTRING", "K_SYSDATE", "K_TABLE", "K_TEXT", "K_THEN", 
			"K_TIME", "K_TIMESERIES", "K_TIMESTAMP", "K_TIMESTAMPADD", "K_TIMESTAMPDIFF", 
			"K_TIMESTAMPTZ", "K_TIMETZ", "K_TIMEZONE", "K_TINYINT", "K_TO", "K_TRAILING", 
			"K_TREAT", "K_TRIM", "K_TRUE", "K_UNBOUNDED", "K_UNION", "K_UNIQUE", 
			"K_USER", "K_USING", "K_UUID", "K_VARBINARY", "K_VARCHAR", "K_VARCHAR2", 
			"K_WHEN", "K_WHERE", "K_WINDOW", "K_WITH", "K_WITHIN", "K_ABORT", "K_ABSOLUTE", 
			"K_ACCESS", "K_ACCESSRANK", "K_ACCOUNT", "K_ACTION", "K_ACTIVATE", "K_ACTIVEPARTITIONCOUNT", 
			"K_ADD", "K_ADMIN", "K_AFTER", "K_AGGREGATE", "K_ALSO", "K_ALTER", "K_ANALYSE", 
			"K_ANALYTIC", "K_ANALYZE", "K_ANNOTATED", "K_ANTI", "K_ASSERTION", "K_ASSIGNMENT", 
			"K_AT", "K_AUTHENTICATION", "K_AUTO", "K_AUTO_INCREMENT", "K_AVAILABLE", 
			"K_BACKWARD", "K_BASENAME", "K_BATCH", "K_BEFORE", "K_BEGIN", "K_BEST", 
			"K_BLOCK", "K_BLOCK_DICT", "K_BLOCKDICT_COMP", "K_BROADCAST", "K_BY", 
			"K_BYTEA", "K_BYTES", "K_BZIP", "K_BZIP_COMP", "K_CACHE", "K_CALLED", 
			"K_CASCADE", "K_CATALOGPATH", "K_CHAIN", "K_CHARACTER", "K_CHARACTERISTICS", 
			"K_CHARACTERS", "K_CHECKPOINT", "K_CLASS", "K_CLEAR", "K_CLOSE", "K_CLUSTER", 
			"K_COLSIZES", "K_COLUMNS_COUNT", "K_COMMENT", "K_COMMIT", "K_COMMITTED", 
			"K_COMMONDELTA_COMP", "K_COMMUNAL", "K_COMPLEX", "K_CONNECT", "K_CONSTRAINTS", 
			"K_CONTROL", "K_COPY", "K_CPUAFFINITYMODE", "K_CPUAFFINITYSET", "K_CREATEDB", 
			"K_CREATEUSER", "K_CSV", "K_CUBE", "K_CURRENT", "K_CURSOR", "K_CUSTOM", 
			"K_CUSTOM_PARTITIONS", "K_CYCLE", "K_DATA", "K_DATABASE", "K_DATAPATH", 
			"K_DAY", "K_DEACTIVATE", "K_DEALLOCATE", "K_DEC", "K_DECLARE", "K_DEFAULTS", 
			"K_DEFERRED", "K_DEFINE", "K_DEFINER", "K_DELETE", "K_DELIMITER", "K_DELIMITERS", 
			"K_DELTARANGE_COMP", "K_DELTARANGE_COMP_SP", "K_DELTAVAL", "K_DEPENDS", 
			"K_DETERMINES", "K_DIRECT", "K_DIRECTCOLS", "K_DIRECTED", "K_DIRECTGROUPED", 
			"K_DIRECTPROJ", "K_DISABLE", "K_DISABLED", "K_DISCONNECT", "K_DISTVALINDEX", 
			"K_DO", "K_DOMAIN", "K_DOUBLE", "K_DROP", "K_DURABLE", "K_EACH", "K_ENABLE", 
			"K_ENABLED", "K_ENCLOSED", "K_ENCODING", "K_ENCRYPTED", "K_ENFORCELENGTH", 
			"K_EPHEMERAL", "K_EPOCH", "K_ERROR", "K_ESCAPE", "K_EVENT", "K_EVENTS", 
			"K_EXCEPTION", "K_EXCEPTIONS", "K_EXCLUDE", "K_EXCLUDING", "K_EXCLUSIVE", 
			"K_EXECUTE", "K_EXECUTIONPARALLELISM", "K_EXPIRE", "K_EXPLAIN", "K_EXPORT", 
			"K_EXTERNAL", "K_FAILED_LOGIN_ATTEMPTS", "K_FAULT", "K_FENCED", "K_FETCH", 
			"K_FILESYSTEM", "K_FILLER", "K_FILTER", "K_FIRST", "K_FIXEDWIDTH", "K_FLEX", 
			"K_FLEXIBLE", "K_FOLLOWING", "K_FORCE", "K_FORMAT", "K_FORWARD", "K_FREEZE", 
			"K_FUNCTION", "K_FUNCTIONS", "K_GCDDELTA", "K_GET", "K_GLOBAL", "K_GRACEPERIOD", 
			"K_GROUPED", "K_GROUPING", "K_GZIP", "K_GZIP_COMP", "K_HANDLER", "K_HCATALOG", 
			"K_HCATALOG_CONNECTION_TIMEOUT", "K_HCATALOG_DB", "K_HCATALOG_SCHEMA", 
			"K_HCATALOG_SLOW_TRANSFER_LIMIT", "K_HCATALOG_SLOW_TRANSFER_TIME", "K_HCATALOG_USER", 
			"K_HIGH", "K_HIVE_PARTITION_COLS", "K_HIVESERVER2_HOSTNAME", "K_HOLD", 
			"K_HOST", "K_HOSTNAME", "K_HOUR", "K_HOURS", "K_IDENTIFIED", "K_IDENTITY", 
			"K_IDLESESSIONTIMEOUT", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IMMUTABLE", 
			"K_IMPLICIT", "K_INCLUDE", "K_INCLUDING", "K_INCREMENT", "K_INDEX", "K_INHERITS", 
			"K_INPUT", "K_INSENSITIVE", "K_INSERT", "K_INSTEAD", "K_INTERFACE", "K_INTERPOLATE", 
			"K_INVOKER", "K_ISOLATION", "K_JSON", "K_KEY", "K_LABEL", "K_LANCOMPILER", 
			"K_LANGUAGE", "K_LARGE", "K_LAST", "K_LATEST", "K_LESS", "K_LEVEL", "K_LIBRARY", 
			"K_LISTEN", "K_LOAD", "K_LOCAL", "K_LOCATION", "K_LOCK", "K_LONG", "K_LOW", 
			"K_LZO", "K_MANAGED", "K_MASK", "K_MATCHED", "K_MATERIALIZE", "K_MAXCONCURRENCY", 
			"K_MAXCONCURRENCYGRACE", "K_MAXCONNECTIONS", "K_MAXMEMORYSIZE", "K_MAXPAYLOAD", 
			"K_MAXQUERYMEMORYSIZE", "K_MAXVALUE", "K_MEDIUM", "K_MEMORYCAP", "K_MEMORYSIZE", 
			"K_MERGE", "K_MERGEOUT", "K_METHOD", "K_MICROSECONDS", "K_MILLISECONDS", 
			"K_MINUTE", "K_MINUTES", "K_MINVALUE", "K_MODE", "K_MODEL", "K_MONTH", 
			"K_MOVE", "K_MOVEOUT", "K_NAME", "K_NATIONAL", "K_NATIVE", "K_NETWORK", 
			"K_NEXT", "K_NO", "K_NOCREATEDB", "K_NOCREATEUSER", "K_NODE", "K_NODES", 
			"K_NOTHING", "K_NOTIFIER", "K_NOTIFY", "K_NOWAIT", "K_NULLAWARE", "K_NULLCOLS", 
			"K_NULLS", "K_OBJECT", "K_OCTETS", "K_OF", "K_OFF", "K_OIDS", "K_OPERATOR", 
			"K_OPT", "K_OPTIMIZER", "K_OPTION", "K_OPTVER", "K_ORC", "K_OTHERS", 
			"K_OWNER", "K_PARAMETER", "K_PARAMETERS", "K_PARQUET", "K_PARSER", "K_PARTIAL", 
			"K_PARTITION", "K_PARTITIONING", "K_PASSWORD", "K_PASSWORD_GRACE_TIME", 
			"K_PASSWORD_LIFE_TIME", "K_PASSWORD_LOCK_TIME", "K_PASSWORD_MAX_LENGTH", 
			"K_PASSWORD_MIN_DIGITS", "K_PASSWORD_MIN_LENGTH", "K_PASSWORD_MIN_LETTERS", 
			"K_PASSWORD_MIN_LOWERCASE_LETTERS", "K_PASSWORD_MIN_SYMBOLS", "K_PASSWORD_MIN_UPPERCASE_LETTERS", 
			"K_PASSWORD_REUSE_MAX", "K_PASSWORD_REUSE_TIME", "K_PATTERN", "K_PERCENT", 
			"K_PERMANENT", "K_PLACING", "K_PLANNEDCONCURRENCY", "K_POLICY", "K_POOL", 
			"K_PORT", "K_PRECEDING", "K_PREPARE", "K_PREPASS", "K_PRESERVE", "K_PREVIOUS", 
			"K_PRIOR", "K_PRIORITY", "K_PRIVILEGES", "K_PROCEDURAL", "K_PROCEDURE", 
			"K_PROFILE", "K_PROJECTION", "K_PROJECTIONS", "K_PSDATE", "K_QUERY", 
			"K_QUEUETIMEOUT", "K_QUOTE", "K_RANGE", "K_RAW", "K_READ", "K_RECHECK", 
			"K_RECORD", "K_RECOVER", "K_RECURSIVE", "K_REFRESH", "K_REINDEX", "K_REJECTED", 
			"K_REJECTMAX", "K_RELATIVE", "K_RELEASE", "K_REMOVE", "K_RENAME", "K_REORGANIZE", 
			"K_REPEATABLE", "K_REPLACE", "K_RESET", "K_RESOURCE", "K_RESTART", "K_RESTRICT", 
			"K_RESULTS", "K_RETURN", "K_RETURNREJECTED", "K_REVOKE", "K_RLE", "K_ROLE", 
			"K_ROLES", "K_ROLLBACK", "K_ROLLUP", "K_ROWS", "K_RULE", "K_RUNTIMECAP", 
			"K_RUNTIMEPRIORITY", "K_RUNTIMEPRIORITYTHRESHOLD", "K_SAVE", "K_SAVEPOINT", 
			"K_SCROLL", "K_SEARCH_PATH", "K_SECOND", "K_SECONDS", "K_SECURITY", "K_SECURITY_ALGORITHM", 
			"K_SEGMENTED", "K_SEMI", "K_SEMIALL", "K_SEQUENCE", "K_SEQUENCES", "K_SERIALIZABLE", 
			"K_SESSION", "K_SET", "K_SETOF", "K_SETS", "K_SHARE", "K_SHARED", "K_SHOW", 
			"K_SIMPLE", "K_SINGLEINITIATOR", "K_SITE", "K_SITES", "K_SKIP", "K_SOURCE", 
			"K_SPLIT", "K_SSL_CONFIG", "K_STABLE", "K_STANDBY", "K_START", "K_STATEMENT", 
			"K_STATISTICS", "K_STDIN", "K_STDOUT", "K_STEMMER", "K_STORAGE", "K_STREAM", 
			"K_STRENGTH", "K_STRICT", "K_SUBNET", "K_SYSID", "K_SYSTEM", "K_TABLES", 
			"K_TABLESAMPLE", "K_TABLESPACE", "K_TEMP", "K_TEMPLATE", "K_TEMPORARY", 
			"K_TEMPSPACECAP", "K_TERMINATOR", "K_THAN", "K_TIES", "K_TLS", "K_TOAST", 
			"K_TOKENIZER", "K_TOLERANCE", "K_TRANSACTION", "K_TRANSFORM", "K_TRICKLE", 
			"K_TRIGGER", "K_TRUNCATE", "K_TRUSTED", "K_TUNING", "K_TYPE", "K_UDPARAMETER", 
			"K_UNCOMMITTED", "K_UNCOMPRESSED", "K_UNI", "K_UNINDEXED", "K_UNKNOWN", 
			"K_UNLIMITED", "K_UNLISTEN", "K_UNLOCK", "K_UNPACKER", "K_UNSEGMENTED", 
			"K_UPDATE", "K_USAGE", "K_VACUUM", "K_VALIDATE", "K_VALIDATOR", "K_VALINDEX", 
			"K_VALUE", "K_VALUES", "K_VARYING", "K_VERBOSE", "K_VERTICA", "K_VIEW", 
			"K_VOLATILE", "K_WAIT", "K_WEBHDFS_ADDRESS", "K_WEBSERVICE_HOSTNAME", 
			"K_WEBSERVICE_PORT", "K_WITHOUT", "K_WORK", "K_WRITE", "K_YEAR", "K_ZONE", 
			"K_UDPARAMETERS", "K_ALLNODES", "K_PUBLIC", "K_DIRECTORY", "K_ROWGROUPSIZEMB", 
			"K_COMPRESSION", "K_FILESIZEMB", "K_FILEMODE", "K_DIRMODE", "K_ZSTD", 
			"K_ROUTE", "K_ROUTING", "K_ESCAPE_STRING_WARNING", "K_STANDARD_CONFORMING_STRINGS", 
			"K_AUTOCOMMIT", "K_LOCALE", "K_MULTIPLEACTIVERESULTSETS", "K_RESOURCE_POOL", 
			"K_INTERVALSTYLE", "K_PLAIN", "K_UNITS", "K_DATESTYLE", "K_ISO", "K_MDY", 
			"K_POSTGRES", "K_SQL", "K_GERMAN", "K_DMY", "K_TLSMODE", "K_PREFER", 
			"K_INT8", "K_FLOAT8", "K_GEOMETRY", "K_GEOGRAPHY", "K_DATE", "K_ADDRESS", 
			"K_BALANCE", "K_GBYTYPE", "K_HASH", "K_PIPE", "K_SYN_JOIN", "K_ENABLE_WITH_CLAUSE_MATERIALIZATION", 
			"K_EARLY_MATERIALIZATION", "K_CREATETYPE", "K_SYNTACTIC_JOIN", "K_BRANCH", 
			"K_DATATYPE", "K_VERBATIM", "K_IGNORECONST", "K_UTYPE", "K_JTYPE", "K_DISTRIB", 
			"K_PROJS", "K_SKIP_PROJS", "COMMA", "MINUS", "STAR", "PLUS", "DCOLON", 
			"OPEN_PAREN", "CLOSE_PAREN", "DOT", "SEMI", "UNDERSCORE", "AMP_AMP", 
			"AMP_LT", "BANG", "ABS", "BANG_BANG", "BANG_EQUAL", "EQUAL", "EQUAL2", 
			"GT", "GTE", "LT", "LTE", "LT_GT", "SQROOT", "CUBEROOT", "EXP", "MOD", 
			"DIV2", "DIV", "DPIPE", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
			"O_AND", "O_OR", "O_XOR", "O_NOT", "O_SHIFT_LEFT", "O_SHIFT_RIGHT", "IPV4_ADDR", 
			"IPV6_ADDR", "SPACE", "COMMENT", "LINE_COMMENT", "COMMAND", "OPEN_HINT", 
			"CLOSE_HINT", "DOUBLE_QUOTE_STRING", "PARAM", "WORD", "SINGLE_QUOTE_STRING", 
			"FLOAT", "REAL", "DECIMAL", "ANY"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "java-escape"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public VSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public List<TerminalNode> SEMI() { return getTokens(VSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(VSqlParser.SEMI, i);
		}
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(VSqlParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(765);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4507997690658816L) != 0 || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 1157460426045259777L) != 0 || (((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 578712590973140993L) != 0 || (((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 1125900712149025L) != 0 || _la==K_INSERT || _la==K_MERGE || (((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & -8935115199406931967L) != 0 || (((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & 70370891661313L) != 0 || _la==COMMA || _la==OPEN_PAREN) {
						{
						setState(764);
						sqlStatement();
						}
					}

					setState(767);
					match(SEMI);
					}
					} 
				}
				setState(772);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			}
			setState(777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4507997690658816L) != 0 || (((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & 1157460426045259777L) != 0 || (((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & 578712590973140993L) != 0 || (((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & 1125900712149025L) != 0 || _la==K_INSERT || _la==K_MERGE || (((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & -8935115199406931967L) != 0 || (((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & 70370891661313L) != 0 || _la==COMMA || _la==OPEN_PAREN) {
				{
				setState(773);
				sqlStatement();
				setState(775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(774);
					match(SEMI);
					}
				}

				}
			}

			setState(780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(779);
				match(EOF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlStatementContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		try {
			setState(787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(782);
				match(OPEN_PAREN);
				setState(783);
				sqlStatement();
				setState(784);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(786);
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public Alter_access_policy_statementContext alter_access_policy_statement() {
			return getRuleContext(Alter_access_policy_statementContext.class,0);
		}
		public Alter_authentication_statementContext alter_authentication_statement() {
			return getRuleContext(Alter_authentication_statementContext.class,0);
		}
		public Alter_database_drop_statementContext alter_database_drop_statement() {
			return getRuleContext(Alter_database_drop_statementContext.class,0);
		}
		public Alter_fault_group_statementContext alter_fault_group_statement() {
			return getRuleContext(Alter_fault_group_statementContext.class,0);
		}
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() {
			return getRuleContext(Alter_hcatalog_schema_statementContext.class,0);
		}
		public Alter_library_statementContext alter_library_statement() {
			return getRuleContext(Alter_library_statementContext.class,0);
		}
		public Alter_model_statementContext alter_model_statement() {
			return getRuleContext(Alter_model_statementContext.class,0);
		}
		public Alter_network_interface_statementContext alter_network_interface_statement() {
			return getRuleContext(Alter_network_interface_statementContext.class,0);
		}
		public Alter_node_statementContext alter_node_statement() {
			return getRuleContext(Alter_node_statementContext.class,0);
		}
		public Alter_notfifier_statementContext alter_notfifier_statement() {
			return getRuleContext(Alter_notfifier_statementContext.class,0);
		}
		public Alter_projection_statementContext alter_projection_statement() {
			return getRuleContext(Alter_projection_statementContext.class,0);
		}
		public Alter_profile_statementContext alter_profile_statement() {
			return getRuleContext(Alter_profile_statementContext.class,0);
		}
		public Alter_profile_rename_statementContext alter_profile_rename_statement() {
			return getRuleContext(Alter_profile_rename_statementContext.class,0);
		}
		public Alter_resource_pool_statementContext alter_resource_pool_statement() {
			return getRuleContext(Alter_resource_pool_statementContext.class,0);
		}
		public Alter_role_rename_statementContext alter_role_rename_statement() {
			return getRuleContext(Alter_role_rename_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_session_statementContext alter_session_statement() {
			return getRuleContext(Alter_session_statementContext.class,0);
		}
		public Alter_subnet_statementContext alter_subnet_statement() {
			return getRuleContext(Alter_subnet_statementContext.class,0);
		}
		public Alter_table_rename_statementContext alter_table_rename_statement() {
			return getRuleContext(Alter_table_rename_statementContext.class,0);
		}
		public Alter_table_general_statmentContext alter_table_general_statment() {
			return getRuleContext(Alter_table_general_statmentContext.class,0);
		}
		public Alter_user_statementContext alter_user_statement() {
			return getRuleContext(Alter_user_statementContext.class,0);
		}
		public Alter_view_statementContext alter_view_statement() {
			return getRuleContext(Alter_view_statementContext.class,0);
		}
		public Begin_transaction_statementContext begin_transaction_statement() {
			return getRuleContext(Begin_transaction_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Connect_statementContext connect_statement() {
			return getRuleContext(Connect_statementContext.class,0);
		}
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext copy_local_statement() {
			return getRuleContext(Copy_local_statementContext.class,0);
		}
		public Copy_from_vertica_statementContext copy_from_vertica_statement() {
			return getRuleContext(Copy_from_vertica_statementContext.class,0);
		}
		public Create_access_policy_statementContext create_access_policy_statement() {
			return getRuleContext(Create_access_policy_statementContext.class,0);
		}
		public Create_authentication_statementContext create_authentication_statement() {
			return getRuleContext(Create_authentication_statementContext.class,0);
		}
		public Create_branch_statementContext create_branch_statement() {
			return getRuleContext(Create_branch_statementContext.class,0);
		}
		public Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() {
			return getRuleContext(Create_external_table_as_copy_statementContext.class,0);
		}
		public Create_fault_group_statementContext create_fault_group_statement() {
			return getRuleContext(Create_fault_group_statementContext.class,0);
		}
		public Create_flex_table_statementContext create_flex_table_statement() {
			return getRuleContext(Create_flex_table_statementContext.class,0);
		}
		public Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() {
			return getRuleContext(Create_flex_external_table_as_copy_statementContext.class,0);
		}
		public Create_function_statements_statementContext create_function_statements_statement() {
			return getRuleContext(Create_function_statements_statementContext.class,0);
		}
		public Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() {
			return getRuleContext(Create_hcatalog_schema_statementContext.class,0);
		}
		public Create_library_statementContext create_library_statement() {
			return getRuleContext(Create_library_statementContext.class,0);
		}
		public Create_load_balance_group_statementContext create_load_balance_group_statement() {
			return getRuleContext(Create_load_balance_group_statementContext.class,0);
		}
		public Create_local_temporary_view_statementContext create_local_temporary_view_statement() {
			return getRuleContext(Create_local_temporary_view_statementContext.class,0);
		}
		public Create_location_statementContext create_location_statement() {
			return getRuleContext(Create_location_statementContext.class,0);
		}
		public Create_network_address_statementContext create_network_address_statement() {
			return getRuleContext(Create_network_address_statementContext.class,0);
		}
		public Create_network_interface_statementContext create_network_interface_statement() {
			return getRuleContext(Create_network_interface_statementContext.class,0);
		}
		public Create_notifier_statementContext create_notifier_statement() {
			return getRuleContext(Create_notifier_statementContext.class,0);
		}
		public Create_procedure_statementContext create_procedure_statement() {
			return getRuleContext(Create_procedure_statementContext.class,0);
		}
		public Create_profile_statementContext create_profile_statement() {
			return getRuleContext(Create_profile_statementContext.class,0);
		}
		public Create_projection_statementContext create_projection_statement() {
			return getRuleContext(Create_projection_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_statementContext.class,0);
		}
		public Create_projection_udtfs_statementContext create_projection_udtfs_statement() {
			return getRuleContext(Create_projection_udtfs_statementContext.class,0);
		}
		public Create_resource_pool_statementContext create_resource_pool_statement() {
			return getRuleContext(Create_resource_pool_statementContext.class,0);
		}
		public Create_role_statementContext create_role_statement() {
			return getRuleContext(Create_role_statementContext.class,0);
		}
		public Create_routing_rule_statementContext create_routing_rule_statement() {
			return getRuleContext(Create_routing_rule_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Create_subnet_statementContext create_subnet_statement() {
			return getRuleContext(Create_subnet_statementContext.class,0);
		}
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext create_temporary_table_statement() {
			return getRuleContext(Create_temporary_table_statementContext.class,0);
		}
		public Create_text_index_statementContext create_text_index_statement() {
			return getRuleContext(Create_text_index_statementContext.class,0);
		}
		public Create_user_statementContext create_user_statement() {
			return getRuleContext(Create_user_statementContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Directed_query_statements_statementContext directed_query_statements_statement() {
			return getRuleContext(Directed_query_statements_statementContext.class,0);
		}
		public Disconnect_statementContext disconnect_statement() {
			return getRuleContext(Disconnect_statementContext.class,0);
		}
		public Drop_access_policy_statementContext drop_access_policy_statement() {
			return getRuleContext(Drop_access_policy_statementContext.class,0);
		}
		public Drop_aggregate_function_statementContext drop_aggregate_function_statement() {
			return getRuleContext(Drop_aggregate_function_statementContext.class,0);
		}
		public Drop_authentication_statementContext drop_authentication_statement() {
			return getRuleContext(Drop_authentication_statementContext.class,0);
		}
		public Drop_branch_statementContext drop_branch_statement() {
			return getRuleContext(Drop_branch_statementContext.class,0);
		}
		public Drop_fault_group_statementContext drop_fault_group_statement() {
			return getRuleContext(Drop_fault_group_statementContext.class,0);
		}
		public Drop_function_statementContext drop_function_statement() {
			return getRuleContext(Drop_function_statementContext.class,0);
		}
		public Drop_source_statementContext drop_source_statement() {
			return getRuleContext(Drop_source_statementContext.class,0);
		}
		public Drop_filter_statementContext drop_filter_statement() {
			return getRuleContext(Drop_filter_statementContext.class,0);
		}
		public Drop_parser_statementContext drop_parser_statement() {
			return getRuleContext(Drop_parser_statementContext.class,0);
		}
		public Drop_model_statementContext drop_model_statement() {
			return getRuleContext(Drop_model_statementContext.class,0);
		}
		public Drop_library_statementContext drop_library_statement() {
			return getRuleContext(Drop_library_statementContext.class,0);
		}
		public Drop_load_balance_group_statementContext drop_load_balance_group_statement() {
			return getRuleContext(Drop_load_balance_group_statementContext.class,0);
		}
		public Drop_network_address_statementContext drop_network_address_statement() {
			return getRuleContext(Drop_network_address_statementContext.class,0);
		}
		public Drop_network_interface_statementContext drop_network_interface_statement() {
			return getRuleContext(Drop_network_interface_statementContext.class,0);
		}
		public Drop_notifier_statementContext drop_notifier_statement() {
			return getRuleContext(Drop_notifier_statementContext.class,0);
		}
		public Drop_procedure_statementContext drop_procedure_statement() {
			return getRuleContext(Drop_procedure_statementContext.class,0);
		}
		public Drop_profile_statementContext drop_profile_statement() {
			return getRuleContext(Drop_profile_statementContext.class,0);
		}
		public Drop_projection_statementContext drop_projection_statement() {
			return getRuleContext(Drop_projection_statementContext.class,0);
		}
		public Drop_resource_pool_statementContext drop_resource_pool_statement() {
			return getRuleContext(Drop_resource_pool_statementContext.class,0);
		}
		public Drop_role_statementContext drop_role_statement() {
			return getRuleContext(Drop_role_statementContext.class,0);
		}
		public Drop_routing_rule_statementContext drop_routing_rule_statement() {
			return getRuleContext(Drop_routing_rule_statementContext.class,0);
		}
		public Drop_schema_statementContext drop_schema_statement() {
			return getRuleContext(Drop_schema_statementContext.class,0);
		}
		public Drop_sequence_statementContext drop_sequence_statement() {
			return getRuleContext(Drop_sequence_statementContext.class,0);
		}
		public Drop_subnet_statementContext drop_subnet_statement() {
			return getRuleContext(Drop_subnet_statementContext.class,0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Drop_text_index_statementContext drop_text_index_statement() {
			return getRuleContext(Drop_text_index_statementContext.class,0);
		}
		public Drop_transform_function_statementContext drop_transform_function_statement() {
			return getRuleContext(Drop_transform_function_statementContext.class,0);
		}
		public Drop_user_statementContext drop_user_statement() {
			return getRuleContext(Drop_user_statementContext.class,0);
		}
		public Drop_view_statementContext drop_view_statement() {
			return getRuleContext(Drop_view_statementContext.class,0);
		}
		public End_statementContext end_statement() {
			return getRuleContext(End_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Export_to_parquet_statementContext export_to_parquet_statement() {
			return getRuleContext(Export_to_parquet_statementContext.class,0);
		}
		public Export_to_vertica_statementContext export_to_vertica_statement() {
			return getRuleContext(Export_to_vertica_statementContext.class,0);
		}
		public Grant_statements_statementContext grant_statements_statement() {
			return getRuleContext(Grant_statements_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Profile_statementContext profile_statement() {
			return getRuleContext(Profile_statementContext.class,0);
		}
		public Release_savepoint_statementContext release_savepoint_statement() {
			return getRuleContext(Release_savepoint_statementContext.class,0);
		}
		public Revoke_statements_statementContext revoke_statements_statement() {
			return getRuleContext(Revoke_statements_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() {
			return getRuleContext(Rollback_to_savepoint_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public With_statementContext with_statement() {
			return getRuleContext(With_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Set_datestyle_statementContext set_datestyle_statement() {
			return getRuleContext(Set_datestyle_statementContext.class,0);
		}
		public Set_escape_string_warning_statementContext set_escape_string_warning_statement() {
			return getRuleContext(Set_escape_string_warning_statementContext.class,0);
		}
		public Set_intervalstyle_statementContext set_intervalstyle_statement() {
			return getRuleContext(Set_intervalstyle_statementContext.class,0);
		}
		public Set_locale_statementContext set_locale_statement() {
			return getRuleContext(Set_locale_statementContext.class,0);
		}
		public Set_role_statementContext set_role_statement() {
			return getRuleContext(Set_role_statementContext.class,0);
		}
		public Set_search_path_statementContext set_search_path_statement() {
			return getRuleContext(Set_search_path_statementContext.class,0);
		}
		public Set_session_autocommit_statementContext set_session_autocommit_statement() {
			return getRuleContext(Set_session_autocommit_statementContext.class,0);
		}
		public Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() {
			return getRuleContext(Set_session_characteristics_as_transaction_statementContext.class,0);
		}
		public Set_session_graceperiod_statementContext set_session_graceperiod_statement() {
			return getRuleContext(Set_session_graceperiod_statementContext.class,0);
		}
		public Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() {
			return getRuleContext(Set_session_idlesessiontimeout_statementContext.class,0);
		}
		public Set_session_memorycap_statementContext set_session_memorycap_statement() {
			return getRuleContext(Set_session_memorycap_statementContext.class,0);
		}
		public Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() {
			return getRuleContext(Set_session_multipleactiveresultsets_statementContext.class,0);
		}
		public Set_session_resource_pool_statementContext set_session_resource_pool_statement() {
			return getRuleContext(Set_session_resource_pool_statementContext.class,0);
		}
		public Set_session_runtimecap_statementContext set_session_runtimecap_statement() {
			return getRuleContext(Set_session_runtimecap_statementContext.class,0);
		}
		public Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() {
			return getRuleContext(Set_session_tempspacecap_statementContext.class,0);
		}
		public Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() {
			return getRuleContext(Set_standard_conforming_strings_statementContext.class,0);
		}
		public Set_time_zone_statementContext set_time_zone_statement() {
			return getRuleContext(Set_time_zone_statementContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Show_current_statementContext show_current_statement() {
			return getRuleContext(Show_current_statementContext.class,0);
		}
		public Show_database_statementContext show_database_statement() {
			return getRuleContext(Show_database_statementContext.class,0);
		}
		public Show_node_statementContext show_node_statement() {
			return getRuleContext(Show_node_statementContext.class,0);
		}
		public Show_session_statementContext show_session_statement() {
			return getRuleContext(Show_session_statementContext.class,0);
		}
		public Start_transaction_statementContext start_transaction_statement() {
			return getRuleContext(Start_transaction_statementContext.class,0);
		}
		public Truncate_table_statementContext truncate_table_statement() {
			return getRuleContext(Truncate_table_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_statement);
		try {
			setState(924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(789);
				alter_access_policy_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(790);
				alter_authentication_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(791);
				alter_database_drop_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(792);
				alter_fault_group_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(793);
				alter_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(794);
				alter_hcatalog_schema_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(795);
				alter_library_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(796);
				alter_model_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(797);
				alter_network_interface_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(798);
				alter_node_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(799);
				alter_notfifier_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(800);
				alter_projection_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(801);
				alter_profile_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(802);
				alter_profile_rename_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(803);
				alter_resource_pool_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(804);
				alter_role_rename_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(805);
				alter_schema_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(806);
				alter_sequence_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(807);
				alter_session_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(808);
				alter_subnet_statement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(809);
				alter_table_rename_statement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(810);
				alter_table_general_statment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(811);
				alter_user_statement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(812);
				alter_view_statement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(813);
				begin_transaction_statement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(814);
				comment_on_statement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(815);
				commit_statement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(816);
				connect_statement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(817);
				copy_statement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(818);
				copy_local_statement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(819);
				copy_from_vertica_statement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(820);
				create_access_policy_statement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(821);
				create_authentication_statement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(822);
				create_branch_statement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(823);
				create_external_table_as_copy_statement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(824);
				create_fault_group_statement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(825);
				create_flex_table_statement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(826);
				create_flex_external_table_as_copy_statement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(827);
				create_function_statements_statement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(828);
				create_hcatalog_schema_statement();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(829);
				create_library_statement();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(830);
				create_load_balance_group_statement();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(831);
				create_local_temporary_view_statement();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(832);
				create_location_statement();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(833);
				create_network_address_statement();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(834);
				create_network_interface_statement();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(835);
				create_notifier_statement();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(836);
				create_procedure_statement();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(837);
				create_profile_statement();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(838);
				create_projection_statement();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(839);
				create_projection_live_aggregate_projections_statement();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(840);
				create_projection_udtfs_statement();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(841);
				create_resource_pool_statement();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(842);
				create_role_statement();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(843);
				create_routing_rule_statement();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(844);
				create_schema_statement();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(845);
				create_sequence_statement();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(846);
				create_subnet_statement();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(847);
				create_table_statement();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(848);
				create_temporary_table_statement();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(849);
				create_text_index_statement();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(850);
				create_user_statement();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(851);
				create_view_statement();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(852);
				delete_statement();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(853);
				directed_query_statements_statement();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(854);
				disconnect_statement();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(855);
				drop_access_policy_statement();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(856);
				drop_aggregate_function_statement();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(857);
				drop_authentication_statement();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(858);
				drop_branch_statement();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(859);
				drop_fault_group_statement();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(860);
				drop_function_statement();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(861);
				drop_source_statement();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(862);
				drop_filter_statement();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(863);
				drop_parser_statement();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(864);
				drop_model_statement();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(865);
				drop_library_statement();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(866);
				drop_load_balance_group_statement();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(867);
				drop_network_address_statement();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(868);
				drop_network_interface_statement();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(869);
				drop_notifier_statement();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(870);
				drop_procedure_statement();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(871);
				drop_profile_statement();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(872);
				drop_projection_statement();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(873);
				drop_resource_pool_statement();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(874);
				drop_role_statement();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(875);
				drop_routing_rule_statement();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(876);
				drop_schema_statement();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(877);
				drop_sequence_statement();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(878);
				drop_subnet_statement();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(879);
				drop_table_statement();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(880);
				drop_text_index_statement();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(881);
				drop_transform_function_statement();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(882);
				drop_user_statement();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(883);
				drop_view_statement();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(884);
				end_statement();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(885);
				explain_statement();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(886);
				export_to_parquet_statement();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(887);
				export_to_vertica_statement();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(888);
				grant_statements_statement();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(889);
				insert_statement();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(890);
				merge_statement();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(891);
				profile_statement();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(892);
				release_savepoint_statement();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(893);
				revoke_statements_statement();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(894);
				rollback_statement();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(895);
				rollback_to_savepoint_statement();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(896);
				savepoint_statement();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(897);
				with_statement();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(898);
				select_statement();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(899);
				set_datestyle_statement();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(900);
				set_escape_string_warning_statement();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(901);
				set_intervalstyle_statement();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(902);
				set_locale_statement();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(903);
				set_role_statement();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(904);
				set_search_path_statement();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(905);
				set_session_autocommit_statement();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(906);
				set_session_characteristics_as_transaction_statement();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(907);
				set_session_graceperiod_statement();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(908);
				set_session_idlesessiontimeout_statement();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(909);
				set_session_memorycap_statement();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(910);
				set_session_multipleactiveresultsets_statement();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(911);
				set_session_resource_pool_statement();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(912);
				set_session_runtimecap_statement();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(913);
				set_session_tempspacecap_statement();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(914);
				set_standard_conforming_strings_statement();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(915);
				set_time_zone_statement();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(916);
				show_statement();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(917);
				show_current_statement();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(918);
				show_database_statement();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(919);
				show_node_statement();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(920);
				show_session_statement();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(921);
				start_transaction_statement();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(922);
				truncate_table_statement();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(923);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Alter_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_access_policy_statementContext alter_access_policy_statement() throws RecognitionException {
		Alter_access_policy_statementContext _localctx = new Alter_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(926);
			match(K_ALTER);
			setState(927);
			match(K_ACCESS);
			setState(928);
			match(K_POLICY);
			setState(929);
			match(K_ON);
			setState(930);
			tableReference();
			setState(942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				{
				setState(931);
				match(K_FOR);
				setState(932);
				match(K_COLUMN);
				setState(933);
				columnReference();
				setState(935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(934);
					predicates();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(937);
				match(K_FOR);
				setState(938);
				match(K_ROWS);
				setState(940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(939);
					where_clause();
					}
				}

				}
				}
				break;
			}
			setState(949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(944);
				enableOrDisable();
				}
				break;
			case K_COPY:
				{
				{
				setState(945);
				match(K_COPY);
				setState(946);
				match(K_TO);
				setState(947);
				match(K_TABLE);
				setState(948);
				tableReference();
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Alter_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authentication_statementContext alter_authentication_statement() throws RecognitionException {
		Alter_authentication_statementContext _localctx = new Alter_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(K_ALTER);
			setState(952);
			match(K_AUTHENTICATION);
			setState(953);
			auth_method_name();
			setState(973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(954);
				enableOrDisable();
				}
				break;
			case K_HOST:
			case K_LOCAL:
				{
				setState(964);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_LOCAL:
					{
					setState(955);
					match(K_LOCAL);
					}
					break;
				case K_HOST:
					{
					{
					setState(956);
					match(K_HOST);
					setState(961);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO || _la==K_TLS) {
						{
						setState(958);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==K_NO) {
							{
							setState(957);
							match(K_NO);
							}
						}

						setState(960);
						match(K_TLS);
						}
					}

					setState(963);
					address();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
				{
				setState(966);
				rename_clause();
				}
				break;
			case K_METHOD:
				{
				{
				setState(967);
				match(K_METHOD);
				setState(968);
				method();
				}
				}
				break;
			case K_SET:
				{
				{
				setState(969);
				match(K_SET);
				setState(970);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_PRIORITY:
				{
				{
				setState(971);
				match(K_PRIORITY);
				setState(972);
				integerNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_database_drop_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_STANDBY() { return getToken(VSqlParser.K_STANDBY, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_database_drop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_drop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_database_drop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_database_drop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_database_drop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_drop_statementContext alter_database_drop_statement() throws RecognitionException {
		Alter_database_drop_statementContext _localctx = new Alter_database_drop_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_database_drop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(975);
			match(K_ALTER);
			setState(976);
			match(K_DATABASE);
			setState(977);
			dbname();
			setState(997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DROP:
				{
				{
				setState(978);
				match(K_DROP);
				setState(979);
				match(K_ALL);
				setState(980);
				match(K_FAULT);
				setState(981);
				match(K_GROUP);
				}
				}
				break;
			case K_EXPORT:
				{
				{
				setState(982);
				match(K_EXPORT);
				setState(983);
				match(K_ON);
				setState(984);
				subnet();
				}
				}
				break;
			case K_RESET:
				{
				{
				setState(985);
				match(K_RESET);
				setState(986);
				match(K_STANDBY);
				}
				}
				break;
			case K_SET:
				{
				{
				setState(987);
				match(K_SET);
				setState(989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(988);
					match(K_PARAMETER);
					}
					break;
				}
				setState(991);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_CLEAR:
				{
				{
				setState(992);
				match(K_CLEAR);
				setState(994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(993);
					match(K_PARAMETER);
					}
					break;
				}
				setState(996);
				params();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public List<TerminalNode> K_FAULT() { return getTokens(VSqlParser.K_FAULT); }
		public TerminalNode K_FAULT(int i) {
			return getToken(VSqlParser.K_FAULT, i);
		}
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Alter_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fault_group_statementContext alter_fault_group_statement() throws RecognitionException {
		Alter_fault_group_statementContext _localctx = new Alter_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(999);
			match(K_ALTER);
			setState(1000);
			match(K_FAULT);
			setState(1001);
			match(K_GROUP);
			setState(1002);
			faultGroup();
			setState(1018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				{
				setState(1003);
				match(K_ADD);
				setState(1004);
				match(K_NODE);
				setState(1005);
				node();
				}
				}
				break;
			case 2:
				{
				{
				setState(1006);
				match(K_DROP);
				setState(1007);
				match(K_NODE);
				setState(1008);
				node();
				}
				}
				break;
			case 3:
				{
				{
				setState(1009);
				match(K_ADD);
				setState(1010);
				match(K_FAULT);
				setState(1011);
				match(K_GROUP);
				setState(1012);
				value();
				}
				}
				break;
			case 4:
				{
				{
				setState(1013);
				match(K_DROP);
				setState(1014);
				match(K_FAULT);
				setState(1015);
				match(K_GROUP);
				setState(1016);
				value();
				}
				}
				break;
			case 5:
				{
				setState(1017);
				rename_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_function_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1020);
			match(K_ALTER);
			setState(1021);
			match(K_FUNCTION);
			setState(1022);
			functionReference();
			setState(1024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1023);
				argument_list();
				}
			}

			setState(1032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1026);
				owner_clause();
				}
				break;
			case 2:
				{
				setState(1027);
				rename_clause();
				}
				break;
			case 3:
				{
				setState(1028);
				set_schema_clause();
				}
				break;
			case 4:
				{
				{
				setState(1029);
				match(K_SET);
				setState(1030);
				match(K_FENCED);
				setState(1031);
				bool_expression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Alter_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() throws RecognitionException {
		Alter_hcatalog_schema_statementContext _localctx = new Alter_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1034);
			match(K_ALTER);
			setState(1035);
			match(K_HCATALOG);
			setState(1036);
			match(K_SCHEMA);
			setState(1037);
			schema();
			setState(1038);
			match(K_SET);
			setState(1040); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1039);
				hcatalog_schema_param();
				}
				}
				setState(1042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_CUSTOM_PARTITIONS || (((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & 2365L) != 0 || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_library_statementContext extends ParserRuleContext {
		public ValueContext depends;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Alter_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_library_statementContext alter_library_statement() throws RecognitionException {
		Alter_library_statementContext _localctx = new Alter_library_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			match(K_ALTER);
			setState(1045);
			match(K_LIBRARY);
			setState(1046);
			libraryReference();
			setState(1053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1047);
				match(K_DEPENDS);
				setState(1048);
				((Alter_library_statementContext)_localctx).depends = value();
				setState(1051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(1049);
					match(K_LANGUAGE);
					setState(1050);
					lang();
					}
					break;
				}
				}
				break;
			}
			setState(1055);
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_model_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public ModelReferenceContext modelReference() {
			return getRuleContext(ModelReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Alter_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_model_statementContext alter_model_statement() throws RecognitionException {
		Alter_model_statementContext _localctx = new Alter_model_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_model_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057);
			match(K_ALTER);
			setState(1058);
			match(K_MODEL);
			setState(1059);
			modelReference();
			setState(1063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_OWNER:
				{
				setState(1060);
				owner_clause();
				}
				break;
			case K_RENAME:
				{
				setState(1061);
				rename_clause();
				}
				break;
			case K_SET:
				{
				setState(1062);
				set_schema_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_network_interface_statementContext alter_network_interface_statement() throws RecognitionException {
		Alter_network_interface_statementContext _localctx = new Alter_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1065);
			match(K_ALTER);
			setState(1066);
			match(K_NETWORK);
			setState(1067);
			match(K_INTERFACE);
			setState(1068);
			network_interface();
			setState(1069);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_node_statementContext extends ParserRuleContext {
		public NodeContext exportOn;
		public ValueContext nodeType;
		public ValueContext standByNode;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_node_statementContext alter_node_statement() throws RecognitionException {
		Alter_node_statementContext _localctx = new Alter_node_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_node_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1071);
			match(K_ALTER);
			setState(1072);
			match(K_NODE);
			setState(1073);
			node();
			setState(1097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				{
				setState(1074);
				match(K_EXPORT);
				setState(1075);
				match(K_ON);
				setState(1076);
				((Alter_node_statementContext)_localctx).exportOn = node();
				}
				}
				break;
			case 2:
				{
				{
				setState(1078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_IS) {
					{
					setState(1077);
					match(K_IS);
					}
				}

				setState(1080);
				((Alter_node_statementContext)_localctx).nodeType = value();
				}
				}
				break;
			case 3:
				{
				{
				setState(1081);
				match(K_REPLACE);
				setState(1084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(1082);
					match(K_WITH);
					setState(1083);
					((Alter_node_statementContext)_localctx).standByNode = value();
					}
				}

				}
				}
				break;
			case 4:
				{
				setState(1086);
				match(K_RESET);
				}
				break;
			case 5:
				{
				{
				setState(1087);
				match(K_SET);
				setState(1089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1088);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1091);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 6:
				{
				{
				setState(1092);
				match(K_CLEAR);
				setState(1094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(1093);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1096);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_notfifier_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Alter_notfifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_notfifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_notfifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_notfifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_notfifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_notfifier_statementContext alter_notfifier_statement() throws RecognitionException {
		Alter_notfifier_statementContext _localctx = new Alter_notfifier_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_notfifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1099);
			match(K_ALTER);
			setState(1100);
			match(K_NOTIFIER);
			setState(1101);
			notifier();
			setState(1105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || (((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 2251799847239683L) != 0) {
				{
				{
				setState(1102);
				notifier_params();
				}
				}
				setState(1107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notifier_paramsContext extends ParserRuleContext {
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXPAYLOAD() { return getToken(VSqlParser.K_MAXPAYLOAD, 0); }
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public Notifier_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notifier_paramsContext notifier_params() throws RecognitionException {
		Notifier_paramsContext _localctx = new Notifier_paramsContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_notifier_params);
		int _la;
		try {
			setState(1124);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CHECK:
			case K_NO:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO) {
					{
					setState(1108);
					match(K_NO);
					}
				}

				setState(1111);
				match(K_CHECK);
				setState(1112);
				match(K_COMMITTED);
				}
				}
				break;
			case K_DISABLE:
			case K_ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1113);
				enableOrDisable();
				{
				setState(1114);
				match(K_IDENTIFIED);
				setState(1115);
				match(K_BY);
				setState(1116);
				value();
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1118);
				match(K_MAXMEMORYSIZE);
				setState(1119);
				value();
				}
				}
				break;
			case K_MAXPAYLOAD:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1120);
				match(K_MAXPAYLOAD);
				setState(1121);
				value();
				}
				}
				break;
			case K_PARAMETERS:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1122);
				match(K_PARAMETERS);
				setState(1123);
				value();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_projection_statementContext alter_projection_statement() throws RecognitionException {
		Alter_projection_statementContext _localctx = new Alter_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1126);
			match(K_ALTER);
			setState(1127);
			match(K_PROJECTION);
			setState(1128);
			projectionReference();
			setState(1129);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Alter_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_statementContext alter_profile_statement() throws RecognitionException {
		Alter_profile_statementContext _localctx = new Alter_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1131);
			match(K_ALTER);
			setState(1132);
			match(K_PROFILE);
			setState(1133);
			profile();
			setState(1134);
			match(K_LIMIT);
			setState(1136); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1135);
				password_parameter();
				}
				}
				setState(1138); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || (((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & 4095L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_profile_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_profile_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_rename_statementContext alter_profile_rename_statement() throws RecognitionException {
		Alter_profile_rename_statementContext _localctx = new Alter_profile_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_profile_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1140);
			match(K_ALTER);
			setState(1141);
			match(K_PROFILE);
			setState(1142);
			profile();
			setState(1143);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Alter_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_pool_statementContext alter_resource_pool_statement() throws RecognitionException {
		Alter_resource_pool_statementContext _localctx = new Alter_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			match(K_ALTER);
			setState(1146);
			match(K_RESOURCE);
			setState(1147);
			match(K_POOL);
			setState(1148);
			resourcePool();
			setState(1150); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1149);
				resource_pool_param();
				}
				}
				setState(1152); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 25165825L) != 0 || _la==K_EXECUTIONPARALLELISM || (((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & 553L) != 0 || (((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 126100789566899201L) != 0 || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Resource_pool_paramContext extends ParserRuleContext {
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_CPUAFFINITYMODE() { return getToken(VSqlParser.K_CPUAFFINITYMODE, 0); }
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_EXCLUSIVE() { return getToken(VSqlParser.K_EXCLUSIVE, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_CPUAFFINITYSET() { return getToken(VSqlParser.K_CPUAFFINITYSET, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode K_EXECUTIONPARALLELISM() { return getToken(VSqlParser.K_EXECUTIONPARALLELISM, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_MAXCONCURRENCY() { return getToken(VSqlParser.K_MAXCONCURRENCY, 0); }
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXQUERYMEMORYSIZE() { return getToken(VSqlParser.K_MAXQUERYMEMORYSIZE, 0); }
		public TerminalNode K_MEMORYSIZE() { return getToken(VSqlParser.K_MEMORYSIZE, 0); }
		public TerminalNode K_PLANNEDCONCURRENCY() { return getToken(VSqlParser.K_PLANNEDCONCURRENCY, 0); }
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOLD() { return getToken(VSqlParser.K_HOLD, 0); }
		public TerminalNode K_QUEUETIMEOUT() { return getToken(VSqlParser.K_QUEUETIMEOUT, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_RUNTIMEPRIORITY() { return getToken(VSqlParser.K_RUNTIMEPRIORITY, 0); }
		public TerminalNode K_HIGH() { return getToken(VSqlParser.K_HIGH, 0); }
		public TerminalNode K_MEDIUM() { return getToken(VSqlParser.K_MEDIUM, 0); }
		public TerminalNode K_LOW() { return getToken(VSqlParser.K_LOW, 0); }
		public TerminalNode K_RUNTIMEPRIORITYTHRESHOLD() { return getToken(VSqlParser.K_RUNTIMEPRIORITYTHRESHOLD, 0); }
		public TerminalNode K_SINGLEINITIATOR() { return getToken(VSqlParser.K_SINGLEINITIATOR, 0); }
		public Resource_pool_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_pool_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResource_pool_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResource_pool_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResource_pool_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resource_pool_paramContext resource_pool_param() throws RecognitionException {
		Resource_pool_paramContext _localctx = new Resource_pool_paramContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_resource_pool_param);
		int _la;
		try {
			setState(1219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1154);
				match(K_CASCADE);
				setState(1155);
				match(K_TO);
				setState(1156);
				value();
				}
				}
				break;
			case K_CPUAFFINITYMODE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1157);
				match(K_CPUAFFINITYMODE);
				setState(1158);
				_la = _input.LA(1);
				if ( !(_la==K_ANY || _la==K_EXCLUSIVE || _la==K_SHARED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_CPUAFFINITYSET:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1159);
				match(K_CPUAFFINITYSET);
				setState(1170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1160);
					match(K_NONE);
					}
					break;
				case 2:
					{
					{
					setState(1161);
					value();
					setState(1162);
					match(COMMA);
					setState(1163);
					value();
					}
					}
					break;
				case 3:
					{
					{
					setState(1165);
					value();
					setState(1166);
					match(MINUS);
					setState(1167);
					value();
					}
					}
					break;
				case 4:
					{
					setState(1169);
					number();
					}
					break;
				}
				}
				}
				break;
			case K_EXECUTIONPARALLELISM:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1172);
				match(K_EXECUTIONPARALLELISM);
				setState(1175);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1173);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1174);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXCONCURRENCY:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1177);
				match(K_MAXCONCURRENCY);
				setState(1180);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1178);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1179);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1182);
				match(K_MAXMEMORYSIZE);
				setState(1185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1183);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1184);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXQUERYMEMORYSIZE:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1187);
				match(K_MAXQUERYMEMORYSIZE);
				setState(1190);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1188);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1189);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MEMORYSIZE:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1192);
				match(K_MEMORYSIZE);
				setState(1193);
				number();
				}
				}
				break;
			case K_PLANNEDCONCURRENCY:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1194);
				match(K_PLANNEDCONCURRENCY);
				setState(1197);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1195);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1196);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_PRIORITY:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1199);
				match(K_PRIORITY);
				setState(1202);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(1200);
					integerNumber();
					}
					break;
				case K_HOLD:
					{
					setState(1201);
					match(K_HOLD);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_QUEUETIMEOUT:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1204);
				match(K_QUEUETIMEOUT);
				setState(1207);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1205);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1206);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_RUNTIMECAP:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1209);
				match(K_RUNTIMECAP);
				setState(1212);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case FLOAT:
				case REAL:
				case DECIMAL:
				case ANY:
					{
					setState(1210);
					value();
					}
					break;
				case K_NONE:
					{
					setState(1211);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITY:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1214);
				match(K_RUNTIMEPRIORITY);
				setState(1215);
				_la = _input.LA(1);
				if ( !((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & 576531121047601153L) != 0) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITYTHRESHOLD:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1216);
				match(K_RUNTIMEPRIORITYTHRESHOLD);
				setState(1217);
				number();
				}
				}
				break;
			case K_SINGLEINITIATOR:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1218);
				match(K_SINGLEINITIATOR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_role_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_role_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_role_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_role_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_role_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_rename_statementContext alter_role_rename_statement() throws RecognitionException {
		Alter_role_rename_statementContext _localctx = new Alter_role_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_role_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			match(K_ALTER);
			setState(1222);
			match(K_ROLE);
			setState(1223);
			role();
			setState(1224);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			match(K_ALTER);
			setState(1227);
			match(K_SCHEMA);
			setState(1249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				{
				setState(1228);
				schemaReference();
				setState(1237);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1229);
					match(K_DEFAULT);
					setState(1230);
					schema_privileges_clause();
					}
					}
					break;
				case K_OWNER:
					{
					{
					setState(1231);
					match(K_OWNER);
					setState(1232);
					match(K_TO);
					setState(1233);
					owner();
					setState(1235);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_CASCADE) {
						{
						setState(1234);
						match(K_CASCADE);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1239);
				schemaReference();
				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1240);
					match(COMMA);
					setState(1241);
					schemaReference();
					}
					}
					setState(1246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1247);
				rename_clause();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Sequence_paramsContext sequence_params() {
			return getRuleContext(Sequence_paramsContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(K_ALTER);
			setState(1252);
			match(K_SEQUENCE);
			setState(1253);
			sequenceReference();
			{
			setState(1260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case K_CACHE:
			case K_INCREMENT:
			case K_MAXVALUE:
			case K_MINVALUE:
			case K_NO:
			case K_RESTART:
			case CLOSE_PAREN:
			case SEMI:
				{
				setState(1254);
				sequence_params();
				}
				break;
			case K_OWNER:
			case K_RENAME:
			case K_SET:
				{
				setState(1258);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_RENAME:
					{
					setState(1255);
					rename_clause();
					}
					break;
				case K_SET:
					{
					setState(1256);
					set_schema_clause();
					}
					break;
				case K_OWNER:
					{
					setState(1257);
					owner_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sequence_paramsContext extends ParserRuleContext {
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Sequence_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_paramsContext sequence_params() throws RecognitionException {
		Sequence_paramsContext _localctx = new Sequence_paramsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_sequence_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(1262);
				match(K_INCREMENT);
				setState(1263);
				match(K_BY);
				setState(1264);
				match(DECIMAL);
				}
			}

			setState(1271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				{
				setState(1267);
				match(K_MINVALUE);
				setState(1268);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1269);
				match(K_NO);
				setState(1270);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				{
				setState(1273);
				match(K_MAXVALUE);
				setState(1274);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1275);
				match(K_NO);
				setState(1276);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(1282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(1279);
				match(K_RESTART);
				setState(1280);
				match(K_WITH);
				setState(1281);
				match(DECIMAL);
				}
			}

			setState(1294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(1284);
				match(K_CACHE);
				setState(1285);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1286);
				match(K_NO);
				setState(1287);
				match(K_CACHE);
				}
				setState(1292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(1289);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(1290);
					match(K_NO);
					setState(1291);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_session_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETER() { return getToken(VSqlParser.K_UDPARAMETER, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public Alter_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_session_statementContext alter_session_statement() throws RecognitionException {
		Alter_session_statementContext _localctx = new Alter_session_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_session_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296);
			match(K_ALTER);
			setState(1297);
			match(K_SESSION);
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				{
				setState(1298);
				match(K_SET);
				setState(1300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1299);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1302);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 2:
				{
				{
				setState(1303);
				match(K_CLEAR);
				setState(1305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1304);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1307);
				params();
				}
				}
				break;
			case 3:
				{
				{
				setState(1308);
				match(K_SET);
				setState(1309);
				match(K_UDPARAMETER);
				setState(1312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FOR) {
					{
					setState(1310);
					match(K_FOR);
					setState(1311);
					library();
					}
				}

				setState(1314);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 4:
				{
				{
				setState(1315);
				match(K_CLEAR);
				setState(1316);
				match(K_UDPARAMETER);
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FOR) {
					{
					setState(1317);
					match(K_FOR);
					setState(1318);
					library();
					}
				}

				setState(1321);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_subnet_statementContext alter_subnet_statement() throws RecognitionException {
		Alter_subnet_statementContext _localctx = new Alter_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(K_ALTER);
			setState(1325);
			match(K_SUBNET);
			setState(1326);
			subnet();
			setState(1327);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_table_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_rename_statementContext alter_table_rename_statement() throws RecognitionException {
		Alter_table_rename_statementContext _localctx = new Alter_table_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_table_rename_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1329);
			match(K_ALTER);
			setState(1330);
			match(K_TABLE);
			setState(1331);
			tableReference();
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1332);
				match(COMMA);
				setState(1333);
				tableReference();
				}
				}
				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1339);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_general_statmentContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<Alter_table_itemContext> alter_table_item() {
			return getRuleContexts(Alter_table_itemContext.class);
		}
		public Alter_table_itemContext alter_table_item(int i) {
			return getRuleContext(Alter_table_itemContext.class,i);
		}
		public Alter_table_general_statmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_general_statment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_general_statment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_general_statment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_general_statment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_general_statmentContext alter_table_general_statment() throws RecognitionException {
		Alter_table_general_statmentContext _localctx = new Alter_table_general_statmentContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_table_general_statment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(K_ALTER);
			setState(1342);
			match(K_TABLE);
			setState(1343);
			tableReference();
			setState(1344);
			alter_table_item();
			setState(1348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_ALL || _la==K_ADD || _la==K_ALTER || (((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & 274878038017L) != 0 || _la==K_INCLUDE || _la==K_MATERIALIZE || (((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & 4035225266123964481L) != 0 || _la==K_SET) {
				{
				{
				setState(1345);
				alter_table_item();
				}
				}
				setState(1350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_itemContext extends ParserRuleContext {
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_TYPE() { return getToken(VSqlParser.K_TYPE, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_FORCE() { return getToken(VSqlParser.K_FORCE, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_REORGANIZE() { return getToken(VSqlParser.K_REORGANIZE, 0); }
		public TerminalNode K_REMOVE() { return getToken(VSqlParser.K_REMOVE, 0); }
		public TerminalNode K_PARTITIONING() { return getToken(VSqlParser.K_PARTITIONING, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Alter_table_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_itemContext alter_table_item() throws RecognitionException {
		Alter_table_itemContext _localctx = new Alter_table_itemContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_table_item);
		int _la;
		try {
			setState(1474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1351);
				match(K_ADD);
				setState(1352);
				match(K_COLUMN);
				setState(1354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1353);
					ifNotExistsClause();
					}
					break;
				}
				setState(1356);
				columnReference();
				setState(1357);
				dataTypes();
				{
				{
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CONSTRAINT) {
					{
					setState(1358);
					match(K_CONSTRAINT);
					setState(1360);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						setState(1359);
						id();
						}
						break;
					}
					}
				}

				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NOT || _la==K_NULL) {
					{
					setState(1364);
					nullOrNotNull();
					}
				}

				setState(1369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT) {
					{
					setState(1367);
					match(K_DEFAULT);
					setState(1368);
					expression();
					}
				}

				}
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCODING) {
					{
					setState(1371);
					encoding_clause();
					}
				}

				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PROJECTIONS) {
					{
					setState(1374);
					match(K_PROJECTIONS);
					setState(1375);
					match(OPEN_PAREN);
					setState(1376);
					projectionReference();
					setState(1381);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1377);
						match(COMMA);
						setState(1378);
						projectionReference();
						}
						}
						setState(1383);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1384);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1388);
				match(K_ADD);
				setState(1389);
				table_constraint();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1390);
				match(K_ALTER);
				setState(1391);
				match(K_COLUMN);
				setState(1392);
				columnReference();
				setState(1418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					{
					setState(1393);
					match(K_SET);
					setState(1394);
					match(K_DEFAULT);
					setState(1395);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(1396);
					match(K_DROP);
					setState(1397);
					match(K_DEFAULT);
					}
					}
					break;
				case 3:
					{
					{
					setState(1398);
					match(K_SET);
					setState(1399);
					match(K_USING);
					setState(1400);
					expression();
					}
					}
					break;
				case 4:
					{
					{
					setState(1401);
					match(K_DROP);
					setState(1402);
					match(K_SET);
					setState(1403);
					match(K_USING);
					}
					}
					break;
				case 5:
					{
					{
					setState(1404);
					match(K_SET);
					setState(1405);
					match(K_DEFAULT);
					setState(1406);
					match(K_USING);
					setState(1407);
					expression();
					}
					}
					break;
				case 6:
					{
					{
					setState(1408);
					match(K_DROP);
					setState(1409);
					match(K_DEFAULT);
					setState(1410);
					match(K_USING);
					setState(1411);
					expression();
					}
					}
					break;
				case 7:
					{
					{
					setState(1412);
					match(K_SET);
					setState(1413);
					nullOrNotNull();
					}
					}
					break;
				case 8:
					{
					{
					setState(1414);
					match(K_SET);
					setState(1415);
					match(K_DATA);
					setState(1416);
					match(K_TYPE);
					setState(1417);
					dataTypes();
					}
					}
					break;
				}
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1420);
				match(K_ALTER);
				setState(1421);
				match(K_CONSTRAINT);
				setState(1422);
				constraint();
				setState(1423);
				enabledOrDisabled();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1425);
				match(K_DROP);
				setState(1426);
				match(K_CONSTRAINT);
				setState(1427);
				constraint();
				setState(1429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1428);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1431);
				match(K_DROP);
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_COLUMN) {
					{
					setState(1432);
					match(K_COLUMN);
					}
				}

				setState(1437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(1435);
					match(K_IF);
					setState(1436);
					match(K_EXISTS);
					}
					break;
				}
				setState(1439);
				columnReference();
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1440);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1443);
				match(K_FORCE);
				setState(1444);
				match(K_OUTER);
				setState(1445);
				number();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1446);
				schema_privileges_clause();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1447);
				match(K_OWNER);
				setState(1448);
				match(K_TO);
				setState(1449);
				owner();
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1450);
				partition_clause();
				setState(1452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(1451);
					match(K_REORGANIZE);
					}
					break;
				}
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1454);
				match(K_REMOVE);
				setState(1455);
				match(K_PARTITIONING);
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1456);
				match(K_RENAME);
				setState(1458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_COLUMN) {
					{
					setState(1457);
					match(K_COLUMN);
					}
				}

				setState(1460);
				column();
				setState(1461);
				match(K_TO);
				setState(1462);
				column();
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1464);
				match(K_REORGANIZE);
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1465);
				match(K_SET);
				setState(1466);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(1467);
				expression();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1468);
				match(K_SET);
				setState(1469);
				match(K_SCHEMA);
				setState(1470);
				schema();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				{
				setState(1471);
				match(K_SET);
				setState(1472);
				match(K_STORAGE);
				setState(1473);
				load_method();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Alter_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_statementContext alter_user_statement() throws RecognitionException {
		Alter_user_statementContext _localctx = new Alter_user_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1476);
			match(K_ALTER);
			setState(1477);
			match(K_USER);
			setState(1478);
			user();
			setState(1480); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1479);
				user_params();
				}
				}
				setState(1482); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_DEFAULT || _la==K_ACCOUNT || (((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & 10485761L) != 0 || (((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & 288230376151711809L) != 0 || (((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & 1197368231854081L) != 0 || _la==K_TEMPSPACECAP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class User_paramsContext extends ParserRuleContext {
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ACCOUNT() { return getToken(VSqlParser.K_ACCOUNT, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public TerminalNode K_MAXCONNECTIONS() { return getToken(VSqlParser.K_MAXCONNECTIONS, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public TerminalNode K_EXPIRE() { return getToken(VSqlParser.K_EXPIRE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_SECURITY_ALGORITHM() { return getToken(VSqlParser.K_SECURITY_ALGORITHM, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public TerminalNode K_LOCK() { return getToken(VSqlParser.K_LOCK, 0); }
		public TerminalNode K_UNLOCK() { return getToken(VSqlParser.K_UNLOCK, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public User_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_paramsContext user_params() throws RecognitionException {
		User_paramsContext _localctx = new User_paramsContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_user_params);
		int _la;
		try {
			setState(1581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1511);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1484);
					match(K_DEFAULT);
					setState(1485);
					match(K_ROLE);
					setState(1506);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
					case 1:
						{
						setState(1486);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1487);
						role();
						setState(1492);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1488);
							match(COMMA);
							setState(1489);
							role();
							}
							}
							setState(1494);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case 3:
						{
						setState(1495);
						match(K_ALL);
						}
						break;
					case 4:
						{
						{
						setState(1496);
						match(K_ALL);
						setState(1497);
						match(K_EXCEPT);
						setState(1498);
						role();
						setState(1503);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1499);
							match(COMMA);
							setState(1500);
							role();
							}
							}
							setState(1505);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_RENAME:
					{
					{
					setState(1508);
					match(K_RENAME);
					setState(1509);
					match(K_TO);
					setState(1510);
					value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_ACCOUNT:
			case K_GRACEPERIOD:
			case K_IDENTIFIED:
			case K_IDLESESSIONTIMEOUT:
			case K_MAXCONNECTIONS:
			case K_MEMORYCAP:
			case K_PASSWORD:
			case K_PROFILE:
			case K_RESOURCE:
			case K_RUNTIMECAP:
			case K_SEARCH_PATH:
			case K_SECURITY_ALGORITHM:
			case K_TEMPSPACECAP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1579);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ACCOUNT:
					{
					{
					setState(1513);
					match(K_ACCOUNT);
					setState(1514);
					_la = _input.LA(1);
					if ( !(_la==K_LOCK || _la==K_UNLOCK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				case K_GRACEPERIOD:
					{
					{
					setState(1515);
					match(K_GRACEPERIOD);
					setState(1518);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1516);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1517);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_IDENTIFIED:
					{
					{
					setState(1520);
					match(K_IDENTIFIED);
					setState(1521);
					match(K_BY);
					setState(1522);
					string();
					setState(1525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_REPLACE) {
						{
						setState(1523);
						match(K_REPLACE);
						setState(1524);
						string();
						}
					}

					}
					}
					break;
				case K_IDLESESSIONTIMEOUT:
					{
					{
					setState(1527);
					match(K_IDLESESSIONTIMEOUT);
					setState(1530);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1528);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1529);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_MAXCONNECTIONS:
					{
					{
					setState(1532);
					match(K_MAXCONNECTIONS);
					setState(1538);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1533);
						match(K_NONE);
						}
						break;
					case FLOAT:
					case REAL:
					case DECIMAL:
						{
						{
						setState(1534);
						number();
						setState(1535);
						match(K_ON);
						setState(1536);
						_la = _input.LA(1);
						if ( !(_la==K_DATABASE || _la==K_NODE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_MEMORYCAP:
					{
					{
					setState(1540);
					match(K_MEMORYCAP);
					setState(1543);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1541);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1542);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_PASSWORD:
					{
					{
					setState(1545);
					match(K_PASSWORD);
					setState(1546);
					match(K_EXPIRE);
					}
					}
					break;
				case K_PROFILE:
					{
					{
					setState(1547);
					match(K_PROFILE);
					setState(1550);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_DEFAULT:
						{
						setState(1548);
						match(K_DEFAULT);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1549);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_RESOURCE:
					{
					{
					setState(1552);
					match(K_RESOURCE);
					setState(1553);
					match(K_POOL);
					setState(1554);
					resourcePool();
					}
					}
					break;
				case K_RUNTIMECAP:
					{
					{
					setState(1555);
					match(K_RUNTIMECAP);
					setState(1558);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1556);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1557);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_SEARCH_PATH:
					{
					{
					setState(1560);
					match(K_SEARCH_PATH);
					setState(1570);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
					case 1:
						{
						setState(1561);
						match(K_DEFAULT);
						}
						break;
					case 2:
						{
						{
						setState(1562);
						schema();
						setState(1567);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1563);
							match(COMMA);
							setState(1564);
							schema();
							}
							}
							setState(1569);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_SECURITY_ALGORITHM:
					{
					{
					setState(1572);
					match(K_SECURITY_ALGORITHM);
					setState(1573);
					string();
					}
					}
					break;
				case K_TEMPSPACECAP:
					{
					{
					setState(1574);
					match(K_TEMPSPACECAP);
					setState(1577);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1575);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1576);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_view_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_view_statementContext alter_view_statement() throws RecognitionException {
		Alter_view_statementContext _localctx = new Alter_view_statementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_view_statement);
		int _la;
		try {
			setState(1605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1583);
				match(K_ALTER);
				setState(1584);
				match(K_VIEW);
				setState(1585);
				viewReference();
				setState(1593);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_OWNER:
					{
					{
					setState(1586);
					match(K_OWNER);
					setState(1587);
					match(K_TO);
					setState(1588);
					owner();
					}
					}
					break;
				case K_SET:
					{
					{
					setState(1589);
					match(K_SET);
					setState(1590);
					match(K_SCHEMA);
					setState(1591);
					schema();
					}
					}
					break;
				case K_ALL:
				case K_EXCLUDE:
				case K_INCLUDE:
				case K_MATERIALIZE:
					{
					setState(1592);
					schema_privileges_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1595);
					match(COMMA);
					setState(1596);
					viewReference();
					}
					}
					setState(1601);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1602);
				match(K_RENAME);
				setState(1603);
				match(K_TO);
				setState(1604);
				values();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Todo_statementContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Todo_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTodo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTodo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTodo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_statementContext todo_statement() throws RecognitionException {
		Todo_statementContext _localctx = new Todo_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_todo_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1608); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1607);
				id();
				}
				}
				setState(1610); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Begin_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Begin_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBegin_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBegin_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBegin_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_transaction_statementContext begin_transaction_statement() throws RecognitionException {
		Begin_transaction_statementContext _localctx = new Begin_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_begin_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			match(K_BEGIN);
			setState(1613);
			_la = _input.LA(1);
			if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1614);
			match(K_ISOLATION);
			setState(1615);
			match(K_LEVEL);
			setState(1616);
			isolationLevel();
			setState(1617);
			transactionMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_statementContext extends ParserRuleContext {
		public Comment_on_column_statementContext comment_on_column_statement() {
			return getRuleContext(Comment_on_column_statementContext.class,0);
		}
		public Comment_on_constraint_statementContext comment_on_constraint_statement() {
			return getRuleContext(Comment_on_constraint_statementContext.class,0);
		}
		public Comment_on_function_statementContext comment_on_function_statement() {
			return getRuleContext(Comment_on_function_statementContext.class,0);
		}
		public Comment_on_transform_function_statementContext comment_on_transform_function_statement() {
			return getRuleContext(Comment_on_transform_function_statementContext.class,0);
		}
		public Comment_on_library_statementContext comment_on_library_statement() {
			return getRuleContext(Comment_on_library_statementContext.class,0);
		}
		public Comment_on_node_statementContext comment_on_node_statement() {
			return getRuleContext(Comment_on_node_statementContext.class,0);
		}
		public Comment_on_schema_statementContext comment_on_schema_statement() {
			return getRuleContext(Comment_on_schema_statementContext.class,0);
		}
		public Comment_on_sequence_statementContext comment_on_sequence_statement() {
			return getRuleContext(Comment_on_sequence_statementContext.class,0);
		}
		public Comment_on_table_statementContext comment_on_table_statement() {
			return getRuleContext(Comment_on_table_statementContext.class,0);
		}
		public Comment_on_view_statementContext comment_on_view_statement() {
			return getRuleContext(Comment_on_view_statementContext.class,0);
		}
		public Comment_on_projection_statementContext comment_on_projection_statement() {
			return getRuleContext(Comment_on_projection_statementContext.class,0);
		}
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_comment_on_statement);
		try {
			setState(1630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1619);
				comment_on_column_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1620);
				comment_on_constraint_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1621);
				comment_on_function_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1622);
				comment_on_transform_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1623);
				comment_on_library_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1624);
				comment_on_node_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1625);
				comment_on_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1626);
				comment_on_sequence_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1627);
				comment_on_table_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1628);
				comment_on_view_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1629);
				comment_on_projection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_column_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_column_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_column_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_column_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_column_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_column_statementContext comment_on_column_statement() throws RecognitionException {
		Comment_on_column_statementContext _localctx = new Comment_on_column_statementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_comment_on_column_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(K_COMMENT);
			setState(1633);
			match(K_ON);
			setState(1634);
			match(K_COLUMN);
			setState(1635);
			projectionReference();
			setState(1636);
			match(DOT);
			setState(1637);
			column();
			setState(1638);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_constraint_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_constraint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_constraint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_constraint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_constraint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_constraint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_constraint_statementContext comment_on_constraint_statement() throws RecognitionException {
		Comment_on_constraint_statementContext _localctx = new Comment_on_constraint_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_comment_on_constraint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(K_COMMENT);
			setState(1641);
			match(K_ON);
			setState(1642);
			match(K_CONSTRAINT);
			setState(1643);
			constraint();
			setState(1644);
			match(K_ON);
			setState(1645);
			tableReference();
			setState(1646);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_function_statementContext comment_on_function_statement() throws RecognitionException {
		Comment_on_function_statementContext _localctx = new Comment_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_comment_on_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1648);
			match(K_COMMENT);
			setState(1649);
			match(K_ON);
			setState(1650);
			match(K_FUNCTION);
			setState(1651);
			functionReference();
			setState(1652);
			argument_list();
			setState(1653);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_transform_function_statementContext comment_on_transform_function_statement() throws RecognitionException {
		Comment_on_transform_function_statementContext _localctx = new Comment_on_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_comment_on_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655);
			match(K_COMMENT);
			setState(1656);
			match(K_ON);
			setState(1657);
			match(K_TRANSFORM);
			setState(1658);
			match(K_FUNCTION);
			setState(1659);
			functionReference();
			setState(1660);
			argument_list();
			setState(1661);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_library_statementContext comment_on_library_statement() throws RecognitionException {
		Comment_on_library_statementContext _localctx = new Comment_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_comment_on_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1663);
			match(K_COMMENT);
			setState(1664);
			match(K_ON);
			setState(1665);
			match(K_FUNCTION);
			setState(1666);
			libraryReference();
			setState(1667);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_node_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_node_statementContext comment_on_node_statement() throws RecognitionException {
		Comment_on_node_statementContext _localctx = new Comment_on_node_statementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_comment_on_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			match(K_COMMENT);
			setState(1670);
			match(K_ON);
			setState(1671);
			match(K_NODE);
			setState(1672);
			node();
			setState(1673);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_schema_statementContext comment_on_schema_statement() throws RecognitionException {
		Comment_on_schema_statementContext _localctx = new Comment_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_comment_on_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1675);
			match(K_COMMENT);
			setState(1676);
			match(K_ON);
			setState(1677);
			match(K_SCHEMA);
			setState(1678);
			schemaReference();
			setState(1679);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_sequence_statementContext comment_on_sequence_statement() throws RecognitionException {
		Comment_on_sequence_statementContext _localctx = new Comment_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_comment_on_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1681);
			match(K_COMMENT);
			setState(1682);
			match(K_ON);
			setState(1683);
			match(K_SEQUENCE);
			setState(1684);
			sequenceReference();
			setState(1685);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_table_statementContext comment_on_table_statement() throws RecognitionException {
		Comment_on_table_statementContext _localctx = new Comment_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_comment_on_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			match(K_COMMENT);
			setState(1688);
			match(K_ON);
			setState(1689);
			match(K_TABLE);
			setState(1690);
			tableReference();
			setState(1691);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_view_statementContext comment_on_view_statement() throws RecognitionException {
		Comment_on_view_statementContext _localctx = new Comment_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_comment_on_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1693);
			match(K_COMMENT);
			setState(1694);
			match(K_ON);
			setState(1695);
			match(K_VIEW);
			setState(1696);
			viewReference();
			setState(1697);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_on_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_projection_statementContext comment_on_projection_statement() throws RecognitionException {
		Comment_on_projection_statementContext _localctx = new Comment_on_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_comment_on_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			match(K_COMMENT);
			setState(1700);
			match(K_ON);
			setState(1701);
			match(K_PROJECTION);
			setState(1702);
			projectionReference();
			setState(1703);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_valueContext extends ParserRuleContext {
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public Comment_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_valueContext comment_value() throws RecognitionException {
		Comment_valueContext _localctx = new Comment_valueContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_comment_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(K_IS);
			setState(1708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(1706);
				value();
				}
				break;
			case K_NULL:
				{
				setState(1707);
				match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			match(K_COMMIT);
			setState(1712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(1711);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Connect_statementContext extends ParserRuleContext {
		public TerminalNode K_CONNECT() { return getToken(VSqlParser.K_CONNECT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public PortContext port() {
			return getRuleContext(PortContext.class,0);
		}
		public TerminalNode K_TLSMODE() { return getToken(VSqlParser.K_TLSMODE, 0); }
		public TerminalNode K_PREFER() { return getToken(VSqlParser.K_PREFER, 0); }
		public Connect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connect_statementContext connect_statement() throws RecognitionException {
		Connect_statementContext _localctx = new Connect_statementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_connect_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			match(K_CONNECT);
			setState(1715);
			match(K_TO);
			setState(1716);
			match(K_VERTICA);
			setState(1717);
			dbname();
			setState(1718);
			match(K_USER);
			setState(1719);
			user();
			setState(1720);
			match(K_PASSWORD);
			setState(1721);
			value();
			setState(1722);
			match(K_ON);
			setState(1723);
			host();
			setState(1724);
			match(COMMA);
			setState(1725);
			port();
			setState(1728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TLSMODE) {
				{
				setState(1726);
				match(K_TLSMODE);
				setState(1727);
				match(K_PREFER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_columnContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Copy_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_columnContext copy_column() throws RecognitionException {
		Copy_columnContext _localctx = new Copy_columnContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_copy_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1730);
			column();
			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(1731);
				match(K_AS);
				setState(1732);
				expression();
				}
			}

			}
			setState(1740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1735);
				match(K_DELIMITER);
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1736);
					match(K_AS);
					}
				}

				setState(1739);
				value();
				}
			}

			setState(1747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1742);
				match(K_ENCLOSED);
				setState(1744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1743);
					match(K_BY);
					}
					break;
				}
				setState(1746);
				value();
				}
			}

			setState(1750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1749);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1759);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1752);
				match(K_ESCAPE);
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1753);
					match(K_AS);
					}
				}

				setState(1756);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1757);
				match(K_NO);
				setState(1758);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1761);
				match(K_FILLER);
				setState(1762);
				dataTypes();
				}
			}

			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1765);
				match(K_FORMAT);
				setState(1766);
				value();
				}
			}

			setState(1774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1769);
				match(K_NULL);
				setState(1771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1770);
					match(K_AS);
					}
				}

				setState(1773);
				value();
				}
			}

			setState(1778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1776);
				match(K_TRIM);
				setState(1777);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_optionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_optionContext column_option() throws RecognitionException {
		Column_optionContext _localctx = new Column_optionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_column_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			column();
			setState(1786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1781);
				match(K_DELIMITER);
				setState(1783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1782);
					match(K_AS);
					}
				}

				setState(1785);
				value();
				}
			}

			setState(1793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1788);
				match(K_ENCLOSED);
				setState(1790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1789);
					match(K_BY);
					}
					break;
				}
				setState(1792);
				value();
				}
			}

			setState(1796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1795);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1798);
				match(K_ESCAPE);
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1799);
					match(K_AS);
					}
				}

				setState(1802);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1803);
				match(K_NO);
				setState(1804);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1807);
				match(K_FILLER);
				setState(1808);
				dataTypes();
				}
			}

			setState(1813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1811);
				match(K_FORMAT);
				setState(1812);
				value();
				}
			}

			setState(1820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1815);
				match(K_NULL);
				setState(1817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1816);
					match(K_AS);
					}
				}

				setState(1819);
				value();
				}
			}

			setState(1824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1822);
				match(K_TRIM);
				setState(1823);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public PathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathContext path() throws RecognitionException {
		PathContext _localctx = new PathContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_path);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1826);
			id();
			setState(1831);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1827);
					match(COMMA);
					setState(1828);
					id();
					}
					} 
				}
				setState(1833);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1834);
				match(K_ON);
				setState(1849);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					setState(1835);
					node();
					}
					break;
				case OPEN_PAREN:
					{
					{
					setState(1836);
					match(OPEN_PAREN);
					setState(1837);
					node();
					setState(1842);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1838);
						match(COMMA);
						setState(1839);
						node();
						}
						}
						setState(1844);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1845);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_ANY:
					{
					{
					setState(1847);
					match(K_ANY);
					setState(1848);
					match(K_NODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1853);
				inputFormat();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Local_pathContext extends ParserRuleContext {
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public Local_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLocal_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLocal_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLocal_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_pathContext local_path() throws RecognitionException {
		Local_pathContext _localctx = new Local_pathContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_path);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			match(K_LOCAL);
			setState(1859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1857);
				match(K_STDIN);
				}
				break;
			case 2:
				{
				setState(1858);
				id();
				}
				break;
			}
			setState(1862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(1861);
				inputFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InputFormatContext extends ParserRuleContext {
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_ZSTD() { return getToken(VSqlParser.K_ZSTD, 0); }
		public InputFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inputFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInputFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInputFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInputFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InputFormatContext inputFormat() throws RecognitionException {
		InputFormatContext _localctx = new InputFormatContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_inputFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Vertica_sourceContext extends ParserRuleContext {
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Vertica_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vertica_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterVertica_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitVertica_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitVertica_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vertica_sourceContext vertica_source() throws RecognitionException {
		Vertica_sourceContext _localctx = new Vertica_sourceContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_vertica_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1866);
			match(K_VERTICA);
			setState(1867);
			tableReference();
			setState(1868);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Udl_clauseContext extends ParserRuleContext {
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceReferenceContext sourceReference() {
			return getRuleContext(SourceReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public Udl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udl_clauseContext udl_clause() throws RecognitionException {
		Udl_clauseContext _localctx = new Udl_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_udl_clause);
		int _la;
		try {
			setState(1894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1870);
				match(K_SOURCE);
				setState(1871);
				sourceReference();
				setState(1872);
				match(OPEN_PAREN);
				setState(1874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(1873);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1876);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_FILTER:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1878);
				match(K_FILTER);
				setState(1879);
				filterReference();
				setState(1880);
				match(OPEN_PAREN);
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(1881);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1884);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_PARSER:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1886);
				match(K_PARSER);
				setState(1887);
				parserReference();
				setState(1888);
				match(OPEN_PAREN);
				setState(1890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(1889);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1892);
				match(CLOSE_PAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_statement_optionContext extends ParserRuleContext {
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_SKIP() { return getToken(VSqlParser.K_SKIP, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public Copy_statement_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_statement_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_statement_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_statement_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_statement_optionContext copy_statement_option() throws RecognitionException {
		Copy_statement_optionContext _localctx = new Copy_statement_optionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_copy_statement_option);
		int _la;
		try {
			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1896);
				match(K_DELIMITER);
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1897);
					match(K_AS);
					}
				}

				setState(1900);
				string();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1901);
				match(K_TRAILING);
				setState(1902);
				match(K_NULLCOLS);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1903);
				match(K_NULL);
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1904);
					match(K_AS);
					}
				}

				setState(1907);
				string();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1915);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ESCAPE:
					{
					{
					setState(1908);
					match(K_ESCAPE);
					setState(1910);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(1909);
						match(K_AS);
						}
					}

					setState(1912);
					string();
					}
					}
					break;
				case K_NO:
					{
					{
					setState(1913);
					match(K_NO);
					setState(1914);
					match(K_ESCAPE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1917);
				match(K_ENCLOSED);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BY) {
					{
					setState(1918);
					match(K_BY);
					}
				}

				setState(1921);
				string();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1922);
				match(K_RECORD);
				setState(1923);
				match(K_TERMINATOR);
				setState(1924);
				string();
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1925);
				match(K_SKIP);
				setState(1926);
				number();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1927);
				match(K_SKIP);
				setState(1928);
				match(K_BYTES);
				setState(1929);
				number();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1930);
				match(K_TRIM);
				setState(1931);
				value();
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1932);
				match(K_REJECTMAX);
				setState(1933);
				number();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1934);
				match(K_REJECTED);
				setState(1935);
				match(K_DATA);
				setState(1947);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DOUBLE_QUOTE_STRING:
				case SINGLE_QUOTE_STRING:
					{
					{
					setState(1936);
					string();
					setState(1941);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_ON) {
						{
						{
						setState(1937);
						match(K_ON);
						setState(1938);
						node();
						}
						}
						setState(1943);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case K_AS:
					{
					{
					setState(1944);
					match(K_AS);
					setState(1945);
					match(K_TABLE);
					setState(1946);
					id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1949);
				match(K_EXCEPTIONS);
				setState(1950);
				string();
				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==K_ON) {
					{
					{
					setState(1951);
					match(K_ON);
					setState(1952);
					node();
					}
					}
					setState(1957);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1958);
				match(K_ENFORCELENGTH);
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1959);
				match(K_ERROR);
				setState(1960);
				match(K_TOLERANCE);
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1961);
				match(K_ABORT);
				setState(1962);
				match(K_ON);
				setState(1963);
				match(K_ERROR);
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				{
				setState(1965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_STORAGE) {
					{
					setState(1964);
					match(K_STORAGE);
					}
				}

				setState(1967);
				load_method();
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				{
				setState(1968);
				match(K_STREAM);
				setState(1969);
				match(K_NAME);
				setState(1970);
				value();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				{
				setState(1971);
				match(K_NO);
				setState(1972);
				match(K_COMMIT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_statementContext extends ParserRuleContext {
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<Copy_statement_optionContext> copy_statement_option() {
			return getRuleContexts(Copy_statement_optionContext.class);
		}
		public Copy_statement_optionContext copy_statement_option(int i) {
			return getRuleContext(Copy_statement_optionContext.class,i);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public Vertica_sourceContext vertica_source() {
			return getRuleContext(Vertica_sourceContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<Udl_clauseContext> udl_clause() {
			return getRuleContexts(Udl_clauseContext.class);
		}
		public Udl_clauseContext udl_clause(int i) {
			return getRuleContext(Udl_clauseContext.class,i);
		}
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public List<Local_pathContext> local_path() {
			return getRuleContexts(Local_pathContext.class);
		}
		public Local_pathContext local_path(int i) {
			return getRuleContext(Local_pathContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			match(K_COPY);
			setState(1976);
			tableReference();
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1977);
				match(OPEN_PAREN);
				setState(1978);
				copy_column();
				setState(1983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1979);
					match(COMMA);
					setState(1980);
					copy_column();
					}
					}
					setState(1985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1986);
				match(CLOSE_PAREN);
				}
			}

			setState(2003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(1990);
				match(K_COLUMN);
				setState(1991);
				match(K_OPTION);
				{
				setState(1992);
				match(OPEN_PAREN);
				setState(1993);
				column_option();
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1994);
					match(COMMA);
					setState(1995);
					column_option();
					}
					}
					setState(2000);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2001);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(2005);
				match(K_FROM);
				setState(2028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					{
					setState(2006);
					match(K_STDIN);
					setState(2008);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						setState(2007);
						value();
						}
						break;
					}
					}
					}
					break;
				case 2:
					{
					{
					setState(2010);
					path();
					setState(2015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2011);
						match(COMMA);
						setState(2012);
						path();
						}
						}
						setState(2017);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 3:
					{
					{
					setState(2018);
					local_path();
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2019);
						match(COMMA);
						setState(2020);
						local_path();
						}
						}
						setState(2025);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 4:
					{
					setState(2026);
					vertica_source();
					}
					break;
				case 5:
					{
					setState(2027);
					tableReference();
					}
					break;
				}
				}
			}

			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE) {
				{
				setState(2033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2032);
					match(K_WITH);
					}
				}

				setState(2036); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2035);
					udl_clause();
					}
					}
					setState(2038); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE );
				}
			}

			setState(2045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & -9223196114994331647L) != 0 || _la==K_AUTO || (((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & 37731958913L) != 0 || _la==K_NO || (((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & 144115188075855969L) != 0 || (((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & 8388611L) != 0) {
				{
				{
				setState(2042);
				copy_statement_option();
				}
				}
				setState(2047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_local_statementContext extends ParserRuleContext {
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_local_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_local_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_local_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_local_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_local_statementContext copy_local_statement() throws RecognitionException {
		Copy_local_statementContext _localctx = new Copy_local_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_copy_local_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2048);
			copy_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_from_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public Copy_from_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_from_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_from_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_from_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_from_vertica_statementContext copy_from_vertica_statement() throws RecognitionException {
		Copy_from_vertica_statementContext _localctx = new Copy_from_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_copy_from_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			match(K_COPY);
			setState(2051);
			tableReference();
			setState(2053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 319L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
				{
				setState(2052);
				columns();
				}
			}

			setState(2055);
			match(K_FROM);
			setState(2056);
			match(K_VERTICA);
			setState(2057);
			tableReference();
			setState(2059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2058);
				columns();
				}
				break;
			}
			setState(2062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(2061);
				load_method();
				}
			}

			setState(2067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STREAM) {
				{
				setState(2064);
				match(K_STREAM);
				setState(2065);
				match(K_NAME);
				setState(2066);
				id();
				}
			}

			setState(2071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(2069);
				match(K_NO);
				setState(2070);
				match(K_COMMIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public Create_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_access_policy_statementContext create_access_policy_statement() throws RecognitionException {
		Create_access_policy_statementContext _localctx = new Create_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_create_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(K_CREATE);
			setState(2074);
			match(K_ACCESS);
			setState(2075);
			match(K_POLICY);
			setState(2076);
			match(K_ON);
			setState(2077);
			tableReference();
			setState(2087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				{
				setState(2078);
				match(K_FOR);
				setState(2079);
				match(K_COLUMN);
				setState(2080);
				column();
				setState(2081);
				expressions();
				}
				}
				break;
			case 2:
				{
				{
				setState(2083);
				match(K_FOR);
				setState(2084);
				match(K_ROWS);
				setState(2085);
				match(K_WHERE);
				setState(2086);
				expressions();
				}
				}
				break;
			}
			setState(2089);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public List<Auth_method_nameContext> auth_method_name() {
			return getRuleContexts(Auth_method_nameContext.class);
		}
		public Auth_method_nameContext auth_method_name(int i) {
			return getRuleContext(Auth_method_nameContext.class,i);
		}
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Create_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_authentication_statementContext create_authentication_statement() throws RecognitionException {
		Create_authentication_statementContext _localctx = new Create_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2091);
			match(K_CREATE);
			setState(2092);
			match(K_AUTHENTICATION);
			setState(2093);
			auth_method_name();
			setState(2094);
			match(K_METHOD);
			setState(2095);
			auth_method_name();
			setState(2105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LOCAL:
				{
				setState(2096);
				match(K_LOCAL);
				}
				break;
			case K_HOST:
				{
				{
				setState(2097);
				match(K_HOST);
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO || _la==K_TLS) {
					{
					setState(2099);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO) {
						{
						setState(2098);
						match(K_NO);
						}
					}

					setState(2101);
					match(K_TLS);
					}
				}

				setState(2104);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_IMMUTABLE() { return getToken(VSqlParser.K_IMMUTABLE, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_branch_statementContext create_branch_statement() throws RecognitionException {
		Create_branch_statementContext _localctx = new Create_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			match(K_CREATE);
			setState(2108);
			match(K_DATA);
			setState(2109);
			match(K_IMMUTABLE);
			setState(2110);
			match(K_BRANCH);
			{
			setState(2111);
			branch_identifier();
			}
			setState(2116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2112);
				match(COMMA);
				setState(2113);
				branch_identifier();
				}
				}
				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIKE) {
				{
				setState(2119);
				match(K_LIKE);
				setState(2120);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public TerminalNode K_NATIVE() { return getToken(VSqlParser.K_NATIVE, 0); }
		public TerminalNode K_ORC() { return getToken(VSqlParser.K_ORC, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public List<TerminalNode> K_ERROR() { return getTokens(VSqlParser.K_ERROR); }
		public TerminalNode K_ERROR(int i) {
			return getToken(VSqlParser.K_ERROR, i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public TerminalNode K_FIXEDWIDTH() { return getToken(VSqlParser.K_FIXEDWIDTH, 0); }
		public TerminalNode K_COLSIZES() { return getToken(VSqlParser.K_COLSIZES, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public List<TerminalNode> K_WITH() { return getTokens(VSqlParser.K_WITH); }
		public TerminalNode K_WITH(int i) {
			return getToken(VSqlParser.K_WITH, i);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public Create_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() throws RecognitionException {
		Create_external_table_as_copy_statementContext _localctx = new Create_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2123);
			match(K_CREATE);
			setState(2124);
			match(K_EXTERNAL);
			setState(2125);
			match(K_TABLE);
			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2126);
				match(K_IF);
				setState(2127);
				match(K_NOT);
				setState(2128);
				match(K_EXISTS);
				}
				break;
			}
			setState(2131);
			tableReference();
			setState(2132);
			column_definition_list();
			setState(2134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2133);
				schema_privileges_clause();
				}
			}

			setState(2136);
			match(K_AS);
			setState(2137);
			match(K_COPY);
			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2138);
				match(OPEN_PAREN);
				setState(2139);
				copy_column();
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2140);
					match(COMMA);
					setState(2141);
					copy_column();
					}
					}
					setState(2146);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2147);
				match(CLOSE_PAREN);
				}
			}

			setState(2164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(2151);
				match(K_COLUMN);
				setState(2152);
				match(K_OPTION);
				{
				setState(2153);
				match(OPEN_PAREN);
				setState(2154);
				column_option();
				setState(2159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2155);
					match(COMMA);
					setState(2156);
					column_option();
					}
					}
					setState(2161);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2162);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2166);
			match(K_FROM);
			setState(2180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2167);
				path();
				}
				break;
			case 2:
				{
				}
				break;
			case 3:
				{
				{
				setState(2170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2169);
					match(K_WITH);
					}
				}

				setState(2172);
				match(K_SOURCE);
				setState(2173);
				source();
				setState(2178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2174);
					match(OPEN_PAREN);
					setState(2175);
					commaSeparatedKeyValuePairs();
					setState(2176);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			}
			setState(2183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(2182);
				inputFormat();
				}
			}

			setState(2205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2185);
				match(K_NATIVE);
				}
				break;
			case 2:
				{
				{
				setState(2186);
				match(K_FIXEDWIDTH);
				setState(2187);
				match(K_COLSIZES);
				setState(2188);
				match(OPEN_PAREN);
				setState(2189);
				integerNumber();
				setState(2190);
				match(CLOSE_PAREN);
				setState(2198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2191);
					match(COMMA);
					setState(2192);
					match(OPEN_PAREN);
					setState(2193);
					integerNumber();
					setState(2194);
					match(CLOSE_PAREN);
					}
					}
					setState(2200);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2201);
				match(K_NATIVE);
				setState(2202);
				match(K_VARCHAR);
				}
				}
				break;
			case 4:
				{
				setState(2203);
				match(K_ORC);
				}
				break;
			case 5:
				{
				setState(2204);
				match(K_PARQUET);
				}
				break;
			}
			setState(2210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ABORT) {
				{
				setState(2207);
				match(K_ABORT);
				setState(2208);
				match(K_ON);
				setState(2209);
				match(K_ERROR);
				}
			}

			{
			setState(2212);
			match(K_DELIMITER);
			setState(2214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2213);
				match(K_AS);
				}
			}

			setState(2216);
			singleChar();
			}
			setState(2224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(2218);
				match(K_ENCLOSED);
				setState(2219);
				match(K_BY);
				setState(2220);
				singleChar();
				{
				setState(2221);
				match(K_AND);
				setState(2222);
				singleChar();
				}
				}
			}

			setState(2227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(2226);
				match(K_ENFORCELENGTH);
				}
			}

			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ERROR) {
				{
				setState(2229);
				match(K_ERROR);
				setState(2230);
				match(K_TOLERANCE);
				}
			}

			setState(2238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(2233);
				match(K_ESCAPE);
				setState(2234);
				match(K_AS);
				setState(2235);
				singleChar();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(2236);
				match(K_NO);
				setState(2237);
				match(K_ESCAPE);
				}
				}
				break;
			case EOF:
			case K_NULL:
			case K_TRAILING:
			case K_TRIM:
			case K_WITH:
			case K_EXCEPTIONS:
			case K_FILTER:
			case K_PARSER:
			case K_RECORD:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_SKIP:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCEPTIONS) {
				{
				setState(2240);
				match(K_EXCEPTIONS);
				setState(2241);
				path();
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2242);
					match(K_ON);
					setState(2243);
					node();
					}
				}

				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2246);
					match(COMMA);
					{
					setState(2247);
					match(K_ON);
					setState(2248);
					node();
					}
					}
					}
					setState(2253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2256);
					match(K_WITH);
					}
				}

				setState(2259);
				match(K_FILTER);
				setState(2260);
				filterReference();
				{
				setState(2261);
				match(OPEN_PAREN);
				setState(2263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(2262);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2265);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(2269);
				match(K_NULL);
				setState(2271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(2270);
					match(K_AS);
					}
				}

				setState(2273);
				string();
				}
			}

			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_PARSER) {
				{
				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2276);
					match(K_WITH);
					}
				}

				setState(2279);
				match(K_PARSER);
				setState(2280);
				parserReference();
				{
				setState(2281);
				match(OPEN_PAREN);
				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(2282);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2285);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RECORD) {
				{
				setState(2289);
				match(K_RECORD);
				setState(2290);
				match(K_TERMINATOR);
				setState(2291);
				string();
				}
			}

			setState(2309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTED) {
				{
				setState(2294);
				match(K_REJECTED);
				setState(2295);
				match(K_DATA);
				setState(2296);
				path();
				setState(2299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2297);
					match(K_ON);
					setState(2298);
					node();
					}
				}

				setState(2306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2301);
					match(COMMA);
					{
					setState(2302);
					match(K_ON);
					setState(2303);
					node();
					}
					}
					}
					setState(2308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTMAX) {
				{
				setState(2311);
				match(K_REJECTMAX);
				setState(2312);
				integerNumber();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2315);
				match(K_SKIP);
				setState(2316);
				integerNumber();
				}
				break;
			}
			setState(2322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SKIP) {
				{
				setState(2319);
				match(K_SKIP);
				setState(2320);
				match(K_BYTES);
				setState(2321);
				integerNumber();
				}
			}

			setState(2326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRAILING) {
				{
				setState(2324);
				match(K_TRAILING);
				setState(2325);
				match(K_NULLCOLS);
				}
			}

			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(2328);
				match(K_TRIM);
				setState(2329);
				singleChar();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fault_group_statementContext create_fault_group_statement() throws RecognitionException {
		Create_fault_group_statementContext _localctx = new Create_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_create_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			match(K_CREATE);
			setState(2333);
			match(K_FAULT);
			setState(2334);
			match(K_GROUP);
			setState(2335);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_flex_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Create_flex_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_table_statementContext create_flex_table_statement() throws RecognitionException {
		Create_flex_table_statementContext _localctx = new Create_flex_table_statementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_flex_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			match(K_CREATE);
			setState(2338);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2339);
			match(K_TABLE);
			setState(2343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2340);
				match(K_IF);
				setState(2341);
				match(K_NOT);
				setState(2342);
				match(K_EXISTS);
				}
				break;
			}
			setState(2345);
			tableReference();
			setState(2348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2346);
				column_definition_list();
				}
				break;
			case 2:
				{
				setState(2347);
				column_name_list();
				}
				break;
			}
			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2350);
				schema_privileges_clause();
				}
			}

			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2353);
				orderby_clause();
				}
			}

			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(2356);
				encodedBy_clause();
				}
			}

			setState(2360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2359);
				segmentation_clause();
				}
			}

			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2362);
				ksafe_clause();
				}
			}

			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(2365);
				partition_clause();
				}
			}

			setState(2370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2368);
				match(K_AS);
				setState(2369);
				select_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_flex_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<CompressionTypeContext> compressionType() {
			return getRuleContexts(CompressionTypeContext.class);
		}
		public CompressionTypeContext compressionType(int i) {
			return getRuleContext(CompressionTypeContext.class,i);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<TerminalNode> K_EXCEPTIONS() { return getTokens(VSqlParser.K_EXCEPTIONS); }
		public TerminalNode K_EXCEPTIONS(int i) {
			return getToken(VSqlParser.K_EXCEPTIONS, i);
		}
		public List<TerminalNode> K_REJECTED() { return getTokens(VSqlParser.K_REJECTED); }
		public TerminalNode K_REJECTED(int i) {
			return getToken(VSqlParser.K_REJECTED, i);
		}
		public List<TerminalNode> K_DATA() { return getTokens(VSqlParser.K_DATA); }
		public TerminalNode K_DATA(int i) {
			return getToken(VSqlParser.K_DATA, i);
		}
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Create_flex_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() throws RecognitionException {
		Create_flex_external_table_as_copy_statementContext _localctx = new Create_flex_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_flex_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(K_CREATE);
			setState(2373);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2374);
			match(K_EXTERNAL);
			setState(2375);
			match(K_TABLE);
			setState(2377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2376);
				ifNotExistsClause();
				}
				break;
			}
			setState(2379);
			tableReference();
			setState(2380);
			column_definition_list();
			setState(2382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2381);
				schema_privileges_clause();
				}
			}

			setState(2384);
			match(K_AS);
			setState(2385);
			match(K_COPY);
			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2386);
				match(OPEN_PAREN);
				setState(2387);
				copy_column();
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2388);
					match(COMMA);
					setState(2389);
					copy_column();
					}
					}
					setState(2394);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2395);
				match(CLOSE_PAREN);
				}
			}

			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(2399);
				match(K_FROM);
				setState(2400);
				path();
				setState(2409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) {
					{
					setState(2401);
					compressionType();
					setState(2406);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2402);
						match(COMMA);
						setState(2403);
						compressionType();
						}
						}
						setState(2408);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2411);
					match(K_WITH);
					}
				}

				setState(2420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SOURCE) {
					{
					setState(2414);
					match(K_SOURCE);
					setState(2415);
					source();
					setState(2416);
					match(OPEN_PAREN);
					setState(2417);
					commaSeparatedKeyValuePairs();
					setState(2418);
					match(CLOSE_PAREN);
					}
				}

				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FILTER) {
					{
					setState(2422);
					match(K_FILTER);
					setState(2423);
					filter();
					setState(2424);
					match(OPEN_PAREN);
					setState(2425);
					commaSeparatedKeyValuePairs();
					setState(2426);
					match(CLOSE_PAREN);
					}
				}

				setState(2434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PARSER) {
					{
					setState(2430);
					match(K_PARSER);
					setState(2431);
					parserName();
					setState(2432);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DELIMITER) {
					{
					setState(2436);
					match(K_DELIMITER);
					setState(2438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2437);
						match(K_AS);
						}
					}

					setState(2440);
					singleChar();
					}
				}

				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRAILING) {
					{
					setState(2443);
					match(K_TRAILING);
					setState(2444);
					match(K_NULLCOLS);
					}
				}

				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NULL) {
					{
					setState(2447);
					match(K_NULL);
					setState(2449);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2448);
						match(K_AS);
						}
					}

					setState(2451);
					string();
					}
				}

				setState(2461);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ESCAPE:
					{
					{
					setState(2454);
					match(K_ESCAPE);
					setState(2456);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2455);
						match(K_AS);
						}
					}

					setState(2458);
					singleChar();
					}
					}
					break;
				case K_NO:
					{
					{
					setState(2459);
					match(K_NO);
					setState(2460);
					match(K_ESCAPE);
					}
					}
					break;
				case EOF:
				case K_TRIM:
				case K_ABORT:
				case K_ENCLOSED:
				case K_ENFORCELENGTH:
				case K_EXCEPTIONS:
				case K_RECORD:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_SKIP:
				case CLOSE_PAREN:
				case SEMI:
					break;
				default:
					break;
				}
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCLOSED) {
					{
					setState(2463);
					match(K_ENCLOSED);
					setState(2465);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_BY) {
						{
						setState(2464);
						match(K_BY);
						}
					}

					setState(2467);
					singleChar();
					}
				}

				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_RECORD) {
					{
					setState(2470);
					match(K_RECORD);
					setState(2471);
					match(K_TERMINATOR);
					setState(2472);
					string();
					}
				}

				setState(2477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2475);
					match(K_SKIP);
					setState(2476);
					integerNumber();
					}
					break;
				}
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SKIP) {
					{
					setState(2479);
					match(K_SKIP);
					setState(2480);
					match(K_BYTES);
					setState(2481);
					integerNumber();
					}
				}

				setState(2486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRIM) {
					{
					setState(2484);
					match(K_TRIM);
					setState(2485);
					singleChar();
					}
				}

				setState(2490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTMAX) {
					{
					setState(2488);
					match(K_REJECTMAX);
					setState(2489);
					integerNumber();
					}
				}

				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_EXCEPTIONS) {
					{
					setState(2492);
					match(K_EXCEPTIONS);
					setState(2493);
					string();
					{
					setState(2494);
					match(K_ON);
					setState(2495);
					node();
					}
					{
					setState(2497);
					match(COMMA);
					setState(2505);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_EXCEPTIONS) {
						{
						{
						setState(2498);
						match(K_EXCEPTIONS);
						setState(2499);
						string();
						{
						setState(2500);
						match(K_ON);
						setState(2501);
						node();
						}
						}
						}
						setState(2507);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTED) {
					{
					setState(2510);
					match(K_REJECTED);
					setState(2511);
					match(K_DATA);
					setState(2512);
					string();
					{
					setState(2513);
					match(K_ON);
					setState(2514);
					node();
					}
					{
					setState(2516);
					match(COMMA);
					setState(2525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_REJECTED) {
						{
						{
						setState(2517);
						match(K_REJECTED);
						setState(2518);
						match(K_DATA);
						setState(2519);
						string();
						{
						setState(2520);
						match(K_ON);
						setState(2521);
						node();
						}
						}
						}
						setState(2527);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENFORCELENGTH) {
					{
					setState(2530);
					match(K_ENFORCELENGTH);
					}
				}

				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ABORT) {
					{
					setState(2533);
					match(K_ABORT);
					setState(2534);
					match(K_ON);
					setState(2535);
					match(K_ERROR);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_function_statements_statementContext extends ParserRuleContext {
		public Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() {
			return getRuleContext(Create_or_replace_aggregate_function_statementContext.class,0);
		}
		public Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() {
			return getRuleContext(Create_or_replace_analytic_function_statementContext.class,0);
		}
		public Create_or_replace_filter_statementContext create_or_replace_filter_statement() {
			return getRuleContext(Create_or_replace_filter_statementContext.class,0);
		}
		public Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() {
			return getRuleContext(Create_or_replace_sql_function_statementContext.class,0);
		}
		public Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() {
			return getRuleContext(Create_or_replace_udf_function_statementContext.class,0);
		}
		public Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() {
			return getRuleContext(Create_or_replace_parser_function_statementContext.class,0);
		}
		public Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() {
			return getRuleContext(Create_or_replace_source_function_statementContext.class,0);
		}
		public Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() {
			return getRuleContext(Create_or_replace_transform_function_statementContext.class,0);
		}
		public Create_function_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_function_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_function_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_function_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_statements_statementContext create_function_statements_statement() throws RecognitionException {
		Create_function_statements_statementContext _localctx = new Create_function_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_function_statements_statement);
		try {
			setState(2548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2540);
				create_or_replace_aggregate_function_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2541);
				create_or_replace_analytic_function_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2542);
				create_or_replace_filter_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2543);
				create_or_replace_sql_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2544);
				create_or_replace_udf_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2545);
				create_or_replace_parser_function_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2546);
				create_or_replace_source_function_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2547);
				create_or_replace_transform_function_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() throws RecognitionException {
		Create_or_replace_transform_function_statementContext _localctx = new Create_or_replace_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_or_replace_transform_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			match(K_CREATE);
			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2551);
				match(K_OR);
				setState(2552);
				match(K_REPLACE);
				}
			}

			setState(2555);
			match(K_TRANSFORM);
			setState(2556);
			match(K_FUNCTION);
			setState(2557);
			function();
			setState(2558);
			match(K_AS);
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2559);
				match(K_LANGUAGE);
				setState(2560);
				lang();
				}
			}

			setState(2563);
			match(K_NAME);
			setState(2564);
			id();
			setState(2565);
			match(K_LIBRARY);
			setState(2566);
			library();
			setState(2570);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2567);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2568);
				match(K_NOT);
				setState(2569);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_source_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_source_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_source_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_source_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_source_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_source_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() throws RecognitionException {
		Create_or_replace_source_function_statementContext _localctx = new Create_or_replace_source_function_statementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_or_replace_source_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(K_CREATE);
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2573);
				match(K_OR);
				setState(2574);
				match(K_REPLACE);
				}
			}

			setState(2577);
			match(K_SOURCE);
			setState(2578);
			functionReference();
			setState(2579);
			match(K_AS);
			setState(2580);
			match(K_LANGUAGE);
			setState(2581);
			lang();
			setState(2582);
			match(K_NAME);
			setState(2583);
			id();
			setState(2584);
			match(K_LIBRARY);
			setState(2585);
			library();
			setState(2589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2586);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2587);
				match(K_NOT);
				setState(2588);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_parser_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_parser_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_parser_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_parser_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() throws RecognitionException {
		Create_or_replace_parser_function_statementContext _localctx = new Create_or_replace_parser_function_statementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_or_replace_parser_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			match(K_CREATE);
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2592);
				match(K_OR);
				setState(2593);
				match(K_REPLACE);
				}
			}

			setState(2596);
			match(K_PARSER);
			setState(2597);
			functionReference();
			setState(2598);
			match(K_AS);
			setState(2601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2599);
				match(K_LANGUAGE);
				setState(2600);
				lang();
				}
			}

			setState(2603);
			match(K_NAME);
			setState(2604);
			id();
			setState(2605);
			match(K_LIBRARY);
			setState(2606);
			library();
			setState(2610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2607);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2608);
				match(K_NOT);
				setState(2609);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_udf_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_udf_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_udf_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_udf_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() throws RecognitionException {
		Create_or_replace_udf_function_statementContext _localctx = new Create_or_replace_udf_function_statementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_or_replace_udf_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(K_CREATE);
			setState(2615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2613);
				match(K_OR);
				setState(2614);
				match(K_REPLACE);
				}
			}

			setState(2617);
			match(K_FUNCTION);
			setState(2618);
			functionReference();
			setState(2619);
			match(K_AS);
			setState(2622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2620);
				match(K_LANGUAGE);
				setState(2621);
				lang();
				}
			}

			setState(2624);
			match(K_NAME);
			setState(2625);
			id();
			setState(2626);
			match(K_LIBRARY);
			setState(2627);
			library();
			setState(2631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2628);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2629);
				match(K_NOT);
				setState(2630);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_sql_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ExpreDefininitionContext expreDefininition() {
			return getRuleContext(ExpreDefininitionContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public Create_or_replace_sql_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_sql_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_sql_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() throws RecognitionException {
		Create_or_replace_sql_function_statementContext _localctx = new Create_or_replace_sql_function_statementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_or_replace_sql_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(K_CREATE);
			setState(2636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2634);
				match(K_OR);
				setState(2635);
				match(K_REPLACE);
				}
			}

			setState(2638);
			match(K_FUNCTION);
			setState(2639);
			functionReference();
			setState(2640);
			argument_list();
			setState(2641);
			match(K_RETURN);
			setState(2642);
			dataTypes();
			setState(2643);
			match(K_AS);
			setState(2644);
			expreDefininition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpreDefininitionContext extends ParserRuleContext {
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode SEMI() { return getToken(VSqlParser.SEMI, 0); }
		public ExpreDefininitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expreDefininition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpreDefininition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpreDefininition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpreDefininition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpreDefininitionContext expreDefininition() throws RecognitionException {
		ExpreDefininitionContext _localctx = new ExpreDefininitionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_expreDefininition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646);
			match(K_BEGIN);
			setState(2647);
			match(K_RETURN);
			setState(2648);
			expression();
			setState(2650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(2649);
				match(SEMI);
				}
			}

			setState(2652);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_filter_statementContext create_or_replace_filter_statement() throws RecognitionException {
		Create_or_replace_filter_statementContext _localctx = new Create_or_replace_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_or_replace_filter_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654);
			match(K_CREATE);
			setState(2657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2655);
				match(K_OR);
				setState(2656);
				match(K_REPLACE);
				}
			}

			setState(2659);
			match(K_FILTER);
			setState(2660);
			functionReference();
			setState(2661);
			match(K_AS);
			setState(2664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2662);
				match(K_LANGUAGE);
				setState(2663);
				lang();
				}
			}

			setState(2666);
			match(K_NAME);
			setState(2667);
			id();
			setState(2668);
			match(K_LIBRARY);
			setState(2669);
			library();
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT || _la==K_FENCED) {
				{
				setState(2671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NOT) {
					{
					setState(2670);
					match(K_NOT);
					}
				}

				setState(2673);
				match(K_FENCED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_analytic_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_analytic_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_analytic_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_analytic_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() throws RecognitionException {
		Create_or_replace_analytic_function_statementContext _localctx = new Create_or_replace_analytic_function_statementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_create_or_replace_analytic_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			match(K_CREATE);
			setState(2679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2677);
				match(K_OR);
				setState(2678);
				match(K_REPLACE);
				}
			}

			setState(2681);
			match(K_ANALYTIC);
			setState(2682);
			match(K_FUNCTION);
			setState(2683);
			function();
			setState(2684);
			match(K_AS);
			setState(2687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2685);
				match(K_LANGUAGE);
				setState(2686);
				lang();
				}
			}

			setState(2689);
			match(K_NAME);
			setState(2690);
			id();
			setState(2691);
			match(K_LIBRARY);
			setState(2692);
			library();
			setState(2696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2693);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2694);
				match(K_NOT);
				setState(2695);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_or_replace_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_or_replace_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() throws RecognitionException {
		Create_or_replace_aggregate_function_statementContext _localctx = new Create_or_replace_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_or_replace_aggregate_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(K_CREATE);
			setState(2701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2699);
				match(K_OR);
				setState(2700);
				match(K_REPLACE);
				}
			}

			setState(2703);
			match(K_AGGREGATE);
			setState(2704);
			match(K_FUNCTION);
			setState(2705);
			functionReference();
			setState(2706);
			match(K_AS);
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2707);
				match(K_LANGUAGE);
				setState(2708);
				lang();
				}
			}

			setState(2711);
			match(K_NAME);
			setState(2712);
			id();
			setState(2713);
			match(K_LIBRARY);
			setState(2714);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Create_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() throws RecognitionException {
		Create_hcatalog_schema_statementContext _localctx = new Create_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2716);
			match(K_CREATE);
			setState(2717);
			match(K_HCATALOG);
			setState(2718);
			match(K_SCHEMA);
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2719);
				ifNotExistsClause();
				}
				break;
			}
			setState(2722);
			schema();
			setState(2725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(2723);
				match(K_AUTHORIZATION);
				setState(2724);
				id();
				}
			}

			setState(2733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(2727);
				match(K_WITH);
				setState(2729); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2728);
					hcatalog_schema_param();
					}
					}
					setState(2731); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_CUSTOM_PARTITIONS || (((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & 2365L) != 0 || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Hcatalog_schema_paramContext extends ParserRuleContext {
		public Token key;
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_HOSTNAME() { return getToken(VSqlParser.K_HOSTNAME, 0); }
		public TerminalNode K_PORT() { return getToken(VSqlParser.K_PORT, 0); }
		public TerminalNode K_HIVESERVER2_HOSTNAME() { return getToken(VSqlParser.K_HIVESERVER2_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_HOSTNAME() { return getToken(VSqlParser.K_WEBSERVICE_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_PORT() { return getToken(VSqlParser.K_WEBSERVICE_PORT, 0); }
		public TerminalNode K_WEBHDFS_ADDRESS() { return getToken(VSqlParser.K_WEBHDFS_ADDRESS, 0); }
		public TerminalNode K_HCATALOG_SCHEMA() { return getToken(VSqlParser.K_HCATALOG_SCHEMA, 0); }
		public TerminalNode K_CUSTOM_PARTITIONS() { return getToken(VSqlParser.K_CUSTOM_PARTITIONS, 0); }
		public TerminalNode K_HCATALOG_USER() { return getToken(VSqlParser.K_HCATALOG_USER, 0); }
		public TerminalNode K_HCATALOG_CONNECTION_TIMEOUT() { return getToken(VSqlParser.K_HCATALOG_CONNECTION_TIMEOUT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_LIMIT() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_LIMIT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_TIME() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_TIME, 0); }
		public TerminalNode K_SSL_CONFIG() { return getToken(VSqlParser.K_SSL_CONFIG, 0); }
		public Hcatalog_schema_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hcatalog_schema_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHcatalog_schema_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHcatalog_schema_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHcatalog_schema_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hcatalog_schema_paramContext hcatalog_schema_param() throws RecognitionException {
		Hcatalog_schema_paramContext _localctx = new Hcatalog_schema_paramContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_hcatalog_schema_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			((Hcatalog_schema_paramContext)_localctx).key = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM_PARTITIONS || (((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & 2365L) != 0 || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT) ) {
				((Hcatalog_schema_paramContext)_localctx).key = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2736);
			match(EQUAL);
			setState(2737);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_library_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_library_statementContext create_library_statement() throws RecognitionException {
		Create_library_statementContext _localctx = new Create_library_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			match(K_CREATE);
			setState(2742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2740);
				match(K_OR);
				setState(2741);
				match(K_REPLACE);
				}
			}

			setState(2744);
			match(K_LIBRARY);
			setState(2745);
			libraryReference();
			setState(2746);
			alias();
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEPENDS) {
				{
				setState(2747);
				match(K_DEPENDS);
				setState(2748);
				id();
				}
			}

			setState(2753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2751);
				match(K_LANGUAGE);
				setState(2752);
				lang();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public List<Network_addressContext> network_address() {
			return getRuleContexts(Network_addressContext.class);
		}
		public Network_addressContext network_address(int i) {
			return getRuleContext(Network_addressContext.class,i);
		}
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public List<FaultGroupContext> faultGroup() {
			return getRuleContexts(FaultGroupContext.class);
		}
		public FaultGroupContext faultGroup(int i) {
			return getRuleContext(FaultGroupContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_load_balance_group_statementContext create_load_balance_group_statement() throws RecognitionException {
		Create_load_balance_group_statementContext _localctx = new Create_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2755);
			match(K_CREATE);
			setState(2756);
			match(K_LOAD);
			setState(2757);
			match(K_BALANCE);
			setState(2758);
			match(K_GROUP);
			setState(2759);
			lb_group();
			setState(2760);
			match(K_WITH);
			setState(2783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ADDRESS:
				{
				{
				setState(2761);
				match(K_ADDRESS);
				setState(2762);
				network_address();
				setState(2767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2763);
					match(COMMA);
					setState(2764);
					network_address();
					}
					}
					setState(2769);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_FAULT:
				{
				{
				setState(2770);
				match(K_FAULT);
				setState(2771);
				match(K_GROUP);
				setState(2772);
				faultGroup();
				setState(2777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2773);
					match(COMMA);
					setState(2774);
					faultGroup();
					}
					}
					setState(2779);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2780);
				match(K_FILTER);
				setState(2781);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_POLICY) {
				{
				setState(2785);
				match(K_POLICY);
				setState(2786);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_local_temporary_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Create_local_temporary_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_local_temporary_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_local_temporary_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_local_temporary_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_local_temporary_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_local_temporary_view_statementContext create_local_temporary_view_statement() throws RecognitionException {
		Create_local_temporary_view_statementContext _localctx = new Create_local_temporary_view_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_local_temporary_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(K_CREATE);
			{
			setState(2790);
			match(K_OR);
			setState(2791);
			match(K_REPLACE);
			}
			setState(2793);
			match(K_LOCAL);
			setState(2794);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2795);
			match(K_VIEW);
			setState(2796);
			viewReference();
			setState(2798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 319L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
				{
				setState(2797);
				columns();
				}
			}

			setState(2800);
			match(K_AS);
			setState(2801);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_location_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public Create_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_location_statementContext create_location_statement() throws RecognitionException {
		Create_location_statementContext _localctx = new Create_location_statementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			match(K_CREATE);
			setState(2804);
			match(K_LOCATION);
			setState(2805);
			string();
			setState(2810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_NODE:
				{
				{
				setState(2806);
				match(K_NODE);
				setState(2807);
				node();
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(2808);
				match(K_ALL);
				setState(2809);
				match(K_NODES);
				}
				}
				break;
			case EOF:
			case K_LIMIT:
			case K_LABEL:
			case K_SHARED:
			case K_USAGE:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SHARED) {
				{
				setState(2812);
				match(K_SHARED);
				}
			}

			setState(2817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_USAGE) {
				{
				setState(2815);
				match(K_USAGE);
				setState(2816);
				string();
				}
			}

			setState(2821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LABEL) {
				{
				setState(2819);
				match(K_LABEL);
				setState(2820);
				string();
				}
			}

			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIMIT) {
				{
				setState(2823);
				match(K_LIMIT);
				setState(2824);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_address_statementContext create_network_address_statement() throws RecognitionException {
		Create_network_address_statementContext _localctx = new Create_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_network_address_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2827);
			match(K_CREATE);
			setState(2828);
			match(K_NETWORK);
			setState(2829);
			match(K_ADDRESS);
			setState(2830);
			network_address();
			setState(2831);
			match(K_ON);
			setState(2832);
			node();
			setState(2833);
			match(K_WITH);
			setState(2834);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_interface_statementContext create_network_interface_statement() throws RecognitionException {
		Create_network_interface_statementContext _localctx = new Create_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			match(K_CREATE);
			setState(2837);
			match(K_NETWORK);
			setState(2838);
			match(K_INTERFACE);
			setState(2839);
			network_interface();
			setState(2840);
			match(K_ON);
			setState(2841);
			node();
			setState(2842);
			match(K_WITH);
			setState(2843);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public TerminalNode K_ACTION() { return getToken(VSqlParser.K_ACTION, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Create_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_notifier_statementContext create_notifier_statement() throws RecognitionException {
		Create_notifier_statementContext _localctx = new Create_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_notifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			match(K_CREATE);
			setState(2846);
			match(K_NOTIFIER);
			setState(2847);
			notifier();
			setState(2848);
			match(K_ACTION);
			setState(2849);
			value();
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || (((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 2251799847239683L) != 0) {
				{
				{
				setState(2850);
				notifier_params();
				}
				}
				setState(2855);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_procedure_statementContext extends ParserRuleContext {
		public ValueContext executable;
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_statementContext create_procedure_statement() throws RecognitionException {
		Create_procedure_statementContext _localctx = new Create_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856);
			match(K_CREATE);
			setState(2857);
			match(K_PROCEDURE);
			setState(2858);
			procedureReference();
			setState(2859);
			argument_list();
			setState(2860);
			match(K_AS);
			setState(2861);
			((Create_procedure_statementContext)_localctx).executable = value();
			setState(2862);
			match(K_LANGUAGE);
			setState(2863);
			lang();
			setState(2864);
			match(K_USER);
			setState(2865);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Argument_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Argument_itemContext> argument_item() {
			return getRuleContexts(Argument_itemContext.class);
		}
		public Argument_itemContext argument_item(int i) {
			return getRuleContext(Argument_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_listContext argument_list() throws RecognitionException {
		Argument_listContext _localctx = new Argument_listContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2867);
			match(OPEN_PAREN);
			setState(2876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 6917669851028854272L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -7778838058228449279L) != 0 || (((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & -1034239L) != 0 || (((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & -1L) != 0 || (((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & -1L) != 0 || (((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & -1L) != 0 || (((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & -1L) != 0 || (((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & -1L) != 0 || (((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & -1L) != 0 || (((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & 2233785415242874879L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(2868);
				argument_item();
				setState(2873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2869);
					match(COMMA);
					setState(2870);
					argument_item();
					}
					}
					setState(2875);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2878);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Argument_itemContext extends ParserRuleContext {
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Argument_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_itemContext argument_item() throws RecognitionException {
		Argument_itemContext _localctx = new Argument_itemContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_argument_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2880);
				id();
				}
				break;
			}
			setState(2883);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Create_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_profile_statementContext create_profile_statement() throws RecognitionException {
		Create_profile_statementContext _localctx = new Create_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			match(K_CREATE);
			setState(2886);
			match(K_PROFILE);
			setState(2887);
			profile();
			setState(2888);
			match(K_LIMIT);
			setState(2890); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2889);
				password_parameter();
				}
				}
				setState(2892); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || (((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & 4095L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Projection_clause_itemContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Projection_clause_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection_clause_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection_clause_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection_clause_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection_clause_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Projection_clause_itemContext projection_clause_item() throws RecognitionException {
		Projection_clause_itemContext _localctx = new Projection_clause_itemContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_projection_clause_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2894);
				columnReference();
				}
				break;
			case 2:
				{
				setState(2895);
				grouped_clause();
				}
				break;
			}
			setState(2899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(2898);
				encoding_clause();
				}
			}

			setState(2902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(2901);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ksafe_clauseContext extends ParserRuleContext {
		public TerminalNode K_KSAFE() { return getToken(VSqlParser.K_KSAFE, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Ksafe_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ksafe_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKsafe_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKsafe_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKsafe_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ksafe_clauseContext ksafe_clause() throws RecognitionException {
		Ksafe_clauseContext _localctx = new Ksafe_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_ksafe_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904);
			match(K_KSAFE);
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(2905);
				integerNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfNotExistsClauseContext extends ParserRuleContext {
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public IfNotExistsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExistsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIfNotExistsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIfNotExistsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIfNotExistsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsClauseContext ifNotExistsClause() throws RecognitionException {
		IfNotExistsClauseContext _localctx = new IfNotExistsClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_ifNotExistsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			match(K_IF);
			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(2909);
				match(K_NOT);
				}
			}

			setState(2912);
			match(K_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_statementContext create_projection_statement() throws RecognitionException {
		Create_projection_statementContext _localctx = new Create_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2914);
			match(K_CREATE);
			setState(2915);
			match(K_PROJECTION);
			setState(2917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2916);
				ifNotExistsClause();
				}
				break;
			}
			setState(2919);
			projectionReference();
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(2920);
				hints();
				}
			}

			setState(2934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2923);
				match(OPEN_PAREN);
				setState(2924);
				projection_clause_item();
				setState(2929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2925);
					match(COMMA);
					setState(2926);
					projection_clause_item();
					}
					}
					setState(2931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2932);
				match(CLOSE_PAREN);
				}
			}

			setState(2936);
			match(K_AS);
			setState(2937);
			simple_select_query_clause();
			setState(2939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2938);
				alias();
				}
				break;
			}
			setState(2942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2941);
				orderby_clause();
				}
			}

			setState(2945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2944);
				segmentation_clause();
				}
			}

			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2947);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_projection_live_aggregate_projections_statementContext extends ParserRuleContext {
		public Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_gr_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_topk_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_statementContext _localctx = new Create_projection_live_aggregate_projections_statementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_projection_live_aggregate_projections_statement);
		try {
			setState(2952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2950);
				create_projection_live_aggregate_projections_gr_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2951);
				create_projection_live_aggregate_projections_topk_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_projection_live_aggregate_projections_gr_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_gr_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_gr_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_gr_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_gr_statementContext _localctx = new Create_projection_live_aggregate_projections_gr_statementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_projection_live_aggregate_projections_gr_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2954);
			match(K_CREATE);
			setState(2955);
			match(K_PROJECTION);
			setState(2957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2956);
				ifNotExistsClause();
				}
				break;
			}
			setState(2959);
			projectionReference();
			setState(2971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2960);
				match(OPEN_PAREN);
				setState(2961);
				projection_clause_item();
				setState(2966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2962);
					match(COMMA);
					setState(2963);
					projection_clause_item();
					}
					}
					setState(2968);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2969);
				match(CLOSE_PAREN);
				}
			}

			setState(2973);
			match(K_AS);
			setState(2974);
			simple_select_query_clause();
			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(2975);
				alias();
				}
			}

			setState(2978);
			groupBy_clause();
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2979);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_projection_live_aggregate_projections_topk_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_topk_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_topk_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_topk_statementContext _localctx = new Create_projection_live_aggregate_projections_topk_statementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_projection_live_aggregate_projections_topk_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(K_CREATE);
			setState(2983);
			match(K_PROJECTION);
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2984);
				ifNotExistsClause();
				}
				break;
			}
			setState(2987);
			projectionReference();
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2988);
				match(OPEN_PAREN);
				setState(2989);
				projection_clause_item();
				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2990);
					match(COMMA);
					setState(2991);
					projection_clause_item();
					}
					}
					setState(2996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2997);
				match(CLOSE_PAREN);
				}
			}

			setState(3001);
			match(K_AS);
			setState(3002);
			simple_select_query_clause();
			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(3003);
				alias();
				}
			}

			setState(3006);
			limit_clause();
			setState(3007);
			over_clause();
			setState(3009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3008);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_projection_udtfs_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Prepass_queryContext prepass_query() {
			return getRuleContext(Prepass_queryContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Batch_queryContext batch_query() {
			return getRuleContext(Batch_queryContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Create_projection_udtfs_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_udtfs_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_udtfs_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_udtfs_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_udtfs_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_udtfs_statementContext create_projection_udtfs_statement() throws RecognitionException {
		Create_projection_udtfs_statementContext _localctx = new Create_projection_udtfs_statementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_projection_udtfs_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			match(K_CREATE);
			setState(3012);
			match(K_PROJECTION);
			setState(3014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3013);
				ifNotExistsClause();
				}
				break;
			}
			setState(3016);
			projectionReference();
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3017);
				match(OPEN_PAREN);
				setState(3018);
				projection_clause_item();
				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3019);
					match(COMMA);
					setState(3020);
					projection_clause_item();
					}
					}
					setState(3025);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3026);
				match(CLOSE_PAREN);
				}
			}

			setState(3030);
			match(K_AS);
			setState(3041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				{
				setState(3031);
				batch_query();
				setState(3032);
				match(K_FROM);
				setState(3038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_SELECT:
					{
					setState(3033);
					prepass_query();
					}
					break;
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case K_PUBLIC:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					{
					setState(3034);
					tableReference();
					setState(3036);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
						{
						setState(3035);
						alias();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				setState(3040);
				prepass_query();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsContext columns() throws RecognitionException {
		ColumnsContext _localctx = new ColumnsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_columns);
		int _la;
		try {
			int _alt;
			setState(3063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3043);
				match(OPEN_PAREN);
				setState(3045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 319L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
					{
					setState(3044);
					columnReference();
					}
				}

				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3047);
					match(COMMA);
					setState(3048);
					columnReference();
					}
					}
					setState(3053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3054);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3055);
				columnReference();
				setState(3060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,330,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3056);
						match(COMMA);
						setState(3057);
						columnReference();
						}
						} 
					}
					setState(3062);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,330,_ctx);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Batch_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Batch_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBatch_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBatch_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBatch_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Batch_queryContext batch_query() throws RecognitionException {
		Batch_queryContext _localctx = new Batch_queryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_batch_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			match(K_SELECT);
			setState(3066);
			elements();
			setState(3067);
			match(COMMA);
			setState(3068);
			functionCall();
			setState(3069);
			match(K_OVER);
			setState(3070);
			match(OPEN_PAREN);
			setState(3071);
			match(K_PARTITION);
			setState(3072);
			match(K_BATCH);
			setState(3073);
			match(K_BY);
			setState(3074);
			elements();
			setState(3075);
			match(CLOSE_PAREN);
			setState(3078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3076);
				match(K_AS);
				setState(3077);
				columns();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prepass_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Prepass_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepass_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPrepass_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPrepass_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPrepass_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepass_queryContext prepass_query() throws RecognitionException {
		Prepass_queryContext _localctx = new Prepass_queryContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_prepass_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			match(K_SELECT);
			setState(3081);
			elements();
			setState(3082);
			match(COMMA);
			setState(3083);
			functionCall();
			setState(3084);
			match(K_OVER);
			setState(3085);
			match(OPEN_PAREN);
			setState(3086);
			match(K_PARTITION);
			setState(3087);
			match(K_BATCH);
			setState(3088);
			match(K_BY);
			setState(3089);
			elements();
			setState(3090);
			match(CLOSE_PAREN);
			setState(3093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3091);
				match(K_AS);
				setState(3092);
				columns();
				}
			}

			setState(3095);
			match(K_FROM);
			setState(3096);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Create_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_pool_statementContext create_resource_pool_statement() throws RecognitionException {
		Create_resource_pool_statementContext _localctx = new Create_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_create_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3098);
			match(K_CREATE);
			setState(3099);
			match(K_RESOURCE);
			setState(3100);
			match(K_POOL);
			setState(3101);
			resourcePool();
			setState(3103); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3102);
				resource_pool_param();
				}
				}
				setState(3105); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & 25165825L) != 0 || _la==K_EXECUTIONPARALLELISM || (((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & 553L) != 0 || (((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & 126100789566899201L) != 0 || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_role_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Create_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_role_statementContext create_role_statement() throws RecognitionException {
		Create_role_statementContext _localctx = new Create_role_statementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_create_role_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3107);
			match(K_CREATE);
			setState(3108);
			match(K_ROLE);
			setState(3109);
			role();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public TerminalNode K_ROUTE() { return getToken(VSqlParser.K_ROUTE, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routing_rule_statementContext create_routing_rule_statement() throws RecognitionException {
		Create_routing_rule_statementContext _localctx = new Create_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_create_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			match(K_CREATE);
			setState(3112);
			match(K_ROUTING);
			setState(3113);
			match(K_RULE);
			setState(3114);
			routingRule();
			setState(3115);
			match(K_ROUTE);
			setState(3116);
			address();
			setState(3117);
			match(K_TO);
			setState(3118);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_create_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3120);
			match(K_CREATE);
			setState(3121);
			match(K_SCHEMA);
			setState(3123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(3122);
				ifNotExistsClause();
				}
				break;
			}
			setState(3125);
			schemaReference();
			setState(3128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(3126);
				match(K_AUTHORIZATION);
				setState(3127);
				string();
				}
			}

			setState(3132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT) {
				{
				setState(3130);
				match(K_DEFAULT);
				setState(3131);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			match(K_CREATE);
			setState(3135);
			match(K_SEQUENCE);
			{
			setState(3137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3136);
				ifNotExistsClause();
				}
				break;
			}
			setState(3139);
			sequenceReference();
			setState(3143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(3140);
				match(K_INCREMENT);
				setState(3141);
				match(K_BY);
				setState(3142);
				match(DECIMAL);
				}
			}

			setState(3149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				{
				setState(3145);
				match(K_MINVALUE);
				setState(3146);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3147);
				match(K_NO);
				setState(3148);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(3155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				{
				setState(3151);
				match(K_MAXVALUE);
				setState(3152);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3153);
				match(K_NO);
				setState(3154);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(3157);
				match(K_RESTART);
				setState(3158);
				match(K_WITH);
				setState(3159);
				match(DECIMAL);
				}
			}

			setState(3172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(3162);
				match(K_CACHE);
				setState(3163);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(3164);
				match(K_NO);
				setState(3165);
				match(K_CACHE);
				}
				setState(3170);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(3167);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(3168);
					match(K_NO);
					setState(3169);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_subnet_statementContext create_subnet_statement() throws RecognitionException {
		Create_subnet_statementContext _localctx = new Create_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_create_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(K_CREATE);
			setState(3175);
			match(K_SUBNET);
			setState(3176);
			subnet();
			setState(3177);
			match(K_WITH);
			setState(3178);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_statementContext extends ParserRuleContext {
		public Create_table_default_statementContext create_table_default_statement() {
			return getRuleContext(Create_table_default_statementContext.class,0);
		}
		public Create_table_as_statementContext create_table_as_statement() {
			return getRuleContext(Create_table_as_statementContext.class,0);
		}
		public Create_table_like_statementContext create_table_like_statement() {
			return getRuleContext(Create_table_like_statementContext.class,0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_create_table_statement);
		try {
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3180);
				create_table_default_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3181);
				create_table_as_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3182);
				create_table_like_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_privileges_clauseContext extends ParserRuleContext {
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_INCLUDE() { return getToken(VSqlParser.K_INCLUDE, 0); }
		public TerminalNode K_EXCLUDE() { return getToken(VSqlParser.K_EXCLUDE, 0); }
		public TerminalNode K_MATERIALIZE() { return getToken(VSqlParser.K_MATERIALIZE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Schema_privileges_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privileges_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privileges_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privileges_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privileges_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privileges_clauseContext schema_privileges_clause() throws RecognitionException {
		Schema_privileges_clauseContext _localctx = new Schema_privileges_clauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_schema_privileges_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3185);
			_la = _input.LA(1);
			if ( !(_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SCHEMA) {
				{
				setState(3186);
				match(K_SCHEMA);
				}
			}

			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(3189);
				match(K_NOT);
				}
			}

			setState(3192);
			match(K_PRIVILEGES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_as_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Create_table_as_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_as_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_as_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_as_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_statementContext create_table_as_statement() throws RecognitionException {
		Create_table_as_statementContext _localctx = new Create_table_as_statementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_create_table_as_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			match(K_CREATE);
			setState(3195);
			match(K_TABLE);
			setState(3197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3196);
				ifNotExistsClause();
				}
				break;
			}
			setState(3199);
			tableReference();
			setState(3201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3200);
				column_name_list();
				}
			}

			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3203);
				schema_privileges_clause();
				}
			}

			setState(3206);
			match(K_AS);
			setState(3208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3207);
				hints();
				}
			}

			setState(3210);
			select_statement();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3211);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Column_name_list_itemContext> column_name_list_item() {
			return getRuleContexts(Column_name_list_itemContext.class);
		}
		public Column_name_list_itemContext column_name_list_item(int i) {
			return getRuleContext(Column_name_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(OPEN_PAREN);
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(3215);
				column_name_list_item();
				setState(3220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3216);
					match(COMMA);
					setState(3217);
					column_name_list_item();
					}
					}
					setState(3222);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3225);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_name_list_itemContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Column_name_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_itemContext column_name_list_item() throws RecognitionException {
		Column_name_list_itemContext _localctx = new Column_name_list_itemContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_column_name_list_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			column();
			setState(3229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3228);
				encoding_clause();
				}
			}

			setState(3232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3231);
				access_rank();
				}
			}

			setState(3235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUPED) {
				{
				setState(3234);
				grouped_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Access_rankContext extends ParserRuleContext {
		public TerminalNode K_ACCESSRANK() { return getToken(VSqlParser.K_ACCESSRANK, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Access_rankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_rank; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAccess_rank(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAccess_rank(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAccess_rank(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_rankContext access_rank() throws RecognitionException {
		Access_rankContext _localctx = new Access_rankContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_access_rank);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			match(K_ACCESSRANK);
			setState(3238);
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grouped_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUPED() { return getToken(VSqlParser.K_GROUPED, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Grouped_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouped_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrouped_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrouped_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrouped_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouped_clauseContext grouped_clause() throws RecognitionException {
		Grouped_clauseContext _localctx = new Grouped_clauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_grouped_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3240);
			match(K_GROUPED);
			setState(3241);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_like_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_INCLUDING() { return getToken(VSqlParser.K_INCLUDING, 0); }
		public TerminalNode K_EXCLUDING() { return getToken(VSqlParser.K_EXCLUDING, 0); }
		public Create_table_like_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_like_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_like_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_like_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_like_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_like_statementContext create_table_like_statement() throws RecognitionException {
		Create_table_like_statementContext _localctx = new Create_table_like_statementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_create_table_like_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			match(K_CREATE);
			setState(3244);
			match(K_TABLE);
			setState(3246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3245);
				ifNotExistsClause();
				}
				break;
			}
			setState(3248);
			tableReference();
			setState(3249);
			match(K_LIKE);
			setState(3250);
			tableReference();
			setState(3253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCLUDING || _la==K_INCLUDING) {
				{
				setState(3251);
				_la = _input.LA(1);
				if ( !(_la==K_EXCLUDING || _la==K_INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3252);
				match(K_PROJECTIONS);
				}
			}

			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3255);
				load_method();
				}
			}

			setState(3259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1+1:
				{
				setState(3258);
				schema_privileges_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_default_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<Table_constraintContext> table_constraint() {
			return getRuleContexts(Table_constraintContext.class);
		}
		public Table_constraintContext table_constraint(int i) {
			return getRuleContext(Table_constraintContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_table_default_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_default_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_default_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_default_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_default_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_default_statementContext create_table_default_statement() throws RecognitionException {
		Create_table_default_statementContext _localctx = new Create_table_default_statementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_create_table_default_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3261);
			match(K_CREATE);
			setState(3262);
			match(K_TABLE);
			setState(3264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3263);
				ifNotExistsClause();
				}
				break;
			}
			setState(3266);
			tableReference();
			setState(3267);
			column_definition_list();
			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3268);
				match(COMMA);
				setState(3269);
				table_constraint();
				setState(3274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3270);
					match(COMMA);
					setState(3271);
					table_constraint();
					}
					}
					setState(3276);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3279);
				load_method();
				}
			}

			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3282);
				orderby_clause();
				}
			}

			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3285);
				segmentation_clause();
				}
			}

			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3288);
				ksafe_clause();
				}
			}

			setState(3292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(3291);
				partition_clause();
				}
			}

			setState(3295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3294);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_constraintContext extends ParserRuleContext {
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FOREIGN() { return getToken(VSqlParser.K_FOREIGN, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(K_CONSTRAINT);
			setState(3298);
			constraint();
			setState(3325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_PRIMARY:
				{
				{
				setState(3299);
				match(K_PRIMARY);
				setState(3300);
				match(K_KEY);
				setState(3301);
				columns();
				setState(3303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3302);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case K_FOREIGN:
				{
				{
				{
				setState(3305);
				match(K_FOREIGN);
				setState(3306);
				match(K_KEY);
				setState(3307);
				columns();
				setState(3308);
				match(K_REFERENCES);
				setState(3309);
				tableReference();
				setState(3311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3310);
					columns();
					}
					break;
				}
				}
				}
				}
				break;
			case K_UNIQUE:
				{
				{
				setState(3313);
				match(K_UNIQUE);
				setState(3314);
				columns();
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3315);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case K_CHECK:
				{
				{
				setState(3318);
				match(K_CHECK);
				setState(3319);
				match(OPEN_PAREN);
				setState(3320);
				expression();
				setState(3321);
				match(CLOSE_PAREN);
				setState(3323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3322);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definition_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definition_listContext column_definition_list() throws RecognitionException {
		Column_definition_listContext _localctx = new Column_definition_listContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_column_definition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			match(OPEN_PAREN);
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(3328);
				column_definition();
				setState(3333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3329);
					match(COMMA);
					setState(3330);
					column_definition();
					}
					}
					setState(3335);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3338);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_definitionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			column();
			setState(3342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3341);
				dataTypes();
				}
				break;
			}
			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 68724195328L) != 0 || (((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 9007199259983877L) != 0 || _la==K_AUTO_INCREMENT || _la==K_IDENTITY || _la==K_SET) {
				{
				{
				setState(3344);
				column_constraint();
				}
				}
				setState(3349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3350);
				encoding_clause();
				}
			}

			setState(3354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3353);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_constraintContext extends ParserRuleContext {
		public TerminalNode K_AUTO_INCREMENT() { return getToken(VSqlParser.K_AUTO_INCREMENT, 0); }
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_column_constraint);
		int _la;
		try {
			setState(3408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3356);
				_la = _input.LA(1);
				if ( !(_la==K_AUTO_INCREMENT || _la==K_IDENTITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3357);
					match(OPEN_PAREN);
					setState(3358);
					value();
					setState(3363);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3359);
						match(COMMA);
						setState(3360);
						value();
						}
						}
						setState(3365);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3366);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3370);
				match(K_CONSTRAINT);
				setState(3371);
				constraint();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3372);
				match(K_CHECK);
				setState(3373);
				match(OPEN_PAREN);
				setState(3374);
				expression();
				setState(3375);
				match(CLOSE_PAREN);
				setState(3377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3376);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					{
					setState(3379);
					match(K_DEFAULT);
					setState(3380);
					match(K_USING);
					setState(3381);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(3382);
					match(K_SET);
					setState(3383);
					match(K_USING);
					setState(3384);
					expression();
					}
					}
					break;
				case 3:
					{
					{
					setState(3385);
					match(K_DEFAULT);
					setState(3386);
					match(K_USING);
					setState(3387);
					expression();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(3390);
				nullOrNotNull();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_PRIMARY:
					{
					{
					setState(3391);
					match(K_PRIMARY);
					setState(3392);
					match(K_KEY);
					setState(3394);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_DISABLED || _la==K_ENABLED) {
						{
						setState(3393);
						enabledOrDisabled();
						}
					}

					}
					}
					break;
				case K_REFERENCES:
					{
					{
					setState(3396);
					match(K_REFERENCES);
					setState(3397);
					tableReference();
					setState(3398);
					columns();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(3402);
				match(K_UNIQUE);
				setState(3404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3403);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(3406);
				match(K_DEFAULT);
				setState(3407);
				expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Load_methodContext extends ParserRuleContext {
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_TRICKLE() { return getToken(VSqlParser.K_TRICKLE, 0); }
		public Load_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLoad_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLoad_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLoad_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_methodContext load_method() throws RecognitionException {
		Load_methodContext _localctx = new Load_methodContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_load_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			_la = _input.LA(1);
			if ( !(_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Segmentation_clauseContext extends ParserRuleContext {
		public TerminalNode K_UNSEGMENTED() { return getToken(VSqlParser.K_UNSEGMENTED, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public TerminalNode K_SEGMENTED() { return getToken(VSqlParser.K_SEGMENTED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Segmentation_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segmentation_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSegmentation_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSegmentation_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSegmentation_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segmentation_clauseContext segmentation_clause() throws RecognitionException {
		Segmentation_clauseContext _localctx = new Segmentation_clauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_segmentation_clause);
		int _la;
		try {
			setState(3438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_UNSEGMENTED:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3412);
				match(K_UNSEGMENTED);
				setState(3417);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_NODE:
					{
					{
					setState(3413);
					match(K_NODE);
					setState(3414);
					node();
					}
					}
					break;
				case K_ALL:
					{
					{
					setState(3415);
					match(K_ALL);
					setState(3416);
					match(K_NODES);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_SEGMENTED:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3419);
				match(K_SEGMENTED);
				setState(3420);
				match(K_BY);
				setState(3421);
				expression();
				setState(3436);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(3422);
					match(K_ALL);
					setState(3423);
					match(K_NODES);
					setState(3425);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_OFFSET) {
						{
						setState(3424);
						offset_clause();
						}
					}

					}
					}
					break;
				case K_NODES:
					{
					{
					setState(3427);
					match(K_NODES);
					setState(3428);
					node();
					setState(3433);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3429);
						match(COMMA);
						setState(3430);
						node();
						}
						}
						setState(3435);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_temporary_table_statementContext extends ParserRuleContext {
		public Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() {
			return getRuleContext(Create_temporary_table_with_def_statementContext.class,0);
		}
		public Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() {
			return getRuleContext(Create_temporary_table_from_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_statementContext create_temporary_table_statement() throws RecognitionException {
		Create_temporary_table_statementContext _localctx = new Create_temporary_table_statementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_create_temporary_table_statement);
		try {
			setState(3442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3440);
				create_temporary_table_with_def_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3441);
				create_temporary_table_from_table_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_temporary_table_with_def_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_with_def_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_with_def_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_with_def_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() throws RecognitionException {
		Create_temporary_table_with_def_statementContext _localctx = new Create_temporary_table_with_def_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_create_temporary_table_with_def_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3444);
			match(K_CREATE);
			setState(3446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GLOBAL || _la==K_LOCAL) {
				{
				setState(3445);
				_la = _input.LA(1);
				if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3448);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3449);
			match(K_TABLE);
			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3450);
				ifNotExistsClause();
				}
				break;
			}
			setState(3453);
			tableReference();
			setState(3454);
			column_definition_list();
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CONSTRAINT) {
				{
				setState(3455);
				table_constraint();
				}
			}

			setState(3462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3458);
				match(K_ON);
				setState(3459);
				match(K_COMMIT);
				setState(3460);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3461);
				match(K_ROWS);
				}
			}

			setState(3465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3464);
				load_method();
				}
			}

			setState(3469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(3467);
				match(K_NO);
				setState(3468);
				match(K_PROJECTION);
				}
			}

			setState(3472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3471);
				orderby_clause();
				}
			}

			setState(3475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3474);
				segmentation_clause();
				}
			}

			setState(3478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3477);
				ksafe_clause();
				}
			}

			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3480);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_temporary_table_from_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_from_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_from_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_from_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() throws RecognitionException {
		Create_temporary_table_from_table_statementContext _localctx = new Create_temporary_table_from_table_statementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_create_temporary_table_from_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			match(K_CREATE);
			setState(3484);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3485);
			match(K_TABLE);
			setState(3487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3486);
				ifNotExistsClause();
				}
				break;
			}
			setState(3489);
			tableReference();
			setState(3491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3490);
				column_name_list();
				}
			}

			setState(3497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3493);
				match(K_ON);
				setState(3494);
				match(K_COMMIT);
				setState(3495);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3496);
				match(K_ROWS);
				}
			}

			setState(3500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3499);
				load_method();
				}
			}

			setState(3502);
			match(K_AS);
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3503);
				hints();
				}
			}

			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AT) {
				{
				setState(3506);
				at_epoch_clause();
				}
			}

			setState(3509);
			select_query();
			setState(3511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3510);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EncodedBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODED() { return getToken(VSqlParser.K_ENCODED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<Column_refContext> column_ref() {
			return getRuleContexts(Column_refContext.class);
		}
		public Column_refContext column_ref(int i) {
			return getRuleContext(Column_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public EncodedBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encodedBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncodedBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncodedBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncodedBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodedBy_clauseContext encodedBy_clause() throws RecognitionException {
		EncodedBy_clauseContext _localctx = new EncodedBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_encodedBy_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			match(K_ENCODED);
			setState(3514);
			match(K_BY);
			setState(3515);
			column_ref();
			setState(3520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3516);
				match(COMMA);
				setState(3517);
				column_ref();
				}
				}
				setState(3522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_refContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Column_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_refContext column_ref() throws RecognitionException {
		Column_refContext _localctx = new Column_refContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_column_ref);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3523);
			columnReference();
			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3524);
				access_rank();
				}
			}

			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3527);
				encoding_clause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<DataTypesContext> dataTypes() {
			return getRuleContexts(DataTypesContext.class);
		}
		public DataTypesContext dataTypes(int i) {
			return getRuleContext(DataTypesContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_STEMMER() { return getToken(VSqlParser.K_STEMMER, 0); }
		public TerminalNode K_TOKENIZER() { return getToken(VSqlParser.K_TOKENIZER, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Create_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_index_statementContext create_text_index_statement() throws RecognitionException {
		Create_text_index_statementContext _localctx = new Create_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_create_text_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3530);
			match(K_CREATE);
			setState(3531);
			match(K_TEXT);
			setState(3532);
			match(K_INDEX);
			setState(3533);
			txtIndexReference();
			setState(3534);
			match(K_ON);
			setState(3535);
			tableReference();
			setState(3536);
			match(OPEN_PAREN);
			setState(3537);
			id();
			setState(3538);
			match(COMMA);
			setState(3539);
			dataTypes();
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3540);
				match(COMMA);
				setState(3541);
				columns();
				}
			}

			setState(3544);
			match(CLOSE_PAREN);
			setState(3554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STEMMER) {
				{
				setState(3545);
				match(K_STEMMER);
				setState(3552);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					setState(3546);
					id();
					{
					setState(3547);
					match(OPEN_PAREN);
					setState(3548);
					dataTypes();
					setState(3549);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_NONE:
					{
					setState(3551);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TOKENIZER) {
				{
				setState(3556);
				match(K_TOKENIZER);
				setState(3557);
				id();
				{
				setState(3558);
				match(OPEN_PAREN);
				setState(3559);
				dataTypes();
				setState(3560);
				match(CLOSE_PAREN);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_user_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Create_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_statementContext create_user_statement() throws RecognitionException {
		Create_user_statementContext _localctx = new Create_user_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_create_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3564);
			match(K_CREATE);
			setState(3565);
			match(K_USER);
			setState(3566);
			user();
			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_DEFAULT || _la==K_ACCOUNT || (((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & 10485761L) != 0 || (((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & 288230376151711809L) != 0 || (((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & 1197368231854081L) != 0 || _la==K_TEMPSPACECAP) {
				{
				{
				setState(3567);
				user_params();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			match(K_CREATE);
			setState(3576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(3574);
				match(K_OR);
				setState(3575);
				match(K_REPLACE);
				}
			}

			setState(3578);
			match(K_VIEW);
			setState(3579);
			viewReference();
			setState(3581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3580);
				columns();
				}
				break;
			}
			setState(3584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3583);
				schema_privileges_clause();
				}
			}

			setState(3586);
			match(K_AS);
			setState(3587);
			select_statement();
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(3588);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(K_DELETE);
			setState(3593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3592);
				hints();
				}
			}

			setState(3595);
			match(K_FROM);
			setState(3596);
			tableReference();
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(3597);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Directed_query_statements_statementContext extends ParserRuleContext {
		public Activate_directed_query_statementContext activate_directed_query_statement() {
			return getRuleContext(Activate_directed_query_statementContext.class,0);
		}
		public Deactivate_directed_query_statementContext deactivate_directed_query_statement() {
			return getRuleContext(Deactivate_directed_query_statementContext.class,0);
		}
		public Drop_directed_query_statementContext drop_directed_query_statement() {
			return getRuleContext(Drop_directed_query_statementContext.class,0);
		}
		public Get_directed_query_statementContext get_directed_query_statement() {
			return getRuleContext(Get_directed_query_statementContext.class,0);
		}
		public Save_queryContext save_query() {
			return getRuleContext(Save_queryContext.class,0);
		}
		public Directed_query_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directed_query_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDirected_query_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDirected_query_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDirected_query_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Directed_query_statements_statementContext directed_query_statements_statement() throws RecognitionException {
		Directed_query_statements_statementContext _localctx = new Directed_query_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_directed_query_statements_statement);
		try {
			setState(3606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3600);
				activate_directed_query_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3601);
				activate_directed_query_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3602);
				deactivate_directed_query_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3603);
				drop_directed_query_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3604);
				get_directed_query_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3605);
				save_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Activate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_ACTIVATE() { return getToken(VSqlParser.K_ACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Activate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_activate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterActivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitActivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitActivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Activate_directed_query_statementContext activate_directed_query_statement() throws RecognitionException {
		Activate_directed_query_statementContext _localctx = new Activate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_activate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(K_ACTIVATE);
			setState(3609);
			match(K_DIRECTED);
			setState(3610);
			match(K_QUERY);
			setState(3611);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public TerminalNode K_OPT() { return getToken(VSqlParser.K_OPT, 0); }
		public TerminalNode K_OPTIMIZER() { return getToken(VSqlParser.K_OPTIMIZER, 0); }
		public TerminalNode K_CUSTOM() { return getToken(VSqlParser.K_CUSTOM, 0); }
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_directed_query_statementContext create_directed_query_statement() throws RecognitionException {
		Create_directed_query_statementContext _localctx = new Create_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_create_directed_query_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			match(K_CREATE);
			setState(3614);
			match(K_DIRECTED);
			setState(3615);
			match(K_QUERY);
			setState(3616);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM || _la==K_OPT || _la==K_OPTIMIZER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3617);
			id();
			setState(3620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3618);
				match(K_COMMENT);
				setState(3619);
				string();
				}
				break;
			}
			setState(3622);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deactivate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DEACTIVATE() { return getToken(VSqlParser.K_DEACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Deactivate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deactivate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDeactivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDeactivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDeactivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deactivate_directed_query_statementContext deactivate_directed_query_statement() throws RecognitionException {
		Deactivate_directed_query_statementContext _localctx = new Deactivate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_deactivate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			match(K_DEACTIVATE);
			setState(3625);
			match(K_DIRECTED);
			setState(3626);
			match(K_QUERY);
			setState(3629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3627);
				id();
				}
				break;
			case 2:
				{
				setState(3628);
				sqlStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_directed_query_statementContext drop_directed_query_statement() throws RecognitionException {
		Drop_directed_query_statementContext _localctx = new Drop_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			match(K_DROP);
			setState(3632);
			match(K_DIRECTED);
			setState(3633);
			match(K_QUERY);
			setState(3634);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Get_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_GET() { return getToken(VSqlParser.K_GET, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Get_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGet_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGet_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGet_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_directed_query_statementContext get_directed_query_statement() throws RecognitionException {
		Get_directed_query_statementContext _localctx = new Get_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_get_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			match(K_GET);
			setState(3637);
			match(K_DIRECTED);
			setState(3638);
			match(K_QUERY);
			setState(3639);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Save_queryContext extends ParserRuleContext {
		public TerminalNode K_SAVE() { return getToken(VSqlParser.K_SAVE, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Save_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_save_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSave_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSave_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSave_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Save_queryContext save_query() throws RecognitionException {
		Save_queryContext _localctx = new Save_queryContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_save_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(K_SAVE);
			setState(3642);
			match(K_QUERY);
			setState(3643);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Disconnect_statementContext extends ParserRuleContext {
		public TerminalNode K_DISCONNECT() { return getToken(VSqlParser.K_DISCONNECT, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public Disconnect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDisconnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDisconnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDisconnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_statementContext disconnect_statement() throws RecognitionException {
		Disconnect_statementContext _localctx = new Disconnect_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_disconnect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(K_DISCONNECT);
			setState(3646);
			dbname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Drop_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_access_policy_statementContext drop_access_policy_statement() throws RecognitionException {
		Drop_access_policy_statementContext _localctx = new Drop_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_access_policy_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3648);
			match(K_DROP);
			setState(3649);
			match(K_ACCESS);
			setState(3650);
			match(K_POLICY);
			setState(3651);
			match(K_ON);
			setState(3652);
			tableReference();
			setState(3653);
			match(K_FOR);
			setState(3657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_COLUMN:
				{
				setState(3654);
				match(K_COLUMN);
				setState(3655);
				column();
				}
				break;
			case K_ROWS:
				{
				setState(3656);
				match(K_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregate_function_statementContext drop_aggregate_function_statement() throws RecognitionException {
		Drop_aggregate_function_statementContext _localctx = new Drop_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_aggregate_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			match(K_DROP);
			setState(3660);
			match(K_AGGREGATE);
			setState(3661);
			match(K_FUNCTION);
			setState(3663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3662);
				ifNotExistsClause();
				}
				break;
			}
			setState(3665);
			functionReference();
			setState(3666);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_authentication_statementContext drop_authentication_statement() throws RecognitionException {
		Drop_authentication_statementContext _localctx = new Drop_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(K_DROP);
			setState(3669);
			match(K_AUTHENTICATION);
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3670);
				ifNotExistsClause();
				}
				break;
			}
			setState(3673);
			auth_method_name();
			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3674);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_branch_statementContext drop_branch_statement() throws RecognitionException {
		Drop_branch_statementContext _localctx = new Drop_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3677);
			match(K_DROP);
			setState(3678);
			match(K_BRANCH);
			setState(3680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(3679);
				ifNotExistsClause();
				}
				break;
			}
			{
			setState(3682);
			branch_identifier();
			}
			setState(3687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3683);
				match(COMMA);
				setState(3684);
				branch_identifier();
				}
				}
				setState(3689);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3690);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fault_group_statementContext drop_fault_group_statement() throws RecognitionException {
		Drop_fault_group_statementContext _localctx = new Drop_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3693);
			match(K_DROP);
			setState(3694);
			match(K_FAULT);
			setState(3695);
			match(K_GROUP);
			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3696);
				ifNotExistsClause();
				}
				break;
			}
			setState(3699);
			faultGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_function_statementContext drop_function_statement() throws RecognitionException {
		Drop_function_statementContext _localctx = new Drop_function_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_drop_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			match(K_DROP);
			setState(3702);
			match(K_FUNCTION);
			setState(3704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3703);
				ifNotExistsClause();
				}
				break;
			}
			setState(3706);
			functionReference();
			setState(3707);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_source_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceReferenceContext sourceReference() {
			return getRuleContext(SourceReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_source_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_source_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_source_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_source_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_source_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_source_statementContext drop_source_statement() throws RecognitionException {
		Drop_source_statementContext _localctx = new Drop_source_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_drop_source_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(K_DROP);
			setState(3710);
			match(K_SOURCE);
			setState(3711);
			sourceReference();
			setState(3712);
			match(OPEN_PAREN);
			setState(3713);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_filter_statementContext drop_filter_statement() throws RecognitionException {
		Drop_filter_statementContext _localctx = new Drop_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_drop_filter_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			match(K_DROP);
			setState(3716);
			match(K_FILTER);
			setState(3717);
			filterReference();
			setState(3718);
			match(OPEN_PAREN);
			setState(3719);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_parser_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_parser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_parser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_parser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_parser_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_parser_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_parser_statementContext drop_parser_statement() throws RecognitionException {
		Drop_parser_statementContext _localctx = new Drop_parser_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_drop_parser_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3721);
			match(K_DROP);
			setState(3722);
			match(K_PARSER);
			setState(3723);
			parserReference();
			setState(3724);
			match(OPEN_PAREN);
			setState(3725);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_model_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Drop_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_model_statementContext drop_model_statement() throws RecognitionException {
		Drop_model_statementContext _localctx = new Drop_model_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_drop_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3727);
			match(K_DROP);
			setState(3728);
			match(K_MODEL);
			setState(3730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3729);
				ifNotExistsClause();
				}
				break;
			}
			setState(3732);
			modelReference();
			setState(3737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3733);
				match(COMMA);
				setState(3734);
				modelReference();
				}
				}
				setState(3739);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_library_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_library_statementContext drop_library_statement() throws RecognitionException {
		Drop_library_statementContext _localctx = new Drop_library_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_drop_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3740);
			match(K_DROP);
			setState(3741);
			match(K_LIBRARY);
			setState(3743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3742);
				ifNotExistsClause();
				}
				break;
			}
			setState(3745);
			libraryReference();
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3746);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_load_balance_group_statementContext drop_load_balance_group_statement() throws RecognitionException {
		Drop_load_balance_group_statementContext _localctx = new Drop_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_drop_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			match(K_DROP);
			setState(3750);
			match(K_LOAD);
			setState(3751);
			match(K_BALANCE);
			setState(3752);
			match(K_GROUP);
			setState(3753);
			lb_group();
			setState(3755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3754);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_address_statementContext drop_network_address_statement() throws RecognitionException {
		Drop_network_address_statementContext _localctx = new Drop_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_drop_network_address_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			match(K_DROP);
			setState(3758);
			match(K_LOAD);
			setState(3759);
			match(K_NETWORK);
			setState(3760);
			match(K_ADDRESS);
			setState(3761);
			network_address();
			setState(3763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3762);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_interface_statementContext drop_network_interface_statement() throws RecognitionException {
		Drop_network_interface_statementContext _localctx = new Drop_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_drop_network_interface_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			match(K_DROP);
			setState(3766);
			match(K_NETWORK);
			setState(3767);
			match(K_INTERFACE);
			setState(3769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3768);
				ifNotExistsClause();
				}
				break;
			}
			setState(3771);
			network_interface();
			setState(3773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3772);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_notifier_statementContext drop_notifier_statement() throws RecognitionException {
		Drop_notifier_statementContext _localctx = new Drop_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_drop_notifier_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			match(K_DROP);
			setState(3776);
			match(K_NOTIFIER);
			setState(3778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(3777);
				ifNotExistsClause();
				}
				break;
			}
			setState(3780);
			notifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedure_statementContext drop_procedure_statement() throws RecognitionException {
		Drop_procedure_statementContext _localctx = new Drop_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_drop_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			match(K_DROP);
			setState(3783);
			match(K_PROCEDURE);
			setState(3785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3784);
				ifNotExistsClause();
				}
				break;
			}
			setState(3787);
			procedureReference();
			setState(3788);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public List<ProfileContext> profile() {
			return getRuleContexts(ProfileContext.class);
		}
		public ProfileContext profile(int i) {
			return getRuleContext(ProfileContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_profile_statementContext drop_profile_statement() throws RecognitionException {
		Drop_profile_statementContext _localctx = new Drop_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_drop_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(K_DROP);
			setState(3791);
			match(K_PROFILE);
			setState(3793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3792);
				ifNotExistsClause();
				}
				break;
			}
			setState(3795);
			profile();
			setState(3800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3796);
				match(COMMA);
				setState(3797);
				profile();
				}
				}
				setState(3802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3803);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_projection_statementContext drop_projection_statement() throws RecognitionException {
		Drop_projection_statementContext _localctx = new Drop_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_drop_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			match(K_DROP);
			setState(3807);
			match(K_PROJECTION);
			setState(3809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3808);
				ifNotExistsClause();
				}
				break;
			}
			setState(3811);
			projectionReference();
			setState(3816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3812);
				match(COMMA);
				setState(3813);
				projectionReference();
				}
				}
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3819);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public Drop_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_pool_statementContext drop_resource_pool_statement() throws RecognitionException {
		Drop_resource_pool_statementContext _localctx = new Drop_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_drop_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			match(K_DROP);
			setState(3823);
			match(K_RESOURCE);
			setState(3824);
			match(K_POOL);
			setState(3825);
			resourcePool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_role_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_role_statementContext drop_role_statement() throws RecognitionException {
		Drop_role_statementContext _localctx = new Drop_role_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_drop_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			match(K_DROP);
			setState(3828);
			match(K_ROLE);
			setState(3830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3829);
				ifNotExistsClause();
				}
				break;
			}
			setState(3832);
			role();
			setState(3837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3833);
				match(COMMA);
				setState(3834);
				role();
				}
				}
				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3840);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public Drop_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_routing_rule_statementContext drop_routing_rule_statement() throws RecognitionException {
		Drop_routing_rule_statementContext _localctx = new Drop_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_drop_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			match(K_DROP);
			setState(3844);
			match(K_ROUTING);
			setState(3845);
			match(K_RULE);
			setState(3846);
			routingRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_statementContext drop_schema_statement() throws RecognitionException {
		Drop_schema_statementContext _localctx = new Drop_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_drop_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			match(K_DROP);
			setState(3849);
			match(K_SCHEMA);
			setState(3851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3850);
				ifNotExistsClause();
				}
				break;
			}
			setState(3853);
			schemaReference();
			setState(3858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3854);
				match(COMMA);
				setState(3855);
				schemaReference();
				}
				}
				setState(3860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3861);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequence_statementContext drop_sequence_statement() throws RecognitionException {
		Drop_sequence_statementContext _localctx = new Drop_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_drop_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(K_DROP);
			setState(3865);
			match(K_SEQUENCE);
			setState(3867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3866);
				ifNotExistsClause();
				}
				break;
			}
			setState(3869);
			sequenceReference();
			setState(3874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3870);
				match(COMMA);
				setState(3871);
				sequenceReference();
				}
				}
				setState(3876);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3877);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_subnet_statementContext drop_subnet_statement() throws RecognitionException {
		Drop_subnet_statementContext _localctx = new Drop_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_drop_subnet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			match(K_DROP);
			setState(3881);
			match(K_SUBNET);
			setState(3883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(3882);
				ifNotExistsClause();
				}
				break;
			}
			setState(3885);
			subnet();
			setState(3887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3886);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_table_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_drop_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(K_DROP);
			setState(3890);
			match(K_TABLE);
			setState(3892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3891);
				ifNotExistsClause();
				}
				break;
			}
			setState(3894);
			tableReference();
			setState(3899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3895);
				match(COMMA);
				setState(3896);
				tableReference();
				}
				}
				setState(3901);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3902);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_index_statementContext drop_text_index_statement() throws RecognitionException {
		Drop_text_index_statementContext _localctx = new Drop_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_drop_text_index_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3905);
			match(K_DROP);
			setState(3906);
			match(K_TEXT);
			setState(3907);
			match(K_INDEX);
			setState(3909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3908);
				ifNotExistsClause();
				}
				break;
			}
			setState(3911);
			txtIndexReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_transform_function_statementContext drop_transform_function_statement() throws RecognitionException {
		Drop_transform_function_statementContext _localctx = new Drop_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_drop_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			match(K_DROP);
			setState(3914);
			match(K_TRANSFORM);
			setState(3915);
			match(K_FUNCTION);
			setState(3917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3916);
				ifNotExistsClause();
				}
				break;
			}
			setState(3919);
			functionReference();
			setState(3920);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_user_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_statementContext drop_user_statement() throws RecognitionException {
		Drop_user_statementContext _localctx = new Drop_user_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_drop_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			match(K_DROP);
			setState(3923);
			match(K_USER);
			setState(3925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3924);
				ifNotExistsClause();
				}
				break;
			}
			setState(3927);
			user();
			setState(3932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3928);
				match(COMMA);
				setState(3929);
				user();
				}
				}
				setState(3934);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3935);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_view_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Drop_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_statementContext drop_view_statement() throws RecognitionException {
		Drop_view_statementContext _localctx = new Drop_view_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_drop_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			match(K_DROP);
			setState(3939);
			match(K_VIEW);
			setState(3941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(3940);
				ifNotExistsClause();
				}
				break;
			}
			setState(3943);
			viewReference();
			setState(3948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3944);
				match(COMMA);
				setState(3945);
				viewReference();
				}
				}
				setState(3950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class End_statementContext extends ParserRuleContext {
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public End_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnd_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnd_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnd_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_statementContext end_statement() throws RecognitionException {
		End_statementContext _localctx = new End_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_end_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3951);
			match(K_END);
			setState(3953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(3952);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPLAIN() { return getToken(VSqlParser.K_EXPLAIN, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VERBOSE() { return getToken(VSqlParser.K_VERBOSE, 0); }
		public TerminalNode K_JSON() { return getToken(VSqlParser.K_JSON, 0); }
		public TerminalNode K_ANNOTATED() { return getToken(VSqlParser.K_ANNOTATED, 0); }
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955);
			match(K_EXPLAIN);
			setState(3957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3956);
				hints();
				}
			}

			setState(3960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) {
				{
				setState(3959);
				_la = _input.LA(1);
				if ( !(_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3962);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Export_to_parquet_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_DIRECTORY() { return getToken(VSqlParser.K_DIRECTORY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_COMPRESSION() { return getToken(VSqlParser.K_COMPRESSION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ROWGROUPSIZEMB() { return getToken(VSqlParser.K_ROWGROUPSIZEMB, 0); }
		public TerminalNode K_FILESIZEMB() { return getToken(VSqlParser.K_FILESIZEMB, 0); }
		public TerminalNode K_FILEMODE() { return getToken(VSqlParser.K_FILEMODE, 0); }
		public TerminalNode K_DIRMODE() { return getToken(VSqlParser.K_DIRMODE, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Export_to_parquet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_parquet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_parquet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_parquet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_parquet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_parquet_statementContext export_to_parquet_statement() throws RecognitionException {
		Export_to_parquet_statementContext _localctx = new Export_to_parquet_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_export_to_parquet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			match(K_EXPORT);
			setState(3965);
			match(K_TO);
			setState(3966);
			match(K_PARQUET);
			setState(3967);
			match(OPEN_PAREN);
			setState(3968);
			match(K_DIRECTORY);
			setState(3969);
			match(EQUAL);
			setState(3970);
			path();
			setState(3975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(3971);
				match(COMMA);
				setState(3972);
				match(K_COMPRESSION);
				setState(3973);
				match(EQUAL);
				setState(3974);
				string();
				}
				break;
			}
			setState(3981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(3977);
				match(COMMA);
				setState(3978);
				match(K_ROWGROUPSIZEMB);
				setState(3979);
				match(EQUAL);
				setState(3980);
				string();
				}
				break;
			}
			setState(3987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(3983);
				match(COMMA);
				setState(3984);
				match(K_FILESIZEMB);
				setState(3985);
				match(EQUAL);
				setState(3986);
				string();
				}
				break;
			}
			setState(3993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(3989);
				match(COMMA);
				setState(3990);
				match(K_FILEMODE);
				setState(3991);
				match(EQUAL);
				setState(3992);
				string();
				}
				break;
			}
			setState(3999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3995);
				match(COMMA);
				setState(3996);
				match(K_DIRMODE);
				setState(3997);
				match(EQUAL);
				setState(3998);
				string();
				}
			}

			setState(4001);
			match(CLOSE_PAREN);
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OVER) {
				{
				setState(4002);
				over_clause();
				}
			}

			setState(4005);
			match(K_AS);
			setState(4006);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Export_to_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public Export_to_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_vertica_statementContext export_to_vertica_statement() throws RecognitionException {
		Export_to_vertica_statementContext _localctx = new Export_to_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_export_to_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4008);
			match(K_EXPORT);
			setState(4009);
			match(K_TO);
			setState(4010);
			match(K_VERTICA);
			setState(4011);
			tableReference();
			setState(4013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 319L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
				{
				setState(4012);
				columns();
				}
			}

			setState(4022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_AS:
				{
				{
				setState(4015);
				match(K_AS);
				setState(4016);
				select_statement();
				}
				}
				break;
			case K_FROM:
				{
				{
				setState(4017);
				match(K_FROM);
				setState(4018);
				tableReference();
				setState(4020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 319L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(4019);
					columns();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_statements_statementContext extends ParserRuleContext {
		public Grant_authentication_to_statementContext grant_authentication_to_statement() {
			return getRuleContext(Grant_authentication_to_statementContext.class,0);
		}
		public Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() {
			return getRuleContext(Grant_privileges_on_database_statementContext.class,0);
		}
		public Grant_on_library_statementContext grant_on_library_statement() {
			return getRuleContext(Grant_on_library_statementContext.class,0);
		}
		public Grant_on_model_statementContext grant_on_model_statement() {
			return getRuleContext(Grant_on_model_statementContext.class,0);
		}
		public Grant_on_procedure_statementContext grant_on_procedure_statement() {
			return getRuleContext(Grant_on_procedure_statementContext.class,0);
		}
		public Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() {
			return getRuleContext(Grant_on_resourcepool_statementContext.class,0);
		}
		public Grant_on_schema_statementContext grant_on_schema_statement() {
			return getRuleContext(Grant_on_schema_statementContext.class,0);
		}
		public Grant_on_sequence_statementContext grant_on_sequence_statement() {
			return getRuleContext(Grant_on_sequence_statementContext.class,0);
		}
		public Grant_on_location_statementContext grant_on_location_statement() {
			return getRuleContext(Grant_on_location_statementContext.class,0);
		}
		public Grant_on_table_statementContext grant_on_table_statement() {
			return getRuleContext(Grant_on_table_statementContext.class,0);
		}
		public Grant_on_ude_statementContext grant_on_ude_statement() {
			return getRuleContext(Grant_on_ude_statementContext.class,0);
		}
		public Grant_on_view_statementContext grant_on_view_statement() {
			return getRuleContext(Grant_on_view_statementContext.class,0);
		}
		public Grant_on_role_statementContext grant_on_role_statement() {
			return getRuleContext(Grant_on_role_statementContext.class,0);
		}
		public Grant_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_statements_statementContext grant_statements_statement() throws RecognitionException {
		Grant_statements_statementContext _localctx = new Grant_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_grant_statements_statement);
		try {
			setState(4037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4024);
				grant_authentication_to_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				grant_privileges_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4026);
				grant_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4027);
				grant_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4028);
				grant_on_procedure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4029);
				grant_on_resourcepool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4030);
				grant_on_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4031);
				grant_on_sequence_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4032);
				grant_on_location_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4033);
				grant_on_table_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4034);
				grant_on_ude_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4035);
				grant_on_view_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4036);
				grant_on_role_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_view_statementContext grant_on_view_statement() throws RecognitionException {
		Grant_on_view_statementContext _localctx = new Grant_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_grant_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			match(K_GRANT);
			setState(4042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4040);
				match(K_SELECT);
				}
				break;
			case K_ALL:
			case K_EXCLUDE:
			case K_INCLUDE:
			case K_MATERIALIZE:
				{
				setState(4041);
				schema_privileges_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4044);
			match(K_ON);
			setState(4045);
			tableReference();
			setState(4050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4046);
				match(COMMA);
				setState(4047);
				tableReference();
				}
				}
				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4053);
			match(K_TO);
			setState(4054);
			grantees();
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4055);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_ude_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Grant_on_ude_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_ude_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_ude_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_ude_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_ude_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_ude_statementContext grant_on_ude_statement() throws RecognitionException {
		Grant_on_ude_statementContext _localctx = new Grant_on_ude_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_grant_on_ude_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4058);
			match(K_GRANT);
			setState(4064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4059);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4060);
				match(K_ALL);
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4061);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4102);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4066);
				match(K_ON);
				setState(4077);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4067);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4068);
					match(K_AGGREGATE);
					setState(4069);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4070);
					match(K_ANALYTIC);
					setState(4071);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4072);
					match(K_TRANSFORM);
					setState(4073);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4074);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4075);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4076);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4079);
				functionReference();
				setState(4080);
				argument_list();
				setState(4087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4081);
					match(COMMA);
					setState(4082);
					functionReference();
					setState(4083);
					argument_list();
					}
					}
					setState(4089);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4090);
				match(K_ALL);
				setState(4091);
				match(K_FUNCTIONS);
				setState(4092);
				match(K_IN);
				setState(4093);
				match(K_SCHEMA);
				setState(4094);
				schemaReference();
				setState(4099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4095);
					match(COMMA);
					setState(4096);
					schemaReference();
					}
					}
					setState(4101);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4104);
			match(K_TO);
			setState(4105);
			grantees();
			setState(4107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4106);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public Grant_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_table_statementContext grant_on_table_statement() throws RecognitionException {
		Grant_on_table_statementContext _localctx = new Grant_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_grant_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			match(K_GRANT);
			setState(4122);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4110);
				schema_privilege();
				setState(4115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4111);
					match(COMMA);
					setState(4112);
					schema_privilege();
					}
					}
					setState(4117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4118);
				match(K_ALL);
				setState(4120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4119);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4124);
			match(K_ON);
			setState(4148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_TABLE:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				{
				setState(4126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(4125);
					match(K_TABLE);
					}
				}

				setState(4128);
				tableReference();
				setState(4133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4129);
					match(COMMA);
					setState(4130);
					tableReference();
					}
					}
					setState(4135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4136);
				match(K_ALL);
				setState(4137);
				match(K_TABLES);
				setState(4138);
				match(K_IN);
				setState(4139);
				match(K_SCHEMA);
				setState(4140);
				schemaReference();
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4141);
					match(COMMA);
					setState(4142);
					schemaReference();
					}
					}
					setState(4147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4150);
			match(K_TO);
			setState(4151);
			grantees();
			setState(4153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4152);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_location_statementContext grant_on_location_statement() throws RecognitionException {
		Grant_on_location_statementContext _localctx = new Grant_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_grant_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4155);
			match(K_GRANT);
			setState(4168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4156);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4157);
					match(COMMA);
					setState(4158);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4163);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4164);
				match(K_ALL);
				setState(4166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4165);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4170);
			match(K_ON);
			setState(4171);
			match(K_LOCATION);
			setState(4172);
			path();
			setState(4173);
			match(K_TO);
			setState(4174);
			grantees();
			setState(4176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4175);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Grant_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_sequence_statementContext grant_on_sequence_statement() throws RecognitionException {
		Grant_on_sequence_statementContext _localctx = new Grant_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_grant_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4178);
			match(K_GRANT);
			setState(4184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4179);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4180);
				match(K_ALL);
				setState(4182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4181);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4186);
			match(K_ON);
			setState(4208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4187);
				match(K_SEQUENCE);
				setState(4188);
				sequenceReference();
				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4189);
					match(COMMA);
					setState(4190);
					sequenceReference();
					}
					}
					setState(4195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4196);
				match(K_ALL);
				setState(4197);
				match(K_SEQUENCES);
				setState(4198);
				match(K_IN);
				setState(4199);
				match(K_SCHEMA);
				setState(4200);
				schemaReference();
				setState(4205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4201);
					match(COMMA);
					setState(4202);
					schemaReference();
					}
					}
					setState(4207);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4210);
			match(K_TO);
			setState(4211);
			grantees();
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4212);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_schema_statementContext grant_on_schema_statement() throws RecognitionException {
		Grant_on_schema_statementContext _localctx = new Grant_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_grant_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4215);
			match(K_GRANT);
			setState(4228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4216);
				schema_privilege();
				setState(4221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4217);
					match(COMMA);
					setState(4218);
					schema_privilege();
					}
					}
					setState(4223);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4224);
				match(K_ALL);
				setState(4226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4225);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4230);
			match(K_ON);
			setState(4231);
			match(K_SCHEMA);
			setState(4232);
			schemaReference();
			setState(4237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4233);
				match(COMMA);
				setState(4234);
				schemaReference();
				}
				}
				setState(4239);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4240);
			match(K_TO);
			setState(4241);
			grantees();
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4242);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_privilegeContext extends ParserRuleContext {
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public Schema_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privilegeContext schema_privilege() throws RecognitionException {
		Schema_privilegeContext _localctx = new Schema_privilegeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_schema_privilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4245);
			_la = _input.LA(1);
			if ( !(_la==K_CREATE || _la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || (((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 98305L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_role_statementContext grant_on_role_statement() throws RecognitionException {
		Grant_on_role_statementContext _localctx = new Grant_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_grant_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(K_GRANT);
			setState(4248);
			role();
			setState(4253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4249);
				match(COMMA);
				setState(4250);
				role();
				}
				}
				setState(4255);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4256);
			match(K_TO);
			setState(4257);
			grantees();
			setState(4259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4258);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_resourcepool_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_resourcepool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_resourcepool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_resourcepool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_resourcepool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_resourcepool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() throws RecognitionException {
		Grant_on_resourcepool_statementContext _localctx = new Grant_on_resourcepool_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_grant_on_resourcepool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4261);
			match(K_GRANT);
			setState(4267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4262);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4263);
				match(K_ALL);
				setState(4265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4264);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4269);
			match(K_ON);
			setState(4270);
			match(K_RESOURCE);
			setState(4271);
			match(K_POOL);
			setState(4272);
			resourcePool();
			setState(4277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4273);
				match(COMMA);
				setState(4274);
				resourcePool();
				}
				}
				setState(4279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4280);
			match(K_TO);
			setState(4281);
			grantees();
			setState(4283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4282);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_procedure_statementContext grant_on_procedure_statement() throws RecognitionException {
		Grant_on_procedure_statementContext _localctx = new Grant_on_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_grant_on_procedure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(K_GRANT);
			setState(4291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4286);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4287);
				match(K_ALL);
				setState(4289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4288);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4293);
			match(K_ON);
			setState(4294);
			match(K_PROCEDURE);
			setState(4295);
			procedureReference();
			setState(4296);
			argument_list();
			setState(4303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4297);
				match(COMMA);
				setState(4298);
				procedureReference();
				setState(4299);
				argument_list();
				}
				}
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4306);
			match(K_TO);
			setState(4307);
			grantees();
			setState(4309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4308);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_model_statementContext grant_on_model_statement() throws RecognitionException {
		Grant_on_model_statementContext _localctx = new Grant_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_grant_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4311);
			match(K_GRANT);
			setState(4317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4312);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4313);
				match(K_ALL);
				setState(4315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4314);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4319);
			match(K_ON);
			setState(4320);
			match(K_MODEL);
			setState(4321);
			modelReference();
			setState(4326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4322);
				match(COMMA);
				setState(4323);
				modelReference();
				}
				}
				setState(4328);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4329);
			match(K_TO);
			setState(4330);
			grantees();
			setState(4332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4331);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_library_statementContext grant_on_library_statement() throws RecognitionException {
		Grant_on_library_statementContext _localctx = new Grant_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_grant_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			match(K_GRANT);
			setState(4340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4335);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4336);
				match(K_ALL);
				setState(4338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4337);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4342);
			match(K_ON);
			setState(4343);
			match(K_LIBRARY);
			setState(4344);
			libraryReference();
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4345);
				match(COMMA);
				setState(4346);
				libraryReference();
				}
				}
				setState(4351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4352);
			match(K_TO);
			setState(4353);
			grantees();
			setState(4355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4354);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_privileges_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_privileges_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_privileges_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_privileges_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_privileges_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_privileges_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() throws RecognitionException {
		Grant_privileges_on_database_statementContext _localctx = new Grant_privileges_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_grant_privileges_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4357);
			match(K_GRANT);
			setState(4364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
				{
				setState(4358);
				match(K_CREATE);
				}
				break;
			case K_TEMP:
				{
				setState(4359);
				match(K_TEMP);
				}
				break;
			case K_ALL:
				{
				{
				setState(4360);
				match(K_ALL);
				setState(4362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4361);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4366);
			match(K_ON);
			setState(4367);
			match(K_DATABASE);
			setState(4368);
			dbname();
			setState(4369);
			match(K_TO);
			setState(4370);
			grantees();
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4371);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_authentication_to_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_to_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_to_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_to_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_to_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_to_statementContext grant_authentication_to_statement() throws RecognitionException {
		Grant_authentication_to_statementContext _localctx = new Grant_authentication_to_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_grant_authentication_to_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			match(K_GRANT);
			setState(4375);
			match(K_AUTHENTICATION);
			setState(4376);
			method();
			setState(4377);
			match(K_TO);
			setState(4378);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWithGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWithGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4380);
			match(K_WITH);
			setState(4381);
			match(K_GRANT);
			setState(4382);
			match(K_OPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteesContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public GranteesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantees; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantees(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantees(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantees(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteesContext grantees() throws RecognitionException {
		GranteesContext _localctx = new GranteesContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_grantees);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384);
			grantee();
			setState(4389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4385);
				match(COMMA);
				setState(4386);
				grantee();
				}
				}
				setState(4391);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GranteeContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_grantee);
		try {
			setState(4394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4392);
				user();
				}
				break;
			case K_PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4393);
				match(K_PUBLIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_statementContext grant_authentication_statement() throws RecognitionException {
		Grant_authentication_statementContext _localctx = new Grant_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_grant_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4396);
			match(K_GRANT);
			setState(4397);
			match(K_AUTHENTICATION);
			setState(4398);
			auth_method_name();
			setState(4399);
			match(K_TO);
			setState(4400);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Insert_valuesContext insert_values() {
			return getRuleContext(Insert_valuesContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4402);
			match(K_INSERT);
			setState(4404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4403);
				hints();
				}
			}

			setState(4406);
			match(K_INTO);
			setState(4407);
			tableReference();
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4408);
				columns();
				}
				break;
			}
			setState(4411);
			insert_values();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_valuesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Insert_valuesContext insert_values() {
			return getRuleContext(Insert_valuesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public With_statementContext with_statement() {
			return getRuleContext(With_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Insert_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInsert_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInsert_values(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInsert_values(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_valuesContext insert_values() throws RecognitionException {
		Insert_valuesContext _localctx = new Insert_valuesContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_insert_values);
		try {
			setState(4428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4413);
				match(OPEN_PAREN);
				setState(4414);
				insert_values();
				setState(4415);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4426);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(4417);
					match(K_DEFAULT);
					setState(4418);
					match(K_VALUES);
					}
					}
					break;
				case K_VALUES:
					{
					{
					setState(4419);
					match(K_VALUES);
					setState(4420);
					match(OPEN_PAREN);
					setState(4421);
					expressions();
					setState(4422);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_WITH:
					{
					setState(4424);
					with_statement();
					}
					break;
				case K_SELECT:
				case K_AT:
				case OPEN_PAREN:
					{
					setState(4425);
					select_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode K_MERGE() { return getToken(VSqlParser.K_MERGE, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public List<MatchingClauseContext> matchingClause() {
			return getRuleContexts(MatchingClauseContext.class);
		}
		public MatchingClauseContext matchingClause(int i) {
			return getRuleContext(MatchingClauseContext.class,i);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4430);
			match(K_MERGE);
			setState(4432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4431);
				hints();
				}
			}

			setState(4434);
			match(K_INTO);
			setState(4435);
			tableReference();
			setState(4437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(4436);
				alias();
				}
			}

			setState(4439);
			match(K_USING);
			setState(4442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4440);
				tableReference();
				}
				break;
			case 2:
				{
				setState(4441);
				select_statement();
				}
				break;
			}
			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
				{
				setState(4444);
				alias();
				}
			}

			setState(4447);
			joinPredicate();
			setState(4449); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4448);
				matchingClause();
				}
				}
				setState(4451); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchingClauseContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(VSqlParser.K_WHEN, 0); }
		public TerminalNode K_MATCHED() { return getToken(VSqlParser.K_MATCHED, 0); }
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public MatchingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatchingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatchingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatchingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingClauseContext matchingClause() throws RecognitionException {
		MatchingClauseContext _localctx = new MatchingClauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_matchingClause);
		int _la;
		try {
			setState(4495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4453);
				match(K_WHEN);
				setState(4454);
				match(K_MATCHED);
				setState(4455);
				match(K_THEN);
				setState(4456);
				match(K_UPDATE);
				setState(4459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4457);
					match(K_AND);
					setState(4458);
					predicates();
					}
				}

				setState(4461);
				match(K_THEN);
				setState(4462);
				match(K_UPDATE);
				setState(4463);
				match(K_SET);
				{
				setState(4464);
				column();
				setState(4465);
				match(EQUAL);
				setState(4466);
				value();
				}
				setState(4474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 143L) != 0) {
					{
					{
					setState(4468);
					column();
					setState(4469);
					match(EQUAL);
					setState(4470);
					value();
					}
					}
					setState(4476);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(4477);
					where_clause();
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4480);
				match(K_WHEN);
				setState(4481);
				match(K_NOT);
				setState(4482);
				match(K_MATCHED);
				setState(4485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4483);
					match(K_AND);
					setState(4484);
					predicates();
					}
				}

				setState(4487);
				match(K_THEN);
				setState(4488);
				match(K_INSERT);
				setState(4489);
				columns();
				setState(4490);
				match(K_VALUES);
				setState(4491);
				match(OPEN_PAREN);
				setState(4492);
				values();
				setState(4493);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Profile_statementContext extends ParserRuleContext {
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Profile_statementContext profile_statement() throws RecognitionException {
		Profile_statementContext _localctx = new Profile_statementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_profile_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4497);
			match(K_PROFILE);
			setState(4498);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Release_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_RELEASE() { return getToken(VSqlParser.K_RELEASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Release_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRelease_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRelease_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRelease_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_savepoint_statementContext release_savepoint_statement() throws RecognitionException {
		Release_savepoint_statementContext _localctx = new Release_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_release_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4500);
			match(K_RELEASE);
			setState(4502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				setState(4501);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4504);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_statements_statementContext extends ParserRuleContext {
		public Revoke_authentication_statementContext revoke_authentication_statement() {
			return getRuleContext(Revoke_authentication_statementContext.class,0);
		}
		public Revoke_on_database_statementContext revoke_on_database_statement() {
			return getRuleContext(Revoke_on_database_statementContext.class,0);
		}
		public Revoke_on_library_statementContext revoke_on_library_statement() {
			return getRuleContext(Revoke_on_library_statementContext.class,0);
		}
		public Revoke_on_model_statementContext revoke_on_model_statement() {
			return getRuleContext(Revoke_on_model_statementContext.class,0);
		}
		public Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() {
			return getRuleContext(Revoke_on_prodecure_statementContext.class,0);
		}
		public Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() {
			return getRuleContext(Revoke_on_resource_pool_statementContext.class,0);
		}
		public Revoke_on_role_statementContext revoke_on_role_statement() {
			return getRuleContext(Revoke_on_role_statementContext.class,0);
		}
		public Revoke_on_schema_statementContext revoke_on_schema_statement() {
			return getRuleContext(Revoke_on_schema_statementContext.class,0);
		}
		public Revoke_on_sequence_statementContext revoke_on_sequence_statement() {
			return getRuleContext(Revoke_on_sequence_statementContext.class,0);
		}
		public Revoke_on_location_statementContext revoke_on_location_statement() {
			return getRuleContext(Revoke_on_location_statementContext.class,0);
		}
		public Revoke_on_table_statementContext revoke_on_table_statement() {
			return getRuleContext(Revoke_on_table_statementContext.class,0);
		}
		public Revoke_on_function_statementContext revoke_on_function_statement() {
			return getRuleContext(Revoke_on_function_statementContext.class,0);
		}
		public Revoke_on_view_statementContext revoke_on_view_statement() {
			return getRuleContext(Revoke_on_view_statementContext.class,0);
		}
		public Revoke_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statements_statementContext revoke_statements_statement() throws RecognitionException {
		Revoke_statements_statementContext _localctx = new Revoke_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revoke_statements_statement);
		try {
			setState(4519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4506);
				revoke_authentication_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4507);
				revoke_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4508);
				revoke_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4509);
				revoke_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4510);
				revoke_on_prodecure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4511);
				revoke_on_resource_pool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4512);
				revoke_on_role_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4513);
				revoke_on_schema_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4514);
				revoke_on_sequence_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4515);
				revoke_on_location_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4516);
				revoke_on_table_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4517);
				revoke_on_function_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4518);
				revoke_on_view_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_view_statementContext revoke_on_view_statement() throws RecognitionException {
		Revoke_on_view_statementContext _localctx = new Revoke_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revoke_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4521);
			match(K_REVOKE);
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4522);
				match(K_GRANT);
				setState(4523);
				match(K_OPTION);
				setState(4524);
				match(K_FOR);
				}
			}

			setState(4532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4527);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4528);
				match(K_ALL);
				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4529);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4534);
			match(K_ON);
			setState(4535);
			tableReference();
			setState(4540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4536);
				match(COMMA);
				setState(4537);
				tableReference();
				}
				}
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4543);
			match(K_FROM);
			setState(4544);
			grantees();
			setState(4546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4545);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Revoke_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_function_statementContext revoke_on_function_statement() throws RecognitionException {
		Revoke_on_function_statementContext _localctx = new Revoke_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_revoke_on_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(K_REVOKE);
			setState(4552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4549);
				match(K_GRANT);
				setState(4550);
				match(K_OPTION);
				setState(4551);
				match(K_FOR);
				}
			}

			setState(4559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4554);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4555);
				match(K_ALL);
				setState(4557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4556);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4561);
				match(K_ON);
				setState(4572);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4562);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4563);
					match(K_AGGREGATE);
					setState(4564);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4565);
					match(K_ANALYTIC);
					setState(4566);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4567);
					match(K_TRANSFORM);
					setState(4568);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4569);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4570);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4571);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4574);
				functionReference();
				setState(4575);
				argument_list();
				setState(4582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4576);
					match(COMMA);
					setState(4577);
					functionReference();
					setState(4578);
					argument_list();
					}
					}
					setState(4584);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4585);
				match(K_ALL);
				setState(4586);
				match(K_FUNCTIONS);
				setState(4587);
				match(K_IN);
				setState(4588);
				match(K_SCHEMA);
				setState(4589);
				schemaReference();
				setState(4594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4590);
					match(COMMA);
					setState(4591);
					schemaReference();
					}
					}
					setState(4596);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4599);
			match(K_FROM);
			setState(4600);
			grantees();
			setState(4602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4601);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> K_SELECT() { return getTokens(VSqlParser.K_SELECT); }
		public TerminalNode K_SELECT(int i) {
			return getToken(VSqlParser.K_SELECT, i);
		}
		public List<TerminalNode> K_INSERT() { return getTokens(VSqlParser.K_INSERT); }
		public TerminalNode K_INSERT(int i) {
			return getToken(VSqlParser.K_INSERT, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public List<TerminalNode> K_DELETE() { return getTokens(VSqlParser.K_DELETE); }
		public TerminalNode K_DELETE(int i) {
			return getToken(VSqlParser.K_DELETE, i);
		}
		public List<TerminalNode> K_REFERENCES() { return getTokens(VSqlParser.K_REFERENCES); }
		public TerminalNode K_REFERENCES(int i) {
			return getToken(VSqlParser.K_REFERENCES, i);
		}
		public List<TerminalNode> K_TRUNCATE() { return getTokens(VSqlParser.K_TRUNCATE); }
		public TerminalNode K_TRUNCATE(int i) {
			return getToken(VSqlParser.K_TRUNCATE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public Revoke_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_table_statementContext revoke_on_table_statement() throws RecognitionException {
		Revoke_on_table_statementContext _localctx = new Revoke_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_revoke_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4604);
			match(K_REVOKE);
			setState(4608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4605);
				match(K_GRANT);
				setState(4606);
				match(K_OPTION);
				setState(4607);
				match(K_FOR);
				}
			}

			setState(4622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
				{
				{
				setState(4610);
				_la = _input.LA(1);
				if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4611);
					match(COMMA);
					setState(4612);
					_la = _input.LA(1);
					if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4618);
				match(K_ALL);
				setState(4620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4619);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4624);
			match(K_ON);
			setState(4648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_TABLE:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				{
				setState(4626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(4625);
					match(K_TABLE);
					}
				}

				setState(4628);
				tableReference();
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4629);
					match(COMMA);
					setState(4630);
					tableReference();
					}
					}
					setState(4635);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4636);
				match(K_ALL);
				setState(4637);
				match(K_TABLES);
				setState(4638);
				match(K_IN);
				setState(4639);
				match(K_SCHEMA);
				setState(4640);
				schemaReference();
				setState(4645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4641);
					match(COMMA);
					setState(4642);
					schemaReference();
					}
					}
					setState(4647);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4650);
			match(K_FROM);
			setState(4651);
			grantees();
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4652);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_location_statementContext revoke_on_location_statement() throws RecognitionException {
		Revoke_on_location_statementContext _localctx = new Revoke_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_revoke_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4655);
			match(K_REVOKE);
			setState(4659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4656);
				match(K_GRANT);
				setState(4657);
				match(K_OPTION);
				setState(4658);
				match(K_FOR);
				}
			}

			setState(4673);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4661);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4662);
					match(COMMA);
					setState(4663);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4668);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4669);
				match(K_ALL);
				setState(4671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4670);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4675);
			match(K_ON);
			setState(4676);
			match(K_LOCATION);
			setState(4677);
			path();
			setState(4678);
			match(K_FROM);
			setState(4679);
			grantees();
			setState(4681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4680);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Revoke_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_sequence_statementContext revoke_on_sequence_statement() throws RecognitionException {
		Revoke_on_sequence_statementContext _localctx = new Revoke_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_revoke_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4683);
			match(K_REVOKE);
			setState(4687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4684);
				match(K_GRANT);
				setState(4685);
				match(K_OPTION);
				setState(4686);
				match(K_FOR);
				}
			}

			setState(4694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4689);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4690);
				match(K_ALL);
				setState(4692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4691);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4696);
			match(K_ON);
			setState(4718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4697);
				match(K_SEQUENCE);
				setState(4698);
				sequenceReference();
				setState(4703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4699);
					match(COMMA);
					setState(4700);
					sequenceReference();
					}
					}
					setState(4705);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4706);
				match(K_ALL);
				setState(4707);
				match(K_SEQUENCES);
				setState(4708);
				match(K_IN);
				setState(4709);
				match(K_SCHEMA);
				setState(4710);
				schemaReference();
				setState(4715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4711);
					match(COMMA);
					setState(4712);
					schemaReference();
					}
					}
					setState(4717);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4720);
			match(K_FROM);
			setState(4721);
			grantees();
			setState(4723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4722);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_schema_statementContext revoke_on_schema_statement() throws RecognitionException {
		Revoke_on_schema_statementContext _localctx = new Revoke_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_revoke_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			match(K_REVOKE);
			setState(4729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4726);
				match(K_GRANT);
				setState(4727);
				match(K_OPTION);
				setState(4728);
				match(K_FOR);
				}
			}

			setState(4743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4731);
				schema_privilege();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4732);
					match(COMMA);
					setState(4733);
					schema_privilege();
					}
					}
					setState(4738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4739);
				match(K_ALL);
				setState(4741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4740);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4745);
			match(K_ON);
			setState(4746);
			match(K_SCHEMA);
			setState(4747);
			schemaReference();
			setState(4752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4748);
				match(COMMA);
				setState(4749);
				schemaReference();
				}
				}
				setState(4754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4755);
			match(K_FROM);
			setState(4756);
			grantees();
			setState(4758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4757);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_ADMIN() { return getToken(VSqlParser.K_ADMIN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Revoke_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_role_statementContext revoke_on_role_statement() throws RecognitionException {
		Revoke_on_role_statementContext _localctx = new Revoke_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_revoke_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			match(K_REVOKE);
			setState(4764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(4761);
				match(K_ADMIN);
				setState(4762);
				match(K_OPTION);
				setState(4763);
				match(K_FOR);
				}
				break;
			}
			setState(4766);
			role();
			setState(4771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4767);
				match(COMMA);
				setState(4768);
				role();
				}
				}
				setState(4773);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4774);
			match(K_FROM);
			setState(4775);
			grantees();
			setState(4777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4776);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() throws RecognitionException {
		Revoke_on_resource_pool_statementContext _localctx = new Revoke_on_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_revoke_on_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4779);
			match(K_REVOKE);
			setState(4783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4780);
				match(K_GRANT);
				setState(4781);
				match(K_OPTION);
				setState(4782);
				match(K_FOR);
				}
			}

			setState(4790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4785);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4786);
				match(K_ALL);
				setState(4788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4787);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4792);
			match(K_ON);
			setState(4793);
			match(K_RESOURCE);
			setState(4794);
			match(K_POOL);
			setState(4795);
			resourcePool();
			setState(4800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4796);
				match(COMMA);
				setState(4797);
				resourcePool();
				}
				}
				setState(4802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4803);
			match(K_FROM);
			setState(4804);
			grantees();
			setState(4806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4805);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_prodecure_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_prodecure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_prodecure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_prodecure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_prodecure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_prodecure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() throws RecognitionException {
		Revoke_on_prodecure_statementContext _localctx = new Revoke_on_prodecure_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_revoke_on_prodecure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			match(K_REVOKE);
			setState(4812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4809);
				match(K_GRANT);
				setState(4810);
				match(K_OPTION);
				setState(4811);
				match(K_FOR);
				}
			}

			setState(4819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4814);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4815);
				match(K_ALL);
				setState(4817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4816);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4821);
			match(K_ON);
			setState(4822);
			match(K_PROCEDURE);
			setState(4823);
			procedureReference();
			setState(4824);
			argument_list();
			setState(4831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4825);
				match(COMMA);
				{
				setState(4826);
				procedureReference();
				setState(4827);
				argument_list();
				}
				}
				}
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4834);
			match(K_FROM);
			setState(4835);
			grantees();
			setState(4837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4836);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_model_statementContext revoke_on_model_statement() throws RecognitionException {
		Revoke_on_model_statementContext _localctx = new Revoke_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_revoke_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(K_REVOKE);
			setState(4843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4840);
				match(K_GRANT);
				setState(4841);
				match(K_OPTION);
				setState(4842);
				match(K_FOR);
				}
			}

			setState(4850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4845);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4846);
				match(K_ALL);
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4847);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4852);
			match(K_ON);
			setState(4853);
			match(K_MODEL);
			setState(4854);
			modelReference();
			setState(4859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4855);
				match(COMMA);
				setState(4856);
				modelReference();
				}
				}
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4862);
			match(K_FROM);
			setState(4863);
			grantees();
			setState(4865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4864);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_library_statementContext revoke_on_library_statement() throws RecognitionException {
		Revoke_on_library_statementContext _localctx = new Revoke_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_revoke_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			match(K_REVOKE);
			setState(4871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4868);
				match(K_GRANT);
				setState(4869);
				match(K_OPTION);
				setState(4870);
				match(K_FOR);
				}
			}

			setState(4878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4873);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4874);
				match(K_ALL);
				setState(4876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4875);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4880);
			match(K_ON);
			setState(4881);
			match(K_LIBRARY);
			setState(4882);
			libraryReference();
			setState(4887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4883);
				match(COMMA);
				setState(4884);
				libraryReference();
				}
				}
				setState(4889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4890);
			match(K_FROM);
			setState(4891);
			grantees();
			setState(4893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4892);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_CREATE() { return getTokens(VSqlParser.K_CREATE); }
		public TerminalNode K_CREATE(int i) {
			return getToken(VSqlParser.K_CREATE, i);
		}
		public List<TerminalNode> K_TEMP() { return getTokens(VSqlParser.K_TEMP); }
		public TerminalNode K_TEMP(int i) {
			return getToken(VSqlParser.K_TEMP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_database_statementContext revoke_on_database_statement() throws RecognitionException {
		Revoke_on_database_statementContext _localctx = new Revoke_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_revoke_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			match(K_REVOKE);
			setState(4899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4896);
				match(K_GRANT);
				setState(4897);
				match(K_OPTION);
				setState(4898);
				match(K_FOR);
				}
			}

			setState(4913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_TEMP:
				{
				{
				setState(4901);
				_la = _input.LA(1);
				if ( !(_la==K_CREATE || _la==K_TEMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4902);
					match(COMMA);
					setState(4903);
					_la = _input.LA(1);
					if ( !(_la==K_CREATE || _la==K_TEMP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4909);
				match(K_ALL);
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4910);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4915);
			match(K_ON);
			setState(4916);
			match(K_DATABASE);
			setState(4917);
			dbname();
			setState(4918);
			match(K_FROM);
			setState(4919);
			grantees();
			setState(4921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4920);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Revoke_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_authentication_statementContext revoke_authentication_statement() throws RecognitionException {
		Revoke_authentication_statementContext _localctx = new Revoke_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_revoke_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			match(K_REVOKE);
			setState(4924);
			match(K_AUTHENTICATION);
			setState(4925);
			auth_method_name();
			setState(4926);
			match(K_FROM);
			setState(4927);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			match(K_ROLLBACK);
			setState(4931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(4930);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rollback_to_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Rollback_to_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_to_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_to_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_to_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() throws RecognitionException {
		Rollback_to_savepoint_statementContext _localctx = new Rollback_to_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_rollback_to_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(K_ROLLBACK);
			setState(4934);
			match(K_TO);
			setState(4936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4935);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4938);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			match(K_SAVEPOINT);
			setState(4941);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_statementContext extends ParserRuleContext {
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Select_statementContext> select_statement() {
			return getRuleContexts(Select_statementContext.class);
		}
		public Select_statementContext select_statement(int i) {
			return getRuleContext(Select_statementContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public With_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWith_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWith_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWith_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_statementContext with_statement() throws RecognitionException {
		With_statementContext _localctx = new With_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_with_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			match(K_WITH);
			setState(4945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4944);
				hints();
				}
			}

			setState(4947);
			tableReference();
			setState(4948);
			match(K_AS);
			setState(4949);
			match(OPEN_PAREN);
			setState(4950);
			select_statement();
			setState(4951);
			match(CLOSE_PAREN);
			setState(4961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4952);
				match(COMMA);
				setState(4953);
				tableReference();
				setState(4954);
				match(K_AS);
				setState(4955);
				match(OPEN_PAREN);
				setState(4956);
				select_statement();
				setState(4957);
				match(CLOSE_PAREN);
				}
				}
				setState(4963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4964);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class At_epoch_clauseContext extends ParserRuleContext {
		public TerminalNode K_AT() { return getToken(VSqlParser.K_AT, 0); }
		public TerminalNode K_EPOCH() { return getToken(VSqlParser.K_EPOCH, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_LATEST() { return getToken(VSqlParser.K_LATEST, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public At_epoch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_epoch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAt_epoch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAt_epoch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAt_epoch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_epoch_clauseContext at_epoch_clause() throws RecognitionException {
		At_epoch_clauseContext _localctx = new At_epoch_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_at_epoch_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				{
				setState(4966);
				match(K_AT);
				setState(4967);
				match(K_EPOCH);
				setState(4970);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_LATEST:
					{
					setState(4968);
					match(K_LATEST);
					}
					break;
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(4969);
					number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4972);
				match(K_AT);
				setState(4973);
				match(K_TIME);
				setState(4974);
				string();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Select_queryContext> select_query() {
			return getRuleContexts(Select_queryContext.class);
		}
		public Select_queryContext select_query(int i) {
			return getRuleContext(Select_queryContext.class,i);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public List<TerminalNode> K_UNION() { return getTokens(VSqlParser.K_UNION); }
		public TerminalNode K_UNION(int i) {
			return getToken(VSqlParser.K_UNION, i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TerminalNode> K_DISTINCT() { return getTokens(VSqlParser.K_DISTINCT); }
		public TerminalNode K_DISTINCT(int i) {
			return getToken(VSqlParser.K_DISTINCT, i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_select_statement);
		int _la;
		try {
			int _alt;
			setState(4995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4977);
				match(OPEN_PAREN);
				setState(4978);
				select_statement();
				setState(4979);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AT) {
					{
					setState(4981);
					at_epoch_clause();
					}
				}

				setState(4984);
				select_query();
				setState(4992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						{
						setState(4985);
						match(K_UNION);
						setState(4987);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==K_ALL || _la==K_DISTINCT) {
							{
							setState(4986);
							_la = _input.LA(1);
							if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(4989);
						select_query();
						}
						}
						} 
					}
					setState(4994);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_datestyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DATESTYLE() { return getToken(VSqlParser.K_DATESTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ISO() { return getToken(VSqlParser.K_ISO, 0); }
		public TerminalNode K_GERMAN() { return getToken(VSqlParser.K_GERMAN, 0); }
		public TerminalNode K_SQL() { return getToken(VSqlParser.K_SQL, 0); }
		public TerminalNode K_POSTGRES() { return getToken(VSqlParser.K_POSTGRES, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode K_DMY() { return getToken(VSqlParser.K_DMY, 0); }
		public TerminalNode K_MDY() { return getToken(VSqlParser.K_MDY, 0); }
		public Set_datestyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_datestyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_datestyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_datestyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_datestyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_datestyle_statementContext set_datestyle_statement() throws RecognitionException {
		Set_datestyle_statementContext _localctx = new Set_datestyle_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_set_datestyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4997);
			match(K_SET);
			setState(4998);
			match(K_DATESTYLE);
			setState(4999);
			match(K_TO);
			setState(5012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ISO:
				{
				setState(5000);
				match(K_ISO);
				}
				break;
			case K_GERMAN:
				{
				setState(5001);
				match(K_GERMAN);
				}
				break;
			case K_SQL:
				{
				{
				setState(5002);
				match(K_SQL);
				setState(5005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5003);
					match(COMMA);
					setState(5004);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case K_POSTGRES:
				{
				{
				setState(5007);
				match(K_POSTGRES);
				setState(5010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5008);
					match(COMMA);
					setState(5009);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_escape_string_warning_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ESCAPE_STRING_WARNING() { return getToken(VSqlParser.K_ESCAPE_STRING_WARNING, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_escape_string_warning_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_escape_string_warning_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_escape_string_warning_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_escape_string_warning_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_escape_string_warning_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_escape_string_warning_statementContext set_escape_string_warning_statement() throws RecognitionException {
		Set_escape_string_warning_statementContext _localctx = new Set_escape_string_warning_statementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_set_escape_string_warning_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5014);
			match(K_SET);
			setState(5015);
			match(K_ESCAPE_STRING_WARNING);
			setState(5016);
			match(K_TO);
			setState(5017);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_intervalstyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_INTERVALSTYLE() { return getToken(VSqlParser.K_INTERVALSTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PLAIN() { return getToken(VSqlParser.K_PLAIN, 0); }
		public TerminalNode K_UNITS() { return getToken(VSqlParser.K_UNITS, 0); }
		public Set_intervalstyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_intervalstyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_intervalstyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_intervalstyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_intervalstyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_intervalstyle_statementContext set_intervalstyle_statement() throws RecognitionException {
		Set_intervalstyle_statementContext _localctx = new Set_intervalstyle_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_set_intervalstyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5019);
			match(K_SET);
			setState(5020);
			match(K_INTERVALSTYLE);
			setState(5021);
			match(K_TO);
			setState(5022);
			_la = _input.LA(1);
			if ( !(_la==K_PLAIN || _la==K_UNITS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_locale_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_LOCALE() { return getToken(VSqlParser.K_LOCALE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Set_locale_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_locale_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_locale_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_locale_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_locale_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_locale_statementContext set_locale_statement() throws RecognitionException {
		Set_locale_statementContext _localctx = new Set_locale_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_set_locale_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5024);
			match(K_SET);
			setState(5025);
			match(K_LOCALE);
			setState(5026);
			match(K_TO);
			setState(5027);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_role_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_role_statementContext set_role_statement() throws RecognitionException {
		Set_role_statementContext _localctx = new Set_role_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_set_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			match(K_SET);
			setState(5030);
			match(K_ROLE);
			setState(5052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				{
				setState(5031);
				role();
				setState(5036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5032);
					match(COMMA);
					setState(5033);
					role();
					}
					}
					setState(5038);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(5039);
				match(K_NONE);
				}
				break;
			case 3:
				{
				setState(5040);
				match(K_ALL);
				}
				break;
			case 4:
				{
				{
				setState(5041);
				match(K_ALL);
				setState(5042);
				match(K_EXCEPT);
				{
				setState(5043);
				role();
				setState(5048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5044);
					match(COMMA);
					setState(5045);
					role();
					}
					}
					setState(5050);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				}
				break;
			case 5:
				{
				setState(5051);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_search_path_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_search_path_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_search_path_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_search_path_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_search_path_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_search_path_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_search_path_statementContext set_search_path_statement() throws RecognitionException {
		Set_search_path_statementContext _localctx = new Set_search_path_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_set_search_path_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			match(K_SET);
			setState(5055);
			match(K_SEARCH_PATH);
			setState(5056);
			_la = _input.LA(1);
			if ( !(_la==K_TO || _la==EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				{
				setState(5057);
				schema();
				setState(5062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5058);
					match(COMMA);
					setState(5059);
					schema();
					}
					}
					setState(5064);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(5065);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_autocommit_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_AUTOCOMMIT() { return getToken(VSqlParser.K_AUTOCOMMIT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_autocommit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_autocommit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_autocommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_autocommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_autocommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_autocommit_statementContext set_session_autocommit_statement() throws RecognitionException {
		Set_session_autocommit_statementContext _localctx = new Set_session_autocommit_statementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_set_session_autocommit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5068);
			match(K_SET);
			setState(5069);
			match(K_SESSION);
			setState(5070);
			match(K_AUTOCOMMIT);
			setState(5071);
			match(K_TO);
			setState(5072);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_characteristics_as_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_CHARACTERISTICS() { return getToken(VSqlParser.K_CHARACTERISTICS, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public List<IsolationLevelContext> isolationLevel() {
			return getRuleContexts(IsolationLevelContext.class);
		}
		public IsolationLevelContext isolationLevel(int i) {
			return getRuleContext(IsolationLevelContext.class,i);
		}
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_session_characteristics_as_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_characteristics_as_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_characteristics_as_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() throws RecognitionException {
		Set_session_characteristics_as_transaction_statementContext _localctx = new Set_session_characteristics_as_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_set_session_characteristics_as_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5074);
			match(K_SET);
			setState(5075);
			match(K_SESSION);
			setState(5076);
			match(K_CHARACTERISTICS);
			setState(5077);
			match(K_AS);
			setState(5078);
			match(K_TRANSACTION);
			setState(5087); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(5087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					setState(5080);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5079);
						match(COMMA);
						}
					}

					setState(5082);
					isolationLevel();
					}
					break;
				case 2:
					{
					setState(5084);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5083);
						match(COMMA);
						}
					}

					setState(5086);
					transactionMode();
					}
					break;
				}
				}
				setState(5089); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & 140737488371713L) != 0 || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_graceperiod_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_graceperiod_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_graceperiod_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_graceperiod_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_graceperiod_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_graceperiod_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_graceperiod_statementContext set_session_graceperiod_statement() throws RecognitionException {
		Set_session_graceperiod_statementContext _localctx = new Set_session_graceperiod_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_set_session_graceperiod_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			match(K_SET);
			setState(5092);
			match(K_SESSION);
			setState(5093);
			match(K_GRACEPERIOD);
			setState(5098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5094);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5095);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5096);
				match(EQUAL);
				setState(5097);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_idlesessiontimeout_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_idlesessiontimeout_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_idlesessiontimeout_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_idlesessiontimeout_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() throws RecognitionException {
		Set_session_idlesessiontimeout_statementContext _localctx = new Set_session_idlesessiontimeout_statementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_set_session_idlesessiontimeout_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			match(K_SET);
			setState(5101);
			match(K_SESSION);
			setState(5102);
			match(K_IDLESESSIONTIMEOUT);
			setState(5107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5103);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5104);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5105);
				match(EQUAL);
				setState(5106);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_memorycap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_memorycap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_memorycap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_memorycap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_memorycap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_memorycap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_memorycap_statementContext set_session_memorycap_statement() throws RecognitionException {
		Set_session_memorycap_statementContext _localctx = new Set_session_memorycap_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_set_session_memorycap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			match(K_SET);
			setState(5110);
			match(K_SESSION);
			setState(5111);
			match(K_MEMORYCAP);
			setState(5116);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5112);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5113);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5114);
				match(EQUAL);
				setState(5115);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_multipleactiveresultsets_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MULTIPLEACTIVERESULTSETS() { return getToken(VSqlParser.K_MULTIPLEACTIVERESULTSETS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_multipleactiveresultsets_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_multipleactiveresultsets_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_multipleactiveresultsets_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() throws RecognitionException {
		Set_session_multipleactiveresultsets_statementContext _localctx = new Set_session_multipleactiveresultsets_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_set_session_multipleactiveresultsets_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			match(K_SET);
			setState(5119);
			match(K_SESSION);
			setState(5120);
			match(K_MULTIPLEACTIVERESULTSETS);
			setState(5121);
			match(K_TO);
			setState(5122);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RESOURCE_POOL() { return getToken(VSqlParser.K_RESOURCE_POOL, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_resource_pool_statementContext set_session_resource_pool_statement() throws RecognitionException {
		Set_session_resource_pool_statementContext _localctx = new Set_session_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_set_session_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			match(K_SET);
			setState(5125);
			match(K_SESSION);
			setState(5126);
			match(K_RESOURCE_POOL);
			setState(5127);
			match(EQUAL);
			setState(5130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5128);
				value();
				}
				break;
			case K_DEFAULT:
				{
				{
				setState(5129);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_runtimecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_runtimecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_runtimecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_runtimecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_runtimecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_runtimecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_runtimecap_statementContext set_session_runtimecap_statement() throws RecognitionException {
		Set_session_runtimecap_statementContext _localctx = new Set_session_runtimecap_statementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_set_session_runtimecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5132);
			match(K_SET);
			setState(5133);
			match(K_SESSION);
			setState(5134);
			match(K_RUNTIMECAP);
			setState(5139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5135);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5136);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5137);
				match(EQUAL);
				setState(5138);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_session_tempspacecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Set_session_tempspacecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_tempspacecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_tempspacecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_tempspacecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_tempspacecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() throws RecognitionException {
		Set_session_tempspacecap_statementContext _localctx = new Set_session_tempspacecap_statementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_set_session_tempspacecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(K_SET);
			setState(5142);
			match(K_SESSION);
			setState(5143);
			match(K_TEMPSPACECAP);
			setState(5146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5144);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5145);
				match(K_NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_standard_conforming_strings_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_STANDARD_CONFORMING_STRINGS() { return getToken(VSqlParser.K_STANDARD_CONFORMING_STRINGS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_standard_conforming_strings_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_standard_conforming_strings_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_standard_conforming_strings_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_standard_conforming_strings_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_standard_conforming_strings_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() throws RecognitionException {
		Set_standard_conforming_strings_statementContext _localctx = new Set_standard_conforming_strings_statementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_set_standard_conforming_strings_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(K_SET);
			setState(5149);
			match(K_STANDARD_CONFORMING_STRINGS);
			setState(5150);
			match(K_TO);
			setState(5151);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_time_zone_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_ZONE() { return getToken(VSqlParser.K_ZONE, 0); }
		public Set_time_zone_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_time_zone_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_time_zone_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_time_zone_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_time_zone_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_time_zone_statementContext set_time_zone_statement() throws RecognitionException {
		Set_time_zone_statementContext _localctx = new Set_time_zone_statementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_set_time_zone_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5153);
			match(K_SET);
			setState(5157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_TIME:
				{
				{
				setState(5154);
				match(K_TIME);
				setState(5155);
				match(K_ZONE);
				}
				}
				break;
			case K_TIMEZONE:
				{
				setState(5156);
				match(K_TIMEZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5159);
			match(K_TO);
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INTERVAL) {
				{
				setState(5160);
				match(K_INTERVAL);
				}
			}

			setState(5163);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public Show_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_statementContext show_statement() throws RecognitionException {
		Show_statementContext _localctx = new Show_statementContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_show_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5165);
			match(K_SHOW);
			setState(5168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5166);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5167);
				param();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_current_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_CURRENT() { return getToken(VSqlParser.K_CURRENT, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_current_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_current_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_current_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_current_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_current_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_current_statementContext show_current_statement() throws RecognitionException {
		Show_current_statementContext _localctx = new Show_current_statementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_show_current_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(K_SHOW);
			setState(5171);
			match(K_CURRENT);
			setState(5174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5172);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5173);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_database_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_database_statementContext show_database_statement() throws RecognitionException {
		Show_database_statementContext _localctx = new Show_database_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_show_database_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			match(K_SHOW);
			setState(5177);
			match(K_DATABASE);
			setState(5178);
			dbname();
			setState(5181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5179);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5180);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_node_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_node_statementContext show_node_statement() throws RecognitionException {
		Show_node_statementContext _localctx = new Show_node_statementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_show_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183);
			match(K_SHOW);
			setState(5184);
			match(K_NODE);
			setState(5185);
			node();
			setState(5188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5186);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5187);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_session_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETERS() { return getToken(VSqlParser.K_UDPARAMETERS, 0); }
		public Show_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_session_statementContext show_session_statement() throws RecognitionException {
		Show_session_statementContext _localctx = new Show_session_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_show_session_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(K_SHOW);
			setState(5191);
			match(K_SESSION);
			setState(5196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5192);
				match(K_ALL);
				}
				break;
			case K_UDPARAMETERS:
				{
				{
				setState(5193);
				match(K_UDPARAMETERS);
				setState(5194);
				match(K_ALL);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5195);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Start_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_START() { return getToken(VSqlParser.K_START, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public Start_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStart_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStart_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStart_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_transaction_statementContext start_transaction_statement() throws RecognitionException {
		Start_transaction_statementContext _localctx = new Start_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_start_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5198);
			match(K_START);
			setState(5199);
			match(K_TRANSACTION);
			setState(5205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ISOLATION) {
				{
				setState(5200);
				match(K_ISOLATION);
				setState(5201);
				match(K_LEVEL);
				setState(5202);
				isolationLevel();
				setState(5203);
				transactionMode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_table_statementContext extends ParserRuleContext {
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Truncate_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTruncate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTruncate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTruncate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_table_statementContext truncate_table_statement() throws RecognitionException {
		Truncate_table_statementContext _localctx = new Truncate_table_statementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_truncate_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			match(K_TRUNCATE);
			setState(5208);
			match(K_TABLE);
			setState(5209);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5211);
			match(K_UPDATE);
			setState(5213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5212);
				hints();
				}
			}

			setState(5215);
			tableReference();
			setState(5217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5216);
				alias();
				}
				break;
			}
			setState(5219);
			match(K_SET);
			setState(5220);
			expressions();
			setState(5222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(5221);
				from_clause();
				}
			}

			setState(5225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(5224);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Simple_select_query_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Simple_select_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSimple_select_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSimple_select_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSimple_select_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_select_query_clauseContext simple_select_query_clause() throws RecognitionException {
		Simple_select_query_clauseContext _localctx = new Simple_select_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_simple_select_query_clause);
		try {
			setState(5234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5227);
				match(OPEN_PAREN);
				setState(5228);
				simple_select_query_clause();
				setState(5229);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5231);
				select_clause();
				setState(5232);
				from_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_queryContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Timeseries_clauseContext timeseries_clause() {
			return getRuleContext(Timeseries_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Match_clauseContext match_clause() {
			return getRuleContext(Match_clauseContext.class,0);
		}
		public TerminalNode K_UNION() { return getToken(VSqlParser.K_UNION, 0); }
		public Except_clauseContext except_clause() {
			return getRuleContext(Except_clauseContext.class,0);
		}
		public Intersect_clauseContext intersect_clause() {
			return getRuleContext(Intersect_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_OF() { return getToken(VSqlParser.K_OF, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Select_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_queryContext select_query() throws RecognitionException {
		Select_queryContext _localctx = new Select_queryContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_select_query);
		int _la;
		try {
			int _alt;
			setState(5298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5236);
				match(OPEN_PAREN);
				setState(5237);
				select_query();
				setState(5238);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5240);
				select_clause();
				setState(5242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
				case 1:
					{
					setState(5241);
					into_clause();
					}
					break;
				}
				setState(5245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5244);
					from_clause();
					}
					break;
				}
				setState(5248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5247);
					where_clause();
					}
					break;
				}
				setState(5251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5250);
					timeseries_clause();
					}
					break;
				}
				setState(5254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5253);
					groupBy_clause();
					}
					break;
				}
				setState(5257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5256);
					having_clause();
					}
					break;
				}
				setState(5260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(5259);
					match_clause();
					}
					break;
				}
				setState(5266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5262);
					match(K_UNION);
					setState(5264);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
					case 1:
						{
						setState(5263);
						_la = _input.LA(1);
						if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				}
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5268);
					except_clause();
					}
					break;
				}
				setState(5272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5271);
					intersect_clause();
					}
					break;
				}
				setState(5275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(5274);
					orderby_clause();
					}
					break;
				}
				setState(5278);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5277);
					limit_clause();
					}
					break;
				}
				setState(5281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5280);
					offset_clause();
					}
					break;
				}
				setState(5296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5283);
					match(K_FOR);
					setState(5284);
					match(K_UPDATE);
					setState(5294);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
					case 1:
						{
						setState(5285);
						match(K_OF);
						setState(5286);
						tableReference();
						setState(5291);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,684,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(5287);
								match(COMMA);
								setState(5288);
								tableReference();
								}
								} 
							}
							setState(5293);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,684,_ctx);
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode K_OFFSET() { return getToken(VSqlParser.K_OFFSET, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5300);
			match(K_OFFSET);
			setState(5301);
			integerNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5303);
			match(K_LIMIT);
			setState(5306);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				{
				setState(5304);
				integerNumber();
				}
				break;
			case K_ALL:
				{
				setState(5305);
				match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_clauseContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public ElementsContext elements() {
			return getRuleContext(ElementsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_select_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5308);
			match(K_SELECT);
			setState(5310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5309);
				hints();
				}
			}

			setState(5313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_DISTINCT) {
				{
				setState(5312);
				_la = _input.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5315);
			elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Intersect_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTERSECT() { return getToken(VSqlParser.K_INTERSECT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Intersect_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intersect_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntersect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntersect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntersect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intersect_clauseContext intersect_clause() throws RecognitionException {
		Intersect_clauseContext _localctx = new Intersect_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_intersect_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			match(K_INTERSECT);
			setState(5318);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Except_clauseContext extends ParserRuleContext {
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Except_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_except_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExcept_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExcept_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExcept_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Except_clauseContext except_clause() throws RecognitionException {
		Except_clauseContext _localctx = new Except_clauseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_except_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5320);
			match(K_EXCEPT);
			setState(5321);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<DatasetContext> dataset() {
			return getRuleContexts(DatasetContext.class);
		}
		public DatasetContext dataset(int i) {
			return getRuleContext(DatasetContext.class,i);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_from_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			match(K_FROM);
			{
			setState(5324);
			dataset();
			setState(5331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,692,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5326);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5325);
						match(COMMA);
						}
					}

					setState(5328);
					dataset();
					}
					} 
				}
				setState(5333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,692,_ctx);
			}
			}
			setState(5335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5334);
				tableSample();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_into_clause);
		int _la;
		try {
			setState(5360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5337);
				match(K_INTO);
				setState(5339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(5338);
					match(K_TABLE);
					}
				}

				setState(5341);
				tableReference();
				setState(5343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5342);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(K_INTO);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_GLOBAL || _la==K_LOCAL) {
					{
					setState(5346);
					_la = _input.LA(1);
					if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5349);
				_la = _input.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(5350);
					match(K_TABLE);
					}
				}

				setState(5353);
				tableReference();
				setState(5358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
				case 1:
					{
					setState(5354);
					match(K_ON);
					setState(5355);
					match(K_COMMIT);
					setState(5356);
					_la = _input.LA(1);
					if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5357);
					match(K_ROWS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Timeseries_clauseContext extends ParserRuleContext {
		public TerminalNode K_TIMESERIES() { return getToken(VSqlParser.K_TIMESERIES, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Timeseries_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeseries_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTimeseries_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTimeseries_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTimeseries_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timeseries_clauseContext timeseries_clause() throws RecognitionException {
		Timeseries_clauseContext _localctx = new Timeseries_clauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_timeseries_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			match(K_TIMESERIES);
			setState(5363);
			columnReference();
			setState(5364);
			alias();
			setState(5365);
			over_clause();
			setState(5366);
			match(K_ORDER);
			setState(5367);
			match(K_BY);
			setState(5368);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public As_over_clauseContext as_over_clause() {
			return getRuleContext(As_over_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5370);
			match(K_OVER);
			setState(5371);
			match(OPEN_PAREN);
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5372);
				match(K_PARTITION);
				setState(5373);
				match(K_BY);
				setState(5374);
				columns();
				}
			}

			setState(5378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(5377);
				orderby_clause();
				}
			}

			setState(5380);
			match(CLOSE_PAREN);
			setState(5382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(5381);
				as_over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class As_over_clauseContext extends ParserRuleContext {
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public As_over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAs_over_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAs_over_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAs_over_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_over_clauseContext as_over_clause() throws RecognitionException {
		As_over_clauseContext _localctx = new As_over_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_as_over_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			match(K_AS);
			setState(5385);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public GroupBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGroupBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGroupBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGroupBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBy_clauseContext groupBy_clause() throws RecognitionException {
		GroupBy_clauseContext _localctx = new GroupBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_groupBy_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			match(K_GROUP);
			setState(5388);
			match(K_BY);
			setState(5390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5389);
				hints();
				}
			}

			setState(5392);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode K_HAVING() { return getToken(VSqlParser.K_HAVING, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			match(K_HAVING);
			setState(5395);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5397);
			match(K_WHERE);
			setState(5398);
			predicates();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Orderby_clauseContext extends ParserRuleContext {
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<OrderbyItemContext> orderbyItem() {
			return getRuleContexts(OrderbyItemContext.class);
		}
		public OrderbyItemContext orderbyItem(int i) {
			return getRuleContext(OrderbyItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderby_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderby_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_orderby_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5400);
			match(K_ORDER);
			setState(5401);
			match(K_BY);
			setState(5402);
			orderbyItem();
			setState(5407);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,704,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5403);
					match(COMMA);
					setState(5404);
					orderbyItem();
					}
					} 
				}
				setState(5409);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,704,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Match_clauseContext extends ParserRuleContext {
		public List<TerminalNode> K_MATCH() { return getTokens(VSqlParser.K_MATCH); }
		public TerminalNode K_MATCH(int i) {
			return getToken(VSqlParser.K_MATCH, i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public List<TerminalNode> K_BY() { return getTokens(VSqlParser.K_BY); }
		public TerminalNode K_BY(int i) {
			return getToken(VSqlParser.K_BY, i);
		}
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_DEFINE() { return getToken(VSqlParser.K_DEFINE, 0); }
		public TerminalNode K_PATTERN() { return getToken(VSqlParser.K_PATTERN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EVENTS() { return getToken(VSqlParser.K_EVENTS, 0); }
		public TerminalNode K_FIRST() { return getToken(VSqlParser.K_FIRST, 0); }
		public TerminalNode K_EVENT() { return getToken(VSqlParser.K_EVENT, 0); }
		public Match_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_clauseContext match_clause() throws RecognitionException {
		Match_clauseContext _localctx = new Match_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_match_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5410);
			match(K_MATCH);
			setState(5411);
			match(OPEN_PAREN);
			setState(5422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5412);
				match(K_PARTITION);
				setState(5413);
				match(K_BY);
				setState(5414);
				columnReference();
				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5415);
					match(COMMA);
					setState(5416);
					columnReference();
					}
					}
					setState(5421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5424);
			match(K_ORDER);
			setState(5425);
			match(K_BY);
			setState(5426);
			columnReference();
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5427);
				match(COMMA);
				setState(5428);
				columnReference();
				}
				}
				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5434);
			match(K_DEFINE);
			{
			setState(5435);
			id();
			setState(5436);
			match(K_AS);
			setState(5439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(5437);
				expression();
				}
				break;
			case 2:
				{
				setState(5438);
				predicates();
				}
				break;
			}
			}
			setState(5450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5441);
				match(COMMA);
				{
				setState(5442);
				id();
				setState(5443);
				match(K_AS);
				setState(5446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(5444);
					expression();
					}
					break;
				case 2:
					{
					setState(5445);
					predicates();
					}
					break;
				}
				}
				}
				}
				setState(5452);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5453);
			match(K_PATTERN);
			setState(5454);
			id();
			setState(5455);
			match(K_AS);
			setState(5456);
			match(OPEN_PAREN);
			setState(5457);
			id();
			setState(5458);
			match(CLOSE_PAREN);
			setState(5468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ROWS) {
				{
				{
				setState(5459);
				match(K_ROWS);
				setState(5460);
				match(K_MATCH);
				}
				setState(5466);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(5462);
					match(K_ALL);
					setState(5463);
					match(K_EVENTS);
					}
					}
					break;
				case K_FIRST:
					{
					{
					setState(5464);
					match(K_FIRST);
					setState(5465);
					match(K_EVENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5470);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_clauseContext extends ParserRuleContext {
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPartition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPartition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPartition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_clauseContext partition_clause() throws RecognitionException {
		Partition_clauseContext _localctx = new Partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_partition_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(K_PARTITION);
			setState(5473);
			match(K_BY);
			setState(5474);
			expression();
			setState(5476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUP) {
				{
				setState(5475);
				groupBy_clause();
				}
			}

			setState(5480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACTIVEPARTITIONCOUNT) {
				{
				setState(5478);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(5479);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Encoding_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODING() { return getToken(VSqlParser.K_ENCODING, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_BLOCK_DICT() { return getToken(VSqlParser.K_BLOCK_DICT, 0); }
		public TerminalNode K_BLOCKDICT_COMP() { return getToken(VSqlParser.K_BLOCKDICT_COMP, 0); }
		public TerminalNode K_BZIP_COMP() { return getToken(VSqlParser.K_BZIP_COMP, 0); }
		public TerminalNode K_COMMONDELTA_COMP() { return getToken(VSqlParser.K_COMMONDELTA_COMP, 0); }
		public TerminalNode K_DELTARANGE_COMP() { return getToken(VSqlParser.K_DELTARANGE_COMP, 0); }
		public TerminalNode K_DELTAVAL() { return getToken(VSqlParser.K_DELTAVAL, 0); }
		public TerminalNode K_GCDDELTA() { return getToken(VSqlParser.K_GCDDELTA, 0); }
		public TerminalNode K_GZIP_COMP() { return getToken(VSqlParser.K_GZIP_COMP, 0); }
		public TerminalNode K_RLE() { return getToken(VSqlParser.K_RLE, 0); }
		public Encoding_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncoding_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncoding_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncoding_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encoding_clauseContext encoding_clause() throws RecognitionException {
		Encoding_clauseContext _localctx = new Encoding_clauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_encoding_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			match(K_ENCODING);
			setState(5483);
			_la = _input.LA(1);
			if ( !((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & 68719610881L) != 0 || (((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & 2305843009213693957L) != 0 || _la==K_GZIP_COMP || _la==K_RLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Owner_clauseContext extends ParserRuleContext {
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Owner_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Owner_clauseContext owner_clause() throws RecognitionException {
		Owner_clauseContext _localctx = new Owner_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_owner_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5485);
			match(K_OWNER);
			setState(5486);
			match(K_TO);
			setState(5487);
			owner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rename_clauseContext extends ParserRuleContext {
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public Rename_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRename_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRename_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRename_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_clauseContext rename_clause() throws RecognitionException {
		Rename_clauseContext _localctx = new Rename_clauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_rename_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			match(K_RENAME);
			setState(5490);
			match(K_TO);
			setState(5491);
			values();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_schema_clauseContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public Set_schema_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_schema_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_schema_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_schema_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schema_clauseContext set_schema_clause() throws RecognitionException {
		Set_schema_clauseContext _localctx = new Set_schema_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_set_schema_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5493);
			match(K_SET);
			setState(5494);
			match(K_SCHEMA);
			setState(5495);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderbyItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ASC() { return getToken(VSqlParser.K_ASC, 0); }
		public TerminalNode K_DESC() { return getToken(VSqlParser.K_DESC, 0); }
		public OrderbyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderbyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderbyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderbyItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderbyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderbyItemContext orderbyItem() throws RecognitionException {
		OrderbyItemContext _localctx = new OrderbyItemContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_orderbyItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			expression();
			setState(5499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5498);
				_la = _input.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicatesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public List<TerminalNode> K_NOT() { return getTokens(VSqlParser.K_NOT); }
		public TerminalNode K_NOT(int i) {
			return getToken(VSqlParser.K_NOT, i);
		}
		public PredicatesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicates; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicates(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicates(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicates(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicatesContext predicates() throws RecognitionException {
		PredicatesContext _localctx = new PredicatesContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_predicates);
		int _la;
		try {
			int _alt;
			setState(5516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5501);
				match(OPEN_PAREN);
				setState(5502);
				predicates();
				setState(5503);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5505);
					expression();
					}
					break;
				case 2:
					{
					setState(5506);
					predicate();
					}
					break;
				}
				setState(5513);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5509);
						_la = _input.LA(1);
						if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5510);
						predicates();
						}
						} 
					}
					setState(5515);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableSampleContext extends ParserRuleContext {
		public TerminalNode K_TABLESAMPLE() { return getToken(VSqlParser.K_TABLESAMPLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TableSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSampleContext tableSample() throws RecognitionException {
		TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_tableSample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			match(K_TABLESAMPLE);
			setState(5519);
			match(OPEN_PAREN);
			setState(5520);
			match(FLOAT);
			setState(5521);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatasetContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public DatasetContext dataset() {
			return getRuleContext(DatasetContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public DatasetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatasetContext dataset() throws RecognitionException {
		DatasetContext _localctx = new DatasetContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_dataset);
		try {
			setState(5537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5523);
				match(OPEN_PAREN);
				setState(5524);
				dataset();
				setState(5525);
				match(CLOSE_PAREN);
				setState(5527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5526);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5529);
					select_statement();
					}
					break;
				case 2:
					{
					setState(5530);
					joinedTable();
					}
					break;
				case 3:
					{
					setState(5531);
					tableReference();
					}
					break;
				}
				setState(5535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5534);
					alias();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode K_JOIN() { return getToken(VSqlParser.K_JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_INNER() { return getToken(VSqlParser.K_INNER, 0); }
		public TerminalNode K_NATURAL() { return getToken(VSqlParser.K_NATURAL, 0); }
		public TerminalNode K_CROSS() { return getToken(VSqlParser.K_CROSS, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public TerminalNode K_LEFT() { return getToken(VSqlParser.K_LEFT, 0); }
		public TerminalNode K_RIGHT() { return getToken(VSqlParser.K_RIGHT, 0); }
		public TerminalNode K_FULL() { return getToken(VSqlParser.K_FULL, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_joinedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_INNER:
				{
				setState(5539);
				match(K_INNER);
				}
				break;
			case K_LEFT:
				{
				{
				setState(5540);
				match(K_LEFT);
				setState(5542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5541);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_RIGHT:
				{
				{
				setState(5544);
				match(K_RIGHT);
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5545);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_FULL:
				{
				{
				setState(5548);
				match(K_FULL);
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5549);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_NATURAL:
				{
				setState(5552);
				match(K_NATURAL);
				}
				break;
			case K_CROSS:
				{
				setState(5553);
				match(K_CROSS);
				}
				break;
			case K_JOIN:
				break;
			default:
				break;
			}
			setState(5556);
			match(K_JOIN);
			setState(5557);
			tableReference();
			setState(5559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				setState(5558);
				alias();
				}
				break;
			}
			setState(5562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5561);
				hints();
				}
			}

			setState(5565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(5564);
				tableSample();
				}
				break;
			}
			setState(5568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				{
				setState(5567);
				joinPredicate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementsContext extends ParserRuleContext {
		public List<ElementContext> element() {
			return getRuleContexts(ElementContext.class);
		}
		public ElementContext element(int i) {
			return getRuleContext(ElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementsContext elements() throws RecognitionException {
		ElementsContext _localctx = new ElementsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_elements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			element();
			setState(5575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,731,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5571);
					match(COMMA);
					setState(5572);
					element();
					}
					} 
				}
				setState(5577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,731,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementContext extends ParserRuleContext {
		public AsteriskExpContext asteriskExp() {
			return getRuleContext(AsteriskExpContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementContext element() throws RecognitionException {
		ElementContext _localctx = new ElementContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(5578);
				asteriskExp();
				}
				break;
			case K_ANY:
			case K_ARRAY:
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CASE:
			case K_CAST:
			case K_CHAR:
			case K_DECIMAL:
			case K_DEFAULT:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SELECT:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
			case K_HASH:
			case OPEN_PAREN:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				{
				setState(5579);
				expression();
				setState(5581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5580);
					alias();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElContext extends ParserRuleContext {
		public ElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElContext el() throws RecognitionException {
		ElContext _localctx = new ElContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_el);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5587);
			expression();
			}
			setState(5592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5588);
					match(COMMA);
					{
					setState(5589);
					expression();
					}
					}
					} 
				}
				setState(5594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastExprContext extends ParserRuleContext {
		public TerminalNode DCOLON() { return getToken(VSqlParser.DCOLON, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public CastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCastExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCastExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastExprContext castExpr() throws RecognitionException {
		CastExprContext _localctx = new CastExprContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_castExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5595);
			match(DCOLON);
			setState(5596);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastOperatorContext extends ParserRuleContext {
		public TerminalNode K_CAST() { return getToken(VSqlParser.K_CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public CastOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCastOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCastOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCastOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastOperatorContext castOperator() throws RecognitionException {
		CastOperatorContext _localctx = new CastOperatorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_castOperator);
		try {
			setState(5608);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CAST:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5598);
				match(K_CAST);
				setState(5599);
				match(OPEN_PAREN);
				setState(5600);
				expression();
				setState(5601);
				match(K_AS);
				setState(5602);
				dataTypes();
				setState(5603);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CHAR:
			case K_DECIMAL:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_BYTEA:
			case K_DOUBLE:
			case K_IDENTITY:
			case K_LONG:
			case K_RAW:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5605);
				dataTypes();
				setState(5606);
				string();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CastExprContext castExpr() {
			return getRuleContext(CastExprContext.class,0);
		}
		public CastOperatorContext castOperator() {
			return getRuleContext(CastOperatorContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public CaseExpContext caseExp() {
			return getRuleContext(CaseExpContext.class,0);
		}
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_expression);
		try {
			int _alt;
			setState(5637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5610);
				match(OPEN_PAREN);
				{
				setState(5611);
				expression();
				}
				setState(5612);
				match(CLOSE_PAREN);
				setState(5614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5613);
					castExpr();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5616);
					castOperator();
					}
					break;
				case 2:
					{
					setState(5617);
					functionCall();
					}
					break;
				case 3:
					{
					setState(5618);
					arrayExpr();
					}
					break;
				case 4:
					{
					setState(5619);
					number();
					}
					break;
				case 5:
					{
					setState(5620);
					columnReference();
					}
					break;
				case 6:
					{
					setState(5621);
					caseExp();
					}
					break;
				case 7:
					{
					setState(5622);
					select_query();
					}
					break;
				case 8:
					{
					setState(5623);
					value();
					}
					break;
				}
				setState(5627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
				case 1:
					{
					setState(5626);
					castExpr();
					}
					break;
				}
				setState(5634);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,739,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5629);
						operator();
						setState(5630);
						expression();
						}
						} 
					}
					setState(5636);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,739,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode K_ARRAY() { return getToken(VSqlParser.K_ARRAY, 0); }
		public TerminalNode OPEN_SQUARE_BRACKET() { return getToken(VSqlParser.OPEN_SQUARE_BRACKET, 0); }
		public TerminalNode CLOSE_SQUARE_BRACKET() { return getToken(VSqlParser.CLOSE_SQUARE_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_arrayExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5639);
			match(K_ARRAY);
			setState(5640);
			match(OPEN_SQUARE_BRACKET);
			setState(5649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & 3170551740592306883L) != 0 || (((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & -2304554327831738879L) != 0 || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 19722489823551L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 560750930165761L) != 0) {
				{
				setState(5641);
				expression();
				setState(5646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5642);
					match(COMMA);
					setState(5643);
					expression();
					}
					}
					setState(5648);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5651);
			match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public BooleanPredicateContext booleanPredicate() {
			return getRuleContext(BooleanPredicateContext.class,0);
		}
		public ColumnValuePredicateContext columnValuePredicate() {
			return getRuleContext(ColumnValuePredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public InterpolatePredicateContext interpolatePredicate() {
			return getRuleContext(InterpolatePredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_predicate);
		try {
			setState(5660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5653);
				betweenPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5654);
				booleanPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5655);
				columnValuePredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5656);
				inPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5657);
				interpolatePredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5658);
				likePredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5659);
				nullPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_nullPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			expression();
			setState(5663);
			match(K_IS);
			setState(5664);
			nullOrNotNull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public TerminalNode K_ILIKE() { return getToken(VSqlParser.K_ILIKE, 0); }
		public TerminalNode K_LIKEB() { return getToken(VSqlParser.K_LIKEB, 0); }
		public TerminalNode K_ILIKEB() { return getToken(VSqlParser.K_ILIKEB, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5666);
			expression();
			setState(5668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5667);
				match(K_NOT);
				}
			}

			setState(5670);
			_la = _input.LA(1);
			if ( !((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 786435L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5671);
			expression();
			setState(5674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				{
				setState(5672);
				match(K_ESCAPE);
				setState(5673);
				value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinPredicateContext extends ParserRuleContext {
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public List<TerminalNode> K_NOT() { return getTokens(VSqlParser.K_NOT); }
		public TerminalNode K_NOT(int i) {
			return getToken(VSqlParser.K_NOT, i);
		}
		public JoinPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPredicateContext joinPredicate() throws RecognitionException {
		JoinPredicateContext _localctx = new JoinPredicateContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_joinPredicate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5676);
			match(K_ON);
			setState(5677);
			expression();
			setState(5682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,746,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5678);
					_la = _input.LA(1);
					if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5679);
					expression();
					}
					} 
				}
				setState(5684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,746,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InterpolatePredicateContext extends ParserRuleContext {
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_PREVIOUS() { return getToken(VSqlParser.K_PREVIOUS, 0); }
		public TerminalNode K_VALUE() { return getToken(VSqlParser.K_VALUE, 0); }
		public InterpolatePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interpolatePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInterpolatePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInterpolatePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInterpolatePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InterpolatePredicateContext interpolatePredicate() throws RecognitionException {
		InterpolatePredicateContext _localctx = new InterpolatePredicateContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_interpolatePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5685);
			columnReference();
			setState(5686);
			match(K_PREVIOUS);
			setState(5687);
			match(K_VALUE);
			setState(5688);
			columnReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnValuePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ColumnValuePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnValuePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnValuePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnValuePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnValuePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnValuePredicateContext columnValuePredicate() throws RecognitionException {
		ColumnValuePredicateContext _localctx = new ColumnValuePredicateContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_columnValuePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5690);
			expression();
			setState(5691);
			operator();
			setState(5692);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InPredicateContext extends ParserRuleContext {
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5694);
			columns();
			setState(5695);
			match(K_IN);
			setState(5697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5696);
				match(K_NOT);
				}
			}

			setState(5699);
			match(OPEN_PAREN);
			setState(5700);
			expressions();
			setState(5701);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantExpContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public ConstantExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstantExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstantExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstantExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantExpContext constantExp() throws RecognitionException {
		ConstantExpContext _localctx = new ConstantExpContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_constantExp);
		try {
			setState(5708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5703);
				number();
				}
				break;
			case DOUBLE_QUOTE_STRING:
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5704);
				string();
				{
				setState(5705);
				match(K_IS);
				setState(5706);
				nullOrNotNull();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_BETWEEN() { return getToken(VSqlParser.K_BETWEEN, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5710);
			expression();
			setState(5712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BETWEEN) {
				{
				setState(5711);
				match(K_BETWEEN);
				}
			}

			setState(5714);
			expression();
			setState(5715);
			match(K_AND);
			setState(5716);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public TerminalNode K_UNKNOWN() { return getToken(VSqlParser.K_UNKNOWN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public BooleanPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPredicateContext booleanPredicate() throws RecognitionException {
		BooleanPredicateContext _localctx = new BooleanPredicateContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_booleanPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5718);
			expression();
			setState(5719);
			match(K_IS);
			setState(5721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5720);
				match(K_NOT);
				}
			}

			setState(5725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FALSE:
			case K_TRUE:
				{
				setState(5723);
				bool_expression();
				}
				break;
			case K_UNKNOWN:
				{
				setState(5724);
				match(K_UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseExpContext extends ParserRuleContext {
		public TerminalNode K_CASE() { return getToken(VSqlParser.K_CASE, 0); }
		public List<TerminalNode> K_WHEN() { return getTokens(VSqlParser.K_WHEN); }
		public TerminalNode K_WHEN(int i) {
			return getToken(VSqlParser.K_WHEN, i);
		}
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_ELSE() { return getToken(VSqlParser.K_ELSE, 0); }
		public CaseExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCaseExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCaseExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCaseExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpContext caseExp() throws RecognitionException {
		CaseExpContext _localctx = new CaseExpContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_caseExp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			match(K_CASE);
			setState(5728);
			match(K_WHEN);
			setState(5729);
			predicates();
			setState(5730);
			match(K_THEN);
			setState(5731);
			expression();
			setState(5739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_WHEN) {
				{
				{
				setState(5732);
				match(K_WHEN);
				setState(5733);
				predicates();
				setState(5734);
				match(K_THEN);
				setState(5735);
				expression();
				}
				}
				setState(5741);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ELSE) {
				{
				setState(5742);
				match(K_ELSE);
				setState(5743);
				expression();
				}
			}

			setState(5746);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(5748);
				match(K_AS);
				}
			}

			setState(5751);
			id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ElementWithUsingContext> elementWithUsing() {
			return getRuleContexts(ElementWithUsingContext.class);
		}
		public ElementWithUsingContext elementWithUsing(int i) {
			return getRuleContext(ElementWithUsingContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_functionCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5753);
			functionReference();
			setState(5754);
			match(OPEN_PAREN);
			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -5764536836462417139L) != 0 || (((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & -1151632823224891903L) != 0 || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 4611705740917211455L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 560750930165761L) != 0) {
				{
				setState(5756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ALL || _la==K_DISTINCT) {
					{
					setState(5755);
					_la = _input.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5758);
				elementWithUsing();
				setState(5763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5759);
					match(COMMA);
					setState(5760);
					elementWithUsing();
					}
					}
					setState(5765);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5768);
			match(CLOSE_PAREN);
			setState(5770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(5769);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementWithUsingContext extends ParserRuleContext {
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public ElementContext element() {
			return getRuleContext(ElementContext.class,0);
		}
		public ElementWithUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementWithUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElementWithUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElementWithUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElementWithUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementWithUsingContext elementWithUsing() throws RecognitionException {
		ElementWithUsingContext _localctx = new ElementWithUsingContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_elementWithUsing);
		int _la;
		try {
			setState(5777);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				usingClause();
				}
				break;
			case K_ANY:
			case K_ARRAY:
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CASE:
			case K_CAST:
			case K_CHAR:
			case K_DECIMAL:
			case K_DEFAULT:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SELECT:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
			case K_HASH:
			case STAR:
			case OPEN_PAREN:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5773);
				element();
				setState(5775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_USING) {
					{
					setState(5774);
					usingClause();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_OCTETS() { return getToken(VSqlParser.K_OCTETS, 0); }
		public TerminalNode K_CHARACTERS() { return getToken(VSqlParser.K_CHARACTERS, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5779);
			match(K_USING);
			setState(5781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				setState(5780);
				match(K_PARAMETERS);
				}
				break;
			}
			setState(5786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				{
				setState(5783);
				match(K_OCTETS);
				}
				break;
			case 2:
				{
				setState(5784);
				match(K_CHARACTERS);
				}
				break;
			case 3:
				{
				setState(5785);
				commaSeparatedKeyValuePairs();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommaSeparatedKeyValuePairsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public List<KeyValuePairContext> keyValuePair() {
			return getRuleContexts(KeyValuePairContext.class);
		}
		public KeyValuePairContext keyValuePair(int i) {
			return getRuleContext(KeyValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public CommaSeparatedKeyValuePairsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commaSeparatedKeyValuePairs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommaSeparatedKeyValuePairs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() throws RecognitionException {
		CommaSeparatedKeyValuePairsContext _localctx = new CommaSeparatedKeyValuePairsContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_commaSeparatedKeyValuePairs);
		int _la;
		try {
			int _alt;
			setState(5801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5788);
				match(OPEN_PAREN);
				setState(5790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || (((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & 314460325543937L) != 0) {
					{
					setState(5789);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(5792);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5793);
				keyValuePair();
				setState(5798);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5794);
						match(COMMA);
						setState(5795);
						keyValuePair();
						}
						} 
					}
					setState(5800);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValuesContext extends ParserRuleContext {
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_values);
		int _la;
		try {
			setState(5823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5803);
				value();
				setState(5808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5804);
					match(COMMA);
					setState(5805);
					value();
					}
					}
					setState(5810);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5811);
				match(OPEN_PAREN);
				{
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0 || (((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & 255L) != 0) {
					{
					setState(5812);
					value();
					}
				}

				setState(5819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5815);
					match(COMMA);
					setState(5816);
					value();
					}
					}
					setState(5821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5822);
				match(CLOSE_PAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeyValuePairContext extends ParserRuleContext {
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKeyValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKeyValuePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKeyValuePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyValuePairContext keyValuePair() throws RecognitionException {
		KeyValuePairContext _localctx = new KeyValuePairContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_keyValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5825);
			param();
			setState(5826);
			operator();
			setState(5827);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintsContext extends ParserRuleContext {
		public TerminalNode OPEN_HINT() { return getToken(VSqlParser.OPEN_HINT, 0); }
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public TerminalNode CLOSE_HINT() { return getToken(VSqlParser.CLOSE_HINT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public HintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintsContext hints() throws RecognitionException {
		HintsContext _localctx = new HintsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5829);
			match(OPEN_HINT);
			setState(5830);
			hint();
			setState(5835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5831);
				match(COMMA);
				setState(5832);
				hint();
				}
				}
				setState(5837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5838);
			match(CLOSE_HINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintContext extends ParserRuleContext {
		public TerminalNode K_ALLNODES() { return getToken(VSqlParser.K_ALLNODES, 0); }
		public TerminalNode K_GBYTYPE() { return getToken(VSqlParser.K_GBYTYPE, 0); }
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_PIPE() { return getToken(VSqlParser.K_PIPE, 0); }
		public TerminalNode K_ENABLE_WITH_CLAUSE_MATERIALIZATION() { return getToken(VSqlParser.K_ENABLE_WITH_CLAUSE_MATERIALIZATION, 0); }
		public TerminalNode K_CREATETYPE() { return getToken(VSqlParser.K_CREATETYPE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_EARLY_MATERIALIZATION() { return getToken(VSqlParser.K_EARLY_MATERIALIZATION, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_SYN_JOIN() { return getToken(VSqlParser.K_SYN_JOIN, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_SYNTACTIC_JOIN() { return getToken(VSqlParser.K_SYNTACTIC_JOIN, 0); }
		public TerminalNode K_DISTRIB() { return getToken(VSqlParser.K_DISTRIB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_JTYPE() { return getToken(VSqlParser.K_JTYPE, 0); }
		public TerminalNode K_UTYPE() { return getToken(VSqlParser.K_UTYPE, 0); }
		public TerminalNode K_PROJS() { return getToken(VSqlParser.K_PROJS, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode K_SKIP_PROJS() { return getToken(VSqlParser.K_SKIP_PROJS, 0); }
		public TerminalNode K_IGNORECONST() { return getToken(VSqlParser.K_IGNORECONST, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_VERBATIM() { return getToken(VSqlParser.K_VERBATIM, 0); }
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_hint);
		int _la;
		try {
			setState(5911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALLNODES:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5840);
				match(K_ALLNODES);
				}
				}
				break;
			case K_GBYTYPE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5841);
				match(K_GBYTYPE);
				setState(5842);
				_la = _input.LA(1);
				if ( !(_la==K_HASH || _la==K_PIPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_ENABLE_WITH_CLAUSE_MATERIALIZATION:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5843);
				match(K_ENABLE_WITH_CLAUSE_MATERIALIZATION);
				}
				}
				break;
			case K_CREATETYPE:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(5844);
				match(K_CREATETYPE);
				setState(5845);
				match(OPEN_PAREN);
				setState(5846);
				value();
				setState(5847);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_EARLY_MATERIALIZATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5849);
				match(K_EARLY_MATERIALIZATION);
				}
				break;
			case K_DIRECT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5850);
				match(K_DIRECT);
				}
				break;
			case K_LABEL:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(5851);
				match(K_LABEL);
				setState(5852);
				match(OPEN_PAREN);
				setState(5853);
				value();
				setState(5854);
				match(CLOSE_PAREN);
				}
				setState(5856);
				match(K_SYN_JOIN);
				}
				break;
			case K_SYNTACTIC_JOIN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5858);
				match(K_SYNTACTIC_JOIN);
				}
				break;
			case K_DISTRIB:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(5859);
				match(K_DISTRIB);
				setState(5860);
				match(OPEN_PAREN);
				{
				setState(5861);
				value();
				}
				setState(5866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5862);
					match(COMMA);
					{
					setState(5863);
					value();
					}
					}
					}
					setState(5868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5869);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_JTYPE:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(5871);
				match(K_JTYPE);
				setState(5872);
				match(OPEN_PAREN);
				{
				setState(5873);
				value();
				}
				setState(5874);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_UTYPE:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(5876);
				match(K_UTYPE);
				setState(5877);
				match(OPEN_PAREN);
				{
				setState(5878);
				value();
				}
				setState(5879);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_PROJS:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(5881);
				match(K_PROJS);
				setState(5882);
				match(OPEN_PAREN);
				{
				setState(5883);
				projectionReference();
				setState(5888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5884);
					match(COMMA);
					setState(5885);
					projectionReference();
					}
					}
					setState(5890);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5891);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SKIP_PROJS:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(5893);
				match(K_SKIP_PROJS);
				setState(5894);
				match(OPEN_PAREN);
				{
				setState(5895);
				projectionReference();
				setState(5900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5896);
					match(COMMA);
					setState(5897);
					projectionReference();
					}
					}
					setState(5902);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5903);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_IGNORECONST:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(5905);
				match(K_IGNORECONST);
				setState(5906);
				match(OPEN_PAREN);
				setState(5907);
				integerNumber();
				setState(5908);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_VERBATIM:
				enterOuterAlt(_localctx, 15);
				{
				setState(5910);
				match(K_VERBATIM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnReferenceContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ColumnReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnReferenceContext columnReference() throws RecognitionException {
		ColumnReferenceContext _localctx = new ColumnReferenceContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_columnReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				{
				setState(5921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5916);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
					case 1:
						{
						setState(5913);
						dbname();
						setState(5914);
						match(DOT);
						}
						break;
					}
					{
					setState(5918);
					schema();
					setState(5919);
					match(DOT);
					}
					}
					break;
				}
				{
				setState(5923);
				table();
				setState(5924);
				match(DOT);
				}
				}
				}
				break;
			}
			setState(5928);
			column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableReferenceContext extends ParserRuleContext {
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_tableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				setState(5933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(5930);
					dbname();
					setState(5931);
					match(DOT);
					}
					break;
				}
				{
				setState(5935);
				schema();
				setState(5936);
				match(DOT);
				}
				}
				break;
			}
			setState(5940);
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewReferenceContext extends ParserRuleContext {
		public ViewContext view() {
			return getRuleContext(ViewContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ViewReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterViewReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitViewReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitViewReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewReferenceContext viewReference() throws RecognitionException {
		ViewReferenceContext _localctx = new ViewReferenceContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_viewReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(5945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
				case 1:
					{
					setState(5942);
					dbname();
					setState(5943);
					match(DOT);
					}
					break;
				}
				{
				setState(5947);
				schema();
				setState(5948);
				match(DOT);
				}
				}
				break;
			}
			setState(5952);
			view();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceReferenceContext extends ParserRuleContext {
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SourceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSourceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSourceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSourceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceReferenceContext sourceReference() throws RecognitionException {
		SourceReferenceContext _localctx = new SourceReferenceContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_sourceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(5957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(5954);
					dbname();
					setState(5955);
					match(DOT);
					}
					break;
				}
				{
				setState(5959);
				schema();
				setState(5960);
				match(DOT);
				}
				}
				break;
			}
			setState(5964);
			source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterReferenceContext extends ParserRuleContext {
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FilterReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilterReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilterReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilterReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterReferenceContext filterReference() throws RecognitionException {
		FilterReferenceContext _localctx = new FilterReferenceContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_filterReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(5969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(5966);
					dbname();
					setState(5967);
					match(DOT);
					}
					break;
				}
				{
				setState(5971);
				schema();
				setState(5972);
				match(DOT);
				}
				}
				break;
			}
			setState(5976);
			filter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParserReferenceContext extends ParserRuleContext {
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ParserReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserReferenceContext parserReference() throws RecognitionException {
		ParserReferenceContext _localctx = new ParserReferenceContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_parserReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(5981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(5978);
					dbname();
					setState(5979);
					match(DOT);
					}
					break;
				}
				{
				setState(5983);
				schema();
				setState(5984);
				match(DOT);
				}
				}
				break;
			}
			setState(5988);
			parserName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProjectionReferenceContext extends ParserRuleContext {
		public ProjectionContext projection() {
			return getRuleContext(ProjectionContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProjectionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjectionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjectionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjectionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionReferenceContext projectionReference() throws RecognitionException {
		ProjectionReferenceContext _localctx = new ProjectionReferenceContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_projectionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(5998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(5993);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
					case 1:
						{
						setState(5990);
						dbname();
						setState(5991);
						match(DOT);
						}
						break;
					}
					{
					setState(5995);
					schema();
					setState(5996);
					match(DOT);
					}
					}
					break;
				}
				setState(6000);
				table();
				setState(6001);
				match(DOT);
				}
				break;
			}
			setState(6005);
			projection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureReferenceContext extends ParserRuleContext {
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProcedureReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedureReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedureReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureReferenceContext procedureReference() throws RecognitionException {
		ProcedureReferenceContext _localctx = new ProcedureReferenceContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_procedureReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(6015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(6010);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
					case 1:
						{
						setState(6007);
						dbname();
						setState(6008);
						match(DOT);
						}
						break;
					}
					{
					setState(6012);
					schema();
					setState(6013);
					match(DOT);
					}
					}
					break;
				}
				setState(6017);
				table();
				setState(6018);
				match(DOT);
				}
				break;
			}
			setState(6022);
			procedure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureContext procedure() throws RecognitionException {
		ProcedureContext _localctx = new ProcedureContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6024);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionReferenceContext extends ParserRuleContext {
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionReferenceContext functionReference() throws RecognitionException {
		FunctionReferenceContext _localctx = new FunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_functionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
				case 1:
					{
					setState(6026);
					dbname();
					setState(6027);
					match(DOT);
					}
					break;
				}
				{
				setState(6031);
				schema();
				setState(6032);
				match(DOT);
				}
				}
				break;
			}
			setState(6036);
			function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LibraryReferenceContext extends ParserRuleContext {
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public LibraryReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_libraryReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibraryReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibraryReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibraryReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryReferenceContext libraryReference() throws RecognitionException {
		LibraryReferenceContext _localctx = new LibraryReferenceContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_libraryReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(6041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(6038);
					dbname();
					setState(6039);
					match(DOT);
					}
					break;
				}
				{
				setState(6043);
				schema();
				setState(6044);
				match(DOT);
				}
				}
				break;
			}
			setState(6048);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceReferenceContext extends ParserRuleContext {
		public SequenceContext sequence() {
			return getRuleContext(SequenceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_sequenceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				setState(6053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(6050);
					dbname();
					setState(6051);
					match(DOT);
					}
					break;
				}
				{
				setState(6055);
				schema();
				setState(6056);
				match(DOT);
				}
				}
				break;
			}
			setState(6060);
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModelReferenceContext extends ParserRuleContext {
		public ModelContext model() {
			return getRuleContext(ModelContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ModelReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modelReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModelReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModelReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModelReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelReferenceContext modelReference() throws RecognitionException {
		ModelReferenceContext _localctx = new ModelReferenceContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_modelReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(6062);
					dbname();
					setState(6063);
					match(DOT);
					}
					break;
				}
				{
				setState(6067);
				schema();
				setState(6068);
				match(DOT);
				}
				}
				break;
			}
			setState(6072);
			model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TxtIndexReferenceContext extends ParserRuleContext {
		public TxtIndexContext txtIndex() {
			return getRuleContext(TxtIndexContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TxtIndexReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndexReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndexReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndexReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndexReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexReferenceContext txtIndexReference() throws RecognitionException {
		TxtIndexReferenceContext _localctx = new TxtIndexReferenceContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_txtIndexReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(6077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
				case 1:
					{
					setState(6074);
					dbname();
					setState(6075);
					match(DOT);
					}
					break;
				}
				{
				setState(6079);
				schema();
				setState(6080);
				match(DOT);
				}
				}
				break;
			}
			setState(6084);
			txtIndex();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaReferenceContext extends ParserRuleContext {
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public SchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchemaReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchemaReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaReferenceContext schemaReference() throws RecognitionException {
		SchemaReferenceContext _localctx = new SchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_schemaReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(6086);
				dbname();
				setState(6087);
				match(DOT);
				}
				break;
			}
			setState(6091);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DbnameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public DbnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDbname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDbname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDbname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbnameContext dbname() throws RecognitionException {
		DbnameContext _localctx = new DbnameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_dbname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6093);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TxtIndexContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TxtIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexContext txtIndex() throws RecognitionException {
		TxtIndexContext _localctx = new TxtIndexContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_txtIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6095);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_host);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6097);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PortContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_port);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6099);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceContext source() throws RecognitionException {
		SourceContext _localctx = new SourceContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6101);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NotifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifierContext notifier() throws RecognitionException {
		NotifierContext _localctx = new NotifierContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_notifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6103);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ModelContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelContext model() throws RecognitionException {
		ModelContext _localctx = new ModelContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_model);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6105);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterContext filter() throws RecognitionException {
		FilterContext _localctx = new FilterContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_filter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParserNameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserNameContext parserName() throws RecognitionException {
		ParserNameContext _localctx = new ParserNameContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_parserName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6109);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ViewContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewContext view() throws RecognitionException {
		ViewContext _localctx = new ViewContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Lb_groupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Lb_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lb_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLb_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLb_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLb_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lb_groupContext lb_group() throws RecognitionException {
		Lb_groupContext _localctx = new Lb_groupContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_lb_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6113);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Network_addressContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_addressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_address(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_address(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_address(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_addressContext network_address() throws RecognitionException {
		Network_addressContext _localctx = new Network_addressContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_network_address);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6115);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutingRuleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoutingRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routingRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoutingRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoutingRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoutingRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutingRuleContext routingRule() throws RecognitionException {
		RoutingRuleContext _localctx = new RoutingRuleContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_routingRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6117);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Branch_identifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Branch_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_branch_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBranch_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBranch_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBranch_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Branch_identifierContext branch_identifier() throws RecognitionException {
		Branch_identifierContext _localctx = new Branch_identifierContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_branch_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6119);
			id();
			setState(6121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & 7L) != 0) {
				{
				setState(6120);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6123);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LangContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public LangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lang; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLang(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLang(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LangContext lang() throws RecognitionException {
		LangContext _localctx = new LangContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_lang);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6125);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourcePoolContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ResourcePoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourcePool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResourcePool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResourcePool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResourcePool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourcePoolContext resourcePool() throws RecognitionException {
		ResourcePoolContext _localctx = new ResourcePoolContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_resourcePool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6127);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaContext schema() throws RecognitionException {
		SchemaContext _localctx = new SchemaContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_schema);
		try {
			setState(6131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6129);
				id();
				}
				break;
			case K_PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(6130);
				match(K_PUBLIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UdParamContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public UdParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUdParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUdParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUdParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdParamContext udParam() throws RecognitionException {
		UdParamContext _localctx = new UdParamContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_udParam);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6133);
			match(PARAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableContext table() throws RecognitionException {
		TableContext _localctx = new TableContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6135);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParamsContext extends ParserRuleContext {
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamsContext params() throws RecognitionException {
		ParamsContext _localctx = new ParamsContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6137);
			param();
			setState(6142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6138);
				match(COMMA);
				setState(6139);
				param();
				}
				}
				setState(6144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProjectionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_projection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6145);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LibraryContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public LibraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibrary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibrary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibrary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryContext library() throws RecognitionException {
		LibraryContext _localctx = new LibraryContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_library);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6147);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionContext extends ParserRuleContext {
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_ROLLUP() { return getToken(VSqlParser.K_ROLLUP, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_function);
		try {
			setState(6153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6149);
				match(K_HASH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6150);
				match(K_ROLLUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6151);
				match(K_ANY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6152);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParamContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6155);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_node; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NodeContext node() throws RecognitionException {
		NodeContext _localctx = new NodeContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_node);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6157);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceContext sequence() throws RecognitionException {
		SequenceContext _localctx = new SequenceContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColumnContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnContext column() throws RecognitionException {
		ColumnContext _localctx = new ColumnContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6161);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6163);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE_QUOTE_STRING || _la==SINGLE_QUOTE_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleCharContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public SingleCharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleChar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSingleChar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSingleChar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSingleChar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleCharContext singleChar() throws RecognitionException {
		SingleCharContext _localctx = new SingleCharContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_singleChar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6165);
			match(SINGLE_QUOTE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6167);
			_la = _input.LA(1);
			if ( !((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & 7L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntegerNumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public IntegerNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntegerNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntegerNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntegerNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerNumberContext integerNumber() throws RecognitionException {
		IntegerNumberContext _localctx = new IntegerNumberContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_integerNumber);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6169);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AsteriskExpContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public AsteriskExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAsteriskExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAsteriskExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAsteriskExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskExpContext asteriskExp() throws RecognitionException {
		AsteriskExpContext _localctx = new AsteriskExpContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_asteriskExp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6171);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubnetContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SubnetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subnet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSubnet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSubnet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSubnet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubnetContext subnet() throws RecognitionException {
		SubnetContext _localctx = new SubnetContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_subnet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6173);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UserContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6175);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OwnerContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6177);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MethodContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MethodContext method() throws RecognitionException {
		MethodContext _localctx = new MethodContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6179);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FaultGroupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FaultGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_faultGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFaultGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFaultGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFaultGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FaultGroupContext faultGroup() throws RecognitionException {
		FaultGroupContext _localctx = new FaultGroupContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_faultGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6181);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Auth_method_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Auth_method_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_method_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAuth_method_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAuth_method_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAuth_method_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_method_nameContext auth_method_name() throws RecognitionException {
		Auth_method_nameContext _localctx = new Auth_method_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_auth_method_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6183);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstraintContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6185);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Network_interfaceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_interfaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_interface; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_interface(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_interface(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_interface(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_interfaceContext network_interface() throws RecognitionException {
		Network_interfaceContext _localctx = new Network_interfaceContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_network_interface);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6187);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProfileContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileContext profile() throws RecognitionException {
		ProfileContext _localctx = new ProfileContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_profile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6189);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public TerminalNode ANY() { return getToken(VSqlParser.ANY, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_id);
		try {
			setState(6198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6191);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6192);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 3);
				{
				setState(6193);
				match(WORD);
				}
				break;
			case K_DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6194);
				match(K_DEFAULT);
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 5);
				{
				setState(6195);
				match(PARAM);
				}
				break;
			case ANY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6196);
				match(ANY);
				}
				break;
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6197);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode ANY() { return getToken(VSqlParser.ANY, 0); }
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_value);
		try {
			setState(6209);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6200);
				match(DECIMAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6201);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6202);
				match(REAL);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(6203);
				match(WORD);
				}
				break;
			case DOUBLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(6204);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 6);
				{
				setState(6205);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case ANY:
				enterOuterAlt(_localctx, 7);
				{
				setState(6206);
				match(ANY);
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 8);
				{
				setState(6207);
				match(PARAM);
				}
				break;
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(6208);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableOrDisableContext extends ParserRuleContext {
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public EnableOrDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableOrDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnableOrDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnableOrDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnableOrDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableOrDisableContext enableOrDisable() throws RecognitionException {
		EnableOrDisableContext _localctx = new EnableOrDisableContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_enableOrDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6211);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnabledOrDisabledContext extends ParserRuleContext {
		public TerminalNode K_ENABLED() { return getToken(VSqlParser.K_ENABLED, 0); }
		public TerminalNode K_DISABLED() { return getToken(VSqlParser.K_DISABLED, 0); }
		public EnabledOrDisabledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enabledOrDisabled; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnabledOrDisabled(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnabledOrDisabled(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnabledOrDisabled(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnabledOrDisabledContext enabledOrDisabled() throws RecognitionException {
		EnabledOrDisabledContext _localctx = new EnabledOrDisabledContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_enabledOrDisabled);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6213);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLED || _la==K_ENABLED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullOrNotNullContext extends ParserRuleContext {
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public NullOrNotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrNotNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullOrNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullOrNotNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullOrNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrNotNullContext nullOrNotNull() throws RecognitionException {
		NullOrNotNullContext _localctx = new NullOrNotNullContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_nullOrNotNull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(6215);
				match(K_NOT);
				}
			}

			setState(6218);
			match(K_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AddressContext extends ParserRuleContext {
		public TerminalNode IPV4_ADDR() { return getToken(VSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(VSqlParser.IPV6_ADDR, 0); }
		public AddressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAddress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAddress(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAddress(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressContext address() throws RecognitionException {
		AddressContext _localctx = new AddressContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_address);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6220);
			_la = _input.LA(1);
			if ( !(_la==IPV4_ADDR || _la==IPV6_ADDR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompressionTypeContext extends ParserRuleContext {
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public CompressionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCompressionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCompressionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCompressionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionTypeContext compressionType() throws RecognitionException {
		CompressionTypeContext _localctx = new CompressionTypeContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_compressionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6222);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Password_parameterContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_PASSWORD_LIFE_TIME() { return getToken(VSqlParser.K_PASSWORD_LIFE_TIME, 0); }
		public TerminalNode K_PASSWORD_GRACE_TIME() { return getToken(VSqlParser.K_PASSWORD_GRACE_TIME, 0); }
		public TerminalNode K_FAILED_LOGIN_ATTEMPTS() { return getToken(VSqlParser.K_FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode K_PASSWORD_LOCK_TIME() { return getToken(VSqlParser.K_PASSWORD_LOCK_TIME, 0); }
		public TerminalNode K_PASSWORD_REUSE_MAX() { return getToken(VSqlParser.K_PASSWORD_REUSE_MAX, 0); }
		public TerminalNode K_PASSWORD_REUSE_TIME() { return getToken(VSqlParser.K_PASSWORD_REUSE_TIME, 0); }
		public TerminalNode K_PASSWORD_MAX_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_UPPERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_UPPERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_LOWERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LOWERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_DIGITS() { return getToken(VSqlParser.K_PASSWORD_MIN_DIGITS, 0); }
		public TerminalNode K_PASSWORD_MIN_SYMBOLS() { return getToken(VSqlParser.K_PASSWORD_MIN_SYMBOLS, 0); }
		public Password_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPassword_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPassword_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPassword_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Password_parameterContext password_parameter() throws RecognitionException {
		Password_parameterContext _localctx = new Password_parameterContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_password_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6224);
			_la = _input.LA(1);
			if ( !(_la==K_FAILED_LOGIN_ATTEMPTS || (((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & 4095L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6225);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorContext extends ParserRuleContext {
		public OtherOperatorContext otherOperator() {
			return getRuleContext(OtherOperatorContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public MathematicalOperatorContext mathematicalOperator() {
			return getRuleContext(MathematicalOperatorContext.class,0);
		}
		public BitwiseOperatorContext bitwiseOperator() {
			return getRuleContext(BitwiseOperatorContext.class,0);
		}
		public BooleanOperatorsContext booleanOperators() {
			return getRuleContext(BooleanOperatorsContext.class,0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_operator);
		try {
			setState(6232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DPIPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6227);
				otherOperator();
				}
				break;
			case BANG_EQUAL:
			case EQUAL:
			case EQUAL2:
			case GT:
			case GTE:
			case LT:
			case LTE:
			case LT_GT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6228);
				comparisonOperator();
				}
				break;
			case MINUS:
			case STAR:
			case PLUS:
			case BANG:
			case ABS:
			case BANG_BANG:
			case SQROOT:
			case CUBEROOT:
			case EXP:
			case MOD:
			case DIV2:
			case DIV:
				enterOuterAlt(_localctx, 3);
				{
				setState(6229);
				mathematicalOperator();
				}
				break;
			case O_AND:
			case O_OR:
			case O_XOR:
			case O_NOT:
			case O_SHIFT_LEFT:
			case O_SHIFT_RIGHT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6230);
				bitwiseOperator();
				}
				break;
			case K_AND:
			case K_NOT:
			case K_OR:
				enterOuterAlt(_localctx, 5);
				{
				setState(6231);
				booleanOperators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BitwiseOperatorContext extends ParserRuleContext {
		public TerminalNode O_AND() { return getToken(VSqlParser.O_AND, 0); }
		public TerminalNode O_OR() { return getToken(VSqlParser.O_OR, 0); }
		public TerminalNode O_XOR() { return getToken(VSqlParser.O_XOR, 0); }
		public TerminalNode O_NOT() { return getToken(VSqlParser.O_NOT, 0); }
		public TerminalNode O_SHIFT_LEFT() { return getToken(VSqlParser.O_SHIFT_LEFT, 0); }
		public TerminalNode O_SHIFT_RIGHT() { return getToken(VSqlParser.O_SHIFT_RIGHT, 0); }
		public BitwiseOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwiseOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBitwiseOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBitwiseOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBitwiseOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwiseOperatorContext bitwiseOperator() throws RecognitionException {
		BitwiseOperatorContext _localctx = new BitwiseOperatorContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_bitwiseOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6234);
			_la = _input.LA(1);
			if ( !((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & 63L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanOperatorsContext extends ParserRuleContext {
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOperators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanOperators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanOperators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanOperators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOperatorsContext booleanOperators() throws RecognitionException {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_booleanOperators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6236);
			_la = _input.LA(1);
			if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OtherOperatorContext extends ParserRuleContext {
		public TerminalNode DPIPE() { return getToken(VSqlParser.DPIPE, 0); }
		public OtherOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOtherOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOtherOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOtherOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherOperatorContext otherOperator() throws RecognitionException {
		OtherOperatorContext _localctx = new OtherOperatorContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_otherOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6238);
			match(DPIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MathematicalOperatorContext extends ParserRuleContext {
		public TerminalNode BANG_BANG() { return getToken(VSqlParser.BANG_BANG, 0); }
		public TerminalNode ABS() { return getToken(VSqlParser.ABS, 0); }
		public TerminalNode SQROOT() { return getToken(VSqlParser.SQROOT, 0); }
		public TerminalNode CUBEROOT() { return getToken(VSqlParser.CUBEROOT, 0); }
		public TerminalNode DIV2() { return getToken(VSqlParser.DIV2, 0); }
		public TerminalNode EXP() { return getToken(VSqlParser.EXP, 0); }
		public TerminalNode MOD() { return getToken(VSqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(VSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode DIV() { return getToken(VSqlParser.DIV, 0); }
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public TerminalNode BANG() { return getToken(VSqlParser.BANG, 0); }
		public MathematicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathematicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMathematicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMathematicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMathematicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathematicalOperatorContext mathematicalOperator() throws RecognitionException {
		MathematicalOperatorContext _localctx = new MathematicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_mathematicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6240);
			_la = _input.LA(1);
			if ( !((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & 264255495L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode EQUAL2() { return getToken(VSqlParser.EQUAL2, 0); }
		public TerminalNode GT() { return getToken(VSqlParser.GT, 0); }
		public TerminalNode GTE() { return getToken(VSqlParser.GTE, 0); }
		public TerminalNode LT() { return getToken(VSqlParser.LT, 0); }
		public TerminalNode LTE() { return getToken(VSqlParser.LTE, 0); }
		public TerminalNode LT_GT() { return getToken(VSqlParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(VSqlParser.BANG_EQUAL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6242);
			_la = _input.LA(1);
			if ( !((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & 255L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_SERIALIZABLE() { return getToken(VSqlParser.K_SERIALIZABLE, 0); }
		public TerminalNode K_REPEATABLE() { return getToken(VSqlParser.K_REPEATABLE, 0); }
		public TerminalNode K_UNCOMMITTED() { return getToken(VSqlParser.K_UNCOMMITTED, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_isolationLevel);
		try {
			setState(6251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6244);
				match(K_READ);
				setState(6245);
				match(K_COMMITTED);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6246);
				match(K_SERIALIZABLE);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6247);
				match(K_REPEATABLE);
				setState(6248);
				match(K_READ);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(6249);
				match(K_READ);
				setState(6250);
				match(K_UNCOMMITTED);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_ONLY() { return getToken(VSqlParser.K_ONLY, 0); }
		public TerminalNode K_WRITE() { return getToken(VSqlParser.K_WRITE, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_transactionMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6253);
			match(K_READ);
			setState(6255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ONLY || _la==K_WRITE) {
				{
				setState(6254);
				_la = _input.LA(1);
				if ( !(_la==K_ONLY || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bool_expressionContext extends ParserRuleContext {
		public TerminalNode K_TRUE() { return getToken(VSqlParser.K_TRUE, 0); }
		public TerminalNode K_FALSE() { return getToken(VSqlParser.K_FALSE, 0); }
		public Bool_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBool_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBool_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBool_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expressionContext bool_expression() throws RecognitionException {
		Bool_expressionContext _localctx = new Bool_expressionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_bool_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			_la = _input.LA(1);
			if ( !(_la==K_FALSE || _la==K_TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypesContext extends ParserRuleContext {
		public BinaryTypesContext binaryTypes() {
			return getRuleContext(BinaryTypesContext.class,0);
		}
		public BooleanTypesContext booleanTypes() {
			return getRuleContext(BooleanTypesContext.class,0);
		}
		public CharTypesContext charTypes() {
			return getRuleContext(CharTypesContext.class,0);
		}
		public DateTypesContext dateTypes() {
			return getRuleContext(DateTypesContext.class,0);
		}
		public ApNumericTypesContext apNumericTypes() {
			return getRuleContext(ApNumericTypesContext.class,0);
		}
		public ENumericTypesContext eNumericTypes() {
			return getRuleContext(ENumericTypesContext.class,0);
		}
		public SpatialTypesContext spatialTypes() {
			return getRuleContext(SpatialTypesContext.class,0);
		}
		public UuidTypesContext uuidTypes() {
			return getRuleContext(UuidTypesContext.class,0);
		}
		public OtherTypesContext otherTypes() {
			return getRuleContext(OtherTypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public DataTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypesContext dataTypes() throws RecognitionException {
		DataTypesContext _localctx = new DataTypesContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_dataTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				setState(6259);
				binaryTypes();
				}
				break;
			case 2:
				{
				setState(6260);
				booleanTypes();
				}
				break;
			case 3:
				{
				setState(6261);
				charTypes();
				}
				break;
			case 4:
				{
				setState(6262);
				dateTypes();
				}
				break;
			case 5:
				{
				setState(6263);
				apNumericTypes();
				}
				break;
			case 6:
				{
				setState(6264);
				eNumericTypes();
				}
				break;
			case 7:
				{
				setState(6265);
				spatialTypes();
				}
				break;
			case 8:
				{
				setState(6266);
				uuidTypes();
				}
				break;
			case 9:
				{
				setState(6267);
				otherTypes();
				}
				break;
			}
			setState(6278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				setState(6270);
				match(OPEN_PAREN);
				setState(6271);
				value();
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6272);
					match(COMMA);
					setState(6273);
					value();
					}
				}

				setState(6276);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinaryTypesContext extends ParserRuleContext {
		public TerminalNode K_BINARY() { return getToken(VSqlParser.K_BINARY, 0); }
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARBINARY() { return getToken(VSqlParser.K_VARBINARY, 0); }
		public TerminalNode K_BYTEA() { return getToken(VSqlParser.K_BYTEA, 0); }
		public TerminalNode K_RAW() { return getToken(VSqlParser.K_RAW, 0); }
		public BinaryTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBinaryTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBinaryTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBinaryTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinaryTypesContext binaryTypes() throws RecognitionException {
		BinaryTypesContext _localctx = new BinaryTypesContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_binaryTypes);
		try {
			setState(6286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6280);
				match(K_BINARY);
				}
				break;
			case K_LONG:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6281);
				match(K_LONG);
				setState(6282);
				match(K_VARBINARY);
				}
				}
				break;
			case K_VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6283);
				match(K_VARBINARY);
				}
				break;
			case K_BYTEA:
				enterOuterAlt(_localctx, 4);
				{
				setState(6284);
				match(K_BYTEA);
				}
				break;
			case K_RAW:
				enterOuterAlt(_localctx, 5);
				{
				setState(6285);
				match(K_RAW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanTypesContext extends ParserRuleContext {
		public TerminalNode K_BOOLEAN() { return getToken(VSqlParser.K_BOOLEAN, 0); }
		public BooleanTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanTypesContext booleanTypes() throws RecognitionException {
		BooleanTypesContext _localctx = new BooleanTypesContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_booleanTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			match(K_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharTypesContext extends ParserRuleContext {
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_CHAR() { return getToken(VSqlParser.K_CHAR, 0); }
		public CharTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCharTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCharTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCharTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharTypesContext charTypes() throws RecognitionException {
		CharTypesContext _localctx = new CharTypesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_charTypes);
		try {
			setState(6294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LONG:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6290);
				match(K_LONG);
				setState(6291);
				match(K_VARCHAR);
				}
				}
				break;
			case K_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6292);
				match(K_CHAR);
				}
				break;
			case K_VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6293);
				match(K_VARCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateTypesContext extends ParserRuleContext {
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_TIMESTAMPTZ() { return getToken(VSqlParser.K_TIMESTAMPTZ, 0); }
		public TerminalNode K_DATE() { return getToken(VSqlParser.K_DATE, 0); }
		public TerminalNode K_SMALLDATETIME() { return getToken(VSqlParser.K_SMALLDATETIME, 0); }
		public TerminalNode K_TIMESTAMP() { return getToken(VSqlParser.K_TIMESTAMP, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_DAY() { return getToken(VSqlParser.K_DAY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_SECOND() { return getToken(VSqlParser.K_SECOND, 0); }
		public TerminalNode K_YEAR() { return getToken(VSqlParser.K_YEAR, 0); }
		public TerminalNode K_MONTH() { return getToken(VSqlParser.K_MONTH, 0); }
		public DateTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDateTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDateTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDateTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTypesContext dateTypes() throws RecognitionException {
		DateTypesContext _localctx = new DateTypesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_dateTypes);
		try {
			setState(6316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6296);
				match(K_TIME);
				setState(6297);
				match(K_WITH);
				setState(6298);
				match(K_TIMEZONE);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6299);
				match(K_TIMESTAMPTZ);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6300);
				match(K_DATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6301);
				match(K_TIME);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6302);
				match(K_SMALLDATETIME);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(6303);
				match(K_TIMESTAMP);
				setState(6304);
				match(K_WITH);
				setState(6305);
				match(K_TIMEZONE);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(6306);
				match(K_INTERVAL);
				setState(6307);
				match(K_DAY);
				setState(6308);
				match(K_TO);
				setState(6309);
				match(K_SECOND);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(6310);
				match(K_INTERVAL);
				setState(6311);
				match(K_YEAR);
				setState(6312);
				match(K_TO);
				setState(6313);
				match(K_MONTH);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6314);
				match(K_TIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6315);
				match(K_INTERVAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApNumericTypesContext extends ParserRuleContext {
		public TerminalNode K_DOUBLE() { return getToken(VSqlParser.K_DOUBLE, 0); }
		public TerminalNode K_PRECISION() { return getToken(VSqlParser.K_PRECISION, 0); }
		public TerminalNode K_FLOAT() { return getToken(VSqlParser.K_FLOAT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FLOAT8() { return getToken(VSqlParser.K_FLOAT8, 0); }
		public TerminalNode K_REAL() { return getToken(VSqlParser.K_REAL, 0); }
		public ApNumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterApNumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitApNumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitApNumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApNumericTypesContext apNumericTypes() throws RecognitionException {
		ApNumericTypesContext _localctx = new ApNumericTypesContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_apNumericTypes);
		try {
			setState(6327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6318);
				match(K_DOUBLE);
				setState(6319);
				match(K_PRECISION);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6320);
				match(K_FLOAT);
				setState(6321);
				match(OPEN_PAREN);
				setState(6322);
				match(DECIMAL);
				setState(6323);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6324);
				match(K_FLOAT8);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6325);
				match(K_FLOAT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(6326);
				match(K_REAL);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ENumericTypesContext extends ParserRuleContext {
		public TerminalNode K_BIGINT() { return getToken(VSqlParser.K_BIGINT, 0); }
		public TerminalNode K_INT8() { return getToken(VSqlParser.K_INT8, 0); }
		public TerminalNode K_SMALLINT() { return getToken(VSqlParser.K_SMALLINT, 0); }
		public TerminalNode K_TINYINT() { return getToken(VSqlParser.K_TINYINT, 0); }
		public TerminalNode K_DECIMAL() { return getToken(VSqlParser.K_DECIMAL, 0); }
		public TerminalNode K_NUMERIC() { return getToken(VSqlParser.K_NUMERIC, 0); }
		public TerminalNode K_NUMBER() { return getToken(VSqlParser.K_NUMBER, 0); }
		public TerminalNode K_MONEY() { return getToken(VSqlParser.K_MONEY, 0); }
		public TerminalNode K_INTEGER() { return getToken(VSqlParser.K_INTEGER, 0); }
		public TerminalNode K_INT() { return getToken(VSqlParser.K_INT, 0); }
		public ENumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterENumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitENumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitENumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ENumericTypesContext eNumericTypes() throws RecognitionException {
		ENumericTypesContext _localctx = new ENumericTypesContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_eNumericTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			_la = _input.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 6917529044820951552L) != 0 || (((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 1125934266582529L) != 0 || _la==K_INT8) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpatialTypesContext extends ParserRuleContext {
		public TerminalNode K_GEOMETRY() { return getToken(VSqlParser.K_GEOMETRY, 0); }
		public TerminalNode K_GEOGRAPHY() { return getToken(VSqlParser.K_GEOGRAPHY, 0); }
		public SpatialTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSpatialTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSpatialTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSpatialTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialTypesContext spatialTypes() throws RecognitionException {
		SpatialTypesContext _localctx = new SpatialTypesContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_spatialTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6331);
			_la = _input.LA(1);
			if ( !(_la==K_GEOMETRY || _la==K_GEOGRAPHY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UuidTypesContext extends ParserRuleContext {
		public TerminalNode K_UUID() { return getToken(VSqlParser.K_UUID, 0); }
		public UuidTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUuidTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUuidTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUuidTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidTypesContext uuidTypes() throws RecognitionException {
		UuidTypesContext _localctx = new UuidTypesContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_uuidTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6333);
			match(K_UUID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OtherTypesContext extends ParserRuleContext {
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public OtherTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOtherTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOtherTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOtherTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherTypesContext otherTypes() throws RecognitionException {
		OtherTypesContext _localctx = new OtherTypesContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_otherTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6335);
			match(K_IDENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public TerminalNode K_ABSOLUTE() { return getToken(VSqlParser.K_ABSOLUTE, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_ACCESSRANK() { return getToken(VSqlParser.K_ACCESSRANK, 0); }
		public TerminalNode K_ACCOUNT() { return getToken(VSqlParser.K_ACCOUNT, 0); }
		public TerminalNode K_ACTION() { return getToken(VSqlParser.K_ACTION, 0); }
		public TerminalNode K_ACTIVATE() { return getToken(VSqlParser.K_ACTIVATE, 0); }
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_ADMIN() { return getToken(VSqlParser.K_ADMIN, 0); }
		public TerminalNode K_AFTER() { return getToken(VSqlParser.K_AFTER, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ALSO() { return getToken(VSqlParser.K_ALSO, 0); }
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ANALYSE() { return getToken(VSqlParser.K_ANALYSE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_ANALYZE() { return getToken(VSqlParser.K_ANALYZE, 0); }
		public TerminalNode K_ANNOTATED() { return getToken(VSqlParser.K_ANNOTATED, 0); }
		public TerminalNode K_ANTI() { return getToken(VSqlParser.K_ANTI, 0); }
		public TerminalNode K_ASSERTION() { return getToken(VSqlParser.K_ASSERTION, 0); }
		public TerminalNode K_ASSIGNMENT() { return getToken(VSqlParser.K_ASSIGNMENT, 0); }
		public TerminalNode K_AT() { return getToken(VSqlParser.K_AT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_AUTO_INCREMENT() { return getToken(VSqlParser.K_AUTO_INCREMENT, 0); }
		public TerminalNode K_AVAILABLE() { return getToken(VSqlParser.K_AVAILABLE, 0); }
		public TerminalNode K_BACKWARD() { return getToken(VSqlParser.K_BACKWARD, 0); }
		public TerminalNode K_BASENAME() { return getToken(VSqlParser.K_BASENAME, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BEFORE() { return getToken(VSqlParser.K_BEFORE, 0); }
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_BEST() { return getToken(VSqlParser.K_BEST, 0); }
		public TerminalNode K_BLOCK() { return getToken(VSqlParser.K_BLOCK, 0); }
		public TerminalNode K_BLOCK_DICT() { return getToken(VSqlParser.K_BLOCK_DICT, 0); }
		public TerminalNode K_BLOCKDICT_COMP() { return getToken(VSqlParser.K_BLOCKDICT_COMP, 0); }
		public TerminalNode K_BROADCAST() { return getToken(VSqlParser.K_BROADCAST, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_BYTEA() { return getToken(VSqlParser.K_BYTEA, 0); }
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_BZIP_COMP() { return getToken(VSqlParser.K_BZIP_COMP, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CALLED() { return getToken(VSqlParser.K_CALLED, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_CATALOGPATH() { return getToken(VSqlParser.K_CATALOGPATH, 0); }
		public TerminalNode K_CHAIN() { return getToken(VSqlParser.K_CHAIN, 0); }
		public TerminalNode K_CHARACTER() { return getToken(VSqlParser.K_CHARACTER, 0); }
		public TerminalNode K_CHARACTERISTICS() { return getToken(VSqlParser.K_CHARACTERISTICS, 0); }
		public TerminalNode K_CHARACTERS() { return getToken(VSqlParser.K_CHARACTERS, 0); }
		public TerminalNode K_CHECKPOINT() { return getToken(VSqlParser.K_CHECKPOINT, 0); }
		public TerminalNode K_CLASS() { return getToken(VSqlParser.K_CLASS, 0); }
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public TerminalNode K_CLOSE() { return getToken(VSqlParser.K_CLOSE, 0); }
		public TerminalNode K_CLUSTER() { return getToken(VSqlParser.K_CLUSTER, 0); }
		public TerminalNode K_COLSIZES() { return getToken(VSqlParser.K_COLSIZES, 0); }
		public TerminalNode K_COLUMNS_COUNT() { return getToken(VSqlParser.K_COLUMNS_COUNT, 0); }
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_COMMONDELTA_COMP() { return getToken(VSqlParser.K_COMMONDELTA_COMP, 0); }
		public TerminalNode K_COMMUNAL() { return getToken(VSqlParser.K_COMMUNAL, 0); }
		public TerminalNode K_COMPLEX() { return getToken(VSqlParser.K_COMPLEX, 0); }
		public TerminalNode K_CONNECT() { return getToken(VSqlParser.K_CONNECT, 0); }
		public TerminalNode K_CONSTRAINTS() { return getToken(VSqlParser.K_CONSTRAINTS, 0); }
		public TerminalNode K_CONTROL() { return getToken(VSqlParser.K_CONTROL, 0); }
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_CPUAFFINITYMODE() { return getToken(VSqlParser.K_CPUAFFINITYMODE, 0); }
		public TerminalNode K_CPUAFFINITYSET() { return getToken(VSqlParser.K_CPUAFFINITYSET, 0); }
		public TerminalNode K_CREATEDB() { return getToken(VSqlParser.K_CREATEDB, 0); }
		public TerminalNode K_CREATEUSER() { return getToken(VSqlParser.K_CREATEUSER, 0); }
		public TerminalNode K_CSV() { return getToken(VSqlParser.K_CSV, 0); }
		public TerminalNode K_CUBE() { return getToken(VSqlParser.K_CUBE, 0); }
		public TerminalNode K_CURRENT() { return getToken(VSqlParser.K_CURRENT, 0); }
		public TerminalNode K_CURSOR() { return getToken(VSqlParser.K_CURSOR, 0); }
		public TerminalNode K_CUSTOM() { return getToken(VSqlParser.K_CUSTOM, 0); }
		public TerminalNode K_CUSTOM_PARTITIONS() { return getToken(VSqlParser.K_CUSTOM_PARTITIONS, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public TerminalNode K_DATAPATH() { return getToken(VSqlParser.K_DATAPATH, 0); }
		public TerminalNode K_DAY() { return getToken(VSqlParser.K_DAY, 0); }
		public TerminalNode K_DEACTIVATE() { return getToken(VSqlParser.K_DEACTIVATE, 0); }
		public TerminalNode K_DEALLOCATE() { return getToken(VSqlParser.K_DEALLOCATE, 0); }
		public TerminalNode K_DEC() { return getToken(VSqlParser.K_DEC, 0); }
		public TerminalNode K_DECLARE() { return getToken(VSqlParser.K_DECLARE, 0); }
		public TerminalNode K_DEFAULTS() { return getToken(VSqlParser.K_DEFAULTS, 0); }
		public TerminalNode K_DEFERRED() { return getToken(VSqlParser.K_DEFERRED, 0); }
		public TerminalNode K_DEFINE() { return getToken(VSqlParser.K_DEFINE, 0); }
		public TerminalNode K_DEFINER() { return getToken(VSqlParser.K_DEFINER, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public TerminalNode K_DELIMITERS() { return getToken(VSqlParser.K_DELIMITERS, 0); }
		public TerminalNode K_DELTARANGE_COMP() { return getToken(VSqlParser.K_DELTARANGE_COMP, 0); }
		public TerminalNode K_DELTARANGE_COMP_SP() { return getToken(VSqlParser.K_DELTARANGE_COMP_SP, 0); }
		public TerminalNode K_DELTAVAL() { return getToken(VSqlParser.K_DELTAVAL, 0); }
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public TerminalNode K_DETERMINES() { return getToken(VSqlParser.K_DETERMINES, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_DIRECTCOLS() { return getToken(VSqlParser.K_DIRECTCOLS, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_DIRECTGROUPED() { return getToken(VSqlParser.K_DIRECTGROUPED, 0); }
		public TerminalNode K_DIRECTPROJ() { return getToken(VSqlParser.K_DIRECTPROJ, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public TerminalNode K_DISABLED() { return getToken(VSqlParser.K_DISABLED, 0); }
		public TerminalNode K_DISCONNECT() { return getToken(VSqlParser.K_DISCONNECT, 0); }
		public TerminalNode K_DISTVALINDEX() { return getToken(VSqlParser.K_DISTVALINDEX, 0); }
		public TerminalNode K_DO() { return getToken(VSqlParser.K_DO, 0); }
		public TerminalNode K_DOMAIN() { return getToken(VSqlParser.K_DOMAIN, 0); }
		public TerminalNode K_DOUBLE() { return getToken(VSqlParser.K_DOUBLE, 0); }
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_DURABLE() { return getToken(VSqlParser.K_DURABLE, 0); }
		public TerminalNode K_EACH() { return getToken(VSqlParser.K_EACH, 0); }
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_ENABLED() { return getToken(VSqlParser.K_ENABLED, 0); }
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENCODING() { return getToken(VSqlParser.K_ENCODING, 0); }
		public TerminalNode K_ENCRYPTED() { return getToken(VSqlParser.K_ENCRYPTED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_EPHEMERAL() { return getToken(VSqlParser.K_EPHEMERAL, 0); }
		public TerminalNode K_EPOCH() { return getToken(VSqlParser.K_EPOCH, 0); }
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_EVENT() { return getToken(VSqlParser.K_EVENT, 0); }
		public TerminalNode K_EVENTS() { return getToken(VSqlParser.K_EVENTS, 0); }
		public TerminalNode K_EXCEPTION() { return getToken(VSqlParser.K_EXCEPTION, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_EXCLUDE() { return getToken(VSqlParser.K_EXCLUDE, 0); }
		public TerminalNode K_EXCLUDING() { return getToken(VSqlParser.K_EXCLUDING, 0); }
		public TerminalNode K_EXCLUSIVE() { return getToken(VSqlParser.K_EXCLUSIVE, 0); }
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_EXECUTIONPARALLELISM() { return getToken(VSqlParser.K_EXECUTIONPARALLELISM, 0); }
		public TerminalNode K_EXPIRE() { return getToken(VSqlParser.K_EXPIRE, 0); }
		public TerminalNode K_EXPLAIN() { return getToken(VSqlParser.K_EXPLAIN, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_FAILED_LOGIN_ATTEMPTS() { return getToken(VSqlParser.K_FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_FETCH() { return getToken(VSqlParser.K_FETCH, 0); }
		public TerminalNode K_FILESYSTEM() { return getToken(VSqlParser.K_FILESYSTEM, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_FIRST() { return getToken(VSqlParser.K_FIRST, 0); }
		public TerminalNode K_FIXEDWIDTH() { return getToken(VSqlParser.K_FIXEDWIDTH, 0); }
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public TerminalNode K_FOLLOWING() { return getToken(VSqlParser.K_FOLLOWING, 0); }
		public TerminalNode K_FORCE() { return getToken(VSqlParser.K_FORCE, 0); }
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_FORWARD() { return getToken(VSqlParser.K_FORWARD, 0); }
		public TerminalNode K_FREEZE() { return getToken(VSqlParser.K_FREEZE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_GCDDELTA() { return getToken(VSqlParser.K_GCDDELTA, 0); }
		public TerminalNode K_GET() { return getToken(VSqlParser.K_GET, 0); }
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public TerminalNode K_GROUPED() { return getToken(VSqlParser.K_GROUPED, 0); }
		public TerminalNode K_GROUPING() { return getToken(VSqlParser.K_GROUPING, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_GZIP_COMP() { return getToken(VSqlParser.K_GZIP_COMP, 0); }
		public TerminalNode K_HANDLER() { return getToken(VSqlParser.K_HANDLER, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_HCATALOG_CONNECTION_TIMEOUT() { return getToken(VSqlParser.K_HCATALOG_CONNECTION_TIMEOUT, 0); }
		public TerminalNode K_HCATALOG_DB() { return getToken(VSqlParser.K_HCATALOG_DB, 0); }
		public TerminalNode K_HCATALOG_SCHEMA() { return getToken(VSqlParser.K_HCATALOG_SCHEMA, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_LIMIT() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_LIMIT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_TIME() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_TIME, 0); }
		public TerminalNode K_HCATALOG_USER() { return getToken(VSqlParser.K_HCATALOG_USER, 0); }
		public TerminalNode K_HIGH() { return getToken(VSqlParser.K_HIGH, 0); }
		public TerminalNode K_HIVE_PARTITION_COLS() { return getToken(VSqlParser.K_HIVE_PARTITION_COLS, 0); }
		public TerminalNode K_HIVESERVER2_HOSTNAME() { return getToken(VSqlParser.K_HIVESERVER2_HOSTNAME, 0); }
		public TerminalNode K_HOLD() { return getToken(VSqlParser.K_HOLD, 0); }
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public TerminalNode K_HOSTNAME() { return getToken(VSqlParser.K_HOSTNAME, 0); }
		public TerminalNode K_HOUR() { return getToken(VSqlParser.K_HOUR, 0); }
		public TerminalNode K_HOURS() { return getToken(VSqlParser.K_HOURS, 0); }
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_IGNORE() { return getToken(VSqlParser.K_IGNORE, 0); }
		public TerminalNode K_IMMEDIATE() { return getToken(VSqlParser.K_IMMEDIATE, 0); }
		public TerminalNode K_IMMUTABLE() { return getToken(VSqlParser.K_IMMUTABLE, 0); }
		public TerminalNode K_IMPLICIT() { return getToken(VSqlParser.K_IMPLICIT, 0); }
		public TerminalNode K_INCLUDE() { return getToken(VSqlParser.K_INCLUDE, 0); }
		public TerminalNode K_INCLUDING() { return getToken(VSqlParser.K_INCLUDING, 0); }
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TerminalNode K_INHERITS() { return getToken(VSqlParser.K_INHERITS, 0); }
		public TerminalNode K_INPUT() { return getToken(VSqlParser.K_INPUT, 0); }
		public TerminalNode K_INSENSITIVE() { return getToken(VSqlParser.K_INSENSITIVE, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_INSTEAD() { return getToken(VSqlParser.K_INSTEAD, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public TerminalNode K_INTERPOLATE() { return getToken(VSqlParser.K_INTERPOLATE, 0); }
		public TerminalNode K_INVOKER() { return getToken(VSqlParser.K_INVOKER, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_JSON() { return getToken(VSqlParser.K_JSON, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_LANCOMPILER() { return getToken(VSqlParser.K_LANCOMPILER, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public TerminalNode K_LARGE() { return getToken(VSqlParser.K_LARGE, 0); }
		public TerminalNode K_LAST() { return getToken(VSqlParser.K_LAST, 0); }
		public TerminalNode K_LATEST() { return getToken(VSqlParser.K_LATEST, 0); }
		public TerminalNode K_LESS() { return getToken(VSqlParser.K_LESS, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public TerminalNode K_LISTEN() { return getToken(VSqlParser.K_LISTEN, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public TerminalNode K_LOCK() { return getToken(VSqlParser.K_LOCK, 0); }
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_LOW() { return getToken(VSqlParser.K_LOW, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_MANAGED() { return getToken(VSqlParser.K_MANAGED, 0); }
		public TerminalNode K_MASK() { return getToken(VSqlParser.K_MASK, 0); }
		public TerminalNode K_MATCHED() { return getToken(VSqlParser.K_MATCHED, 0); }
		public TerminalNode K_MATERIALIZE() { return getToken(VSqlParser.K_MATERIALIZE, 0); }
		public TerminalNode K_MAXCONCURRENCY() { return getToken(VSqlParser.K_MAXCONCURRENCY, 0); }
		public TerminalNode K_MAXCONCURRENCYGRACE() { return getToken(VSqlParser.K_MAXCONCURRENCYGRACE, 0); }
		public TerminalNode K_MAXCONNECTIONS() { return getToken(VSqlParser.K_MAXCONNECTIONS, 0); }
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXPAYLOAD() { return getToken(VSqlParser.K_MAXPAYLOAD, 0); }
		public TerminalNode K_MAXQUERYMEMORYSIZE() { return getToken(VSqlParser.K_MAXQUERYMEMORYSIZE, 0); }
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_MEDIUM() { return getToken(VSqlParser.K_MEDIUM, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public TerminalNode K_MEMORYSIZE() { return getToken(VSqlParser.K_MEMORYSIZE, 0); }
		public TerminalNode K_MERGE() { return getToken(VSqlParser.K_MERGE, 0); }
		public TerminalNode K_MERGEOUT() { return getToken(VSqlParser.K_MERGEOUT, 0); }
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public TerminalNode K_MICROSECONDS() { return getToken(VSqlParser.K_MICROSECONDS, 0); }
		public TerminalNode K_MILLISECONDS() { return getToken(VSqlParser.K_MILLISECONDS, 0); }
		public TerminalNode K_MINUTE() { return getToken(VSqlParser.K_MINUTE, 0); }
		public TerminalNode K_MINUTES() { return getToken(VSqlParser.K_MINUTES, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public TerminalNode K_MODE() { return getToken(VSqlParser.K_MODE, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public TerminalNode K_MONTH() { return getToken(VSqlParser.K_MONTH, 0); }
		public TerminalNode K_MOVE() { return getToken(VSqlParser.K_MOVE, 0); }
		public TerminalNode K_MOVEOUT() { return getToken(VSqlParser.K_MOVEOUT, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public TerminalNode K_NATIONAL() { return getToken(VSqlParser.K_NATIONAL, 0); }
		public TerminalNode K_NATIVE() { return getToken(VSqlParser.K_NATIVE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_NEXT() { return getToken(VSqlParser.K_NEXT, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_NOCREATEDB() { return getToken(VSqlParser.K_NOCREATEDB, 0); }
		public TerminalNode K_NOCREATEUSER() { return getToken(VSqlParser.K_NOCREATEUSER, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public TerminalNode K_NOTHING() { return getToken(VSqlParser.K_NOTHING, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public TerminalNode K_NOTIFY() { return getToken(VSqlParser.K_NOTIFY, 0); }
		public TerminalNode K_NOWAIT() { return getToken(VSqlParser.K_NOWAIT, 0); }
		public TerminalNode K_NULLAWARE() { return getToken(VSqlParser.K_NULLAWARE, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULLS() { return getToken(VSqlParser.K_NULLS, 0); }
		public TerminalNode K_OBJECT() { return getToken(VSqlParser.K_OBJECT, 0); }
		public TerminalNode K_OCTETS() { return getToken(VSqlParser.K_OCTETS, 0); }
		public TerminalNode K_OF() { return getToken(VSqlParser.K_OF, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public TerminalNode K_OIDS() { return getToken(VSqlParser.K_OIDS, 0); }
		public TerminalNode K_OPERATOR() { return getToken(VSqlParser.K_OPERATOR, 0); }
		public TerminalNode K_OPT() { return getToken(VSqlParser.K_OPT, 0); }
		public TerminalNode K_OPTIMIZER() { return getToken(VSqlParser.K_OPTIMIZER, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_OPTVER() { return getToken(VSqlParser.K_OPTVER, 0); }
		public TerminalNode K_ORC() { return getToken(VSqlParser.K_ORC, 0); }
		public TerminalNode K_OTHERS() { return getToken(VSqlParser.K_OTHERS, 0); }
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_PARTIAL() { return getToken(VSqlParser.K_PARTIAL, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_PARTITIONING() { return getToken(VSqlParser.K_PARTITIONING, 0); }
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public TerminalNode K_PASSWORD_GRACE_TIME() { return getToken(VSqlParser.K_PASSWORD_GRACE_TIME, 0); }
		public TerminalNode K_PASSWORD_LIFE_TIME() { return getToken(VSqlParser.K_PASSWORD_LIFE_TIME, 0); }
		public TerminalNode K_PASSWORD_LOCK_TIME() { return getToken(VSqlParser.K_PASSWORD_LOCK_TIME, 0); }
		public TerminalNode K_PASSWORD_MAX_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_DIGITS() { return getToken(VSqlParser.K_PASSWORD_MIN_DIGITS, 0); }
		public TerminalNode K_PASSWORD_MIN_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_LOWERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LOWERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_SYMBOLS() { return getToken(VSqlParser.K_PASSWORD_MIN_SYMBOLS, 0); }
		public TerminalNode K_PASSWORD_MIN_UPPERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_UPPERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_REUSE_MAX() { return getToken(VSqlParser.K_PASSWORD_REUSE_MAX, 0); }
		public TerminalNode K_PASSWORD_REUSE_TIME() { return getToken(VSqlParser.K_PASSWORD_REUSE_TIME, 0); }
		public TerminalNode K_PATTERN() { return getToken(VSqlParser.K_PATTERN, 0); }
		public TerminalNode K_PERCENT() { return getToken(VSqlParser.K_PERCENT, 0); }
		public TerminalNode K_PERMANENT() { return getToken(VSqlParser.K_PERMANENT, 0); }
		public TerminalNode K_PLACING() { return getToken(VSqlParser.K_PLACING, 0); }
		public TerminalNode K_PLANNEDCONCURRENCY() { return getToken(VSqlParser.K_PLANNEDCONCURRENCY, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public TerminalNode K_PORT() { return getToken(VSqlParser.K_PORT, 0); }
		public TerminalNode K_PRECEDING() { return getToken(VSqlParser.K_PRECEDING, 0); }
		public TerminalNode K_PREPARE() { return getToken(VSqlParser.K_PREPARE, 0); }
		public TerminalNode K_PREPASS() { return getToken(VSqlParser.K_PREPASS, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public TerminalNode K_PREVIOUS() { return getToken(VSqlParser.K_PREVIOUS, 0); }
		public TerminalNode K_PRIOR() { return getToken(VSqlParser.K_PRIOR, 0); }
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_PROCEDURAL() { return getToken(VSqlParser.K_PROCEDURAL, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public TerminalNode K_PSDATE() { return getToken(VSqlParser.K_PSDATE, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public TerminalNode K_QUEUETIMEOUT() { return getToken(VSqlParser.K_QUEUETIMEOUT, 0); }
		public TerminalNode K_QUOTE() { return getToken(VSqlParser.K_QUOTE, 0); }
		public TerminalNode K_RANGE() { return getToken(VSqlParser.K_RANGE, 0); }
		public TerminalNode K_RAW() { return getToken(VSqlParser.K_RAW, 0); }
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_RECHECK() { return getToken(VSqlParser.K_RECHECK, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_RECOVER() { return getToken(VSqlParser.K_RECOVER, 0); }
		public TerminalNode K_RECURSIVE() { return getToken(VSqlParser.K_RECURSIVE, 0); }
		public TerminalNode K_REFRESH() { return getToken(VSqlParser.K_REFRESH, 0); }
		public TerminalNode K_REINDEX() { return getToken(VSqlParser.K_REINDEX, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public TerminalNode K_RELATIVE() { return getToken(VSqlParser.K_RELATIVE, 0); }
		public TerminalNode K_RELEASE() { return getToken(VSqlParser.K_RELEASE, 0); }
		public TerminalNode K_REMOVE() { return getToken(VSqlParser.K_REMOVE, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_REORGANIZE() { return getToken(VSqlParser.K_REORGANIZE, 0); }
		public TerminalNode K_REPEATABLE() { return getToken(VSqlParser.K_REPEATABLE, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public TerminalNode K_RESULTS() { return getToken(VSqlParser.K_RESULTS, 0); }
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public TerminalNode K_RETURNREJECTED() { return getToken(VSqlParser.K_RETURNREJECTED, 0); }
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_RLE() { return getToken(VSqlParser.K_RLE, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_ROLES() { return getToken(VSqlParser.K_ROLES, 0); }
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_ROLLUP() { return getToken(VSqlParser.K_ROLLUP, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_RUNTIMEPRIORITY() { return getToken(VSqlParser.K_RUNTIMEPRIORITY, 0); }
		public TerminalNode K_RUNTIMEPRIORITYTHRESHOLD() { return getToken(VSqlParser.K_RUNTIMEPRIORITYTHRESHOLD, 0); }
		public TerminalNode K_SAVE() { return getToken(VSqlParser.K_SAVE, 0); }
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public TerminalNode K_SCROLL() { return getToken(VSqlParser.K_SCROLL, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_SECOND() { return getToken(VSqlParser.K_SECOND, 0); }
		public TerminalNode K_SECONDS() { return getToken(VSqlParser.K_SECONDS, 0); }
		public TerminalNode K_SECURITY() { return getToken(VSqlParser.K_SECURITY, 0); }
		public TerminalNode K_SECURITY_ALGORITHM() { return getToken(VSqlParser.K_SECURITY_ALGORITHM, 0); }
		public TerminalNode K_SEGMENTED() { return getToken(VSqlParser.K_SEGMENTED, 0); }
		public TerminalNode K_SEMI() { return getToken(VSqlParser.K_SEMI, 0); }
		public TerminalNode K_SEMIALL() { return getToken(VSqlParser.K_SEMIALL, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_SERIALIZABLE() { return getToken(VSqlParser.K_SERIALIZABLE, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SETOF() { return getToken(VSqlParser.K_SETOF, 0); }
		public TerminalNode K_SETS() { return getToken(VSqlParser.K_SETS, 0); }
		public TerminalNode K_SHARE() { return getToken(VSqlParser.K_SHARE, 0); }
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_SIMPLE() { return getToken(VSqlParser.K_SIMPLE, 0); }
		public TerminalNode K_SINGLEINITIATOR() { return getToken(VSqlParser.K_SINGLEINITIATOR, 0); }
		public TerminalNode K_SITE() { return getToken(VSqlParser.K_SITE, 0); }
		public TerminalNode K_SITES() { return getToken(VSqlParser.K_SITES, 0); }
		public TerminalNode K_SKIP() { return getToken(VSqlParser.K_SKIP, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_SPLIT() { return getToken(VSqlParser.K_SPLIT, 0); }
		public TerminalNode K_SSL_CONFIG() { return getToken(VSqlParser.K_SSL_CONFIG, 0); }
		public TerminalNode K_STABLE() { return getToken(VSqlParser.K_STABLE, 0); }
		public TerminalNode K_STANDBY() { return getToken(VSqlParser.K_STANDBY, 0); }
		public TerminalNode K_START() { return getToken(VSqlParser.K_START, 0); }
		public TerminalNode K_STATEMENT() { return getToken(VSqlParser.K_STATEMENT, 0); }
		public TerminalNode K_STATISTICS() { return getToken(VSqlParser.K_STATISTICS, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public TerminalNode K_STDOUT() { return getToken(VSqlParser.K_STDOUT, 0); }
		public TerminalNode K_STEMMER() { return getToken(VSqlParser.K_STEMMER, 0); }
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_STRENGTH() { return getToken(VSqlParser.K_STRENGTH, 0); }
		public TerminalNode K_STRICT() { return getToken(VSqlParser.K_STRICT, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public TerminalNode K_SYSID() { return getToken(VSqlParser.K_SYSID, 0); }
		public TerminalNode K_SYSTEM() { return getToken(VSqlParser.K_SYSTEM, 0); }
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_TABLESAMPLE() { return getToken(VSqlParser.K_TABLESAMPLE, 0); }
		public TerminalNode K_TABLESPACE() { return getToken(VSqlParser.K_TABLESPACE, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPLATE() { return getToken(VSqlParser.K_TEMPLATE, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_THAN() { return getToken(VSqlParser.K_THAN, 0); }
		public TerminalNode K_TIES() { return getToken(VSqlParser.K_TIES, 0); }
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_TOAST() { return getToken(VSqlParser.K_TOAST, 0); }
		public TerminalNode K_TOKENIZER() { return getToken(VSqlParser.K_TOKENIZER, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_TRICKLE() { return getToken(VSqlParser.K_TRICKLE, 0); }
		public TerminalNode K_TRIGGER() { return getToken(VSqlParser.K_TRIGGER, 0); }
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public TerminalNode K_TRUSTED() { return getToken(VSqlParser.K_TRUSTED, 0); }
		public TerminalNode K_TUNING() { return getToken(VSqlParser.K_TUNING, 0); }
		public TerminalNode K_TYPE() { return getToken(VSqlParser.K_TYPE, 0); }
		public TerminalNode K_UDPARAMETER() { return getToken(VSqlParser.K_UDPARAMETER, 0); }
		public TerminalNode K_UNCOMMITTED() { return getToken(VSqlParser.K_UNCOMMITTED, 0); }
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public TerminalNode K_UNI() { return getToken(VSqlParser.K_UNI, 0); }
		public TerminalNode K_UNINDEXED() { return getToken(VSqlParser.K_UNINDEXED, 0); }
		public TerminalNode K_UNKNOWN() { return getToken(VSqlParser.K_UNKNOWN, 0); }
		public TerminalNode K_UNLIMITED() { return getToken(VSqlParser.K_UNLIMITED, 0); }
		public TerminalNode K_UNLISTEN() { return getToken(VSqlParser.K_UNLISTEN, 0); }
		public TerminalNode K_UNLOCK() { return getToken(VSqlParser.K_UNLOCK, 0); }
		public TerminalNode K_UNPACKER() { return getToken(VSqlParser.K_UNPACKER, 0); }
		public TerminalNode K_UNSEGMENTED() { return getToken(VSqlParser.K_UNSEGMENTED, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_VACUUM() { return getToken(VSqlParser.K_VACUUM, 0); }
		public TerminalNode K_VALIDATE() { return getToken(VSqlParser.K_VALIDATE, 0); }
		public TerminalNode K_VALIDATOR() { return getToken(VSqlParser.K_VALIDATOR, 0); }
		public TerminalNode K_VALINDEX() { return getToken(VSqlParser.K_VALINDEX, 0); }
		public TerminalNode K_VALUE() { return getToken(VSqlParser.K_VALUE, 0); }
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode K_VARYING() { return getToken(VSqlParser.K_VARYING, 0); }
		public TerminalNode K_VERBOSE() { return getToken(VSqlParser.K_VERBOSE, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public TerminalNode K_VOLATILE() { return getToken(VSqlParser.K_VOLATILE, 0); }
		public TerminalNode K_WAIT() { return getToken(VSqlParser.K_WAIT, 0); }
		public TerminalNode K_WEBHDFS_ADDRESS() { return getToken(VSqlParser.K_WEBHDFS_ADDRESS, 0); }
		public TerminalNode K_WEBSERVICE_HOSTNAME() { return getToken(VSqlParser.K_WEBSERVICE_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_PORT() { return getToken(VSqlParser.K_WEBSERVICE_PORT, 0); }
		public TerminalNode K_WITHOUT() { return getToken(VSqlParser.K_WITHOUT, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_WRITE() { return getToken(VSqlParser.K_WRITE, 0); }
		public TerminalNode K_YEAR() { return getToken(VSqlParser.K_YEAR, 0); }
		public TerminalNode K_ZONE() { return getToken(VSqlParser.K_ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_la = _input.LA(1);
			if ( !((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & -1L) != 0 || (((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & -1L) != 0 || (((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & -1L) != 0 || (((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & -1L) != 0 || (((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & -1L) != 0 || (((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & -1L) != 0 || (((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & -1L) != 0 || (((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 63L) != 0) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u02c7\u18c4\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0001\u0000\u0003\u0000\u02fe\b\u0000\u0001"+
		"\u0000\u0005\u0000\u0301\b\u0000\n\u0000\f\u0000\u0304\t\u0000\u0001\u0000"+
		"\u0001\u0000\u0003\u0000\u0308\b\u0000\u0003\u0000\u030a\b\u0000\u0001"+
		"\u0000\u0003\u0000\u030d\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0001\u0003\u0001\u0314\b\u0001\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0003\u0002\u039d\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003"+
		"\u0003\u03a8\b\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u03ad"+
		"\b\u0003\u0003\u0003\u03af\b\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0003\u0003\u03b6\b\u0003\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004"+
		"\u03bf\b\u0004\u0001\u0004\u0003\u0004\u03c2\b\u0004\u0001\u0004\u0003"+
		"\u0004\u03c5\b\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u03ce\b\u0004\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0003\u0005\u03de\b\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003"+
		"\u0005\u03e3\b\u0005\u0001\u0005\u0003\u0005\u03e6\b\u0005\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0003\u0006\u03fb\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0003\u0007\u0401\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0003\u0007\u0409\b\u0007\u0001\b\u0001\b\u0001"+
		"\b\u0001\b\u0001\b\u0001\b\u0004\b\u0411\b\b\u000b\b\f\b\u0412\u0001\t"+
		"\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u041c\b\t\u0003"+
		"\t\u041e\b\t\u0001\t\u0001\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0003\n\u0428\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u0437\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u043d\b\f"+
		"\u0001\f\u0001\f\u0001\f\u0003\f\u0442\b\f\u0001\f\u0001\f\u0001\f\u0003"+
		"\f\u0447\b\f\u0001\f\u0003\f\u044a\b\f\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0005\r\u0450\b\r\n\r\f\r\u0453\t\r\u0001\u000e\u0003\u000e\u0456\b\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0003\u000e\u0465\b\u000e\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0004\u0010\u0471\b\u0010\u000b\u0010\f\u0010\u0472\u0001"+
		"\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0004\u0012\u047f\b\u0012\u000b"+
		"\u0012\f\u0012\u0480\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003"+
		"\u0013\u0493\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0498"+
		"\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u049d\b\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u04a2\b\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0003\u0013\u04a7\b\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u04ae\b\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0003\u0013\u04b3\b\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u04b8\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u04bd\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0003\u0013\u04c4\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015"+
		"\u04d4\b\u0015\u0003\u0015\u04d6\b\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0005\u0015\u04db\b\u0015\n\u0015\f\u0015\u04de\t\u0015\u0001\u0015"+
		"\u0001\u0015\u0003\u0015\u04e2\b\u0015\u0001\u0016\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u04eb\b\u0016"+
		"\u0003\u0016\u04ed\b\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017"+
		"\u04f2\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017"+
		"\u04f8\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017"+
		"\u04fe\b\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0503\b"+
		"\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u050d\b\u0017\u0003\u0017\u050f"+
		"\b\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u0515"+
		"\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u051a\b\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018"+
		"\u0521\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018"+
		"\u0003\u0018\u0528\b\u0018\u0001\u0018\u0003\u0018\u052b\b\u0018\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0005\u001a\u0537\b\u001a\n"+
		"\u001a\f\u001a\u053a\t\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0005\u001b\u0543\b\u001b\n"+
		"\u001b\f\u001b\u0546\t\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u054b\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u0551\b\u001c\u0003\u001c\u0553\b\u001c\u0001\u001c\u0003\u001c"+
		"\u0556\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u055a\b\u001c\u0001"+
		"\u001c\u0003\u001c\u055d\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0005\u001c\u0564\b\u001c\n\u001c\f\u001c\u0567\t\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u056b\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u058b\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0596\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u059a\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u059e\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05a2\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05ad\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05b3\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u05c3\b\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0004\u001d\u05c9\b\u001d\u000b\u001d\f\u001d\u05ca\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e"+
		"\u05d3\b\u001e\n\u001e\f\u001e\u05d6\t\u001e\u0001\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e\u05de\b\u001e\n"+
		"\u001e\f\u001e\u05e1\t\u001e\u0003\u001e\u05e3\b\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0003\u001e\u05e8\b\u001e\u0001\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u05ef\b\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u05f6\b\u001e\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u05fb\b\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u0603"+
		"\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e\u0608\b\u001e"+
		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0003\u001e"+
		"\u060f\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0003\u001e\u0617\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0005\u001e\u061e\b\u001e\n\u001e\f\u001e\u0621"+
		"\t\u001e\u0003\u001e\u0623\b\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001e\u0001\u001e\u0003\u001e\u062a\b\u001e\u0003\u001e\u062c\b"+
		"\u001e\u0003\u001e\u062e\b\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0003\u001f\u063a\b\u001f\u0001\u001f\u0001\u001f\u0005\u001f\u063e"+
		"\b\u001f\n\u001f\f\u001f\u0641\t\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
		"\u0003\u001f\u0646\b\u001f\u0001 \u0004 \u0649\b \u000b \f \u064a\u0001"+
		"!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u065f"+
		"\b\"\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001$\u0001"+
		"$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001+\u0001+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001-\u0001"+
		"-\u0001-\u0001-\u0001-\u0001-\u0001.\u0001.\u0001.\u0003.\u06ad\b.\u0001"+
		"/\u0001/\u0003/\u06b1\b/\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00010\u00010\u00010\u00010\u00010\u00030\u06c1\b0\u0001"+
		"1\u00011\u00011\u00031\u06c6\b1\u00011\u00011\u00031\u06ca\b1\u00011\u0003"+
		"1\u06cd\b1\u00011\u00011\u00031\u06d1\b1\u00011\u00031\u06d4\b1\u0001"+
		"1\u00031\u06d7\b1\u00011\u00011\u00031\u06db\b1\u00011\u00011\u00011\u0003"+
		"1\u06e0\b1\u00011\u00011\u00031\u06e4\b1\u00011\u00011\u00031\u06e8\b"+
		"1\u00011\u00011\u00031\u06ec\b1\u00011\u00031\u06ef\b1\u00011\u00011\u0003"+
		"1\u06f3\b1\u00012\u00012\u00012\u00032\u06f8\b2\u00012\u00032\u06fb\b"+
		"2\u00012\u00012\u00032\u06ff\b2\u00012\u00032\u0702\b2\u00012\u00032\u0705"+
		"\b2\u00012\u00012\u00032\u0709\b2\u00012\u00012\u00012\u00032\u070e\b"+
		"2\u00012\u00012\u00032\u0712\b2\u00012\u00012\u00032\u0716\b2\u00012\u0001"+
		"2\u00032\u071a\b2\u00012\u00032\u071d\b2\u00012\u00012\u00032\u0721\b"+
		"2\u00013\u00013\u00013\u00053\u0726\b3\n3\f3\u0729\t3\u00013\u00013\u0001"+
		"3\u00013\u00013\u00013\u00053\u0731\b3\n3\f3\u0734\t3\u00013\u00013\u0001"+
		"3\u00013\u00033\u073a\b3\u00033\u073c\b3\u00013\u00033\u073f\b3\u0001"+
		"4\u00014\u00014\u00034\u0744\b4\u00014\u00034\u0747\b4\u00015\u00015\u0001"+
		"6\u00016\u00016\u00016\u00017\u00017\u00017\u00017\u00037\u0753\b7\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00037\u075b\b7\u00017\u00017\u0001"+
		"7\u00017\u00017\u00017\u00037\u0763\b7\u00017\u00017\u00037\u0767\b7\u0001"+
		"8\u00018\u00038\u076b\b8\u00018\u00018\u00018\u00018\u00018\u00038\u0772"+
		"\b8\u00018\u00018\u00018\u00038\u0777\b8\u00018\u00018\u00018\u00038\u077c"+
		"\b8\u00018\u00018\u00038\u0780\b8\u00018\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u0001"+
		"8\u00018\u00018\u00058\u0794\b8\n8\f8\u0797\t8\u00018\u00018\u00018\u0003"+
		"8\u079c\b8\u00018\u00018\u00018\u00018\u00058\u07a2\b8\n8\f8\u07a5\t8"+
		"\u00018\u00018\u00018\u00018\u00018\u00018\u00018\u00038\u07ae\b8\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00038\u07b6\b8\u00019\u00019\u0001"+
		"9\u00019\u00019\u00019\u00059\u07be\b9\n9\f9\u07c1\t9\u00019\u00019\u0003"+
		"9\u07c5\b9\u00019\u00019\u00019\u00019\u00019\u00019\u00059\u07cd\b9\n"+
		"9\f9\u07d0\t9\u00019\u00019\u00039\u07d4\b9\u00019\u00019\u00019\u0003"+
		"9\u07d9\b9\u00019\u00019\u00019\u00059\u07de\b9\n9\f9\u07e1\t9\u00019"+
		"\u00019\u00019\u00059\u07e6\b9\n9\f9\u07e9\t9\u00019\u00019\u00039\u07ed"+
		"\b9\u00039\u07ef\b9\u00019\u00039\u07f2\b9\u00019\u00049\u07f5\b9\u000b"+
		"9\f9\u07f6\u00039\u07f9\b9\u00019\u00059\u07fc\b9\n9\f9\u07ff\t9\u0001"+
		":\u0001:\u0001;\u0001;\u0001;\u0003;\u0806\b;\u0001;\u0001;\u0001;\u0001"+
		";\u0003;\u080c\b;\u0001;\u0003;\u080f\b;\u0001;\u0001;\u0001;\u0003;\u0814"+
		"\b;\u0001;\u0001;\u0003;\u0818\b;\u0001<\u0001<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0003<\u0828"+
		"\b<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0003=\u0834\b=\u0001=\u0003=\u0837\b=\u0001=\u0003=\u083a\b=\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0005>\u0843\b>\n>\f>\u0846"+
		"\t>\u0001>\u0001>\u0003>\u084a\b>\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0003?\u0852\b?\u0001?\u0001?\u0001?\u0003?\u0857\b?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0005?\u085f\b?\n?\f?\u0862\t?\u0001?\u0001?\u0003"+
		"?\u0866\b?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0005?\u086e\b?\n"+
		"?\f?\u0871\t?\u0001?\u0001?\u0003?\u0875\b?\u0001?\u0001?\u0001?\u0001"+
		"?\u0003?\u087b\b?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u0883"+
		"\b?\u0003?\u0885\b?\u0001?\u0003?\u0888\b?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0005?\u0895\b?\n?"+
		"\f?\u0898\t?\u0001?\u0001?\u0001?\u0001?\u0003?\u089e\b?\u0001?\u0001"+
		"?\u0001?\u0003?\u08a3\b?\u0001?\u0001?\u0003?\u08a7\b?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u08b1\b?\u0001?\u0003?\u08b4"+
		"\b?\u0001?\u0001?\u0003?\u08b8\b?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003"+
		"?\u08bf\b?\u0001?\u0001?\u0001?\u0001?\u0003?\u08c5\b?\u0001?\u0001?\u0001"+
		"?\u0005?\u08ca\b?\n?\f?\u08cd\t?\u0003?\u08cf\b?\u0001?\u0003?\u08d2\b"+
		"?\u0001?\u0001?\u0001?\u0001?\u0003?\u08d8\b?\u0001?\u0001?\u0003?\u08dc"+
		"\b?\u0001?\u0001?\u0003?\u08e0\b?\u0001?\u0003?\u08e3\b?\u0001?\u0003"+
		"?\u08e6\b?\u0001?\u0001?\u0001?\u0001?\u0003?\u08ec\b?\u0001?\u0001?\u0003"+
		"?\u08f0\b?\u0001?\u0001?\u0001?\u0003?\u08f5\b?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0003?\u08fc\b?\u0001?\u0001?\u0001?\u0005?\u0901\b?\n?\f?\u0904"+
		"\t?\u0003?\u0906\b?\u0001?\u0001?\u0003?\u090a\b?\u0001?\u0001?\u0003"+
		"?\u090e\b?\u0001?\u0001?\u0001?\u0003?\u0913\b?\u0001?\u0001?\u0003?\u0917"+
		"\b?\u0001?\u0001?\u0003?\u091b\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001"+
		"A\u0001A\u0001A\u0001A\u0001A\u0001A\u0003A\u0928\bA\u0001A\u0001A\u0001"+
		"A\u0003A\u092d\bA\u0001A\u0003A\u0930\bA\u0001A\u0003A\u0933\bA\u0001"+
		"A\u0003A\u0936\bA\u0001A\u0003A\u0939\bA\u0001A\u0003A\u093c\bA\u0001"+
		"A\u0003A\u093f\bA\u0001A\u0001A\u0003A\u0943\bA\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0003B\u094a\bB\u0001B\u0001B\u0001B\u0003B\u094f\bB\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0001B\u0005B\u0957\bB\nB\fB\u095a\tB\u0001B\u0001"+
		"B\u0003B\u095e\bB\u0001B\u0001B\u0001B\u0001B\u0001B\u0005B\u0965\bB\n"+
		"B\fB\u0968\tB\u0003B\u096a\bB\u0001B\u0003B\u096d\bB\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0003B\u0975\bB\u0001B\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0003B\u097d\bB\u0001B\u0001B\u0001B\u0001B\u0003B\u0983\bB\u0001"+
		"B\u0001B\u0003B\u0987\bB\u0001B\u0003B\u098a\bB\u0001B\u0001B\u0003B\u098e"+
		"\bB\u0001B\u0001B\u0003B\u0992\bB\u0001B\u0003B\u0995\bB\u0001B\u0001"+
		"B\u0003B\u0999\bB\u0001B\u0001B\u0001B\u0003B\u099e\bB\u0001B\u0001B\u0003"+
		"B\u09a2\bB\u0001B\u0003B\u09a5\bB\u0001B\u0001B\u0001B\u0003B\u09aa\b"+
		"B\u0001B\u0001B\u0003B\u09ae\bB\u0001B\u0001B\u0001B\u0003B\u09b3\bB\u0001"+
		"B\u0001B\u0003B\u09b7\bB\u0001B\u0001B\u0003B\u09bb\bB\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0005B\u09c8"+
		"\bB\nB\fB\u09cb\tB\u0003B\u09cd\bB\u0001B\u0001B\u0001B\u0001B\u0001B"+
		"\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0005B\u09dc"+
		"\bB\nB\fB\u09df\tB\u0003B\u09e1\bB\u0001B\u0003B\u09e4\bB\u0001B\u0001"+
		"B\u0001B\u0003B\u09e9\bB\u0003B\u09eb\bB\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0003C\u09f5\bC\u0001D\u0001D\u0001D\u0003D\u09fa"+
		"\bD\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0003D\u0a02\bD\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0003D\u0a0b\bD\u0001E\u0001E\u0001"+
		"E\u0003E\u0a10\bE\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0003E\u0a1e\bE\u0001F\u0001F\u0001F\u0003"+
		"F\u0a23\bF\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u0a2a\bF\u0001F\u0001"+
		"F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u0a33\bF\u0001G\u0001G\u0001"+
		"G\u0003G\u0a38\bG\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u0a3f\bG\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u0a48\bG\u0001H\u0001"+
		"H\u0001H\u0003H\u0a4d\bH\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001I\u0001I\u0001I\u0001I\u0003I\u0a5b\bI\u0001I\u0001I\u0001"+
		"J\u0001J\u0001J\u0003J\u0a62\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0003"+
		"J\u0a69\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u0a70\bJ\u0001J\u0003"+
		"J\u0a73\bJ\u0001K\u0001K\u0001K\u0003K\u0a78\bK\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0001K\u0003K\u0a80\bK\u0001K\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0003K\u0a89\bK\u0001L\u0001L\u0001L\u0003L\u0a8e\bL\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0001L\u0003L\u0a96\bL\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001M\u0001M\u0001M\u0001M\u0003M\u0aa1\bM\u0001M\u0001M\u0001"+
		"M\u0003M\u0aa6\bM\u0001M\u0001M\u0004M\u0aaa\bM\u000bM\fM\u0aab\u0003"+
		"M\u0aae\bM\u0001N\u0001N\u0001N\u0001N\u0001O\u0001O\u0001O\u0003O\u0ab7"+
		"\bO\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0abe\bO\u0001O\u0001O\u0003"+
		"O\u0ac2\bO\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001"+
		"P\u0001P\u0005P\u0ace\bP\nP\fP\u0ad1\tP\u0001P\u0001P\u0001P\u0001P\u0001"+
		"P\u0005P\u0ad8\bP\nP\fP\u0adb\tP\u0001P\u0001P\u0001P\u0003P\u0ae0\bP"+
		"\u0001P\u0001P\u0003P\u0ae4\bP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0003Q\u0aef\bQ\u0001Q\u0001Q\u0001Q\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u0afb\bR\u0001R\u0003R\u0afe"+
		"\bR\u0001R\u0001R\u0003R\u0b02\bR\u0001R\u0001R\u0003R\u0b06\bR\u0001"+
		"R\u0001R\u0003R\u0b0a\bR\u0001S\u0001S\u0001S\u0001S\u0001S\u0001S\u0001"+
		"S\u0001S\u0001S\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001T\u0001"+
		"T\u0001T\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0005U\u0b24\bU\nU"+
		"\fU\u0b27\tU\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001W\u0001W\u0001W\u0001W\u0005W\u0b38\bW\nW\fW\u0b3b"+
		"\tW\u0003W\u0b3d\bW\u0001W\u0001W\u0001X\u0003X\u0b42\bX\u0001X\u0001"+
		"X\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0004Y\u0b4b\bY\u000bY\fY\u0b4c\u0001"+
		"Z\u0001Z\u0003Z\u0b51\bZ\u0001Z\u0003Z\u0b54\bZ\u0001Z\u0003Z\u0b57\b"+
		"Z\u0001[\u0001[\u0003[\u0b5b\b[\u0001\\\u0001\\\u0003\\\u0b5f\b\\\u0001"+
		"\\\u0001\\\u0001]\u0001]\u0001]\u0003]\u0b66\b]\u0001]\u0001]\u0003]\u0b6a"+
		"\b]\u0001]\u0001]\u0001]\u0001]\u0005]\u0b70\b]\n]\f]\u0b73\t]\u0001]"+
		"\u0001]\u0003]\u0b77\b]\u0001]\u0001]\u0001]\u0003]\u0b7c\b]\u0001]\u0003"+
		"]\u0b7f\b]\u0001]\u0003]\u0b82\b]\u0001]\u0003]\u0b85\b]\u0001^\u0001"+
		"^\u0003^\u0b89\b^\u0001_\u0001_\u0001_\u0003_\u0b8e\b_\u0001_\u0001_\u0001"+
		"_\u0001_\u0001_\u0005_\u0b95\b_\n_\f_\u0b98\t_\u0001_\u0001_\u0003_\u0b9c"+
		"\b_\u0001_\u0001_\u0001_\u0003_\u0ba1\b_\u0001_\u0001_\u0003_\u0ba5\b"+
		"_\u0001`\u0001`\u0001`\u0003`\u0baa\b`\u0001`\u0001`\u0001`\u0001`\u0001"+
		"`\u0005`\u0bb1\b`\n`\f`\u0bb4\t`\u0001`\u0001`\u0003`\u0bb8\b`\u0001`"+
		"\u0001`\u0001`\u0003`\u0bbd\b`\u0001`\u0001`\u0001`\u0003`\u0bc2\b`\u0001"+
		"a\u0001a\u0001a\u0003a\u0bc7\ba\u0001a\u0001a\u0001a\u0001a\u0001a\u0005"+
		"a\u0bce\ba\na\fa\u0bd1\ta\u0001a\u0001a\u0003a\u0bd5\ba\u0001a\u0001a"+
		"\u0001a\u0001a\u0001a\u0001a\u0003a\u0bdd\ba\u0003a\u0bdf\ba\u0001a\u0003"+
		"a\u0be2\ba\u0001b\u0001b\u0003b\u0be6\bb\u0001b\u0001b\u0005b\u0bea\b"+
		"b\nb\fb\u0bed\tb\u0001b\u0001b\u0001b\u0001b\u0005b\u0bf3\bb\nb\fb\u0bf6"+
		"\tb\u0003b\u0bf8\bb\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0001c\u0001c\u0001c\u0001c\u0001c\u0003c\u0c07\bc\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001"+
		"d\u0003d\u0c16\bd\u0001d\u0001d\u0001d\u0001e\u0001e\u0001e\u0001e\u0001"+
		"e\u0004e\u0c20\be\u000be\fe\u0c21\u0001f\u0001f\u0001f\u0001f\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001h\u0001h\u0001"+
		"h\u0003h\u0c34\bh\u0001h\u0001h\u0001h\u0003h\u0c39\bh\u0001h\u0001h\u0003"+
		"h\u0c3d\bh\u0001i\u0001i\u0001i\u0003i\u0c42\bi\u0001i\u0001i\u0001i\u0001"+
		"i\u0003i\u0c48\bi\u0001i\u0001i\u0001i\u0001i\u0003i\u0c4e\bi\u0001i\u0001"+
		"i\u0001i\u0001i\u0003i\u0c54\bi\u0001i\u0001i\u0001i\u0003i\u0c59\bi\u0001"+
		"i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0003i\u0c63\bi\u0003"+
		"i\u0c65\bi\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0001k\u0001k\u0001"+
		"k\u0003k\u0c70\bk\u0001l\u0001l\u0003l\u0c74\bl\u0001l\u0003l\u0c77\b"+
		"l\u0001l\u0001l\u0001m\u0001m\u0001m\u0003m\u0c7e\bm\u0001m\u0001m\u0003"+
		"m\u0c82\bm\u0001m\u0003m\u0c85\bm\u0001m\u0001m\u0003m\u0c89\bm\u0001"+
		"m\u0001m\u0003m\u0c8d\bm\u0001n\u0001n\u0001n\u0001n\u0005n\u0c93\bn\n"+
		"n\fn\u0c96\tn\u0003n\u0c98\bn\u0001n\u0001n\u0001o\u0001o\u0003o\u0c9e"+
		"\bo\u0001o\u0003o\u0ca1\bo\u0001o\u0003o\u0ca4\bo\u0001p\u0001p\u0001"+
		"p\u0001q\u0001q\u0001q\u0001r\u0001r\u0001r\u0003r\u0caf\br\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0003r\u0cb6\br\u0001r\u0003r\u0cb9\br\u0001r\u0003"+
		"r\u0cbc\br\u0001s\u0001s\u0001s\u0003s\u0cc1\bs\u0001s\u0001s\u0001s\u0001"+
		"s\u0001s\u0001s\u0005s\u0cc9\bs\ns\fs\u0ccc\ts\u0003s\u0cce\bs\u0001s"+
		"\u0003s\u0cd1\bs\u0001s\u0003s\u0cd4\bs\u0001s\u0003s\u0cd7\bs\u0001s"+
		"\u0003s\u0cda\bs\u0001s\u0003s\u0cdd\bs\u0001s\u0003s\u0ce0\bs\u0001t"+
		"\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u0ce8\bt\u0001t\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0003t\u0cf0\bt\u0001t\u0001t\u0001t\u0003t\u0cf5"+
		"\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u0cfc\bt\u0003t\u0cfe\b"+
		"t\u0001u\u0001u\u0001u\u0001u\u0005u\u0d04\bu\nu\fu\u0d07\tu\u0003u\u0d09"+
		"\bu\u0001u\u0001u\u0001v\u0001v\u0003v\u0d0f\bv\u0001v\u0005v\u0d12\b"+
		"v\nv\fv\u0d15\tv\u0001v\u0003v\u0d18\bv\u0001v\u0003v\u0d1b\bv\u0001w"+
		"\u0001w\u0001w\u0001w\u0001w\u0005w\u0d22\bw\nw\fw\u0d25\tw\u0001w\u0001"+
		"w\u0003w\u0d29\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0003"+
		"w\u0d32\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001"+
		"w\u0003w\u0d3d\bw\u0001w\u0001w\u0001w\u0001w\u0003w\u0d43\bw\u0001w\u0001"+
		"w\u0001w\u0001w\u0003w\u0d49\bw\u0001w\u0001w\u0003w\u0d4d\bw\u0001w\u0001"+
		"w\u0003w\u0d51\bw\u0001x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001y\u0003"+
		"y\u0d5a\by\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0003y\u0d62\by\u0001"+
		"y\u0001y\u0001y\u0001y\u0005y\u0d68\by\ny\fy\u0d6b\ty\u0003y\u0d6d\by"+
		"\u0003y\u0d6f\by\u0001z\u0001z\u0003z\u0d73\bz\u0001{\u0001{\u0003{\u0d77"+
		"\b{\u0001{\u0001{\u0001{\u0003{\u0d7c\b{\u0001{\u0001{\u0001{\u0003{\u0d81"+
		"\b{\u0001{\u0001{\u0001{\u0001{\u0003{\u0d87\b{\u0001{\u0003{\u0d8a\b"+
		"{\u0001{\u0001{\u0003{\u0d8e\b{\u0001{\u0003{\u0d91\b{\u0001{\u0003{\u0d94"+
		"\b{\u0001{\u0003{\u0d97\b{\u0001{\u0003{\u0d9a\b{\u0001|\u0001|\u0001"+
		"|\u0001|\u0003|\u0da0\b|\u0001|\u0001|\u0003|\u0da4\b|\u0001|\u0001|\u0001"+
		"|\u0001|\u0003|\u0daa\b|\u0001|\u0003|\u0dad\b|\u0001|\u0001|\u0003|\u0db1"+
		"\b|\u0001|\u0003|\u0db4\b|\u0001|\u0001|\u0003|\u0db8\b|\u0001}\u0001"+
		"}\u0001}\u0001}\u0001}\u0005}\u0dbf\b}\n}\f}\u0dc2\t}\u0001~\u0001~\u0003"+
		"~\u0dc6\b~\u0001~\u0003~\u0dc9\b~\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u0dd7\b\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0003\u007f\u0de1\b\u007f\u0003\u007f\u0de3\b\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003"+
		"\u007f\u0deb\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0005"+
		"\u0080\u0df1\b\u0080\n\u0080\f\u0080\u0df4\t\u0080\u0001\u0081\u0001\u0081"+
		"\u0001\u0081\u0003\u0081\u0df9\b\u0081\u0001\u0081\u0001\u0081\u0001\u0081"+
		"\u0003\u0081\u0dfe\b\u0081\u0001\u0081\u0003\u0081\u0e01\b\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u0e06\b\u0081\u0001\u0082\u0001"+
		"\u0082\u0003\u0082\u0e0a\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003"+
		"\u0082\u0e0f\b\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0003\u0083\u0e17\b\u0083\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u0e25\b\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001"+
		"\u0086\u0003\u0086\u0e2e\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u0e4a"+
		"\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0e50"+
		"\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0003\u008d\u0e58\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u0e5c"+
		"\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u0e61\b\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008e\u0e66\b\u008e\n\u008e"+
		"\f\u008e\u0e69\t\u008e\u0001\u008e\u0003\u008e\u0e6c\b\u008e\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u0e72\b\u008f\u0001\u008f"+
		"\u0001\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0e79\b\u0090"+
		"\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0091\u0001\u0091\u0001\u0091"+
		"\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001\u0094"+
		"\u0003\u0094\u0e93\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0005\u0094"+
		"\u0e98\b\u0094\n\u0094\f\u0094\u0e9b\t\u0094\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0003\u0095\u0ea0\b\u0095\u0001\u0095\u0001\u0095\u0003\u0095\u0ea4"+
		"\b\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001"+
		"\u0096\u0003\u0096\u0eac\b\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0eb4\b\u0097\u0001\u0098\u0001"+
		"\u0098\u0001\u0098\u0001\u0098\u0003\u0098\u0eba\b\u0098\u0001\u0098\u0001"+
		"\u0098\u0003\u0098\u0ebe\b\u0098\u0001\u0099\u0001\u0099\u0001\u0099\u0003"+
		"\u0099\u0ec3\b\u0099\u0001\u0099\u0001\u0099\u0001\u009a\u0001\u009a\u0001"+
		"\u009a\u0003\u009a\u0eca\b\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u0ed2\b\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0005\u009b\u0ed7\b\u009b\n\u009b\f\u009b\u0eda\t\u009b"+
		"\u0001\u009b\u0003\u009b\u0edd\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c"+
		"\u0003\u009c\u0ee2\b\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c"+
		"\u0ee7\b\u009c\n\u009c\f\u009c\u0eea\t\u009c\u0001\u009c\u0003\u009c\u0eed"+
		"\b\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001\u009d\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0ef7\b\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0005\u009e\u0efc\b\u009e\n\u009e\f\u009e\u0eff\t\u009e"+
		"\u0001\u009e\u0003\u009e\u0f02\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0"+
		"\u0f0c\b\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0005\u00a0\u0f11\b"+
		"\u00a0\n\u00a0\f\u00a0\u0f14\t\u00a0\u0001\u00a0\u0003\u00a0\u0f17\b\u00a0"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0f1c\b\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0005\u00a1\u0f21\b\u00a1\n\u00a1\f\u00a1\u0f24"+
		"\t\u00a1\u0001\u00a1\u0003\u00a1\u0f27\b\u00a1\u0001\u00a2\u0001\u00a2"+
		"\u0001\u00a2\u0003\u00a2\u0f2c\b\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2"+
		"\u0f30\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0f35\b"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0005\u00a3\u0f3a\b\u00a3\n"+
		"\u00a3\f\u00a3\u0f3d\t\u00a3\u0001\u00a3\u0003\u00a3\u0f40\b\u00a3\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0003\u00a4\u0f46\b\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003"+
		"\u00a5\u0f4e\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001"+
		"\u00a6\u0001\u00a6\u0003\u00a6\u0f56\b\u00a6\u0001\u00a6\u0001\u00a6\u0001"+
		"\u00a6\u0005\u00a6\u0f5b\b\u00a6\n\u00a6\f\u00a6\u0f5e\t\u00a6\u0001\u00a6"+
		"\u0003\u00a6\u0f61\b\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7"+
		"\u0f66\b\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u0f6b\b"+
		"\u00a7\n\u00a7\f\u00a7\u0f6e\t\u00a7\u0001\u00a8\u0001\u00a8\u0003\u00a8"+
		"\u0f72\b\u00a8\u0001\u00a9\u0001\u00a9\u0003\u00a9\u0f76\b\u00a9\u0001"+
		"\u00a9\u0003\u00a9\u0f79\b\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0f88\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0f8e\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0f94\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0f9a\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0fa0\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u0fa4\b\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0003"+
		"\u00ab\u0fae\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u0fb5\b\u00ab\u0003\u00ab\u0fb7\b\u00ab\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0003\u00ac\u0fc6\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u0fcb\b\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0005\u00ad"+
		"\u0fd1\b\u00ad\n\u00ad\f\u00ad\u0fd4\t\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0003\u00ad\u0fd9\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0003\u00ae\u0fdf\b\u00ae\u0003\u00ae\u0fe1\b\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0fee\b\u00ae"+
		"\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0005\u00ae\u0ff6\b\u00ae\n\u00ae\f\u00ae\u0ff9\t\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0005"+
		"\u00ae\u1002\b\u00ae\n\u00ae\f\u00ae\u1005\t\u00ae\u0003\u00ae\u1007\b"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u100c\b\u00ae\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0005\u00af\u1012\b\u00af\n"+
		"\u00af\f\u00af\u1015\t\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u1019"+
		"\b\u00af\u0003\u00af\u101b\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af"+
		"\u101f\b\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0005\u00af\u1024\b"+
		"\u00af\n\u00af\f\u00af\u1027\t\u00af\u0001\u00af\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00af\u0001\u00af\u0001\u00af\u0005\u00af\u1030\b\u00af"+
		"\n\u00af\f\u00af\u1033\t\u00af\u0003\u00af\u1035\b\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0003\u00af\u103a\b\u00af\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0005\u00b0\u1040\b\u00b0\n\u00b0\f\u00b0\u1043\t\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0003\u00b0\u1047\b\u00b0\u0003\u00b0\u1049\b"+
		"\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b0\u0003\u00b0\u1051\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0003\u00b1\u1057\b\u00b1\u0003\u00b1\u1059\b\u00b1\u0001\u00b1"+
		"\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0005\u00b1\u1060\b\u00b1"+
		"\n\u00b1\f\u00b1\u1063\t\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0005\u00b1\u106c\b\u00b1\n"+
		"\u00b1\f\u00b1\u106f\t\u00b1\u0003\u00b1\u1071\b\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0003\u00b1\u1076\b\u00b1\u0001\u00b2\u0001\u00b2\u0001"+
		"\u00b2\u0001\u00b2\u0005\u00b2\u107c\b\u00b2\n\u00b2\f\u00b2\u107f\t\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0003\u00b2\u1083\b\u00b2\u0003\u00b2\u1085\b"+
		"\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005"+
		"\u00b2\u108c\b\u00b2\n\u00b2\f\u00b2\u108f\t\u00b2\u0001\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0003\u00b2\u1094\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0005\u00b4\u109c\b\u00b4\n\u00b4"+
		"\f\u00b4\u109f\t\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4"+
		"\u10a4\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5"+
		"\u10aa\b\u00b5\u0003\u00b5\u10ac\b\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005\u00b5\u10b4\b\u00b5\n"+
		"\u00b5\f\u00b5\u10b7\t\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0003"+
		"\u00b5\u10bc\b\u00b5\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003"+
		"\u00b6\u10c2\b\u00b6\u0003\u00b6\u10c4\b\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0005\u00b6\u10ce\b\u00b6\n\u00b6\f\u00b6\u10d1\t\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0003\u00b6\u10d6\b\u00b6\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0003\u00b7\u10dc\b\u00b7\u0003\u00b7\u10de\b\u00b7"+
		"\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0005\u00b7"+
		"\u10e5\b\u00b7\n\u00b7\f\u00b7\u10e8\t\u00b7\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0003\u00b7\u10ed\b\u00b7\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b8\u0003\u00b8\u10f3\b\u00b8\u0003\u00b8\u10f5\b\u00b8\u0001\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0005\u00b8\u10fc\b\u00b8"+
		"\n\u00b8\f\u00b8\u10ff\t\u00b8\u0001\u00b8\u0001\u00b8\u0001\u00b8\u0003"+
		"\u00b8\u1104\b\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001"+
		"\u00b9\u0003\u00b9\u110b\b\u00b9\u0003\u00b9\u110d\b\u00b9\u0001\u00b9"+
		"\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9"+
		"\u1115\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba"+
		"\u0001\u00ba\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0005\u00bc\u1124\b\u00bc\n\u00bc\f\u00bc\u1127"+
		"\t\u00bc\u0001\u00bd\u0001\u00bd\u0003\u00bd\u112b\b\u00bd\u0001\u00be"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00bf"+
		"\u0001\u00bf\u0003\u00bf\u1135\b\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00bf"+
		"\u0003\u00bf\u113a\b\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0"+
		"\u114b\b\u00c0\u0003\u00c0\u114d\b\u00c0\u0001\u00c1\u0001\u00c1\u0003"+
		"\u00c1\u1151\b\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1\u1156"+
		"\b\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1\u115b\b\u00c1"+
		"\u0001\u00c1\u0003\u00c1\u115e\b\u00c1\u0001\u00c1\u0001\u00c1\u0004\u00c1"+
		"\u1162\b\u00c1\u000b\u00c1\f\u00c1\u1163\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u116c\b\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1179"+
		"\b\u00c2\n\u00c2\f\u00c2\u117c\t\u00c2\u0001\u00c2\u0003\u00c2\u117f\b"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003"+
		"\u00c2\u1186\b\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1190\b\u00c2\u0001"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4\u0001\u00c4\u0003\u00c4\u1197"+
		"\b\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001"+
		"\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u11a8\b\u00c5\u0001"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u11ae\b\u00c6\u0001"+
		"\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6\u11b3\b\u00c6\u0003\u00c6\u11b5"+
		"\b\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0005\u00c6\u11bb"+
		"\b\u00c6\n\u00c6\f\u00c6\u11be\t\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0003\u00c6\u11c3\b\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0003\u00c7\u11c9\b\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7"+
		"\u11ce\b\u00c7\u0003\u00c7\u11d0\b\u00c7\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u11dd\b\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0005\u00c7\u11e5"+
		"\b\u00c7\n\u00c7\f\u00c7\u11e8\t\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0005\u00c7\u11f1\b\u00c7"+
		"\n\u00c7\f\u00c7\u11f4\t\u00c7\u0003\u00c7\u11f6\b\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0003\u00c7\u11fb\b\u00c7\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0003\u00c8\u1201\b\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0005\u00c8\u1206\b\u00c8\n\u00c8\f\u00c8\u1209\t\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0003\u00c8\u120d\b\u00c8\u0003\u00c8\u120f\b\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0003\u00c8\u1213\b\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0005\u00c8\u1218\b\u00c8\n\u00c8\f\u00c8\u121b\t\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0005\u00c8\u1224\b\u00c8\n\u00c8\f\u00c8\u1227\t\u00c8\u0003\u00c8\u1229"+
		"\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u122e\b\u00c8"+
		"\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u1234\b\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0005\u00c9\u1239\b\u00c9\n\u00c9"+
		"\f\u00c9\u123c\t\u00c9\u0001\u00c9\u0001\u00c9\u0003\u00c9\u1240\b\u00c9"+
		"\u0003\u00c9\u1242\b\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0003\u00c9\u124a\b\u00c9\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0003\u00ca\u1250\b\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u1255\b\u00ca\u0003\u00ca\u1257\b\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u125e"+
		"\b\u00ca\n\u00ca\f\u00ca\u1261\t\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u126a\b\u00ca"+
		"\n\u00ca\f\u00ca\u126d\t\u00ca\u0003\u00ca\u126f\b\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0003\u00ca\u1274\b\u00ca\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0003\u00cb\u127a\b\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0005\u00cb\u127f\b\u00cb\n\u00cb\f\u00cb\u1282\t\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0003\u00cb\u1286\b\u00cb\u0003\u00cb\u1288\b\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0005\u00cb\u128f"+
		"\b\u00cb\n\u00cb\f\u00cb\u1292\t\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb"+
		"\u0003\u00cb\u1297\b\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc"+
		"\u0003\u00cc\u129d\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc"+
		"\u12a2\b\u00cc\n\u00cc\f\u00cc\u12a5\t\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0003\u00cc\u12aa\b\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0003\u00cd\u12b0\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003"+
		"\u00cd\u12b5\b\u00cd\u0003\u00cd\u12b7\b\u00cd\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0005\u00cd\u12bf\b\u00cd"+
		"\n\u00cd\f\u00cd\u12c2\t\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003"+
		"\u00cd\u12c7\b\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003"+
		"\u00ce\u12cd\b\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0003\u00ce\u12d2"+
		"\b\u00ce\u0003\u00ce\u12d4\b\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0005\u00ce"+
		"\u12de\b\u00ce\n\u00ce\f\u00ce\u12e1\t\u00ce\u0001\u00ce\u0001\u00ce\u0001"+
		"\u00ce\u0003\u00ce\u12e6\b\u00ce\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0003\u00cf\u12ec\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003"+
		"\u00cf\u12f1\b\u00cf\u0003\u00cf\u12f3\b\u00cf\u0001\u00cf\u0001\u00cf"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u12fa\b\u00cf\n\u00cf"+
		"\f\u00cf\u12fd\t\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003\u00cf"+
		"\u1302\b\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0"+
		"\u1308\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u130d\b"+
		"\u00d0\u0003\u00d0\u130f\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0001\u00d0\u0005\u00d0\u1316\b\u00d0\n\u00d0\f\u00d0\u1319\t\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u131e\b\u00d0\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u1324\b\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0001\u00d1\u0005\u00d1\u1329\b\u00d1\n\u00d1\f\u00d1\u132c"+
		"\t\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u1330\b\u00d1\u0003\u00d1"+
		"\u1332\b\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1"+
		"\u0001\u00d1\u0003\u00d1\u133a\b\u00d1\u0001\u00d2\u0001\u00d2\u0001\u00d2"+
		"\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d3\u0001\u00d3\u0003\u00d3"+
		"\u1344\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1349\b"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001"+
		"\u00d6\u0001\u00d6\u0003\u00d6\u1352\b\u00d6\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0005\u00d6\u1360\b\u00d6\n"+
		"\u00d6\f\u00d6\u1363\t\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0001\u00d7\u0003\u00d7\u136b\b\u00d7\u0001\u00d7\u0001"+
		"\u00d7\u0001\u00d7\u0003\u00d7\u1370\b\u00d7\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0001\u00d8\u0003\u00d8\u1377\b\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0001\u00d8\u0003\u00d8\u137c\b\u00d8\u0001\u00d8\u0005\u00d8\u137f"+
		"\b\u00d8\n\u00d8\f\u00d8\u1382\t\u00d8\u0003\u00d8\u1384\b\u00d8\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0003\u00d9\u138e\b\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0003\u00d9\u1393\b\u00d9\u0003\u00d9\u1395\b\u00d9\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0005\u00dd\u13ab\b\u00dd\n\u00dd\f\u00dd\u13ae\t\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0005\u00dd\u13b7\b\u00dd\n\u00dd\f\u00dd\u13ba\t\u00dd\u0001\u00dd"+
		"\u0003\u00dd\u13bd\b\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0005\u00de\u13c5\b\u00de\n\u00de\f\u00de\u13c8"+
		"\t\u00de\u0001\u00de\u0003\u00de\u13cb\b\u00de\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0001\u00e0\u0003\u00e0\u13d9\b\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0003\u00e0\u13dd\b\u00e0\u0001\u00e0\u0004\u00e0"+
		"\u13e0\b\u00e0\u000b\u00e0\f\u00e0\u13e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u13eb"+
		"\b\u00e1\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0003\u00e2\u13f4\b\u00e2\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u13fd"+
		"\b\u00e3\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001\u00e4\u0001"+
		"\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001"+
		"\u00e5\u0003\u00e5\u140b\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001"+
		"\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003\u00e6\u1414\b\u00e6\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u141b"+
		"\b\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0001"+
		"\u00e9\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u1426\b\u00e9\u0001"+
		"\u00e9\u0001\u00e9\u0003\u00e9\u142a\b\u00e9\u0001\u00e9\u0001\u00e9\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u1431\b\u00ea\u0001\u00eb\u0001"+
		"\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb\u1437\b\u00eb\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0003\u00ec\u143e\b\u00ec\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u1445"+
		"\b\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0003\u00ee\u144d\b\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0001"+
		"\u00ef\u0001\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u1456\b\u00ef\u0001"+
		"\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0001\u00f1\u0001\u00f1\u0003"+
		"\u00f1\u145e\b\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1462\b\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u1467\b\u00f1\u0001\u00f1"+
		"\u0003\u00f1\u146a\b\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2"+
		"\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003\u00f2\u1473\b\u00f2\u0001\u00f3"+
		"\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3"+
		"\u147b\b\u00f3\u0001\u00f3\u0003\u00f3\u147e\b\u00f3\u0001\u00f3\u0003"+
		"\u00f3\u1481\b\u00f3\u0001\u00f3\u0003\u00f3\u1484\b\u00f3\u0001\u00f3"+
		"\u0003\u00f3\u1487\b\u00f3\u0001\u00f3\u0003\u00f3\u148a\b\u00f3\u0001"+
		"\u00f3\u0003\u00f3\u148d\b\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u1491"+
		"\b\u00f3\u0003\u00f3\u1493\b\u00f3\u0001\u00f3\u0003\u00f3\u1496\b\u00f3"+
		"\u0001\u00f3\u0003\u00f3\u1499\b\u00f3\u0001\u00f3\u0003\u00f3\u149c\b"+
		"\u00f3\u0001\u00f3\u0003\u00f3\u149f\b\u00f3\u0001\u00f3\u0003\u00f3\u14a2"+
		"\b\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001"+
		"\u00f3\u0005\u00f3\u14aa\b\u00f3\n\u00f3\f\u00f3\u14ad\t\u00f3\u0003\u00f3"+
		"\u14af\b\u00f3\u0003\u00f3\u14b1\b\u00f3\u0003\u00f3\u14b3\b\u00f3\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0003"+
		"\u00f5\u14bb\b\u00f5\u0001\u00f6\u0001\u00f6\u0003\u00f6\u14bf\b\u00f6"+
		"\u0001\u00f6\u0003\u00f6\u14c2\b\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f9"+
		"\u0001\u00f9\u0001\u00f9\u0003\u00f9\u14cf\b\u00f9\u0001\u00f9\u0005\u00f9"+
		"\u14d2\b\u00f9\n\u00f9\f\u00f9\u14d5\t\u00f9\u0001\u00f9\u0003\u00f9\u14d8"+
		"\b\u00f9\u0001\u00fa\u0001\u00fa\u0003\u00fa\u14dc\b\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0003\u00fa\u14e0\b\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa"+
		"\u14e4\b\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa\u14e8\b\u00fa\u0001"+
		"\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0003\u00fa\u14ef"+
		"\b\u00fa\u0003\u00fa\u14f1\b\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u1500\b\u00fc"+
		"\u0001\u00fc\u0003\u00fc\u1503\b\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc"+
		"\u1507\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00fe\u0003\u00fe\u150f\b\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0005\u0101\u151e\b\u0101"+
		"\n\u0101\f\u0101\u1521\t\u0101\u0001\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102\u152a\b\u0102\n"+
		"\u0102\f\u0102\u152d\t\u0102\u0003\u0102\u152f\b\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102\u1536\b\u0102\n"+
		"\u0102\f\u0102\u1539\t\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0003\u0102\u1540\b\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u1547\b\u0102\u0005\u0102\u1549"+
		"\b\u0102\n\u0102\f\u0102\u154c\t\u0102\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u155b\b\u0102"+
		"\u0003\u0102\u155d\b\u0102\u0001\u0102\u0001\u0102\u0001\u0103\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0003\u0103\u1565\b\u0103\u0001\u0103\u0001\u0103"+
		"\u0003\u0103\u1569\b\u0103\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0105"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0108"+
		"\u0001\u0108\u0003\u0108\u157c\b\u0108\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0003\u0109\u1584\b\u0109\u0001\u0109"+
		"\u0001\u0109\u0005\u0109\u1588\b\u0109\n\u0109\f\u0109\u158b\t\u0109\u0003"+
		"\u0109\u158d\b\u0109\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u1598"+
		"\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u159d\b\u010b"+
		"\u0001\u010b\u0003\u010b\u15a0\b\u010b\u0003\u010b\u15a2\b\u010b\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u15a7\b\u010c\u0001\u010c\u0001"+
		"\u010c\u0003\u010c\u15ab\b\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u15af"+
		"\b\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u15b3\b\u010c\u0001\u010c"+
		"\u0001\u010c\u0001\u010c\u0003\u010c\u15b8\b\u010c\u0001\u010c\u0003\u010c"+
		"\u15bb\b\u010c\u0001\u010c\u0003\u010c\u15be\b\u010c\u0001\u010c\u0003"+
		"\u010c\u15c1\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0005\u010d\u15c6"+
		"\b\u010d\n\u010d\f\u010d\u15c9\t\u010d\u0001\u010e\u0001\u010e\u0001\u010e"+
		"\u0003\u010e\u15ce\b\u010e\u0003\u010e\u15d0\b\u010e\u0001\u010f\u0001"+
		"\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0005\u0110\u15d7\b\u0110\n"+
		"\u0110\f\u0110\u15da\t\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001"+
		"\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0003\u0112\u15e9\b\u0112\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u15ef\b\u0113\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0003\u0113\u15f9\b\u0113\u0001\u0113\u0003\u0113\u15fc"+
		"\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0005\u0113\u1601\b\u0113"+
		"\n\u0113\f\u0113\u1604\t\u0113\u0003\u0113\u1606\b\u0113\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0005\u0114\u160d\b\u0114\n"+
		"\u0114\f\u0114\u1610\t\u0114\u0003\u0114\u1612\b\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0003\u0115\u161d\b\u0115\u0001\u0116\u0001\u0116\u0001"+
		"\u0116\u0001\u0116\u0001\u0117\u0001\u0117\u0003\u0117\u1625\b\u0117\u0001"+
		"\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0003\u0117\u162b\b\u0117\u0001"+
		"\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0005\u0118\u1631\b\u0118\n"+
		"\u0118\f\u0118\u1634\t\u0118\u0001\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011b\u0001\u011b\u0001\u011b\u0003\u011b\u1642\b\u011b\u0001\u011b\u0001"+
		"\u011b\u0001\u011b\u0001\u011b\u0001\u011c\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0001\u011c\u0003\u011c\u164d\b\u011c\u0001\u011d\u0001\u011d\u0003"+
		"\u011d\u1651\b\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011e\u0001\u011e\u0001\u011e\u0003\u011e\u165a\b\u011e\u0001\u011e\u0001"+
		"\u011e\u0003\u011e\u165e\b\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f\u0001"+
		"\u011f\u0005\u011f\u166a\b\u011f\n\u011f\f\u011f\u166d\t\u011f\u0001\u011f"+
		"\u0001\u011f\u0003\u011f\u1671\b\u011f\u0001\u011f\u0001\u011f\u0001\u0120"+
		"\u0003\u0120\u1676\b\u0120\u0001\u0120\u0001\u0120\u0001\u0121\u0001\u0121"+
		"\u0001\u0121\u0003\u0121\u167d\b\u0121\u0001\u0121\u0001\u0121\u0001\u0121"+
		"\u0005\u0121\u1682\b\u0121\n\u0121\f\u0121\u1685\t\u0121\u0003\u0121\u1687"+
		"\b\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u168b\b\u0121\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0003\u0122\u1690\b\u0122\u0003\u0122\u1692\b"+
		"\u0122\u0001\u0123\u0001\u0123\u0003\u0123\u1696\b\u0123\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0003\u0123\u169b\b\u0123\u0001\u0124\u0001\u0124\u0003"+
		"\u0124\u169f\b\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0005"+
		"\u0124\u16a5\b\u0124\n\u0124\f\u0124\u16a8\t\u0124\u0003\u0124\u16aa\b"+
		"\u0124\u0001\u0125\u0001\u0125\u0001\u0125\u0005\u0125\u16af\b\u0125\n"+
		"\u0125\f\u0125\u16b2\t\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u16b6"+
		"\b\u0125\u0001\u0125\u0001\u0125\u0005\u0125\u16ba\b\u0125\n\u0125\f\u0125"+
		"\u16bd\t\u0125\u0001\u0125\u0003\u0125\u16c0\b\u0125\u0001\u0126\u0001"+
		"\u0126\u0001\u0126\u0001\u0126\u0001\u0127\u0001\u0127\u0001\u0127\u0001"+
		"\u0127\u0005\u0127\u16ca\b\u0127\n\u0127\f\u0127\u16cd\t\u0127\u0001\u0127"+
		"\u0001\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0005\u0128\u16e9\b\u0128\n\u0128\f\u0128\u16ec\t\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0005\u0128\u16ff"+
		"\b\u0128\n\u0128\f\u0128\u1702\t\u0128\u0001\u0128\u0001\u0128\u0001\u0128"+
		"\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0005\u0128\u170b\b\u0128"+
		"\n\u0128\f\u0128\u170e\t\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u1718"+
		"\b\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u171d\b\u0129"+
		"\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u1722\b\u0129\u0001\u0129"+
		"\u0001\u0129\u0001\u0129\u0003\u0129\u1727\b\u0129\u0001\u0129\u0001\u0129"+
		"\u0001\u012a\u0001\u012a\u0001\u012a\u0003\u012a\u172e\b\u012a\u0001\u012a"+
		"\u0001\u012a\u0001\u012a\u0003\u012a\u1733\b\u012a\u0001\u012a\u0001\u012a"+
		"\u0001\u012b\u0001\u012b\u0001\u012b\u0003\u012b\u173a\b\u012b\u0001\u012b"+
		"\u0001\u012b\u0001\u012b\u0003\u012b\u173f\b\u012b\u0001\u012b\u0001\u012b"+
		"\u0001\u012c\u0001\u012c\u0001\u012c\u0003\u012c\u1746\b\u012c\u0001\u012c"+
		"\u0001\u012c\u0001\u012c\u0003\u012c\u174b\b\u012c\u0001\u012c\u0001\u012c"+
		"\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u1752\b\u012d\u0001\u012d"+
		"\u0001\u012d\u0001\u012d\u0003\u012d\u1757\b\u012d\u0001\u012d\u0001\u012d"+
		"\u0001\u012e\u0001\u012e\u0001\u012e\u0003\u012e\u175e\b\u012e\u0001\u012e"+
		"\u0001\u012e\u0001\u012e\u0003\u012e\u1763\b\u012e\u0001\u012e\u0001\u012e"+
		"\u0001\u012f\u0001\u012f\u0001\u012f\u0003\u012f\u176a\b\u012f\u0001\u012f"+
		"\u0001\u012f\u0001\u012f\u0003\u012f\u176f\b\u012f\u0001\u012f\u0001\u012f"+
		"\u0001\u012f\u0003\u012f\u1774\b\u012f\u0001\u012f\u0001\u012f\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0003\u0130\u177b\b\u0130\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0003\u0130\u1780\b\u0130\u0001\u0130\u0001\u0130\u0001\u0130"+
		"\u0003\u0130\u1785\b\u0130\u0001\u0130\u0001\u0130\u0001\u0131\u0001\u0131"+
		"\u0001\u0132\u0001\u0132\u0001\u0132\u0003\u0132\u178e\b\u0132\u0001\u0132"+
		"\u0001\u0132\u0001\u0132\u0003\u0132\u1793\b\u0132\u0001\u0132\u0001\u0132"+
		"\u0001\u0133\u0001\u0133\u0001\u0133\u0003\u0133\u179a\b\u0133\u0001\u0133"+
		"\u0001\u0133\u0001\u0133\u0003\u0133\u179f\b\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0134\u0001\u0134\u0001\u0134\u0003\u0134\u17a6\b\u0134\u0001\u0134"+
		"\u0001\u0134\u0001\u0134\u0003\u0134\u17ab\b\u0134\u0001\u0134\u0001\u0134"+
		"\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135\u17b2\b\u0135\u0001\u0135"+
		"\u0001\u0135\u0001\u0135\u0003\u0135\u17b7\b\u0135\u0001\u0135\u0001\u0135"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u17be\b\u0136\u0001\u0136"+
		"\u0001\u0136\u0001\u0136\u0003\u0136\u17c3\b\u0136\u0001\u0136\u0001\u0136"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u17ca\b\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0138\u0001\u0138\u0001\u0139\u0001\u0139\u0001\u013a"+
		"\u0001\u013a\u0001\u013b\u0001\u013b\u0001\u013c\u0001\u013c\u0001\u013d"+
		"\u0001\u013d\u0001\u013e\u0001\u013e\u0001\u013f\u0001\u013f\u0001\u0140"+
		"\u0001\u0140\u0001\u0141\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0143"+
		"\u0001\u0143\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0003\u0145"+
		"\u17ea\b\u0145\u0001\u0146\u0001\u0146\u0001\u0147\u0001\u0147\u0001\u0148"+
		"\u0001\u0148\u0001\u0149\u0001\u0149\u0003\u0149\u17f4\b\u0149\u0001\u014a"+
		"\u0001\u014a\u0001\u014b\u0001\u014b\u0001\u014c\u0001\u014c\u0001\u014c"+
		"\u0005\u014c\u17fd\b\u014c\n\u014c\f\u014c\u1800\t\u014c\u0001\u014d\u0001"+
		"\u014d\u0001\u014e\u0001\u014e\u0001\u014f\u0001\u014f\u0001\u014f\u0001"+
		"\u014f\u0003\u014f\u180a\b\u014f\u0001\u0150\u0001\u0150\u0001\u0151\u0001"+
		"\u0151\u0001\u0152\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0154\u0001"+
		"\u0154\u0001\u0155\u0001\u0155\u0001\u0156\u0001\u0156\u0001\u0157\u0001"+
		"\u0157\u0001\u0158\u0001\u0158\u0001\u0159\u0001\u0159\u0001\u015a\u0001"+
		"\u015a\u0001\u015b\u0001\u015b\u0001\u015c\u0001\u015c\u0001\u015d\u0001"+
		"\u015d\u0001\u015e\u0001\u015e\u0001\u015f\u0001\u015f\u0001\u0160\u0001"+
		"\u0160\u0001\u0161\u0001\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0001\u0162\u0001\u0162\u0003\u0162\u1837\b\u0162\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u1842\b\u0163\u0001\u0164\u0001"+
		"\u0164\u0001\u0165\u0001\u0165\u0001\u0166\u0003\u0166\u1849\b\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0167\u0001\u0167\u0001\u0168\u0001\u0168\u0001"+
		"\u0169\u0001\u0169\u0001\u0169\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0003\u016a\u1859\b\u016a\u0001\u016b\u0001\u016b\u0001"+
		"\u016c\u0001\u016c\u0001\u016d\u0001\u016d\u0001\u016e\u0001\u016e\u0001"+
		"\u016f\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001"+
		"\u0170\u0001\u0170\u0001\u0170\u0003\u0170\u186c\b\u0170\u0001\u0171\u0001"+
		"\u0171\u0003\u0171\u1870\b\u0171\u0001\u0172\u0001\u0172\u0001\u0173\u0001"+
		"\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001"+
		"\u0173\u0001\u0173\u0003\u0173\u187d\b\u0173\u0001\u0173\u0001\u0173\u0001"+
		"\u0173\u0001\u0173\u0003\u0173\u1883\b\u0173\u0001\u0173\u0001\u0173\u0003"+
		"\u0173\u1887\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001"+
		"\u0174\u0001\u0174\u0003\u0174\u188f\b\u0174\u0001\u0175\u0001\u0175\u0001"+
		"\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0003\u0176\u1897\b\u0176\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0001"+
		"\u0177\u0001\u0177\u0003\u0177\u18ad\b\u0177\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0178\u0003\u0178\u18b8\b\u0178\u0001\u0179\u0001\u0179\u0001\u017a\u0001"+
		"\u017a\u0001\u017b\u0001\u017b\u0001\u017c\u0001\u017c\u0001\u017d\u0001"+
		"\u017d\u0001\u017d\u0001\u0cbb\u0000\u017e\u0000\u0002\u0004\u0006\b\n"+
		"\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246"+
		"8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a"+
		"\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222"+
		"\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a"+
		"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252"+
		"\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a"+
		"\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282"+
		"\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a"+
		"\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2"+
		"\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca"+
		"\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2"+
		"\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa"+
		"\u0000/\u0003\u0000\u0003\u0003\u0116\u0116\u020c\u020c\u0003\u0000\u013f"+
		"\u013f\u016d\u016d\u017a\u017a\u0002\u0000\u00c1\u00c1\u01ea\u01ea\u0002"+
		"\u0000\u016b\u016b\u0243\u0243\u0002\u0000\u00e4\u00e4\u0192\u0192\u0002"+
		"\u0000\u0233\u0233\u0258\u0258\u0005\u0000\u00bd\u00bd\u0135\u0135\u016e"+
		"\u016e\u023d\u023d\u0265\u0265\u0002\u0000\u00fc\u00fc\u0106\u0106\u0001"+
		"\u0000\u0126\u0127\b\u0000\u00e1\u00e1\u0139\u0139\u013b\u013e\u0141\u0141"+
		"\u0144\u0144\u01c3\u01c3\u0215\u0215\u0254\u0256\u0002\u0000\u0228\u0228"+
		"\u022a\u022a\u0004\u0000\u0001\u0001\u0114\u0114\u014f\u014f\u0172\u0172"+
		"\u0002\u0000\u0115\u0115\u0150\u0150\u0002\u0000\u00ae\u00ae\u0148\u0148"+
		"\u0003\u0000\u00ad\u00ad\u00f7\u00f7\u0235\u0235\u0002\u0000\u0131\u0131"+
		"\u0169\u0169\u0002\u0000\u00ef\u00ef\u01c7\u01c7\u0002\u0000\u00e0\u00e0"+
		"\u01a1\u01a2\u0004\u0000\u00a7\u00a7\u015c\u015c\u0169\u0169\u024f\u024f"+
		"\u0002\u0000\u01d7\u01d7\u0259\u0259\u0007\u0000\u0018\u0018kkoo\u00ef"+
		"\u00ef\u0156\u0156\u0237\u0237\u0246\u0247\u0006\u0000kkoo\u00ef\u00ef"+
		"\u0156\u0156\u0237\u0237\u0246\u0246\u0002\u0000\u0018\u0018\u0228\u0228"+
		"\u0002\u0000\u0001\u0001\'\'\u0002\u0000\u0273\u0273\u0277\u0277\u0002"+
		"\u0000]]\u019e\u019e\u0001\u0000\u026f\u0270\u0002\u0000\u0083\u0083\u02a2"+
		"\u02a2\t\u0000\u00ad\u00ad\u00b7\u00b8\u00be\u00be\u00d1\u00d1\u00f2\u00f2"+
		"\u00f4\u00f4\u012f\u012f\u0136\u0136\u01ef\u01ef\u0002\u0000\u0006\u0006"+
		"&&\u0003\u0000\u0002\u0002UU__\u0002\u000078IJ\u0001\u0000\u0282\u0283"+
		"\u0002\u0000\u02c0\u02c0\u02c3\u02c3\u0001\u0000\u02c4\u02c6\u0002\u0000"+
		"\u00fd\u00fd\u0107\u0107\u0001\u0000\u02b8\u02b9\u0004\u0000\u00bd\u00bd"+
		"\u0135\u0135\u016e\u016e\u023d\u023d\u0002\u0000\u011d\u011d\u01b0\u01bb"+
		"\u0001\u0000\u02b2\u02b7\u0003\u0000\u0293\u0295\u029e\u02a0\u02a9\u02ae"+
		"\u0001\u0000\u02a1\u02a8\u0002\u0000^^\u0259\u0259\u0002\u0000..\u0087"+
		"\u0087\b\u0000\t\t\"\"=>PPYZss\u0082\u0082\u027a\u027a\u0001\u0000\u027c"+
		"\u027d\u0001\u0000\u0096\u025b\u1c05\u0000\u0302\u0001\u0000\u0000\u0000"+
		"\u0002\u0313\u0001\u0000\u0000\u0000\u0004\u039c\u0001\u0000\u0000\u0000"+
		"\u0006\u039e\u0001\u0000\u0000\u0000\b\u03b7\u0001\u0000\u0000\u0000\n"+
		"\u03cf\u0001\u0000\u0000\u0000\f\u03e7\u0001\u0000\u0000\u0000\u000e\u03fc"+
		"\u0001\u0000\u0000\u0000\u0010\u040a\u0001\u0000\u0000\u0000\u0012\u0414"+
		"\u0001\u0000\u0000\u0000\u0014\u0421\u0001\u0000\u0000\u0000\u0016\u0429"+
		"\u0001\u0000\u0000\u0000\u0018\u042f\u0001\u0000\u0000\u0000\u001a\u044b"+
		"\u0001\u0000\u0000\u0000\u001c\u0464\u0001\u0000\u0000\u0000\u001e\u0466"+
		"\u0001\u0000\u0000\u0000 \u046b\u0001\u0000\u0000\u0000\"\u0474\u0001"+
		"\u0000\u0000\u0000$\u0479\u0001\u0000\u0000\u0000&\u04c3\u0001\u0000\u0000"+
		"\u0000(\u04c5\u0001\u0000\u0000\u0000*\u04ca\u0001\u0000\u0000\u0000,"+
		"\u04e3\u0001\u0000\u0000\u0000.\u04f1\u0001\u0000\u0000\u00000\u0510\u0001"+
		"\u0000\u0000\u00002\u052c\u0001\u0000\u0000\u00004\u0531\u0001\u0000\u0000"+
		"\u00006\u053d\u0001\u0000\u0000\u00008\u05c2\u0001\u0000\u0000\u0000:"+
		"\u05c4\u0001\u0000\u0000\u0000<\u062d\u0001\u0000\u0000\u0000>\u0645\u0001"+
		"\u0000\u0000\u0000@\u0648\u0001\u0000\u0000\u0000B\u064c\u0001\u0000\u0000"+
		"\u0000D\u065e\u0001\u0000\u0000\u0000F\u0660\u0001\u0000\u0000\u0000H"+
		"\u0668\u0001\u0000\u0000\u0000J\u0670\u0001\u0000\u0000\u0000L\u0677\u0001"+
		"\u0000\u0000\u0000N\u067f\u0001\u0000\u0000\u0000P\u0685\u0001\u0000\u0000"+
		"\u0000R\u068b\u0001\u0000\u0000\u0000T\u0691\u0001\u0000\u0000\u0000V"+
		"\u0697\u0001\u0000\u0000\u0000X\u069d\u0001\u0000\u0000\u0000Z\u06a3\u0001"+
		"\u0000\u0000\u0000\\\u06a9\u0001\u0000\u0000\u0000^\u06ae\u0001\u0000"+
		"\u0000\u0000`\u06b2\u0001\u0000\u0000\u0000b\u06c2\u0001\u0000\u0000\u0000"+
		"d\u06f4\u0001\u0000\u0000\u0000f\u0722\u0001\u0000\u0000\u0000h\u0740"+
		"\u0001\u0000\u0000\u0000j\u0748\u0001\u0000\u0000\u0000l\u074a\u0001\u0000"+
		"\u0000\u0000n\u0766\u0001\u0000\u0000\u0000p\u07b5\u0001\u0000\u0000\u0000"+
		"r\u07b7\u0001\u0000\u0000\u0000t\u0800\u0001\u0000\u0000\u0000v\u0802"+
		"\u0001\u0000\u0000\u0000x\u0819\u0001\u0000\u0000\u0000z\u082b\u0001\u0000"+
		"\u0000\u0000|\u083b\u0001\u0000\u0000\u0000~\u084b\u0001\u0000\u0000\u0000"+
		"\u0080\u091c\u0001\u0000\u0000\u0000\u0082\u0921\u0001\u0000\u0000\u0000"+
		"\u0084\u0944\u0001\u0000\u0000\u0000\u0086\u09f4\u0001\u0000\u0000\u0000"+
		"\u0088\u09f6\u0001\u0000\u0000\u0000\u008a\u0a0c\u0001\u0000\u0000\u0000"+
		"\u008c\u0a1f\u0001\u0000\u0000\u0000\u008e\u0a34\u0001\u0000\u0000\u0000"+
		"\u0090\u0a49\u0001\u0000\u0000\u0000\u0092\u0a56\u0001\u0000\u0000\u0000"+
		"\u0094\u0a5e\u0001\u0000\u0000\u0000\u0096\u0a74\u0001\u0000\u0000\u0000"+
		"\u0098\u0a8a\u0001\u0000\u0000\u0000\u009a\u0a9c\u0001\u0000\u0000\u0000"+
		"\u009c\u0aaf\u0001\u0000\u0000\u0000\u009e\u0ab3\u0001\u0000\u0000\u0000"+
		"\u00a0\u0ac3\u0001\u0000\u0000\u0000\u00a2\u0ae5\u0001\u0000\u0000\u0000"+
		"\u00a4\u0af3\u0001\u0000\u0000\u0000\u00a6\u0b0b\u0001\u0000\u0000\u0000"+
		"\u00a8\u0b14\u0001\u0000\u0000\u0000\u00aa\u0b1d\u0001\u0000\u0000\u0000"+
		"\u00ac\u0b28\u0001\u0000\u0000\u0000\u00ae\u0b33\u0001\u0000\u0000\u0000"+
		"\u00b0\u0b41\u0001\u0000\u0000\u0000\u00b2\u0b45\u0001\u0000\u0000\u0000"+
		"\u00b4\u0b50\u0001\u0000\u0000\u0000\u00b6\u0b58\u0001\u0000\u0000\u0000"+
		"\u00b8\u0b5c\u0001\u0000\u0000\u0000\u00ba\u0b62\u0001\u0000\u0000\u0000"+
		"\u00bc\u0b88\u0001\u0000\u0000\u0000\u00be\u0b8a\u0001\u0000\u0000\u0000"+
		"\u00c0\u0ba6\u0001\u0000\u0000\u0000\u00c2\u0bc3\u0001\u0000\u0000\u0000"+
		"\u00c4\u0bf7\u0001\u0000\u0000\u0000\u00c6\u0bf9\u0001\u0000\u0000\u0000"+
		"\u00c8\u0c08\u0001\u0000\u0000\u0000\u00ca\u0c1a\u0001\u0000\u0000\u0000"+
		"\u00cc\u0c23\u0001\u0000\u0000\u0000\u00ce\u0c27\u0001\u0000\u0000\u0000"+
		"\u00d0\u0c30\u0001\u0000\u0000\u0000\u00d2\u0c3e\u0001\u0000\u0000\u0000"+
		"\u00d4\u0c66\u0001\u0000\u0000\u0000\u00d6\u0c6f\u0001\u0000\u0000\u0000"+
		"\u00d8\u0c71\u0001\u0000\u0000\u0000\u00da\u0c7a\u0001\u0000\u0000\u0000"+
		"\u00dc\u0c8e\u0001\u0000\u0000\u0000\u00de\u0c9b\u0001\u0000\u0000\u0000"+
		"\u00e0\u0ca5\u0001\u0000\u0000\u0000\u00e2\u0ca8\u0001\u0000\u0000\u0000"+
		"\u00e4\u0cab\u0001\u0000\u0000\u0000\u00e6\u0cbd\u0001\u0000\u0000\u0000"+
		"\u00e8\u0ce1\u0001\u0000\u0000\u0000\u00ea\u0cff\u0001\u0000\u0000\u0000"+
		"\u00ec\u0d0c\u0001\u0000\u0000\u0000\u00ee\u0d50\u0001\u0000\u0000\u0000"+
		"\u00f0\u0d52\u0001\u0000\u0000\u0000\u00f2\u0d6e\u0001\u0000\u0000\u0000"+
		"\u00f4\u0d72\u0001\u0000\u0000\u0000\u00f6\u0d74\u0001\u0000\u0000\u0000"+
		"\u00f8\u0d9b\u0001\u0000\u0000\u0000\u00fa\u0db9\u0001\u0000\u0000\u0000"+
		"\u00fc\u0dc3\u0001\u0000\u0000\u0000\u00fe\u0dca\u0001\u0000\u0000\u0000"+
		"\u0100\u0dec\u0001\u0000\u0000\u0000\u0102\u0df5\u0001\u0000\u0000\u0000"+
		"\u0104\u0e07\u0001\u0000\u0000\u0000\u0106\u0e16\u0001\u0000\u0000\u0000"+
		"\u0108\u0e18\u0001\u0000\u0000\u0000\u010a\u0e1d\u0001\u0000\u0000\u0000"+
		"\u010c\u0e28\u0001\u0000\u0000\u0000\u010e\u0e2f\u0001\u0000\u0000\u0000"+
		"\u0110\u0e34\u0001\u0000\u0000\u0000\u0112\u0e39\u0001\u0000\u0000\u0000"+
		"\u0114\u0e3d\u0001\u0000\u0000\u0000\u0116\u0e40\u0001\u0000\u0000\u0000"+
		"\u0118\u0e4b\u0001\u0000\u0000\u0000\u011a\u0e54\u0001\u0000\u0000\u0000"+
		"\u011c\u0e5d\u0001\u0000\u0000\u0000\u011e\u0e6d\u0001\u0000\u0000\u0000"+
		"\u0120\u0e75\u0001\u0000\u0000\u0000\u0122\u0e7d\u0001\u0000\u0000\u0000"+
		"\u0124\u0e83\u0001\u0000\u0000\u0000\u0126\u0e89\u0001\u0000\u0000\u0000"+
		"\u0128\u0e8f\u0001\u0000\u0000\u0000\u012a\u0e9c\u0001\u0000\u0000\u0000"+
		"\u012c\u0ea5\u0001\u0000\u0000\u0000\u012e\u0ead\u0001\u0000\u0000\u0000"+
		"\u0130\u0eb5\u0001\u0000\u0000\u0000\u0132\u0ebf\u0001\u0000\u0000\u0000"+
		"\u0134\u0ec6\u0001\u0000\u0000\u0000\u0136\u0ece\u0001\u0000\u0000\u0000"+
		"\u0138\u0ede\u0001\u0000\u0000\u0000\u013a\u0eee\u0001\u0000\u0000\u0000"+
		"\u013c\u0ef3\u0001\u0000\u0000\u0000\u013e\u0f03\u0001\u0000\u0000\u0000"+
		"\u0140\u0f08\u0001\u0000\u0000\u0000\u0142\u0f18\u0001\u0000\u0000\u0000"+
		"\u0144\u0f28\u0001\u0000\u0000\u0000\u0146\u0f31\u0001\u0000\u0000\u0000"+
		"\u0148\u0f41\u0001\u0000\u0000\u0000\u014a\u0f49\u0001\u0000\u0000\u0000"+
		"\u014c\u0f52\u0001\u0000\u0000\u0000\u014e\u0f62\u0001\u0000\u0000\u0000"+
		"\u0150\u0f6f\u0001\u0000\u0000\u0000\u0152\u0f73\u0001\u0000\u0000\u0000"+
		"\u0154\u0f7c\u0001\u0000\u0000\u0000\u0156\u0fa8\u0001\u0000\u0000\u0000"+
		"\u0158\u0fc5\u0001\u0000\u0000\u0000\u015a\u0fc7\u0001\u0000\u0000\u0000"+
		"\u015c\u0fda\u0001\u0000\u0000\u0000\u015e\u100d\u0001\u0000\u0000\u0000"+
		"\u0160\u103b\u0001\u0000\u0000\u0000\u0162\u1052\u0001\u0000\u0000\u0000"+
		"\u0164\u1077\u0001\u0000\u0000\u0000\u0166\u1095\u0001\u0000\u0000\u0000"+
		"\u0168\u1097\u0001\u0000\u0000\u0000\u016a\u10a5\u0001\u0000\u0000\u0000"+
		"\u016c\u10bd\u0001\u0000\u0000\u0000\u016e\u10d7\u0001\u0000\u0000\u0000"+
		"\u0170\u10ee\u0001\u0000\u0000\u0000\u0172\u1105\u0001\u0000\u0000\u0000"+
		"\u0174\u1116\u0001\u0000\u0000\u0000\u0176\u111c\u0001\u0000\u0000\u0000"+
		"\u0178\u1120\u0001\u0000\u0000\u0000\u017a\u112a\u0001\u0000\u0000\u0000"+
		"\u017c\u112c\u0001\u0000\u0000\u0000\u017e\u1132\u0001\u0000\u0000\u0000"+
		"\u0180\u114c\u0001\u0000\u0000\u0000\u0182\u114e\u0001\u0000\u0000\u0000"+
		"\u0184\u118f\u0001\u0000\u0000\u0000\u0186\u1191\u0001\u0000\u0000\u0000"+
		"\u0188\u1194\u0001\u0000\u0000\u0000\u018a\u11a7\u0001\u0000\u0000\u0000"+
		"\u018c\u11a9\u0001\u0000\u0000\u0000\u018e\u11c4\u0001\u0000\u0000\u0000"+
		"\u0190\u11fc\u0001\u0000\u0000\u0000\u0192\u122f\u0001\u0000\u0000\u0000"+
		"\u0194\u124b\u0001\u0000\u0000\u0000\u0196\u1275\u0001\u0000\u0000\u0000"+
		"\u0198\u1298\u0001\u0000\u0000\u0000\u019a\u12ab\u0001\u0000\u0000\u0000"+
		"\u019c\u12c8\u0001\u0000\u0000\u0000\u019e\u12e7\u0001\u0000\u0000\u0000"+
		"\u01a0\u1303\u0001\u0000\u0000\u0000\u01a2\u131f\u0001\u0000\u0000\u0000"+
		"\u01a4\u133b\u0001\u0000\u0000\u0000\u01a6\u1341\u0001\u0000\u0000\u0000"+
		"\u01a8\u1345\u0001\u0000\u0000\u0000\u01aa\u134c\u0001\u0000\u0000\u0000"+
		"\u01ac\u134f\u0001\u0000\u0000\u0000\u01ae\u136f\u0001\u0000\u0000\u0000"+
		"\u01b0\u1383\u0001\u0000\u0000\u0000\u01b2\u1385\u0001\u0000\u0000\u0000"+
		"\u01b4\u1396\u0001\u0000\u0000\u0000\u01b6\u139b\u0001\u0000\u0000\u0000"+
		"\u01b8\u13a0\u0001\u0000\u0000\u0000\u01ba\u13a5\u0001\u0000\u0000\u0000"+
		"\u01bc\u13be\u0001\u0000\u0000\u0000\u01be\u13cc\u0001\u0000\u0000\u0000"+
		"\u01c0\u13d2\u0001\u0000\u0000\u0000\u01c2\u13e3\u0001\u0000\u0000\u0000"+
		"\u01c4\u13ec\u0001\u0000\u0000\u0000\u01c6\u13f5\u0001\u0000\u0000\u0000"+
		"\u01c8\u13fe\u0001\u0000\u0000\u0000\u01ca\u1404\u0001\u0000\u0000\u0000"+
		"\u01cc\u140c\u0001\u0000\u0000\u0000\u01ce\u1415\u0001\u0000\u0000\u0000"+
		"\u01d0\u141c\u0001\u0000\u0000\u0000\u01d2\u1421\u0001\u0000\u0000\u0000"+
		"\u01d4\u142d\u0001\u0000\u0000\u0000\u01d6\u1432\u0001\u0000\u0000\u0000"+
		"\u01d8\u1438\u0001\u0000\u0000\u0000\u01da\u143f\u0001\u0000\u0000\u0000"+
		"\u01dc\u1446\u0001\u0000\u0000\u0000\u01de\u144e\u0001\u0000\u0000\u0000"+
		"\u01e0\u1457\u0001\u0000\u0000\u0000\u01e2\u145b\u0001\u0000\u0000\u0000"+
		"\u01e4\u1472\u0001\u0000\u0000\u0000\u01e6\u14b2\u0001\u0000\u0000\u0000"+
		"\u01e8\u14b4\u0001\u0000\u0000\u0000\u01ea\u14b7\u0001\u0000\u0000\u0000"+
		"\u01ec\u14bc\u0001\u0000\u0000\u0000\u01ee\u14c5\u0001\u0000\u0000\u0000"+
		"\u01f0\u14c8\u0001\u0000\u0000\u0000\u01f2\u14cb\u0001\u0000\u0000\u0000"+
		"\u01f4\u14f0\u0001\u0000\u0000\u0000\u01f6\u14f2\u0001\u0000\u0000\u0000"+
		"\u01f8\u14fa\u0001\u0000\u0000\u0000\u01fa\u1508\u0001\u0000\u0000\u0000"+
		"\u01fc\u150b\u0001\u0000\u0000\u0000\u01fe\u1512\u0001\u0000\u0000\u0000"+
		"\u0200\u1515\u0001\u0000\u0000\u0000\u0202\u1518\u0001\u0000\u0000\u0000"+
		"\u0204\u1522\u0001\u0000\u0000\u0000\u0206\u1560\u0001\u0000\u0000\u0000"+
		"\u0208\u156a\u0001\u0000\u0000\u0000\u020a\u156d\u0001\u0000\u0000\u0000"+
		"\u020c\u1571\u0001\u0000\u0000\u0000\u020e\u1575\u0001\u0000\u0000\u0000"+
		"\u0210\u1579\u0001\u0000\u0000\u0000\u0212\u158c\u0001\u0000\u0000\u0000"+
		"\u0214\u158e\u0001\u0000\u0000\u0000\u0216\u15a1\u0001\u0000\u0000\u0000"+
		"\u0218\u15b2\u0001\u0000\u0000\u0000\u021a\u15c2\u0001\u0000\u0000\u0000"+
		"\u021c\u15cf\u0001\u0000\u0000\u0000\u021e\u15d1\u0001\u0000\u0000\u0000"+
		"\u0220\u15d3\u0001\u0000\u0000\u0000\u0222\u15db\u0001\u0000\u0000\u0000"+
		"\u0224\u15e8\u0001\u0000\u0000\u0000\u0226\u1605\u0001\u0000\u0000\u0000"+
		"\u0228\u1607\u0001\u0000\u0000\u0000\u022a\u161c\u0001\u0000\u0000\u0000"+
		"\u022c\u161e\u0001\u0000\u0000\u0000\u022e\u1622\u0001\u0000\u0000\u0000"+
		"\u0230\u162c\u0001\u0000\u0000\u0000\u0232\u1635\u0001\u0000\u0000\u0000"+
		"\u0234\u163a\u0001\u0000\u0000\u0000\u0236\u163e\u0001\u0000\u0000\u0000"+
		"\u0238\u164c\u0001\u0000\u0000\u0000\u023a\u164e\u0001\u0000\u0000\u0000"+
		"\u023c\u1656\u0001\u0000\u0000\u0000\u023e\u165f\u0001\u0000\u0000\u0000"+
		"\u0240\u1675\u0001\u0000\u0000\u0000\u0242\u1679\u0001\u0000\u0000\u0000"+
		"\u0244\u1691\u0001\u0000\u0000\u0000\u0246\u1693\u0001\u0000\u0000\u0000"+
		"\u0248\u16a9\u0001\u0000\u0000\u0000\u024a\u16bf\u0001\u0000\u0000\u0000"+
		"\u024c\u16c1\u0001\u0000\u0000\u0000\u024e\u16c5\u0001\u0000\u0000\u0000"+
		"\u0250\u1717\u0001\u0000\u0000\u0000\u0252\u1726\u0001\u0000\u0000\u0000"+
		"\u0254\u1732\u0001\u0000\u0000\u0000\u0256\u173e\u0001\u0000\u0000\u0000"+
		"\u0258\u174a\u0001\u0000\u0000\u0000\u025a\u1756\u0001\u0000\u0000\u0000"+
		"\u025c\u1762\u0001\u0000\u0000\u0000\u025e\u1773\u0001\u0000\u0000\u0000"+
		"\u0260\u1784\u0001\u0000\u0000\u0000\u0262\u1788\u0001\u0000\u0000\u0000"+
		"\u0264\u1792\u0001\u0000\u0000\u0000\u0266\u179e\u0001\u0000\u0000\u0000"+
		"\u0268\u17aa\u0001\u0000\u0000\u0000\u026a\u17b6\u0001\u0000\u0000\u0000"+
		"\u026c\u17c2\u0001\u0000\u0000\u0000\u026e\u17c9\u0001\u0000\u0000\u0000"+
		"\u0270\u17cd\u0001\u0000\u0000\u0000\u0272\u17cf\u0001\u0000\u0000\u0000"+
		"\u0274\u17d1\u0001\u0000\u0000\u0000\u0276\u17d3\u0001\u0000\u0000\u0000"+
		"\u0278\u17d5\u0001\u0000\u0000\u0000\u027a\u17d7\u0001\u0000\u0000\u0000"+
		"\u027c\u17d9\u0001\u0000\u0000\u0000\u027e\u17db\u0001\u0000\u0000\u0000"+
		"\u0280\u17dd\u0001\u0000\u0000\u0000\u0282\u17df\u0001\u0000\u0000\u0000"+
		"\u0284\u17e1\u0001\u0000\u0000\u0000\u0286\u17e3\u0001\u0000\u0000\u0000"+
		"\u0288\u17e5\u0001\u0000\u0000\u0000\u028a\u17e7\u0001\u0000\u0000\u0000"+
		"\u028c\u17eb\u0001\u0000\u0000\u0000\u028e\u17ed\u0001\u0000\u0000\u0000"+
		"\u0290\u17ef\u0001\u0000\u0000\u0000\u0292\u17f3\u0001\u0000\u0000\u0000"+
		"\u0294\u17f5\u0001\u0000\u0000\u0000\u0296\u17f7\u0001\u0000\u0000\u0000"+
		"\u0298\u17f9\u0001\u0000\u0000\u0000\u029a\u1801\u0001\u0000\u0000\u0000"+
		"\u029c\u1803\u0001\u0000\u0000\u0000\u029e\u1809\u0001\u0000\u0000\u0000"+
		"\u02a0\u180b\u0001\u0000\u0000\u0000\u02a2\u180d\u0001\u0000\u0000\u0000"+
		"\u02a4\u180f\u0001\u0000\u0000\u0000\u02a6\u1811\u0001\u0000\u0000\u0000"+
		"\u02a8\u1813\u0001\u0000\u0000\u0000\u02aa\u1815\u0001\u0000\u0000\u0000"+
		"\u02ac\u1817\u0001\u0000\u0000\u0000\u02ae\u1819\u0001\u0000\u0000\u0000"+
		"\u02b0\u181b\u0001\u0000\u0000\u0000\u02b2\u181d\u0001\u0000\u0000\u0000"+
		"\u02b4\u181f\u0001\u0000\u0000\u0000\u02b6\u1821\u0001\u0000\u0000\u0000"+
		"\u02b8\u1823\u0001\u0000\u0000\u0000\u02ba\u1825\u0001\u0000\u0000\u0000"+
		"\u02bc\u1827\u0001\u0000\u0000\u0000\u02be\u1829\u0001\u0000\u0000\u0000"+
		"\u02c0\u182b\u0001\u0000\u0000\u0000\u02c2\u182d\u0001\u0000\u0000\u0000"+
		"\u02c4\u1836\u0001\u0000\u0000\u0000\u02c6\u1841\u0001\u0000\u0000\u0000"+
		"\u02c8\u1843\u0001\u0000\u0000\u0000\u02ca\u1845\u0001\u0000\u0000\u0000"+
		"\u02cc\u1848\u0001\u0000\u0000\u0000\u02ce\u184c\u0001\u0000\u0000\u0000"+
		"\u02d0\u184e\u0001\u0000\u0000\u0000\u02d2\u1850\u0001\u0000\u0000\u0000"+
		"\u02d4\u1858\u0001\u0000\u0000\u0000\u02d6\u185a\u0001\u0000\u0000\u0000"+
		"\u02d8\u185c\u0001\u0000\u0000\u0000\u02da\u185e\u0001\u0000\u0000\u0000"+
		"\u02dc\u1860\u0001\u0000\u0000\u0000\u02de\u1862\u0001\u0000\u0000\u0000"+
		"\u02e0\u186b\u0001\u0000\u0000\u0000\u02e2\u186d\u0001\u0000\u0000\u0000"+
		"\u02e4\u1871\u0001\u0000\u0000\u0000\u02e6\u187c\u0001\u0000\u0000\u0000"+
		"\u02e8\u188e\u0001\u0000\u0000\u0000\u02ea\u1890\u0001\u0000\u0000\u0000"+
		"\u02ec\u1896\u0001\u0000\u0000\u0000\u02ee\u18ac\u0001\u0000\u0000\u0000"+
		"\u02f0\u18b7\u0001\u0000\u0000\u0000\u02f2\u18b9\u0001\u0000\u0000\u0000"+
		"\u02f4\u18bb\u0001\u0000\u0000\u0000\u02f6\u18bd\u0001\u0000\u0000\u0000"+
		"\u02f8\u18bf\u0001\u0000\u0000\u0000\u02fa\u18c1\u0001\u0000\u0000\u0000"+
		"\u02fc\u02fe\u0003\u0002\u0001\u0000\u02fd\u02fc\u0001\u0000\u0000\u0000"+
		"\u02fd\u02fe\u0001\u0000\u0000\u0000\u02fe\u02ff\u0001\u0000\u0000\u0000"+
		"\u02ff\u0301\u0005\u029a\u0000\u0000\u0300\u02fd\u0001\u0000\u0000\u0000"+
		"\u0301\u0304\u0001\u0000\u0000\u0000\u0302\u0300\u0001\u0000\u0000\u0000"+
		"\u0302\u0303\u0001\u0000\u0000\u0000\u0303\u0309\u0001\u0000\u0000\u0000"+
		"\u0304\u0302\u0001\u0000\u0000\u0000\u0305\u0307\u0003\u0002\u0001\u0000"+
		"\u0306\u0308\u0005\u029a\u0000\u0000\u0307\u0306\u0001\u0000\u0000\u0000"+
		"\u0307\u0308\u0001\u0000\u0000\u0000\u0308\u030a\u0001\u0000\u0000\u0000"+
		"\u0309\u0305\u0001\u0000\u0000\u0000\u0309\u030a\u0001\u0000\u0000\u0000"+
		"\u030a\u030c\u0001\u0000\u0000\u0000\u030b\u030d\u0005\u0000\u0000\u0001"+
		"\u030c\u030b\u0001\u0000\u0000\u0000\u030c\u030d\u0001\u0000\u0000\u0000"+
		"\u030d\u0001\u0001\u0000\u0000\u0000\u030e\u030f\u0005\u0297\u0000\u0000"+
		"\u030f\u0310\u0003\u0002\u0001\u0000\u0310\u0311\u0005\u0298\u0000\u0000"+
		"\u0311\u0314\u0001\u0000\u0000\u0000\u0312\u0314\u0003\u0004\u0002\u0000"+
		"\u0313\u030e\u0001\u0000\u0000\u0000\u0313\u0312\u0001\u0000\u0000\u0000"+
		"\u0314\u0003\u0001\u0000\u0000\u0000\u0315\u039d\u0003\u0006\u0003\u0000"+
		"\u0316\u039d\u0003\b\u0004\u0000\u0317\u039d\u0003\n\u0005\u0000\u0318"+
		"\u039d\u0003\f\u0006\u0000\u0319\u039d\u0003\u000e\u0007\u0000\u031a\u039d"+
		"\u0003\u0010\b\u0000\u031b\u039d\u0003\u0012\t\u0000\u031c\u039d\u0003"+
		"\u0014\n\u0000\u031d\u039d\u0003\u0016\u000b\u0000\u031e\u039d\u0003\u0018"+
		"\f\u0000\u031f\u039d\u0003\u001a\r\u0000\u0320\u039d\u0003\u001e\u000f"+
		"\u0000\u0321\u039d\u0003 \u0010\u0000\u0322\u039d\u0003\"\u0011\u0000"+
		"\u0323\u039d\u0003$\u0012\u0000\u0324\u039d\u0003(\u0014\u0000\u0325\u039d"+
		"\u0003*\u0015\u0000\u0326\u039d\u0003,\u0016\u0000\u0327\u039d\u00030"+
		"\u0018\u0000\u0328\u039d\u00032\u0019\u0000\u0329\u039d\u00034\u001a\u0000"+
		"\u032a\u039d\u00036\u001b\u0000\u032b\u039d\u0003:\u001d\u0000\u032c\u039d"+
		"\u0003>\u001f\u0000\u032d\u039d\u0003B!\u0000\u032e\u039d\u0003D\"\u0000"+
		"\u032f\u039d\u0003^/\u0000\u0330\u039d\u0003`0\u0000\u0331\u039d\u0003"+
		"r9\u0000\u0332\u039d\u0003t:\u0000\u0333\u039d\u0003v;\u0000\u0334\u039d"+
		"\u0003x<\u0000\u0335\u039d\u0003z=\u0000\u0336\u039d\u0003|>\u0000\u0337"+
		"\u039d\u0003~?\u0000\u0338\u039d\u0003\u0080@\u0000\u0339\u039d\u0003"+
		"\u0082A\u0000\u033a\u039d\u0003\u0084B\u0000\u033b\u039d\u0003\u0086C"+
		"\u0000\u033c\u039d\u0003\u009aM\u0000\u033d\u039d\u0003\u009eO\u0000\u033e"+
		"\u039d\u0003\u00a0P\u0000\u033f\u039d\u0003\u00a2Q\u0000\u0340\u039d\u0003"+
		"\u00a4R\u0000\u0341\u039d\u0003\u00a6S\u0000\u0342\u039d\u0003\u00a8T"+
		"\u0000\u0343\u039d\u0003\u00aaU\u0000\u0344\u039d\u0003\u00acV\u0000\u0345"+
		"\u039d\u0003\u00b2Y\u0000\u0346\u039d\u0003\u00ba]\u0000\u0347\u039d\u0003"+
		"\u00bc^\u0000\u0348\u039d\u0003\u00c2a\u0000\u0349\u039d\u0003\u00cae"+
		"\u0000\u034a\u039d\u0003\u00ccf\u0000\u034b\u039d\u0003\u00ceg\u0000\u034c"+
		"\u039d\u0003\u00d0h\u0000\u034d\u039d\u0003\u00d2i\u0000\u034e\u039d\u0003"+
		"\u00d4j\u0000\u034f\u039d\u0003\u00d6k\u0000\u0350\u039d\u0003\u00f4z"+
		"\u0000\u0351\u039d\u0003\u00fe\u007f\u0000\u0352\u039d\u0003\u0100\u0080"+
		"\u0000\u0353\u039d\u0003\u0102\u0081\u0000\u0354\u039d\u0003\u0104\u0082"+
		"\u0000\u0355\u039d\u0003\u0106\u0083\u0000\u0356\u039d\u0003\u0114\u008a"+
		"\u0000\u0357\u039d\u0003\u0116\u008b\u0000\u0358\u039d\u0003\u0118\u008c"+
		"\u0000\u0359\u039d\u0003\u011a\u008d\u0000\u035a\u039d\u0003\u011c\u008e"+
		"\u0000\u035b\u039d\u0003\u011e\u008f\u0000\u035c\u039d\u0003\u0120\u0090"+
		"\u0000\u035d\u039d\u0003\u0122\u0091\u0000\u035e\u039d\u0003\u0124\u0092"+
		"\u0000\u035f\u039d\u0003\u0126\u0093\u0000\u0360\u039d\u0003\u0128\u0094"+
		"\u0000\u0361\u039d\u0003\u012a\u0095\u0000\u0362\u039d\u0003\u012c\u0096"+
		"\u0000\u0363\u039d\u0003\u012e\u0097\u0000\u0364\u039d\u0003\u0130\u0098"+
		"\u0000\u0365\u039d\u0003\u0132\u0099\u0000\u0366\u039d\u0003\u0134\u009a"+
		"\u0000\u0367\u039d\u0003\u0136\u009b\u0000\u0368\u039d\u0003\u0138\u009c"+
		"\u0000\u0369\u039d\u0003\u013a\u009d\u0000\u036a\u039d\u0003\u013c\u009e"+
		"\u0000\u036b\u039d\u0003\u013e\u009f\u0000\u036c\u039d\u0003\u0140\u00a0"+
		"\u0000\u036d\u039d\u0003\u0142\u00a1\u0000\u036e\u039d\u0003\u0144\u00a2"+
		"\u0000\u036f\u039d\u0003\u0146\u00a3\u0000\u0370\u039d\u0003\u0148\u00a4"+
		"\u0000\u0371\u039d\u0003\u014a\u00a5\u0000\u0372\u039d\u0003\u014c\u00a6"+
		"\u0000\u0373\u039d\u0003\u014e\u00a7\u0000\u0374\u039d\u0003\u0150\u00a8"+
		"\u0000\u0375\u039d\u0003\u0152\u00a9\u0000\u0376\u039d\u0003\u0154\u00aa"+
		"\u0000\u0377\u039d\u0003\u0156\u00ab\u0000\u0378\u039d\u0003\u0158\u00ac"+
		"\u0000\u0379\u039d\u0003\u017e\u00bf\u0000\u037a\u039d\u0003\u0182\u00c1"+
		"\u0000\u037b\u039d\u0003\u0186\u00c3\u0000\u037c\u039d\u0003\u0188\u00c4"+
		"\u0000\u037d\u039d\u0003\u018a\u00c5\u0000\u037e\u039d\u0003\u01a6\u00d3"+
		"\u0000\u037f\u039d\u0003\u01a8\u00d4\u0000\u0380\u039d\u0003\u01aa\u00d5"+
		"\u0000\u0381\u039d\u0003\u01ac\u00d6\u0000\u0382\u039d\u0003\u01b0\u00d8"+
		"\u0000\u0383\u039d\u0003\u01b2\u00d9\u0000\u0384\u039d\u0003\u01b4\u00da"+
		"\u0000\u0385\u039d\u0003\u01b6\u00db\u0000\u0386\u039d\u0003\u01b8\u00dc"+
		"\u0000\u0387\u039d\u0003\u01ba\u00dd\u0000\u0388\u039d\u0003\u01bc\u00de"+
		"\u0000\u0389\u039d\u0003\u01be\u00df\u0000\u038a\u039d\u0003\u01c0\u00e0"+
		"\u0000\u038b\u039d\u0003\u01c2\u00e1\u0000\u038c\u039d\u0003\u01c4\u00e2"+
		"\u0000\u038d\u039d\u0003\u01c6\u00e3\u0000\u038e\u039d\u0003\u01c8\u00e4"+
		"\u0000\u038f\u039d\u0003\u01ca\u00e5\u0000\u0390\u039d\u0003\u01cc\u00e6"+
		"\u0000\u0391\u039d\u0003\u01ce\u00e7\u0000\u0392\u039d\u0003\u01d0\u00e8"+
		"\u0000\u0393\u039d\u0003\u01d2\u00e9\u0000\u0394\u039d\u0003\u01d4\u00ea"+
		"\u0000\u0395\u039d\u0003\u01d6\u00eb\u0000\u0396\u039d\u0003\u01d8\u00ec"+
		"\u0000\u0397\u039d\u0003\u01da\u00ed\u0000\u0398\u039d\u0003\u01dc\u00ee"+
		"\u0000\u0399\u039d\u0003\u01de\u00ef\u0000\u039a\u039d\u0003\u01e0\u00f0"+
		"\u0000\u039b\u039d\u0003\u01e2\u00f1\u0000\u039c\u0315\u0001\u0000\u0000"+
		"\u0000\u039c\u0316\u0001\u0000\u0000\u0000\u039c\u0317\u0001\u0000\u0000"+
		"\u0000\u039c\u0318\u0001\u0000\u0000\u0000\u039c\u0319\u0001\u0000\u0000"+
		"\u0000\u039c\u031a\u0001\u0000\u0000\u0000\u039c\u031b\u0001\u0000\u0000"+
		"\u0000\u039c\u031c\u0001\u0000\u0000\u0000\u039c\u031d\u0001\u0000\u0000"+
		"\u0000\u039c\u031e\u0001\u0000\u0000\u0000\u039c\u031f\u0001\u0000\u0000"+
		"\u0000\u039c\u0320\u0001\u0000\u0000\u0000\u039c\u0321\u0001\u0000\u0000"+
		"\u0000\u039c\u0322\u0001\u0000\u0000\u0000\u039c\u0323\u0001\u0000\u0000"+
		"\u0000\u039c\u0324\u0001\u0000\u0000\u0000\u039c\u0325\u0001\u0000\u0000"+
		"\u0000\u039c\u0326\u0001\u0000\u0000\u0000\u039c\u0327\u0001\u0000\u0000"+
		"\u0000\u039c\u0328\u0001\u0000\u0000\u0000\u039c\u0329\u0001\u0000\u0000"+
		"\u0000\u039c\u032a\u0001\u0000\u0000\u0000\u039c\u032b\u0001\u0000\u0000"+
		"\u0000\u039c\u032c\u0001\u0000\u0000\u0000\u039c\u032d\u0001\u0000\u0000"+
		"\u0000\u039c\u032e\u0001\u0000\u0000\u0000\u039c\u032f\u0001\u0000\u0000"+
		"\u0000\u039c\u0330\u0001\u0000\u0000\u0000\u039c\u0331\u0001\u0000\u0000"+
		"\u0000\u039c\u0332\u0001\u0000\u0000\u0000\u039c\u0333\u0001\u0000\u0000"+
		"\u0000\u039c\u0334\u0001\u0000\u0000\u0000\u039c\u0335\u0001\u0000\u0000"+
		"\u0000\u039c\u0336\u0001\u0000\u0000\u0000\u039c\u0337\u0001\u0000\u0000"+
		"\u0000\u039c\u0338\u0001\u0000\u0000\u0000\u039c\u0339\u0001\u0000\u0000"+
		"\u0000\u039c\u033a\u0001\u0000\u0000\u0000\u039c\u033b\u0001\u0000\u0000"+
		"\u0000\u039c\u033c\u0001\u0000\u0000\u0000\u039c\u033d\u0001\u0000\u0000"+
		"\u0000\u039c\u033e\u0001\u0000\u0000\u0000\u039c\u033f\u0001\u0000\u0000"+
		"\u0000\u039c\u0340\u0001\u0000\u0000\u0000\u039c\u0341\u0001\u0000\u0000"+
		"\u0000\u039c\u0342\u0001\u0000\u0000\u0000\u039c\u0343\u0001\u0000\u0000"+
		"\u0000\u039c\u0344\u0001\u0000\u0000\u0000\u039c\u0345\u0001\u0000\u0000"+
		"\u0000\u039c\u0346\u0001\u0000\u0000\u0000\u039c\u0347\u0001\u0000\u0000"+
		"\u0000\u039c\u0348\u0001\u0000\u0000\u0000\u039c\u0349\u0001\u0000\u0000"+
		"\u0000\u039c\u034a\u0001\u0000\u0000\u0000\u039c\u034b\u0001\u0000\u0000"+
		"\u0000\u039c\u034c\u0001\u0000\u0000\u0000\u039c\u034d\u0001\u0000\u0000"+
		"\u0000\u039c\u034e\u0001\u0000\u0000\u0000\u039c\u034f\u0001\u0000\u0000"+
		"\u0000\u039c\u0350\u0001\u0000\u0000\u0000\u039c\u0351\u0001\u0000\u0000"+
		"\u0000\u039c\u0352\u0001\u0000\u0000\u0000\u039c\u0353\u0001\u0000\u0000"+
		"\u0000\u039c\u0354\u0001\u0000\u0000\u0000\u039c\u0355\u0001\u0000\u0000"+
		"\u0000\u039c\u0356\u0001\u0000\u0000\u0000\u039c\u0357\u0001\u0000\u0000"+
		"\u0000\u039c\u0358\u0001\u0000\u0000\u0000\u039c\u0359\u0001\u0000\u0000"+
		"\u0000\u039c\u035a\u0001\u0000\u0000\u0000\u039c\u035b\u0001\u0000\u0000"+
		"\u0000\u039c\u035c\u0001\u0000\u0000\u0000\u039c\u035d\u0001\u0000\u0000"+
		"\u0000\u039c\u035e\u0001\u0000\u0000\u0000\u039c\u035f\u0001\u0000\u0000"+
		"\u0000\u039c\u0360\u0001\u0000\u0000\u0000\u039c\u0361\u0001\u0000\u0000"+
		"\u0000\u039c\u0362\u0001\u0000\u0000\u0000\u039c\u0363\u0001\u0000\u0000"+
		"\u0000\u039c\u0364\u0001\u0000\u0000\u0000\u039c\u0365\u0001\u0000\u0000"+
		"\u0000\u039c\u0366\u0001\u0000\u0000\u0000\u039c\u0367\u0001\u0000\u0000"+
		"\u0000\u039c\u0368\u0001\u0000\u0000\u0000\u039c\u0369\u0001\u0000\u0000"+
		"\u0000\u039c\u036a\u0001\u0000\u0000\u0000\u039c\u036b\u0001\u0000\u0000"+
		"\u0000\u039c\u036c\u0001\u0000\u0000\u0000\u039c\u036d\u0001\u0000\u0000"+
		"\u0000\u039c\u036e\u0001\u0000\u0000\u0000\u039c\u036f\u0001\u0000\u0000"+
		"\u0000\u039c\u0370\u0001\u0000\u0000\u0000\u039c\u0371\u0001\u0000\u0000"+
		"\u0000\u039c\u0372\u0001\u0000\u0000\u0000\u039c\u0373\u0001\u0000\u0000"+
		"\u0000\u039c\u0374\u0001\u0000\u0000\u0000\u039c\u0375\u0001\u0000\u0000"+
		"\u0000\u039c\u0376\u0001\u0000\u0000\u0000\u039c\u0377\u0001\u0000\u0000"+
		"\u0000\u039c\u0378\u0001\u0000\u0000\u0000\u039c\u0379\u0001\u0000\u0000"+
		"\u0000\u039c\u037a\u0001\u0000\u0000\u0000\u039c\u037b\u0001\u0000\u0000"+
		"\u0000\u039c\u037c\u0001\u0000\u0000\u0000\u039c\u037d\u0001\u0000\u0000"+
		"\u0000\u039c\u037e\u0001\u0000\u0000\u0000\u039c\u037f\u0001\u0000\u0000"+
		"\u0000\u039c\u0380\u0001\u0000\u0000\u0000\u039c\u0381\u0001\u0000\u0000"+
		"\u0000\u039c\u0382\u0001\u0000\u0000\u0000\u039c\u0383\u0001\u0000\u0000"+
		"\u0000\u039c\u0384\u0001\u0000\u0000\u0000\u039c\u0385\u0001\u0000\u0000"+
		"\u0000\u039c\u0386\u0001\u0000\u0000\u0000\u039c\u0387\u0001\u0000\u0000"+
		"\u0000\u039c\u0388\u0001\u0000\u0000\u0000\u039c\u0389\u0001\u0000\u0000"+
		"\u0000\u039c\u038a\u0001\u0000\u0000\u0000\u039c\u038b\u0001\u0000\u0000"+
		"\u0000\u039c\u038c\u0001\u0000\u0000\u0000\u039c\u038d\u0001\u0000\u0000"+
		"\u0000\u039c\u038e\u0001\u0000\u0000\u0000\u039c\u038f\u0001\u0000\u0000"+
		"\u0000\u039c\u0390\u0001\u0000\u0000\u0000\u039c\u0391\u0001\u0000\u0000"+
		"\u0000\u039c\u0392\u0001\u0000\u0000\u0000\u039c\u0393\u0001\u0000\u0000"+
		"\u0000\u039c\u0394\u0001\u0000\u0000\u0000\u039c\u0395\u0001\u0000\u0000"+
		"\u0000\u039c\u0396\u0001\u0000\u0000\u0000\u039c\u0397\u0001\u0000\u0000"+
		"\u0000\u039c\u0398\u0001\u0000\u0000\u0000\u039c\u0399\u0001\u0000\u0000"+
		"\u0000\u039c\u039a\u0001\u0000\u0000\u0000\u039c\u039b\u0001\u0000\u0000"+
		"\u0000\u039d\u0005\u0001\u0000\u0000\u0000\u039e\u039f\u0005\u00a3\u0000"+
		"\u0000\u039f\u03a0\u0005\u0098\u0000\u0000\u03a0\u03a1\u0005\u01c1\u0000"+
		"\u0000\u03a1\u03a2\u0005]\u0000\u0000\u03a2\u03ae\u0003\u0254\u012a\u0000"+
		"\u03a3\u03a4\u00050\u0000\u0000\u03a4\u03a5\u0005\u0015\u0000\u0000\u03a5"+
		"\u03a7\u0003\u0252\u0129\u0000\u03a6\u03a8\u0003\u0212\u0109\u0000\u03a7"+
		"\u03a6\u0001\u0000\u0000\u0000\u03a7\u03a8\u0001\u0000\u0000\u0000\u03a8"+
		"\u03af\u0001\u0000\u0000\u0000\u03a9\u03aa\u00050\u0000\u0000\u03aa\u03ac"+
		"\u0005\u01f4\u0000\u0000\u03ab\u03ad\u0003\u0200\u0100\u0000\u03ac\u03ab"+
		"\u0001\u0000\u0000\u0000\u03ac\u03ad\u0001\u0000\u0000\u0000\u03ad\u03af"+
		"\u0001\u0000\u0000\u0000\u03ae\u03a3\u0001\u0000\u0000\u0000\u03ae\u03a9"+
		"\u0001\u0000\u0000\u0000\u03af\u03b5\u0001\u0000\u0000\u0000\u03b0\u03b6"+
		"\u0003\u02c8\u0164\u0000\u03b1\u03b2\u0005\u00d7\u0000\u0000\u03b2\u03b3"+
		"\u0005\u0083\u0000\u0000\u03b3\u03b4\u0005w\u0000\u0000\u03b4\u03b6\u0003"+
		"\u0254\u012a\u0000\u03b5\u03b0\u0001\u0000\u0000\u0000\u03b5\u03b1\u0001"+
		"\u0000\u0000\u0000\u03b5\u03b6\u0001\u0000\u0000\u0000\u03b6\u0007\u0001"+
		"\u0000\u0000\u0000\u03b7\u03b8\u0005\u00a3\u0000\u0000\u03b8\u03b9\u0005"+
		"\u00ac\u0000\u0000\u03b9\u03cd\u0003\u02bc\u015e\u0000\u03ba\u03ce\u0003"+
		"\u02c8\u0164\u0000\u03bb\u03c5\u0005\u0169\u0000\u0000\u03bc\u03c1\u0005"+
		"\u0143\u0000\u0000\u03bd\u03bf\u0005\u018f\u0000\u0000\u03be\u03bd\u0001"+
		"\u0000\u0000\u0000\u03be\u03bf\u0001\u0000\u0000\u0000\u03bf\u03c0\u0001"+
		"\u0000\u0000\u0000\u03c0\u03c2\u0005\u022f\u0000\u0000\u03c1\u03be\u0001"+
		"\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000\u0000\u03c2\u03c3\u0001"+
		"\u0000\u0000\u0000\u03c3\u03c5\u0003\u02ce\u0167\u0000\u03c4\u03bb\u0001"+
		"\u0000\u0000\u0000\u03c4\u03bc\u0001\u0000\u0000\u0000\u03c5\u03ce\u0001"+
		"\u0000\u0000\u0000\u03c6\u03ce\u0003\u020c\u0106\u0000\u03c7\u03c8\u0005"+
		"\u017f\u0000\u0000\u03c8\u03ce\u0003\u02b8\u015c\u0000\u03c9\u03ca\u0005"+
		"\u0208\u0000\u0000\u03ca\u03ce\u0003\u0248\u0124\u0000\u03cb\u03cc\u0005"+
		"\u01ca\u0000\u0000\u03cc\u03ce\u0003\u02ae\u0157\u0000\u03cd\u03ba\u0001"+
		"\u0000\u0000\u0000\u03cd\u03c4\u0001\u0000\u0000\u0000\u03cd\u03c6\u0001"+
		"\u0000\u0000\u0000\u03cd\u03c7\u0001\u0000\u0000\u0000\u03cd\u03c9\u0001"+
		"\u0000\u0000\u0000\u03cd\u03cb\u0001\u0000\u0000\u0000\u03ce\t\u0001\u0000"+
		"\u0000\u0000\u03cf\u03d0\u0005\u00a3\u0000\u0000\u03d0\u03d1\u0005\u00e4"+
		"\u0000\u0000\u03d1\u03e5\u0003\u0270\u0138\u0000\u03d2\u03d3\u0005\u0103"+
		"\u0000\u0000\u03d3\u03d4\u0005\u0001\u0000\u0000\u03d4\u03d5\u0005\u011e"+
		"\u0000\u0000\u03d5\u03e6\u00055\u0000\u0000\u03d6\u03d7\u0005\u011b\u0000"+
		"\u0000\u03d7\u03d8\u0005]\u0000\u0000\u03d8\u03e6\u0003\u02b2\u0159\u0000"+
		"\u03d9\u03da\u0005\u01e7\u0000\u0000\u03da\u03e6\u0005\u0217\u0000\u0000"+
		"\u03db\u03dd\u0005\u0208\u0000\u0000\u03dc\u03de\u0005\u01a8\u0000\u0000"+
		"\u03dd\u03dc\u0001\u0000\u0000\u0000\u03dd\u03de\u0001\u0000\u0000\u0000"+
		"\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e6\u0003\u0248\u0124\u0000"+
		"\u03e0\u03e2\u0005\u00c9\u0000\u0000\u03e1\u03e3\u0005\u01a8\u0000\u0000"+
		"\u03e2\u03e1\u0001\u0000\u0000\u0000\u03e2\u03e3\u0001\u0000\u0000\u0000"+
		"\u03e3\u03e4\u0001\u0000\u0000\u0000\u03e4\u03e6\u0003\u0298\u014c\u0000"+
		"\u03e5\u03d2\u0001\u0000\u0000\u0000\u03e5\u03d6\u0001\u0000\u0000\u0000"+
		"\u03e5\u03d9\u0001\u0000\u0000\u0000\u03e5\u03db\u0001\u0000\u0000\u0000"+
		"\u03e5\u03e0\u0001\u0000\u0000\u0000\u03e6\u000b\u0001\u0000\u0000\u0000"+
		"\u03e7\u03e8\u0005\u00a3\u0000\u0000\u03e8\u03e9\u0005\u011e\u0000\u0000"+
		"\u03e9\u03ea\u00055\u0000\u0000\u03ea\u03fa\u0003\u02ba\u015d\u0000\u03eb"+
		"\u03ec\u0005\u009e\u0000\u0000\u03ec\u03ed\u0005\u0192\u0000\u0000\u03ed"+
		"\u03fb\u0003\u02a2\u0151\u0000\u03ee\u03ef\u0005\u0103\u0000\u0000\u03ef"+
		"\u03f0\u0005\u0192\u0000\u0000\u03f0\u03fb\u0003\u02a2\u0151\u0000\u03f1"+
		"\u03f2\u0005\u009e\u0000\u0000\u03f2\u03f3\u0005\u011e\u0000\u0000\u03f3"+
		"\u03f4\u00055\u0000\u0000\u03f4\u03fb\u0003\u02c6\u0163\u0000\u03f5\u03f6"+
		"\u0005\u0103\u0000\u0000\u03f6\u03f7\u0005\u011e\u0000\u0000\u03f7\u03f8"+
		"\u00055\u0000\u0000\u03f8\u03fb\u0003\u02c6\u0163\u0000\u03f9\u03fb\u0003"+
		"\u020c\u0106\u0000\u03fa\u03eb\u0001\u0000\u0000\u0000\u03fa\u03ee\u0001"+
		"\u0000\u0000\u0000\u03fa\u03f1\u0001\u0000\u0000\u0000\u03fa\u03f5\u0001"+
		"\u0000\u0000\u0000\u03fa\u03f9\u0001\u0000\u0000\u0000\u03fb\r\u0001\u0000"+
		"\u0000\u0000\u03fc\u03fd\u0005\u00a3\u0000\u0000\u03fd\u03fe\u0005\u012d"+
		"\u0000\u0000\u03fe\u0400\u0003\u0264\u0132\u0000\u03ff\u0401\u0003\u00ae"+
		"W\u0000\u0400\u03ff\u0001\u0000\u0000\u0000\u0400\u0401\u0001\u0000\u0000"+
		"\u0000\u0401\u0408\u0001\u0000\u0000\u0000\u0402\u0409\u0003\u020a\u0105"+
		"\u0000\u0403\u0409\u0003\u020c\u0106\u0000\u0404\u0409\u0003\u020e\u0107"+
		"\u0000\u0405\u0406\u0005\u0208\u0000\u0000\u0406\u0407\u0005\u011f\u0000"+
		"\u0000\u0407\u0409\u0003\u02e4\u0172\u0000\u0408\u0402\u0001\u0000\u0000"+
		"\u0000\u0408\u0403\u0001\u0000\u0000\u0000\u0408\u0404\u0001\u0000\u0000"+
		"\u0000\u0408\u0405\u0001\u0000\u0000\u0000\u0409\u000f\u0001\u0000\u0000"+
		"\u0000\u040a\u040b\u0005\u00a3\u0000\u0000\u040b\u040c\u0005\u0138\u0000"+
		"\u0000\u040c\u040d\u0005n\u0000\u0000\u040d\u040e\u0003\u0292\u0149\u0000"+
		"\u040e\u0410\u0005\u0208\u0000\u0000\u040f\u0411\u0003\u009cN\u0000\u0410"+
		"\u040f\u0001\u0000\u0000\u0000\u0411\u0412\u0001\u0000\u0000\u0000\u0412"+
		"\u0410\u0001\u0000\u0000\u0000\u0412\u0413\u0001\u0000\u0000\u0000\u0413"+
		"\u0011\u0001\u0000\u0000\u0000\u0414\u0415\u0005\u00a3\u0000\u0000\u0415"+
		"\u0416\u0005\u0166\u0000\u0000\u0416\u041d\u0003\u0266\u0133\u0000\u0417"+
		"\u0418\u0005\u00f5\u0000\u0000\u0418\u041b\u0003\u02c6\u0163\u0000\u0419"+
		"\u041a\u0005\u0160\u0000\u0000\u041a\u041c\u0003\u028e\u0147\u0000\u041b"+
		"\u0419\u0001\u0000\u0000\u0000\u041b\u041c\u0001\u0000\u0000\u0000\u041c"+
		"\u041e\u0001\u0000\u0000\u0000\u041d\u0417\u0001\u0000\u0000\u0000\u041d"+
		"\u041e\u0001\u0000\u0000\u0000\u041e\u041f\u0001\u0000\u0000\u0000\u041f"+
		"\u0420\u0003\u0240\u0120\u0000\u0420\u0013\u0001\u0000\u0000\u0000\u0421"+
		"\u0422\u0005\u00a3\u0000\u0000\u0422\u0423\u0005\u0186\u0000\u0000\u0423"+
		"\u0427\u0003\u026a\u0135\u0000\u0424\u0428\u0003\u020a\u0105\u0000\u0425"+
		"\u0428\u0003\u020c\u0106\u0000\u0426\u0428\u0003\u020e\u0107\u0000\u0427"+
		"\u0424\u0001\u0000\u0000\u0000\u0427\u0425\u0001\u0000\u0000\u0000\u0427"+
		"\u0426\u0001\u0000\u0000\u0000\u0428\u0015\u0001\u0000\u0000\u0000\u0429"+
		"\u042a\u0005\u00a3\u0000\u0000\u042a\u042b\u0005\u018d\u0000\u0000\u042b"+
		"\u042c\u0005\u0158\u0000\u0000\u042c\u042d\u0003\u02c0\u0160\u0000\u042d"+
		"\u042e\u0003\u020c\u0106\u0000\u042e\u0017\u0001\u0000\u0000\u0000\u042f"+
		"\u0430\u0005\u00a3\u0000\u0000\u0430\u0431\u0005\u0192\u0000\u0000\u0431"+
		"\u0449\u0003\u02a2\u0151\u0000\u0432\u0433\u0005\u011b\u0000\u0000\u0433"+
		"\u0434\u0005]\u0000\u0000\u0434\u044a\u0003\u02a2\u0151\u0000\u0435\u0437"+
		"\u0005C\u0000\u0000\u0436\u0435\u0001\u0000\u0000\u0000\u0436\u0437\u0001"+
		"\u0000\u0000\u0000\u0437\u0438\u0001\u0000\u0000\u0000\u0438\u044a\u0003"+
		"\u02c6\u0163\u0000\u0439\u043c\u0005\u01e6\u0000\u0000\u043a\u043b\u0005"+
		"\u0094\u0000\u0000\u043b\u043d\u0003\u02c6\u0163\u0000\u043c\u043a\u0001"+
		"\u0000\u0000\u0000\u043c\u043d\u0001\u0000\u0000\u0000\u043d\u044a\u0001"+
		"\u0000\u0000\u0000\u043e\u044a\u0005\u01e7\u0000\u0000\u043f\u0441\u0005"+
		"\u0208\u0000\u0000\u0440\u0442\u0005\u01a8\u0000\u0000\u0441\u0440\u0001"+
		"\u0000\u0000\u0000\u0441\u0442\u0001\u0000\u0000\u0000\u0442\u0443\u0001"+
		"\u0000\u0000\u0000\u0443\u044a\u0003\u0248\u0124\u0000\u0444\u0446\u0005"+
		"\u00c9\u0000\u0000\u0445\u0447\u0005\u01a8\u0000\u0000\u0446\u0445\u0001"+
		"\u0000\u0000\u0000\u0446\u0447\u0001\u0000\u0000\u0000\u0447\u0448\u0001"+
		"\u0000\u0000\u0000\u0448\u044a\u0003\u0298\u014c\u0000\u0449\u0432\u0001"+
		"\u0000\u0000\u0000\u0449\u0436\u0001\u0000\u0000\u0000\u0449\u0439\u0001"+
		"\u0000\u0000\u0000\u0449\u043e\u0001\u0000\u0000\u0000\u0449\u043f\u0001"+
		"\u0000\u0000\u0000\u0449\u0444\u0001\u0000\u0000\u0000\u044a\u0019\u0001"+
		"\u0000\u0000\u0000\u044b\u044c\u0005\u00a3\u0000\u0000\u044c\u044d\u0005"+
		"\u0195\u0000\u0000\u044d\u0451\u0003\u027a\u013d\u0000\u044e\u0450\u0003"+
		"\u001c\u000e\u0000\u044f\u044e\u0001\u0000\u0000\u0000\u0450\u0453\u0001"+
		"\u0000\u0000\u0000\u0451\u044f\u0001\u0000\u0000\u0000\u0451\u0452\u0001"+
		"\u0000\u0000\u0000\u0452\u001b\u0001\u0000\u0000\u0000\u0453\u0451\u0001"+
		"\u0000\u0000\u0000\u0454\u0456\u0005\u018f\u0000\u0000\u0455\u0454\u0001"+
		"\u0000\u0000\u0000\u0455\u0456\u0001\u0000\u0000\u0000\u0456\u0457\u0001"+
		"\u0000\u0000\u0000\u0457\u0458\u0005\u0013\u0000\u0000\u0458\u0465\u0005"+
		"\u00d0\u0000\u0000\u0459\u045a\u0003\u02c8\u0164\u0000\u045a\u045b\u0005"+
		"\u0147\u0000\u0000\u045b\u045c\u0005\u00ba\u0000\u0000\u045c\u045d\u0003"+
		"\u02c6\u0163\u0000\u045d\u0465\u0001\u0000\u0000\u0000\u045e\u045f\u0005"+
		"\u0176\u0000\u0000\u045f\u0465\u0003\u02c6\u0163\u0000\u0460\u0461\u0005"+
		"\u0177\u0000\u0000\u0461\u0465\u0003\u02c6\u0163\u0000\u0462\u0463\u0005"+
		"\u01a9\u0000\u0000\u0463\u0465\u0003\u02c6\u0163\u0000\u0464\u0455\u0001"+
		"\u0000\u0000\u0000\u0464\u0459\u0001\u0000\u0000\u0000\u0464\u045e\u0001"+
		"\u0000\u0000\u0000\u0464\u0460\u0001\u0000\u0000\u0000\u0464\u0462\u0001"+
		"\u0000\u0000\u0000\u0465\u001d\u0001\u0000\u0000\u0000\u0466\u0467\u0005"+
		"\u00a3\u0000\u0000\u0467\u0468\u0005\u01cf\u0000\u0000\u0468\u0469\u0003"+
		"\u025e\u012f\u0000\u0469\u046a\u0003\u020c\u0106\u0000\u046a\u001f\u0001"+
		"\u0000\u0000\u0000\u046b\u046c\u0005\u00a3\u0000\u0000\u046c\u046d\u0005"+
		"\u01ce\u0000\u0000\u046d\u046e\u0003\u02c2\u0161\u0000\u046e\u0470\u0005"+
		"K\u0000\u0000\u046f\u0471\u0003\u02d2\u0169\u0000\u0470\u046f\u0001\u0000"+
		"\u0000\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472\u0470\u0001\u0000"+
		"\u0000\u0000\u0472\u0473\u0001\u0000\u0000\u0000\u0473!\u0001\u0000\u0000"+
		"\u0000\u0474\u0475\u0005\u00a3\u0000\u0000\u0475\u0476\u0005\u01ce\u0000"+
		"\u0000\u0476\u0477\u0003\u02c2\u0161\u0000\u0477\u0478\u0003\u020c\u0106"+
		"\u0000\u0478#\u0001\u0000\u0000\u0000\u0479\u047a\u0005\u00a3\u0000\u0000"+
		"\u047a\u047b\u0005\u01e8\u0000\u0000\u047b\u047c\u0005\u01c2\u0000\u0000"+
		"\u047c\u047e\u0003\u0290\u0148\u0000\u047d\u047f\u0003&\u0013\u0000\u047e"+
		"\u047d\u0001\u0000\u0000\u0000\u047f\u0480\u0001\u0000\u0000\u0000\u0480"+
		"\u047e\u0001\u0000\u0000\u0000\u0480\u0481\u0001\u0000\u0000\u0000\u0481"+
		"%\u0001\u0000\u0000\u0000\u0482\u0483\u0005\u00c1\u0000\u0000\u0483\u0484"+
		"\u0005\u0083\u0000\u0000\u0484\u04c4\u0003\u02c6\u0163\u0000\u0485\u0486"+
		"\u0005\u00d8\u0000\u0000\u0486\u04c4\u0007\u0000\u0000\u0000\u0487\u0492"+
		"\u0005\u00d9\u0000\u0000\u0488\u0493\u0005T\u0000\u0000\u0489\u048a\u0003"+
		"\u02c6\u0163\u0000\u048a\u048b\u0005\u0292\u0000\u0000\u048b\u048c\u0003"+
		"\u02c6\u0163\u0000\u048c\u0493\u0001\u0000\u0000\u0000\u048d\u048e\u0003"+
		"\u02c6\u0163\u0000\u048e\u048f\u0005\u0293\u0000\u0000\u048f\u0490\u0003"+
		"\u02c6\u0163\u0000\u0490\u0493\u0001\u0000\u0000\u0000\u0491\u0493\u0003"+
		"\u02ac\u0156\u0000\u0492\u0488\u0001\u0000\u0000\u0000\u0492\u0489\u0001"+
		"\u0000\u0000\u0000\u0492\u048d\u0001\u0000\u0000\u0000\u0492\u0491\u0001"+
		"\u0000\u0000\u0000\u0493\u04c4\u0001\u0000\u0000\u0000\u0494\u0497\u0005"+
		"\u0118\u0000\u0000\u0495\u0498\u0003\u02ac\u0156\u0000\u0496\u0498\u0005"+
		"\u00ad\u0000\u0000\u0497\u0495\u0001\u0000\u0000\u0000\u0497\u0496\u0001"+
		"\u0000\u0000\u0000\u0498\u04c4\u0001\u0000\u0000\u0000\u0499\u049c\u0005"+
		"\u0173\u0000\u0000\u049a\u049d\u0003\u02ac\u0156\u0000\u049b\u049d\u0005"+
		"T\u0000\u0000\u049c\u049a\u0001\u0000\u0000\u0000\u049c\u049b\u0001\u0000"+
		"\u0000\u0000\u049d\u04c4\u0001\u0000\u0000\u0000\u049e\u04a1\u0005\u0176"+
		"\u0000\u0000\u049f\u04a2\u0003\u02ac\u0156\u0000\u04a0\u04a2\u0005T\u0000"+
		"\u0000\u04a1\u049f\u0001\u0000\u0000\u0000\u04a1\u04a0\u0001\u0000\u0000"+
		"\u0000\u04a2\u04c4\u0001\u0000\u0000\u0000\u04a3\u04a6\u0005\u0178\u0000"+
		"\u0000\u04a4\u04a7\u0003\u02ac\u0156\u0000\u04a5\u04a7\u0005T\u0000\u0000"+
		"\u04a6\u04a4\u0001\u0000\u0000\u0000\u04a6\u04a5\u0001\u0000\u0000\u0000"+
		"\u04a7\u04c4\u0001\u0000\u0000\u0000\u04a8\u04a9\u0005\u017c\u0000\u0000"+
		"\u04a9\u04c4\u0003\u02ac\u0156\u0000\u04aa\u04ad\u0005\u01c0\u0000\u0000"+
		"\u04ab\u04ae\u0003\u02ac\u0156\u0000\u04ac\u04ae\u0005\u00ad\u0000\u0000"+
		"\u04ad\u04ab\u0001\u0000\u0000\u0000\u04ad\u04ac\u0001\u0000\u0000\u0000"+
		"\u04ae\u04c4\u0001\u0000\u0000\u0000\u04af\u04b2\u0005\u01ca\u0000\u0000"+
		"\u04b0\u04b3\u0003\u02ae\u0157\u0000\u04b1\u04b3\u0005\u0142\u0000\u0000"+
		"\u04b2\u04b0\u0001\u0000\u0000\u0000\u04b2\u04b1\u0001\u0000\u0000\u0000"+
		"\u04b3\u04c4\u0001\u0000\u0000\u0000\u04b4\u04b7\u0005\u01d3\u0000\u0000"+
		"\u04b5\u04b8\u0003\u02ac\u0156\u0000\u04b6\u04b8\u0005T\u0000\u0000\u04b7"+
		"\u04b5\u0001\u0000\u0000\u0000\u04b7\u04b6\u0001\u0000\u0000\u0000\u04b8"+
		"\u04c4\u0001\u0000\u0000\u0000\u04b9\u04bc\u0005\u01f6\u0000\u0000\u04ba"+
		"\u04bd\u0003\u02c6\u0163\u0000\u04bb\u04bd\u0005T\u0000\u0000\u04bc\u04ba"+
		"\u0001\u0000\u0000\u0000\u04bc\u04bb\u0001\u0000\u0000\u0000\u04bd\u04c4"+
		"\u0001\u0000\u0000\u0000\u04be\u04bf\u0005\u01f7\u0000\u0000\u04bf\u04c4"+
		"\u0007\u0001\u0000\u0000\u04c0\u04c1\u0005\u01f8\u0000\u0000\u04c1\u04c4"+
		"\u0003\u02ac\u0156\u0000\u04c2\u04c4\u0005\u020f\u0000\u0000\u04c3\u0482"+
		"\u0001\u0000\u0000\u0000\u04c3\u0485\u0001\u0000\u0000\u0000\u04c3\u0487"+
		"\u0001\u0000\u0000\u0000\u04c3\u0494\u0001\u0000\u0000\u0000\u04c3\u0499"+
		"\u0001\u0000\u0000\u0000\u04c3\u049e\u0001\u0000\u0000\u0000\u04c3\u04a3"+
		"\u0001\u0000\u0000\u0000\u04c3\u04a8\u0001\u0000\u0000\u0000\u04c3\u04aa"+
		"\u0001\u0000\u0000\u0000\u04c3\u04af\u0001\u0000\u0000\u0000\u04c3\u04b4"+
		"\u0001\u0000\u0000\u0000\u04c3\u04b9\u0001\u0000\u0000\u0000\u04c3\u04be"+
		"\u0001\u0000\u0000\u0000\u04c3\u04c0\u0001\u0000\u0000\u0000\u04c3\u04c2"+
		"\u0001\u0000\u0000\u0000\u04c4\'\u0001\u0000\u0000\u0000\u04c5\u04c6\u0005"+
		"\u00a3\u0000\u0000\u04c6\u04c7\u0005\u01f0\u0000\u0000\u04c7\u04c8\u0003"+
		"\u028c\u0146\u0000\u04c8\u04c9\u0003\u020c\u0106\u0000\u04c9)\u0001\u0000"+
		"\u0000\u0000\u04ca\u04cb\u0005\u00a3\u0000\u0000\u04cb\u04e1\u0005n\u0000"+
		"\u0000\u04cc\u04d5\u0003\u026e\u0137\u0000\u04cd\u04ce\u0005$\u0000\u0000"+
		"\u04ce\u04d6\u0003\u00d8l\u0000\u04cf\u04d0\u0005\u01a7\u0000\u0000\u04d0"+
		"\u04d1\u0005\u0083\u0000\u0000\u04d1\u04d3\u0003\u02b6\u015b\u0000\u04d2"+
		"\u04d4\u0005\u00c1\u0000\u0000\u04d3\u04d2\u0001\u0000\u0000\u0000\u04d3"+
		"\u04d4\u0001\u0000\u0000\u0000\u04d4\u04d6\u0001\u0000\u0000\u0000\u04d5"+
		"\u04cd\u0001\u0000\u0000\u0000\u04d5\u04cf\u0001\u0000\u0000\u0000\u04d6"+
		"\u04e2\u0001\u0000\u0000\u0000\u04d7\u04dc\u0003\u026e\u0137\u0000\u04d8"+
		"\u04d9\u0005\u0292\u0000\u0000\u04d9\u04db\u0003\u026e\u0137\u0000\u04da"+
		"\u04d8\u0001\u0000\u0000\u0000\u04db\u04de\u0001\u0000\u0000\u0000\u04dc"+
		"\u04da\u0001\u0000\u0000\u0000\u04dc\u04dd\u0001\u0000\u0000\u0000\u04dd"+
		"\u04df\u0001\u0000\u0000\u0000\u04de\u04dc\u0001\u0000\u0000\u0000\u04df"+
		"\u04e0\u0003\u020c\u0106\u0000\u04e0\u04e2\u0001\u0000\u0000\u0000\u04e1"+
		"\u04cc\u0001\u0000\u0000\u0000\u04e1\u04d7\u0001\u0000\u0000\u0000\u04e2"+
		"+\u0001\u0000\u0000\u0000\u04e3\u04e4\u0005\u00a3\u0000\u0000\u04e4\u04e5"+
		"\u0005\u0204\u0000\u0000\u04e5\u04ec\u0003\u0268\u0134\u0000\u04e6\u04ed"+
		"\u0003.\u0017\u0000\u04e7\u04eb\u0003\u020c\u0106\u0000\u04e8\u04eb\u0003"+
		"\u020e\u0107\u0000\u04e9\u04eb\u0003\u020a\u0105\u0000\u04ea\u04e7\u0001"+
		"\u0000\u0000\u0000\u04ea\u04e8\u0001\u0000\u0000\u0000\u04ea\u04e9\u0001"+
		"\u0000\u0000\u0000\u04eb\u04ed\u0001\u0000\u0000\u0000\u04ec\u04e6\u0001"+
		"\u0000\u0000\u0000\u04ec\u04ea\u0001\u0000\u0000\u0000\u04ed-\u0001\u0000"+
		"\u0000\u0000\u04ee\u04ef\u0005\u0151\u0000\u0000\u04ef\u04f0\u0005\u00ba"+
		"\u0000\u0000\u04f0\u04f2\u0005\u02c6\u0000\u0000\u04f1\u04ee\u0001\u0000"+
		"\u0000\u0000\u04f1\u04f2\u0001\u0000\u0000\u0000\u04f2\u04f7\u0001\u0000"+
		"\u0000\u0000\u04f3\u04f4\u0005\u0184\u0000\u0000\u04f4\u04f8\u0005\u02c6"+
		"\u0000\u0000\u04f5\u04f6\u0005\u018f\u0000\u0000\u04f6\u04f8\u0005\u0184"+
		"\u0000\u0000\u04f7\u04f3\u0001\u0000\u0000\u0000\u04f7\u04f5\u0001\u0000"+
		"\u0000\u0000\u04f7\u04f8\u0001\u0000\u0000\u0000\u04f8\u04fd\u0001\u0000"+
		"\u0000\u0000\u04f9\u04fa\u0005\u0179\u0000\u0000\u04fa\u04fe\u0005\u02c6"+
		"\u0000\u0000\u04fb\u04fc\u0005\u018f\u0000\u0000\u04fc\u04fe\u0005\u0179"+
		"\u0000\u0000\u04fd\u04f9\u0001\u0000\u0000\u0000\u04fd\u04fb\u0001\u0000"+
		"\u0000\u0000\u04fd\u04fe\u0001\u0000\u0000\u0000\u04fe\u0502\u0001\u0000"+
		"\u0000\u0000\u04ff\u0500\u0005\u01e9\u0000\u0000\u0500\u0501\u0005\u0094"+
		"\u0000\u0000\u0501\u0503\u0005\u02c6\u0000\u0000\u0502\u04ff\u0001\u0000"+
		"\u0000\u0000\u0502\u0503\u0001\u0000\u0000\u0000\u0503\u050e\u0001\u0000"+
		"\u0000\u0000\u0504\u0505\u0005\u00bf\u0000\u0000\u0505\u050f\u0005\u02c6"+
		"\u0000\u0000\u0506\u0507\u0005\u018f\u0000\u0000\u0507\u0508\u0005\u00bf"+
		"\u0000\u0000\u0508\u050c\u0001\u0000\u0000\u0000\u0509\u050d\u0005\u00e2"+
		"\u0000\u0000\u050a\u050b\u0005\u018f\u0000\u0000\u050b\u050d\u0005\u00e2"+
		"\u0000\u0000\u050c\u0509\u0001\u0000\u0000\u0000\u050c\u050a\u0001\u0000"+
		"\u0000\u0000\u050d\u050f\u0001\u0000\u0000\u0000\u050e\u0504\u0001\u0000"+
		"\u0000\u0000\u050e\u0506\u0001\u0000\u0000\u0000\u050e\u050f\u0001\u0000"+
		"\u0000\u0000\u050f/\u0001\u0000\u0000\u0000\u0510\u0511\u0005\u00a3\u0000"+
		"\u0000\u0511\u052a\u0005\u0207\u0000\u0000\u0512\u0514\u0005\u0208\u0000"+
		"\u0000\u0513\u0515\u0005\u01a8\u0000\u0000\u0514\u0513\u0001\u0000\u0000"+
		"\u0000\u0514\u0515\u0001\u0000\u0000\u0000\u0515\u0516\u0001\u0000\u0000"+
		"\u0000\u0516\u052b\u0003\u0248\u0124\u0000\u0517\u0519\u0005\u00c9\u0000"+
		"\u0000\u0518\u051a\u0005\u01a8\u0000\u0000\u0519\u0518\u0001\u0000\u0000"+
		"\u0000\u0519\u051a\u0001\u0000\u0000\u0000\u051a\u051b\u0001\u0000\u0000"+
		"\u0000\u051b\u052b\u0003\u0298\u014c\u0000\u051c\u051d\u0005\u0208\u0000"+
		"\u0000\u051d\u0520\u0005\u023b\u0000\u0000\u051e\u051f\u00050\u0000\u0000"+
		"\u051f\u0521\u0003\u029c\u014e\u0000\u0520\u051e\u0001\u0000\u0000\u0000"+
		"\u0520\u0521\u0001\u0000\u0000\u0000\u0521\u0522\u0001\u0000\u0000\u0000"+
		"\u0522\u052b\u0003\u0248\u0124\u0000\u0523\u0524\u0005\u00c9\u0000\u0000"+
		"\u0524\u0527\u0005\u023b\u0000\u0000\u0525\u0526\u00050\u0000\u0000\u0526"+
		"\u0528\u0003\u029c\u014e\u0000\u0527\u0525\u0001\u0000\u0000\u0000\u0527"+
		"\u0528\u0001\u0000\u0000\u0000\u0528\u0529\u0001\u0000\u0000\u0000\u0529"+
		"\u052b\u0003\u0298\u014c\u0000\u052a\u0512\u0001\u0000\u0000\u0000\u052a"+
		"\u0517\u0001\u0000\u0000\u0000\u052a\u051c\u0001\u0000\u0000\u0000\u052a"+
		"\u0523\u0001\u0000\u0000\u0000\u052b1\u0001\u0000\u0000\u0000\u052c\u052d"+
		"\u0005\u00a3\u0000\u0000\u052d\u052e\u0005\u0222\u0000\u0000\u052e\u052f"+
		"\u0003\u02b2\u0159\u0000\u052f\u0530\u0003\u020c\u0106\u0000\u05303\u0001"+
		"\u0000\u0000\u0000\u0531\u0532\u0005\u00a3\u0000\u0000\u0532\u0533\u0005"+
		"w\u0000\u0000\u0533\u0538\u0003\u0254\u012a\u0000\u0534\u0535\u0005\u0292"+
		"\u0000\u0000\u0535\u0537\u0003\u0254\u012a\u0000\u0536\u0534\u0001\u0000"+
		"\u0000\u0000\u0537\u053a\u0001\u0000\u0000\u0000\u0538\u0536\u0001\u0000"+
		"\u0000\u0000\u0538\u0539\u0001\u0000\u0000\u0000\u0539\u053b\u0001\u0000"+
		"\u0000\u0000\u053a\u0538\u0001\u0000\u0000\u0000\u053b\u053c\u0003\u020c"+
		"\u0106\u0000\u053c5\u0001\u0000\u0000\u0000\u053d\u053e\u0005\u00a3\u0000"+
		"\u0000\u053e\u053f\u0005w\u0000\u0000\u053f\u0540\u0003\u0254\u012a\u0000"+
		"\u0540\u0544\u00038\u001c\u0000\u0541\u0543\u00038\u001c\u0000\u0542\u0541"+
		"\u0001\u0000\u0000\u0000\u0543\u0546\u0001\u0000\u0000\u0000\u0544\u0542"+
		"\u0001\u0000\u0000\u0000\u0544\u0545\u0001\u0000\u0000\u0000\u05457\u0001"+
		"\u0000\u0000\u0000\u0546\u0544\u0001\u0000\u0000\u0000\u0547\u0548\u0005"+
		"\u009e\u0000\u0000\u0548\u054a\u0005\u0015\u0000\u0000\u0549\u054b\u0003"+
		"\u00b8\\\u0000\u054a\u0549\u0001\u0000\u0000\u0000\u054a\u054b\u0001\u0000"+
		"\u0000\u0000\u054b\u054c\u0001\u0000\u0000\u0000\u054c\u054d\u0003\u0252"+
		"\u0129\u0000\u054d\u0552\u0003\u02e6\u0173\u0000\u054e\u0550\u0005\u0016"+
		"\u0000\u0000\u054f\u0551\u0003\u02c4\u0162\u0000\u0550\u054f\u0001\u0000"+
		"\u0000\u0000\u0550\u0551\u0001\u0000\u0000\u0000\u0551\u0553\u0001\u0000"+
		"\u0000\u0000\u0552\u054e\u0001\u0000\u0000\u0000\u0552\u0553\u0001\u0000"+
		"\u0000\u0000\u0553\u0555\u0001\u0000\u0000\u0000\u0554\u0556\u0003\u02cc"+
		"\u0166\u0000\u0555\u0554\u0001\u0000\u0000\u0000\u0555\u0556\u0001\u0000"+
		"\u0000\u0000\u0556\u0559\u0001\u0000\u0000\u0000\u0557\u0558\u0005$\u0000"+
		"\u0000\u0558\u055a\u0003\u0226\u0113\u0000\u0559\u0557\u0001\u0000\u0000"+
		"\u0000\u0559\u055a\u0001\u0000\u0000\u0000\u055a\u055c\u0001\u0000\u0000"+
		"\u0000\u055b\u055d\u0003\u0208\u0104\u0000\u055c\u055b\u0001\u0000\u0000"+
		"\u0000\u055c\u055d\u0001\u0000\u0000\u0000\u055d\u056a\u0001\u0000\u0000"+
		"\u0000\u055e\u055f\u0005\u01d0\u0000\u0000\u055f\u0560\u0005\u0297\u0000"+
		"\u0000\u0560\u0565\u0003\u025e\u012f\u0000\u0561\u0562\u0005\u0292\u0000"+
		"\u0000\u0562\u0564\u0003\u025e\u012f\u0000\u0563\u0561\u0001\u0000\u0000"+
		"\u0000\u0564\u0567\u0001\u0000\u0000\u0000\u0565\u0563\u0001\u0000\u0000"+
		"\u0000\u0565\u0566\u0001";
	private static final String _serializedATNSegment1 =
		"\u0000\u0000\u0000\u0566\u0568\u0001\u0000\u0000\u0000\u0567\u0565\u0001"+
		"\u0000\u0000\u0000\u0568\u0569\u0005\u0298\u0000\u0000\u0569\u056b\u0001"+
		"\u0000\u0000\u0000\u056a\u055e\u0001\u0000\u0000\u0000\u056a\u056b\u0001"+
		"\u0000\u0000\u0000\u056b\u05c3\u0001\u0000\u0000\u0000\u056c\u056d\u0005"+
		"\u009e\u0000\u0000\u056d\u05c3\u0003\u00e8t\u0000\u056e\u056f\u0005\u00a3"+
		"\u0000\u0000\u056f\u0570\u0005\u0015\u0000\u0000\u0570\u058a\u0003\u0252"+
		"\u0129\u0000\u0571\u0572\u0005\u0208\u0000\u0000\u0572\u0573\u0005$\u0000"+
		"\u0000\u0573\u058b\u0003\u0226\u0113\u0000\u0574\u0575\u0005\u0103\u0000"+
		"\u0000\u0575\u058b\u0005$\u0000\u0000\u0576\u0577\u0005\u0208\u0000\u0000"+
		"\u0577\u0578\u0005\u008c\u0000\u0000\u0578\u058b\u0003\u0226\u0113\u0000"+
		"\u0579\u057a\u0005\u0103\u0000\u0000\u057a\u057b\u0005\u0208\u0000\u0000"+
		"\u057b\u058b\u0005\u008c\u0000\u0000\u057c\u057d\u0005\u0208\u0000\u0000"+
		"\u057d\u057e\u0005$\u0000\u0000\u057e\u057f\u0005\u008c\u0000\u0000\u057f"+
		"\u058b\u0003\u0226\u0113\u0000\u0580\u0581\u0005\u0103\u0000\u0000\u0581"+
		"\u0582\u0005$\u0000\u0000\u0582\u0583\u0005\u008c\u0000\u0000\u0583\u058b"+
		"\u0003\u0226\u0113\u0000\u0584\u0585\u0005\u0208\u0000\u0000\u0585\u058b"+
		"\u0003\u02cc\u0166\u0000\u0586\u0587\u0005\u0208\u0000\u0000\u0587\u0588"+
		"\u0005\u00e3\u0000\u0000\u0588\u0589\u0005\u023a\u0000\u0000\u0589\u058b"+
		"\u0003\u02e6\u0173\u0000\u058a\u0571\u0001\u0000\u0000\u0000\u058a\u0574"+
		"\u0001\u0000\u0000\u0000\u058a\u0576\u0001\u0000\u0000\u0000\u058a\u0579"+
		"\u0001\u0000\u0000\u0000\u058a\u057c\u0001\u0000\u0000\u0000\u058a\u0580"+
		"\u0001\u0000\u0000\u0000\u058a\u0584\u0001\u0000\u0000\u0000\u058a\u0586"+
		"\u0001\u0000\u0000\u0000\u058b\u05c3\u0001\u0000\u0000\u0000\u058c\u058d"+
		"\u0005\u00a3\u0000\u0000\u058d\u058e\u0005\u0016\u0000\u0000\u058e\u058f"+
		"\u0003\u02be\u015f\u0000\u058f\u0590\u0003\u02ca\u0165\u0000\u0590\u05c3"+
		"\u0001\u0000\u0000\u0000\u0591\u0592\u0005\u0103\u0000\u0000\u0592\u0593"+
		"\u0005\u0016\u0000\u0000\u0593\u0595\u0003\u02be\u015f\u0000\u0594\u0596"+
		"\u0007\u0002\u0000\u0000\u0595\u0594\u0001\u0000\u0000\u0000\u0595\u0596"+
		"\u0001\u0000\u0000\u0000\u0596\u05c3\u0001\u0000\u0000\u0000\u0597\u0599"+
		"\u0005\u0103\u0000\u0000\u0598\u059a\u0005\u0015\u0000\u0000\u0599\u0598"+
		"\u0001\u0000\u0000\u0000\u0599\u059a\u0001\u0000\u0000\u0000\u059a\u059d"+
		"\u0001\u0000\u0000\u0000\u059b\u059c\u0005\u014a\u0000\u0000\u059c\u059e"+
		"\u0005,\u0000\u0000\u059d\u059b\u0001\u0000\u0000\u0000\u059d\u059e\u0001"+
		"\u0000\u0000\u0000\u059e\u059f\u0001\u0000\u0000\u0000\u059f\u05a1\u0003"+
		"\u0252\u0129\u0000\u05a0\u05a2\u0007\u0002\u0000\u0000\u05a1\u05a0\u0001"+
		"\u0000\u0000\u0000\u05a1\u05a2\u0001\u0000\u0000\u0000\u05a2\u05c3\u0001"+
		"\u0000\u0000\u0000\u05a3\u05a4\u0005\u0129\u0000\u0000\u05a4\u05a5\u0005"+
		"b\u0000\u0000\u05a5\u05c3\u0003\u02ac\u0156\u0000\u05a6\u05c3\u0003\u00d8"+
		"l\u0000\u05a7\u05a8\u0005\u01a7\u0000\u0000\u05a8\u05a9\u0005\u0083\u0000"+
		"\u0000\u05a9\u05c3\u0003\u02b6\u015b\u0000\u05aa\u05ac\u0003\u0206\u0103"+
		"\u0000\u05ab\u05ad\u0005\u01e4\u0000\u0000\u05ac\u05ab\u0001\u0000\u0000"+
		"\u0000\u05ac\u05ad\u0001\u0000\u0000\u0000\u05ad\u05c3\u0001\u0000\u0000"+
		"\u0000\u05ae\u05af\u0005\u01e2\u0000\u0000\u05af\u05c3\u0005\u01ae\u0000"+
		"\u0000\u05b0\u05b2\u0005\u01e3\u0000\u0000\u05b1\u05b3\u0005\u0015\u0000"+
		"\u0000\u05b2\u05b1\u0001\u0000\u0000\u0000\u05b2\u05b3\u0001\u0000\u0000"+
		"\u0000\u05b3\u05b4\u0001\u0000\u0000\u0000\u05b4\u05b5\u0003\u02a6\u0153"+
		"\u0000\u05b5\u05b6\u0005\u0083\u0000\u0000\u05b6\u05b7\u0003\u02a6\u0153"+
		"\u0000\u05b7\u05c3\u0001\u0000\u0000\u0000\u05b8\u05c3\u0005\u01e4\u0000"+
		"\u0000\u05b9\u05ba\u0005\u0208\u0000\u0000\u05ba\u05bb\u0005\u009d\u0000"+
		"\u0000\u05bb\u05c3\u0003\u0226\u0113\u0000\u05bc\u05bd\u0005\u0208\u0000"+
		"\u0000\u05bd\u05be\u0005n\u0000\u0000\u05be\u05c3\u0003\u0292\u0149\u0000"+
		"\u05bf\u05c0\u0005\u0208\u0000\u0000\u05c0\u05c1\u0005\u021e\u0000\u0000"+
		"\u05c1\u05c3\u0003\u00f0x\u0000\u05c2\u0547\u0001\u0000\u0000\u0000\u05c2"+
		"\u056c\u0001\u0000\u0000\u0000\u05c2\u056e\u0001\u0000\u0000\u0000\u05c2"+
		"\u058c\u0001\u0000\u0000\u0000\u05c2\u0591\u0001\u0000\u0000\u0000\u05c2"+
		"\u0597\u0001\u0000\u0000\u0000\u05c2\u05a3\u0001\u0000\u0000\u0000\u05c2"+
		"\u05a6\u0001\u0000\u0000\u0000\u05c2\u05a7\u0001\u0000\u0000\u0000\u05c2"+
		"\u05aa\u0001\u0000\u0000\u0000\u05c2\u05ae\u0001\u0000\u0000\u0000\u05c2"+
		"\u05b0\u0001\u0000\u0000\u0000\u05c2\u05b8\u0001\u0000\u0000\u0000\u05c2"+
		"\u05b9\u0001\u0000\u0000\u0000\u05c2\u05bc\u0001\u0000\u0000\u0000\u05c2"+
		"\u05bf\u0001\u0000\u0000\u0000\u05c39\u0001\u0000\u0000\u0000\u05c4\u05c5"+
		"\u0005\u00a3\u0000\u0000\u05c5\u05c6\u0005\u008b\u0000\u0000\u05c6\u05c8"+
		"\u0003\u02b4\u015a\u0000\u05c7\u05c9\u0003<\u001e\u0000\u05c8\u05c7\u0001"+
		"\u0000\u0000\u0000\u05c9\u05ca\u0001\u0000\u0000\u0000\u05ca\u05c8\u0001"+
		"\u0000\u0000\u0000\u05ca\u05cb\u0001\u0000\u0000\u0000\u05cb;\u0001\u0000"+
		"\u0000\u0000\u05cc\u05cd\u0005$\u0000\u0000\u05cd\u05e2\u0005\u01f0\u0000"+
		"\u0000\u05ce\u05e3\u0005T\u0000\u0000\u05cf\u05d4\u0003\u028c\u0146\u0000"+
		"\u05d0\u05d1\u0005\u0292\u0000\u0000\u05d1\u05d3\u0003\u028c\u0146\u0000"+
		"\u05d2\u05d0\u0001\u0000\u0000\u0000\u05d3\u05d6\u0001\u0000\u0000\u0000"+
		"\u05d4\u05d2\u0001\u0000\u0000\u0000\u05d4\u05d5\u0001\u0000\u0000\u0000"+
		"\u05d5\u05e3\u0001\u0000\u0000\u0000\u05d6\u05d4\u0001\u0000\u0000\u0000"+
		"\u05d7\u05e3\u0005\u0001\u0000\u0000\u05d8\u05d9\u0005\u0001\u0000\u0000"+
		"\u05d9\u05da\u0005+\u0000\u0000\u05da\u05df\u0003\u028c\u0146\u0000\u05db"+
		"\u05dc\u0005\u0292\u0000\u0000\u05dc\u05de\u0003\u028c\u0146\u0000\u05dd"+
		"\u05db\u0001\u0000\u0000\u0000\u05de\u05e1\u0001\u0000\u0000\u0000\u05df"+
		"\u05dd\u0001\u0000\u0000\u0000\u05df\u05e0\u0001\u0000\u0000\u0000\u05e0"+
		"\u05e3\u0001\u0000\u0000\u0000\u05e1\u05df\u0001\u0000\u0000\u0000\u05e2"+
		"\u05ce\u0001\u0000\u0000\u0000\u05e2\u05cf\u0001\u0000\u0000\u0000\u05e2"+
		"\u05d7\u0001\u0000\u0000\u0000\u05e2\u05d8\u0001\u0000\u0000\u0000\u05e3"+
		"\u05e8\u0001\u0000\u0000\u0000\u05e4\u05e5\u0005\u01e3\u0000\u0000\u05e5"+
		"\u05e6\u0005\u0083\u0000\u0000\u05e6\u05e8\u0003\u02c6\u0163\u0000\u05e7"+
		"\u05cc\u0001\u0000\u0000\u0000\u05e7\u05e4\u0001\u0000\u0000\u0000\u05e8"+
		"\u062e\u0001\u0000\u0000\u0000\u05e9\u05ea\u0005\u009a\u0000\u0000\u05ea"+
		"\u062c\u0007\u0003\u0000\u0000\u05eb\u05ee\u0005\u0132\u0000\u0000\u05ec"+
		"\u05ef\u0005T\u0000\u0000\u05ed\u05ef\u0003\u02c6\u0163\u0000\u05ee\u05ec"+
		"\u0001\u0000\u0000\u0000\u05ee\u05ed\u0001\u0000\u0000\u0000\u05ef\u062c"+
		"\u0001\u0000\u0000\u0000\u05f0\u05f1\u0005\u0147\u0000\u0000\u05f1\u05f2"+
		"\u0005\u00ba\u0000\u0000\u05f2\u05f5\u0003\u02a8\u0154\u0000\u05f3\u05f4"+
		"\u0005\u01e6\u0000\u0000\u05f4\u05f6\u0003\u02a8\u0154\u0000\u05f5\u05f3"+
		"\u0001\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000\u05f6\u062c"+
		"\u0001\u0000\u0000\u0000\u05f7\u05fa\u0005\u0149\u0000\u0000\u05f8\u05fb"+
		"\u0005T\u0000\u0000\u05f9\u05fb\u0003\u02c6\u0163\u0000\u05fa\u05f8\u0001"+
		"\u0000\u0000\u0000\u05fa\u05f9\u0001\u0000\u0000\u0000\u05fb\u062c\u0001"+
		"\u0000\u0000\u0000\u05fc\u0602\u0005\u0175\u0000\u0000\u05fd\u0603\u0005"+
		"T\u0000\u0000\u05fe\u05ff\u0003\u02ac\u0156\u0000\u05ff\u0600\u0005]\u0000"+
		"\u0000\u0600\u0601\u0007\u0004\u0000\u0000\u0601\u0603\u0001\u0000\u0000"+
		"\u0000\u0602\u05fd\u0001\u0000\u0000\u0000\u0602\u05fe\u0001\u0000\u0000"+
		"\u0000\u0603\u062c\u0001\u0000\u0000\u0000\u0604\u0607\u0005\u017b\u0000"+
		"\u0000\u0605\u0608\u0005T\u0000\u0000\u0606\u0608\u0003\u02a8\u0154\u0000"+
		"\u0607\u0605\u0001\u0000\u0000\u0000\u0607\u0606\u0001\u0000\u0000\u0000"+
		"\u0608\u062c\u0001\u0000\u0000\u0000\u0609\u060a\u0005\u01af\u0000\u0000"+
		"\u060a\u062c\u0005\u0119\u0000\u0000\u060b\u060e\u0005\u01ce\u0000\u0000"+
		"\u060c\u060f\u0005$\u0000\u0000\u060d\u060f\u0003\u02a8\u0154\u0000\u060e"+
		"\u060c\u0001\u0000\u0000\u0000\u060e\u060d\u0001\u0000\u0000\u0000\u060f"+
		"\u062c\u0001\u0000\u0000\u0000\u0610\u0611\u0005\u01e8\u0000\u0000\u0611"+
		"\u0612\u0005\u01c2\u0000\u0000\u0612\u062c\u0003\u0290\u0148\u0000\u0613"+
		"\u0616\u0005\u01f6\u0000\u0000\u0614\u0617\u0005T\u0000\u0000\u0615\u0617"+
		"\u0003\u02a8\u0154\u0000\u0616\u0614\u0001\u0000\u0000\u0000\u0616\u0615"+
		"\u0001\u0000\u0000\u0000\u0617\u062c\u0001\u0000\u0000\u0000\u0618\u0622"+
		"\u0005\u01fc\u0000\u0000\u0619\u0623\u0005$\u0000\u0000\u061a\u061f\u0003"+
		"\u0292\u0149\u0000\u061b\u061c\u0005\u0292\u0000\u0000\u061c\u061e\u0003"+
		"\u0292\u0149\u0000\u061d\u061b\u0001\u0000\u0000\u0000\u061e\u0621\u0001"+
		"\u0000\u0000\u0000\u061f\u061d\u0001\u0000\u0000\u0000\u061f\u0620\u0001"+
		"\u0000\u0000\u0000\u0620\u0623\u0001\u0000\u0000\u0000\u0621\u061f\u0001"+
		"\u0000\u0000\u0000\u0622\u0619\u0001\u0000\u0000\u0000\u0622\u061a\u0001"+
		"\u0000\u0000\u0000\u0623\u062c\u0001\u0000\u0000\u0000\u0624\u0625\u0005"+
		"\u0200\u0000\u0000\u0625\u062c\u0003\u02a8\u0154\u0000\u0626\u0629\u0005"+
		"\u022b\u0000\u0000\u0627\u062a\u0005T\u0000\u0000\u0628\u062a\u0003\u02c6"+
		"\u0163\u0000\u0629\u0627\u0001\u0000\u0000\u0000\u0629\u0628\u0001\u0000"+
		"\u0000\u0000\u062a\u062c\u0001\u0000\u0000\u0000\u062b\u05e9\u0001\u0000"+
		"\u0000\u0000\u062b\u05eb\u0001\u0000\u0000\u0000\u062b\u05f0\u0001\u0000"+
		"\u0000\u0000\u062b\u05f7\u0001\u0000\u0000\u0000\u062b\u05fc\u0001\u0000"+
		"\u0000\u0000\u062b\u0604\u0001\u0000\u0000\u0000\u062b\u0609\u0001\u0000"+
		"\u0000\u0000\u062b\u060b\u0001\u0000\u0000\u0000\u062b\u0610\u0001\u0000"+
		"\u0000\u0000\u062b\u0613\u0001\u0000\u0000\u0000\u062b\u0618\u0001\u0000"+
		"\u0000\u0000\u062b\u0624\u0001\u0000\u0000\u0000\u062b\u0626\u0001\u0000"+
		"\u0000\u0000\u062c\u062e\u0001\u0000\u0000\u0000\u062d\u05e7\u0001\u0000"+
		"\u0000\u0000\u062d\u062b\u0001\u0000\u0000\u0000\u062e=\u0001\u0000\u0000"+
		"\u0000\u062f\u0630\u0005\u00a3\u0000\u0000\u0630\u0631\u0005\u0251\u0000"+
		"\u0000\u0631\u0639\u0003\u0256\u012b\u0000\u0632\u0633\u0005\u01a7\u0000"+
		"\u0000\u0633\u0634\u0005\u0083\u0000\u0000\u0634\u063a\u0003\u02b6\u015b"+
		"\u0000\u0635\u0636\u0005\u0208\u0000\u0000\u0636\u0637\u0005n\u0000\u0000"+
		"\u0637\u063a\u0003\u0292\u0149\u0000\u0638\u063a\u0003\u00d8l\u0000\u0639"+
		"\u0632\u0001\u0000\u0000\u0000\u0639\u0635\u0001\u0000\u0000\u0000\u0639"+
		"\u0638\u0001\u0000\u0000\u0000\u063a\u0646\u0001\u0000\u0000\u0000\u063b"+
		"\u063c\u0005\u0292\u0000\u0000\u063c\u063e\u0003\u0256\u012b\u0000\u063d"+
		"\u063b\u0001\u0000\u0000\u0000\u063e\u0641\u0001\u0000\u0000\u0000\u063f"+
		"\u063d\u0001\u0000\u0000\u0000\u063f\u0640\u0001\u0000\u0000\u0000\u0640"+
		"\u0642\u0001\u0000\u0000\u0000\u0641\u063f\u0001\u0000\u0000\u0000\u0642"+
		"\u0643\u0005\u01e3\u0000\u0000\u0643\u0644\u0005\u0083\u0000\u0000\u0644"+
		"\u0646\u0003\u024a\u0125\u0000\u0645\u062f\u0001\u0000\u0000\u0000\u0645"+
		"\u063f\u0001\u0000\u0000\u0000\u0646?\u0001\u0000\u0000\u0000\u0647\u0649"+
		"\u0003\u02c4\u0162\u0000\u0648\u0647\u0001\u0000\u0000\u0000\u0649\u064a"+
		"\u0001\u0000\u0000\u0000\u064a\u0648\u0001\u0000\u0000\u0000\u064a\u064b"+
		"\u0001\u0000\u0000\u0000\u064bA\u0001\u0000\u0000\u0000\u064c\u064d\u0005"+
		"\u00b4\u0000\u0000\u064d\u064e\u0007\u0005\u0000\u0000\u064e\u064f\u0005"+
		"\u015b\u0000\u0000\u064f\u0650\u0005\u0165\u0000\u0000\u0650\u0651\u0003"+
		"\u02e0\u0170\u0000\u0651\u0652\u0003\u02e2\u0171\u0000\u0652C\u0001\u0000"+
		"\u0000\u0000\u0653\u065f\u0003F#\u0000\u0654\u065f\u0003H$\u0000\u0655"+
		"\u065f\u0003J%\u0000\u0656\u065f\u0003L&\u0000\u0657\u065f\u0003N\'\u0000"+
		"\u0658\u065f\u0003P(\u0000\u0659\u065f\u0003R)\u0000\u065a\u065f\u0003"+
		"T*\u0000\u065b\u065f\u0003V+\u0000\u065c\u065f\u0003X,\u0000\u065d\u065f"+
		"\u0003Z-\u0000\u065e\u0653\u0001\u0000\u0000\u0000\u065e\u0654\u0001\u0000"+
		"\u0000\u0000\u065e\u0655\u0001\u0000\u0000\u0000\u065e\u0656\u0001\u0000"+
		"\u0000\u0000\u065e\u0657\u0001\u0000\u0000\u0000\u065e\u0658\u0001\u0000"+
		"\u0000\u0000\u065e\u0659\u0001\u0000\u0000\u0000\u065e\u065a\u0001\u0000"+
		"\u0000\u0000\u065e\u065b\u0001\u0000\u0000\u0000\u065e\u065c\u0001\u0000"+
		"\u0000\u0000\u065e\u065d\u0001\u0000\u0000\u0000\u065fE\u0001\u0000\u0000"+
		"\u0000\u0660\u0661\u0005\u00ce\u0000\u0000\u0661\u0662\u0005]\u0000\u0000"+
		"\u0662\u0663\u0005\u0015\u0000\u0000\u0663\u0664\u0003\u025e\u012f\u0000"+
		"\u0664\u0665\u0005\u0299\u0000\u0000\u0665\u0666\u0003\u02a6\u0153\u0000"+
		"\u0666\u0667\u0003\\.\u0000\u0667G\u0001\u0000\u0000\u0000\u0668\u0669"+
		"\u0005\u00ce\u0000\u0000\u0669\u066a\u0005]\u0000\u0000\u066a\u066b\u0005"+
		"\u0016\u0000\u0000\u066b\u066c\u0003\u02be\u015f\u0000\u066c\u066d\u0005"+
		"]\u0000\u0000\u066d\u066e\u0003\u0254\u012a\u0000\u066e\u066f\u0003\\"+
		".\u0000\u066fI\u0001\u0000\u0000\u0000\u0670\u0671\u0005\u00ce\u0000\u0000"+
		"\u0671\u0672\u0005]\u0000\u0000\u0672\u0673\u0005\u012d\u0000\u0000\u0673"+
		"\u0674\u0003\u0264\u0132\u0000\u0674\u0675\u0003\u00aeW\u0000\u0675\u0676"+
		"\u0003\\.\u0000\u0676K\u0001\u0000\u0000\u0000\u0677\u0678\u0005\u00ce"+
		"\u0000\u0000\u0678\u0679\u0005]\u0000\u0000\u0679\u067a\u0005\u0234\u0000"+
		"\u0000\u067a\u067b\u0005\u012d\u0000\u0000\u067b\u067c\u0003\u0264\u0132"+
		"\u0000\u067c\u067d\u0003\u00aeW\u0000\u067d\u067e\u0003\\.\u0000\u067e"+
		"M\u0001\u0000\u0000\u0000\u067f\u0680\u0005\u00ce\u0000\u0000\u0680\u0681"+
		"\u0005]\u0000\u0000\u0681\u0682\u0005\u012d\u0000\u0000\u0682\u0683\u0003"+
		"\u0266\u0133\u0000\u0683\u0684\u0003\\.\u0000\u0684O\u0001\u0000\u0000"+
		"\u0000\u0685\u0686\u0005\u00ce\u0000\u0000\u0686\u0687\u0005]\u0000\u0000"+
		"\u0687\u0688\u0005\u0192\u0000\u0000\u0688\u0689\u0003\u02a2\u0151\u0000"+
		"\u0689\u068a\u0003\\.\u0000\u068aQ\u0001\u0000\u0000\u0000\u068b\u068c"+
		"\u0005\u00ce\u0000\u0000\u068c\u068d\u0005]\u0000\u0000\u068d\u068e\u0005"+
		"n\u0000\u0000\u068e\u068f\u0003\u026e\u0137\u0000\u068f\u0690\u0003\\"+
		".\u0000\u0690S\u0001\u0000\u0000\u0000\u0691\u0692\u0005\u00ce\u0000\u0000"+
		"\u0692\u0693\u0005]\u0000\u0000\u0693\u0694\u0005\u0204\u0000\u0000\u0694"+
		"\u0695\u0003\u0268\u0134\u0000\u0695\u0696\u0003\\.\u0000\u0696U\u0001"+
		"\u0000\u0000\u0000\u0697\u0698\u0005\u00ce\u0000\u0000\u0698\u0699\u0005"+
		"]\u0000\u0000\u0699\u069a\u0005w\u0000\u0000\u069a\u069b\u0003\u0254\u012a"+
		"\u0000\u069b\u069c\u0003\\.\u0000\u069cW\u0001\u0000\u0000\u0000\u069d"+
		"\u069e\u0005\u00ce\u0000\u0000\u069e\u069f\u0005]\u0000\u0000\u069f\u06a0"+
		"\u0005\u0251\u0000\u0000\u06a0\u06a1\u0003\u0256\u012b\u0000\u06a1\u06a2"+
		"\u0003\\.\u0000\u06a2Y\u0001\u0000\u0000\u0000\u06a3\u06a4\u0005\u00ce"+
		"\u0000\u0000\u06a4\u06a5\u0005]\u0000\u0000\u06a5\u06a6\u0005\u01cf\u0000"+
		"\u0000\u06a6\u06a7\u0003\u025e\u012f\u0000\u06a7\u06a8\u0003\\.\u0000"+
		"\u06a8[\u0001\u0000\u0000\u0000\u06a9\u06ac\u0005C\u0000\u0000\u06aa\u06ad"+
		"\u0003\u02c6\u0163\u0000\u06ab\u06ad\u0005W\u0000\u0000\u06ac\u06aa\u0001"+
		"\u0000\u0000\u0000\u06ac\u06ab\u0001\u0000\u0000\u0000\u06ad]\u0001\u0000"+
		"\u0000\u0000\u06ae\u06b0\u0005\u00cf\u0000\u0000\u06af\u06b1\u0007\u0005"+
		"\u0000\u0000\u06b0\u06af\u0001\u0000\u0000\u0000\u06b0\u06b1\u0001\u0000"+
		"\u0000\u0000\u06b1_\u0001\u0000\u0000\u0000\u06b2\u06b3\u0005\u00d4\u0000"+
		"\u0000\u06b3\u06b4\u0005\u0083\u0000\u0000\u06b4\u06b5\u0005\u0250\u0000"+
		"\u0000\u06b5\u06b6\u0003\u0270\u0138\u0000\u06b6\u06b7\u0005\u008b\u0000"+
		"\u0000\u06b7\u06b8\u0003\u02b4\u015a\u0000\u06b8\u06b9\u0005\u01af\u0000"+
		"\u0000\u06b9\u06ba\u0003\u02c6\u0163\u0000\u06ba\u06bb\u0005]\u0000\u0000"+
		"\u06bb\u06bc\u0003\u0274\u013a\u0000\u06bc\u06bd\u0005\u0292\u0000\u0000"+
		"\u06bd\u06c0\u0003\u0276\u013b\u0000\u06be\u06bf\u0005\u0278\u0000\u0000"+
		"\u06bf\u06c1\u0005\u0279\u0000\u0000\u06c0\u06be\u0001\u0000\u0000\u0000"+
		"\u06c0\u06c1\u0001\u0000\u0000\u0000\u06c1a\u0001\u0000\u0000\u0000\u06c2"+
		"\u06c5\u0003\u02a6\u0153\u0000\u06c3\u06c4\u0005\u0005\u0000\u0000\u06c4"+
		"\u06c6\u0003\u0226\u0113\u0000\u06c5\u06c3\u0001\u0000\u0000\u0000\u06c5"+
		"\u06c6\u0001\u0000\u0000\u0000\u06c6\u06cc\u0001\u0000\u0000\u0000\u06c7"+
		"\u06c9\u0005\u00f0\u0000\u0000\u06c8\u06ca\u0005\u0005\u0000\u0000\u06c9"+
		"\u06c8\u0001\u0000\u0000\u0000\u06c9\u06ca\u0001\u0000\u0000\u0000\u06ca"+
		"\u06cb\u0001\u0000\u0000\u0000\u06cb\u06cd\u0003\u02c6\u0163\u0000\u06cc"+
		"\u06c7\u0001\u0000\u0000\u0000\u06cc\u06cd\u0001\u0000\u0000\u0000\u06cd"+
		"\u06d3\u0001\u0000\u0000\u0000\u06ce\u06d0\u0005\u0108\u0000\u0000\u06cf"+
		"\u06d1\u0005\u00ba\u0000\u0000\u06d0\u06cf\u0001\u0000\u0000\u0000\u06d0"+
		"\u06d1\u0001\u0000\u0000\u0000\u06d1\u06d2\u0001\u0000\u0000\u0000\u06d2"+
		"\u06d4\u0003\u02c6\u0163\u0000\u06d3\u06ce\u0001\u0000\u0000\u0000\u06d3"+
		"\u06d4\u0001\u0000\u0000\u0000\u06d4\u06d6\u0001\u0000\u0000\u0000\u06d5"+
		"\u06d7\u0005\u010b\u0000\u0000\u06d6\u06d5\u0001\u0000\u0000\u0000\u06d6"+
		"\u06d7\u0001\u0000\u0000\u0000\u06d7\u06df\u0001\u0000\u0000\u0000\u06d8"+
		"\u06da\u0005\u010f\u0000\u0000\u06d9\u06db\u0005\u0005\u0000\u0000\u06da"+
		"\u06d9\u0001\u0000\u0000\u0000\u06da\u06db\u0001\u0000\u0000\u0000\u06db"+
		"\u06dc\u0001\u0000\u0000\u0000\u06dc\u06e0\u0003\u02c6\u0163\u0000\u06dd"+
		"\u06de\u0005\u018f\u0000\u0000\u06de\u06e0\u0005\u010f\u0000\u0000\u06df"+
		"\u06d8\u0001\u0000\u0000\u0000\u06df\u06dd\u0001\u0000\u0000\u0000\u06df"+
		"\u06e0\u0001\u0000\u0000\u0000\u06e0\u06e3\u0001\u0000\u0000\u0000\u06e1"+
		"\u06e2\u0005\u0122\u0000\u0000\u06e2\u06e4\u0003\u02e6\u0173\u0000\u06e3"+
		"\u06e1\u0001\u0000\u0000\u0000\u06e3\u06e4\u0001\u0000\u0000\u0000\u06e4"+
		"\u06e7\u0001\u0000\u0000\u0000\u06e5\u06e6\u0005\u012a\u0000\u0000\u06e6"+
		"\u06e8\u0003\u02c6\u0163\u0000\u06e7\u06e5\u0001\u0000\u0000\u0000\u06e7"+
		"\u06e8\u0001\u0000\u0000\u0000\u06e8\u06ee\u0001\u0000\u0000\u0000\u06e9"+
		"\u06eb\u0005W\u0000\u0000\u06ea\u06ec\u0005\u0005\u0000\u0000\u06eb\u06ea"+
		"\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001\u0000\u0000\u0000\u06ec\u06ed"+
		"\u0001\u0000\u0000\u0000\u06ed\u06ef\u0003\u02c6\u0163\u0000\u06ee\u06e9"+
		"\u0001\u0000\u0000\u0000\u06ee\u06ef\u0001\u0000\u0000\u0000\u06ef\u06f2"+
		"\u0001\u0000\u0000\u0000\u06f0\u06f1\u0005\u0086\u0000\u0000\u06f1\u06f3"+
		"\u0003\u02c6\u0163\u0000\u06f2\u06f0\u0001\u0000\u0000\u0000\u06f2\u06f3"+
		"\u0001\u0000\u0000\u0000\u06f3c\u0001\u0000\u0000\u0000\u06f4\u06fa\u0003"+
		"\u02a6\u0153\u0000\u06f5\u06f7\u0005\u00f0\u0000\u0000\u06f6\u06f8\u0005"+
		"\u0005\u0000\u0000\u06f7\u06f6\u0001\u0000\u0000\u0000\u06f7\u06f8\u0001"+
		"\u0000\u0000\u0000\u06f8\u06f9\u0001\u0000\u0000\u0000\u06f9\u06fb\u0003"+
		"\u02c6\u0163\u0000\u06fa\u06f5\u0001\u0000\u0000\u0000\u06fa\u06fb\u0001"+
		"\u0000\u0000\u0000\u06fb\u0701\u0001\u0000\u0000\u0000\u06fc\u06fe\u0005"+
		"\u0108\u0000\u0000\u06fd\u06ff\u0005\u00ba\u0000\u0000\u06fe\u06fd\u0001"+
		"\u0000\u0000\u0000\u06fe\u06ff\u0001\u0000\u0000\u0000\u06ff\u0700\u0001"+
		"\u0000\u0000\u0000\u0700\u0702\u0003\u02c6\u0163\u0000\u0701\u06fc\u0001"+
		"\u0000\u0000\u0000\u0701\u0702\u0001\u0000\u0000\u0000\u0702\u0704\u0001"+
		"\u0000\u0000\u0000\u0703\u0705\u0005\u010b\u0000\u0000\u0704\u0703\u0001"+
		"\u0000\u0000\u0000\u0704\u0705\u0001\u0000\u0000\u0000\u0705\u070d\u0001"+
		"\u0000\u0000\u0000\u0706\u0708\u0005\u010f\u0000\u0000\u0707\u0709\u0005"+
		"\u0005\u0000\u0000\u0708\u0707\u0001\u0000\u0000\u0000\u0708\u0709\u0001"+
		"\u0000\u0000\u0000\u0709\u070a\u0001\u0000\u0000\u0000\u070a\u070e\u0003"+
		"\u02c6\u0163\u0000\u070b\u070c\u0005\u018f\u0000\u0000\u070c\u070e\u0005"+
		"\u010f\u0000\u0000\u070d\u0706\u0001\u0000\u0000\u0000\u070d\u070b\u0001"+
		"\u0000\u0000\u0000\u070d\u070e\u0001\u0000\u0000\u0000\u070e\u0711\u0001"+
		"\u0000\u0000\u0000\u070f\u0710\u0005\u0122\u0000\u0000\u0710\u0712\u0003"+
		"\u02e6\u0173\u0000\u0711\u070f\u0001\u0000\u0000\u0000\u0711\u0712\u0001"+
		"\u0000\u0000\u0000\u0712\u0715\u0001\u0000\u0000\u0000\u0713\u0714\u0005"+
		"\u012a\u0000\u0000\u0714\u0716\u0003\u02c6\u0163\u0000\u0715\u0713\u0001"+
		"\u0000\u0000\u0000\u0715\u0716\u0001\u0000\u0000\u0000\u0716\u071c\u0001"+
		"\u0000\u0000\u0000\u0717\u0719\u0005W\u0000\u0000\u0718\u071a\u0005\u0005"+
		"\u0000\u0000\u0719\u0718\u0001\u0000\u0000\u0000\u0719\u071a\u0001\u0000"+
		"\u0000\u0000\u071a\u071b\u0001\u0000\u0000\u0000\u071b\u071d\u0003\u02c6"+
		"\u0163\u0000\u071c\u0717\u0001\u0000\u0000\u0000\u071c\u071d\u0001\u0000"+
		"\u0000\u0000\u071d\u0720\u0001\u0000\u0000\u0000\u071e\u071f\u0005\u0086"+
		"\u0000\u0000\u071f\u0721\u0003\u02c6\u0163\u0000\u0720\u071e\u0001\u0000"+
		"\u0000\u0000\u0720\u0721\u0001\u0000\u0000\u0000\u0721e\u0001\u0000\u0000"+
		"\u0000\u0722\u0727\u0003\u02c4\u0162\u0000\u0723\u0724\u0005\u0292\u0000"+
		"\u0000\u0724\u0726\u0003\u02c4\u0162\u0000\u0725\u0723\u0001\u0000\u0000"+
		"\u0000\u0726\u0729\u0001\u0000\u0000\u0000\u0727\u0725\u0001\u0000\u0000"+
		"\u0000\u0727\u0728\u0001\u0000\u0000\u0000\u0728\u073b\u0001\u0000\u0000"+
		"\u0000\u0729\u0727\u0001\u0000\u0000\u0000\u072a\u0739\u0005]\u0000\u0000"+
		"\u072b\u073a\u0003\u02a2\u0151\u0000\u072c\u072d\u0005\u0297\u0000\u0000"+
		"\u072d\u0732\u0003\u02a2\u0151\u0000\u072e\u072f\u0005\u0292\u0000\u0000"+
		"\u072f\u0731\u0003\u02a2\u0151\u0000\u0730\u072e\u0001\u0000\u0000\u0000"+
		"\u0731\u0734\u0001\u0000\u0000\u0000\u0732\u0730\u0001\u0000\u0000\u0000"+
		"\u0732\u0733\u0001\u0000\u0000\u0000\u0733\u0735\u0001\u0000\u0000\u0000"+
		"\u0734\u0732\u0001\u0000\u0000\u0000\u0735\u0736\u0005\u0298\u0000\u0000"+
		"\u0736\u073a\u0001\u0000\u0000\u0000\u0737\u0738\u0005\u0003\u0000\u0000"+
		"\u0738\u073a\u0005\u0192\u0000\u0000\u0739\u072b\u0001\u0000\u0000\u0000"+
		"\u0739\u072c\u0001\u0000\u0000\u0000\u0739\u0737\u0001\u0000\u0000\u0000"+
		"\u073a\u073c\u0001\u0000\u0000\u0000\u073b\u072a\u0001\u0000\u0000\u0000"+
		"\u073b\u073c\u0001\u0000\u0000\u0000\u073c\u073e\u0001\u0000\u0000\u0000"+
		"\u073d\u073f\u0003j5\u0000\u073e\u073d\u0001\u0000\u0000\u0000\u073e\u073f"+
		"\u0001\u0000\u0000\u0000\u073fg\u0001\u0000\u0000\u0000\u0740\u0743\u0005"+
		"\u0169\u0000\u0000\u0741\u0744\u0005\u021b\u0000\u0000\u0742\u0744\u0003"+
		"\u02c4\u0162\u0000\u0743\u0741\u0001\u0000\u0000\u0000\u0743\u0742\u0001"+
		"\u0000\u0000\u0000\u0744\u0746\u0001\u0000\u0000\u0000\u0745\u0747\u0003"+
		"j5\u0000\u0746\u0745\u0001\u0000\u0000\u0000\u0746\u0747\u0001\u0000\u0000"+
		"\u0000\u0747i\u0001\u0000\u0000\u0000\u0748\u0749\u0007\u0006\u0000\u0000"+
		"\u0749k\u0001\u0000\u0000\u0000\u074a\u074b\u0005\u0250\u0000\u0000\u074b"+
		"\u074c\u0003\u0254\u012a\u0000\u074c\u074d\u0003\u00c4b\u0000\u074dm\u0001"+
		"\u0000\u0000\u0000\u074e\u074f\u0005\u0213\u0000\u0000\u074f\u0750\u0003"+
		"\u0258\u012c\u0000\u0750\u0752\u0005\u0297\u0000\u0000\u0751\u0753\u0003"+
		"\u0248\u0124\u0000\u0752\u0751\u0001\u0000\u0000\u0000\u0752\u0753\u0001"+
		"\u0000\u0000\u0000\u0753\u0754\u0001\u0000\u0000\u0000\u0754\u0755\u0005"+
		"\u0298\u0000\u0000\u0755\u0767\u0001\u0000\u0000\u0000\u0756\u0757\u0005"+
		"\u0123\u0000\u0000\u0757\u0758\u0003\u025a\u012d\u0000\u0758\u075a\u0005"+
		"\u0297\u0000\u0000\u0759\u075b\u0003\u0248\u0124\u0000\u075a\u0759\u0001"+
		"\u0000\u0000\u0000\u075a\u075b\u0001\u0000\u0000\u0000\u075b\u075c\u0001"+
		"\u0000\u0000\u0000\u075c\u075d\u0005\u0298\u0000\u0000\u075d\u0767\u0001"+
		"\u0000\u0000\u0000\u075e\u075f\u0005\u01ab\u0000\u0000\u075f\u0760\u0003"+
		"\u025c\u012e\u0000\u0760\u0762\u0005\u0297\u0000\u0000\u0761\u0763\u0003"+
		"\u0248\u0124\u0000\u0762\u0761\u0001\u0000\u0000\u0000\u0762\u0763\u0001"+
		"\u0000\u0000\u0000\u0763\u0764\u0001\u0000\u0000\u0000\u0764\u0765\u0005"+
		"\u0298\u0000\u0000\u0765\u0767\u0001\u0000\u0000\u0000\u0766\u074e\u0001"+
		"\u0000\u0000\u0000\u0766\u0756\u0001\u0000\u0000\u0000\u0766\u075e\u0001"+
		"\u0000\u0000\u0000\u0767o\u0001\u0000\u0000\u0000\u0768\u076a\u0005\u00f0"+
		"\u0000\u0000\u0769\u076b\u0005\u0005\u0000\u0000\u076a\u0769\u0001\u0000"+
		"\u0000\u0000\u076a\u076b\u0001\u0000\u0000\u0000\u076b\u076c\u0001\u0000"+
		"\u0000\u0000\u076c\u07b6\u0003\u02a8\u0154\u0000\u076d\u076e\u0005\u0084"+
		"\u0000\u0000\u076e\u07b6\u0005\u0199\u0000\u0000\u076f\u0771\u0005W\u0000"+
		"\u0000\u0770\u0772\u0005\u0005\u0000\u0000\u0771\u0770\u0001\u0000\u0000"+
		"\u0000\u0771\u0772\u0001\u0000\u0000\u0000\u0772\u0773\u0001\u0000\u0000"+
		"\u0000\u0773\u07b6\u0003\u02a8\u0154\u0000\u0774\u0776\u0005\u010f\u0000"+
		"\u0000\u0775\u0777\u0005\u0005\u0000\u0000\u0776\u0775\u0001\u0000\u0000"+
		"\u0000\u0776\u0777\u0001\u0000\u0000\u0000\u0777\u0778\u0001\u0000\u0000"+
		"\u0000\u0778\u077c\u0003\u02a8\u0154\u0000\u0779\u077a\u0005\u018f\u0000"+
		"\u0000\u077a\u077c\u0005\u010f\u0000\u0000\u077b\u0774\u0001\u0000\u0000"+
		"\u0000\u077b\u0779\u0001\u0000\u0000\u0000\u077c\u07b6\u0001\u0000\u0000"+
		"\u0000\u077d\u077f\u0005\u0108\u0000\u0000\u077e\u0780\u0005\u00ba\u0000"+
		"\u0000\u077f\u077e\u0001\u0000\u0000\u0000\u077f\u0780\u0001\u0000\u0000"+
		"\u0000\u0780\u0781\u0001\u0000\u0000\u0000\u0781\u07b6\u0003\u02a8\u0154"+
		"\u0000\u0782\u0783\u0005\u01d9\u0000\u0000\u0783\u0784\u0005\u022c\u0000"+
		"\u0000\u0784\u07b6\u0003\u02a8\u0154\u0000\u0785\u0786\u0005\u0212\u0000"+
		"\u0000\u0786\u07b6\u0003\u02ac\u0156\u0000\u0787\u0788\u0005\u0212\u0000"+
		"\u0000\u0788\u0789\u0005\u00bc\u0000\u0000\u0789\u07b6\u0003\u02ac\u0156"+
		"\u0000\u078a\u078b\u0005\u0086\u0000\u0000\u078b\u07b6\u0003\u02c6\u0163"+
		"\u0000\u078c\u078d\u0005\u01df\u0000\u0000\u078d\u07b6\u0003\u02ac\u0156"+
		"\u0000\u078e\u078f\u0005\u01de\u0000\u0000\u078f\u079b\u0005\u00e3\u0000"+
		"\u0000\u0790\u0795\u0003\u02a8\u0154\u0000\u0791\u0792\u0005]\u0000\u0000"+
		"\u0792\u0794\u0003\u02a2\u0151\u0000\u0793\u0791\u0001\u0000\u0000\u0000"+
		"\u0794\u0797\u0001\u0000\u0000\u0000\u0795\u0793\u0001\u0000\u0000\u0000"+
		"\u0795\u0796\u0001\u0000\u0000\u0000\u0796\u079c\u0001\u0000\u0000\u0000"+
		"\u0797\u0795\u0001\u0000\u0000\u0000\u0798\u0799\u0005\u0005\u0000\u0000"+
		"\u0799\u079a\u0005w\u0000\u0000\u079a\u079c\u0003\u02c4\u0162\u0000\u079b"+
		"\u0790\u0001\u0000\u0000\u0000\u079b\u0798\u0001\u0000\u0000\u0000\u079c"+
		"\u07b6\u0001\u0000\u0000\u0000\u079d\u079e\u0005\u0113\u0000\u0000\u079e"+
		"\u07a3\u0003\u02a8\u0154\u0000\u079f\u07a0\u0005]\u0000\u0000\u07a0\u07a2"+
		"\u0003\u02a2\u0151\u0000\u07a1\u079f\u0001\u0000\u0000\u0000\u07a2\u07a5"+
		"\u0001\u0000\u0000\u0000\u07a3\u07a1\u0001\u0000\u0000\u0000\u07a3\u07a4"+
		"\u0001\u0000\u0000\u0000\u07a4\u07b6\u0001\u0000\u0000\u0000\u07a5\u07a3"+
		"\u0001\u0000\u0000\u0000\u07a6\u07b6\u0005\u010b\u0000\u0000\u07a7\u07a8"+
		"\u0005\u010e\u0000\u0000\u07a8\u07b6\u0005\u0232\u0000\u0000\u07a9\u07aa"+
		"\u0005\u0096\u0000\u0000\u07aa\u07ab\u0005]\u0000\u0000\u07ab\u07b6\u0005"+
		"\u010e\u0000\u0000\u07ac\u07ae\u0005\u021e\u0000\u0000\u07ad\u07ac\u0001"+
		"\u0000\u0000\u0000\u07ad\u07ae\u0001\u0000\u0000\u0000\u07ae\u07af\u0001"+
		"\u0000\u0000\u0000\u07af\u07b6\u0003\u00f0x\u0000\u07b0\u07b1\u0005\u021f"+
		"\u0000\u0000\u07b1\u07b2\u0005\u018a\u0000\u0000\u07b2\u07b6\u0003\u02c6"+
		"\u0163\u0000\u07b3\u07b4\u0005\u018f\u0000\u0000\u07b4\u07b6\u0005\u00cf"+
		"\u0000\u0000\u07b5\u0768\u0001\u0000\u0000\u0000\u07b5\u076d\u0001\u0000"+
		"\u0000\u0000\u07b5\u076f\u0001\u0000\u0000\u0000\u07b5\u077b\u0001\u0000"+
		"\u0000\u0000\u07b5\u077d\u0001\u0000\u0000\u0000\u07b5\u0782\u0001\u0000"+
		"\u0000\u0000\u07b5\u0785\u0001\u0000\u0000\u0000\u07b5\u0787\u0001\u0000"+
		"\u0000\u0000\u07b5\u078a\u0001\u0000\u0000\u0000\u07b5\u078c\u0001\u0000"+
		"\u0000\u0000\u07b5\u078e\u0001\u0000\u0000\u0000\u07b5\u079d\u0001\u0000"+
		"\u0000\u0000\u07b5\u07a6\u0001\u0000\u0000\u0000\u07b5\u07a7\u0001\u0000"+
		"\u0000\u0000\u07b5\u07a9\u0001\u0000\u0000\u0000\u07b5\u07ad\u0001\u0000"+
		"\u0000\u0000\u07b5\u07b0\u0001\u0000\u0000\u0000\u07b5\u07b3\u0001\u0000"+
		"\u0000\u0000\u07b6q\u0001\u0000\u0000\u0000\u07b7\u07b8\u0005\u00d7\u0000"+
		"\u0000\u07b8\u07c4\u0003\u0254\u012a\u0000\u07b9\u07ba\u0005\u0297\u0000"+
		"\u0000\u07ba\u07bf\u0003b1\u0000\u07bb\u07bc\u0005\u0292\u0000\u0000\u07bc"+
		"\u07be\u0003b1\u0000\u07bd\u07bb\u0001\u0000\u0000\u0000\u07be\u07c1\u0001"+
		"\u0000\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000\u0000\u07bf\u07c0\u0001"+
		"\u0000\u0000\u0000\u07c0\u07c2\u0001\u0000\u0000\u0000\u07c1\u07bf\u0001"+
		"\u0000\u0000\u0000\u07c2\u07c3\u0005\u0298\u0000\u0000\u07c3\u07c5\u0001"+
		"\u0000\u0000\u0000\u07c4\u07b9\u0001\u0000\u0000\u0000\u07c4\u07c5\u0001"+
		"\u0000\u0000\u0000\u07c5\u07d3\u0001\u0000\u0000\u0000\u07c6\u07c7\u0005"+
		"\u0015\u0000\u0000\u07c7\u07c8\u0005\u01a3\u0000\u0000\u07c8\u07c9\u0005"+
		"\u0297\u0000\u0000\u07c9\u07ce\u0003d2\u0000\u07ca\u07cb\u0005\u0292\u0000"+
		"\u0000\u07cb\u07cd\u0003d2\u0000\u07cc\u07ca\u0001\u0000\u0000\u0000\u07cd"+
		"\u07d0\u0001\u0000\u0000\u0000\u07ce\u07cc\u0001\u0000\u0000\u0000\u07ce"+
		"\u07cf\u0001\u0000\u0000\u0000\u07cf\u07d1\u0001\u0000\u0000\u0000\u07d0"+
		"\u07ce\u0001\u0000\u0000\u0000\u07d1\u07d2\u0005\u0298\u0000\u0000\u07d2"+
		"\u07d4\u0001\u0000\u0000\u0000\u07d3\u07c6\u0001\u0000\u0000\u0000\u07d3"+
		"\u07d4\u0001\u0000\u0000\u0000\u07d4\u07ee\u0001\u0000\u0000\u0000\u07d5"+
		"\u07ec\u00052\u0000\u0000\u07d6\u07d8\u0005\u021b\u0000\u0000\u07d7\u07d9"+
		"\u0003\u02c6\u0163\u0000\u07d8\u07d7\u0001\u0000\u0000\u0000\u07d8\u07d9"+
		"\u0001\u0000\u0000\u0000\u07d9\u07ed\u0001\u0000\u0000\u0000\u07da\u07df"+
		"\u0003f3\u0000\u07db\u07dc\u0005\u0292\u0000\u0000\u07dc\u07de\u0003f"+
		"3\u0000\u07dd\u07db\u0001\u0000\u0000\u0000\u07de\u07e1\u0001\u0000\u0000"+
		"\u0000\u07df\u07dd\u0001\u0000\u0000\u0000\u07df\u07e0\u0001\u0000\u0000"+
		"\u0000\u07e0\u07ed\u0001\u0000\u0000\u0000\u07e1\u07df\u0001\u0000\u0000"+
		"\u0000\u07e2\u07e7\u0003h4\u0000\u07e3\u07e4\u0005\u0292\u0000\u0000\u07e4"+
		"\u07e6\u0003h4\u0000\u07e5\u07e3\u0001\u0000\u0000\u0000\u07e6\u07e9\u0001"+
		"\u0000\u0000\u0000\u07e7\u07e5\u0001\u0000\u0000\u0000\u07e7\u07e8\u0001"+
		"\u0000\u0000\u0000\u07e8\u07ed\u0001\u0000\u0000\u0000\u07e9\u07e7\u0001"+
		"\u0000\u0000\u0000\u07ea\u07ed\u0003l6\u0000\u07eb\u07ed\u0003\u0254\u012a"+
		"\u0000\u07ec\u07d6\u0001\u0000\u0000\u0000\u07ec\u07da\u0001\u0000\u0000"+
		"\u0000\u07ec\u07e2\u0001\u0000\u0000\u0000\u07ec\u07ea\u0001\u0000\u0000"+
		"\u0000\u07ec\u07eb\u0001\u0000\u0000\u0000\u07ed\u07ef\u0001\u0000\u0000"+
		"\u0000\u07ee\u07d5\u0001\u0000\u0000\u0000\u07ee\u07ef\u0001\u0000\u0000"+
		"\u0000\u07ef\u07f8\u0001\u0000\u0000\u0000\u07f0\u07f2\u0005\u0094\u0000"+
		"\u0000\u07f1\u07f0\u0001\u0000\u0000\u0000\u07f1\u07f2\u0001\u0000\u0000"+
		"\u0000\u07f2\u07f4\u0001\u0000\u0000\u0000\u07f3\u07f5\u0003n7\u0000\u07f4"+
		"\u07f3\u0001\u0000\u0000\u0000\u07f5\u07f6\u0001\u0000\u0000\u0000\u07f6"+
		"\u07f4\u0001\u0000\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7"+
		"\u07f9\u0001\u0000\u0000\u0000\u07f8\u07f1\u0001\u0000\u0000\u0000\u07f8"+
		"\u07f9\u0001\u0000\u0000\u0000\u07f9\u07fd\u0001\u0000\u0000\u0000\u07fa"+
		"\u07fc\u0003p8\u0000\u07fb\u07fa\u0001\u0000\u0000\u0000\u07fc\u07ff\u0001"+
		"\u0000\u0000\u0000\u07fd\u07fb\u0001\u0000\u0000\u0000\u07fd\u07fe\u0001"+
		"\u0000\u0000\u0000\u07fes\u0001\u0000\u0000\u0000\u07ff\u07fd\u0001\u0000"+
		"\u0000\u0000\u0800\u0801\u0003r9\u0000\u0801u\u0001\u0000\u0000\u0000"+
		"\u0802\u0803\u0005\u00d7\u0000\u0000\u0803\u0805\u0003\u0254\u012a\u0000"+
		"\u0804\u0806\u0003\u00c4b\u0000\u0805\u0804\u0001\u0000\u0000\u0000\u0805"+
		"\u0806\u0001\u0000\u0000\u0000\u0806\u0807\u0001\u0000\u0000\u0000\u0807"+
		"\u0808\u00052\u0000\u0000\u0808\u0809\u0005\u0250\u0000\u0000\u0809\u080b"+
		"\u0003\u0254\u012a\u0000\u080a\u080c\u0003\u00c4b\u0000\u080b\u080a\u0001"+
		"\u0000\u0000\u0000\u080b\u080c\u0001\u0000\u0000\u0000\u080c\u080e\u0001"+
		"\u0000\u0000\u0000\u080d\u080f\u0003\u00f0x\u0000\u080e\u080d\u0001\u0000"+
		"\u0000\u0000\u080e\u080f\u0001\u0000\u0000\u0000\u080f\u0813\u0001\u0000"+
		"\u0000\u0000\u0810\u0811\u0005\u021f\u0000\u0000\u0811\u0812\u0005\u018a"+
		"\u0000\u0000\u0812\u0814\u0003\u02c4\u0162\u0000\u0813\u0810\u0001\u0000"+
		"\u0000\u0000\u0813\u0814\u0001\u0000\u0000\u0000\u0814\u0817\u0001\u0000"+
		"\u0000\u0000\u0815\u0816\u0005\u018f\u0000\u0000\u0816\u0818\u0005\u00cf"+
		"\u0000\u0000\u0817\u0815\u0001\u0000\u0000\u0000\u0817\u0818\u0001\u0000"+
		"\u0000\u0000\u0818w\u0001\u0000\u0000\u0000\u0819\u081a\u0005\u0018\u0000"+
		"\u0000\u081a\u081b\u0005\u0098\u0000\u0000\u081b\u081c\u0005\u01c1\u0000"+
		"\u0000\u081c\u081d\u0005]\u0000\u0000\u081d\u0827\u0003\u0254\u012a\u0000"+
		"\u081e\u081f\u00050\u0000\u0000\u081f\u0820\u0005\u0015\u0000\u0000\u0820"+
		"\u0821\u0003\u02a6\u0153\u0000\u0821\u0822\u0003\u0220\u0110\u0000\u0822"+
		"\u0828\u0001\u0000\u0000\u0000\u0823\u0824\u00050\u0000\u0000\u0824\u0825"+
		"\u0005\u01f4\u0000\u0000\u0825\u0826\u0005\u0092\u0000\u0000\u0826\u0828"+
		"\u0003\u0220\u0110\u0000\u0827\u081e\u0001\u0000\u0000\u0000\u0827\u0823"+
		"\u0001\u0000\u0000\u0000\u0828\u0829\u0001\u0000\u0000\u0000\u0829\u082a"+
		"\u0007\u0007\u0000\u0000\u082ay\u0001\u0000\u0000\u0000\u082b\u082c\u0005"+
		"\u0018\u0000\u0000\u082c\u082d\u0005\u00ac\u0000\u0000\u082d\u082e\u0003"+
		"\u02bc\u015e\u0000\u082e\u082f\u0005\u017f\u0000\u0000\u082f\u0839\u0003"+
		"\u02bc\u015e\u0000\u0830\u083a\u0005\u0169\u0000\u0000\u0831\u0836\u0005"+
		"\u0143\u0000\u0000\u0832\u0834\u0005\u018f\u0000\u0000\u0833\u0832\u0001"+
		"\u0000\u0000\u0000\u0833\u0834\u0001\u0000\u0000\u0000\u0834\u0835\u0001"+
		"\u0000\u0000\u0000\u0835\u0837\u0005\u022f\u0000\u0000\u0836\u0833\u0001"+
		"\u0000\u0000\u0000\u0836\u0837\u0001\u0000\u0000\u0000\u0837\u0838\u0001"+
		"\u0000\u0000\u0000\u0838\u083a\u0003\u02ce\u0167\u0000\u0839\u0830\u0001"+
		"\u0000\u0000\u0000\u0839\u0831\u0001\u0000\u0000\u0000\u083a{\u0001\u0000"+
		"\u0000\u0000\u083b\u083c\u0005\u0018\u0000\u0000\u083c\u083d\u0005\u00e3"+
		"\u0000\u0000\u083d\u083e\u0005\u014d\u0000\u0000\u083e\u083f\u0005\u0289"+
		"\u0000\u0000\u083f\u0844\u0003\u028a\u0145\u0000\u0840\u0841\u0005\u0292"+
		"\u0000\u0000\u0841\u0843\u0003\u028a\u0145\u0000\u0842\u0840\u0001\u0000"+
		"\u0000\u0000\u0843\u0846\u0001\u0000\u0000\u0000\u0844\u0842\u0001\u0000"+
		"\u0000\u0000\u0844\u0845\u0001\u0000\u0000\u0000\u0845\u0849\u0001\u0000"+
		"\u0000\u0000\u0846\u0844\u0001\u0000\u0000\u0000\u0847\u0848\u0005I\u0000"+
		"\u0000\u0848\u084a\u0003\u02c6\u0163\u0000\u0849\u0847\u0001\u0000\u0000"+
		"\u0000\u0849\u084a\u0001\u0000\u0000\u0000\u084a}\u0001\u0000\u0000\u0000"+
		"\u084b\u084c\u0005\u0018\u0000\u0000\u084c\u084d\u0005\u011c\u0000\u0000"+
		"\u084d\u0851\u0005w\u0000\u0000\u084e\u084f\u0005\u014a\u0000\u0000\u084f"+
		"\u0850\u0005U\u0000\u0000\u0850\u0852\u0005,\u0000\u0000\u0851\u084e\u0001"+
		"\u0000\u0000\u0000\u0851\u0852\u0001\u0000\u0000\u0000\u0852\u0853\u0001"+
		"\u0000\u0000\u0000\u0853\u0854\u0003\u0254\u012a\u0000\u0854\u0856\u0003"+
		"\u00eau\u0000\u0855\u0857\u0003\u00d8l\u0000\u0856\u0855\u0001\u0000\u0000"+
		"\u0000\u0856\u0857\u0001\u0000\u0000\u0000\u0857\u0858\u0001\u0000\u0000"+
		"\u0000\u0858\u0859\u0005\u0005\u0000\u0000\u0859\u0865\u0005\u00d7\u0000"+
		"\u0000\u085a\u085b\u0005\u0297\u0000\u0000\u085b\u0860\u0003b1\u0000\u085c"+
		"\u085d\u0005\u0292\u0000\u0000\u085d\u085f\u0003b1\u0000\u085e\u085c\u0001"+
		"\u0000\u0000\u0000\u085f\u0862\u0001\u0000\u0000\u0000\u0860\u085e\u0001"+
		"\u0000\u0000\u0000\u0860\u0861\u0001\u0000\u0000\u0000\u0861\u0863\u0001"+
		"\u0000\u0000\u0000\u0862\u0860\u0001\u0000\u0000\u0000\u0863\u0864\u0005"+
		"\u0298\u0000\u0000\u0864\u0866\u0001\u0000\u0000\u0000\u0865\u085a\u0001"+
		"\u0000\u0000\u0000\u0865\u0866\u0001\u0000\u0000\u0000\u0866\u0874\u0001"+
		"\u0000\u0000\u0000\u0867\u0868\u0005\u0015\u0000\u0000\u0868\u0869\u0005"+
		"\u01a3\u0000\u0000\u0869\u086a\u0005\u0297\u0000\u0000\u086a\u086f\u0003"+
		"d2\u0000\u086b\u086c\u0005\u0292\u0000\u0000\u086c\u086e\u0003d2\u0000"+
		"\u086d\u086b\u0001\u0000\u0000\u0000\u086e\u0871\u0001\u0000\u0000\u0000"+
		"\u086f\u086d\u0001\u0000\u0000\u0000\u086f\u0870\u0001\u0000\u0000\u0000"+
		"\u0870\u0872\u0001\u0000\u0000\u0000\u0871\u086f\u0001\u0000\u0000\u0000"+
		"\u0872\u0873\u0005\u0298\u0000\u0000\u0873\u0875\u0001\u0000\u0000\u0000"+
		"\u0874\u0867\u0001\u0000\u0000\u0000\u0874\u0875\u0001\u0000\u0000\u0000"+
		"\u0875\u0876\u0001\u0000\u0000\u0000\u0876\u0884\u00052\u0000\u0000\u0877"+
		"\u0885\u0003f3\u0000\u0878\u0885\u0001\u0000\u0000\u0000\u0879\u087b\u0005"+
		"\u0094\u0000\u0000\u087a\u0879\u0001\u0000\u0000\u0000\u087a\u087b\u0001"+
		"\u0000\u0000\u0000\u087b\u087c\u0001\u0000\u0000\u0000\u087c\u087d\u0005"+
		"\u0213\u0000\u0000\u087d\u0882\u0003\u0278\u013c\u0000\u087e\u087f\u0005"+
		"\u0297\u0000\u0000\u087f\u0880\u0003\u0248\u0124\u0000\u0880\u0881\u0005"+
		"\u0298\u0000\u0000\u0881\u0883\u0001\u0000\u0000\u0000\u0882\u087e\u0001"+
		"\u0000\u0000\u0000\u0882\u0883\u0001\u0000\u0000\u0000\u0883\u0885\u0001"+
		"\u0000\u0000\u0000\u0884\u0877\u0001\u0000\u0000\u0000\u0884\u0878\u0001"+
		"\u0000\u0000\u0000\u0884\u087a\u0001\u0000\u0000\u0000\u0885\u0887\u0001"+
		"\u0000\u0000\u0000\u0886\u0888\u0003j5\u0000\u0887\u0886\u0001\u0000\u0000"+
		"\u0000\u0887\u0888\u0001\u0000\u0000\u0000\u0888\u089d\u0001\u0000\u0000"+
		"\u0000\u0889\u089e\u0005\u018c\u0000\u0000\u088a\u088b\u0005\u0125\u0000"+
		"\u0000\u088b\u088c\u0005\u00cc\u0000\u0000\u088c\u088d\u0005\u0297\u0000"+
		"\u0000\u088d\u088e\u0003\u02ae\u0157\u0000\u088e\u0896\u0005\u0298\u0000"+
		"\u0000\u088f\u0890\u0005\u0292\u0000\u0000\u0890\u0891\u0005\u0297\u0000"+
		"\u0000\u0891\u0892\u0003\u02ae\u0157\u0000\u0892\u0893\u0005\u0298\u0000"+
		"\u0000\u0893\u0895\u0001\u0000\u0000\u0000\u0894\u088f\u0001\u0000\u0000"+
		"\u0000\u0895\u0898\u0001\u0000\u0000\u0000\u0896\u0894\u0001\u0000\u0000"+
		"\u0000\u0896\u0897\u0001\u0000\u0000\u0000\u0897\u089e\u0001\u0000\u0000"+
		"\u0000\u0898\u0896\u0001\u0000\u0000\u0000\u0899\u089a\u0005\u018c\u0000"+
		"\u0000\u089a\u089e\u0005\u008f\u0000\u0000\u089b\u089e\u0005\u01a5\u0000"+
		"\u0000\u089c\u089e\u0005\u01aa\u0000\u0000\u089d\u0889\u0001\u0000\u0000"+
		"\u0000\u089d\u088a\u0001\u0000\u0000\u0000\u089d\u0899\u0001\u0000\u0000"+
		"\u0000\u089d\u089b\u0001\u0000\u0000\u0000\u089d\u089c\u0001\u0000\u0000"+
		"\u0000\u089d\u089e\u0001\u0000\u0000\u0000\u089e\u08a2\u0001\u0000\u0000"+
		"\u0000\u089f\u08a0\u0005\u0096\u0000\u0000\u08a0\u08a1\u0005]\u0000\u0000"+
		"\u08a1\u08a3\u0005\u010e\u0000\u0000\u08a2\u089f\u0001\u0000\u0000\u0000"+
		"\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000\u0000"+
		"\u08a4\u08a6\u0005\u00f0\u0000\u0000\u08a5\u08a7\u0005\u0005\u0000\u0000"+
		"\u08a6\u08a5\u0001\u0000\u0000\u0000\u08a6\u08a7\u0001\u0000\u0000\u0000"+
		"\u08a7\u08a8\u0001\u0000\u0000\u0000\u08a8\u08a9\u0003\u02aa\u0155\u0000"+
		"\u08a9\u08b0\u0001\u0000\u0000\u0000\u08aa\u08ab\u0005\u0108\u0000\u0000"+
		"\u08ab\u08ac\u0005\u00ba\u0000\u0000\u08ac\u08ad\u0003\u02aa\u0155\u0000"+
		"\u08ad\u08ae\u0005\u0002\u0000\u0000\u08ae\u08af\u0003\u02aa\u0155\u0000"+
		"\u08af\u08b1\u0001\u0000\u0000\u0000\u08b0\u08aa\u0001\u0000\u0000\u0000"+
		"\u08b0\u08b1\u0001\u0000\u0000\u0000\u08b1\u08b3\u0001\u0000\u0000\u0000"+
		"\u08b2\u08b4\u0005\u010b\u0000\u0000\u08b3\u08b2\u0001\u0000\u0000\u0000"+
		"\u08b3\u08b4\u0001\u0000\u0000\u0000\u08b4\u08b7\u0001\u0000\u0000\u0000"+
		"\u08b5\u08b6\u0005\u010e\u0000\u0000\u08b6\u08b8\u0005\u0232\u0000\u0000"+
		"\u08b7\u08b5\u0001\u0000\u0000\u0000\u08b7\u08b8\u0001\u0000\u0000\u0000"+
		"\u08b8\u08be\u0001\u0000\u0000\u0000\u08b9\u08ba\u0005\u010f\u0000\u0000"+
		"\u08ba\u08bb\u0005\u0005\u0000\u0000\u08bb\u08bf\u0003\u02aa\u0155\u0000"+
		"\u08bc\u08bd\u0005\u018f\u0000\u0000\u08bd\u08bf\u0005\u010f\u0000\u0000"+
		"\u08be\u08b9\u0001\u0000\u0000\u0000\u08be\u08bc\u0001\u0000\u0000\u0000"+
		"\u08be\u08bf\u0001\u0000\u0000\u0000\u08bf\u08ce\u0001\u0000\u0000\u0000"+
		"\u08c0\u08c1\u0005\u0113\u0000\u0000\u08c1\u08c4\u0003f3\u0000\u08c2\u08c3"+
		"\u0005]\u0000\u0000\u08c3\u08c5\u0003\u02a2\u0151\u0000\u08c4\u08c2\u0001"+
		"\u0000\u0000\u0000\u08c4\u08c5\u0001\u0000\u0000\u0000\u08c5\u08cb\u0001"+
		"\u0000\u0000\u0000\u08c6\u08c7\u0005\u0292\u0000\u0000\u08c7\u08c8\u0005"+
		"]\u0000\u0000\u08c8\u08ca\u0003\u02a2\u0151\u0000\u08c9\u08c6\u0001\u0000"+
		"\u0000\u0000\u08ca\u08cd\u0001\u0000\u0000\u0000\u08cb\u08c9\u0001\u0000"+
		"\u0000\u0000\u08cb\u08cc\u0001\u0000\u0000\u0000\u08cc\u08cf\u0001\u0000"+
		"\u0000\u0000\u08cd\u08cb\u0001\u0000\u0000\u0000\u08ce\u08c0\u0001\u0000"+
		"\u0000\u0000\u08ce\u08cf\u0001\u0000\u0000\u0000\u08cf\u08db\u0001\u0000"+
		"\u0000\u0000\u08d0\u08d2\u0005\u0094\u0000\u0000\u08d1\u08d0\u0001\u0000"+
		"\u0000\u0000\u08d1\u08d2\u0001\u0000\u0000\u0000\u08d2\u08d3\u0001\u0000"+
		"\u0000\u0000\u08d3\u08d4\u0005\u0123\u0000\u0000\u08d4\u08d5\u0003\u025a"+
		"\u012d\u0000\u08d5\u08d7\u0005\u0297\u0000\u0000\u08d6\u08d8\u0003\u0248"+
		"\u0124\u0000\u08d7\u08d6\u0001\u0000\u0000\u0000\u08d7\u08d8\u0001\u0000"+
		"\u0000\u0000\u08d8\u08d9\u0001\u0000\u0000\u0000\u08d9\u08da\u0005\u0298"+
		"\u0000\u0000\u08da\u08dc\u0001\u0000\u0000\u0000\u08db\u08d1\u0001\u0000"+
		"\u0000\u0000\u08db\u08dc\u0001\u0000\u0000\u0000\u08dc\u08e2\u0001\u0000"+
		"\u0000\u0000\u08dd\u08df\u0005W\u0000\u0000\u08de\u08e0\u0005\u0005\u0000"+
		"\u0000\u08df\u08de\u0001\u0000\u0000\u0000\u08df\u08e0\u0001\u0000\u0000"+
		"\u0000\u08e0\u08e1\u0001\u0000\u0000\u0000\u08e1\u08e3\u0003\u02a8\u0154"+
		"\u0000\u08e2\u08dd\u0001\u0000\u0000\u0000\u08e2\u08e3\u0001\u0000\u0000"+
		"\u0000\u08e3\u08ef\u0001\u0000\u0000\u0000\u08e4\u08e6\u0005\u0094\u0000"+
		"\u0000\u08e5\u08e4\u0001\u0000\u0000\u0000\u08e5\u08e6\u0001\u0000\u0000"+
		"\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7\u08e8\u0005\u01ab\u0000"+
		"\u0000\u08e8\u08e9\u0003\u025c\u012e\u0000\u08e9\u08eb\u0005\u0297\u0000"+
		"\u0000\u08ea\u08ec\u0003\u0248\u0124\u0000\u08eb\u08ea\u0001\u0000\u0000"+
		"\u0000\u08eb\u08ec\u0001\u0000\u0000\u0000\u08ec\u08ed\u0001\u0000\u0000"+
		"\u0000\u08ed\u08ee\u0005\u0298\u0000\u0000\u08ee\u08f0\u0001\u0000\u0000"+
		"\u0000\u08ef\u08e5\u0001\u0000\u0000\u0000\u08ef\u08f0\u0001\u0000\u0000"+
		"\u0000\u08f0\u08f4\u0001\u0000\u0000\u0000\u08f1\u08f2\u0005\u01d9\u0000"+
		"\u0000\u08f2\u08f3\u0005\u022c\u0000\u0000\u08f3\u08f5\u0003\u02a8\u0154"+
		"\u0000\u08f4\u08f1\u0001\u0000\u0000\u0000\u08f4\u08f5\u0001\u0000\u0000"+
		"\u0000\u08f5\u0905\u0001\u0000\u0000\u0000\u08f6\u08f7\u0005\u01de\u0000"+
		"\u0000\u08f7\u08f8\u0005\u00e3\u0000\u0000\u08f8\u08fb\u0003f3\u0000\u08f9"+
		"\u08fa\u0005]\u0000\u0000\u08fa\u08fc\u0003\u02a2\u0151\u0000\u08fb\u08f9"+
		"\u0001\u0000\u0000\u0000\u08fb\u08fc\u0001\u0000\u0000\u0000\u08fc\u0902"+
		"\u0001\u0000\u0000\u0000\u08fd\u08fe\u0005\u0292\u0000\u0000\u08fe\u08ff"+
		"\u0005]\u0000\u0000\u08ff\u0901\u0003\u02a2\u0151\u0000\u0900\u08fd\u0001"+
		"\u0000\u0000\u0000\u0901\u0904\u0001\u0000\u0000\u0000\u0902\u0900\u0001"+
		"\u0000\u0000\u0000\u0902\u0903\u0001\u0000\u0000\u0000\u0903\u0906\u0001"+
		"\u0000\u0000\u0000\u0904\u0902\u0001\u0000\u0000\u0000\u0905\u08f6\u0001"+
		"\u0000\u0000\u0000\u0905\u0906\u0001\u0000\u0000\u0000\u0906\u0909\u0001"+
		"\u0000\u0000\u0000\u0907\u0908\u0005\u01df\u0000\u0000\u0908\u090a\u0003"+
		"\u02ae\u0157\u0000\u0909\u0907\u0001\u0000\u0000\u0000\u0909\u090a\u0001"+
		"\u0000\u0000\u0000\u090a\u090d\u0001\u0000\u0000\u0000\u090b\u090c\u0005"+
		"\u0212\u0000\u0000\u090c\u090e\u0003\u02ae\u0157\u0000\u090d\u090b\u0001"+
		"\u0000\u0000\u0000\u090d\u090e\u0001\u0000\u0000\u0000\u090e\u0912\u0001"+
		"\u0000\u0000\u0000\u090f\u0910\u0005\u0212\u0000\u0000\u0910\u0911\u0005"+
		"\u00bc\u0000\u0000\u0911\u0913\u0003\u02ae\u0157\u0000\u0912\u090f\u0001"+
		"\u0000\u0000\u0000\u0912\u0913\u0001\u0000\u0000\u0000\u0913\u0916\u0001"+
		"\u0000\u0000\u0000\u0914\u0915\u0005\u0084\u0000\u0000\u0915\u0917\u0005"+
		"\u0199\u0000\u0000\u0916\u0914\u0001\u0000\u0000\u0000\u0916\u0917\u0001"+
		"\u0000\u0000\u0000\u0917\u091a\u0001\u0000\u0000\u0000\u0918\u0919\u0005"+
		"\u0086\u0000\u0000\u0919\u091b\u0003\u02aa\u0155\u0000\u091a\u0918\u0001"+
		"\u0000\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000\u091b\u007f\u0001"+
		"\u0000\u0000\u0000\u091c\u091d\u0005\u0018\u0000\u0000\u091d\u091e\u0005"+
		"\u011e\u0000\u0000\u091e\u091f\u00055\u0000\u0000\u091f\u0920\u0003\u02c4"+
		"\u0162\u0000\u0920\u0081\u0001\u0000\u0000\u0000\u0921\u0922\u0005\u0018"+
		"\u0000\u0000\u0922\u0923\u0007\b\u0000\u0000\u0923\u0927\u0005w\u0000"+
		"\u0000\u0924\u0925\u0005\u014a\u0000\u0000\u0925\u0926\u0005U\u0000\u0000"+
		"\u0926\u0928\u0005,\u0000\u0000\u0927\u0924\u0001\u0000\u0000\u0000\u0927"+
		"\u0928\u0001\u0000\u0000\u0000\u0928\u0929\u0001\u0000\u0000\u0000\u0929"+
		"\u092c\u0003\u0254\u012a\u0000\u092a\u092d\u0003\u00eau\u0000\u092b\u092d"+
		"\u0003\u00dcn\u0000\u092c\u092a\u0001\u0000\u0000\u0000\u092c\u092b\u0001"+
		"\u0000\u0000\u0000\u092d\u092f\u0001\u0000\u0000\u0000\u092e\u0930\u0003"+
		"\u00d8l\u0000\u092f\u092e\u0001\u0000\u0000\u0000\u092f\u0930\u0001\u0000"+
		"\u0000\u0000\u0930\u0932\u0001\u0000\u0000\u0000\u0931\u0933\u0003\u0202"+
		"\u0101\u0000\u0932\u0931\u0001\u0000\u0000\u0000\u0932\u0933\u0001\u0000"+
		"\u0000\u0000\u0933\u0935\u0001\u0000\u0000\u0000\u0934\u0936\u0003\u00fa"+
		"}\u0000\u0935\u0934\u0001\u0000\u0000\u0000\u0935\u0936\u0001\u0000\u0000"+
		"\u0000\u0936\u0938\u0001\u0000\u0000\u0000\u0937\u0939\u0003\u00f2y\u0000"+
		"\u0938\u0937\u0001\u0000\u0000\u0000\u0938\u0939\u0001\u0000\u0000\u0000"+
		"\u0939\u093b\u0001\u0000\u0000\u0000\u093a\u093c\u0003\u00b6[\u0000\u093b"+
		"\u093a\u0001\u0000\u0000\u0000\u093b\u093c\u0001\u0000\u0000\u0000\u093c"+
		"\u093e\u0001\u0000\u0000\u0000\u093d\u093f\u0003\u0206\u0103\u0000\u093e"+
		"\u093d\u0001\u0000\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000\u093f"+
		"\u0942\u0001\u0000\u0000\u0000\u0940\u0941\u0005\u0005\u0000\u0000\u0941"+
		"\u0943\u0003\u01b0\u00d8\u0000\u0942\u0940\u0001\u0000\u0000\u0000\u0942"+
		"\u0943\u0001\u0000\u0000\u0000\u0943\u0083\u0001\u0000\u0000\u0000\u0944"+
		"\u0945\u0005\u0018\u0000\u0000\u0945\u0946\u0007\b\u0000\u0000\u0946\u0947"+
		"\u0005\u011c\u0000\u0000\u0947\u0949\u0005w\u0000\u0000\u0948\u094a\u0003"+
		"\u00b8\\\u0000\u0949\u0948\u0001\u0000\u0000\u0000\u0949\u094a\u0001\u0000"+
		"\u0000\u0000\u094a\u094b\u0001\u0000\u0000\u0000\u094b\u094c\u0003\u0254"+
		"\u012a\u0000\u094c\u094e\u0003\u00eau\u0000\u094d\u094f\u0003\u00d8l\u0000"+
		"\u094e\u094d\u0001\u0000\u0000\u0000\u094e\u094f\u0001\u0000\u0000\u0000"+
		"\u094f\u0950\u0001\u0000\u0000\u0000\u0950\u0951\u0005\u0005\u0000\u0000"+
		"\u0951\u095d\u0005\u00d7\u0000\u0000\u0952\u0953\u0005\u0297\u0000\u0000"+
		"\u0953\u0958\u0003b1\u0000\u0954\u0955\u0005\u0292\u0000\u0000\u0955\u0957"+
		"\u0003b1\u0000\u0956\u0954\u0001\u0000\u0000\u0000\u0957\u095a\u0001\u0000"+
		"\u0000\u0000\u0958\u0956\u0001\u0000\u0000\u0000\u0958\u0959\u0001\u0000"+
		"\u0000\u0000\u0959\u095b\u0001\u0000\u0000\u0000\u095a\u0958\u0001\u0000"+
		"\u0000\u0000\u095b\u095c\u0005\u0298\u0000\u0000\u095c\u095e\u0001\u0000"+
		"\u0000\u0000\u095d\u0952\u0001\u0000\u0000\u0000\u095d\u095e\u0001\u0000"+
		"\u0000\u0000\u095e\u09ea\u0001\u0000\u0000\u0000\u095f\u0960\u00052\u0000"+
		"\u0000\u0960\u0969\u0003f3\u0000\u0961\u0966\u0003\u02d0\u0168\u0000\u0962"+
		"\u0963\u0005\u0292\u0000\u0000\u0963\u0965\u0003\u02d0\u0168\u0000\u0964"+
		"\u0962\u0001\u0000\u0000\u0000\u0965\u0968\u0001\u0000\u0000\u0000\u0966"+
		"\u0964\u0001\u0000\u0000\u0000\u0966\u0967\u0001\u0000\u0000\u0000\u0967"+
		"\u096a\u0001\u0000\u0000\u0000\u0968\u0966\u0001\u0000\u0000\u0000\u0969"+
		"\u0961\u0001\u0000\u0000\u0000\u0969\u096a\u0001\u0000\u0000\u0000\u096a"+
		"\u096c\u0001\u0000\u0000\u0000\u096b\u096d\u0005\u0094\u0000\u0000\u096c"+
		"\u096b\u0001\u0000\u0000\u0000\u096c\u096d\u0001\u0000\u0000\u0000\u096d"+
		"\u0974\u0001\u0000\u0000\u0000\u096e\u096f\u0005\u0213\u0000\u0000\u096f"+
		"\u0970\u0003\u0278\u013c\u0000\u0970\u0971\u0005\u0297\u0000\u0000\u0971"+
		"\u0972\u0003\u0248\u0124\u0000\u0972\u0973\u0005\u0298\u0000\u0000\u0973"+
		"\u0975\u0001\u0000\u0000\u0000\u0974\u096e\u0001\u0000\u0000\u0000\u0974"+
		"\u0975\u0001\u0000\u0000\u0000\u0975\u097c\u0001\u0000\u0000\u0000\u0976"+
		"\u0977\u0005\u0123\u0000\u0000\u0977\u0978\u0003\u027e\u013f\u0000\u0978"+
		"\u0979\u0005\u0297\u0000\u0000\u0979\u097a\u0003\u0248\u0124\u0000\u097a"+
		"\u097b\u0005\u0298\u0000\u0000\u097b\u097d\u0001\u0000\u0000\u0000\u097c"+
		"\u0976\u0001\u0000\u0000\u0000\u097c\u097d\u0001\u0000\u0000\u0000\u097d"+
		"\u0982\u0001\u0000\u0000\u0000\u097e\u097f\u0005\u01ab\u0000\u0000\u097f"+
		"\u0980\u0003\u0280\u0140\u0000\u0980\u0981\u0003\u0248\u0124\u0000\u0981"+
		"\u0983\u0001\u0000\u0000\u0000\u0982\u097e\u0001\u0000\u0000\u0000\u0982"+
		"\u0983\u0001\u0000\u0000\u0000\u0983\u0989\u0001\u0000\u0000\u0000\u0984"+
		"\u0986\u0005\u00f0\u0000\u0000\u0985\u0987\u0005\u0005\u0000\u0000\u0986"+
		"\u0985\u0001\u0000\u0000\u0000\u0986\u0987\u0001\u0000\u0000\u0000\u0987"+
		"\u0988\u0001\u0000\u0000\u0000\u0988\u098a\u0003\u02aa\u0155\u0000\u0989"+
		"\u0984\u0001\u0000\u0000\u0000\u0989\u098a\u0001\u0000\u0000\u0000\u098a"+
		"\u098d\u0001\u0000\u0000\u0000\u098b\u098c\u0005\u0084\u0000\u0000\u098c"+
		"\u098e\u0005\u0199\u0000\u0000\u098d\u098b\u0001\u0000\u0000\u0000\u098d"+
		"\u098e\u0001\u0000\u0000\u0000\u098e\u0994\u0001\u0000\u0000\u0000\u098f"+
		"\u0991\u0005W\u0000\u0000\u0990\u0992\u0005\u0005\u0000\u0000\u0991\u0990"+
		"\u0001\u0000\u0000\u0000\u0991\u0992\u0001\u0000\u0000\u0000\u0992\u0993"+
		"\u0001\u0000\u0000\u0000\u0993\u0995\u0003\u02a8\u0154\u0000\u0994\u098f"+
		"\u0001\u0000\u0000\u0000\u0994\u0995\u0001\u0000\u0000\u0000\u0995\u099d"+
		"\u0001\u0000\u0000\u0000\u0996\u0998\u0005\u010f\u0000\u0000\u0997\u0999"+
		"\u0005\u0005\u0000\u0000\u0998\u0997\u0001\u0000\u0000\u0000\u0998\u0999"+
		"\u0001\u0000\u0000\u0000\u0999\u099a\u0001\u0000\u0000\u0000\u099a\u099e"+
		"\u0003\u02aa\u0155\u0000\u099b\u099c\u0005\u018f\u0000\u0000\u099c\u099e"+
		"\u0005\u010f\u0000\u0000\u099d\u0996\u0001\u0000\u0000\u0000\u099d\u099b"+
		"\u0001\u0000\u0000\u0000\u099d\u099e\u0001\u0000\u0000\u0000\u099e\u09a4"+
		"\u0001\u0000\u0000\u0000\u099f\u09a1\u0005\u0108\u0000\u0000\u09a0\u09a2"+
		"\u0005\u00ba\u0000\u0000\u09a1\u09a0\u0001\u0000\u0000\u0000\u09a1\u09a2"+
		"\u0001\u0000\u0000\u0000\u09a2\u09a3\u0001\u0000\u0000\u0000\u09a3\u09a5"+
		"\u0003\u02aa\u0155\u0000\u09a4\u099f\u0001\u0000\u0000\u0000\u09a4\u09a5"+
		"\u0001\u0000\u0000\u0000\u09a5\u09a9\u0001\u0000\u0000\u0000\u09a6\u09a7"+
		"\u0005\u01d9\u0000\u0000\u09a7\u09a8\u0005\u022c\u0000\u0000\u09a8\u09aa"+
		"\u0003\u02a8\u0154\u0000\u09a9\u09a6\u0001\u0000\u0000\u0000\u09a9\u09aa"+
		"\u0001\u0000\u0000\u0000\u09aa\u09ad\u0001\u0000\u0000\u0000\u09ab\u09ac"+
		"\u0005\u0212\u0000\u0000\u09ac\u09ae\u0003\u02ae\u0157\u0000\u09ad\u09ab"+
		"\u0001\u0000\u0000\u0000\u09ad\u09ae\u0001\u0000\u0000\u0000\u09ae\u09b2"+
		"\u0001\u0000\u0000\u0000\u09af\u09b0\u0005\u0212\u0000\u0000\u09b0\u09b1"+
		"\u0005\u00bc\u0000\u0000\u09b1\u09b3\u0003\u02ae\u0157\u0000\u09b2\u09af"+
		"\u0001\u0000\u0000\u0000\u09b2\u09b3\u0001\u0000\u0000\u0000\u09b3\u09b6"+
		"\u0001\u0000\u0000\u0000\u09b4\u09b5\u0005\u0086\u0000\u0000\u09b5\u09b7"+
		"\u0003\u02aa\u0155\u0000\u09b6\u09b4\u0001\u0000\u0000\u0000\u09b6\u09b7"+
		"\u0001\u0000\u0000\u0000\u09b7\u09ba\u0001\u0000\u0000\u0000\u09b8\u09b9"+
		"\u0005\u01df\u0000\u0000\u09b9\u09bb\u0003\u02ae\u0157\u0000\u09ba\u09b8"+
		"\u0001\u0000\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000\u0000\u09bb\u09cc"+
		"\u0001\u0000\u0000\u0000\u09bc\u09bd\u0005\u0113\u0000\u0000\u09bd\u09be"+
		"\u0003\u02a8\u0154\u0000\u09be\u09bf\u0005]\u0000\u0000\u09bf\u09c0\u0003"+
		"\u02a2\u0151\u0000\u09c0\u09c1\u0001\u0000\u0000\u0000\u09c1\u09c9\u0005"+
		"\u0292\u0000\u0000\u09c2\u09c3\u0005\u0113\u0000\u0000\u09c3\u09c4\u0003"+
		"\u02a8\u0154\u0000\u09c4\u09c5\u0005]\u0000\u0000\u09c5\u09c6\u0003\u02a2"+
		"\u0151\u0000\u09c6\u09c8\u0001\u0000\u0000\u0000\u09c7\u09c2\u0001\u0000"+
		"\u0000\u0000\u09c8\u09cb\u0001\u0000\u0000\u0000\u09c9\u09c7\u0001\u0000"+
		"\u0000\u0000\u09c9\u09ca\u0001\u0000\u0000\u0000\u09ca\u09cd\u0001\u0000"+
		"\u0000\u0000\u09cb\u09c9\u0001\u0000\u0000\u0000\u09cc\u09bc\u0001\u0000"+
		"\u0000\u0000\u09cc\u09cd\u0001\u0000\u0000\u0000\u09cd\u09e0\u0001\u0000"+
		"\u0000\u0000\u09ce\u09cf\u0005\u01de\u0000\u0000\u09cf\u09d0\u0005\u00e3"+
		"\u0000\u0000\u09d0\u09d1\u0003\u02a8\u0154\u0000\u09d1\u09d2\u0005]\u0000"+
		"\u0000\u09d2\u09d3\u0003\u02a2\u0151\u0000\u09d3\u09d4\u0001\u0000\u0000"+
		"\u0000\u09d4\u09dd\u0005\u0292\u0000\u0000\u09d5\u09d6\u0005\u01de\u0000"+
		"\u0000\u09d6\u09d7\u0005\u00e3\u0000\u0000\u09d7\u09d8\u0003\u02a8\u0154"+
		"\u0000\u09d8\u09d9\u0005]\u0000\u0000\u09d9\u09da\u0003\u02a2\u0151\u0000"+
		"\u09da\u09dc\u0001\u0000\u0000\u0000\u09db\u09d5\u0001\u0000\u0000\u0000"+
		"\u09dc\u09df\u0001\u0000\u0000\u0000\u09dd\u09db\u0001\u0000\u0000\u0000"+
		"\u09dd\u09de\u0001\u0000\u0000\u0000\u09de\u09e1\u0001\u0000\u0000\u0000"+
		"\u09df\u09dd\u0001\u0000\u0000\u0000\u09e0\u09ce\u0001\u0000\u0000\u0000"+
		"\u09e0\u09e1\u0001\u0000\u0000\u0000\u09e1\u09e3\u0001\u0000\u0000\u0000"+
		"\u09e2\u09e4\u0005\u010b\u0000\u0000\u09e3\u09e2\u0001\u0000\u0000\u0000"+
		"\u09e3\u09e4\u0001\u0000\u0000\u0000\u09e4\u09e8\u0001\u0000\u0000\u0000"+
		"\u09e5\u09e6\u0005\u0096\u0000\u0000\u09e6\u09e7\u0005]\u0000\u0000\u09e7"+
		"\u09e9\u0005\u010e\u0000\u0000\u09e8\u09e5\u0001\u0000\u0000\u0000\u09e8"+
		"\u09e9\u0001\u0000\u0000\u0000\u09e9\u09eb\u0001\u0000\u0000\u0000\u09ea"+
		"\u095f\u0001\u0000\u0000\u0000\u09ea\u09eb\u0001\u0000\u0000\u0000\u09eb"+
		"\u0085\u0001\u0000\u0000\u0000\u09ec\u09f5\u0003\u0098L\u0000\u09ed\u09f5"+
		"\u0003\u0096K\u0000\u09ee\u09f5\u0003\u0094J\u0000\u09ef\u09f5\u0003\u0090"+
		"H\u0000\u09f0\u09f5\u0003\u008eG\u0000\u09f1\u09f5\u0003\u008cF\u0000"+
		"\u09f2\u09f5\u0003\u008aE\u0000\u09f3\u09f5\u0003\u0088D\u0000\u09f4\u09ec"+
		"\u0001\u0000\u0000\u0000\u09f4\u09ed\u0001\u0000\u0000\u0000\u09f4\u09ee"+
		"\u0001\u0000\u0000\u0000\u09f4\u09ef\u0001\u0000\u0000\u0000\u09f4\u09f0"+
		"\u0001\u0000\u0000\u0000\u09f4\u09f1\u0001\u0000\u0000\u0000\u09f4\u09f2"+
		"\u0001\u0000\u0000\u0000\u09f4\u09f3\u0001\u0000\u0000\u0000\u09f5\u0087"+
		"\u0001\u0000\u0000\u0000\u09f6\u09f9\u0005\u0018\u0000\u0000\u09f7\u09f8"+
		"\u0005_\u0000\u0000\u09f8\u09fa\u0005\u01e6\u0000\u0000\u09f9\u09f7\u0001"+
		"\u0000\u0000\u0000\u09f9\u09fa\u0001\u0000\u0000\u0000\u09fa\u09fb\u0001"+
		"\u0000\u0000\u0000\u09fb\u09fc\u0005\u0234\u0000\u0000\u09fc\u09fd\u0005"+
		"\u012d\u0000\u0000\u09fd\u09fe\u0003\u029e\u014f\u0000\u09fe\u0a01\u0005"+
		"\u0005\u0000\u0000\u09ff\u0a00\u0005\u0160\u0000\u0000\u0a00\u0a02\u0003"+
		"\u028e\u0147\u0000\u0a01\u09ff\u0001\u0000\u0000\u0000\u0a01\u0a02\u0001"+
		"\u0000\u0000\u0000\u0a02\u0a03\u0001\u0000\u0000\u0000\u0a03\u0a04\u0005"+
		"\u018a\u0000\u0000\u0a04\u0a05\u0003\u02c4\u0162\u0000\u0a05\u0a06\u0005"+
		"\u0166\u0000\u0000\u0a06\u0a0a\u0003\u029c\u014e\u0000\u0a07\u0a0b\u0005"+
		"\u011f\u0000\u0000\u0a08\u0a09\u0005U\u0000\u0000\u0a09\u0a0b\u0005\u011f"+
		"\u0000\u0000\u0a0a\u0a07\u0001\u0000\u0000\u0000\u0a0a\u0a08\u0001\u0000"+
		"\u0000\u0000\u0a0a\u0a0b\u0001\u0000\u0000\u0000\u0a0b\u0089\u0001\u0000"+
		"\u0000\u0000\u0a0c\u0a0f\u0005\u0018\u0000\u0000\u0a0d\u0a0e\u0005_\u0000"+
		"\u0000\u0a0e\u0a10\u0005\u01e6\u0000\u0000\u0a0f\u0a0d\u0001\u0000\u0000"+
		"\u0000\u0a0f\u0a10\u0001\u0000\u0000\u0000\u0a10\u0a11\u0001\u0000\u0000"+
		"\u0000\u0a11\u0a12\u0005\u0213\u0000\u0000\u0a12\u0a13\u0003\u0264\u0132"+
		"\u0000\u0a13\u0a14\u0005\u0005\u0000\u0000\u0a14\u0a15\u0005\u0160\u0000"+
		"\u0000\u0a15\u0a16\u0003\u028e\u0147\u0000\u0a16\u0a17\u0005\u018a\u0000"+
		"\u0000\u0a17\u0a18\u0003\u02c4\u0162\u0000\u0a18\u0a19\u0005\u0166\u0000"+
		"\u0000\u0a19\u0a1d\u0003\u029c\u014e\u0000\u0a1a\u0a1e\u0005\u011f\u0000"+
		"\u0000\u0a1b\u0a1c\u0005U\u0000\u0000\u0a1c\u0a1e\u0005\u011f\u0000\u0000"+
		"\u0a1d\u0a1a\u0001\u0000\u0000\u0000\u0a1d\u0a1b\u0001\u0000\u0000\u0000"+
		"\u0a1d\u0a1e\u0001\u0000\u0000\u0000\u0a1e\u008b\u0001\u0000\u0000\u0000"+
		"\u0a1f\u0a22\u0005\u0018\u0000\u0000\u0a20\u0a21\u0005_\u0000\u0000\u0a21"+
		"\u0a23\u0005\u01e6\u0000\u0000\u0a22\u0a20\u0001\u0000\u0000\u0000\u0a22"+
		"\u0a23\u0001\u0000\u0000\u0000\u0a23\u0a24\u0001\u0000\u0000\u0000\u0a24"+
		"\u0a25\u0005\u01ab\u0000\u0000\u0a25\u0a26\u0003\u0264\u0132\u0000\u0a26"+
		"\u0a29\u0005\u0005\u0000\u0000\u0a27\u0a28\u0005\u0160\u0000\u0000\u0a28"+
		"\u0a2a\u0003\u028e\u0147\u0000\u0a29\u0a27\u0001\u0000\u0000\u0000\u0a29"+
		"\u0a2a\u0001\u0000\u0000\u0000\u0a2a\u0a2b\u0001\u0000\u0000\u0000\u0a2b"+
		"\u0a2c\u0005\u018a\u0000\u0000\u0a2c\u0a2d\u0003\u02c4\u0162\u0000\u0a2d"+
		"\u0a2e\u0005\u0166\u0000\u0000\u0a2e\u0a32\u0003\u029c\u014e\u0000\u0a2f"+
		"\u0a33\u0005\u011f\u0000\u0000\u0a30\u0a31\u0005U\u0000\u0000\u0a31\u0a33"+
		"\u0005\u011f\u0000\u0000\u0a32\u0a2f\u0001\u0000\u0000\u0000\u0a32\u0a30"+
		"\u0001\u0000\u0000\u0000\u0a32\u0a33\u0001\u0000\u0000\u0000\u0a33\u008d"+
		"\u0001\u0000\u0000\u0000\u0a34\u0a37\u0005\u0018\u0000\u0000\u0a35\u0a36"+
		"\u0005_\u0000\u0000\u0a36\u0a38\u0005\u01e6\u0000\u0000\u0a37\u0a35\u0001"+
		"\u0000\u0000\u0000\u0a37\u0a38\u0001\u0000\u0000\u0000\u0a38\u0a39\u0001"+
		"\u0000\u0000\u0000\u0a39\u0a3a\u0005\u012d\u0000\u0000\u0a3a\u0a3b\u0003"+
		"\u0264\u0132\u0000\u0a3b\u0a3e\u0005\u0005\u0000\u0000\u0a3c\u0a3d\u0005"+
		"\u0160\u0000\u0000\u0a3d\u0a3f\u0003\u028e\u0147\u0000\u0a3e\u0a3c\u0001"+
		"\u0000\u0000\u0000\u0a3e\u0a3f\u0001\u0000\u0000\u0000\u0a3f\u0a40\u0001"+
		"\u0000\u0000\u0000\u0a40\u0a41\u0005\u018a\u0000\u0000\u0a41\u0a42\u0003"+
		"\u02c4\u0162\u0000\u0a42\u0a43\u0005\u0166\u0000\u0000\u0a43\u0a47\u0003"+
		"\u029c\u014e\u0000\u0a44\u0a48\u0005\u011f\u0000\u0000\u0a45\u0a46\u0005"+
		"U\u0000\u0000\u0a46\u0a48\u0005\u011f\u0000\u0000\u0a47\u0a44\u0001\u0000"+
		"\u0000\u0000\u0a47\u0a45\u0001\u0000\u0000\u0000\u0a47\u0a48\u0001\u0000"+
		"\u0000\u0000\u0a48\u008f\u0001\u0000\u0000\u0000\u0a49\u0a4c\u0005\u0018"+
		"\u0000\u0000\u0a4a\u0a4b\u0005_\u0000\u0000\u0a4b\u0a4d\u0005\u01e6\u0000"+
		"\u0000\u0a4c\u0a4a\u0001\u0000\u0000\u0000\u0a4c\u0a4d\u0001\u0000\u0000"+
		"\u0000\u0a4d\u0a4e\u0001\u0000\u0000\u0000\u0a4e\u0a4f\u0005\u012d\u0000"+
		"\u0000\u0a4f\u0a50\u0003\u0264\u0132\u0000\u0a50\u0a51\u0003\u00aeW\u0000"+
		"\u0a51\u0a52\u0005\u01ec\u0000\u0000\u0a52\u0a53\u0003\u02e6\u0173\u0000"+
		"\u0a53\u0a54\u0005\u0005\u0000\u0000\u0a54\u0a55\u0003\u0092I\u0000\u0a55"+
		"\u0091\u0001\u0000\u0000\u0000\u0a56\u0a57\u0005\u00b4\u0000\u0000\u0a57"+
		"\u0a58\u0005\u01ec\u0000\u0000\u0a58\u0a5a\u0003\u0226\u0113\u0000\u0a59"+
		"\u0a5b\u0005\u029a\u0000\u0000\u0a5a\u0a59\u0001\u0000\u0000\u0000\u0a5a"+
		"\u0a5b\u0001\u0000\u0000\u0000\u0a5b\u0a5c\u0001\u0000\u0000\u0000\u0a5c"+
		"\u0a5d\u0005*\u0000\u0000\u0a5d\u0093\u0001\u0000\u0000\u0000\u0a5e\u0a61"+
		"\u0005\u0018\u0000\u0000\u0a5f\u0a60\u0005_\u0000\u0000\u0a60\u0a62\u0005"+
		"\u01e6\u0000\u0000\u0a61\u0a5f\u0001\u0000\u0000\u0000\u0a61\u0a62\u0001"+
		"\u0000\u0000\u0000\u0a62\u0a63\u0001\u0000\u0000\u0000\u0a63\u0a64\u0005"+
		"\u0123\u0000\u0000\u0a64\u0a65\u0003\u0264\u0132\u0000\u0a65\u0a68\u0005"+
		"\u0005\u0000\u0000\u0a66\u0a67\u0005\u0160\u0000\u0000\u0a67\u0a69\u0003"+
		"\u028e\u0147\u0000\u0a68\u0a66\u0001\u0000\u0000\u0000\u0a68\u0a69\u0001"+
		"\u0000\u0000\u0000\u0a69\u0a6a\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0005"+
		"\u018a\u0000\u0000\u0a6b\u0a6c\u0003\u02c4\u0162\u0000\u0a6c\u0a6d\u0005"+
		"\u0166\u0000\u0000\u0a6d\u0a72\u0003\u029c\u014e\u0000\u0a6e\u0a70\u0005"+
		"U\u0000\u0000\u0a6f\u0a6e\u0001\u0000\u0000\u0000\u0a6f\u0a70\u0001\u0000"+
		"\u0000\u0000\u0a70\u0a71\u0001\u0000\u0000\u0000\u0a71\u0a73\u0005\u011f"+
		"\u0000\u0000\u0a72\u0a6f\u0001\u0000\u0000\u0000\u0a72\u0a73\u0001\u0000"+
		"\u0000\u0000\u0a73\u0095\u0001\u0000\u0000\u0000\u0a74\u0a77\u0005\u0018"+
		"\u0000\u0000\u0a75\u0a76\u0005_\u0000\u0000\u0a76\u0a78\u0005\u01e6\u0000"+
		"\u0000\u0a77\u0a75\u0001\u0000\u0000\u0000\u0a77\u0a78\u0001\u0000\u0000"+
		"\u0000\u0a78\u0a79\u0001\u0000\u0000\u0000\u0a79\u0a7a\u0005\u00a5\u0000"+
		"\u0000\u0a7a\u0a7b\u0005\u012d\u0000\u0000\u0a7b\u0a7c\u0003\u029e\u014f"+
		"\u0000\u0a7c\u0a7f\u0005\u0005\u0000\u0000\u0a7d\u0a7e\u0005\u0160\u0000"+
		"\u0000\u0a7e\u0a80\u0003\u028e\u0147\u0000\u0a7f\u0a7d\u0001\u0000\u0000"+
		"\u0000\u0a7f\u0a80\u0001\u0000\u0000\u0000\u0a80\u0a81\u0001\u0000\u0000"+
		"\u0000\u0a81\u0a82\u0005\u018a\u0000\u0000\u0a82\u0a83\u0003\u02c4\u0162"+
		"\u0000\u0a83\u0a84\u0005\u0166\u0000\u0000\u0a84\u0a88\u0003\u029c\u014e"+
		"\u0000\u0a85\u0a89\u0005\u011f\u0000\u0000\u0a86\u0a87\u0005U\u0000\u0000"+
		"\u0a87\u0a89\u0005\u011f\u0000\u0000\u0a88\u0a85\u0001\u0000\u0000\u0000"+
		"\u0a88\u0a86\u0001\u0000\u0000\u0000\u0a88\u0a89\u0001\u0000\u0000\u0000"+
		"\u0a89\u0097\u0001\u0000\u0000\u0000\u0a8a\u0a8d\u0005\u0018\u0000\u0000"+
		"\u0a8b\u0a8c\u0005_\u0000\u0000\u0a8c\u0a8e\u0005\u01e6\u0000\u0000\u0a8d"+
		"\u0a8b\u0001\u0000\u0000\u0000\u0a8d\u0a8e\u0001\u0000\u0000\u0000\u0a8e"+
		"\u0a8f\u0001\u0000\u0000\u0000\u0a8f\u0a90\u0005\u00a1\u0000\u0000\u0a90"+
		"\u0a91\u0005\u012d\u0000\u0000\u0a91\u0a92\u0003\u0264\u0132\u0000\u0a92"+
		"\u0a95\u0005\u0005\u0000\u0000\u0a93\u0a94\u0005\u0160\u0000\u0000\u0a94"+
		"\u0a96\u0003\u028e\u0147\u0000\u0a95\u0a93\u0001\u0000\u0000\u0000\u0a95"+
		"\u0a96\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001\u0000\u0000\u0000\u0a97"+
		"\u0a98\u0005\u018a\u0000\u0000\u0a98\u0a99\u0003\u02c4\u0162\u0000\u0a99"+
		"\u0a9a\u0005\u0166\u0000\u0000\u0a9a\u0a9b\u0003\u029c\u014e\u0000\u0a9b"+
		"\u0099\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0005\u0018\u0000\u0000\u0a9d"+
		"\u0a9e\u0005\u0138\u0000\u0000\u0a9e\u0aa0\u0005n\u0000\u0000\u0a9f\u0aa1"+
		"\u0003\u00b8\\\u0000\u0aa0\u0a9f\u0001\u0000\u0000\u0000\u0aa0\u0aa1\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0aa2\u0001\u0000\u0000\u0000\u0aa2\u0aa5\u0003"+
		"\u0292\u0149\u0000\u0aa3\u0aa4\u0005\u0007\u0000\u0000\u0aa4\u0aa6\u0003"+
		"\u02c4\u0162\u0000\u0aa5\u0aa3\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0001"+
		"\u0000\u0000\u0000\u0aa6\u0aad\u0001\u0000\u0000\u0000\u0aa7\u0aa9\u0005"+
		"\u0094\u0000\u0000\u0aa8\u0aaa\u0003\u009cN\u0000\u0aa9\u0aa8\u0001\u0000"+
		"\u0000\u0000\u0aaa\u0aab\u0001\u0000\u0000\u0000\u0aab\u0aa9\u0001\u0000"+
		"\u0000\u0000\u0aab\u0aac\u0001\u0000\u0000\u0000\u0aac\u0aae\u0001\u0000"+
		"\u0000\u0000\u0aad\u0aa7\u0001\u0000\u0000\u0000\u0aad\u0aae\u0001\u0000"+
		"\u0000\u0000\u0aae\u009b\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0007\t\u0000"+
		"\u0000\u0ab0\u0ab1\u0005\u02a2\u0000\u0000\u0ab1\u0ab2\u0003\u02c6\u0163"+
		"\u0000\u0ab2\u009d\u0001\u0000\u0000\u0000\u0ab3\u0ab6\u0005\u0018\u0000"+
		"\u0000\u0ab4\u0ab5\u0005_\u0000\u0000\u0ab5\u0ab7\u0005\u01e6\u0000\u0000"+
		"\u0ab6\u0ab4\u0001\u0000\u0000\u0000\u0ab6\u0ab7\u0001\u0000\u0000\u0000"+
		"\u0ab7\u0ab8\u0001\u0000\u0000\u0000\u0ab8\u0ab9\u0005\u0166\u0000\u0000"+
		"\u0ab9\u0aba\u0003\u0266\u0133\u0000\u0aba\u0abd\u0003\u0240\u0120\u0000"+
		"\u0abb\u0abc\u0005\u00f5\u0000\u0000\u0abc\u0abe\u0003\u02c4\u0162\u0000"+
		"\u0abd\u0abb\u0001\u0000\u0000\u0000\u0abd\u0abe\u0001\u0000\u0000\u0000"+
		"\u0abe\u0ac1\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0005\u0160\u0000\u0000"+
		"\u0ac0\u0ac2\u0003\u028e\u0147\u0000\u0ac1\u0abf\u0001\u0000\u0000\u0000"+
		"\u0ac1\u0ac2\u0001\u0000\u0000\u0000\u0ac2\u009f\u0001\u0000\u0000\u0000"+
		"\u0ac3\u0ac4\u0005\u0018\u0000\u0000\u0ac4\u0ac5\u0005\u0168\u0000\u0000"+
		"\u0ac5\u0ac6\u0005\u0280\u0000\u0000\u0ac6\u0ac7\u00055\u0000\u0000\u0ac7"+
		"\u0ac8\u0003\u0284\u0142\u0000\u0ac8\u0adf\u0005\u0094\u0000\u0000\u0ac9"+
		"\u0aca\u0005\u027f\u0000\u0000\u0aca\u0acf\u0003\u0286\u0143\u0000\u0acb"+
		"\u0acc\u0005\u0292\u0000\u0000\u0acc\u0ace\u0003\u0286\u0143\u0000\u0acd"+
		"\u0acb\u0001\u0000\u0000\u0000\u0ace\u0ad1\u0001\u0000\u0000\u0000\u0acf"+
		"\u0acd\u0001\u0000\u0000\u0000\u0acf\u0ad0\u0001\u0000\u0000\u0000\u0ad0"+
		"\u0ae0\u0001\u0000\u0000\u0000\u0ad1\u0acf\u0001\u0000\u0000\u0000\u0ad2"+
		"\u0ad3\u0005\u011e\u0000\u0000\u0ad3\u0ad4\u00055\u0000\u0000\u0ad4\u0ad9"+
		"\u0003\u02ba\u015d\u0000\u0ad5\u0ad6\u0005\u0292\u0000\u0000\u0ad6\u0ad8"+
		"\u0003\u02ba\u015d\u0000\u0ad7\u0ad5\u0001\u0000\u0000\u0000\u0ad8\u0adb"+
		"\u0001\u0000\u0000\u0000\u0ad9\u0ad7\u0001\u0000\u0000\u0000\u0ad9\u0ada"+
		"\u0001\u0000\u0000\u0000\u0ada\u0adc\u0001\u0000\u0000\u0000\u0adb\u0ad9"+
		"\u0001\u0000\u0000\u0000\u0adc\u0add\u0005\u0123\u0000\u0000\u0add\u0ade"+
		"\u0003\u02ce\u0167\u0000\u0ade\u0ae0\u0001\u0000\u0000\u0000\u0adf\u0ac9"+
		"\u0001\u0000\u0000\u0000\u0adf\u0ad2\u0001\u0000\u0000\u0000\u0ae0\u0ae3"+
		"\u0001\u0000\u0000\u0000\u0ae1\u0ae2\u0005\u01c1\u0000\u0000\u0ae2\u0ae4"+
		"\u0003\u02c6\u0163\u0000\u0ae3\u0ae1\u0001\u0000\u0000\u0000\u0ae3\u0ae4"+
		"\u0001\u0000\u0000\u0000\u0ae4\u00a1\u0001\u0000\u0000\u0000\u0ae5\u0ae6"+
		"\u0005\u0018\u0000\u0000\u0ae6\u0ae7\u0005_\u0000\u0000\u0ae7\u0ae8\u0005"+
		"\u01e6\u0000\u0000\u0ae8\u0ae9\u0001\u0000\u0000\u0000\u0ae9\u0aea\u0005"+
		"\u0169\u0000\u0000\u0aea\u0aeb\u0007\n\u0000\u0000\u0aeb\u0aec\u0005\u0251"+
		"\u0000\u0000\u0aec\u0aee\u0003\u0256\u012b\u0000\u0aed\u0aef\u0003\u00c4"+
		"b\u0000\u0aee\u0aed\u0001\u0000\u0000\u0000\u0aee\u0aef\u0001\u0000\u0000"+
		"\u0000\u0aef\u0af0\u0001\u0000\u0000\u0000\u0af0\u0af1\u0005\u0005\u0000"+
		"\u0000\u0af1\u0af2\u0003\u01e6\u00f3\u0000\u0af2\u00a3\u0001\u0000\u0000"+
		"\u0000\u0af3\u0af4\u0005\u0018\u0000\u0000\u0af4\u0af5\u0005\u016a\u0000"+
		"\u0000\u0af5\u0afa\u0003\u02a8\u0154\u0000\u0af6\u0af7\u0005\u0192\u0000"+
		"\u0000\u0af7\u0afb\u0003\u02a2\u0151\u0000\u0af8\u0af9\u0005\u0001\u0000"+
		"\u0000\u0af9\u0afb\u0005\u0193\u0000\u0000\u0afa\u0af6\u0001\u0000\u0000"+
		"\u0000\u0afa\u0af8\u0001\u0000\u0000\u0000\u0afa\u0afb\u0001\u0000\u0000"+
		"\u0000\u0afb\u0afd\u0001\u0000\u0000\u0000\u0afc\u0afe\u0005\u020c\u0000"+
		"\u0000\u0afd\u0afc\u0001\u0000\u0000\u0000\u0afd\u0afe\u0001\u0000\u0000"+
		"\u0000\u0afe\u0b01\u0001\u0000\u0000\u0000\u0aff\u0b00\u0005\u0247\u0000"+
		"\u0000\u0b00\u0b02\u0003\u02a8\u0154\u0000\u0b01\u0aff\u0001\u0000\u0000"+
		"\u0000\u0b01\u0b02\u0001\u0000\u0000\u0000\u0b02\u0b05\u0001\u0000\u0000"+
		"\u0000\u0b03\u0b04\u0005\u015e\u0000\u0000\u0b04\u0b06\u0003\u02a8\u0154"+
		"\u0000\u0b05\u0b03\u0001\u0000\u0000\u0000\u0b05\u0b06\u0001\u0000\u0000"+
		"\u0000\u0b06\u0b09\u0001\u0000\u0000\u0000\u0b07\u0b08\u0005K\u0000\u0000"+
		"\u0b08\u0b0a\u0003\u02a8\u0154\u0000\u0b09\u0b07\u0001\u0000\u0000\u0000"+
		"\u0b09\u0b0a\u0001\u0000\u0000\u0000\u0b0a\u00a5\u0001\u0000\u0000\u0000"+
		"\u0b0b\u0b0c\u0005\u0018\u0000\u0000\u0b0c\u0b0d\u0005\u018d\u0000\u0000"+
		"\u0b0d\u0b0e\u0005\u027f\u0000\u0000\u0b0e\u0b0f\u0003\u0286\u0143\u0000"+
		"\u0b0f\u0b10\u0005]\u0000\u0000\u0b10\u0b11\u0003\u02a2\u0151\u0000\u0b11"+
		"\u0b12\u0005\u0094\u0000\u0000\u0b12\u0b13\u0003\u02ce\u0167\u0000\u0b13"+
		"\u00a7\u0001\u0000\u0000\u0000\u0b14\u0b15\u0005\u0018\u0000\u0000\u0b15"+
		"\u0b16\u0005\u018d\u0000\u0000\u0b16\u0b17\u0005\u0158\u0000\u0000\u0b17"+
		"\u0b18\u0003\u02c0\u0160\u0000\u0b18\u0b19\u0005]\u0000\u0000\u0b19\u0b1a"+
		"\u0003\u02a2\u0151\u0000\u0b1a\u0b1b\u0005\u0094\u0000\u0000\u0b1b\u0b1c"+
		"\u0003\u02ce\u0167\u0000\u0b1c\u00a9\u0001\u0000\u0000\u0000\u0b1d\u0b1e"+
		"\u0005\u0018\u0000\u0000\u0b1e\u0b1f\u0005\u0195\u0000\u0000\u0b1f\u0b20"+
		"\u0003\u027a\u013d\u0000\u0b20\u0b21\u0005\u009b\u0000\u0000\u0b21\u0b25"+
		"\u0003\u02c6\u0163\u0000\u0b22\u0b24\u0003\u001c\u000e\u0000\u0b23\u0b22"+
		"\u0001\u0000\u0000\u0000\u0b24\u0b27\u0001\u0000\u0000\u0000\u0b25\u0b23"+
		"\u0001\u0000\u0000\u0000\u0b25\u0b26\u0001\u0000\u0000\u0000\u0b26\u00ab"+
		"\u0001\u0000\u0000\u0000\u0b27\u0b25\u0001\u0000\u0000\u0000\u0b28\u0b29"+
		"\u0005\u0018\u0000\u0000\u0b29\u0b2a\u0005\u01cd\u0000\u0000\u0b2a\u0b2b"+
		"\u0003\u0260\u0130\u0000\u0b2b\u0b2c\u0003\u00aeW\u0000\u0b2c\u0b2d\u0005"+
		"\u0005\u0000\u0000\u0b2d\u0b2e\u0003\u02c6\u0163\u0000\u0b2e\u0b2f\u0005"+
		"\u0160\u0000\u0000\u0b2f\u0b30\u0003\u028e\u0147\u0000\u0b30\u0b31\u0005"+
		"\u008b\u0000\u0000\u0b31\u0b32\u0003\u02b4\u015a\u0000\u0b32\u00ad\u0001"+
		"\u0000\u0000\u0000\u0b33\u0b3c\u0005\u0297\u0000\u0000\u0b34\u0b39\u0003"+
		"\u00b0X\u0000\u0b35\u0b36\u0005\u0292\u0000\u0000\u0b36\u0b38\u0003\u00b0"+
		"X\u0000\u0b37\u0b35\u0001\u0000\u0000\u0000\u0b38\u0b3b\u0001\u0000\u0000"+
		"\u0000\u0b39\u0b37\u0001\u0000\u0000\u0000\u0b39\u0b3a\u0001\u0000\u0000"+
		"\u0000\u0b3a\u0b3d\u0001\u0000\u0000\u0000\u0b3b\u0b39\u0001\u0000\u0000"+
		"\u0000\u0b3c\u0b34\u0001\u0000\u0000\u0000\u0b3c\u0b3d\u0001\u0000\u0000"+
		"\u0000\u0b3d\u0b3e\u0001\u0000\u0000\u0000\u0b3e\u0b3f\u0005\u0298\u0000"+
		"\u0000\u0b3f\u00af\u0001\u0000\u0000\u0000\u0b40\u0b42\u0003\u02c4\u0162"+
		"\u0000\u0b41\u0b40\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000"+
		"\u0000\u0b42\u0b43\u0001\u0000\u0000\u0000\u0b43\u0b44\u0003\u02e6\u0173"+
		"\u0000\u0b44\u00b1\u0001\u0000\u0000\u0000\u0b45\u0b46\u0005\u0018\u0000"+
		"\u0000\u0b46\u0b47\u0005\u01ce\u0000\u0000\u0b47\u0b48\u0003\u02c2\u0161"+
		"\u0000\u0b48\u0b4a\u0005K\u0000\u0000\u0b49\u0b4b\u0003\u02d2\u0169\u0000"+
		"\u0b4a\u0b49\u0001\u0000\u0000\u0000\u0b4b\u0b4c\u0001\u0000\u0000\u0000"+
		"\u0b4c\u0b4a\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u0001\u0000\u0000\u0000"+
		"\u0b4d\u00b3\u0001\u0000\u0000\u0000\u0b4e\u0b51\u0003\u0252\u0129\u0000"+
		"\u0b4f\u0b51\u0003\u00e2q\u0000\u0b50\u0b4e\u0001\u0000\u0000\u0000\u0b50"+
		"\u0b4f\u0001\u0000\u0000\u0000\u0b51\u0b53\u0001\u0000\u0000\u0000\u0b52"+
		"\u0b54\u0003\u0208\u0104\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53"+
		"\u0b54\u0001\u0000\u0000\u0000\u0b54\u0b56\u0001\u0000\u0000\u0000\u0b55"+
		"\u0b57\u0003\u00e0p\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57"+
		"\u0001\u0000\u0000\u0000\u0b57\u00b5\u0001\u0000\u0000\u0000\u0b58\u0b5a"+
		"\u0005F\u0000\u0000\u0b59\u0b5b\u0003\u02ae\u0157\u0000\u0b5a\u0b59\u0001"+
		"\u0000\u0000\u0000\u0b5a\u0b5b\u0001\u0000\u0000\u0000\u0b5b\u00b7\u0001"+
		"\u0000\u0000\u0000\u0b5c\u0b5e\u0005\u014a\u0000\u0000\u0b5d\u0b5f\u0005"+
		"U\u0000\u0000\u0b5e\u0b5d\u0001\u0000\u0000\u0000\u0b5e\u0b5f\u0001\u0000"+
		"\u0000\u0000\u0b5f\u0b60\u0001\u0000\u0000\u0000\u0b60\u0b61\u0005,\u0000"+
		"\u0000\u0b61\u00b9\u0001\u0000\u0000\u0000\u0b62\u0b63\u0005\u0018\u0000"+
		"\u0000\u0b63\u0b65\u0005\u01cf\u0000\u0000\u0b64\u0b66\u0003\u00b8\\\u0000"+
		"\u0b65\u0b64\u0001\u0000\u0000\u0000\u0b65\u0b66\u0001\u0000\u0000\u0000"+
		"\u0b66\u0b67\u0001\u0000\u0000\u0000\u0b67\u0b69\u0003\u025e\u012f\u0000"+
		"\u0b68\u0b6a\u0003\u024e\u0127\u0000\u0b69\u0b68\u0001\u0000\u0000\u0000"+
		"\u0b69\u0b6a\u0001\u0000\u0000\u0000\u0b6a\u0b76\u0001\u0000\u0000\u0000"+
		"\u0b6b\u0b6c\u0005\u0297\u0000\u0000\u0b6c\u0b71\u0003\u00b4Z\u0000\u0b6d"+
		"\u0b6e\u0005\u0292\u0000\u0000\u0b6e\u0b70\u0003\u00b4Z\u0000\u0b6f\u0b6d"+
		"\u0001\u0000\u0000\u0000\u0b70\u0b73\u0001\u0000\u0000\u0000\u0b71\u0b6f"+
		"\u0001\u0000\u0000\u0000\u0b71\u0b72\u0001\u0000\u0000\u0000\u0b72\u0b74"+
		"\u0001\u0000\u0000\u0000\u0b73\u0b71\u0001\u0000\u0000\u0000\u0b74\u0b75"+
		"\u0005\u0298\u0000\u0000\u0b75\u0b77\u0001\u0000\u0000\u0000\u0b76\u0b6b"+
		"\u0001\u0000\u0000\u0000\u0b76\u0b77\u0001\u0000\u0000\u0000\u0b77\u0b78"+
		"\u0001\u0000\u0000\u0000\u0b78\u0b79\u0005\u0005\u0000\u0000\u0b79\u0b7b"+
		"\u0003\u01e4\u00f2\u0000\u0b7a\u0b7c\u0003\u0240\u0120\u0000\u0b7b\u0b7a"+
		"\u0001\u0000\u0000\u0000\u0b7b\u0b7c\u0001\u0000\u0000\u0000\u0b7c\u0b7e"+
		"\u0001\u0000\u0000\u0000\u0b7d\u0b7f\u0003\u0202\u0101\u0000\u0b7e\u0b7d"+
		"\u0001\u0000\u0000\u0000\u0b7e\u0b7f\u0001\u0000\u0000\u0000\u0b7f\u0b81"+
		"\u0001\u0000\u0000\u0000\u0b80\u0b82\u0003\u00f2y\u0000\u0b81\u0b80\u0001"+
		"\u0000\u0000\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000\u0b82\u0b84\u0001"+
		"\u0000\u0000\u0000\u0b83\u0b85\u0003\u00b6[\u0000\u0b84\u0b83\u0001\u0000"+
		"\u0000\u0000\u0b84\u0b85\u0001\u0000\u0000\u0000\u0b85\u00bb\u0001\u0000"+
		"\u0000\u0000\u0b86\u0b89\u0003\u00be_\u0000\u0b87\u0b89\u0003\u00c0`\u0000"+
		"\u0b88\u0b86\u0001\u0000\u0000\u0000\u0b88\u0b87\u0001\u0000\u0000\u0000"+
		"\u0b89\u00bd\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0005\u0018\u0000\u0000"+
		"\u0b8b\u0b8d\u0005\u01cf\u0000\u0000\u0b8c\u0b8e\u0003\u00b8\\\u0000\u0b8d"+
		"\u0b8c\u0001\u0000\u0000\u0000\u0b8d\u0b8e\u0001\u0000\u0000\u0000\u0b8e"+
		"\u0b8f\u0001\u0000\u0000\u0000\u0b8f\u0b9b\u0003\u025e\u012f\u0000\u0b90"+
		"\u0b91\u0005\u0297\u0000\u0000\u0b91\u0b96\u0003\u00b4Z\u0000\u0b92\u0b93"+
		"\u0005\u0292\u0000\u0000\u0b93\u0b95\u0003\u00b4Z\u0000\u0b94\u0b92\u0001"+
		"\u0000\u0000\u0000\u0b95\u0b98\u0001\u0000\u0000\u0000\u0b96\u0b94\u0001"+
		"\u0000\u0000\u0000\u0b96\u0b97\u0001\u0000\u0000\u0000\u0b97\u0b99\u0001"+
		"\u0000\u0000\u0000\u0b98\u0b96\u0001\u0000\u0000\u0000\u0b99\u0b9a\u0005"+
		"\u0298\u0000\u0000\u0b9a\u0b9c\u0001\u0000\u0000\u0000\u0b9b\u0b90\u0001"+
		"\u0000\u0000\u0000\u0b9b\u0b9c\u0001\u0000\u0000\u0000\u0b9c\u0b9d\u0001"+
		"\u0000\u0000\u0000\u0b9d\u0b9e\u0005\u0005\u0000\u0000\u0b9e\u0ba0\u0003"+
		"\u01e4\u00f2\u0000\u0b9f\u0ba1\u0003\u0240\u0120\u0000\u0ba0\u0b9f\u0001"+
		"\u0000\u0000\u0000\u0ba0\u0ba1\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0001"+
		"\u0000\u0000\u0000\u0ba2\u0ba4\u0003\u01fc\u00fe\u0000\u0ba3\u0ba5\u0003"+
		"\u00b6[\u0000\u0ba4\u0ba3\u0001\u0000\u0000\u0000\u0ba4\u0ba5\u0001\u0000"+
		"\u0000\u0000\u0ba5\u00bf\u0001\u0000\u0000\u0000\u0ba6\u0ba7\u0005\u0018"+
		"\u0000\u0000\u0ba7\u0ba9\u0005\u01cf\u0000\u0000\u0ba8\u0baa\u0003\u00b8"+
		"\\\u0000\u0ba9\u0ba8\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0001\u0000\u0000"+
		"\u0000\u0baa\u0bab\u0001\u0000\u0000\u0000\u0bab\u0bb7\u0003\u025e\u012f"+
		"\u0000\u0bac\u0bad\u0005\u0297\u0000\u0000\u0bad\u0bb2\u0003\u00b4Z\u0000"+
		"\u0bae\u0baf\u0005\u0292\u0000\u0000\u0baf\u0bb1\u0003\u00b4Z\u0000\u0bb0"+
		"\u0bae\u0001\u0000\u0000\u0000\u0bb1\u0bb4\u0001\u0000\u0000\u0000\u0bb2"+
		"\u0bb0\u0001\u0000\u0000\u0000\u0bb2\u0bb3\u0001\u0000\u0000\u0000\u0bb3"+
		"\u0bb5\u0001\u0000\u0000\u0000\u0bb4\u0bb2\u0001\u0000\u0000\u0000\u0bb5"+
		"\u0bb6\u0005\u0298\u0000\u0000\u0bb6\u0bb8\u0001\u0000\u0000\u0000\u0bb7"+
		"\u0bac\u0001\u0000\u0000\u0000\u0bb7\u0bb8\u0001\u0000\u0000\u0000\u0bb8"+
		"\u0bb9\u0001\u0000\u0000\u0000\u0bb9\u0bba\u0005\u0005\u0000\u0000\u0bba"+
		"\u0bbc\u0003\u01e4\u00f2\u0000\u0bbb\u0bbd\u0003\u0240\u0120\u0000\u0bbc"+
		"\u0bbb\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0001\u0000\u0000\u0000\u0bbd"+
		"\u0bbe\u0001\u0000\u0000\u0000\u0bbe\u0bbf\u0003\u01ea\u00f5\u0000\u0bbf"+
		"\u0bc1\u0003\u01f8\u00fc\u0000\u0bc0\u0bc2\u0003\u00b6[\u0000\u0bc1\u0bc0"+
		"\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0001\u0000\u0000\u0000\u0bc2\u00c1"+
		"\u0001\u0000\u0000\u0000\u0bc3\u0bc4\u0005\u0018\u0000\u0000\u0bc4\u0bc6"+
		"\u0005\u01cf\u0000\u0000\u0bc5\u0bc7\u0003\u00b8\\\u0000\u0bc6\u0bc5\u0001"+
		"\u0000\u0000\u0000\u0bc6\u0bc7\u0001\u0000\u0000\u0000\u0bc7\u0bc8\u0001"+
		"\u0000\u0000\u0000\u0bc8\u0bd4\u0003\u025e\u012f\u0000\u0bc9\u0bca\u0005"+
		"\u0297\u0000\u0000\u0bca\u0bcf\u0003\u00b4Z\u0000\u0bcb\u0bcc\u0005\u0292"+
		"\u0000\u0000\u0bcc\u0bce\u0003\u00b4Z\u0000\u0bcd\u0bcb\u0001\u0000\u0000"+
		"\u0000\u0bce\u0bd1\u0001\u0000\u0000\u0000\u0bcf\u0bcd\u0001\u0000\u0000"+
		"\u0000\u0bcf\u0bd0\u0001\u0000\u0000\u0000\u0bd0\u0bd2\u0001\u0000\u0000"+
		"\u0000\u0bd1\u0bcf\u0001\u0000\u0000\u0000\u0bd2\u0bd3\u0005\u0298\u0000"+
		"\u0000\u0bd3\u0bd5\u0001\u0000\u0000\u0000\u0bd4\u0bc9\u0001\u0000\u0000"+
		"\u0000\u0bd4\u0bd5\u0001\u0000\u0000\u0000\u0bd5\u0bd6\u0001\u0000\u0000"+
		"\u0000\u0bd6\u0be1\u0005\u0005\u0000\u0000\u0bd7\u0bd8\u0003\u00c6c\u0000"+
		"\u0bd8\u0bde\u00052\u0000\u0000\u0bd9\u0bdf\u0003\u00c8d\u0000\u0bda\u0bdc"+
		"\u0003\u0254\u012a\u0000\u0bdb\u0bdd\u0003\u0240\u0120\u0000\u0bdc\u0bdb"+
		"\u0001\u0000\u0000\u0000\u0bdc\u0bdd\u0001\u0000\u0000\u0000\u0bdd\u0bdf"+
		"\u0001\u0000\u0000\u0000\u0bde\u0bd9\u0001\u0000\u0000\u0000\u0bde\u0bda"+
		"\u0001\u0000\u0000\u0000\u0bdf\u0be2\u0001\u0000\u0000\u0000\u0be0\u0be2"+
		"\u0003\u00c8d\u0000\u0be1\u0bd7\u0001\u0000\u0000\u0000\u0be1\u0be0\u0001"+
		"\u0000\u0000\u0000\u0be2\u00c3\u0001\u0000\u0000\u0000\u0be3\u0be5\u0005"+
		"\u0297\u0000\u0000\u0be4\u0be6\u0003\u0252\u0129\u0000\u0be5\u0be4\u0001"+
		"\u0000\u0000\u0000\u0be5\u0be6\u0001\u0000\u0000\u0000\u0be6\u0beb\u0001"+
		"\u0000\u0000\u0000\u0be7\u0be8\u0005\u0292\u0000\u0000\u0be8\u0bea\u0003"+
		"\u0252\u0129\u0000\u0be9\u0be7\u0001\u0000\u0000\u0000\u0bea\u0bed\u0001"+
		"\u0000\u0000\u0000\u0beb\u0be9\u0001\u0000\u0000\u0000\u0beb\u0bec\u0001"+
		"\u0000\u0000\u0000\u0bec\u0bee\u0001\u0000\u0000\u0000\u0bed\u0beb\u0001"+
		"\u0000\u0000\u0000\u0bee\u0bf8\u0005\u0298\u0000\u0000\u0bef\u0bf4\u0003"+
		"\u0252\u0129\u0000\u0bf0\u0bf1\u0005\u0292\u0000\u0000\u0bf1\u0bf3\u0003"+
		"\u0252\u0129\u0000\u0bf2\u0bf0\u0001\u0000\u0000\u0000\u0bf3\u0bf6\u0001"+
		"\u0000\u0000\u0000\u0bf4\u0bf2\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001"+
		"\u0000\u0000\u0000\u0bf5\u0bf8\u0001\u0000\u0000\u0000\u0bf6\u0bf4\u0001"+
		"\u0000\u0000\u0000\u0bf7\u0be3\u0001\u0000\u0000\u0000\u0bf7\u0bef\u0001"+
		"\u0000\u0000\u0000\u0bf8\u00c5\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0005"+
		"o\u0000\u0000\u0bfa\u0bfb\u0003\u021a\u010d\u0000\u0bfb\u0bfc\u0005\u0292"+
		"\u0000\u0000\u0bfc\u0bfd\u0003\u0242\u0121\u0000\u0bfd\u0bfe\u0005c\u0000"+
		"\u0000\u0bfe\u0bff\u0005\u0297\u0000\u0000\u0bff\u0c00\u0005\u01ad\u0000"+
		"\u0000\u0c00\u0c01\u0005\u00b2\u0000\u0000\u0c01\u0c02\u0005\u00ba\u0000"+
		"\u0000\u0c02\u0c03\u0003\u021a\u010d\u0000\u0c03\u0c06\u0005\u0298\u0000"+
		"\u0000\u0c04\u0c05\u0005\u0005\u0000\u0000\u0c05\u0c07\u0003\u00c4b\u0000"+
		"\u0c06\u0c04\u0001\u0000\u0000\u0000\u0c06\u0c07\u0001\u0000\u0000\u0000"+
		"\u0c07\u00c7\u0001\u0000\u0000\u0000\u0c08\u0c09\u0005o\u0000\u0000\u0c09"+
		"\u0c0a\u0003\u021a\u010d\u0000\u0c0a\u0c0b\u0005\u0292\u0000\u0000\u0c0b"+
		"\u0c0c\u0003\u0242\u0121\u0000\u0c0c\u0c0d\u0005c\u0000\u0000\u0c0d\u0c0e"+
		"\u0005\u0297\u0000\u0000\u0c0e\u0c0f\u0005\u01ad\u0000\u0000\u0c0f\u0c10"+
		"\u0005\u00b2\u0000\u0000\u0c10\u0c11\u0005\u00ba\u0000\u0000\u0c11\u0c12"+
		"\u0003\u021a\u010d\u0000\u0c12\u0c15\u0005\u0298\u0000\u0000\u0c13\u0c14"+
		"\u0005\u0005\u0000\u0000\u0c14\u0c16\u0003\u00c4b\u0000\u0c15\u0c13\u0001"+
		"\u0000\u0000\u0000\u0c15\u0c16\u0001\u0000\u0000\u0000\u0c16\u0c17\u0001"+
		"\u0000\u0000\u0000\u0c17\u0c18\u00052\u0000\u0000\u0c18\u0c19\u0003\u0254"+
		"\u012a\u0000\u0c19\u00c9\u0001\u0000\u0000\u0000\u0c1a\u0c1b\u0005\u0018"+
		"\u0000\u0000\u0c1b\u0c1c\u0005\u01e8\u0000\u0000\u0c1c\u0c1d\u0005\u01c2"+
		"\u0000\u0000\u0c1d\u0c1f\u0003\u0290\u0148\u0000\u0c1e\u0c20\u0003&\u0013"+
		"\u0000\u0c1f\u0c1e\u0001\u0000\u0000\u0000\u0c20\u0c21\u0001\u0000\u0000"+
		"\u0000\u0c21\u0c1f\u0001\u0000\u0000\u0000\u0c21\u0c22\u0001\u0000\u0000"+
		"\u0000\u0c22\u00cb\u0001\u0000\u0000\u0000\u0c23\u0c24\u0005\u0018\u0000"+
		"\u0000\u0c24\u0c25\u0005\u01f0\u0000\u0000\u0c25\u0c26\u0003\u028c\u0146"+
		"\u0000\u0c26\u00cd\u0001\u0000\u0000\u0000\u0c27\u0c28\u0005\u0018\u0000"+
		"\u0000\u0c28\u0c29\u0005\u0267\u0000\u0000\u0c29\u0c2a\u0005\u01f5\u0000"+
		"\u0000\u0c2a\u0c2b\u0003\u0288\u0144\u0000\u0c2b\u0c2c\u0005\u0266\u0000"+
		"\u0000\u0c2c\u0c2d\u0003\u02ce\u0167\u0000\u0c2d\u0c2e\u0005\u0083\u0000"+
		"\u0000\u0c2e\u0c2f\u0003\u02c6\u0163\u0000\u0c2f\u00cf\u0001\u0000\u0000"+
		"\u0000\u0c30\u0c31\u0005\u0018\u0000\u0000\u0c31\u0c33\u0005n\u0000\u0000"+
		"\u0c32\u0c34\u0003\u00b8\\\u0000\u0c33\u0c32\u0001\u0000\u0000\u0000\u0c33"+
		"\u0c34\u0001\u0000\u0000\u0000\u0c34\u0c35\u0001\u0000\u0000\u0000\u0c35"+
		"\u0c38\u0003\u026e\u0137\u0000\u0c36\u0c37\u0005\u0007\u0000\u0000\u0c37"+
		"\u0c39\u0003\u02a8\u0154\u0000\u0c38\u0c36\u0001\u0000\u0000\u0000\u0c38"+
		"\u0c39\u0001\u0000\u0000\u0000\u0c39\u0c3c\u0001\u0000\u0000\u0000\u0c3a"+
		"\u0c3b\u0005$\u0000\u0000\u0c3b\u0c3d\u0003\u00d8l\u0000\u0c3c\u0c3a\u0001"+
		"\u0000\u0000\u0000\u0c3c\u0c3d\u0001\u0000\u0000\u0000\u0c3d\u00d1\u0001"+
		"\u0000\u0000\u0000\u0c3e\u0c3f\u0005\u0018\u0000\u0000\u0c3f\u0c41\u0005"+
		"\u0204\u0000\u0000\u0c40\u0c42\u0003\u00b8\\\u0000\u0c41\u0c40\u0001\u0000"+
		"\u0000\u0000\u0c41\u0c42\u0001\u0000\u0000\u0000\u0c42\u0c43\u0001\u0000"+
		"\u0000\u0000\u0c43\u0c47\u0003\u0268\u0134\u0000\u0c44\u0c45\u0005\u0151"+
		"\u0000\u0000\u0c45\u0c46\u0005\u00ba\u0000\u0000\u0c46\u0c48\u0005\u02c6"+
		"\u0000\u0000\u0c47\u0c44\u0001\u0000\u0000\u0000\u0c47\u0c48\u0001\u0000"+
		"\u0000\u0000\u0c48\u0c4d\u0001\u0000\u0000\u0000\u0c49\u0c4a\u0005\u0184"+
		"\u0000\u0000\u0c4a\u0c4e\u0005\u02c6\u0000\u0000\u0c4b\u0c4c\u0005\u018f"+
		"\u0000\u0000\u0c4c\u0c4e\u0005\u0184\u0000\u0000\u0c4d\u0c49\u0001\u0000"+
		"\u0000\u0000\u0c4d\u0c4b\u0001\u0000\u0000\u0000\u0c4d\u0c4e\u0001\u0000"+
		"\u0000\u0000\u0c4e\u0c53\u0001\u0000\u0000\u0000\u0c4f\u0c50\u0005\u0179"+
		"\u0000\u0000\u0c50\u0c54\u0005\u02c6\u0000\u0000\u0c51\u0c52\u0005\u018f"+
		"\u0000\u0000\u0c52\u0c54\u0005\u0179\u0000\u0000\u0c53\u0c4f\u0001\u0000"+
		"\u0000\u0000\u0c53\u0c51\u0001\u0000\u0000\u0000\u0c53\u0c54\u0001\u0000"+
		"\u0000\u0000\u0c54\u0c58\u0001\u0000\u0000\u0000\u0c55\u0c56\u0005\u01e9"+
		"\u0000\u0000\u0c56\u0c57\u0005\u0094\u0000\u0000\u0c57\u0c59\u0005\u02c6"+
		"\u0000\u0000\u0c58\u0c55\u0001\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000"+
		"\u0000\u0000\u0c59\u0c64\u0001\u0000\u0000\u0000\u0c5a\u0c5b\u0005\u00bf"+
		"\u0000\u0000\u0c5b\u0c65\u0005\u02c6\u0000\u0000\u0c5c\u0c5d\u0005\u018f"+
		"\u0000\u0000\u0c5d\u0c5e\u0005\u00bf\u0000\u0000\u0c5e\u0c62\u0001\u0000"+
		"\u0000\u0000\u0c5f\u0c63\u0005\u00e2\u0000\u0000\u0c60\u0c61\u0005\u018f"+
		"\u0000\u0000\u0c61\u0c63\u0005\u00e2\u0000\u0000\u0c62\u0c5f\u0001\u0000"+
		"\u0000\u0000\u0c62\u0c60\u0001\u0000\u0000\u0000\u0c63\u0c65\u0001\u0000"+
		"\u0000\u0000\u0c64\u0c5a\u0001\u0000\u0000\u0000\u0c64\u0c5c\u0001\u0000"+
		"\u0000\u0000\u0c64\u0c65\u0001\u0000\u0000\u0000\u0c65\u00d3\u0001\u0000"+
		"\u0000\u0000\u0c66\u0c67\u0005\u0018\u0000\u0000\u0c67\u0c68\u0005\u0222"+
		"\u0000\u0000\u0c68\u0c69\u0003\u02b2\u0159\u0000\u0c69\u0c6a\u0005\u0094"+
		"\u0000\u0000\u0c6a\u0c6b\u0003\u02a8\u0154\u0000\u0c6b\u00d5\u0001\u0000"+
		"\u0000\u0000\u0c6c\u0c70\u0003\u00e6s\u0000\u0c6d\u0c70\u0003\u00dam\u0000"+
		"\u0c6e\u0c70\u0003\u00e4r\u0000\u0c6f\u0c6c\u0001\u0000\u0000\u0000\u0c6f"+
		"\u0c6d\u0001\u0000\u0000\u0000\u0c6f\u0c6e\u0001\u0000\u0000\u0000\u0c70"+
		"\u00d7\u0001\u0000\u0000\u0000\u0c71\u0c73\u0007\u000b\u0000\u0000\u0c72"+
		"\u0c74\u0005n\u0000\u0000\u0c73\u0c72\u0001\u0000\u0000\u0000\u0c73\u0c74"+
		"\u0001\u0000\u0000\u0000\u0c74\u0c76\u0001\u0000\u0000\u0000\u0c75\u0c77"+
		"\u0005U\u0000\u0000\u0c76\u0c75\u0001\u0000\u0000\u0000\u0c76\u0c77\u0001"+
		"\u0000\u0000\u0000\u0c77\u0c78\u0001\u0000\u0000\u0000\u0c78\u0c79\u0005"+
		"\u01cb\u0000\u0000\u0c79\u00d9\u0001\u0000\u0000\u0000\u0c7a\u0c7b\u0005"+
		"\u0018\u0000\u0000\u0c7b\u0c7d\u0005w\u0000\u0000\u0c7c\u0c7e\u0003\u00b8"+
		"\\\u0000\u0c7d\u0c7c\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0001\u0000\u0000"+
		"\u0000\u0c7e\u0c7f\u0001\u0000\u0000\u0000\u0c7f\u0c81\u0003\u0254\u012a"+
		"\u0000\u0c80\u0c82\u0003\u00dcn\u0000\u0c81\u0c80\u0001\u0000\u0000\u0000"+
		"\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u0c84\u0001\u0000\u0000\u0000"+
		"\u0c83\u0c85\u0003\u00d8l\u0000\u0c84\u0c83\u0001\u0000\u0000\u0000\u0c84"+
		"\u0c85\u0001\u0000\u0000\u0000\u0c85\u0c86\u0001\u0000\u0000\u0000\u0c86"+
		"\u0c88\u0005\u0005\u0000\u0000\u0c87\u0c89\u0003\u024e\u0127\u0000\u0c88"+
		"\u0c87\u0001\u0000\u0000\u0000\u0c88\u0c89\u0001\u0000\u0000\u0000\u0c89"+
		"\u0c8a\u0001\u0000\u0000\u0000\u0c8a\u0c8c\u0003\u01b0\u00d8\u0000\u0c8b"+
		"\u0c8d\u0003\u00fa}\u0000\u0c8c\u0c8b\u0001\u0000\u0000\u0000\u0c8c\u0c8d"+
		"\u0001\u0000\u0000\u0000\u0c8d\u00db\u0001\u0000\u0000\u0000\u0c8e\u0c97"+
		"\u0005\u0297\u0000\u0000\u0c8f\u0c94\u0003\u00deo\u0000\u0c90\u0c91\u0005"+
		"\u0292\u0000\u0000\u0c91\u0c93\u0003\u00deo\u0000\u0c92\u0c90\u0001\u0000"+
		"\u0000\u0000\u0c93\u0c96\u0001\u0000\u0000\u0000\u0c94\u0c92\u0001\u0000"+
		"\u0000\u0000\u0c94\u0c95\u0001\u0000\u0000\u0000\u0c95\u0c98\u0001\u0000"+
		"\u0000\u0000\u0c96\u0c94\u0001\u0000\u0000\u0000\u0c97\u0c8f\u0001\u0000"+
		"\u0000\u0000\u0c97\u0c98\u0001\u0000\u0000\u0000\u0c98\u0c99\u0001\u0000"+
		"\u0000\u0000\u0c99\u0c9a\u0005\u0298\u0000\u0000\u0c9a\u00dd\u0001\u0000"+
		"\u0000\u0000\u0c9b\u0c9d\u0003\u02a6\u0153\u0000\u0c9c\u0c9e\u0003\u0208"+
		"\u0104\u0000\u0c9d\u0c9c\u0001\u0000\u0000\u0000\u0c9d\u0c9e\u0001\u0000"+
		"\u0000\u0000\u0c9e\u0ca0\u0001\u0000\u0000\u0000\u0c9f\u0ca1\u0003\u00e0"+
		"p\u0000\u0ca0\u0c9f\u0001\u0000\u0000\u0000\u0ca0\u0ca1\u0001\u0000\u0000"+
		"\u0000\u0ca1\u0ca3\u0001\u0000\u0000\u0000\u0ca2\u0ca4\u0003\u00e2q\u0000"+
		"\u0ca3\u0ca2\u0001\u0000\u0000\u0000\u0ca3\u0ca4\u0001\u0000\u0000\u0000"+
		"\u0ca4\u00df\u0001\u0000\u0000\u0000\u0ca5\u0ca6\u0005\u0099\u0000\u0000"+
		"\u0ca6\u0ca7\u0003\u02ac\u0156\u0000\u0ca7\u00e1\u0001\u0000\u0000\u0000"+
		"\u0ca8\u0ca9\u0005\u0133\u0000\u0000\u0ca9\u0caa\u0003\u00c4b\u0000\u0caa"+
		"\u00e3\u0001\u0000\u0000\u0000\u0cab\u0cac\u0005\u0018\u0000\u0000\u0cac"+
		"\u0cae\u0005w\u0000\u0000\u0cad\u0caf\u0003\u00b8\\\u0000\u0cae\u0cad"+
		"\u0001\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000\u0000\u0000\u0caf\u0cb0"+
		"\u0001\u0000\u0000\u0000\u0cb0\u0cb1\u0003\u0254\u012a\u0000\u0cb1\u0cb2"+
		"\u0005I\u0000\u0000\u0cb2\u0cb5\u0003\u0254\u012a\u0000\u0cb3\u0cb4\u0007"+
		"\f\u0000\u0000\u0cb4\u0cb6\u0005\u01d0\u0000\u0000\u0cb5\u0cb3\u0001\u0000"+
		"\u0000\u0000\u0cb5\u0cb6\u0001\u0000\u0000\u0000\u0cb6\u0cb8\u0001\u0000"+
		"\u0000\u0000\u0cb7\u0cb9\u0003\u00f0x\u0000\u0cb8\u0cb7\u0001\u0000\u0000"+
		"\u0000\u0cb8\u0cb9\u0001\u0000\u0000\u0000\u0cb9\u0cbb\u0001\u0000\u0000"+
		"\u0000\u0cba\u0cbc\u0003\u00d8l\u0000\u0cbb\u0cbc\u0001\u0000\u0000\u0000"+
		"\u0cbb\u0cba\u0001\u0000\u0000\u0000\u0cbc\u00e5\u0001\u0000\u0000\u0000"+
		"\u0cbd\u0cbe\u0005\u0018\u0000\u0000\u0cbe\u0cc0\u0005w\u0000\u0000\u0cbf"+
		"\u0cc1\u0003\u00b8\\\u0000\u0cc0\u0cbf\u0001\u0000\u0000\u0000\u0cc0\u0cc1"+
		"\u0001\u0000\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0cc3"+
		"\u0003\u0254\u012a\u0000\u0cc3\u0ccd\u0003\u00eau\u0000\u0cc4\u0cc5\u0005"+
		"\u0292\u0000\u0000\u0cc5\u0cca\u0003\u00e8t\u0000\u0cc6\u0cc7\u0005\u0292"+
		"\u0000\u0000\u0cc7\u0cc9\u0003\u00e8t\u0000\u0cc8\u0cc6\u0001\u0000\u0000"+
		"\u0000\u0cc9\u0ccc\u0001\u0000\u0000\u0000\u0cca\u0cc8\u0001\u0000\u0000"+
		"\u0000\u0cca\u0ccb\u0001\u0000\u0000\u0000\u0ccb\u0cce\u0001\u0000\u0000"+
		"\u0000\u0ccc\u0cca\u0001\u0000\u0000\u0000\u0ccd\u0cc4\u0001\u0000\u0000"+
		"\u0000\u0ccd\u0cce\u0001\u0000\u0000\u0000\u0cce\u0cd0\u0001\u0000\u0000"+
		"\u0000\u0ccf\u0cd1\u0003\u00f0x\u0000\u0cd0\u0ccf\u0001\u0000\u0000\u0000"+
		"\u0cd0\u0cd1\u0001\u0000\u0000\u0000\u0cd1\u0cd3\u0001\u0000\u0000\u0000"+
		"\u0cd2\u0cd4\u0003\u0202\u0101\u0000\u0cd3\u0cd2\u0001\u0000\u0000\u0000"+
		"\u0cd3\u0cd4\u0001\u0000\u0000\u0000\u0cd4\u0cd6\u0001\u0000\u0000\u0000"+
		"\u0cd5\u0cd7\u0003\u00f2y\u0000\u0cd6\u0cd5\u0001\u0000\u0000\u0000\u0cd6"+
		"\u0cd7\u0001\u0000\u0000\u0000\u0cd7\u0cd9\u0001\u0000\u0000\u0000\u0cd8"+
		"\u0cda\u0003\u00b6[\u0000\u0cd9\u0cd8\u0001\u0000\u0000\u0000\u0cd9\u0cda"+
		"\u0001\u0000\u0000\u0000\u0cda\u0cdc\u0001\u0000\u0000\u0000\u0cdb\u0cdd"+
		"\u0003\u0206\u0103\u0000\u0cdc\u0cdb\u0001\u0000\u0000\u0000\u0cdc\u0cdd"+
		"\u0001\u0000\u0000\u0000\u0cdd\u0cdf\u0001\u0000\u0000\u0000\u0cde\u0ce0"+
		"\u0003\u00d8l\u0000\u0cdf\u0cde\u0001\u0000\u0000\u0000\u0cdf\u0ce0\u0001"+
		"\u0000\u0000\u0000\u0ce0\u00e7\u0001\u0000\u0000\u0000\u0ce1\u0ce2\u0005"+
		"\u0016\u0000\u0000\u0ce2\u0cfd\u0003\u02be\u015f\u0000\u0ce3\u0ce4\u0005"+
		"i\u0000\u0000\u0ce4\u0ce5\u0005\u015d\u0000\u0000\u0ce5\u0ce7\u0003\u00c4"+
		"b\u0000\u0ce6\u0ce8\u0003\u02ca\u0165\u0000\u0ce7\u0ce6\u0001\u0000\u0000"+
		"\u0000\u0ce7\u0ce8\u0001\u0000\u0000\u0000\u0ce8\u0cfe\u0001\u0000\u0000"+
		"\u0000\u0ce9\u0cea\u00051\u0000\u0000\u0cea\u0ceb\u0005\u015d\u0000\u0000"+
		"\u0ceb\u0cec\u0003\u00c4b\u0000\u0cec\u0ced\u0005k\u0000\u0000\u0ced\u0cef"+
		"\u0003\u0254\u012a\u0000\u0cee\u0cf0\u0003\u00c4b\u0000\u0cef\u0cee\u0001"+
		"\u0000\u0000\u0000\u0cef\u0cf0\u0001\u0000\u0000\u0000\u0cf0\u0cfe\u0001"+
		"\u0000\u0000\u0000\u0cf1\u0cf2\u0005\u008a\u0000\u0000\u0cf2\u0cf4\u0003"+
		"\u00c4b\u0000\u0cf3\u0cf5\u0003\u02ca\u0165\u0000\u0cf4\u0cf3\u0001\u0000"+
		"\u0000\u0000\u0cf4\u0cf5\u0001\u0000\u0000\u0000\u0cf5\u0cfe\u0001\u0000"+
		"\u0000\u0000\u0cf6\u0cf7\u0005\u0013\u0000\u0000\u0cf7\u0cf8\u0005\u0297"+
		"\u0000\u0000\u0cf8\u0cf9\u0003\u0226\u0113\u0000\u0cf9\u0cfb\u0005\u0298"+
		"\u0000\u0000\u0cfa\u0cfc\u0003\u02ca\u0165\u0000\u0cfb\u0cfa\u0001\u0000"+
		"\u0000\u0000\u0cfb\u0cfc\u0001\u0000\u0000\u0000\u0cfc\u0cfe\u0001\u0000"+
		"\u0000\u0000\u0cfd\u0ce3\u0001\u0000\u0000\u0000\u0cfd\u0ce9\u0001\u0000"+
		"\u0000\u0000\u0cfd\u0cf1\u0001\u0000\u0000\u0000\u0cfd\u0cf6\u0001\u0000"+
		"\u0000\u0000\u0cfe\u00e9\u0001\u0000\u0000\u0000\u0cff\u0d08\u0005\u0297"+
		"\u0000\u0000\u0d00\u0d05\u0003\u00ecv\u0000\u0d01\u0d02\u0005\u0292\u0000"+
		"\u0000\u0d02\u0d04\u0003\u00ecv\u0000\u0d03\u0d01\u0001\u0000\u0000\u0000"+
		"\u0d04\u0d07\u0001\u0000\u0000\u0000\u0d05\u0d03\u0001\u0000\u0000\u0000"+
		"\u0d05\u0d06\u0001\u0000\u0000\u0000\u0d06\u0d09\u0001\u0000\u0000\u0000"+
		"\u0d07\u0d05\u0001\u0000\u0000\u0000\u0d08\u0d00\u0001\u0000\u0000\u0000"+
		"\u0d08\u0d09\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0001\u0000\u0000\u0000"+
		"\u0d0a\u0d0b\u0005\u0298\u0000\u0000\u0d0b\u00eb\u0001\u0000\u0000\u0000"+
		"\u0d0c\u0d0e\u0003\u02a6\u0153\u0000\u0d0d\u0d0f\u0003\u02e6\u0173\u0000"+
		"\u0d0e\u0d0d\u0001\u0000\u0000\u0000\u0d0e\u0d0f\u0001\u0000\u0000\u0000"+
		"\u0d0f\u0d13\u0001\u0000\u0000\u0000\u0d10\u0d12\u0003\u00eew\u0000\u0d11"+
		"\u0d10\u0001\u0000\u0000\u0000\u0d12\u0d15\u0001\u0000\u0000\u0000\u0d13"+
		"\u0d11\u0001\u0000\u0000\u0000\u0d13\u0d14\u0001\u0000\u0000\u0000\u0d14"+
		"\u0d17\u0001\u0000\u0000\u0000\u0d15\u0d13\u0001\u0000\u0000\u0000\u0d16"+
		"\u0d18\u0003\u0208\u0104\u0000\u0d17\u0d16\u0001\u0000\u0000\u0000\u0d17"+
		"\u0d18\u0001\u0000\u0000\u0000\u0d18\u0d1a\u0001\u0000\u0000\u0000\u0d19"+
		"\u0d1b\u0003\u00e0p\u0000\u0d1a\u0d19\u0001\u0000\u0000\u0000\u0d1a\u0d1b"+
		"\u0001\u0000\u0000\u0000\u0d1b\u00ed\u0001\u0000\u0000\u0000\u0d1c\u0d28"+
		"\u0007\r\u0000\u0000\u0d1d\u0d1e\u0005\u0297\u0000\u0000\u0d1e\u0d23\u0003"+
		"\u02c6\u0163\u0000\u0d1f\u0d20\u0005\u0292\u0000\u0000\u0d20\u0d22\u0003"+
		"\u02c6\u0163\u0000\u0d21\u0d1f\u0001\u0000\u0000\u0000\u0d22\u0d25\u0001"+
		"\u0000\u0000\u0000\u0d23\u0d21\u0001\u0000\u0000\u0000\u0d23\u0d24\u0001"+
		"\u0000\u0000\u0000\u0d24\u0d26\u0001\u0000\u0000\u0000\u0d25\u0d23\u0001"+
		"\u0000\u0000\u0000\u0d26\u0d27\u0005\u0298\u0000\u0000\u0d27\u0d29\u0001"+
		"\u0000\u0000\u0000\u0d28\u0d1d\u0001\u0000\u0000\u0000\u0d28\u0d29\u0001"+
		"\u0000\u0000\u0000\u0d29\u0d51\u0001\u0000\u0000\u0000\u0d2a\u0d2b\u0005"+
		"\u0016\u0000\u0000\u0d2b\u0d51\u0003\u02be\u015f\u0000\u0d2c\u0d2d\u0005"+
		"\u0013\u0000\u0000\u0d2d\u0d2e\u0005\u0297\u0000\u0000\u0d2e\u0d2f\u0003"+
		"\u0226\u0113\u0000\u0d2f\u0d31\u0005\u0298\u0000\u0000\u0d30\u0d32\u0003"+
		"\u02ca\u0165\u0000\u0d31\u0d30\u0001\u0000\u0000\u0000\u0d31\u0d32\u0001"+
		"\u0000\u0000\u0000\u0d32\u0d51\u0001\u0000\u0000\u0000\u0d33\u0d34\u0005"+
		"$\u0000\u0000\u0d34\u0d35\u0005\u008c\u0000\u0000\u0d35\u0d3d\u0003\u0226"+
		"\u0113\u0000\u0d36\u0d37\u0005\u0208\u0000\u0000\u0d37\u0d38\u0005\u008c"+
		"\u0000\u0000\u0d38\u0d3d\u0003\u0226\u0113\u0000\u0d39\u0d3a\u0005$\u0000"+
		"\u0000\u0d3a\u0d3b\u0005\u008c\u0000\u0000\u0d3b\u0d3d\u0003\u0226\u0113"+
		"\u0000\u0d3c\u0d33\u0001\u0000\u0000\u0000\u0d3c\u0d36\u0001\u0000\u0000"+
		"\u0000\u0d3c\u0d39\u0001\u0000\u0000\u0000\u0d3d\u0d51\u0001\u0000\u0000"+
		"\u0000\u0d3e\u0d51\u0003\u02cc\u0166\u0000\u0d3f\u0d40\u0005i\u0000\u0000"+
		"\u0d40\u0d42\u0005\u015d\u0000\u0000\u0d41\u0d43\u0003\u02ca\u0165\u0000"+
		"\u0d42\u0d41\u0001\u0000\u0000\u0000\u0d42\u0d43\u0001\u0000\u0000\u0000"+
		"\u0d43\u0d49\u0001\u0000\u0000\u0000\u0d44\u0d45\u0005k\u0000\u0000\u0d45"+
		"\u0d46\u0003\u0254\u012a\u0000\u0d46\u0d47\u0003\u00c4b\u0000\u0d47\u0d49"+
		"\u0001\u0000\u0000\u0000\u0d48\u0d3f\u0001\u0000\u0000\u0000\u0d48\u0d44"+
		"\u0001\u0000\u0000\u0000\u0d49\u0d51\u0001\u0000\u0000\u0000\u0d4a\u0d4c"+
		"\u0005\u008a\u0000\u0000\u0d4b\u0d4d\u0003\u02ca\u0165\u0000\u0d4c\u0d4b"+
		"\u0001\u0000\u0000\u0000\u0d4c\u0d4d\u0001\u0000\u0000\u0000\u0d4d\u0d51"+
		"\u0001\u0000\u0000\u0000\u0d4e\u0d4f\u0005$\u0000\u0000\u0d4f\u0d51\u0003"+
		"\u0226\u0113\u0000\u0d50\u0d1c\u0001\u0000\u0000\u0000\u0d50\u0d2a\u0001"+
		"\u0000\u0000\u0000\u0d50\u0d2c\u0001\u0000\u0000\u0000\u0d50\u0d3c\u0001"+
		"\u0000\u0000\u0000\u0d50\u0d3e\u0001\u0000\u0000\u0000\u0d50\u0d48\u0001"+
		"\u0000\u0000\u0000\u0d50\u0d4a\u0001\u0000\u0000\u0000\u0d50\u0d4e\u0001"+
		"\u0000\u0000\u0000\u0d51\u00ef\u0001\u0000\u0000\u0000\u0d52\u0d53\u0007"+
		"\u000e\u0000\u0000\u0d53\u00f1\u0001\u0000\u0000\u0000\u0d54\u0d59\u0005"+
		"\u0245\u0000\u0000\u0d55\u0d56\u0005\u0192\u0000\u0000\u0d56\u0d5a\u0003"+
		"\u02a2\u0151\u0000\u0d57\u0d58\u0005\u0001\u0000\u0000\u0d58\u0d5a\u0005"+
		"\u0193\u0000\u0000\u0d59\u0d55\u0001\u0000\u0000\u0000\u0d59\u0d57\u0001"+
		"\u0000\u0000\u0000\u0d5a\u0d6f\u0001\u0000\u0000\u0000\u0d5b\u0d5c\u0005"+
		"\u0201\u0000\u0000\u0d5c\u0d5d\u0005\u00ba\u0000\u0000\u0d5d\u0d6c\u0003"+
		"\u0226\u0113\u0000\u0d5e\u0d5f\u0005\u0001\u0000\u0000\u0d5f\u0d61\u0005"+
		"\u0193\u0000\u0000\u0d60\u0d62\u0003\u01e8\u00f4\u0000\u0d61\u0d60\u0001"+
		"\u0000\u0000\u0000\u0d61\u0d62\u0001\u0000\u0000\u0000\u0d62\u0d6d\u0001"+
		"\u0000\u0000\u0000\u0d63\u0d64\u0005\u0193\u0000\u0000\u0d64\u0d69\u0003"+
		"\u02a2\u0151\u0000\u0d65\u0d66\u0005\u0292\u0000\u0000\u0d66\u0d68\u0003"+
		"\u02a2\u0151\u0000\u0d67\u0d65\u0001\u0000\u0000\u0000\u0d68\u0d6b\u0001"+
		"\u0000\u0000\u0000\u0d69\u0d67\u0001\u0000\u0000\u0000\u0d69\u0d6a\u0001"+
		"\u0000\u0000\u0000\u0d6a\u0d6d\u0001\u0000\u0000\u0000\u0d6b\u0d69\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d5e\u0001\u0000\u0000\u0000\u0d6c\u0d63\u0001"+
		"\u0000\u0000\u0000\u0d6d\u0d6f\u0001\u0000\u0000\u0000\u0d6e\u0d54\u0001"+
		"\u0000\u0000\u0000\u0d6e\u0d5b\u0001\u0000\u0000\u0000\u0d6f\u00f3\u0001"+
		"\u0000\u0000\u0000\u0d70\u0d73\u0003\u00f6{\u0000\u0d71\u0d73\u0003\u00f8"+
		"|\u0000\u0d72\u0d70\u0001\u0000\u0000\u0000\u0d72\u0d71\u0001\u0000\u0000"+
		"\u0000\u0d73\u00f5\u0001\u0000\u0000\u0000\u0d74\u0d76\u0005\u0018\u0000"+
		"\u0000\u0d75\u0d77\u0007\u000f\u0000\u0000\u0d76\u0d75\u0001\u0000\u0000"+
		"\u0000\u0d76\u0d77\u0001\u0000\u0000\u0000\u0d77\u0d78\u0001\u0000\u0000"+
		"\u0000\u0d78\u0d79\u0007\n\u0000\u0000\u0d79\u0d7b\u0005w\u0000\u0000"+
		"\u0d7a\u0d7c\u0003\u00b8\\\u0000\u0d7b\u0d7a\u0001\u0000\u0000\u0000\u0d7b"+
		"\u0d7c\u0001\u0000\u0000\u0000\u0d7c\u0d7d\u0001\u0000\u0000\u0000\u0d7d"+
		"\u0d7e\u0003\u0254\u012a\u0000\u0d7e\u0d80\u0003\u00eau\u0000\u0d7f\u0d81"+
		"\u0003\u00e8t\u0000\u0d80\u0d7f\u0001\u0000\u0000\u0000\u0d80\u0d81\u0001"+
		"\u0000\u0000\u0000\u0d81\u0d86\u0001\u0000\u0000\u0000\u0d82\u0d83\u0005"+
		"]\u0000\u0000\u0d83\u0d84\u0005\u00cf\u0000\u0000\u0d84\u0d85\u0007\u0010"+
		"\u0000\u0000\u0d85\u0d87\u0005\u01f4\u0000\u0000\u0d86\u0d82\u0001\u0000"+
		"\u0000\u0000\u0d86\u0d87\u0001\u0000\u0000\u0000\u0d87\u0d89\u0001\u0000"+
		"\u0000\u0000\u0d88\u0d8a\u0003\u00f0x\u0000\u0d89\u0d88\u0001\u0000\u0000"+
		"\u0000\u0d89\u0d8a\u0001\u0000\u0000\u0000\u0d8a\u0d8d\u0001\u0000\u0000"+
		"\u0000\u0d8b\u0d8c\u0005\u018f\u0000\u0000\u0d8c\u0d8e\u0005\u01cf\u0000"+
		"\u0000\u0d8d\u0d8b\u0001\u0000\u0000\u0000\u0d8d\u0d8e\u0001\u0000\u0000"+
		"\u0000\u0d8e\u0d90\u0001\u0000\u0000\u0000\u0d8f\u0d91\u0003\u0202\u0101"+
		"\u0000\u0d90\u0d8f\u0001\u0000\u0000\u0000\u0d90\u0d91\u0001\u0000\u0000"+
		"\u0000\u0d91\u0d93\u0001\u0000\u0000\u0000\u0d92\u0d94\u0003\u00f2y\u0000"+
		"\u0d93\u0d92\u0001\u0000\u0000\u0000\u0d93\u0d94\u0001\u0000\u0000\u0000"+
		"\u0d94\u0d96\u0001\u0000\u0000\u0000\u0d95\u0d97\u0003\u00b6[\u0000\u0d96"+
		"\u0d95\u0001\u0000\u0000\u0000\u0d96\u0d97\u0001\u0000\u0000\u0000\u0d97"+
		"\u0d99\u0001\u0000\u0000\u0000\u0d98\u0d9a\u0003\u00d8l\u0000\u0d99\u0d98"+
		"\u0001\u0000\u0000\u0000\u0d99\u0d9a\u0001\u0000\u0000\u0000\u0d9a\u00f7"+
		"\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0005\u0018\u0000\u0000\u0d9c\u0d9d"+
		"\u0007\n\u0000\u0000\u0d9d\u0d9f\u0005w\u0000\u0000\u0d9e\u0da0\u0003"+
		"\u00b8\\\u0000\u0d9f\u0d9e\u0001\u0000\u0000\u0000\u0d9f\u0da0\u0001\u0000"+
		"\u0000\u0000\u0da0\u0da1\u0001\u0000\u0000\u0000\u0da1\u0da3\u0003\u0254"+
		"\u012a\u0000\u0da2\u0da4\u0003\u00dcn\u0000\u0da3\u0da2\u0001\u0000\u0000"+
		"\u0000\u0da3\u0da4\u0001\u0000\u0000\u0000\u0da4\u0da9\u0001\u0000\u0000"+
		"\u0000\u0da5\u0da6\u0005]\u0000\u0000\u0da6\u0da7\u0005\u00cf\u0000\u0000"+
		"\u0da7\u0da8\u0007\u0010\u0000\u0000\u0da8\u0daa\u0005\u01f4\u0000\u0000"+
		"\u0da9\u0da5\u0001\u0000\u0000\u0000\u0da9\u0daa\u0001\u0000\u0000\u0000"+
		"\u0daa\u0dac\u0001\u0000\u0000\u0000\u0dab\u0dad\u0003\u00f0x\u0000\u0dac"+
		"\u0dab\u0001\u0000\u0000\u0000\u0dac\u0dad\u0001\u0000\u0000\u0000\u0dad"+
		"\u0dae\u0001\u0000\u0000\u0000\u0dae\u0db0\u0005\u0005\u0000\u0000\u0daf"+
		"\u0db1\u0003\u024e\u0127\u0000\u0db0\u0daf\u0001\u0000\u0000\u0000\u0db0"+
		"\u0db1\u0001\u0000\u0000\u0000\u0db1\u0db3\u0001\u0000\u0000\u0000\u0db2"+
		"\u0db4\u0003\u01ae\u00d7\u0000\u0db3\u0db2\u0001\u0000\u0000\u0000\u0db3"+
		"\u0db4\u0001\u0000\u0000\u0000\u0db4\u0db5\u0001\u0000\u0000\u0000\u0db5"+
		"\u0db7\u0003\u01e6\u00f3\u0000\u0db6\u0db8\u0003\u00fa}\u0000\u0db7\u0db6"+
		"\u0001\u0000\u0000\u0000\u0db7\u0db8\u0001\u0000\u0000\u0000\u0db8\u00f9"+
		"\u0001\u0000\u0000\u0000\u0db9\u0dba\u0005)\u0000\u0000\u0dba\u0dbb\u0005"+
		"\u00ba\u0000\u0000\u0dbb\u0dc0\u0003\u00fc~\u0000\u0dbc\u0dbd\u0005\u0292"+
		"\u0000\u0000\u0dbd\u0dbf\u0003\u00fc~\u0000\u0dbe\u0dbc\u0001\u0000\u0000"+
		"\u0000\u0dbf\u0dc2\u0001\u0000\u0000\u0000\u0dc0\u0dbe\u0001\u0000\u0000"+
		"\u0000\u0dc0\u0dc1\u0001\u0000\u0000\u0000\u0dc1\u00fb\u0001\u0000\u0000"+
		"\u0000\u0dc2\u0dc0\u0001\u0000\u0000\u0000\u0dc3\u0dc5\u0003\u0252\u0129"+
		"\u0000\u0dc4\u0dc6\u0003\u00e0p\u0000\u0dc5\u0dc4\u0001\u0000\u0000\u0000"+
		"\u0dc5\u0dc6\u0001\u0000\u0000\u0000\u0dc6\u0dc8\u0001\u0000\u0000\u0000"+
		"\u0dc7\u0dc9\u0003\u0208\u0104\u0000\u0dc8\u0dc7\u0001\u0000\u0000\u0000"+
		"\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9\u00fd\u0001\u0000\u0000\u0000"+
		"\u0dca\u0dcb\u0005\u0018\u0000\u0000\u0dcb\u0dcc\u0005x\u0000\u0000\u0dcc"+
		"\u0dcd\u0005\u0152\u0000\u0000\u0dcd\u0dce\u0003\u026c\u0136\u0000\u0dce"+
		"\u0dcf\u0005]\u0000\u0000\u0dcf\u0dd0\u0003\u0254\u012a\u0000\u0dd0\u0dd1"+
		"\u0005\u0297\u0000\u0000\u0dd1\u0dd2\u0003\u02c4\u0162\u0000\u0dd2\u0dd3"+
		"\u0005\u0292\u0000\u0000\u0dd3\u0dd6\u0003\u02e6\u0173\u0000\u0dd4\u0dd5"+
		"\u0005\u0292\u0000\u0000\u0dd5\u0dd7\u0003\u00c4b\u0000\u0dd6\u0dd4\u0001"+
		"\u0000\u0000\u0000\u0dd6\u0dd7\u0001\u0000\u0000\u0000\u0dd7\u0dd8\u0001"+
		"\u0000\u0000\u0000\u0dd8\u0de2\u0005\u0298\u0000\u0000\u0dd9\u0de0\u0005"+
		"\u021d\u0000\u0000\u0dda\u0ddb\u0003\u02c4\u0162\u0000\u0ddb\u0ddc\u0005"+
		"\u0297\u0000\u0000\u0ddc\u0ddd\u0003\u02e6\u0173\u0000\u0ddd\u0dde\u0005"+
		"\u0298\u0000\u0000\u0dde\u0de1\u0001\u0000\u0000\u0000\u0ddf\u0de1\u0005"+
		"T\u0000\u0000\u0de0\u0dda\u0001\u0000\u0000\u0000\u0de0\u0ddf\u0001\u0000"+
		"\u0000\u0000\u0de1\u0de3\u0001\u0000\u0000\u0000\u0de2\u0dd9\u0001\u0000"+
		"\u0000\u0000\u0de2\u0de3\u0001\u0000\u0000\u0000\u0de3\u0dea\u0001\u0000"+
		"\u0000\u0000\u0de4\u0de5\u0005\u0231\u0000\u0000\u0de5\u0de6\u0003\u02c4"+
		"\u0162\u0000\u0de6\u0de7\u0005\u0297\u0000\u0000\u0de7\u0de8\u0003\u02e6"+
		"\u0173\u0000\u0de8\u0de9\u0005\u0298\u0000\u0000\u0de9\u0deb\u0001\u0000"+
		"\u0000\u0000\u0dea\u0de4\u0001\u0000\u0000\u0000\u0dea\u0deb\u0001\u0000"+
		"\u0000\u0000\u0deb\u00ff\u0001\u0000\u0000\u0000\u0dec\u0ded\u0005\u0018"+
		"\u0000\u0000\u0ded\u0dee\u0005\u008b\u0000\u0000\u0dee\u0df2\u0003\u02b4"+
		"\u015a\u0000\u0def\u0df1\u0003<\u001e\u0000\u0df0\u0def\u0001\u0000\u0000"+
		"\u0000\u0df1\u0df4\u0001\u0000\u0000\u0000\u0df2\u0df0\u0001\u0000\u0000"+
		"\u0000\u0df2\u0df3\u0001\u0000\u0000\u0000\u0df3\u0101\u0001\u0000\u0000"+
		"\u0000\u0df4\u0df2\u0001\u0000\u0000\u0000\u0df5\u0df8\u0005\u0018\u0000"+
		"\u0000\u0df6\u0df7\u0005_\u0000\u0000\u0df7\u0df9\u0005\u01e6\u0000\u0000"+
		"\u0df8\u0df6\u0001\u0000\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000\u0000"+
		"\u0df9\u0dfa\u0001\u0000\u0000\u0000\u0dfa\u0dfb\u0005\u0251\u0000\u0000"+
		"\u0dfb\u0dfd\u0003\u0256\u012b\u0000\u0dfc\u0dfe\u0003\u00c4b\u0000\u0dfd"+
		"\u0dfc\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe"+
		"\u0e00\u0001\u0000\u0000\u0000\u0dff\u0e01\u0003\u00d8l\u0000\u0e00\u0dff"+
		"\u0001\u0000\u0000\u0000\u0e00\u0e01\u0001\u0000\u0000\u0000\u0e01\u0e02"+
		"\u0001\u0000\u0000\u0000\u0e02\u0e03\u0005\u0005\u0000\u0000\u0e03\u0e05"+
		"\u0003\u01b0\u00d8\u0000\u0e04\u0e06\u0003\u0240\u0120\u0000\u0e05\u0e04"+
		"\u0001\u0000\u0000\u0000\u0e05\u0e06\u0001\u0000\u0000\u0000\u0e06\u0103"+
		"\u0001\u0000\u0000\u0000\u0e07\u0e09\u0005\u00ef\u0000\u0000\u0e08\u0e0a"+
		"\u0003\u024e\u0127\u0000\u0e09\u0e08\u0001\u0000\u0000\u0000\u0e09\u0e0a"+
		"\u0001\u0000\u0000\u0000\u0e0a\u0e0b\u0001\u0000\u0000\u0000\u0e0b\u0e0c"+
		"\u00052\u0000\u0000\u0e0c\u0e0e\u0003\u0254\u012a\u0000\u0e0d\u0e0f\u0003"+
		"\u0200\u0100\u0000\u0e0e\u0e0d\u0001\u0000\u0000\u0000\u0e0e\u0e0f\u0001"+
		"\u0000\u0000\u0000\u0e0f\u0105\u0001\u0000\u0000\u0000\u0e10\u0e17\u0003"+
		"\u0108\u0084\u0000\u0e11\u0e17\u0003\u0108\u0084\u0000\u0e12\u0e17\u0003"+
		"\u010c\u0086\u0000\u0e13\u0e17\u0003\u010e\u0087\u0000\u0e14\u0e17\u0003"+
		"\u0110\u0088\u0000\u0e15\u0e17\u0003\u0112\u0089\u0000\u0e16\u0e10\u0001"+
		"\u0000\u0000\u0000\u0e16\u0e11\u0001\u0000\u0000\u0000\u0e16\u0e12\u0001"+
		"\u0000\u0000\u0000\u0e16\u0e13\u0001\u0000\u0000\u0000\u0e16\u0e14\u0001"+
		"\u0000\u0000\u0000\u0e16\u0e15\u0001\u0000\u0000\u0000\u0e17\u0107\u0001"+
		"\u0000\u0000\u0000\u0e18\u0e19\u0005\u009c\u0000\u0000\u0e19\u0e1a\u0005"+
		"\u00f9\u0000\u0000\u0e1a\u0e1b\u0005\u01d2\u0000\u0000\u0e1b\u0e1c\u0003"+
		"\u02c4\u0162\u0000\u0e1c\u0109\u0001\u0000\u0000\u0000\u0e1d\u0e1e\u0005"+
		"\u0018\u0000\u0000\u0e1e\u0e1f\u0005\u00f9\u0000\u0000\u0e1f\u0e20\u0005"+
		"\u01d2\u0000\u0000\u0e20\u0e21\u0007\u0011\u0000\u0000\u0e21\u0e24\u0003"+
		"\u02c4\u0162\u0000\u0e22\u0e23\u0005\u00ce\u0000\u0000\u0e23\u0e25\u0003"+
		"\u02a8\u0154\u0000\u0e24\u0e22\u0001\u0000\u0000\u0000\u0e24\u0e25\u0001"+
		"\u0000\u0000\u0000\u0e25\u0e26\u0001\u0000\u0000\u0000\u0e26\u0e27\u0003"+
		"\u0002\u0001\u0000\u0e27\u010b\u0001\u0000\u0000\u0000\u0e28\u0e29\u0005"+
		"\u00e7\u0000\u0000\u0e29\u0e2a\u0005\u00f9\u0000\u0000\u0e2a\u0e2d\u0005"+
		"\u01d2\u0000\u0000\u0e2b\u0e2e\u0003\u02c4\u0162\u0000\u0e2c\u0e2e\u0003"+
		"\u0002\u0001\u0000\u0e2d\u0e2b\u0001\u0000\u0000\u0000\u0e2d\u0e2c\u0001"+
		"\u0000\u0000\u0000\u0e2e\u010d\u0001\u0000\u0000\u0000\u0e2f\u0e30\u0005"+
		"\u0103\u0000\u0000\u0e30\u0e31\u0005\u00f9\u0000\u0000\u0e31\u0e32\u0005"+
		"\u01d2\u0000\u0000\u0e32\u0e33\u0003\u02c4\u0162\u0000\u0e33\u010f\u0001"+
		"\u0000\u0000\u0000\u0e34\u0e35\u0005\u0130\u0000\u0000\u0e35\u0e36\u0005"+
		"\u00f9\u0000\u0000\u0e36\u0e37\u0005\u01d2\u0000\u0000\u0e37\u0e38\u0003"+
		"\u0002\u0001\u0000\u0e38\u0111\u0001\u0000\u0000\u0000\u0e39\u0e3a\u0005"+
		"\u01f9\u0000\u0000\u0e3a\u0e3b\u0005\u01d2\u0000\u0000\u0e3b\u0e3c\u0003"+
		"\u0002\u0001\u0000\u0e3c\u0113\u0001\u0000\u0000\u0000\u0e3d\u0e3e\u0005"+
		"\u00fe\u0000\u0000\u0e3e\u0e3f\u0003\u0270\u0138\u0000\u0e3f\u0115\u0001"+
		"\u0000\u0000\u0000\u0e40\u0e41\u0005\u0103\u0000\u0000\u0e41\u0e42\u0005"+
		"\u0098\u0000\u0000\u0e42\u0e43\u0005\u01c1\u0000\u0000\u0e43\u0e44\u0005"+
		"]\u0000\u0000\u0e44\u0e45\u0003\u0254\u012a\u0000\u0e45\u0e49\u00050\u0000"+
		"\u0000\u0e46\u0e47\u0005\u0015\u0000\u0000\u0e47\u0e4a\u0003\u02a6\u0153"+
		"\u0000\u0e48\u0e4a\u0005\u01f4\u0000\u0000\u0e49\u0e46\u0001\u0000\u0000"+
		"\u0000\u0e49\u0e48\u0001\u0000\u0000\u0000\u0e4a\u0117\u0001\u0000\u0000"+
		"\u0000\u0e4b\u0e4c\u0005\u0103\u0000\u0000\u0e4c\u0e4d\u0005\u00a1\u0000"+
		"\u0000\u0e4d\u0e4f\u0005\u012d\u0000\u0000\u0e4e\u0e50\u0003\u00b8\\\u0000"+
		"\u0e4f\u0e4e\u0001\u0000\u0000\u0000\u0e4f\u0e50\u0001\u0000\u0000\u0000"+
		"\u0e50\u0e51\u0001\u0000\u0000\u0000\u0e51\u0e52\u0003\u0264\u0132\u0000"+
		"\u0e52\u0e53\u0003\u00aeW\u0000\u0e53\u0119\u0001\u0000\u0000\u0000\u0e54"+
		"\u0e55\u0005\u0103\u0000\u0000\u0e55\u0e57\u0005\u00ac\u0000\u0000\u0e56"+
		"\u0e58\u0003\u00b8\\\u0000\u0e57\u0e56\u0001\u0000\u0000\u0000\u0e57\u0e58"+
		"\u0001\u0000\u0000\u0000\u0e58\u0e59\u0001\u0000\u0000\u0000\u0e59\u0e5b"+
		"\u0003\u02bc\u015e\u0000\u0e5a\u0e5c\u0005\u00c1\u0000\u0000\u0e5b\u0e5a"+
		"\u0001\u0000\u0000\u0000\u0e5b\u0e5c\u0001\u0000\u0000\u0000\u0e5c\u011b"+
		"\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0005\u0103\u0000\u0000\u0e5e\u0e60"+
		"\u0005\u0289\u0000\u0000\u0e5f\u0e61\u0003\u00b8\\\u0000\u0e60\u0e5f\u0001"+
		"\u0000\u0000\u0000\u0e60\u0e61\u0001\u0000\u0000\u0000\u0e61\u0e62\u0001"+
		"\u0000\u0000\u0000\u0e62\u0e67\u0003\u028a\u0145\u0000\u0e63\u0e64\u0005"+
		"\u0292\u0000\u0000\u0e64\u0e66\u0003\u028a\u0145\u0000\u0e65\u0e63\u0001"+
		"\u0000\u0000\u0000\u0e66\u0e69\u0001\u0000\u0000\u0000\u0e67\u0e65\u0001"+
		"\u0000\u0000\u0000\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u0e6b\u0001"+
		"\u0000\u0000\u0000\u0e69\u0e67\u0001\u0000\u0000\u0000\u0e6a\u0e6c\u0005"+
		"\u00c1\u0000\u0000\u0e6b\u0e6a\u0001\u0000\u0000\u0000\u0e6b\u0e6c\u0001"+
		"\u0000\u0000\u0000\u0e6c\u011d\u0001\u0000\u0000\u0000\u0e6d\u0e6e\u0005"+
		"\u0103\u0000\u0000\u0e6e\u0e6f\u0005\u011e\u0000\u0000\u0e6f\u0e71\u0005"+
		"5\u0000\u0000\u0e70\u0e72\u0003\u00b8\\\u0000\u0e71\u0e70\u0001\u0000"+
		"\u0000\u0000\u0e71\u0e72\u0001\u0000\u0000\u0000\u0e72\u0e73\u0001\u0000"+
		"\u0000\u0000\u0e73\u0e74\u0003\u02ba\u015d\u0000\u0e74\u011f\u0001\u0000"+
		"\u0000\u0000\u0e75\u0e76\u0005\u0103\u0000\u0000\u0e76\u0e78\u0005\u012d"+
		"\u0000\u0000\u0e77\u0e79\u0003\u00b8\\\u0000\u0e78\u0e77\u0001\u0000\u0000"+
		"\u0000\u0e78\u0e79\u0001\u0000\u0000\u0000\u0e79\u0e7a\u0001\u0000\u0000"+
		"\u0000\u0e7a\u0e7b\u0003\u0264\u0132\u0000\u0e7b\u0e7c\u0003\u00aeW\u0000"+
		"\u0e7c\u0121\u0001\u0000\u0000\u0000\u0e7d\u0e7e\u0005\u0103\u0000\u0000"+
		"\u0e7e\u0e7f\u0005\u0213\u0000\u0000\u0e7f\u0e80\u0003\u0258\u012c\u0000"+
		"\u0e80\u0e81\u0005\u0297\u0000\u0000\u0e81\u0e82\u0005\u0298\u0000\u0000"+
		"\u0e82\u0123\u0001\u0000\u0000\u0000\u0e83\u0e84\u0005\u0103\u0000\u0000"+
		"\u0e84\u0e85\u0005\u0123\u0000\u0000\u0e85\u0e86\u0003\u025a\u012d\u0000"+
		"\u0e86\u0e87\u0005\u0297\u0000\u0000\u0e87\u0e88\u0005\u0298\u0000\u0000"+
		"\u0e88\u0125\u0001\u0000\u0000\u0000\u0e89\u0e8a\u0005\u0103\u0000\u0000"+
		"\u0e8a\u0e8b\u0005\u01ab\u0000\u0000\u0e8b\u0e8c\u0003\u025c\u012e\u0000"+
		"\u0e8c\u0e8d\u0005\u0297\u0000\u0000\u0e8d\u0e8e\u0005\u0298\u0000\u0000"+
		"\u0e8e\u0127\u0001\u0000\u0000\u0000\u0e8f\u0e90\u0005\u0103\u0000\u0000"+
		"\u0e90\u0e92\u0005\u0186\u0000\u0000\u0e91\u0e93\u0003\u00b8\\\u0000\u0e92"+
		"\u0e91\u0001\u0000\u0000\u0000\u0e92\u0e93\u0001\u0000\u0000\u0000\u0e93"+
		"\u0e94\u0001\u0000\u0000\u0000\u0e94\u0e99\u0003\u026a\u0135\u0000\u0e95"+
		"\u0e96\u0005\u0292\u0000\u0000\u0e96\u0e98\u0003\u026a\u0135\u0000\u0e97"+
		"\u0e95\u0001\u0000\u0000\u0000\u0e98\u0e9b\u0001\u0000\u0000\u0000\u0e99"+
		"\u0e97\u0001\u0000\u0000\u0000\u0e99\u0e9a\u0001\u0000\u0000\u0000\u0e9a"+
		"\u0129\u0001\u0000\u0000\u0000\u0e9b\u0e99\u0001\u0000\u0000\u0000\u0e9c"+
		"\u0e9d\u0005\u0103\u0000\u0000\u0e9d\u0e9f\u0005\u0166\u0000\u0000\u0e9e"+
		"\u0ea0\u0003\u00b8\\\u0000\u0e9f\u0e9e\u0001\u0000\u0000\u0000\u0e9f\u0ea0"+
		"\u0001\u0000\u0000\u0000\u0ea0\u0ea1\u0001\u0000\u0000\u0000\u0ea1\u0ea3"+
		"\u0003\u0266\u0133\u0000\u0ea2\u0ea4\u0005\u00c1\u0000\u0000\u0ea3\u0ea2"+
		"\u0001\u0000\u0000\u0000\u0ea3\u0ea4\u0001\u0000\u0000\u0000\u0ea4\u012b"+
		"\u0001\u0000\u0000\u0000\u0ea5\u0ea6\u0005\u0103\u0000\u0000\u0ea6\u0ea7"+
		"\u0005\u0168\u0000\u0000\u0ea7\u0ea8\u0005\u0280\u0000\u0000\u0ea8\u0ea9"+
		"\u00055\u0000\u0000\u0ea9\u0eab\u0003\u0284\u0142\u0000\u0eaa\u0eac\u0005"+
		"\u00c1\u0000\u0000\u0eab\u0eaa\u0001\u0000\u0000\u0000\u0eab\u0eac\u0001"+
		"\u0000\u0000\u0000\u0eac\u012d\u0001\u0000\u0000\u0000\u0ead\u0eae\u0005"+
		"\u0103\u0000\u0000\u0eae\u0eaf\u0005\u0168\u0000\u0000\u0eaf\u0eb0\u0005"+
		"\u018d\u0000\u0000\u0eb0\u0eb1\u0005\u027f\u0000\u0000\u0eb1\u0eb3\u0003"+
		"\u0286\u0143\u0000\u0eb2\u0eb4\u0005\u00c1\u0000\u0000\u0eb3\u0eb2\u0001"+
		"\u0000\u0000\u0000\u0eb3\u0eb4\u0001\u0000\u0000\u0000\u0eb4\u012f\u0001"+
		"\u0000\u0000\u0000\u0eb5\u0eb6\u0005\u0103\u0000\u0000\u0eb6\u0eb7\u0005"+
		"\u018d\u0000\u0000\u0eb7\u0eb9\u0005\u0158\u0000\u0000\u0eb8\u0eba\u0003"+
		"\u00b8\\\u0000\u0eb9\u0eb8\u0001\u0000\u0000\u0000\u0eb9\u0eba\u0001\u0000"+
		"\u0000\u0000\u0eba\u0ebb\u0001\u0000\u0000\u0000\u0ebb\u0ebd\u0003\u02c0"+
		"\u0160\u0000\u0ebc\u0ebe\u0005\u00c1\u0000\u0000\u0ebd\u0ebc\u0001\u0000"+
		"\u0000\u0000\u0ebd\u0ebe\u0001\u0000\u0000\u0000\u0ebe\u0131\u0001\u0000"+
		"\u0000\u0000\u0ebf\u0ec0\u0005\u0103\u0000\u0000\u0ec0\u0ec2\u0005\u0195"+
		"\u0000\u0000\u0ec1\u0ec3\u0003\u00b8\\\u0000\u0ec2\u0ec1\u0001\u0000\u0000"+
		"\u0000\u0ec2\u0ec3\u0001\u0000\u0000\u0000\u0ec3\u0ec4\u0001\u0000\u0000"+
		"\u0000\u0ec4\u0ec5\u0003\u027a\u013d\u0000\u0ec5\u0133\u0001\u0000\u0000"+
		"\u0000\u0ec6\u0ec7\u0005\u0103\u0000\u0000\u0ec7\u0ec9\u0005\u01cd\u0000"+
		"\u0000\u0ec8\u0eca\u0003\u00b8\\\u0000\u0ec9\u0ec8\u0001\u0000\u0000\u0000"+
		"\u0ec9\u0eca\u0001\u0000\u0000\u0000\u0eca\u0ecb\u0001\u0000\u0000\u0000"+
		"\u0ecb\u0ecc\u0003\u0260\u0130\u0000\u0ecc\u0ecd\u0003\u00aeW\u0000\u0ecd"+
		"\u0135\u0001\u0000\u0000\u0000\u0ece\u0ecf\u0005\u0103\u0000\u0000\u0ecf"+
		"\u0ed1\u0005\u01ce\u0000\u0000\u0ed0\u0ed2\u0003\u00b8\\\u0000\u0ed1\u0ed0"+
		"\u0001\u0000\u0000\u0000\u0ed1\u0ed2\u0001\u0000\u0000\u0000\u0ed2\u0ed3"+
		"\u0001\u0000\u0000\u0000\u0ed3\u0ed8\u0003\u02c2\u0161\u0000\u0ed4\u0ed5"+
		"\u0005\u0292\u0000\u0000\u0ed5\u0ed7\u0003\u02c2\u0161\u0000\u0ed6\u0ed4"+
		"\u0001\u0000\u0000\u0000\u0ed7\u0eda\u0001\u0000\u0000\u0000\u0ed8\u0ed6"+
		"\u0001\u0000\u0000\u0000\u0ed8\u0ed9\u0001\u0000\u0000\u0000\u0ed9\u0edc"+
		"\u0001\u0000\u0000\u0000\u0eda\u0ed8\u0001\u0000\u0000\u0000\u0edb\u0edd"+
		"\u0005\u00c1\u0000\u0000\u0edc\u0edb\u0001\u0000\u0000\u0000\u0edc\u0edd"+
		"\u0001\u0000\u0000\u0000\u0edd\u0137\u0001\u0000\u0000\u0000\u0ede\u0edf"+
		"\u0005\u0103\u0000\u0000\u0edf\u0ee1\u0005\u01cf\u0000\u0000\u0ee0\u0ee2"+
		"\u0003\u00b8\\\u0000\u0ee1\u0ee0\u0001\u0000\u0000\u0000\u0ee1\u0ee2\u0001"+
		"\u0000\u0000\u0000\u0ee2\u0ee3\u0001\u0000\u0000\u0000\u0ee3\u0ee8\u0003"+
		"\u025e\u012f\u0000\u0ee4\u0ee5\u0005\u0292\u0000\u0000\u0ee5\u0ee7\u0003"+
		"\u025e\u012f\u0000\u0ee6\u0ee4\u0001\u0000\u0000\u0000\u0ee7\u0eea\u0001"+
		"\u0000\u0000\u0000\u0ee8\u0ee6\u0001\u0000\u0000\u0000\u0ee8\u0ee9\u0001"+
		"\u0000\u0000\u0000\u0ee9\u0eec\u0001\u0000\u0000\u0000\u0eea\u0ee8\u0001"+
		"\u0000\u0000\u0000\u0eeb\u0eed\u0007\u0002\u0000\u0000\u0eec\u0eeb\u0001"+
		"\u0000\u0000\u0000\u0eec\u0eed\u0001\u0000\u0000\u0000\u0eed\u0139\u0001"+
		"\u0000\u0000\u0000\u0eee\u0eef\u0005\u0103\u0000\u0000\u0eef\u0ef0\u0005"+
		"\u01e8\u0000\u0000\u0ef0\u0ef1\u0005\u01c2\u0000\u0000\u0ef1\u0ef2\u0003"+
		"\u0290\u0148\u0000\u0ef2\u013b\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0005"+
		"\u0103\u0000\u0000\u0ef4\u0ef6\u0005\u01f0\u0000\u0000\u0ef5\u0ef7\u0003"+
		"\u00b8\\\u0000\u0ef6\u0ef5\u0001\u0000\u0000\u0000\u0ef6\u0ef7\u0001\u0000"+
		"\u0000\u0000\u0ef7\u0ef8\u0001\u0000\u0000\u0000\u0ef8\u0efd\u0003\u028c"+
		"\u0146\u0000\u0ef9\u0efa\u0005\u0292\u0000\u0000\u0efa\u0efc\u0003\u028c"+
		"\u0146\u0000\u0efb\u0ef9\u0001\u0000\u0000\u0000\u0efc\u0eff\u0001\u0000"+
		"\u0000\u0000\u0efd\u0efb\u0001\u0000\u0000\u0000\u0efd\u0efe\u0001\u0000"+
		"\u0000\u0000\u0efe\u0f01\u0001\u0000\u0000\u0000\u0eff\u0efd\u0001\u0000"+
		"\u0000\u0000\u0f00\u0f02\u0005\u00c1\u0000\u0000\u0f01\u0f00\u0001\u0000"+
		"\u0000\u0000\u0f01\u0f02\u0001\u0000\u0000\u0000\u0f02\u013d\u0001\u0000"+
		"\u0000\u0000\u0f03\u0f04\u0005\u0103\u0000\u0000\u0f04\u0f05\u0005\u0267"+
		"\u0000\u0000\u0f05\u0f06\u0005\u01f5\u0000\u0000\u0f06\u0f07\u0003\u0288"+
		"\u0144\u0000\u0f07\u013f\u0001\u0000\u0000\u0000\u0f08\u0f09\u0005\u0103"+
		"\u0000\u0000\u0f09\u0f0b\u0005n\u0000\u0000\u0f0a\u0f0c\u0003\u00b8\\"+
		"\u0000\u0f0b\u0f0a\u0001\u0000\u0000\u0000\u0f0b\u0f0c\u0001\u0000\u0000"+
		"\u0000\u0f0c\u0f0d\u0001\u0000\u0000\u0000\u0f0d\u0f12\u0003\u026e\u0137"+
		"\u0000\u0f0e\u0f0f\u0005\u0292\u0000\u0000\u0f0f\u0f11\u0003\u026e\u0137"+
		"\u0000\u0f10\u0f0e\u0001\u0000\u0000\u0000\u0f11\u0f14\u0001\u0000\u0000"+
		"\u0000\u0f12\u0f10\u0001\u0000\u0000\u0000\u0f12\u0f13\u0001\u0000\u0000"+
		"\u0000\u0f13\u0f16\u0001\u0000\u0000\u0000\u0f14\u0f12\u0001\u0000\u0000"+
		"\u0000\u0f15\u0f17\u0005\u00c1\u0000\u0000\u0f16\u0f15\u0001\u0000\u0000"+
		"\u0000\u0f16\u0f17\u0001\u0000\u0000\u0000\u0f17\u0141\u0001\u0000\u0000"+
		"\u0000\u0f18\u0f19\u0005\u0103\u0000\u0000\u0f19\u0f1b\u0005\u0204\u0000"+
		"\u0000\u0f1a\u0f1c\u0003\u00b8\\\u0000\u0f1b\u0f1a\u0001\u0000\u0000\u0000"+
		"\u0f1b\u0f1c\u0001\u0000\u0000\u0000\u0f1c\u0f1d\u0001\u0000\u0000\u0000"+
		"\u0f1d\u0f22\u0003\u0268\u0134\u0000\u0f1e\u0f1f\u0005\u0292\u0000\u0000"+
		"\u0f1f\u0f21\u0003\u0268\u0134\u0000\u0f20\u0f1e\u0001\u0000\u0000\u0000"+
		"\u0f21\u0f24\u0001\u0000\u0000\u0000\u0f22\u0f20\u0001\u0000\u0000\u0000"+
		"\u0f22\u0f23\u0001\u0000\u0000\u0000\u0f23\u0f26\u0001\u0000\u0000\u0000"+
		"\u0f24\u0f22\u0001\u0000\u0000\u0000\u0f25\u0f27\u0007\u0002\u0000\u0000"+
		"\u0f26\u0f25\u0001\u0000\u0000\u0000\u0f26\u0f27\u0001\u0000\u0000\u0000"+
		"\u0f27\u0143\u0001\u0000\u0000\u0000\u0f28\u0f29\u0005\u0103\u0000\u0000"+
		"\u0f29\u0f2b\u0005\u0222\u0000\u0000\u0f2a\u0f2c\u0003\u00b8\\\u0000\u0f2b"+
		"\u0f2a\u0001\u0000\u0000\u0000\u0f2b\u0f2c\u0001\u0000\u0000\u0000\u0f2c"+
		"\u0f2d\u0001\u0000\u0000\u0000\u0f2d\u0f2f\u0003\u02b2\u0159\u0000\u0f2e"+
		"\u0f30\u0005\u00c1\u0000\u0000\u0f2f\u0f2e\u0001\u0000\u0000\u0000\u0f2f"+
		"\u0f30\u0001\u0000\u0000\u0000\u0f30\u0145\u0001\u0000\u0000\u0000\u0f31"+
		"\u0f32\u0005\u0103\u0000\u0000\u0f32\u0f34\u0005w\u0000\u0000\u0f33\u0f35"+
		"\u0003\u00b8\\\u0000\u0f34\u0f33\u0001\u0000\u0000\u0000\u0f34\u0f35\u0001"+
		"\u0000\u0000\u0000\u0f35\u0f36\u0001\u0000\u0000\u0000\u0f36\u0f3b\u0003"+
		"\u0254\u012a\u0000\u0f37\u0f38\u0005\u0292\u0000\u0000\u0f38\u0f3a\u0003"+
		"\u0254\u012a\u0000\u0f39\u0f37\u0001\u0000\u0000\u0000\u0f3a\u0f3d\u0001"+
		"\u0000\u0000\u0000\u0f3b\u0f39\u0001\u0000\u0000\u0000\u0f3b\u0f3c\u0001"+
		"\u0000\u0000\u0000\u0f3c\u0f3f\u0001\u0000\u0000\u0000\u0f3d\u0f3b\u0001"+
		"\u0000\u0000\u0000\u0f3e\u0f40\u0005\u00c1\u0000\u0000\u0f3f\u0f3e\u0001"+
		"\u0000\u0000\u0000\u0f3f\u0f40\u0001\u0000\u0000\u0000\u0f40\u0147\u0001"+
		"\u0000\u0000\u0000\u0f41\u0f42\u0005\u0103\u0000\u0000\u0f42\u0f43\u0005"+
		"x\u0000\u0000\u0f43\u0f45\u0005\u0152\u0000\u0000\u0f44\u0f46\u0003\u00b8"+
		"\\\u0000\u0f45\u0f44\u0001\u0000\u0000\u0000\u0f45\u0f46\u0001\u0000\u0000"+
		"\u0000\u0f46\u0f47\u0001\u0000\u0000\u0000\u0f47\u0f48\u0003\u026c\u0136"+
		"\u0000\u0f48\u0149\u0001\u0000\u0000\u0000\u0f49\u0f4a\u0005\u0103\u0000"+
		"\u0000\u0f4a\u0f4b\u0005\u0234\u0000\u0000\u0f4b\u0f4d\u0005\u012d\u0000"+
		"\u0000\u0f4c\u0f4e\u0003\u00b8\\\u0000\u0f4d\u0f4c\u0001\u0000\u0000\u0000"+
		"\u0f4d\u0f4e\u0001\u0000\u0000\u0000\u0f4e\u0f4f\u0001\u0000\u0000\u0000"+
		"\u0f4f\u0f50\u0003\u0264\u0132\u0000\u0f50\u0f51\u0003\u00aeW\u0000\u0f51"+
		"\u014b\u0001\u0000\u0000\u0000\u0f52\u0f53\u0005\u0103\u0000\u0000\u0f53"+
		"\u0f55\u0005\u008b\u0000\u0000\u0f54\u0f56\u0003\u00b8\\\u0000\u0f55\u0f54"+
		"\u0001\u0000\u0000\u0000\u0f55\u0f56\u0001\u0000\u0000\u0000\u0f56\u0f57"+
		"\u0001\u0000\u0000\u0000\u0f57\u0f5c\u0003\u02b4\u015a\u0000\u0f58\u0f59"+
		"\u0005\u0292\u0000\u0000\u0f59\u0f5b\u0003\u02b4\u015a\u0000\u0f5a\u0f58"+
		"\u0001\u0000\u0000\u0000\u0f5b\u0f5e\u0001\u0000\u0000\u0000\u0f5c\u0f5a"+
		"\u0001\u0000\u0000\u0000\u0f5c\u0f5d\u0001\u0000\u0000\u0000\u0f5d\u0f60"+
		"\u0001\u0000\u0000\u0000\u0f5e\u0f5c\u0001\u0000\u0000\u0000\u0f5f\u0f61"+
		"\u0005\u00c1\u0000\u0000\u0f60\u0f5f\u0001\u0000\u0000\u0000\u0f60\u0f61"+
		"\u0001\u0000\u0000\u0000\u0f61\u014d\u0001\u0000\u0000\u0000\u0f62\u0f63"+
		"\u0005\u0103\u0000\u0000\u0f63\u0f65\u0005\u0251\u0000\u0000\u0f64\u0f66"+
		"\u0003\u00b8\\\u0000\u0f65\u0f64\u0001\u0000\u0000\u0000\u0f65\u0f66\u0001"+
		"\u0000\u0000\u0000\u0f66\u0f67\u0001\u0000\u0000\u0000\u0f67\u0f6c\u0003"+
		"\u0256\u012b\u0000\u0f68\u0f69\u0005\u0292\u0000\u0000\u0f69\u0f6b\u0003"+
		"\u0256\u012b\u0000\u0f6a\u0f68\u0001\u0000\u0000\u0000\u0f6b\u0f6e\u0001"+
		"\u0000\u0000\u0000\u0f6c\u0f6a\u0001\u0000\u0000\u0000\u0f6c\u0f6d\u0001"+
		"\u0000\u0000\u0000\u0f6d\u014f\u0001\u0000\u0000\u0000\u0f6e\u0f6c\u0001"+
		"\u0000\u0000\u0000\u0f6f\u0f71\u0005*\u0000\u0000\u0f70\u0f72\u0007\u0005"+
		"\u0000\u0000\u0f71\u0f70\u0001\u0000\u0000\u0000\u0f71\u0f72\u0001\u0000"+
		"\u0000\u0000\u0f72\u0151\u0001\u0000\u0000\u0000\u0f73\u0f75\u0005\u011a"+
		"\u0000\u0000\u0f74\u0f76\u0003\u024e\u0127\u0000\u0f75\u0f74\u0001\u0000"+
		"\u0000\u0000\u0f75\u0f76\u0001\u0000\u0000\u0000\u0f76\u0f78\u0001\u0000"+
		"\u0000\u0000\u0f77\u0f79\u0007\u0012\u0000\u0000\u0f78\u0f77\u0001\u0000"+
		"\u0000\u0000\u0f78\u0f79\u0001\u0000\u0000\u0000\u0f79\u0f7a\u0001\u0000"+
		"\u0000\u0000\u0f7a\u0f7b\u0003\u0002\u0001\u0000\u0f7b\u0153\u0001\u0000"+
		"\u0000\u0000\u0f7c\u0f7d\u0005\u011b\u0000\u0000\u0f7d\u0f7e\u0005\u0083"+
		"\u0000\u0000\u0f7e\u0f7f\u0005\u01aa\u0000\u0000\u0f7f\u0f80\u0005\u0297"+
		"\u0000\u0000\u0f80\u0f81\u0005\u025f\u0000\u0000\u0f81\u0f82\u0005\u02a2"+
		"\u0000\u0000\u0f82\u0f87\u0003f3\u0000\u0f83\u0f84\u0005\u0292\u0000\u0000"+
		"\u0f84\u0f85\u0005\u0261\u0000\u0000\u0f85\u0f86\u0005\u02a2\u0000\u0000"+
		"\u0f86\u0f88\u0003\u02a8\u0154\u0000\u0f87\u0f83\u0001\u0000\u0000\u0000"+
		"\u0f87\u0f88\u0001\u0000\u0000\u0000\u0f88\u0f8d\u0001\u0000\u0000\u0000"+
		"\u0f89\u0f8a\u0005\u0292\u0000\u0000\u0f8a\u0f8b\u0005\u0260\u0000\u0000"+
		"\u0f8b\u0f8c\u0005\u02a2\u0000\u0000\u0f8c\u0f8e\u0003\u02a8\u0154\u0000"+
		"\u0f8d\u0f89\u0001\u0000\u0000\u0000\u0f8d\u0f8e\u0001\u0000\u0000\u0000"+
		"\u0f8e\u0f93\u0001\u0000\u0000\u0000\u0f8f\u0f90\u0005\u0292\u0000\u0000"+
		"\u0f90\u0f91\u0005\u0262\u0000\u0000\u0f91\u0f92\u0005\u02a2\u0000\u0000"+
		"\u0f92\u0f94\u0003\u02a8\u0154\u0000\u0f93\u0f8f\u0001\u0000\u0000\u0000"+
		"\u0f93\u0f94\u0001\u0000\u0000\u0000\u0f94\u0f99\u0001\u0000\u0000\u0000"+
		"\u0f95\u0f96\u0005\u0292\u0000\u0000\u0f96\u0f97\u0005\u0263\u0000\u0000"+
		"\u0f97\u0f98\u0005\u02a2\u0000\u0000\u0f98\u0f9a\u0003\u02a8\u0154\u0000"+
		"\u0f99\u0f95\u0001\u0000\u0000\u0000\u0f99\u0f9a\u0001\u0000\u0000\u0000"+
		"\u0f9a\u0f9f\u0001\u0000\u0000\u0000\u0f9b\u0f9c\u0005\u0292\u0000\u0000"+
		"\u0f9c\u0f9d\u0005\u0264\u0000\u0000\u0f9d\u0f9e\u0005\u02a2\u0000\u0000"+
		"\u0f9e\u0fa0\u0003\u02a8\u0154\u0000\u0f9f\u0f9b\u0001\u0000\u0000\u0000"+
		"\u0f9f\u0fa0\u0001\u0000\u0000\u0000\u0fa0\u0fa1\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0fa3\u0005\u0298\u0000\u0000\u0fa2\u0fa4\u0003\u01f8\u00fc\u0000"+
		"\u0fa3\u0fa2\u0001\u0000\u0000\u0000\u0fa3\u0fa4\u0001\u0000\u0000\u0000"+
		"\u0fa4\u0fa5\u0001\u0000\u0000\u0000\u0fa5\u0fa6\u0005\u0005\u0000\u0000"+
		"\u0fa6\u0fa7\u0003\u01b0\u00d8\u0000\u0fa7\u0155\u0001\u0000\u0000\u0000"+
		"\u0fa8\u0fa9\u0005\u011b\u0000\u0000\u0fa9\u0faa\u0005\u0083\u0000\u0000"+
		"\u0faa\u0fab\u0005\u0250\u0000\u0000\u0fab\u0fad\u0003\u0254\u012a\u0000"+
		"\u0fac\u0fae\u0003\u00c4b\u0000\u0fad\u0fac\u0001\u0000\u0000\u0000\u0fad"+
		"\u0fae\u0001\u0000\u0000\u0000\u0fae\u0fb6\u0001\u0000\u0000\u0000\u0faf"+
		"\u0fb0\u0005\u0005\u0000\u0000\u0fb0\u0fb7\u0003\u01b0\u00d8\u0000\u0fb1"+
		"\u0fb2\u00052\u0000\u0000\u0fb2\u0fb4\u0003\u0254\u012a\u0000\u0fb3\u0fb5"+
		"\u0003\u00c4b\u0000\u0fb4\u0fb3\u0001\u0000\u0000\u0000\u0fb4\u0fb5\u0001"+
		"\u0000\u0000\u0000\u0fb5\u0fb7\u0001\u0000\u0000\u0000\u0fb6\u0faf\u0001"+
		"\u0000\u0000\u0000\u0fb6\u0fb1\u0001\u0000\u0000\u0000\u0fb7\u0157\u0001"+
		"\u0000\u0000\u0000\u0fb8\u0fc6\u0003\u0174\u00ba\u0000\u0fb9\u0fc6\u0003"+
		"\u0172\u00b9\u0000\u0fba\u0fc6\u0003\u0170\u00b8\u0000\u0fbb\u0fc6\u0003"+
		"\u016e\u00b7\u0000\u0fbc\u0fc6\u0003\u016c\u00b6\u0000\u0fbd\u0fc6\u0003"+
		"\u016a\u00b5\u0000\u0fbe\u0fc6\u0003\u0164\u00b2\u0000\u0fbf\u0fc6\u0003"+
		"\u0162\u00b1\u0000\u0fc0\u0fc6\u0003\u0160\u00b0\u0000\u0fc1\u0fc6\u0003"+
		"\u015e\u00af\u0000\u0fc2\u0fc6\u0003\u015c\u00ae\u0000\u0fc3\u0fc6\u0003"+
		"\u015a\u00ad\u0000\u0fc4\u0fc6\u0003\u0168\u00b4\u0000\u0fc5\u0fb8\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fb9\u0001\u0000\u0000\u0000\u0fc5\u0fba\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fbb\u0001\u0000\u0000\u0000\u0fc5\u0fbc\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fbd\u0001\u0000\u0000\u0000\u0fc5\u0fbe\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fbf\u0001\u0000\u0000\u0000\u0fc5\u0fc0\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fc1\u0001\u0000\u0000\u0000\u0fc5\u0fc2\u0001"+
		"\u0000\u0000\u0000\u0fc5\u0fc3\u0001\u0000\u0000\u0000\u0fc5\u0fc4\u0001"+
		"\u0000\u0000\u0000\u0fc6\u0159\u0001\u0000\u0000\u0000\u0fc7\u0fca\u0005"+
		"4\u0000\u0000\u0fc8\u0fcb\u0005o\u0000\u0000\u0fc9\u0fcb\u0003\u00d8l"+
		"\u0000\u0fca\u0fc8\u0001\u0000\u0000\u0000\u0fca\u0fc9\u0001\u0000\u0000"+
		"\u0000\u0fcb\u0fcc\u0001\u0000\u0000\u0000\u0fcc\u0fcd\u0005]\u0000\u0000"+
		"\u0fcd\u0fd2\u0003\u0254\u012a\u0000\u0fce\u0fcf\u0005\u0292\u0000\u0000"+
		"\u0fcf\u0fd1\u0003\u0254\u012a\u0000\u0fd0\u0fce\u0001\u0000\u0000\u0000"+
		"\u0fd1\u0fd4\u0001\u0000\u0000\u0000\u0fd2\u0fd0\u0001\u0000\u0000\u0000"+
		"\u0fd2\u0fd3\u0001\u0000\u0000\u0000\u0fd3\u0fd5\u0001\u0000\u0000\u0000"+
		"\u0fd4\u0fd2\u0001\u0000\u0000\u0000\u0fd5\u0fd6\u0005\u0083\u0000\u0000"+
		"\u0fd6\u0fd8\u0003\u0178\u00bc\u0000\u0fd7\u0fd9\u0003\u0176\u00bb\u0000"+
		"\u0fd8\u0fd7\u0001\u0000\u0000\u0000\u0fd8\u0fd9\u0001\u0000\u0000\u0000"+
		"\u0fd9\u015b\u0001\u0000\u0000\u0000\u0fda\u0fe0\u00054\u0000\u0000\u0fdb"+
		"\u0fe1\u0005\u0117\u0000\u0000\u0fdc\u0fde\u0005\u0001\u0000\u0000\u0fdd"+
		"\u0fdf\u0005\u01cb\u0000\u0000\u0fde\u0fdd\u0001\u0000\u0000\u0000\u0fde"+
		"\u0fdf\u0001\u0000\u0000\u0000\u0fdf\u0fe1\u0001\u0000\u0000\u0000\u0fe0"+
		"\u0fdb\u0001\u0000\u0000\u0000\u0fe0\u0fdc\u0001\u0000\u0000\u0000\u0fe1"+
		"\u1006\u0001\u0000\u0000\u0000\u0fe2\u0fed\u0005]\u0000\u0000\u0fe3\u0fee"+
		"\u0005\u012d\u0000\u0000\u0fe4\u0fe5\u0005\u00a1\u0000\u0000\u0fe5\u0fee"+
		"\u0005\u012d\u0000\u0000\u0fe6\u0fe7\u0005\u00a5\u0000\u0000\u0fe7\u0fee"+
		"\u0005\u012d\u0000\u0000\u0fe8\u0fe9\u0005\u0234\u0000\u0000\u0fe9\u0fee"+
		"\u0005\u012d\u0000\u0000\u0fea\u0fee\u0005\u0123\u0000\u0000\u0feb\u0fee"+
		"\u0005\u01ab\u0000\u0000\u0fec\u0fee\u0005\u0213\u0000\u0000\u0fed\u0fe3"+
		"\u0001\u0000\u0000\u0000\u0fed\u0fe4\u0001\u0000\u0000\u0000\u0fed\u0fe6"+
		"\u0001\u0000\u0000\u0000\u0fed\u0fe8\u0001\u0000\u0000\u0000\u0fed\u0fea"+
		"\u0001\u0000\u0000\u0000\u0fed\u0feb\u0001\u0000\u0000\u0000\u0fed\u0fec"+
		"\u0001\u0000\u0000\u0000\u0fee\u0fef\u0001\u0000\u0000\u0000\u0fef\u0ff0"+
		"\u0003\u0264\u0132\u0000\u0ff0\u0ff7\u0003\u00aeW\u0000\u0ff1\u0ff2\u0005"+
		"\u0292\u0000\u0000\u0ff2\u0ff3\u0003\u0264\u0132\u0000\u0ff3\u0ff4\u0003"+
		"\u00aeW\u0000\u0ff4\u0ff6\u0001\u0000\u0000\u0000\u0ff5\u0ff1\u0001\u0000"+
		"\u0000\u0000\u0ff6\u0ff9\u0001\u0000\u0000\u0000\u0ff7\u0ff5\u0001\u0000"+
		"\u0000\u0000\u0ff7\u0ff8\u0001\u0000\u0000\u0000\u0ff8\u1007\u0001\u0000"+
		"\u0000\u0000\u0ff9\u0ff7\u0001\u0000\u0000\u0000\u0ffa\u0ffb\u0005\u0001"+
		"\u0000\u0000\u0ffb\u0ffc\u0005\u012e\u0000\u0000\u0ffc\u0ffd\u00059\u0000"+
		"\u0000\u0ffd\u0ffe\u0005n\u0000\u0000\u0ffe\u1003\u0003\u026e\u0137\u0000"+
		"\u0fff\u1000\u0005\u0292\u0000\u0000\u1000\u1002\u0003\u026e\u0137\u0000"+
		"\u1001\u0fff\u0001\u0000\u0000\u0000\u1002\u1005\u0001\u0000\u0000\u0000"+
		"\u1003\u1001\u0001\u0000\u0000\u0000\u1003\u1004\u0001\u0000\u0000\u0000"+
		"\u1004\u1007\u0001\u0000\u0000\u0000\u1005\u1003\u0001\u0000\u0000\u0000"+
		"\u1006\u0fe2\u0001\u0000\u0000\u0000\u1006\u0ffa\u0001\u0000\u0000\u0000"+
		"\u1007\u1008\u0001\u0000\u0000\u0000\u1008\u1009\u0005\u0083\u0000\u0000"+
		"\u1009\u100b\u0003\u0178\u00bc\u0000\u100a\u100c\u0003\u0176\u00bb\u0000"+
		"\u100b\u100a\u0001\u0000\u0000\u0000\u100b\u100c\u0001\u0000\u0000\u0000"+
		"\u100c\u015d\u0001\u0000\u0000\u0000\u100d\u101a\u00054\u0000\u0000\u100e"+
		"\u1013\u0003\u0166\u00b3\u0000\u100f\u1010\u0005\u0292\u0000\u0000\u1010"+
		"\u1012\u0003\u0166\u00b3\u0000\u1011\u100f\u0001\u0000\u0000\u0000\u1012"+
		"\u1015\u0001\u0000\u0000\u0000\u1013\u1011\u0001\u0000\u0000\u0000\u1013"+
		"\u1014\u0001\u0000\u0000\u0000\u1014\u101b\u0001\u0000\u0000\u0000\u1015"+
		"\u1013\u0001\u0000\u0000\u0000\u1016\u1018\u0005\u0001\u0000\u0000\u1017"+
		"\u1019\u0005\u01cb\u0000\u0000\u1018\u1017\u0001\u0000\u0000\u0000\u1018"+
		"\u1019\u0001\u0000\u0000\u0000\u1019\u101b\u0001\u0000\u0000\u0000\u101a"+
		"\u100e\u0001\u0000\u0000\u0000\u101a\u1016\u0001\u0000\u0000\u0000\u101b"+
		"\u101c\u0001\u0000\u0000\u0000\u101c\u1034\u0005]\u0000\u0000\u101d\u101f"+
		"\u0005w\u0000\u0000\u101e\u101d\u0001\u0000\u0000\u0000\u101e\u101f\u0001"+
		"\u0000\u0000\u0000\u101f\u1020\u0001\u0000\u0000\u0000\u1020\u1025\u0003"+
		"\u0254\u012a\u0000\u1021\u1022\u0005\u0292\u0000\u0000\u1022\u1024\u0003"+
		"\u0254\u012a\u0000\u1023\u1021\u0001\u0000\u0000\u0000\u1024\u1027\u0001"+
		"\u0000\u0000\u0000\u1025\u1023\u0001\u0000\u0000\u0000\u1025\u1026\u0001"+
		"\u0000\u0000\u0000\u1026\u1035\u0001\u0000\u0000\u0000\u1027\u1025\u0001"+
		"\u0000\u0000\u0000\u1028\u1029\u0005\u0001\u0000\u0000\u1029\u102a\u0005"+
		"\u0225\u0000\u0000\u102a\u102b\u00059\u0000\u0000\u102b\u102c\u0005n\u0000"+
		"\u0000\u102c\u1031\u0003\u026e\u0137\u0000\u102d\u102e\u0005\u0292\u0000"+
		"\u0000\u102e\u1030\u0003\u026e\u0137\u0000\u102f\u102d\u0001\u0000\u0000"+
		"\u0000\u1030\u1033\u0001\u0000\u0000\u0000\u1031\u102f\u0001\u0000\u0000"+
		"\u0000\u1031\u1032\u0001\u0000\u0000\u0000\u1032\u1035\u0001\u0000\u0000"+
		"\u0000\u1033\u1031\u0001\u0000\u0000\u0000\u1034\u101e\u0001\u0000\u0000"+
		"\u0000\u1034\u1028\u0001\u0000\u0000\u0000\u1035\u1036\u0001\u0000\u0000"+
		"\u0000\u1036\u1037\u0005\u0083\u0000\u0000\u1037\u1039\u0003\u0178\u00bc"+
		"\u0000\u1038\u103a\u0003\u0176\u00bb\u0000\u1039\u1038\u0001\u0000\u0000"+
		"\u0000\u1039\u103a\u0001\u0000\u0000\u0000\u103a\u015f\u0001\u0000\u0000"+
		"\u0000\u103b\u1048\u00054\u0000\u0000\u103c\u1041\u0007\u0013\u0000\u0000"+
		"\u103d\u103e\u0005\u0292\u0000\u0000\u103e\u1040\u0007\u0013\u0000\u0000"+
		"\u103f\u103d\u0001\u0000\u0000\u0000\u1040\u1043\u0001\u0000\u0000\u0000"+
		"\u1041\u103f\u0001\u0000\u0000\u0000\u1041\u1042\u0001\u0000\u0000\u0000"+
		"\u1042\u1049\u0001\u0000\u0000\u0000\u1043\u1041\u0001\u0000\u0000\u0000"+
		"\u1044\u1046\u0005\u0001\u0000\u0000\u1045\u1047\u0005\u01cb\u0000\u0000"+
		"\u1046\u1045\u0001\u0000\u0000\u0000\u1046\u1047\u0001\u0000\u0000\u0000"+
		"\u1047\u1049\u0001\u0000\u0000\u0000\u1048\u103c\u0001\u0000\u0000\u0000"+
		"\u1048\u1044\u0001\u0000\u0000\u0000\u1049\u104a\u0001\u0000\u0000\u0000"+
		"\u104a\u104b\u0005]\u0000\u0000\u104b\u104c\u0005\u016a\u0000\u0000\u104c"+
		"\u104d\u0003f3\u0000\u104d\u104e\u0005\u0083\u0000\u0000\u104e\u1050\u0003"+
		"\u0178\u00bc\u0000\u104f\u1051\u0003\u0176\u00bb\u0000\u1050\u104f\u0001"+
		"\u0000\u0000\u0000\u1050\u1051\u0001\u0000\u0000\u0000\u1051\u0161\u0001"+
		"\u0000\u0000\u0000\u1052\u1058\u00054\u0000\u0000\u1053\u1059\u0005o\u0000"+
		"\u0000\u1054\u1056\u0005\u0001\u0000\u0000\u1055\u1057\u0005\u01cb\u0000"+
		"\u0000\u1056\u1055\u0001\u0000\u0000\u0000\u1056\u1057\u0001\u0000\u0000"+
		"\u0000\u1057\u1059\u0001\u0000\u0000\u0000\u1058\u1053\u0001\u0000\u0000"+
		"\u0000\u1058\u1054\u0001\u0000\u0000\u0000\u1059\u105a\u0001\u0000\u0000"+
		"\u0000\u105a\u1070\u0005]\u0000\u0000\u105b\u105c\u0005\u0204\u0000\u0000"+
		"\u105c\u1061\u0003\u0268\u0134\u0000\u105d\u105e\u0005\u0292\u0000\u0000"+
		"\u105e\u1060\u0003\u0268\u0134\u0000\u105f\u105d\u0001\u0000\u0000\u0000"+
		"\u1060\u1063\u0001\u0000\u0000\u0000\u1061\u105f\u0001\u0000\u0000\u0000"+
		"\u1061\u1062\u0001\u0000\u0000\u0000\u1062\u1071\u0001\u0000\u0000\u0000"+
		"\u1063\u1061\u0001\u0000\u0000\u0000\u1064\u1065\u0005\u0001\u0000\u0000"+
		"\u1065\u1066\u0005\u0205\u0000\u0000\u1066\u1067\u00059\u0000\u0000\u1067"+
		"\u1068\u0005n\u0000\u0000\u1068\u106d\u0003\u026e\u0137\u0000\u1069\u106a"+
		"\u0005\u0292\u0000\u0000\u106a\u106c\u0003\u026e\u0137\u0000\u106b\u1069"+
		"\u0001\u0000\u0000\u0000\u106c\u106f\u0001\u0000\u0000\u0000\u106d\u106b"+
		"\u0001\u0000\u0000\u0000\u106d\u106e\u0001\u0000\u0000\u0000\u106e\u1071"+
		"\u0001\u0000\u0000\u0000\u106f\u106d\u0001\u0000\u0000\u0000\u1070\u105b"+
		"\u0001\u0000\u0000\u0000\u1070\u1064\u0001\u0000\u0000\u0000\u1071\u1072"+
		"\u0001\u0000\u0000\u0000\u1072\u1073\u0005\u0083\u0000\u0000\u1073\u1075"+
		"\u0003\u0178\u00bc\u0000\u1074\u1076\u0003\u0176\u00bb\u0000\u1075\u1074"+
		"\u0001\u0000\u0000\u0000\u1075\u1076\u0001\u0000\u0000\u0000\u1076\u0163"+
		"\u0001\u0000\u0000\u0000\u1077\u1084\u00054\u0000\u0000\u1078\u107d\u0003"+
		"\u0166\u00b3\u0000\u1079\u107a\u0005\u0292\u0000\u0000\u107a\u107c\u0003"+
		"\u0166\u00b3\u0000\u107b\u1079\u0001\u0000\u0000\u0000\u107c\u107f\u0001"+
		"\u0000\u0000\u0000\u107d\u107b\u0001\u0000\u0000\u0000\u107d\u107e\u0001"+
		"\u0000\u0000\u0000\u107e\u1085\u0001\u0000\u0000\u0000\u107f\u107d\u0001"+
		"\u0000\u0000\u0000\u1080\u1082\u0005\u0001\u0000\u0000\u1081\u1083\u0005"+
		"\u01cb\u0000\u0000\u1082\u1081\u0001\u0000\u0000\u0000\u1082\u1083\u0001"+
		"\u0000\u0000\u0000\u1083\u1085\u0001\u0000\u0000\u0000\u1084\u1078\u0001"+
		"\u0000\u0000\u0000\u1084\u1080\u0001\u0000\u0000\u0000\u1085\u1086\u0001"+
		"\u0000\u0000\u0000\u1086\u1087\u0005]\u0000\u0000\u1087\u1088\u0005n\u0000"+
		"\u0000\u1088\u108d\u0003\u026e\u0137\u0000\u1089\u108a\u0005\u0292\u0000"+
		"\u0000\u108a\u108c\u0003\u026e\u0137\u0000\u108b\u1089\u0001\u0000\u0000"+
		"\u0000\u108c\u108f\u0001\u0000\u0000\u0000\u108d\u108b\u0001\u0000\u0000"+
		"\u0000\u108d\u108e\u0001\u0000\u0000\u0000\u108e\u1090\u0001\u0000\u0000"+
		"\u0000\u108f\u108d\u0001\u0000\u0000\u0000\u1090\u1091\u0005\u0083\u0000"+
		"\u0000\u1091\u1093\u0003\u0178\u00bc\u0000\u1092\u1094\u0003\u0176\u00bb"+
		"\u0000\u1093\u1092\u0001\u0000\u0000\u0000\u1093\u1094\u0001\u0000\u0000"+
		"\u0000\u1094\u0165\u0001\u0000\u0000\u0000\u1095\u1096\u0007\u0014\u0000"+
		"\u0000\u1096\u0167\u0001\u0000\u0000\u0000\u1097\u1098\u00054\u0000\u0000"+
		"\u1098\u109d\u0003\u028c\u0146\u0000\u1099\u109a\u0005\u0292\u0000\u0000"+
		"\u109a\u109c\u0003\u028c\u0146\u0000\u109b\u1099\u0001\u0000\u0000\u0000"+
		"\u109c\u109f\u0001\u0000\u0000\u0000\u109d\u109b\u0001\u0000\u0000\u0000"+
		"\u109d\u109e\u0001\u0000\u0000\u0000\u109e\u10a0\u0001\u0000\u0000\u0000"+
		"\u109f\u109d\u0001\u0000\u0000\u0000\u10a0\u10a1\u0005\u0083\u0000\u0000"+
		"\u10a1\u10a3\u0003\u0178\u00bc\u0000\u10a2\u10a4\u0003\u0176\u00bb\u0000"+
		"\u10a3\u10a2\u0001\u0000\u0000\u0000\u10a3\u10a4\u0001\u0000\u0000\u0000"+
		"\u10a4\u0169\u0001\u0000\u0000\u0000\u10a5\u10ab\u00054\u0000\u0000\u10a6"+
		"\u10ac\u0005\u0247\u0000\u0000\u10a7\u10a9\u0005\u0001\u0000\u0000\u10a8"+
		"\u10aa\u0005\u01cb\u0000\u0000\u10a9\u10a8\u0001\u0000\u0000\u0000\u10a9"+
		"\u10aa\u0001\u0000\u0000\u0000\u10aa\u10ac\u0001\u0000\u0000\u0000\u10ab"+
		"\u10a6\u0001\u0000\u0000\u0000\u10ab\u10a7\u0001\u0000\u0000\u0000\u10ac"+
		"\u10ad\u0001\u0000\u0000\u0000\u10ad\u10ae\u0005]\u0000\u0000\u10ae\u10af"+
		"\u0005\u01e8\u0000\u0000\u10af\u10b0\u0005\u01c2\u0000\u0000\u10b0\u10b5"+
		"\u0003\u0290\u0148\u0000\u10b1\u10b2\u0005\u0292\u0000\u0000\u10b2\u10b4"+
		"\u0003\u0290\u0148\u0000\u10b3\u10b1\u0001\u0000\u0000\u0000\u10b4\u10b7"+
		"\u0001\u0000\u0000\u0000\u10b5\u10b3\u0001\u0000\u0000\u0000\u10b5\u10b6"+
		"\u0001\u0000\u0000\u0000\u10b6\u10b8\u0001\u0000\u0000\u0000\u10b7\u10b5"+
		"\u0001\u0000\u0000\u0000\u10b8\u10b9\u0005\u0083\u0000\u0000\u10b9\u10bb"+
		"\u0003\u0178\u00bc\u0000\u10ba\u10bc\u0003\u0176\u00bb\u0000\u10bb\u10ba"+
		"\u0001\u0000\u0000\u0000\u10bb\u10bc\u0001\u0000\u0000\u0000\u10bc\u016b"+
		"\u0001\u0000\u0000\u0000\u10bd\u10c3\u00054\u0000\u0000\u10be\u10c4\u0005"+
		"\u0117\u0000\u0000\u10bf\u10c1\u0005\u0001\u0000\u0000\u10c0\u10c2\u0005"+
		"\u01cb\u0000\u0000\u10c1\u10c0\u0001\u0000\u0000\u0000\u10c1\u10c2\u0001"+
		"\u0000\u0000\u0000\u10c2\u10c4\u0001\u0000\u0000\u0000\u10c3\u10be\u0001"+
		"\u0000\u0000\u0000\u10c3\u10bf\u0001\u0000\u0000\u0000\u10c4\u10c5\u0001"+
		"\u0000\u0000\u0000\u10c5\u10c6\u0005]\u0000\u0000\u10c6\u10c7\u0005\u01cd"+
		"\u0000\u0000\u10c7\u10c8\u0003\u0260\u0130\u0000\u10c8\u10cf\u0003\u00ae"+
		"W\u0000\u10c9\u10ca\u0005\u0292\u0000\u0000\u10ca\u10cb\u0003\u0260\u0130"+
		"\u0000\u10cb\u10cc\u0003\u00aeW\u0000\u10cc\u10ce\u0001\u0000\u0000\u0000"+
		"\u10cd\u10c9\u0001\u0000\u0000\u0000\u10ce\u10d1\u0001\u0000\u0000\u0000"+
		"\u10cf\u10cd\u0001\u0000\u0000\u0000\u10cf\u10d0\u0001\u0000\u0000\u0000"+
		"\u10d0\u10d2\u0001\u0000\u0000\u0000\u10d1\u10cf\u0001\u0000\u0000\u0000"+
		"\u10d2\u10d3\u0005\u0083\u0000\u0000\u10d3\u10d5\u0003\u0178\u00bc\u0000"+
		"\u10d4\u10d6\u0003\u0176\u00bb\u0000\u10d5\u10d4\u0001\u0000\u0000\u0000"+
		"\u10d5\u10d6\u0001\u0000\u0000\u0000\u10d6\u016d\u0001\u0000\u0000\u0000"+
		"\u10d7\u10dd\u00054\u0000\u0000\u10d8\u10de\u0005\u0247\u0000\u0000\u10d9"+
		"\u10db\u0005\u0001\u0000\u0000\u10da\u10dc\u0005\u01cb\u0000\u0000\u10db"+
		"\u10da\u0001\u0000\u0000\u0000\u10db\u10dc\u0001\u0000\u0000\u0000\u10dc"+
		"\u10de\u0001\u0000\u0000\u0000\u10dd\u10d8\u0001\u0000\u0000\u0000\u10dd"+
		"\u10d9\u0001\u0000\u0000\u0000\u10de\u10df\u0001\u0000\u0000\u0000\u10df"+
		"\u10e0\u0005]\u0000\u0000\u10e0\u10e1\u0005\u0186\u0000\u0000\u10e1\u10e6"+
		"\u0003\u026a\u0135\u0000\u10e2\u10e3\u0005\u0292\u0000\u0000\u10e3\u10e5"+
		"\u0003\u026a\u0135\u0000\u10e4\u10e2\u0001\u0000\u0000\u0000\u10e5\u10e8"+
		"\u0001\u0000\u0000\u0000\u10e6\u10e4\u0001\u0000\u0000\u0000\u10e6\u10e7"+
		"\u0001\u0000\u0000\u0000\u10e7\u10e9\u0001\u0000\u0000\u0000\u10e8\u10e6"+
		"\u0001\u0000\u0000\u0000\u10e9\u10ea\u0005\u0083\u0000\u0000\u10ea\u10ec"+
		"\u0003\u0178\u00bc\u0000\u10eb\u10ed\u0003\u0176\u00bb\u0000\u10ec\u10eb"+
		"\u0001\u0000\u0000\u0000\u10ec\u10ed\u0001\u0000\u0000\u0000\u10ed\u016f"+
		"\u0001\u0000\u0000\u0000\u10ee\u10f4\u00054\u0000\u0000\u10ef\u10f5\u0005"+
		"\u0247\u0000\u0000\u10f0\u10f2\u0005\u0001\u0000\u0000\u10f1\u10f3\u0005"+
		"\u01cb\u0000\u0000\u10f2\u10f1\u0001\u0000\u0000\u0000\u10f2\u10f3\u0001"+
		"\u0000\u0000\u0000\u10f3\u10f5\u0001\u0000\u0000\u0000\u10f4\u10ef\u0001"+
		"\u0000\u0000\u0000\u10f4\u10f0\u0001\u0000\u0000\u0000\u10f5\u10f6\u0001"+
		"\u0000\u0000\u0000\u10f6\u10f7\u0005]\u0000\u0000\u10f7\u10f8\u0005\u0166"+
		"\u0000\u0000\u10f8\u10fd\u0003\u0266\u0133\u0000\u10f9\u10fa\u0005\u0292"+
		"\u0000\u0000\u10fa\u10fc\u0003\u0266\u0133\u0000\u10fb\u10f9\u0001\u0000"+
		"\u0000\u0000\u10fc\u10ff\u0001\u0000\u0000\u0000\u10fd\u10fb\u0001\u0000"+
		"\u0000\u0000\u10fd\u10fe\u0001\u0000\u0000\u0000\u10fe\u1100\u0001\u0000"+
		"\u0000\u0000\u10ff\u10fd\u0001\u0000\u0000\u0000\u1100\u1101\u0005\u0083"+
		"\u0000\u0000\u1101\u1103\u0003\u0178\u00bc\u0000\u1102\u1104\u0003\u0176"+
		"\u00bb\u0000\u1103\u1102\u0001\u0000\u0000\u0000\u1103\u1104\u0001\u0000"+
		"\u0000\u0000\u1104\u0171\u0001\u0000\u0000\u0000\u1105\u110c\u00054\u0000"+
		"\u0000\u1106\u110d\u0005\u0018\u0000\u0000\u1107\u110d\u0005\u0228\u0000"+
		"\u0000\u1108\u110a\u0005\u0001\u0000\u0000\u1109\u110b\u0005\u01cb\u0000"+
		"\u0000\u110a\u1109\u0001\u0000\u0000\u0000\u110a\u110b\u0001\u0000\u0000"+
		"\u0000\u110b\u110d\u0001\u0000\u0000\u0000\u110c\u1106\u0001\u0000\u0000"+
		"\u0000\u110c\u1107\u0001\u0000\u0000\u0000\u110c\u1108\u0001\u0000\u0000"+
		"\u0000\u110d\u110e\u0001\u0000\u0000\u0000\u110e\u110f\u0005]\u0000\u0000"+
		"\u110f\u1110\u0005\u00e4\u0000\u0000\u1110\u1111\u0003\u0270\u0138\u0000"+
		"\u1111\u1112\u0005\u0083\u0000\u0000\u1112\u1114\u0003\u0178\u00bc\u0000"+
		"\u1113\u1115\u0003\u0176\u00bb\u0000\u1114\u1113\u0001\u0000\u0000\u0000"+
		"\u1114\u1115\u0001\u0000\u0000\u0000\u1115\u0173\u0001\u0000\u0000\u0000"+
		"\u1116\u1117\u00054\u0000\u0000\u1117\u1118\u0005\u00ac\u0000\u0000\u1118"+
		"\u1119\u0003\u02b8\u015c\u0000\u1119\u111a\u0005\u0083\u0000\u0000\u111a"+
		"\u111b\u0003\u0178\u00bc\u0000\u111b\u0175\u0001\u0000\u0000\u0000\u111c"+
		"\u111d\u0005\u0094\u0000\u0000\u111d\u111e\u00054\u0000\u0000\u111e\u111f"+
		"\u0005\u01a3\u0000\u0000\u111f\u0177\u0001\u0000\u0000\u0000\u1120\u1125"+
		"\u0003\u017a\u00bd\u0000\u1121\u1122\u0005\u0292\u0000\u0000\u1122\u1124"+
		"\u0003\u017a\u00bd\u0000\u1123\u1121\u0001\u0000\u0000\u0000\u1124\u1127"+
		"\u0001\u0000\u0000\u0000\u1125\u1123\u0001\u0000\u0000\u0000\u1125\u1126"+
		"\u0001\u0000\u0000\u0000\u1126\u0179\u0001\u0000\u0000\u0000\u1127\u1125"+
		"\u0001\u0000\u0000\u0000\u1128\u112b\u0003\u02b4\u015a\u0000\u1129\u112b"+
		"\u0005\u025e\u0000\u0000\u112a\u1128\u0001\u0000\u0000\u0000\u112a\u1129"+
		"\u0001\u0000\u0000\u0000\u112b\u017b\u0001\u0000\u0000\u0000\u112c\u112d"+
		"\u00054\u0000\u0000\u112d\u112e\u0005\u00ac\u0000\u0000\u112e\u112f\u0003"+
		"\u02bc\u015e\u0000\u112f\u1130\u0005\u0083\u0000\u0000\u1130\u1131\u0003"+
		"\u0178\u00bc\u0000\u1131\u017d\u0001\u0000\u0000\u0000\u1132\u1134\u0005"+
		"\u0156\u0000\u0000\u1133\u1135\u0003\u024e\u0127\u0000\u1134\u1133\u0001"+
		"\u0000\u0000\u0000\u1134\u1135\u0001\u0000\u0000\u0000\u1135\u1136\u0001"+
		"\u0000\u0000\u0000\u1136\u1137\u0005B\u0000\u0000\u1137\u1139\u0003\u0254"+
		"\u012a\u0000\u1138\u113a\u0003\u00c4b\u0000\u1139\u1138\u0001\u0000\u0000"+
		"\u0000\u1139\u113a\u0001\u0000\u0000\u0000\u113a\u113b\u0001\u0000\u0000"+
		"\u0000\u113b\u113c\u0003\u0180\u00c0\u0000\u113c\u017f\u0001\u0000\u0000"+
		"\u0000\u113d\u113e\u0005\u0297\u0000\u0000\u113e\u113f\u0003\u0180\u00c0"+
		"\u0000\u113f\u1140\u0005\u0298\u0000\u0000\u1140\u114d\u0001\u0000\u0000"+
		"\u0000\u1141\u1142\u0005$\u0000\u0000\u1142\u114b\u0005\u024d\u0000\u0000"+
		"\u1143\u1144\u0005\u024d\u0000\u0000\u1144\u1145\u0005\u0297\u0000\u0000"+
		"\u1145\u1146\u0003\u0220\u0110\u0000\u1146\u1147\u0005\u0298\u0000\u0000"+
		"\u1147\u114b\u0001\u0000\u0000\u0000\u1148\u114b\u0003\u01ac\u00d6\u0000"+
		"\u1149\u114b\u0003\u01b0\u00d8\u0000\u114a\u1141\u0001\u0000\u0000\u0000"+
		"\u114a\u1143";
	private static final String _serializedATNSegment2 =
		"\u0001\u0000\u0000\u0000\u114a\u1148\u0001\u0000\u0000\u0000\u114a\u1149"+
		"\u0001\u0000\u0000\u0000\u114b\u114d\u0001\u0000\u0000\u0000\u114c\u113d"+
		"\u0001\u0000\u0000\u0000\u114c\u114a\u0001\u0000\u0000\u0000\u114d\u0181"+
		"\u0001\u0000\u0000\u0000\u114e\u1150\u0005\u017d\u0000\u0000\u114f\u1151"+
		"\u0003\u024e\u0127\u0000\u1150\u114f\u0001\u0000\u0000\u0000\u1150\u1151"+
		"\u0001\u0000\u0000\u0000\u1151\u1152\u0001\u0000\u0000\u0000\u1152\u1153"+
		"\u0005B\u0000\u0000\u1153\u1155\u0003\u0254\u012a\u0000\u1154\u1156\u0003"+
		"\u0240\u0120\u0000\u1155\u1154\u0001\u0000\u0000\u0000\u1155\u1156\u0001"+
		"\u0000\u0000\u0000\u1156\u1157\u0001\u0000\u0000\u0000\u1157\u115a\u0005"+
		"\u008c\u0000\u0000\u1158\u115b\u0003\u0254\u012a\u0000\u1159\u115b\u0003"+
		"\u01b0\u00d8\u0000\u115a\u1158\u0001\u0000\u0000\u0000\u115a\u1159\u0001"+
		"\u0000\u0000\u0000\u115b\u115d\u0001\u0000\u0000\u0000\u115c\u115e\u0003"+
		"\u0240\u0120\u0000\u115d\u115c\u0001\u0000\u0000\u0000\u115d\u115e\u0001"+
		"\u0000\u0000\u0000\u115e\u115f\u0001\u0000\u0000\u0000\u115f\u1161\u0003"+
		"\u0230\u0118\u0000\u1160\u1162\u0003\u0184\u00c2\u0000\u1161\u1160\u0001"+
		"\u0000\u0000\u0000\u1162\u1163\u0001\u0000\u0000\u0000\u1163\u1161\u0001"+
		"\u0000\u0000\u0000\u1163\u1164\u0001\u0000\u0000\u0000\u1164\u0183\u0001"+
		"\u0000\u0000\u0000\u1165\u1166\u0005\u0091\u0000\u0000\u1166\u1167\u0005"+
		"\u0171\u0000\u0000\u1167\u1168\u0005y\u0000\u0000\u1168\u116b\u0005\u0246"+
		"\u0000\u0000\u1169\u116a\u0005\u0002\u0000\u0000\u116a\u116c\u0003\u0212"+
		"\u0109\u0000\u116b\u1169\u0001\u0000\u0000\u0000\u116b\u116c\u0001\u0000"+
		"\u0000\u0000\u116c\u116d\u0001\u0000\u0000\u0000\u116d\u116e\u0005y\u0000"+
		"\u0000\u116e\u116f\u0005\u0246\u0000\u0000\u116f\u1170\u0005\u0208\u0000"+
		"\u0000\u1170\u1171\u0003\u02a6\u0153\u0000\u1171\u1172\u0005\u02a2\u0000"+
		"\u0000\u1172\u1173\u0003\u02c6\u0163\u0000\u1173\u117a\u0001\u0000\u0000"+
		"\u0000\u1174\u1175\u0003\u02a6\u0153\u0000\u1175\u1176\u0005\u02a2\u0000"+
		"\u0000\u1176\u1177\u0003\u02c6\u0163\u0000\u1177\u1179\u0001\u0000\u0000"+
		"\u0000\u1178\u1174\u0001\u0000\u0000\u0000\u1179\u117c\u0001\u0000\u0000"+
		"\u0000\u117a\u1178\u0001\u0000\u0000\u0000\u117a\u117b\u0001\u0000\u0000"+
		"\u0000\u117b\u117e\u0001\u0000\u0000\u0000\u117c\u117a\u0001\u0000\u0000"+
		"\u0000\u117d\u117f\u0003\u0200\u0100\u0000\u117e\u117d\u0001\u0000\u0000"+
		"\u0000\u117e\u117f\u0001\u0000\u0000\u0000\u117f\u1190\u0001\u0000\u0000"+
		"\u0000\u1180\u1181\u0005\u0091\u0000\u0000\u1181\u1182\u0005U\u0000\u0000"+
		"\u1182\u1185\u0005\u0171\u0000\u0000\u1183\u1184\u0005\u0002\u0000\u0000"+
		"\u1184\u1186\u0003\u0212\u0109\u0000\u1185\u1183\u0001\u0000\u0000\u0000"+
		"\u1185\u1186\u0001\u0000\u0000\u0000\u1186\u1187\u0001\u0000\u0000\u0000"+
		"\u1187\u1188\u0005y\u0000\u0000\u1188\u1189\u0005\u0156\u0000\u0000\u1189"+
		"\u118a\u0003\u00c4b\u0000\u118a\u118b\u0005\u024d\u0000\u0000\u118b\u118c"+
		"\u0005\u0297\u0000\u0000\u118c\u118d\u0003\u024a\u0125\u0000\u118d\u118e"+
		"\u0005\u0298\u0000\u0000\u118e\u1190\u0001\u0000\u0000\u0000\u118f\u1165"+
		"\u0001\u0000\u0000\u0000\u118f\u1180\u0001\u0000\u0000\u0000\u1190\u0185"+
		"\u0001\u0000\u0000\u0000\u1191\u1192\u0005\u01ce\u0000\u0000\u1192\u1193"+
		"\u0003\u0002\u0001\u0000\u1193\u0187\u0001\u0000\u0000\u0000\u1194\u1196"+
		"\u0005\u01e1\u0000\u0000\u1195\u1197\u0005\u01fa\u0000\u0000\u1196\u1195"+
		"\u0001\u0000\u0000\u0000\u1196\u1197\u0001\u0000\u0000\u0000\u1197\u1198"+
		"\u0001\u0000\u0000\u0000\u1198\u1199\u0003\u02c4\u0162\u0000\u1199\u0189"+
		"\u0001\u0000\u0000\u0000\u119a\u11a8\u0003\u01a4\u00d2\u0000\u119b\u11a8"+
		"\u0003\u01a2\u00d1\u0000\u119c\u11a8\u0003\u01a0\u00d0\u0000\u119d\u11a8"+
		"\u0003\u019e\u00cf\u0000\u119e\u11a8\u0003\u019c\u00ce\u0000\u119f\u11a8"+
		"\u0003\u019a\u00cd\u0000\u11a0\u11a8\u0003\u0198\u00cc\u0000\u11a1\u11a8"+
		"\u0003\u0196\u00cb\u0000\u11a2\u11a8\u0003\u0194\u00ca\u0000\u11a3\u11a8"+
		"\u0003\u0192\u00c9\u0000\u11a4\u11a8\u0003\u0190\u00c8\u0000\u11a5\u11a8"+
		"\u0003\u018e\u00c7\u0000\u11a6\u11a8\u0003\u018c\u00c6\u0000\u11a7\u119a"+
		"\u0001\u0000\u0000\u0000\u11a7\u119b\u0001\u0000\u0000\u0000\u11a7\u119c"+
		"\u0001\u0000\u0000\u0000\u11a7\u119d\u0001\u0000\u0000\u0000\u11a7\u119e"+
		"\u0001\u0000\u0000\u0000\u11a7\u119f\u0001\u0000\u0000\u0000\u11a7\u11a0"+
		"\u0001\u0000\u0000\u0000\u11a7\u11a1\u0001\u0000\u0000\u0000\u11a7\u11a2"+
		"\u0001\u0000\u0000\u0000\u11a7\u11a3\u0001\u0000\u0000\u0000\u11a7\u11a4"+
		"\u0001\u0000\u0000\u0000\u11a7\u11a5\u0001\u0000\u0000\u0000\u11a7\u11a6"+
		"\u0001\u0000\u0000\u0000\u11a8\u018b\u0001\u0000\u0000\u0000\u11a9\u11ad"+
		"\u0005\u01ee\u0000\u0000\u11aa\u11ab\u00054\u0000\u0000\u11ab\u11ac\u0005"+
		"\u01a3\u0000\u0000\u11ac\u11ae\u00050\u0000\u0000\u11ad\u11aa\u0001\u0000"+
		"\u0000\u0000\u11ad\u11ae\u0001\u0000\u0000\u0000\u11ae\u11b4\u0001\u0000"+
		"\u0000\u0000\u11af\u11b5\u0005o\u0000\u0000\u11b0\u11b2\u0005\u0001\u0000"+
		"\u0000\u11b1\u11b3\u0005\u01cb\u0000\u0000\u11b2\u11b1\u0001\u0000\u0000"+
		"\u0000\u11b2\u11b3\u0001\u0000\u0000\u0000\u11b3\u11b5\u0001\u0000\u0000"+
		"\u0000\u11b4\u11af\u0001\u0000\u0000\u0000\u11b4\u11b0\u0001\u0000\u0000"+
		"\u0000\u11b5\u11b6\u0001\u0000\u0000\u0000\u11b6\u11b7\u0005]\u0000\u0000"+
		"\u11b7\u11bc\u0003\u0254\u012a\u0000\u11b8\u11b9\u0005\u0292\u0000\u0000"+
		"\u11b9\u11bb\u0003\u0254\u012a\u0000\u11ba\u11b8\u0001\u0000\u0000\u0000"+
		"\u11bb\u11be\u0001\u0000\u0000\u0000\u11bc\u11ba\u0001\u0000\u0000\u0000"+
		"\u11bc\u11bd\u0001\u0000\u0000\u0000\u11bd\u11bf\u0001\u0000\u0000\u0000"+
		"\u11be\u11bc\u0001\u0000\u0000\u0000\u11bf\u11c0\u00052\u0000\u0000\u11c0"+
		"\u11c2\u0003\u0178\u00bc\u0000\u11c1\u11c3\u0005\u00c1\u0000\u0000\u11c2"+
		"\u11c1\u0001\u0000\u0000\u0000\u11c2\u11c3\u0001\u0000\u0000\u0000\u11c3"+
		"\u018d\u0001\u0000\u0000\u0000\u11c4\u11c8\u0005\u01ee\u0000\u0000\u11c5"+
		"\u11c6\u00054\u0000\u0000\u11c6\u11c7\u0005\u01a3\u0000\u0000\u11c7\u11c9"+
		"\u00050\u0000\u0000\u11c8\u11c5\u0001\u0000\u0000\u0000\u11c8\u11c9\u0001"+
		"\u0000\u0000\u0000\u11c9\u11cf\u0001\u0000\u0000\u0000\u11ca\u11d0\u0005"+
		"\u0117\u0000\u0000\u11cb\u11cd\u0005\u0001\u0000\u0000\u11cc\u11ce\u0005"+
		"\u01cb\u0000\u0000\u11cd\u11cc\u0001\u0000\u0000\u0000\u11cd\u11ce\u0001"+
		"\u0000\u0000\u0000\u11ce\u11d0\u0001\u0000\u0000\u0000\u11cf\u11ca\u0001"+
		"\u0000\u0000\u0000\u11cf\u11cb\u0001\u0000\u0000\u0000\u11d0\u11f5\u0001"+
		"\u0000\u0000\u0000\u11d1\u11dc\u0005]\u0000\u0000\u11d2\u11dd\u0005\u012d"+
		"\u0000\u0000\u11d3\u11d4\u0005\u00a1\u0000\u0000\u11d4\u11dd\u0005\u012d"+
		"\u0000\u0000\u11d5\u11d6\u0005\u00a5\u0000\u0000\u11d6\u11dd\u0005\u012d"+
		"\u0000\u0000\u11d7\u11d8\u0005\u0234\u0000\u0000\u11d8\u11dd\u0005\u012d"+
		"\u0000\u0000\u11d9\u11dd\u0005\u0123\u0000\u0000\u11da\u11dd\u0005\u01ab"+
		"\u0000\u0000\u11db\u11dd\u0005\u0213\u0000\u0000\u11dc\u11d2\u0001\u0000"+
		"\u0000\u0000\u11dc\u11d3\u0001\u0000\u0000\u0000\u11dc\u11d5\u0001\u0000"+
		"\u0000\u0000\u11dc\u11d7\u0001\u0000\u0000\u0000\u11dc\u11d9\u0001\u0000"+
		"\u0000\u0000\u11dc\u11da\u0001\u0000\u0000\u0000\u11dc\u11db\u0001\u0000"+
		"\u0000\u0000\u11dd\u11de\u0001\u0000\u0000\u0000\u11de\u11df\u0003\u0264"+
		"\u0132\u0000\u11df\u11e6\u0003\u00aeW\u0000\u11e0\u11e1\u0005\u0292\u0000"+
		"\u0000\u11e1\u11e2\u0003\u0264\u0132\u0000\u11e2\u11e3\u0003\u00aeW\u0000"+
		"\u11e3\u11e5\u0001\u0000\u0000\u0000\u11e4\u11e0\u0001\u0000\u0000\u0000"+
		"\u11e5\u11e8\u0001\u0000\u0000\u0000\u11e6\u11e4\u0001\u0000\u0000\u0000"+
		"\u11e6\u11e7\u0001\u0000\u0000\u0000\u11e7\u11f6\u0001\u0000\u0000\u0000"+
		"\u11e8\u11e6\u0001\u0000\u0000\u0000\u11e9\u11ea\u0005\u0001\u0000\u0000"+
		"\u11ea\u11eb\u0005\u012e\u0000\u0000\u11eb\u11ec\u00059\u0000\u0000\u11ec"+
		"\u11ed\u0005n\u0000\u0000\u11ed\u11f2\u0003\u026e\u0137\u0000\u11ee\u11ef"+
		"\u0005\u0292\u0000\u0000\u11ef\u11f1\u0003\u026e\u0137\u0000\u11f0\u11ee"+
		"\u0001\u0000\u0000\u0000\u11f1\u11f4\u0001\u0000\u0000\u0000\u11f2\u11f0"+
		"\u0001\u0000\u0000\u0000\u11f2\u11f3\u0001\u0000\u0000\u0000\u11f3\u11f6"+
		"\u0001\u0000\u0000\u0000\u11f4\u11f2\u0001\u0000\u0000\u0000\u11f5\u11d1"+
		"\u0001\u0000\u0000\u0000\u11f5\u11e9\u0001\u0000\u0000\u0000\u11f6\u11f7"+
		"\u0001\u0000\u0000\u0000\u11f7\u11f8\u00052\u0000\u0000\u11f8\u11fa\u0003"+
		"\u0178\u00bc\u0000\u11f9\u11fb\u0005\u00c1\u0000\u0000\u11fa\u11f9\u0001"+
		"\u0000\u0000\u0000\u11fa\u11fb\u0001\u0000\u0000\u0000\u11fb\u018f\u0001"+
		"\u0000\u0000\u0000\u11fc\u1200\u0005\u01ee\u0000\u0000\u11fd\u11fe\u0005"+
		"4\u0000\u0000\u11fe\u11ff\u0005\u01a3\u0000\u0000\u11ff\u1201\u00050\u0000"+
		"\u0000\u1200\u11fd\u0001\u0000\u0000\u0000\u1200\u1201\u0001\u0000\u0000"+
		"\u0000\u1201\u120e\u0001\u0000\u0000\u0000\u1202\u1207\u0007\u0015\u0000"+
		"\u0000\u1203\u1204\u0005\u0292\u0000\u0000\u1204\u1206\u0007\u0015\u0000"+
		"\u0000\u1205\u1203\u0001\u0000\u0000\u0000\u1206\u1209\u0001\u0000\u0000"+
		"\u0000\u1207\u1205\u0001\u0000\u0000\u0000\u1207\u1208\u0001\u0000\u0000"+
		"\u0000\u1208\u120f\u0001\u0000\u0000\u0000\u1209\u1207\u0001\u0000\u0000"+
		"\u0000\u120a\u120c\u0005\u0001\u0000\u0000\u120b\u120d\u0005\u01cb\u0000"+
		"\u0000\u120c\u120b\u0001\u0000\u0000\u0000\u120c\u120d\u0001\u0000\u0000"+
		"\u0000\u120d\u120f\u0001\u0000\u0000\u0000\u120e\u1202\u0001\u0000\u0000"+
		"\u0000\u120e\u120a\u0001\u0000\u0000\u0000\u120f\u1210\u0001\u0000\u0000"+
		"\u0000\u1210\u1228\u0005]\u0000\u0000\u1211\u1213\u0005w\u0000\u0000\u1212"+
		"\u1211\u0001\u0000\u0000\u0000\u1212\u1213\u0001\u0000\u0000\u0000\u1213"+
		"\u1214\u0001\u0000\u0000\u0000\u1214\u1219\u0003\u0254\u012a\u0000\u1215"+
		"\u1216\u0005\u0292\u0000\u0000\u1216\u1218\u0003\u0254\u012a\u0000\u1217"+
		"\u1215\u0001\u0000\u0000\u0000\u1218\u121b\u0001\u0000\u0000\u0000\u1219"+
		"\u1217\u0001\u0000\u0000\u0000\u1219\u121a\u0001\u0000\u0000\u0000\u121a"+
		"\u1229\u0001\u0000\u0000\u0000\u121b\u1219\u0001\u0000\u0000\u0000\u121c"+
		"\u121d\u0005\u0001\u0000\u0000\u121d\u121e\u0005\u0225\u0000\u0000\u121e"+
		"\u121f\u00059\u0000\u0000\u121f\u1220\u0005n\u0000\u0000\u1220\u1225\u0003"+
		"\u026e\u0137\u0000\u1221\u1222\u0005\u0292\u0000\u0000\u1222\u1224\u0003"+
		"\u026e\u0137\u0000\u1223\u1221\u0001\u0000\u0000\u0000\u1224\u1227\u0001"+
		"\u0000\u0000\u0000\u1225\u1223\u0001\u0000\u0000\u0000\u1225\u1226\u0001"+
		"\u0000\u0000\u0000\u1226\u1229\u0001\u0000\u0000\u0000\u1227\u1225\u0001"+
		"\u0000\u0000\u0000\u1228\u1212\u0001\u0000\u0000\u0000\u1228\u121c\u0001"+
		"\u0000\u0000\u0000\u1229\u122a\u0001\u0000\u0000\u0000\u122a\u122b\u0005"+
		"2\u0000\u0000\u122b\u122d\u0003\u0178\u00bc\u0000\u122c\u122e\u0005\u00c1"+
		"\u0000\u0000\u122d\u122c\u0001\u0000\u0000\u0000\u122d\u122e\u0001\u0000"+
		"\u0000\u0000\u122e\u0191\u0001\u0000\u0000\u0000\u122f\u1233\u0005\u01ee"+
		"\u0000\u0000\u1230\u1231\u00054\u0000\u0000\u1231\u1232\u0005\u01a3\u0000"+
		"\u0000\u1232\u1234\u00050\u0000\u0000\u1233\u1230\u0001\u0000\u0000\u0000"+
		"\u1233\u1234\u0001\u0000\u0000\u0000\u1234\u1241\u0001\u0000\u0000\u0000"+
		"\u1235\u123a\u0007\u0013\u0000\u0000\u1236\u1237\u0005\u0292\u0000\u0000"+
		"\u1237\u1239\u0007\u0013\u0000\u0000\u1238\u1236\u0001\u0000\u0000\u0000"+
		"\u1239\u123c\u0001\u0000\u0000\u0000\u123a\u1238\u0001\u0000\u0000\u0000"+
		"\u123a\u123b\u0001\u0000\u0000\u0000\u123b\u1242\u0001\u0000\u0000\u0000"+
		"\u123c\u123a\u0001\u0000\u0000\u0000\u123d\u123f\u0005\u0001\u0000\u0000"+
		"\u123e\u1240\u0005\u01cb\u0000\u0000\u123f\u123e\u0001\u0000\u0000\u0000"+
		"\u123f\u1240\u0001\u0000\u0000\u0000\u1240\u1242\u0001\u0000\u0000\u0000"+
		"\u1241\u1235\u0001\u0000\u0000\u0000\u1241\u123d\u0001\u0000\u0000\u0000"+
		"\u1242\u1243\u0001\u0000\u0000\u0000\u1243\u1244\u0005]\u0000\u0000\u1244"+
		"\u1245\u0005\u016a\u0000\u0000\u1245\u1246\u0003f3\u0000\u1246\u1247\u0005"+
		"2\u0000\u0000\u1247\u1249\u0003\u0178\u00bc\u0000\u1248\u124a\u0005\u00c1"+
		"\u0000\u0000\u1249\u1248\u0001\u0000\u0000\u0000\u1249\u124a\u0001\u0000"+
		"\u0000\u0000\u124a\u0193\u0001\u0000\u0000\u0000\u124b\u124f\u0005\u01ee"+
		"\u0000\u0000\u124c\u124d\u00054\u0000\u0000\u124d\u124e\u0005\u01a3\u0000"+
		"\u0000\u124e\u1250\u00050\u0000\u0000\u124f\u124c\u0001\u0000\u0000\u0000"+
		"\u124f\u1250\u0001\u0000\u0000\u0000\u1250\u1256\u0001\u0000\u0000\u0000"+
		"\u1251\u1257\u0005o\u0000\u0000\u1252\u1254\u0005\u0001\u0000\u0000\u1253"+
		"\u1255\u0005\u01cb\u0000\u0000\u1254\u1253\u0001\u0000\u0000\u0000\u1254"+
		"\u1255\u0001\u0000\u0000\u0000\u1255\u1257\u0001\u0000\u0000\u0000\u1256"+
		"\u1251\u0001\u0000\u0000\u0000\u1256\u1252\u0001\u0000\u0000\u0000\u1257"+
		"\u1258\u0001\u0000\u0000\u0000\u1258\u126e\u0005]\u0000\u0000\u1259\u125a"+
		"\u0005\u0204\u0000\u0000\u125a\u125f\u0003\u0268\u0134\u0000\u125b\u125c"+
		"\u0005\u0292\u0000\u0000\u125c\u125e\u0003\u0268\u0134\u0000\u125d\u125b"+
		"\u0001\u0000\u0000\u0000\u125e\u1261\u0001\u0000\u0000\u0000\u125f\u125d"+
		"\u0001\u0000\u0000\u0000\u125f\u1260\u0001\u0000\u0000\u0000\u1260\u126f"+
		"\u0001\u0000\u0000\u0000\u1261\u125f\u0001\u0000\u0000\u0000\u1262\u1263"+
		"\u0005\u0001\u0000\u0000\u1263\u1264\u0005\u0205\u0000\u0000\u1264\u1265"+
		"\u00059\u0000\u0000\u1265\u1266\u0005n\u0000\u0000\u1266\u126b\u0003\u026e"+
		"\u0137\u0000\u1267\u1268\u0005\u0292\u0000\u0000\u1268\u126a\u0003\u026e"+
		"\u0137\u0000\u1269\u1267\u0001\u0000\u0000\u0000\u126a\u126d\u0001\u0000"+
		"\u0000\u0000\u126b\u1269\u0001\u0000\u0000\u0000\u126b\u126c\u0001\u0000"+
		"\u0000\u0000\u126c\u126f\u0001\u0000\u0000\u0000\u126d\u126b\u0001\u0000"+
		"\u0000\u0000\u126e\u1259\u0001\u0000\u0000\u0000\u126e\u1262\u0001\u0000"+
		"\u0000\u0000\u126f\u1270\u0001\u0000\u0000\u0000\u1270\u1271\u00052\u0000"+
		"\u0000\u1271\u1273\u0003\u0178\u00bc\u0000\u1272\u1274\u0005\u00c1\u0000"+
		"\u0000\u1273\u1272\u0001\u0000\u0000\u0000\u1273\u1274\u0001\u0000\u0000"+
		"\u0000\u1274\u0195\u0001\u0000\u0000\u0000\u1275\u1279\u0005\u01ee\u0000"+
		"\u0000\u1276\u1277\u00054\u0000\u0000\u1277\u1278\u0005\u01a3\u0000\u0000"+
		"\u1278\u127a\u00050\u0000\u0000\u1279\u1276\u0001\u0000\u0000\u0000\u1279"+
		"\u127a\u0001\u0000\u0000\u0000\u127a\u1287\u0001\u0000\u0000\u0000\u127b"+
		"\u1280\u0003\u0166\u00b3\u0000\u127c\u127d\u0005\u0292\u0000\u0000\u127d"+
		"\u127f\u0003\u0166\u00b3\u0000\u127e\u127c\u0001\u0000\u0000\u0000\u127f"+
		"\u1282\u0001\u0000\u0000\u0000\u1280\u127e\u0001\u0000\u0000\u0000\u1280"+
		"\u1281\u0001\u0000\u0000\u0000\u1281\u1288\u0001\u0000\u0000\u0000\u1282"+
		"\u1280\u0001\u0000\u0000\u0000\u1283\u1285\u0005\u0001\u0000\u0000\u1284"+
		"\u1286\u0005\u01cb\u0000\u0000\u1285\u1284\u0001\u0000\u0000\u0000\u1285"+
		"\u1286\u0001\u0000\u0000\u0000\u1286\u1288\u0001\u0000\u0000\u0000\u1287"+
		"\u127b\u0001\u0000\u0000\u0000\u1287\u1283\u0001\u0000\u0000\u0000\u1288"+
		"\u1289\u0001\u0000\u0000\u0000\u1289\u128a\u0005]\u0000\u0000\u128a\u128b"+
		"\u0005n\u0000\u0000\u128b\u1290\u0003\u026e\u0137\u0000\u128c\u128d\u0005"+
		"\u0292\u0000\u0000\u128d\u128f\u0003\u026e\u0137\u0000\u128e\u128c\u0001"+
		"\u0000\u0000\u0000\u128f\u1292\u0001\u0000\u0000\u0000\u1290\u128e\u0001"+
		"\u0000\u0000\u0000\u1290\u1291\u0001\u0000\u0000\u0000\u1291\u1293\u0001"+
		"\u0000\u0000\u0000\u1292\u1290\u0001\u0000\u0000\u0000\u1293\u1294\u0005"+
		"2\u0000\u0000\u1294\u1296\u0003\u0178\u00bc\u0000\u1295\u1297\u0005\u00c1"+
		"\u0000\u0000\u1296\u1295\u0001\u0000\u0000\u0000\u1296\u1297\u0001\u0000"+
		"\u0000\u0000\u1297\u0197\u0001\u0000\u0000\u0000\u1298\u129c\u0005\u01ee"+
		"\u0000\u0000\u1299\u129a\u0005\u009f\u0000\u0000\u129a\u129b\u0005\u01a3"+
		"\u0000\u0000\u129b\u129d\u00050\u0000\u0000\u129c\u1299\u0001\u0000\u0000"+
		"\u0000\u129c\u129d\u0001\u0000\u0000\u0000\u129d\u129e\u0001\u0000\u0000"+
		"\u0000\u129e\u12a3\u0003\u028c\u0146\u0000\u129f\u12a0\u0005\u0292\u0000"+
		"\u0000\u12a0\u12a2\u0003\u028c\u0146\u0000\u12a1\u129f\u0001\u0000\u0000"+
		"\u0000\u12a2\u12a5\u0001\u0000\u0000\u0000\u12a3\u12a1\u0001\u0000\u0000"+
		"\u0000\u12a3\u12a4\u0001\u0000\u0000\u0000\u12a4\u12a6\u0001\u0000\u0000"+
		"\u0000\u12a5\u12a3\u0001\u0000\u0000\u0000\u12a6\u12a7\u00052\u0000\u0000"+
		"\u12a7\u12a9\u0003\u0178\u00bc\u0000\u12a8\u12aa\u0005\u00c1\u0000\u0000"+
		"\u12a9\u12a8\u0001\u0000\u0000\u0000\u12a9\u12aa\u0001\u0000\u0000\u0000"+
		"\u12aa\u0199\u0001\u0000\u0000\u0000\u12ab\u12af\u0005\u01ee\u0000\u0000"+
		"\u12ac\u12ad\u00054\u0000\u0000\u12ad\u12ae\u0005\u01a3\u0000\u0000\u12ae"+
		"\u12b0\u00050\u0000\u0000\u12af\u12ac\u0001\u0000\u0000\u0000\u12af\u12b0"+
		"\u0001\u0000\u0000\u0000\u12b0\u12b6\u0001\u0000\u0000\u0000\u12b1\u12b7"+
		"\u0005\u0247\u0000\u0000\u12b2\u12b4\u0005\u0001\u0000\u0000\u12b3\u12b5"+
		"\u0005\u01cb\u0000\u0000\u12b4\u12b3\u0001\u0000\u0000\u0000\u12b4\u12b5"+
		"\u0001\u0000\u0000\u0000\u12b5\u12b7\u0001\u0000\u0000\u0000\u12b6\u12b1"+
		"\u0001\u0000\u0000\u0000\u12b6\u12b2\u0001\u0000\u0000\u0000\u12b7\u12b8"+
		"\u0001\u0000\u0000\u0000\u12b8\u12b9\u0005]\u0000\u0000\u12b9\u12ba\u0005"+
		"\u01e8\u0000\u0000\u12ba\u12bb\u0005\u01c2\u0000\u0000\u12bb\u12c0\u0003"+
		"\u0290\u0148\u0000\u12bc\u12bd\u0005\u0292\u0000\u0000\u12bd\u12bf\u0003"+
		"\u0290\u0148\u0000\u12be\u12bc\u0001\u0000\u0000\u0000\u12bf\u12c2\u0001"+
		"\u0000\u0000\u0000\u12c0\u12be\u0001\u0000\u0000\u0000\u12c0\u12c1\u0001"+
		"\u0000\u0000\u0000\u12c1\u12c3\u0001\u0000\u0000\u0000\u12c2\u12c0\u0001"+
		"\u0000\u0000\u0000\u12c3\u12c4\u00052\u0000\u0000\u12c4\u12c6\u0003\u0178"+
		"\u00bc\u0000\u12c5\u12c7\u0005\u00c1\u0000\u0000\u12c6\u12c5\u0001\u0000"+
		"\u0000\u0000\u12c6\u12c7\u0001\u0000\u0000\u0000\u12c7\u019b\u0001\u0000"+
		"\u0000\u0000\u12c8\u12cc\u0005\u01ee\u0000\u0000\u12c9\u12ca\u00054\u0000"+
		"\u0000\u12ca\u12cb\u0005\u01a3\u0000\u0000\u12cb\u12cd\u00050\u0000\u0000"+
		"\u12cc\u12c9\u0001\u0000\u0000\u0000\u12cc\u12cd\u0001\u0000\u0000\u0000"+
		"\u12cd\u12d3\u0001\u0000\u0000\u0000\u12ce\u12d4\u0005\u0117\u0000\u0000"+
		"\u12cf\u12d1\u0005\u0001\u0000\u0000\u12d0\u12d2\u0005\u01cb\u0000\u0000"+
		"\u12d1\u12d0\u0001\u0000\u0000\u0000\u12d1\u12d2\u0001\u0000\u0000\u0000"+
		"\u12d2\u12d4\u0001\u0000\u0000\u0000\u12d3\u12ce\u0001\u0000\u0000\u0000"+
		"\u12d3\u12cf\u0001\u0000\u0000\u0000\u12d4\u12d5\u0001\u0000\u0000\u0000"+
		"\u12d5\u12d6\u0005]\u0000\u0000\u12d6\u12d7\u0005\u01cd\u0000\u0000\u12d7"+
		"\u12d8\u0003\u0260\u0130\u0000\u12d8\u12df\u0003\u00aeW\u0000\u12d9\u12da"+
		"\u0005\u0292\u0000\u0000\u12da\u12db\u0003\u0260\u0130\u0000\u12db\u12dc"+
		"\u0003\u00aeW\u0000\u12dc\u12de\u0001\u0000\u0000\u0000\u12dd\u12d9\u0001"+
		"\u0000\u0000\u0000\u12de\u12e1\u0001\u0000\u0000\u0000\u12df\u12dd\u0001"+
		"\u0000\u0000\u0000\u12df\u12e0\u0001\u0000\u0000\u0000\u12e0\u12e2\u0001"+
		"\u0000\u0000\u0000\u12e1\u12df\u0001\u0000\u0000\u0000\u12e2\u12e3\u0005"+
		"2\u0000\u0000\u12e3\u12e5\u0003\u0178\u00bc\u0000\u12e4\u12e6\u0005\u00c1"+
		"\u0000\u0000\u12e5\u12e4\u0001\u0000\u0000\u0000\u12e5\u12e6\u0001\u0000"+
		"\u0000\u0000\u12e6\u019d\u0001\u0000\u0000\u0000\u12e7\u12eb\u0005\u01ee"+
		"\u0000\u0000\u12e8\u12e9\u00054\u0000\u0000\u12e9\u12ea\u0005\u01a3\u0000"+
		"\u0000\u12ea\u12ec\u00050\u0000\u0000\u12eb\u12e8\u0001\u0000\u0000\u0000"+
		"\u12eb\u12ec\u0001\u0000\u0000\u0000\u12ec\u12f2\u0001\u0000\u0000\u0000"+
		"\u12ed\u12f3\u0005\u0247\u0000\u0000\u12ee\u12f0\u0005\u0001\u0000\u0000"+
		"\u12ef\u12f1\u0005\u01cb\u0000\u0000\u12f0\u12ef\u0001\u0000\u0000\u0000"+
		"\u12f0\u12f1\u0001\u0000\u0000\u0000\u12f1\u12f3\u0001\u0000\u0000\u0000"+
		"\u12f2\u12ed\u0001\u0000\u0000\u0000\u12f2\u12ee\u0001\u0000\u0000\u0000"+
		"\u12f3\u12f4\u0001\u0000\u0000\u0000\u12f4\u12f5\u0005]\u0000\u0000\u12f5"+
		"\u12f6\u0005\u0186\u0000\u0000\u12f6\u12fb\u0003\u026a\u0135\u0000\u12f7"+
		"\u12f8\u0005\u0292\u0000\u0000\u12f8\u12fa\u0003\u026a\u0135\u0000\u12f9"+
		"\u12f7\u0001\u0000\u0000\u0000\u12fa\u12fd\u0001\u0000\u0000\u0000\u12fb"+
		"\u12f9\u0001\u0000\u0000\u0000\u12fb\u12fc\u0001\u0000\u0000\u0000\u12fc"+
		"\u12fe\u0001\u0000\u0000\u0000\u12fd\u12fb\u0001\u0000\u0000\u0000\u12fe"+
		"\u12ff\u00052\u0000\u0000\u12ff\u1301\u0003\u0178\u00bc\u0000\u1300\u1302"+
		"\u0005\u00c1\u0000\u0000\u1301\u1300\u0001\u0000\u0000\u0000\u1301\u1302"+
		"\u0001\u0000\u0000\u0000\u1302\u019f\u0001\u0000\u0000\u0000\u1303\u1307"+
		"\u0005\u01ee\u0000\u0000\u1304\u1305\u00054\u0000\u0000\u1305\u1306\u0005"+
		"\u01a3\u0000\u0000\u1306\u1308\u00050\u0000\u0000\u1307\u1304\u0001\u0000"+
		"\u0000\u0000\u1307\u1308\u0001\u0000\u0000\u0000\u1308\u130e\u0001\u0000"+
		"\u0000\u0000\u1309\u130f\u0005\u0247\u0000\u0000\u130a\u130c\u0005\u0001"+
		"\u0000\u0000\u130b\u130d\u0005\u01cb\u0000\u0000\u130c\u130b\u0001\u0000"+
		"\u0000\u0000\u130c\u130d\u0001\u0000\u0000\u0000\u130d\u130f\u0001\u0000"+
		"\u0000\u0000\u130e\u1309\u0001\u0000\u0000\u0000\u130e\u130a\u0001\u0000"+
		"\u0000\u0000\u130f\u1310\u0001\u0000\u0000\u0000\u1310\u1311\u0005]\u0000"+
		"\u0000\u1311\u1312\u0005\u0166\u0000\u0000\u1312\u1317\u0003\u0266\u0133"+
		"\u0000\u1313\u1314\u0005\u0292\u0000\u0000\u1314\u1316\u0003\u0266\u0133"+
		"\u0000\u1315\u1313\u0001\u0000\u0000\u0000\u1316\u1319\u0001\u0000\u0000"+
		"\u0000\u1317\u1315\u0001\u0000\u0000\u0000\u1317\u1318\u0001\u0000\u0000"+
		"\u0000\u1318\u131a\u0001\u0000\u0000\u0000\u1319\u1317\u0001\u0000\u0000"+
		"\u0000\u131a\u131b\u00052\u0000\u0000\u131b\u131d\u0003\u0178\u00bc\u0000"+
		"\u131c\u131e\u0005\u00c1\u0000\u0000\u131d\u131c\u0001\u0000\u0000\u0000"+
		"\u131d\u131e\u0001\u0000\u0000\u0000\u131e\u01a1\u0001\u0000\u0000\u0000"+
		"\u131f\u1323\u0005\u01ee\u0000\u0000\u1320\u1321\u00054\u0000\u0000\u1321"+
		"\u1322\u0005\u01a3\u0000\u0000\u1322\u1324\u00050\u0000\u0000\u1323\u1320"+
		"\u0001\u0000\u0000\u0000\u1323\u1324\u0001\u0000\u0000\u0000\u1324\u1331"+
		"\u0001\u0000\u0000\u0000\u1325\u132a\u0007\u0016\u0000\u0000\u1326\u1327"+
		"\u0005\u0292\u0000\u0000\u1327\u1329\u0007\u0016\u0000\u0000\u1328\u1326"+
		"\u0001\u0000\u0000\u0000\u1329\u132c\u0001\u0000\u0000\u0000\u132a\u1328"+
		"\u0001\u0000\u0000\u0000\u132a\u132b\u0001\u0000\u0000\u0000\u132b\u1332"+
		"\u0001\u0000\u0000\u0000\u132c\u132a\u0001\u0000\u0000\u0000\u132d\u132f"+
		"\u0005\u0001\u0000\u0000\u132e\u1330\u0005\u01cb\u0000\u0000\u132f\u132e"+
		"\u0001\u0000\u0000\u0000\u132f\u1330\u0001\u0000\u0000\u0000\u1330\u1332"+
		"\u0001\u0000\u0000\u0000\u1331\u1325\u0001\u0000\u0000\u0000\u1331\u132d"+
		"\u0001\u0000\u0000\u0000\u1332\u1333\u0001\u0000\u0000\u0000\u1333\u1334"+
		"\u0005]\u0000\u0000\u1334\u1335\u0005\u00e4\u0000\u0000\u1335\u1336\u0003"+
		"\u0270\u0138\u0000\u1336\u1337\u00052\u0000\u0000\u1337\u1339\u0003\u0178"+
		"\u00bc\u0000\u1338\u133a\u0005\u00c1\u0000\u0000\u1339\u1338\u0001\u0000"+
		"\u0000\u0000\u1339\u133a\u0001\u0000\u0000\u0000\u133a\u01a3\u0001\u0000"+
		"\u0000\u0000\u133b\u133c\u0005\u01ee\u0000\u0000\u133c\u133d\u0005\u00ac"+
		"\u0000\u0000\u133d\u133e\u0003\u02bc\u015e\u0000\u133e\u133f\u00052\u0000"+
		"\u0000\u133f\u1340\u0003\u0178\u00bc\u0000\u1340\u01a5\u0001\u0000\u0000"+
		"\u0000\u1341\u1343\u0005\u01f2\u0000\u0000\u1342\u1344\u0007\u0005\u0000"+
		"\u0000\u1343\u1342\u0001\u0000\u0000\u0000\u1343\u1344\u0001\u0000\u0000"+
		"\u0000\u1344\u01a7\u0001\u0000\u0000\u0000\u1345\u1346\u0005\u01f2\u0000"+
		"\u0000\u1346\u1348\u0005\u0083\u0000\u0000\u1347\u1349\u0005\u01fa\u0000"+
		"\u0000\u1348\u1347\u0001\u0000\u0000\u0000\u1348\u1349\u0001\u0000\u0000"+
		"\u0000\u1349\u134a\u0001\u0000\u0000\u0000\u134a\u134b\u0003\u02c4\u0162"+
		"\u0000\u134b\u01a9\u0001\u0000\u0000\u0000\u134c\u134d\u0005\u01fa\u0000"+
		"\u0000\u134d\u134e\u0003\u02c4\u0162\u0000\u134e\u01ab\u0001\u0000\u0000"+
		"\u0000\u134f\u1351\u0005\u0094\u0000\u0000\u1350\u1352\u0003\u024e\u0127"+
		"\u0000\u1351\u1350\u0001\u0000\u0000\u0000\u1351\u1352\u0001\u0000\u0000"+
		"\u0000\u1352\u1353\u0001\u0000\u0000\u0000\u1353\u1354\u0003\u0254\u012a"+
		"\u0000\u1354\u1355\u0005\u0005\u0000\u0000\u1355\u1356\u0005\u0297\u0000"+
		"\u0000\u1356\u1357\u0003\u01b0\u00d8\u0000\u1357\u1361\u0005\u0298\u0000"+
		"\u0000\u1358\u1359\u0005\u0292\u0000\u0000\u1359\u135a\u0003\u0254\u012a"+
		"\u0000\u135a\u135b\u0005\u0005\u0000\u0000\u135b\u135c\u0005\u0297\u0000"+
		"\u0000\u135c\u135d\u0003\u01b0\u00d8\u0000\u135d\u135e\u0005\u0298\u0000"+
		"\u0000\u135e\u1360\u0001\u0000\u0000\u0000\u135f\u1358\u0001\u0000\u0000"+
		"\u0000\u1360\u1363\u0001\u0000\u0000\u0000\u1361\u135f\u0001\u0000\u0000"+
		"\u0000\u1361\u1362\u0001\u0000\u0000\u0000\u1362\u1364\u0001\u0000\u0000"+
		"\u0000\u1363\u1361\u0001\u0000\u0000\u0000\u1364\u1365\u0003\u01b0\u00d8"+
		"\u0000\u1365\u01ad\u0001\u0000\u0000\u0000\u1366\u1367\u0005\u00ab\u0000"+
		"\u0000\u1367\u136a\u0005\u010d\u0000\u0000\u1368\u136b\u0005\u0163\u0000"+
		"\u0000\u1369\u136b\u0003\u02ac\u0156\u0000\u136a\u1368\u0001\u0000\u0000"+
		"\u0000\u136a\u1369\u0001\u0000\u0000\u0000\u136b\u1370\u0001\u0000\u0000"+
		"\u0000\u136c\u136d\u0005\u00ab\u0000\u0000\u136d\u136e\u0005z\u0000\u0000"+
		"\u136e\u1370\u0003\u02a8\u0154\u0000\u136f\u1366\u0001\u0000\u0000\u0000"+
		"\u136f\u136c\u0001\u0000\u0000\u0000\u1370\u01af\u0001\u0000\u0000\u0000"+
		"\u1371\u1372\u0005\u0297\u0000\u0000\u1372\u1373\u0003\u01b0\u00d8\u0000"+
		"\u1373\u1374\u0005\u0298\u0000\u0000\u1374\u1384\u0001\u0000\u0000\u0000"+
		"\u1375\u1377\u0003\u01ae\u00d7\u0000\u1376\u1375\u0001\u0000\u0000\u0000"+
		"\u1376\u1377\u0001\u0000\u0000\u0000\u1377\u1378\u0001\u0000\u0000\u0000"+
		"\u1378\u1380\u0003\u01e6\u00f3\u0000\u1379\u137b\u0005\u0089\u0000\u0000"+
		"\u137a\u137c\u0007\u0017\u0000\u0000\u137b\u137a\u0001\u0000\u0000\u0000"+
		"\u137b\u137c\u0001\u0000\u0000\u0000\u137c\u137d\u0001\u0000\u0000\u0000"+
		"\u137d\u137f\u0003\u01e6\u00f3\u0000\u137e\u1379\u0001\u0000\u0000\u0000"+
		"\u137f\u1382\u0001\u0000\u0000\u0000\u1380\u137e\u0001\u0000\u0000\u0000"+
		"\u1380\u1381\u0001\u0000\u0000\u0000\u1381\u1384\u0001\u0000\u0000\u0000"+
		"\u1382\u1380\u0001\u0000\u0000\u0000\u1383\u1371\u0001\u0000\u0000\u0000"+
		"\u1383\u1376\u0001\u0000\u0000\u0000\u1384\u01b1\u0001\u0000\u0000\u0000"+
		"\u1385\u1386\u0005\u0208\u0000\u0000\u1386\u1387\u0005\u0271\u0000\u0000"+
		"\u1387\u1394\u0005\u0083\u0000\u0000\u1388\u1395\u0005\u0272\u0000\u0000"+
		"\u1389\u1395\u0005\u0276\u0000\u0000\u138a\u138d\u0005\u0275\u0000\u0000"+
		"\u138b\u138c\u0005\u0292\u0000\u0000\u138c\u138e\u0007\u0018\u0000\u0000"+
		"\u138d\u138b\u0001\u0000\u0000\u0000\u138d\u138e\u0001\u0000\u0000\u0000"+
		"\u138e\u1395\u0001\u0000\u0000\u0000\u138f\u1392\u0005\u0274\u0000\u0000"+
		"\u1390\u1391\u0005\u0292\u0000\u0000\u1391\u1393\u0007\u0018\u0000\u0000"+
		"\u1392\u1390\u0001\u0000\u0000\u0000\u1392\u1393\u0001\u0000\u0000\u0000"+
		"\u1393\u1395\u0001\u0000\u0000\u0000\u1394\u1388\u0001\u0000\u0000\u0000"+
		"\u1394\u1389\u0001\u0000\u0000\u0000\u1394\u138a\u0001\u0000\u0000\u0000"+
		"\u1394\u138f\u0001\u0000\u0000\u0000\u1395\u01b3\u0001\u0000\u0000\u0000"+
		"\u1396\u1397\u0005\u0208\u0000\u0000\u1397\u1398\u0005\u0268\u0000\u0000"+
		"\u1398\u1399\u0005\u0083\u0000\u0000\u1399\u139a\u0007\u0019\u0000\u0000"+
		"\u139a\u01b5\u0001\u0000\u0000\u0000\u139b\u139c\u0005\u0208\u0000\u0000"+
		"\u139c\u139d\u0005\u026e\u0000\u0000\u139d\u139e\u0005\u0083\u0000\u0000"+
		"\u139e\u139f\u0007\u001a\u0000\u0000\u139f\u01b7\u0001\u0000\u0000\u0000"+
		"\u13a0\u13a1\u0005\u0208\u0000\u0000\u13a1\u13a2\u0005\u026b\u0000\u0000"+
		"\u13a2\u13a3\u0005\u0083\u0000\u0000\u13a3\u13a4\u0003\u02c6\u0163\u0000"+
		"\u13a4\u01b9\u0001\u0000\u0000\u0000\u13a5\u13a6\u0005\u0208\u0000\u0000"+
		"\u13a6\u13bc\u0005\u01f0\u0000\u0000\u13a7\u13ac\u0003\u028c\u0146\u0000"+
		"\u13a8\u13a9\u0005\u0292\u0000\u0000\u13a9\u13ab\u0003\u028c\u0146\u0000"+
		"\u13aa\u13a8\u0001\u0000\u0000\u0000\u13ab\u13ae\u0001\u0000\u0000\u0000"+
		"\u13ac\u13aa\u0001\u0000\u0000\u0000\u13ac\u13ad\u0001\u0000\u0000\u0000"+
		"\u13ad\u13bd\u0001\u0000\u0000\u0000\u13ae\u13ac\u0001\u0000\u0000\u0000"+
		"\u13af\u13bd\u0005T\u0000\u0000\u13b0\u13bd\u0005\u0001\u0000\u0000\u13b1"+
		"\u13b2\u0005\u0001\u0000\u0000\u13b2\u13b3\u0005+\u0000\u0000\u13b3\u13b8"+
		"\u0003\u028c\u0146\u0000\u13b4\u13b5\u0005\u0292\u0000\u0000\u13b5\u13b7"+
		"\u0003\u028c\u0146\u0000\u13b6\u13b4\u0001\u0000\u0000\u0000\u13b7\u13ba"+
		"\u0001\u0000\u0000\u0000\u13b8\u13b6\u0001\u0000\u0000\u0000\u13b8\u13b9"+
		"\u0001\u0000\u0000\u0000\u13b9\u13bd\u0001\u0000\u0000\u0000\u13ba\u13b8"+
		"\u0001\u0000\u0000\u0000\u13bb\u13bd\u0005$\u0000\u0000\u13bc\u13a7\u0001"+
		"\u0000\u0000\u0000\u13bc\u13af\u0001\u0000\u0000\u0000\u13bc\u13b0\u0001"+
		"\u0000\u0000\u0000\u13bc\u13b1\u0001\u0000\u0000\u0000\u13bc\u13bb\u0001"+
		"\u0000\u0000\u0000\u13bd\u01bb\u0001\u0000\u0000\u0000\u13be\u13bf\u0005"+
		"\u0208\u0000\u0000\u13bf\u13c0\u0005\u01fc\u0000\u0000\u13c0\u13ca\u0007"+
		"\u001b\u0000\u0000\u13c1\u13c6\u0003\u0292\u0149\u0000\u13c2\u13c3\u0005"+
		"\u0292\u0000\u0000\u13c3\u13c5\u0003\u0292\u0149\u0000\u13c4\u13c2\u0001"+
		"\u0000\u0000\u0000\u13c5\u13c8\u0001\u0000\u0000\u0000\u13c6\u13c4\u0001"+
		"\u0000\u0000\u0000\u13c6\u13c7\u0001\u0000\u0000\u0000\u13c7\u13cb\u0001"+
		"\u0000\u0000\u0000\u13c8\u13c6\u0001\u0000\u0000\u0000\u13c9\u13cb\u0005"+
		"$\u0000\u0000\u13ca\u13c1\u0001\u0000\u0000\u0000\u13ca\u13c9\u0001\u0000"+
		"\u0000\u0000\u13cb\u01bd\u0001\u0000\u0000\u0000\u13cc\u13cd\u0005\u0208"+
		"\u0000\u0000\u13cd\u13ce\u0005\u0207\u0000\u0000\u13ce\u13cf\u0005\u026a"+
		"\u0000\u0000\u13cf\u13d0\u0005\u0083\u0000\u0000\u13d0\u13d1\u0007\u0019"+
		"\u0000\u0000\u13d1\u01bf\u0001\u0000\u0000\u0000\u13d2\u13d3\u0005\u0208"+
		"\u0000\u0000\u13d3\u13d4\u0005\u0207\u0000\u0000\u13d4\u13d5\u0005\u00c5"+
		"\u0000\u0000\u13d5\u13d6\u0005\u0005\u0000\u0000\u13d6\u13df\u0005\u0233"+
		"\u0000\u0000\u13d7\u13d9\u0005\u0292\u0000\u0000\u13d8\u13d7\u0001\u0000"+
		"\u0000\u0000\u13d8\u13d9\u0001\u0000\u0000\u0000\u13d9\u13da\u0001\u0000"+
		"\u0000\u0000\u13da\u13e0\u0003\u02e0\u0170\u0000\u13db\u13dd\u0005\u0292"+
		"\u0000\u0000\u13dc\u13db\u0001\u0000\u0000\u0000\u13dc\u13dd\u0001\u0000"+
		"\u0000\u0000\u13dd\u13de\u0001\u0000\u0000\u0000\u13de\u13e0\u0003\u02e2"+
		"\u0171\u0000\u13df\u13d8\u0001\u0000\u0000\u0000\u13df\u13dc\u0001\u0000"+
		"\u0000\u0000\u13e0\u13e1\u0001\u0000\u0000\u0000\u13e1\u13df\u0001\u0000"+
		"\u0000\u0000\u13e1\u13e2\u0001\u0000\u0000\u0000\u13e2\u01c1\u0001\u0000"+
		"\u0000\u0000\u13e3\u13e4\u0005\u0208\u0000\u0000\u13e4\u13e5\u0005\u0207"+
		"\u0000\u0000\u13e5\u13ea\u0005\u0132\u0000\u0000\u13e6\u13eb\u0003\u02c6"+
		"\u0163\u0000\u13e7\u13eb\u0005T\u0000\u0000\u13e8\u13e9\u0005\u02a2\u0000"+
		"\u0000\u13e9\u13eb\u0005$\u0000\u0000\u13ea\u13e6\u0001\u0000\u0000\u0000"+
		"\u13ea\u13e7\u0001\u0000\u0000\u0000\u13ea\u13e8\u0001\u0000\u0000\u0000"+
		"\u13eb\u01c3\u0001\u0000\u0000\u0000\u13ec\u13ed\u0005\u0208\u0000\u0000"+
		"\u13ed\u13ee\u0005\u0207\u0000\u0000\u13ee\u13f3\u0005\u0149\u0000\u0000"+
		"\u13ef\u13f4\u0003\u02c6\u0163\u0000\u13f0\u13f4\u0005T\u0000\u0000\u13f1"+
		"\u13f2\u0005\u02a2\u0000\u0000\u13f2\u13f4\u0005$\u0000\u0000\u13f3\u13ef"+
		"\u0001\u0000\u0000\u0000\u13f3\u13f0\u0001\u0000\u0000\u0000\u13f3\u13f1"+
		"\u0001\u0000\u0000\u0000\u13f4\u01c5\u0001\u0000\u0000\u0000\u13f5\u13f6"+
		"\u0005\u0208\u0000\u0000\u13f6\u13f7\u0005\u0207\u0000\u0000\u13f7\u13fc"+
		"\u0005\u017b\u0000\u0000\u13f8\u13fd\u0003\u02c6\u0163\u0000\u13f9\u13fd"+
		"\u0005T\u0000\u0000\u13fa\u13fb\u0005\u02a2\u0000\u0000\u13fb\u13fd\u0005"+
		"$\u0000\u0000\u13fc\u13f8\u0001\u0000\u0000\u0000\u13fc\u13f9\u0001\u0000"+
		"\u0000\u0000\u13fc\u13fa\u0001\u0000\u0000\u0000\u13fd\u01c7\u0001\u0000"+
		"\u0000\u0000\u13fe\u13ff\u0005\u0208\u0000\u0000\u13ff\u1400\u0005\u0207"+
		"\u0000\u0000\u1400\u1401\u0005\u026c\u0000\u0000\u1401\u1402\u0005\u0083"+
		"\u0000\u0000\u1402\u1403\u0007\u0019\u0000\u0000\u1403\u01c9\u0001\u0000"+
		"\u0000\u0000\u1404\u1405\u0005\u0208\u0000\u0000\u1405\u1406\u0005\u0207"+
		"\u0000\u0000\u1406\u1407\u0005\u026d\u0000\u0000\u1407\u140a\u0005\u02a2"+
		"\u0000\u0000\u1408\u140b\u0003\u02c6\u0163\u0000\u1409\u140b\u0005$\u0000"+
		"\u0000\u140a\u1408\u0001\u0000\u0000\u0000\u140a\u1409\u0001\u0000\u0000"+
		"\u0000\u140b\u01cb\u0001\u0000\u0000\u0000\u140c\u140d\u0005\u0208\u0000"+
		"\u0000\u140d\u140e\u0005\u0207\u0000\u0000\u140e\u1413\u0005\u01f6\u0000"+
		"\u0000\u140f\u1414\u0003\u02c6\u0163\u0000\u1410\u1414\u0005T\u0000\u0000"+
		"\u1411\u1412\u0005\u02a2\u0000\u0000\u1412\u1414\u0005$\u0000\u0000\u1413"+
		"\u140f\u0001\u0000\u0000\u0000\u1413\u1410\u0001\u0000\u0000\u0000\u1413"+
		"\u1411\u0001\u0000\u0000\u0000\u1414\u01cd\u0001\u0000\u0000\u0000\u1415"+
		"\u1416\u0005\u0208\u0000\u0000\u1416\u1417\u0005\u0207\u0000\u0000\u1417"+
		"\u141a\u0005\u022b\u0000\u0000\u1418\u141b\u0003\u02c6\u0163\u0000\u1419"+
		"\u141b\u0005T\u0000\u0000\u141a\u1418\u0001\u0000\u0000\u0000\u141a\u1419"+
		"\u0001\u0000\u0000\u0000\u141b\u01cf\u0001\u0000\u0000\u0000\u141c\u141d"+
		"\u0005\u0208\u0000\u0000\u141d\u141e\u0005\u0269\u0000\u0000\u141e\u141f"+
		"\u0005\u0083\u0000\u0000\u141f\u1420\u0007\u0019\u0000\u0000\u1420\u01d1"+
		"\u0001\u0000\u0000\u0000\u1421\u1425\u0005\u0208\u0000\u0000\u1422\u1423"+
		"\u0005z\u0000\u0000\u1423\u1426\u0005\u025b\u0000\u0000\u1424\u1426\u0005"+
		"\u0081\u0000\u0000\u1425\u1422\u0001\u0000\u0000\u0000\u1425\u1424\u0001"+
		"\u0000\u0000\u0000\u1426\u1427\u0001\u0000\u0000\u0000\u1427\u1429\u0005"+
		"\u0083\u0000\u0000\u1428\u142a\u0005@\u0000\u0000\u1429\u1428\u0001\u0000"+
		"\u0000\u0000\u1429\u142a\u0001\u0000\u0000\u0000\u142a\u142b\u0001\u0000"+
		"\u0000\u0000\u142b\u142c\u0003\u02c6\u0163\u0000\u142c\u01d3\u0001\u0000"+
		"\u0000\u0000\u142d\u1430\u0005\u020d\u0000\u0000\u142e\u1431\u0005\u0001"+
		"\u0000\u0000\u142f\u1431\u0003\u02a0\u0150\u0000\u1430\u142e\u0001\u0000"+
		"\u0000\u0000\u1430\u142f\u0001\u0000\u0000\u0000\u1431\u01d5\u0001\u0000"+
		"\u0000\u0000\u1432\u1433\u0005\u020d\u0000\u0000\u1433\u1436\u0005\u00de"+
		"\u0000\u0000\u1434\u1437\u0005\u0001\u0000\u0000\u1435\u1437\u0003\u0298"+
		"\u014c\u0000\u1436\u1434\u0001\u0000\u0000\u0000\u1436\u1435\u0001\u0000"+
		"\u0000\u0000\u1437\u01d7\u0001\u0000\u0000\u0000\u1438\u1439\u0005\u020d"+
		"\u0000\u0000\u1439\u143a\u0005\u00e4\u0000\u0000\u143a\u143d\u0003\u0270"+
		"\u0138\u0000\u143b\u143e\u0005\u0001\u0000\u0000\u143c\u143e\u0003\u0298"+
		"\u014c\u0000\u143d\u143b\u0001\u0000\u0000\u0000\u143d\u143c\u0001\u0000"+
		"\u0000\u0000\u143e\u01d9\u0001\u0000\u0000\u0000\u143f\u1440\u0005\u020d"+
		"\u0000\u0000\u1440\u1441\u0005\u0192\u0000\u0000\u1441\u1444\u0003\u02a2"+
		"\u0151\u0000\u1442\u1445\u0005\u0001\u0000\u0000\u1443\u1445\u0003\u0298"+
		"\u014c\u0000\u1444\u1442\u0001\u0000\u0000\u0000\u1444\u1443\u0001\u0000"+
		"\u0000\u0000\u1445\u01db\u0001\u0000\u0000\u0000\u1446\u1447\u0005\u020d"+
		"\u0000\u0000\u1447\u144c\u0005\u0207\u0000\u0000\u1448\u144d\u0005\u0001"+
		"\u0000\u0000\u1449\u144a\u0005\u025c\u0000\u0000\u144a\u144d\u0005\u0001"+
		"\u0000\u0000\u144b\u144d\u0003\u0298\u014c\u0000\u144c\u1448\u0001\u0000"+
		"\u0000\u0000\u144c\u1449\u0001\u0000\u0000\u0000\u144c\u144b\u0001\u0000"+
		"\u0000\u0000\u144d\u01dd\u0001\u0000\u0000\u0000\u144e\u144f\u0005\u0218"+
		"\u0000\u0000\u144f\u1455\u0005\u0233\u0000\u0000\u1450\u1451\u0005\u015b"+
		"\u0000\u0000\u1451\u1452\u0005\u0165\u0000\u0000\u1452\u1453\u0003\u02e0"+
		"\u0170\u0000\u1453\u1454\u0003\u02e2\u0171\u0000\u1454\u1456\u0001\u0000"+
		"\u0000\u0000\u1455\u1450\u0001\u0000\u0000\u0000\u1455\u1456\u0001\u0000"+
		"\u0000\u0000\u1456\u01df\u0001\u0000\u0000\u0000\u1457\u1458\u0005\u0237"+
		"\u0000\u0000\u1458\u1459\u0005w\u0000\u0000\u1459\u145a\u0003\u0254\u012a"+
		"\u0000\u145a\u01e1\u0001\u0000\u0000\u0000\u145b\u145d\u0005\u0246\u0000"+
		"\u0000\u145c\u145e\u0003\u024e\u0127\u0000\u145d\u145c\u0001\u0000\u0000"+
		"\u0000\u145d\u145e\u0001\u0000\u0000\u0000\u145e\u145f\u0001\u0000\u0000"+
		"\u0000\u145f\u1461\u0003\u0254\u012a\u0000\u1460\u1462\u0003\u0240\u0120"+
		"\u0000\u1461\u1460\u0001\u0000\u0000\u0000\u1461\u1462\u0001\u0000\u0000"+
		"\u0000\u1462\u1463\u0001\u0000\u0000\u0000\u1463\u1464\u0005\u0208\u0000"+
		"\u0000\u1464\u1466\u0003\u0220\u0110\u0000\u1465\u1467\u0003\u01f2\u00f9"+
		"\u0000\u1466\u1465\u0001\u0000\u0000\u0000\u1466\u1467\u0001\u0000\u0000"+
		"\u0000\u1467\u1469\u0001\u0000\u0000\u0000\u1468\u146a\u0003\u0200\u0100"+
		"\u0000\u1469\u1468\u0001\u0000\u0000\u0000\u1469\u146a\u0001\u0000\u0000"+
		"\u0000\u146a\u01e3\u0001\u0000\u0000\u0000\u146b\u146c\u0005\u0297\u0000"+
		"\u0000\u146c\u146d\u0003\u01e4\u00f2\u0000\u146d\u146e\u0005\u0298\u0000"+
		"\u0000\u146e\u1473\u0001\u0000\u0000\u0000\u146f\u1470\u0003\u01ec\u00f6"+
		"\u0000\u1470\u1471\u0003\u01f2\u00f9\u0000\u1471\u1473\u0001\u0000\u0000"+
		"\u0000\u1472\u146b\u0001\u0000\u0000\u0000\u1472\u146f\u0001\u0000\u0000"+
		"\u0000\u1473\u01e5\u0001\u0000\u0000\u0000\u1474\u1475\u0005\u0297\u0000"+
		"\u0000\u1475\u1476\u0003\u01e6\u00f3\u0000\u1476\u1477\u0005\u0298\u0000"+
		"\u0000\u1477\u14b3\u0001\u0000\u0000\u0000\u1478\u147a\u0003\u01ec\u00f6"+
		"\u0000\u1479\u147b\u0003\u01f4\u00fa\u0000\u147a\u1479\u0001\u0000\u0000"+
		"\u0000\u147a\u147b\u0001\u0000\u0000\u0000\u147b\u147d\u0001\u0000\u0000"+
		"\u0000\u147c\u147e\u0003\u01f2\u00f9\u0000\u147d\u147c\u0001\u0000\u0000"+
		"\u0000\u147d\u147e\u0001\u0000\u0000\u0000\u147e\u1480\u0001\u0000\u0000"+
		"\u0000\u147f\u1481\u0003\u0200\u0100\u0000\u1480\u147f\u0001\u0000\u0000"+
		"\u0000\u1480\u1481\u0001\u0000\u0000\u0000\u1481\u1483\u0001\u0000\u0000"+
		"\u0000\u1482\u1484\u0003\u01f6\u00fb\u0000\u1483\u1482\u0001\u0000\u0000"+
		"\u0000\u1483\u1484\u0001\u0000\u0000\u0000\u1484\u1486\u0001\u0000\u0000"+
		"\u0000\u1485\u1487\u0003\u01fc\u00fe\u0000\u1486\u1485\u0001\u0000\u0000"+
		"\u0000\u1486\u1487\u0001\u0000\u0000\u0000\u1487\u1489\u0001\u0000\u0000"+
		"\u0000\u1488\u148a\u0003\u01fe\u00ff\u0000\u1489\u1488\u0001\u0000\u0000"+
		"\u0000\u1489\u148a\u0001\u0000\u0000\u0000\u148a\u148c\u0001\u0000\u0000"+
		"\u0000\u148b\u148d\u0003\u0204\u0102\u0000\u148c\u148b\u0001\u0000\u0000"+
		"\u0000\u148c\u148d\u0001\u0000\u0000\u0000\u148d\u1492\u0001\u0000\u0000"+
		"\u0000\u148e\u1490\u0005\u0089\u0000\u0000\u148f\u1491\u0007\u0017\u0000"+
		"\u0000\u1490\u148f\u0001\u0000\u0000\u0000\u1490\u1491\u0001\u0000\u0000"+
		"\u0000\u1491\u1493\u0001\u0000\u0000\u0000\u1492\u148e\u0001\u0000\u0000"+
		"\u0000\u1492\u1493\u0001\u0000\u0000\u0000\u1493\u1495\u0001\u0000\u0000"+
		"\u0000\u1494\u1496\u0003\u01f0\u00f8\u0000\u1495\u1494\u0001\u0000\u0000"+
		"\u0000\u1495\u1496\u0001\u0000\u0000\u0000\u1496\u1498\u0001\u0000\u0000"+
		"\u0000\u1497\u1499\u0003\u01ee\u00f7\u0000\u1498\u1497\u0001\u0000\u0000"+
		"\u0000\u1498\u1499\u0001\u0000\u0000\u0000\u1499\u149b\u0001\u0000\u0000"+
		"\u0000\u149a\u149c\u0003\u0202\u0101\u0000\u149b\u149a\u0001\u0000\u0000"+
		"\u0000\u149b\u149c\u0001\u0000\u0000\u0000\u149c\u149e\u0001\u0000\u0000"+
		"\u0000\u149d\u149f\u0003\u01ea\u00f5\u0000\u149e\u149d\u0001\u0000\u0000"+
		"\u0000\u149e\u149f\u0001\u0000\u0000\u0000\u149f\u14a1\u0001\u0000\u0000"+
		"\u0000\u14a0\u14a2\u0003\u01e8\u00f4\u0000\u14a1\u14a0\u0001\u0000\u0000"+
		"\u0000\u14a1\u14a2\u0001\u0000\u0000\u0000\u14a2\u14b0\u0001\u0000\u0000"+
		"\u0000\u14a3\u14a4\u00050\u0000\u0000\u14a4\u14ae\u0005\u0246\u0000\u0000"+
		"\u14a5\u14a6\u0005\u019d\u0000\u0000\u14a6\u14ab\u0003\u0254\u012a\u0000"+
		"\u14a7\u14a8\u0005\u0292\u0000\u0000\u14a8\u14aa\u0003\u0254\u012a\u0000"+
		"\u14a9\u14a7\u0001\u0000\u0000\u0000\u14aa\u14ad\u0001\u0000\u0000\u0000"+
		"\u14ab\u14a9\u0001\u0000\u0000\u0000\u14ab\u14ac\u0001\u0000\u0000\u0000"+
		"\u14ac\u14af\u0001\u0000\u0000\u0000\u14ad\u14ab\u0001\u0000\u0000\u0000"+
		"\u14ae\u14a5\u0001\u0000\u0000\u0000\u14ae\u14af\u0001\u0000\u0000\u0000"+
		"\u14af\u14b1\u0001\u0000\u0000\u0000\u14b0\u14a3\u0001\u0000\u0000\u0000"+
		"\u14b0\u14b1\u0001\u0000\u0000\u0000\u14b1\u14b3\u0001\u0000\u0000\u0000"+
		"\u14b2\u1474\u0001\u0000\u0000\u0000\u14b2\u1478\u0001\u0000\u0000\u0000"+
		"\u14b3\u01e7\u0001\u0000\u0000\u0000\u14b4\u14b5\u0005[\u0000\u0000\u14b5"+
		"\u14b6\u0003\u02ae\u0157\u0000\u14b6\u01e9\u0001\u0000\u0000\u0000\u14b7"+
		"\u14ba\u0005K\u0000\u0000\u14b8\u14bb\u0003\u02ae\u0157\u0000\u14b9\u14bb"+
		"\u0005\u0001\u0000\u0000\u14ba\u14b8\u0001\u0000\u0000\u0000\u14ba\u14b9"+
		"\u0001\u0000\u0000\u0000\u14bb\u01eb\u0001\u0000\u0000\u0000\u14bc\u14be"+
		"\u0005o\u0000\u0000\u14bd\u14bf\u0003\u024e\u0127\u0000\u14be\u14bd\u0001"+
		"\u0000\u0000\u0000\u14be\u14bf\u0001\u0000\u0000\u0000\u14bf\u14c1\u0001"+
		"\u0000\u0000\u0000\u14c0\u14c2\u0007\u0017\u0000\u0000\u14c1\u14c0\u0001"+
		"\u0000\u0000\u0000\u14c1\u14c2\u0001\u0000\u0000\u0000\u14c2\u14c3\u0001"+
		"\u0000\u0000\u0000\u14c3\u14c4\u0003\u021a\u010d\u0000\u14c4\u01ed\u0001"+
		"\u0000\u0000\u0000\u14c5\u14c6\u0005?\u0000\u0000\u14c6\u14c7\u0003\u01e6"+
		"\u00f3\u0000\u14c7\u01ef\u0001\u0000\u0000\u0000\u14c8\u14c9\u0005+\u0000"+
		"\u0000\u14c9\u14ca\u0003\u01e6\u00f3\u0000\u14ca\u01f1\u0001\u0000\u0000"+
		"\u0000\u14cb\u14cc\u00052\u0000\u0000\u14cc\u14d3\u0003\u0216\u010b\u0000"+
		"\u14cd\u14cf\u0005\u0292\u0000\u0000\u14ce\u14cd\u0001\u0000\u0000\u0000"+
		"\u14ce\u14cf\u0001\u0000\u0000\u0000\u14cf\u14d0\u0001\u0000\u0000\u0000"+
		"\u14d0\u14d2\u0003\u0216\u010b\u0000\u14d1\u14ce\u0001\u0000\u0000\u0000"+
		"\u14d2\u14d5\u0001\u0000\u0000\u0000\u14d3\u14d1\u0001\u0000\u0000\u0000"+
		"\u14d3\u14d4\u0001\u0000\u0000\u0000\u14d4\u14d7\u0001\u0000\u0000\u0000"+
		"\u14d5\u14d3\u0001\u0000\u0000\u0000\u14d6\u14d8\u0003\u0214\u010a\u0000"+
		"\u14d7\u14d6\u0001\u0000\u0000\u0000\u14d7\u14d8\u0001\u0000\u0000\u0000"+
		"\u14d8\u01f3\u0001\u0000\u0000\u0000\u14d9\u14db\u0005B\u0000\u0000\u14da"+
		"\u14dc\u0005w\u0000\u0000\u14db\u14da\u0001\u0000\u0000\u0000\u14db\u14dc"+
		"\u0001\u0000\u0000\u0000\u14dc\u14dd\u0001\u0000\u0000\u0000\u14dd\u14df"+
		"\u0003\u0254\u012a\u0000\u14de\u14e0\u0003\u0240\u0120\u0000\u14df\u14de"+
		"\u0001\u0000\u0000\u0000\u14df\u14e0\u0001\u0000\u0000\u0000\u14e0\u14f1"+
		"\u0001\u0000\u0000\u0000\u14e1\u14e3\u0005B\u0000\u0000\u14e2\u14e4\u0007"+
		"\u000f\u0000\u0000\u14e3\u14e2\u0001\u0000\u0000\u0000\u14e3\u14e4\u0001"+
		"\u0000\u0000\u0000\u14e4\u14e5\u0001\u0000\u0000\u0000\u14e5\u14e7\u0007"+
		"\n\u0000\u0000\u14e6\u14e8\u0005w\u0000\u0000\u14e7\u14e6\u0001\u0000"+
		"\u0000\u0000\u14e7\u14e8\u0001\u0000\u0000\u0000\u14e8\u14e9\u0001\u0000"+
		"\u0000\u0000\u14e9\u14ee\u0003\u0254\u012a\u0000\u14ea\u14eb\u0005]\u0000"+
		"\u0000\u14eb\u14ec\u0005\u00cf\u0000\u0000\u14ec\u14ed\u0007\u0010\u0000"+
		"\u0000\u14ed\u14ef\u0005\u01f4\u0000\u0000\u14ee\u14ea\u0001\u0000\u0000"+
		"\u0000\u14ee\u14ef\u0001\u0000\u0000\u0000\u14ef\u14f1\u0001\u0000\u0000"+
		"\u0000\u14f0\u14d9\u0001\u0000\u0000\u0000\u14f0\u14e1\u0001\u0000\u0000"+
		"\u0000\u14f1\u01f5\u0001\u0000\u0000\u0000\u14f2\u14f3\u0005{\u0000\u0000"+
		"\u14f3\u14f4\u0003\u0252\u0129\u0000\u14f4\u14f5\u0003\u0240\u0120\u0000"+
		"\u14f5\u14f6\u0003\u01f8\u00fc\u0000\u14f6\u14f7\u0005`\u0000\u0000\u14f7"+
		"\u14f8\u0005\u00ba\u0000\u0000\u14f8\u14f9\u0003\u00c4b\u0000\u14f9\u01f7"+
		"\u0001\u0000\u0000\u0000\u14fa\u14fb\u0005c\u0000\u0000\u14fb\u14ff\u0005"+
		"\u0297\u0000\u0000\u14fc\u14fd\u0005\u01ad\u0000\u0000\u14fd\u14fe\u0005"+
		"\u00ba\u0000\u0000\u14fe\u1500\u0003\u00c4b\u0000\u14ff\u14fc\u0001\u0000"+
		"\u0000\u0000\u14ff\u1500\u0001\u0000\u0000\u0000\u1500\u1502\u0001\u0000"+
		"\u0000\u0000\u1501\u1503\u0003\u0202\u0101\u0000\u1502\u1501\u0001\u0000"+
		"\u0000\u0000\u1502\u1503\u0001\u0000\u0000\u0000\u1503\u1504\u0001\u0000"+
		"\u0000\u0000\u1504\u1506\u0005\u0298\u0000\u0000\u1505\u1507\u0003\u01fa"+
		"\u00fd\u0000\u1506\u1505\u0001\u0000\u0000\u0000\u1506\u1507\u0001\u0000"+
		"\u0000\u0000\u1507\u01f9\u0001\u0000\u0000\u0000\u1508\u1509\u0005\u0005"+
		"\u0000\u0000\u1509\u150a\u0003\u00c4b\u0000\u150a\u01fb\u0001\u0000\u0000"+
		"\u0000\u150b\u150c\u00055\u0000\u0000\u150c\u150e\u0005\u00ba\u0000\u0000"+
		"\u150d\u150f\u0003\u024e\u0127\u0000\u150e\u150d\u0001\u0000\u0000\u0000"+
		"\u150e\u150f\u0001\u0000\u0000\u0000\u150f\u1510\u0001\u0000\u0000\u0000"+
		"\u1510\u1511\u0003\u0220\u0110\u0000\u1511\u01fd\u0001\u0000\u0000\u0000"+
		"\u1512\u1513\u00056\u0000\u0000\u1513\u1514\u0003\u0220\u0110\u0000\u1514"+
		"\u01ff\u0001\u0000\u0000\u0000\u1515\u1516\u0005\u0092\u0000\u0000\u1516"+
		"\u1517\u0003\u0212\u0109\u0000\u1517\u0201\u0001\u0000\u0000\u0000\u1518"+
		"\u1519\u0005`\u0000\u0000\u1519\u151a\u0005\u00ba\u0000\u0000\u151a\u151f"+
		"\u0003\u0210\u0108\u0000\u151b\u151c\u0005\u0292\u0000\u0000\u151c\u151e"+
		"\u0003\u0210\u0108\u0000\u151d\u151b\u0001\u0000\u0000\u0000\u151e\u1521"+
		"\u0001\u0000\u0000\u0000\u151f\u151d\u0001\u0000\u0000\u0000\u151f\u1520"+
		"\u0001\u0000\u0000\u0000\u1520\u0203\u0001\u0000\u0000\u0000\u1521\u151f"+
		"\u0001\u0000\u0000\u0000\u1522\u1523\u0005N\u0000\u0000\u1523\u152e\u0005"+
		"\u0297\u0000\u0000\u1524\u1525\u0005\u01ad\u0000\u0000\u1525\u1526\u0005"+
		"\u00ba\u0000\u0000\u1526\u152b\u0003\u0252\u0129\u0000\u1527\u1528\u0005"+
		"\u0292\u0000\u0000\u1528\u152a\u0003\u0252\u0129\u0000\u1529\u1527\u0001"+
		"\u0000\u0000\u0000\u152a\u152d\u0001\u0000\u0000\u0000\u152b\u1529\u0001"+
		"\u0000\u0000\u0000\u152b\u152c\u0001\u0000\u0000\u0000\u152c\u152f\u0001"+
		"\u0000\u0000\u0000\u152d\u152b\u0001\u0000\u0000\u0000\u152e\u1524\u0001"+
		"\u0000\u0000\u0000\u152e\u152f\u0001\u0000\u0000\u0000\u152f\u1530\u0001"+
		"\u0000\u0000\u0000\u1530\u1531\u0005`\u0000\u0000\u1531\u1532\u0005\u00ba"+
		"\u0000\u0000\u1532\u1537\u0003\u0252\u0129\u0000\u1533\u1534\u0005\u0292"+
		"\u0000\u0000\u1534\u1536\u0003\u0252\u0129\u0000\u1535\u1533\u0001\u0000"+
		"\u0000\u0000\u1536\u1539\u0001\u0000\u0000\u0000\u1537\u1535\u0001\u0000"+
		"\u0000\u0000\u1537\u1538\u0001\u0000\u0000\u0000\u1538\u153a\u0001\u0000"+
		"\u0000\u0000\u1539\u1537\u0001\u0000\u0000\u0000\u153a\u153b\u0005\u00ed"+
		"\u0000\u0000\u153b\u153c\u0003\u02c4\u0162\u0000\u153c\u153f\u0005\u0005"+
		"\u0000\u0000\u153d\u1540\u0003\u0226\u0113\u0000\u153e\u1540\u0003\u0212"+
		"\u0109\u0000\u153f\u153d\u0001\u0000\u0000\u0000\u153f\u153e\u0001\u0000"+
		"\u0000\u0000\u1540\u154a\u0001\u0000\u0000\u0000\u1541\u1542\u0005\u0292"+
		"\u0000\u0000\u1542\u1543\u0003\u02c4\u0162\u0000\u1543\u1546\u0005\u0005"+
		"\u0000\u0000\u1544\u1547\u0003\u0226\u0113\u0000\u1545\u1547\u0003\u0212"+
		"\u0109\u0000\u1546\u1544\u0001\u0000\u0000\u0000\u1546\u1545\u0001\u0000"+
		"\u0000\u0000\u1547\u1549\u0001\u0000\u0000\u0000\u1548\u1541\u0001\u0000"+
		"\u0000\u0000\u1549\u154c\u0001\u0000\u0000\u0000\u154a\u1548\u0001\u0000"+
		"\u0000\u0000\u154a\u154b\u0001\u0000\u0000\u0000\u154b\u154d\u0001\u0000"+
		"\u0000\u0000\u154c\u154a\u0001\u0000\u0000\u0000\u154d\u154e\u0005\u01bc"+
		"\u0000\u0000\u154e\u154f\u0003\u02c4\u0162\u0000\u154f\u1550\u0005\u0005"+
		"\u0000\u0000\u1550\u1551\u0005\u0297\u0000\u0000\u1551\u1552\u0003\u02c4"+
		"\u0162\u0000\u1552\u155c\u0005\u0298\u0000\u0000\u1553\u1554\u0005\u01f4"+
		"\u0000\u0000\u1554\u1555\u0005N\u0000\u0000\u1555\u155a\u0001\u0000\u0000"+
		"\u0000\u1556\u1557\u0005\u0001\u0000\u0000\u1557\u155b\u0005\u0111\u0000"+
		"\u0000\u1558\u1559\u0005\u0124\u0000\u0000\u1559\u155b\u0005\u0110\u0000"+
		"\u0000\u155a\u1556\u0001\u0000\u0000\u0000\u155a\u1558\u0001\u0000\u0000"+
		"\u0000\u155b\u155d\u0001\u0000\u0000\u0000\u155c\u1553\u0001\u0000\u0000"+
		"\u0000\u155c\u155d\u0001\u0000\u0000\u0000\u155d\u155e\u0001\u0000\u0000"+
		"\u0000\u155e\u155f\u0005\u0298\u0000\u0000\u155f\u0205\u0001\u0000\u0000"+
		"\u0000\u1560\u1561\u0005\u01ad\u0000\u0000\u1561\u1562\u0005\u00ba\u0000"+
		"\u0000\u1562\u1564\u0003\u0226\u0113\u0000\u1563\u1565\u0003\u01fc\u00fe"+
		"\u0000\u1564\u1563\u0001\u0000\u0000\u0000\u1564\u1565\u0001\u0000\u0000"+
		"\u0000\u1565\u1568\u0001\u0000\u0000\u0000\u1566\u1567\u0005\u009d\u0000"+
		"\u0000\u1567\u1569\u0003\u02ac\u0156\u0000\u1568\u1566\u0001\u0000\u0000"+
		"\u0000\u1568\u1569\u0001\u0000\u0000\u0000\u1569\u0207\u0001\u0000\u0000"+
		"\u0000\u156a\u156b\u0005\u0109\u0000\u0000\u156b\u156c\u0007\u001c\u0000"+
		"\u0000\u156c\u0209\u0001\u0000\u0000\u0000\u156d\u156e\u0005\u01a7\u0000"+
		"\u0000\u156e\u156f\u0005\u0083\u0000\u0000\u156f\u1570\u0003\u02b6\u015b"+
		"\u0000\u1570\u020b\u0001\u0000\u0000\u0000\u1571\u1572\u0005\u01e3\u0000"+
		"\u0000\u1572\u1573\u0005\u0083\u0000\u0000\u1573\u1574\u0003\u024a\u0125"+
		"\u0000\u1574\u020d\u0001\u0000\u0000\u0000\u1575\u1576\u0005\u0208\u0000"+
		"\u0000\u1576\u1577\u0005n\u0000\u0000\u1577\u1578\u0003\u0292\u0149\u0000"+
		"\u1578\u020f\u0001\u0000\u0000\u0000\u1579\u157b\u0003\u0226\u0113\u0000"+
		"\u157a\u157c\u0007\u001d\u0000\u0000\u157b\u157a\u0001\u0000\u0000\u0000"+
		"\u157b\u157c\u0001\u0000\u0000\u0000\u157c\u0211\u0001\u0000\u0000\u0000"+
		"\u157d\u157e\u0005\u0297\u0000\u0000\u157e\u157f\u0003\u0212\u0109\u0000"+
		"\u157f\u1580\u0005\u0298\u0000\u0000\u1580\u158d\u0001\u0000\u0000\u0000"+
		"\u1581\u1584\u0003\u0226\u0113\u0000\u1582\u1584\u0003\u022a\u0115\u0000"+
		"\u1583\u1581\u0001\u0000\u0000\u0000\u1583\u1582\u0001\u0000\u0000\u0000"+
		"\u1584\u1589\u0001\u0000\u0000\u0000\u1585\u1586\u0007\u001e\u0000\u0000"+
		"\u1586\u1588\u0003\u0212\u0109\u0000\u1587\u1585\u0001\u0000\u0000\u0000"+
		"\u1588\u158b\u0001\u0000\u0000\u0000\u1589\u1587\u0001\u0000\u0000\u0000"+
		"\u1589\u158a\u0001\u0000\u0000\u0000\u158a\u158d\u0001\u0000\u0000\u0000"+
		"\u158b\u1589\u0001\u0000\u0000\u0000\u158c\u157d\u0001\u0000\u0000\u0000"+
		"\u158c\u1583\u0001\u0000\u0000\u0000\u158d\u0213\u0001\u0000\u0000\u0000"+
		"\u158e\u158f\u0005\u0226\u0000\u0000\u158f\u1590\u0005\u0297\u0000\u0000"+
		"\u1590\u1591\u0005\u02c4\u0000\u0000\u1591\u1592\u0005\u0298\u0000\u0000"+
		"\u1592\u0215\u0001\u0000\u0000\u0000\u1593\u1594\u0005\u0297\u0000\u0000"+
		"\u1594\u1595\u0003\u0216\u010b\u0000\u1595\u1597\u0005\u0298\u0000\u0000"+
		"\u1596\u1598\u0003\u0240\u0120\u0000\u1597\u1596\u0001\u0000\u0000\u0000"+
		"\u1597\u1598\u0001\u0000\u0000\u0000\u1598\u15a2\u0001\u0000\u0000\u0000"+
		"\u1599\u159d\u0003\u01b0\u00d8\u0000\u159a\u159d\u0003\u0218\u010c\u0000"+
		"\u159b\u159d\u0003\u0254\u012a\u0000\u159c\u1599\u0001\u0000\u0000\u0000"+
		"\u159c\u159a\u0001\u0000\u0000\u0000\u159c\u159b\u0001\u0000\u0000\u0000"+
		"\u159d\u159f\u0001\u0000\u0000\u0000\u159e\u15a0\u0003\u0240\u0120\u0000"+
		"\u159f\u159e\u0001\u0000\u0000\u0000\u159f\u15a0\u0001\u0000\u0000\u0000"+
		"\u15a0\u15a2\u0001\u0000\u0000\u0000\u15a1\u1593\u0001\u0000\u0000\u0000"+
		"\u15a1\u159c\u0001\u0000\u0000\u0000\u15a2\u0217\u0001\u0000\u0000\u0000"+
		"\u15a3\u15b3\u0005;\u0000\u0000\u15a4\u15a6\u0005H\u0000\u0000\u15a5\u15a7"+
		"\u0005b\u0000\u0000\u15a6\u15a5\u0001\u0000\u0000\u0000\u15a6\u15a7\u0001"+
		"\u0000\u0000\u0000\u15a7\u15b3\u0001\u0000\u0000\u0000\u15a8\u15aa\u0005"+
		"l\u0000\u0000\u15a9\u15ab\u0005b\u0000\u0000\u15aa\u15a9\u0001\u0000\u0000"+
		"\u0000\u15aa\u15ab\u0001\u0000\u0000\u0000\u15ab\u15b3\u0001\u0000\u0000"+
		"\u0000\u15ac\u15ae\u00053\u0000\u0000\u15ad\u15af\u0005b\u0000\u0000\u15ae"+
		"\u15ad\u0001\u0000\u0000\u0000\u15ae\u15af\u0001\u0000\u0000\u0000\u15af"+
		"\u15b3\u0001\u0000\u0000\u0000\u15b0\u15b3\u0005Q\u0000\u0000\u15b1\u15b3"+
		"\u0005\u0019\u0000\u0000\u15b2\u15a3\u0001\u0000\u0000\u0000\u15b2\u15a4"+
		"\u0001\u0000\u0000\u0000\u15b2\u15a8\u0001\u0000\u0000\u0000\u15b2\u15ac"+
		"\u0001\u0000\u0000\u0000\u15b2\u15b0\u0001\u0000\u0000\u0000\u15b2\u15b1"+
		"\u0001\u0000\u0000\u0000\u15b2\u15b3\u0001\u0000\u0000\u0000\u15b3\u15b4"+
		"\u0001\u0000\u0000\u0000\u15b4\u15b5\u0005E\u0000\u0000\u15b5\u15b7\u0003"+
		"\u0254\u012a\u0000\u15b6\u15b8\u0003\u0240\u0120\u0000\u15b7\u15b6\u0001"+
		"\u0000\u0000\u0000\u15b7\u15b8\u0001\u0000\u0000\u0000\u15b8\u15ba\u0001"+
		"\u0000\u0000\u0000\u15b9\u15bb\u0003\u024e\u0127\u0000\u15ba\u15b9\u0001"+
		"\u0000\u0000\u0000\u15ba\u15bb\u0001\u0000\u0000\u0000\u15bb\u15bd\u0001"+
		"\u0000\u0000\u0000\u15bc\u15be\u0003\u0214\u010a\u0000\u15bd\u15bc\u0001"+
		"\u0000\u0000\u0000\u15bd\u15be\u0001\u0000\u0000\u0000\u15be\u15c0\u0001"+
		"\u0000\u0000\u0000\u15bf\u15c1\u0003\u0230\u0118\u0000\u15c0\u15bf\u0001"+
		"\u0000\u0000\u0000\u15c0\u15c1\u0001\u0000\u0000\u0000\u15c1\u0219\u0001"+
		"\u0000\u0000\u0000\u15c2\u15c7\u0003\u021c\u010e\u0000\u15c3\u15c4\u0005"+
		"\u0292\u0000\u0000\u15c4\u15c6\u0003\u021c\u010e\u0000\u15c5\u15c3\u0001"+
		"\u0000\u0000\u0000\u15c6\u15c9\u0001\u0000\u0000\u0000\u15c7\u15c5\u0001"+
		"\u0000\u0000\u0000\u15c7\u15c8\u0001\u0000\u0000\u0000\u15c8\u021b\u0001"+
		"\u0000\u0000\u0000\u15c9\u15c7\u0001\u0000\u0000\u0000\u15ca\u15d0\u0003"+
		"\u02b0\u0158\u0000\u15cb\u15cd\u0003\u0226\u0113\u0000\u15cc\u15ce\u0003"+
		"\u0240\u0120\u0000\u15cd\u15cc\u0001\u0000\u0000\u0000\u15cd\u15ce\u0001"+
		"\u0000\u0000\u0000\u15ce\u15d0\u0001\u0000\u0000\u0000\u15cf\u15ca\u0001"+
		"\u0000\u0000\u0000\u15cf\u15cb\u0001\u0000\u0000\u0000\u15d0\u021d\u0001"+
		"\u0000\u0000\u0000\u15d1\u15d2\u0001\u0000\u0000\u0000\u15d2\u021f\u0001"+
		"\u0000\u0000\u0000\u15d3\u15d8\u0003\u0226\u0113\u0000\u15d4\u15d5\u0005"+
		"\u0292\u0000\u0000\u15d5\u15d7\u0003\u0226\u0113\u0000\u15d6\u15d4\u0001"+
		"\u0000\u0000\u0000\u15d7\u15da\u0001\u0000\u0000\u0000\u15d8\u15d6\u0001"+
		"\u0000\u0000\u0000\u15d8\u15d9\u0001\u0000\u0000\u0000\u15d9\u0221\u0001"+
		"\u0000\u0000\u0000\u15da\u15d8\u0001\u0000\u0000\u0000\u15db\u15dc\u0005"+
		"\u0296\u0000\u0000\u15dc\u15dd\u0003\u02e6\u0173\u0000\u15dd\u0223\u0001"+
		"\u0000\u0000\u0000\u15de\u15df\u0005\u000f\u0000\u0000\u15df\u15e0\u0005"+
		"\u0297\u0000\u0000\u15e0\u15e1\u0003\u0226\u0113\u0000\u15e1\u15e2\u0005"+
		"\u0005\u0000\u0000\u15e2\u15e3\u0003\u02e6\u0173\u0000\u15e3\u15e4\u0005"+
		"\u0298\u0000\u0000\u15e4\u15e9\u0001\u0000\u0000\u0000\u15e5\u15e6\u0003"+
		"\u02e6\u0173\u0000\u15e6\u15e7\u0003\u02a8\u0154\u0000\u15e7\u15e9\u0001"+
		"\u0000\u0000\u0000\u15e8\u15de\u0001\u0000\u0000\u0000\u15e8\u15e5\u0001"+
		"\u0000\u0000\u0000\u15e9\u0225\u0001\u0000\u0000\u0000\u15ea\u15eb\u0005"+
		"\u0297\u0000\u0000\u15eb\u15ec\u0003\u0226\u0113\u0000\u15ec\u15ee\u0005"+
		"\u0298\u0000\u0000\u15ed\u15ef\u0003\u0222\u0111\u0000\u15ee\u15ed\u0001"+
		"\u0000\u0000\u0000\u15ee\u15ef\u0001\u0000\u0000\u0000\u15ef\u1606\u0001"+
		"\u0000\u0000\u0000\u15f0\u15f9\u0003\u0224\u0112\u0000\u15f1\u15f9\u0003"+
		"\u0242\u0121\u0000\u15f2\u15f9\u0003\u0228\u0114\u0000\u15f3\u15f9\u0003"+
		"\u02ac\u0156\u0000\u15f4\u15f9\u0003\u0252\u0129\u0000\u15f5\u15f9\u0003"+
		"\u023e\u011f\u0000\u15f6\u15f9\u0003\u01e6\u00f3\u0000\u15f7\u15f9\u0003"+
		"\u02c6\u0163\u0000\u15f8\u15f0\u0001\u0000\u0000\u0000\u15f8\u15f1\u0001"+
		"\u0000\u0000\u0000\u15f8\u15f2\u0001\u0000\u0000\u0000\u15f8\u15f3\u0001"+
		"\u0000\u0000\u0000\u15f8\u15f4\u0001\u0000\u0000\u0000\u15f8\u15f5\u0001"+
		"\u0000\u0000\u0000\u15f8\u15f6\u0001\u0000\u0000\u0000\u15f8\u15f7\u0001"+
		"\u0000\u0000\u0000\u15f9\u15fb\u0001\u0000\u0000\u0000\u15fa\u15fc\u0003"+
		"\u0222\u0111\u0000\u15fb\u15fa\u0001\u0000\u0000\u0000\u15fb\u15fc\u0001"+
		"\u0000\u0000\u0000\u15fc\u1602\u0001\u0000\u0000\u0000\u15fd\u15fe\u0003"+
		"\u02d4\u016a\u0000\u15fe\u15ff\u0003\u0226\u0113\u0000\u15ff\u1601\u0001"+
		"\u0000\u0000\u0000\u1600\u15fd\u0001\u0000\u0000\u0000\u1601\u1604\u0001"+
		"\u0000\u0000\u0000\u1602\u1600\u0001\u0000\u0000\u0000\u1602\u1603\u0001"+
		"\u0000\u0000\u0000\u1603\u1606\u0001\u0000\u0000\u0000\u1604\u1602\u0001"+
		"\u0000\u0000\u0000\u1605\u15ea\u0001\u0000\u0000\u0000\u1605\u15f8\u0001"+
		"\u0000\u0000\u0000\u1606\u0227\u0001\u0000\u0000\u0000\u1607\u1608\u0005"+
		"\u0004\u0000\u0000\u1608\u1611\u0005\u02b0\u0000\u0000\u1609\u160e\u0003"+
		"\u0226\u0113\u0000\u160a\u160b\u0005\u0292\u0000\u0000\u160b\u160d\u0003"+
		"\u0226\u0113\u0000\u160c\u160a\u0001\u0000\u0000\u0000\u160d\u1610\u0001"+
		"\u0000\u0000\u0000\u160e\u160c\u0001\u0000\u0000\u0000\u160e\u160f\u0001"+
		"\u0000\u0000\u0000\u160f\u1612\u0001\u0000\u0000\u0000\u1610\u160e\u0001"+
		"\u0000\u0000\u0000\u1611\u1609\u0001\u0000\u0000\u0000\u1611\u1612\u0001"+
		"\u0000\u0000\u0000\u1612\u1613\u0001\u0000\u0000\u0000\u1613\u1614\u0005"+
		"\u02b1\u0000\u0000\u1614\u0229\u0001\u0000\u0000\u0000\u1615\u161d\u0003"+
		"\u023a\u011d\u0000\u1616\u161d\u0003\u023c\u011e\u0000\u1617\u161d\u0003"+
		"\u0234\u011a\u0000\u1618\u161d\u0003\u0236\u011b\u0000\u1619\u161d\u0003"+
		"\u0232\u0119\u0000\u161a\u161d\u0003\u022e\u0117\u0000\u161b\u161d\u0003"+
		"\u022c\u0116\u0000\u161c\u1615\u0001\u0000\u0000\u0000\u161c\u1616\u0001"+
		"\u0000\u0000\u0000\u161c\u1617\u0001\u0000\u0000\u0000\u161c\u1618\u0001"+
		"\u0000\u0000\u0000\u161c\u1619\u0001\u0000\u0000\u0000\u161c\u161a\u0001"+
		"\u0000\u0000\u0000\u161c\u161b\u0001\u0000\u0000\u0000\u161d\u022b\u0001"+
		"\u0000\u0000\u0000\u161e\u161f\u0003\u0226\u0113\u0000\u161f\u1620\u0005"+
		"C\u0000\u0000\u1620\u1621\u0003\u02cc\u0166\u0000\u1621\u022d\u0001\u0000"+
		"\u0000\u0000\u1622\u1624\u0003\u0226\u0113\u0000\u1623\u1625\u0005U\u0000"+
		"\u0000\u1624\u1623\u0001\u0000\u0000\u0000\u1624\u1625\u0001\u0000\u0000"+
		"\u0000\u1625\u1626\u0001\u0000\u0000\u0000\u1626\u1627\u0007\u001f\u0000"+
		"\u0000\u1627\u162a\u0003\u0226\u0113\u0000\u1628\u1629\u0005\u010f\u0000"+
		"\u0000\u1629\u162b\u0003\u02c6\u0163\u0000\u162a\u1628\u0001\u0000\u0000"+
		"\u0000\u162a\u162b\u0001\u0000\u0000\u0000\u162b\u022f\u0001\u0000\u0000"+
		"\u0000\u162c\u162d\u0005]\u0000\u0000\u162d\u1632\u0003\u0226\u0113\u0000"+
		"\u162e\u162f\u0007\u001e\u0000\u0000\u162f\u1631\u0003\u0226\u0113\u0000"+
		"\u1630\u162e\u0001\u0000\u0000\u0000\u1631\u1634\u0001\u0000\u0000\u0000"+
		"\u1632\u1630\u0001\u0000\u0000\u0000\u1632\u1633\u0001\u0000\u0000\u0000"+
		"\u1633\u0231\u0001\u0000\u0000\u0000\u1634\u1632\u0001\u0000\u0000\u0000"+
		"\u1635\u1636\u0003\u0252\u0129\u0000\u1636\u1637\u0005\u01c8\u0000\u0000"+
		"\u1637\u1638\u0005\u024c\u0000\u0000\u1638\u1639\u0003\u0252\u0129\u0000"+
		"\u1639\u0233\u0001\u0000\u0000\u0000\u163a\u163b\u0003\u0226\u0113\u0000"+
		"\u163b\u163c\u0003\u02d4\u016a\u0000\u163c\u163d\u0003\u0226\u0113\u0000"+
		"\u163d\u0235\u0001\u0000\u0000\u0000\u163e\u163f\u0003\u00c4b\u0000\u163f"+
		"\u1641\u00059\u0000\u0000\u1640\u1642\u0005U\u0000\u0000\u1641\u1640\u0001"+
		"\u0000\u0000\u0000\u1641\u1642\u0001\u0000\u0000\u0000\u1642\u1643\u0001"+
		"\u0000\u0000\u0000\u1643\u1644\u0005\u0297\u0000\u0000\u1644\u1645\u0003"+
		"\u0220\u0110\u0000\u1645\u1646\u0005\u0298\u0000\u0000\u1646\u0237\u0001"+
		"\u0000\u0000\u0000\u1647\u164d\u0003\u02ac\u0156\u0000\u1648\u1649\u0003"+
		"\u02a8\u0154\u0000\u1649\u164a\u0005C\u0000\u0000\u164a\u164b\u0003\u02cc"+
		"\u0166\u0000\u164b\u164d\u0001\u0000\u0000\u0000\u164c\u1647\u0001\u0000"+
		"\u0000\u0000\u164c\u1648\u0001\u0000\u0000\u0000\u164d\u0239\u0001\u0000"+
		"\u0000\u0000\u164e\u1650\u0003\u0226\u0113\u0000\u164f\u1651\u0005\b\u0000"+
		"\u0000\u1650\u164f\u0001\u0000\u0000\u0000\u1650\u1651\u0001\u0000\u0000"+
		"\u0000\u1651\u1652\u0001\u0000\u0000\u0000\u1652\u1653\u0003\u0226\u0113"+
		"\u0000\u1653\u1654\u0005\u0002\u0000\u0000\u1654\u1655\u0003\u0226\u0113"+
		"\u0000\u1655\u023b\u0001\u0000\u0000\u0000\u1656\u1657\u0003\u0226\u0113"+
		"\u0000\u1657\u1659\u0005C\u0000\u0000\u1658\u165a\u0005U\u0000\u0000\u1659"+
		"\u1658\u0001\u0000\u0000\u0000\u1659\u165a\u0001\u0000\u0000\u0000\u165a"+
		"\u165d\u0001\u0000\u0000\u0000\u165b\u165e\u0003\u02e4\u0172\u0000\u165c"+
		"\u165e\u0005\u0240\u0000\u0000\u165d\u165b\u0001\u0000\u0000\u0000\u165d"+
		"\u165c\u0001\u0000\u0000\u0000\u165e\u023d\u0001\u0000\u0000\u0000\u165f"+
		"\u1660\u0005\u000e\u0000\u0000\u1660\u1661\u0005\u0091\u0000\u0000\u1661"+
		"\u1662\u0003\u0212\u0109\u0000\u1662\u1663\u0005y\u0000\u0000\u1663\u166b"+
		"\u0003\u0226\u0113\u0000\u1664\u1665\u0005\u0091\u0000\u0000\u1665\u1666"+
		"\u0003\u0212\u0109\u0000\u1666\u1667\u0005y\u0000\u0000\u1667\u1668\u0003"+
		"\u0226\u0113\u0000\u1668\u166a\u0001\u0000\u0000\u0000\u1669\u1664\u0001"+
		"\u0000\u0000\u0000\u166a\u166d\u0001\u0000\u0000\u0000\u166b\u1669\u0001"+
		"\u0000\u0000\u0000\u166b\u166c\u0001\u0000\u0000\u0000\u166c\u1670\u0001"+
		"\u0000\u0000\u0000\u166d\u166b\u0001\u0000\u0000\u0000\u166e\u166f\u0005"+
		"(\u0000\u0000\u166f\u1671\u0003\u0226\u0113\u0000\u1670\u166e\u0001\u0000"+
		"\u0000\u0000\u1670\u1671\u0001\u0000\u0000\u0000\u1671\u1672\u0001\u0000"+
		"\u0000\u0000\u1672\u1673\u0005*\u0000\u0000\u1673\u023f\u0001\u0000\u0000"+
		"\u0000\u1674\u1676\u0005\u0005\u0000\u0000\u1675\u1674\u0001\u0000\u0000"+
		"\u0000\u1675\u1676\u0001\u0000\u0000\u0000\u1676\u1677\u0001\u0000\u0000"+
		"\u0000\u1677\u1678\u0003\u02c4\u0162\u0000\u1678\u0241\u0001\u0000\u0000"+
		"\u0000\u1679\u167a\u0003\u0264\u0132\u0000\u167a\u1686\u0005\u0297\u0000"+
		"\u0000\u167b\u167d\u0007\u0017\u0000\u0000\u167c\u167b\u0001\u0000\u0000"+
		"\u0000\u167c\u167d\u0001\u0000\u0000\u0000\u167d\u167e\u0001\u0000\u0000"+
		"\u0000\u167e\u1683\u0003\u0244\u0122\u0000\u167f\u1680\u0005\u0292\u0000"+
		"\u0000\u1680\u1682\u0003\u0244\u0122\u0000\u1681\u167f\u0001\u0000\u0000"+
		"\u0000\u1682\u1685\u0001\u0000\u0000\u0000\u1683\u1681\u0001\u0000\u0000"+
		"\u0000\u1683\u1684\u0001\u0000\u0000\u0000\u1684\u1687\u0001\u0000\u0000"+
		"\u0000\u1685\u1683\u0001\u0000\u0000\u0000\u1686\u167c\u0001\u0000\u0000"+
		"\u0000\u1686\u1687\u0001\u0000\u0000\u0000\u1687\u1688\u0001\u0000\u0000"+
		"\u0000\u1688\u168a\u0005\u0298\u0000\u0000\u1689\u168b\u0003\u01f8\u00fc"+
		"\u0000\u168a\u1689\u0001\u0000\u0000\u0000\u168a\u168b\u0001\u0000\u0000"+
		"\u0000\u168b\u0243\u0001\u0000\u0000\u0000\u168c\u1692\u0003\u0246\u0123"+
		"\u0000\u168d\u168f\u0003\u021c\u010e\u0000\u168e\u1690\u0003\u0246\u0123"+
		"\u0000\u168f\u168e\u0001\u0000\u0000\u0000\u168f\u1690\u0001\u0000\u0000"+
		"\u0000\u1690\u1692\u0001\u0000\u0000\u0000\u1691\u168c\u0001\u0000\u0000"+
		"\u0000\u1691\u168d\u0001\u0000\u0000\u0000\u1692\u0245\u0001\u0000\u0000"+
		"\u0000\u1693\u1695\u0005\u008c\u0000\u0000\u1694\u1696\u0005\u01a9\u0000"+
		"\u0000\u1695\u1694\u0001\u0000\u0000\u0000\u1695\u1696\u0001\u0000\u0000"+
		"\u0000\u1696\u169a\u0001\u0000\u0000\u0000\u1697\u169b\u0005\u019c\u0000"+
		"\u0000\u1698\u169b\u0005\u00c6\u0000\u0000\u1699\u169b\u0003\u0248\u0124"+
		"\u0000\u169a\u1697\u0001\u0000\u0000\u0000\u169a\u1698\u0001\u0000\u0000"+
		"\u0000\u169a\u1699\u0001\u0000\u0000\u0000\u169b\u0247\u0001\u0000\u0000"+
		"\u0000\u169c\u169e\u0005\u0297\u0000\u0000\u169d\u169f\u0003\u0248\u0124"+
		"\u0000\u169e\u169d\u0001\u0000\u0000\u0000\u169e\u169f\u0001\u0000\u0000"+
		"\u0000\u169f\u16a0\u0001\u0000\u0000\u0000\u16a0\u16aa\u0005\u0298\u0000"+
		"\u0000\u16a1\u16a6\u0003\u024c\u0126\u0000\u16a2\u16a3\u0005\u0292\u0000"+
		"\u0000\u16a3\u16a5\u0003\u024c\u0126\u0000\u16a4\u16a2\u0001\u0000\u0000"+
		"\u0000\u16a5\u16a8\u0001\u0000\u0000\u0000\u16a6\u16a4\u0001\u0000\u0000"+
		"\u0000\u16a6\u16a7\u0001\u0000\u0000\u0000\u16a7\u16aa\u0001\u0000\u0000"+
		"\u0000\u16a8\u16a6\u0001\u0000\u0000\u0000\u16a9\u169c\u0001\u0000\u0000"+
		"\u0000\u16a9\u16a1\u0001\u0000\u0000\u0000\u16aa\u0249\u0001\u0000\u0000"+
		"\u0000\u16ab\u16b0\u0003\u02c6\u0163\u0000\u16ac\u16ad\u0005\u0292\u0000"+
		"\u0000\u16ad\u16af\u0003\u02c6\u0163\u0000\u16ae\u16ac\u0001\u0000\u0000"+
		"\u0000\u16af\u16b2\u0001\u0000\u0000\u0000\u16b0\u16ae\u0001\u0000\u0000"+
		"\u0000\u16b0\u16b1\u0001\u0000\u0000\u0000\u16b1\u16c0\u0001\u0000\u0000"+
		"\u0000\u16b2\u16b0\u0001\u0000\u0000\u0000\u16b3\u16b5\u0005\u0297\u0000"+
		"\u0000\u16b4\u16b6\u0003\u02c6\u0163\u0000\u16b5\u16b4\u0001\u0000\u0000"+
		"\u0000\u16b5\u16b6\u0001\u0000\u0000\u0000\u16b6\u16bb\u0001\u0000\u0000"+
		"\u0000\u16b7\u16b8\u0005\u0292\u0000\u0000\u16b8\u16ba\u0003\u02c6\u0163"+
		"\u0000\u16b9\u16b7\u0001\u0000\u0000\u0000\u16ba\u16bd\u0001\u0000\u0000"+
		"\u0000\u16bb\u16b9\u0001\u0000\u0000\u0000\u16bb\u16bc\u0001\u0000\u0000"+
		"\u0000\u16bc\u16be\u0001\u0000\u0000\u0000\u16bd\u16bb\u0001\u0000\u0000"+
		"\u0000\u16be\u16c0\u0005\u0298\u0000\u0000\u16bf\u16ab\u0001\u0000\u0000"+
		"\u0000\u16bf\u16b3\u0001\u0000\u0000\u0000\u16c0\u024b\u0001\u0000\u0000"+
		"\u0000\u16c1\u16c2\u0003\u02a0\u0150\u0000\u16c2\u16c3\u0003\u02d4\u016a"+
		"\u0000\u16c3\u16c4\u0003\u02c6\u0163\u0000\u16c4\u024d\u0001\u0000\u0000"+
		"\u0000\u16c5\u16c6\u0005\u02be\u0000\u0000\u16c6\u16cb\u0003\u0250\u0128"+
		"\u0000\u16c7\u16c8\u0005\u0292\u0000\u0000\u16c8\u16ca\u0003\u0250\u0128"+
		"\u0000\u16c9\u16c7\u0001\u0000\u0000\u0000\u16ca\u16cd\u0001\u0000\u0000"+
		"\u0000\u16cb\u16c9\u0001\u0000\u0000\u0000\u16cb\u16cc\u0001\u0000\u0000"+
		"\u0000\u16cc\u16ce\u0001\u0000\u0000\u0000\u16cd\u16cb\u0001\u0000\u0000"+
		"\u0000\u16ce\u16cf\u0005\u02bf\u0000\u0000\u16cf\u024f\u0001\u0000\u0000"+
		"\u0000\u16d0\u1718\u0005\u025d\u0000\u0000\u16d1\u16d2\u0005\u0281\u0000"+
		"\u0000\u16d2\u1718\u0007 \u0000\u0000\u16d3\u1718\u0005\u0285\u0000\u0000"+
		"\u16d4\u16d5\u0005\u0287\u0000\u0000\u16d5\u16d6\u0005\u0297\u0000\u0000"+
		"\u16d6\u16d7\u0003\u02c6\u0163\u0000\u16d7\u16d8\u0005\u0298\u0000\u0000"+
		"\u16d8\u1718\u0001\u0000\u0000\u0000\u16d9\u1718\u0005\u0286\u0000\u0000"+
		"\u16da\u1718\u0005\u00f7\u0000\u0000\u16db\u16dc\u0005\u015e\u0000\u0000"+
		"\u16dc\u16dd\u0005\u0297\u0000\u0000\u16dd\u16de\u0003\u02c6\u0163\u0000"+
		"\u16de\u16df\u0005\u0298\u0000\u0000\u16df\u16e0\u0001\u0000\u0000\u0000"+
		"\u16e0\u16e1\u0005\u0284\u0000\u0000\u16e1\u1718\u0001\u0000\u0000\u0000"+
		"\u16e2\u1718\u0005\u0288\u0000\u0000\u16e3\u16e4\u0005\u028f\u0000\u0000"+
		"\u16e4\u16e5\u0005\u0297\u0000\u0000\u16e5\u16ea\u0003\u02c6\u0163\u0000"+
		"\u16e6\u16e7\u0005\u0292\u0000\u0000\u16e7\u16e9\u0003\u02c6\u0163\u0000"+
		"\u16e8\u16e6\u0001\u0000\u0000\u0000\u16e9\u16ec\u0001\u0000\u0000\u0000"+
		"\u16ea\u16e8\u0001\u0000\u0000\u0000\u16ea\u16eb\u0001\u0000\u0000\u0000"+
		"\u16eb\u16ed\u0001\u0000\u0000\u0000\u16ec\u16ea\u0001\u0000\u0000\u0000"+
		"\u16ed\u16ee\u0005\u0298\u0000\u0000\u16ee\u1718\u0001\u0000\u0000\u0000"+
		"\u16ef\u16f0\u0005\u028e\u0000\u0000\u16f0\u16f1\u0005\u0297\u0000\u0000"+
		"\u16f1\u16f2\u0003\u02c6\u0163\u0000\u16f2\u16f3\u0005\u0298\u0000\u0000"+
		"\u16f3\u1718\u0001\u0000\u0000\u0000\u16f4\u16f5\u0005\u028d\u0000\u0000"+
		"\u16f5\u16f6\u0005\u0297\u0000\u0000\u16f6\u16f7\u0003\u02c6\u0163\u0000"+
		"\u16f7\u16f8\u0005\u0298\u0000\u0000\u16f8\u1718\u0001\u0000\u0000\u0000"+
		"\u16f9\u16fa\u0005\u0290\u0000\u0000\u16fa\u16fb\u0005\u0297\u0000\u0000"+
		"\u16fb\u1700\u0003\u025e\u012f\u0000\u16fc\u16fd\u0005\u0292\u0000\u0000"+
		"\u16fd\u16ff\u0003\u025e\u012f\u0000\u16fe\u16fc\u0001\u0000\u0000\u0000"+
		"\u16ff\u1702\u0001\u0000\u0000\u0000\u1700\u16fe\u0001\u0000\u0000\u0000"+
		"\u1700\u1701\u0001\u0000\u0000\u0000\u1701\u1703\u0001\u0000\u0000\u0000"+
		"\u1702\u1700\u0001\u0000\u0000\u0000\u1703\u1704\u0005\u0298\u0000\u0000"+
		"\u1704\u1718\u0001\u0000\u0000\u0000\u1705\u1706\u0005\u0291\u0000\u0000"+
		"\u1706\u1707\u0005\u0297\u0000\u0000\u1707\u170c\u0003\u025e\u012f\u0000"+
		"\u1708\u1709\u0005\u0292\u0000\u0000\u1709\u170b\u0003\u025e\u012f\u0000"+
		"\u170a\u1708\u0001\u0000\u0000\u0000\u170b\u170e\u0001\u0000\u0000\u0000"+
		"\u170c\u170a\u0001\u0000\u0000\u0000\u170c\u170d\u0001\u0000\u0000\u0000"+
		"\u170d\u170f\u0001\u0000\u0000\u0000\u170e\u170c\u0001\u0000\u0000\u0000"+
		"\u170f\u1710\u0005\u0298\u0000\u0000\u1710\u1718\u0001\u0000\u0000\u0000"+
		"\u1711\u1712\u0005\u028c\u0000\u0000\u1712\u1713\u0005\u0297\u0000\u0000"+
		"\u1713\u1714\u0003\u02ae\u0157\u0000\u1714\u1715\u0005\u0298\u0000\u0000"+
		"\u1715\u1718\u0001\u0000\u0000\u0000\u1716\u1718\u0005\u028b\u0000\u0000"+
		"\u1717\u16d0\u0001\u0000\u0000\u0000\u1717\u16d1\u0001\u0000\u0000\u0000"+
		"\u1717\u16d3\u0001\u0000\u0000\u0000\u1717\u16d4\u0001\u0000\u0000\u0000"+
		"\u1717\u16d9\u0001\u0000\u0000\u0000\u1717\u16da\u0001\u0000\u0000\u0000"+
		"\u1717\u16db\u0001\u0000\u0000\u0000\u1717\u16e2\u0001\u0000\u0000\u0000"+
		"\u1717\u16e3\u0001\u0000\u0000\u0000\u1717\u16ef\u0001\u0000\u0000\u0000"+
		"\u1717\u16f4\u0001\u0000\u0000\u0000\u1717\u16f9\u0001\u0000\u0000\u0000"+
		"\u1717\u1705\u0001\u0000\u0000\u0000\u1717\u1711\u0001\u0000\u0000\u0000"+
		"\u1717\u1716\u0001\u0000\u0000\u0000\u1718\u0251\u0001\u0000\u0000\u0000"+
		"\u1719\u171a\u0003\u0270\u0138\u0000\u171a\u171b\u0005\u0299\u0000\u0000"+
		"\u171b\u171d\u0001\u0000\u0000\u0000\u171c\u1719\u0001\u0000\u0000\u0000"+
		"\u171c\u171d\u0001\u0000\u0000\u0000\u171d\u171e\u0001\u0000\u0000\u0000"+
		"\u171e\u171f\u0003\u0292\u0149\u0000\u171f\u1720\u0005\u0299\u0000\u0000"+
		"\u1720\u1722\u0001\u0000\u0000\u0000\u1721\u171c\u0001\u0000\u0000\u0000"+
		"\u1721\u1722\u0001\u0000\u0000\u0000\u1722\u1723\u0001\u0000\u0000\u0000"+
		"\u1723\u1724\u0003\u0296\u014b\u0000\u1724\u1725\u0005\u0299\u0000\u0000"+
		"\u1725\u1727\u0001\u0000\u0000\u0000\u1726\u1721\u0001\u0000\u0000\u0000"+
		"\u1726\u1727\u0001\u0000\u0000\u0000\u1727\u1728\u0001\u0000\u0000\u0000"+
		"\u1728\u1729\u0003\u02a6\u0153\u0000\u1729\u0253\u0001\u0000\u0000\u0000"+
		"\u172a\u172b\u0003\u0270\u0138\u0000\u172b\u172c\u0005\u0299\u0000\u0000"+
		"\u172c\u172e\u0001\u0000\u0000\u0000\u172d\u172a\u0001\u0000\u0000\u0000"+
		"\u172d\u172e\u0001\u0000\u0000\u0000\u172e\u172f\u0001\u0000\u0000\u0000"+
		"\u172f\u1730\u0003\u0292\u0149\u0000\u1730\u1731\u0005\u0299\u0000\u0000"+
		"\u1731\u1733\u0001\u0000\u0000\u0000\u1732\u172d\u0001\u0000\u0000\u0000"+
		"\u1732\u1733\u0001\u0000\u0000\u0000\u1733\u1734\u0001\u0000\u0000\u0000"+
		"\u1734\u1735\u0003\u0296\u014b\u0000\u1735\u0255\u0001\u0000\u0000\u0000"+
		"\u1736\u1737\u0003\u0270\u0138\u0000\u1737\u1738\u0005\u0299\u0000\u0000"+
		"\u1738\u173a\u0001\u0000\u0000\u0000\u1739\u1736\u0001\u0000\u0000\u0000"+
		"\u1739\u173a\u0001\u0000\u0000\u0000\u173a\u173b\u0001\u0000\u0000\u0000"+
		"\u173b\u173c\u0003\u0292\u0149\u0000\u173c\u173d\u0005\u0299\u0000\u0000"+
		"\u173d\u173f\u0001\u0000\u0000\u0000\u173e\u1739\u0001\u0000\u0000\u0000"+
		"\u173e\u173f\u0001\u0000\u0000\u0000\u173f\u1740\u0001\u0000\u0000\u0000"+
		"\u1740\u1741\u0003\u0282\u0141\u0000\u1741\u0257\u0001\u0000\u0000\u0000"+
		"\u1742\u1743\u0003\u0270\u0138\u0000\u1743\u1744\u0005\u0299\u0000\u0000"+
		"\u1744\u1746\u0001\u0000\u0000\u0000\u1745\u1742\u0001\u0000\u0000\u0000"+
		"\u1745\u1746\u0001\u0000\u0000\u0000\u1746\u1747\u0001\u0000\u0000\u0000"+
		"\u1747\u1748\u0003\u0292\u0149\u0000\u1748\u1749\u0005\u0299\u0000\u0000"+
		"\u1749\u174b\u0001\u0000\u0000\u0000\u174a\u1745\u0001\u0000\u0000\u0000"+
		"\u174a\u174b\u0001\u0000\u0000\u0000\u174b\u174c\u0001\u0000\u0000\u0000"+
		"\u174c\u174d\u0003\u0278\u013c\u0000\u174d\u0259\u0001\u0000\u0000\u0000"+
		"\u174e\u174f\u0003\u0270\u0138\u0000\u174f\u1750\u0005\u0299\u0000\u0000"+
		"\u1750\u1752\u0001\u0000\u0000\u0000\u1751\u174e\u0001\u0000\u0000\u0000"+
		"\u1751\u1752\u0001\u0000\u0000\u0000\u1752\u1753\u0001\u0000\u0000\u0000"+
		"\u1753\u1754\u0003\u0292\u0149\u0000\u1754\u1755\u0005\u0299\u0000\u0000"+
		"\u1755\u1757\u0001\u0000\u0000\u0000\u1756\u1751\u0001\u0000\u0000\u0000"+
		"\u1756\u1757\u0001\u0000\u0000\u0000\u1757\u1758\u0001\u0000\u0000\u0000"+
		"\u1758\u1759\u0003\u027e\u013f\u0000\u1759\u025b\u0001\u0000\u0000\u0000"+
		"\u175a\u175b\u0003\u0270\u0138\u0000\u175b\u175c\u0005\u0299\u0000\u0000"+
		"\u175c\u175e\u0001\u0000\u0000\u0000\u175d\u175a\u0001\u0000\u0000\u0000"+
		"\u175d\u175e\u0001\u0000\u0000\u0000\u175e\u175f\u0001\u0000\u0000\u0000"+
		"\u175f\u1760\u0003\u0292\u0149\u0000\u1760\u1761\u0005\u0299\u0000\u0000"+
		"\u1761\u1763\u0001\u0000\u0000\u0000\u1762\u175d\u0001\u0000\u0000\u0000"+
		"\u1762\u1763\u0001\u0000\u0000\u0000\u1763\u1764\u0001\u0000\u0000\u0000"+
		"\u1764\u1765\u0003\u0280\u0140\u0000\u1765\u025d\u0001\u0000\u0000\u0000"+
		"\u1766\u1767\u0003\u0270\u0138\u0000\u1767\u1768\u0005\u0299\u0000\u0000"+
		"\u1768\u176a\u0001\u0000\u0000\u0000\u1769\u1766\u0001\u0000\u0000\u0000"+
		"\u1769\u176a\u0001\u0000\u0000\u0000\u176a\u176b\u0001\u0000\u0000\u0000"+
		"\u176b\u176c\u0003\u0292\u0149\u0000\u176c\u176d\u0005\u0299\u0000\u0000"+
		"\u176d\u176f\u0001\u0000\u0000\u0000\u176e\u1769\u0001\u0000\u0000\u0000"+
		"\u176e\u176f\u0001\u0000\u0000\u0000\u176f\u1770\u0001\u0000\u0000\u0000"+
		"\u1770\u1771\u0003\u0296\u014b\u0000\u1771\u1772\u0005\u0299\u0000\u0000"+
		"\u1772\u1774\u0001\u0000\u0000\u0000\u1773\u176e\u0001\u0000\u0000\u0000"+
		"\u1773\u1774\u0001\u0000\u0000\u0000\u1774\u1775\u0001\u0000\u0000\u0000"+
		"\u1775\u1776\u0003\u029a\u014d\u0000\u1776\u025f\u0001\u0000\u0000\u0000"+
		"\u1777\u1778\u0003\u0270\u0138\u0000\u1778\u1779\u0005\u0299\u0000\u0000"+
		"\u1779\u177b\u0001\u0000\u0000\u0000\u177a\u1777\u0001\u0000\u0000\u0000"+
		"\u177a\u177b\u0001\u0000\u0000\u0000\u177b\u177c\u0001\u0000\u0000\u0000"+
		"\u177c\u177d\u0003\u0292\u0149\u0000\u177d\u177e\u0005\u0299\u0000\u0000"+
		"\u177e\u1780\u0001\u0000\u0000\u0000\u177f\u177a\u0001\u0000\u0000\u0000"+
		"\u177f\u1780\u0001\u0000\u0000\u0000\u1780\u1781\u0001\u0000\u0000\u0000"+
		"\u1781\u1782\u0003\u0296\u014b\u0000\u1782\u1783\u0005\u0299\u0000\u0000"+
		"\u1783\u1785\u0001\u0000\u0000\u0000\u1784\u177f\u0001\u0000\u0000\u0000"+
		"\u1784\u1785\u0001\u0000\u0000\u0000\u1785\u1786\u0001\u0000\u0000\u0000"+
		"\u1786\u1787\u0003\u0262\u0131\u0000\u1787\u0261\u0001\u0000\u0000\u0000"+
		"\u1788\u1789\u0003\u02c4\u0162\u0000\u1789\u0263\u0001\u0000\u0000\u0000"+
		"\u178a\u178b\u0003\u0270\u0138\u0000\u178b\u178c\u0005\u0299\u0000\u0000"+
		"\u178c\u178e\u0001\u0000\u0000\u0000\u178d\u178a\u0001\u0000\u0000\u0000"+
		"\u178d\u178e\u0001\u0000\u0000\u0000\u178e\u178f\u0001\u0000\u0000\u0000"+
		"\u178f\u1790\u0003\u0292\u0149\u0000\u1790\u1791\u0005\u0299\u0000\u0000"+
		"\u1791\u1793\u0001\u0000\u0000\u0000\u1792\u178d\u0001\u0000\u0000\u0000"+
		"\u1792\u1793\u0001\u0000\u0000\u0000\u1793\u1794\u0001\u0000\u0000\u0000"+
		"\u1794\u1795\u0003\u029e\u014f\u0000\u1795\u0265\u0001\u0000\u0000\u0000"+
		"\u1796\u1797\u0003\u0270\u0138\u0000\u1797\u1798\u0005\u0299\u0000\u0000"+
		"\u1798\u179a\u0001\u0000\u0000\u0000\u1799\u1796\u0001\u0000\u0000\u0000"+
		"\u1799\u179a\u0001\u0000\u0000\u0000\u179a\u179b\u0001\u0000\u0000\u0000"+
		"\u179b\u179c\u0003\u0292\u0149\u0000\u179c\u179d\u0005\u0299\u0000\u0000"+
		"\u179d\u179f\u0001\u0000\u0000\u0000\u179e\u1799\u0001\u0000\u0000\u0000"+
		"\u179e\u179f\u0001\u0000\u0000\u0000\u179f\u17a0\u0001\u0000\u0000\u0000"+
		"\u17a0\u17a1\u0003\u029c\u014e\u0000\u17a1\u0267\u0001\u0000\u0000\u0000"+
		"\u17a2\u17a3\u0003\u0270\u0138\u0000\u17a3\u17a4\u0005\u0299\u0000\u0000"+
		"\u17a4\u17a6\u0001\u0000\u0000\u0000\u17a5\u17a2\u0001\u0000\u0000\u0000"+
		"\u17a5\u17a6\u0001\u0000\u0000\u0000\u17a6\u17a7\u0001\u0000\u0000\u0000"+
		"\u17a7\u17a8\u0003\u0292\u0149\u0000\u17a8\u17a9\u0005\u0299\u0000\u0000"+
		"\u17a9\u17ab\u0001\u0000\u0000\u0000\u17aa\u17a5\u0001\u0000\u0000\u0000"+
		"\u17aa\u17ab\u0001\u0000\u0000\u0000\u17ab\u17ac\u0001\u0000\u0000\u0000"+
		"\u17ac\u17ad\u0003\u02a4\u0152\u0000\u17ad\u0269\u0001\u0000\u0000\u0000"+
		"\u17ae\u17af\u0003\u0270\u0138\u0000\u17af\u17b0\u0005\u0299\u0000\u0000"+
		"\u17b0\u17b2\u0001\u0000\u0000\u0000\u17b1\u17ae\u0001\u0000\u0000\u0000"+
		"\u17b1\u17b2\u0001\u0000\u0000\u0000\u17b2\u17b3\u0001\u0000\u0000\u0000"+
		"\u17b3\u17b4\u0003\u0292\u0149\u0000\u17b4\u17b5\u0005\u0299\u0000\u0000"+
		"\u17b5\u17b7\u0001\u0000\u0000\u0000\u17b6\u17b1\u0001\u0000\u0000\u0000"+
		"\u17b6\u17b7\u0001\u0000\u0000\u0000\u17b7\u17b8\u0001\u0000\u0000\u0000"+
		"\u17b8\u17b9\u0003\u027c\u013e\u0000\u17b9\u026b\u0001\u0000\u0000\u0000"+
		"\u17ba\u17bb\u0003\u0270\u0138\u0000\u17bb\u17bc\u0005\u0299\u0000\u0000"+
		"\u17bc\u17be\u0001\u0000\u0000\u0000\u17bd\u17ba\u0001\u0000\u0000\u0000"+
		"\u17bd\u17be\u0001\u0000\u0000\u0000\u17be\u17bf\u0001\u0000\u0000\u0000"+
		"\u17bf\u17c0\u0003\u0292\u0149\u0000\u17c0\u17c1\u0005\u0299\u0000\u0000"+
		"\u17c1\u17c3\u0001\u0000\u0000\u0000\u17c2\u17bd\u0001\u0000\u0000\u0000"+
		"\u17c2\u17c3\u0001\u0000\u0000\u0000\u17c3\u17c4\u0001\u0000\u0000\u0000"+
		"\u17c4\u17c5\u0003\u0272\u0139\u0000\u17c5\u026d\u0001\u0000\u0000\u0000"+
		"\u17c6\u17c7\u0003\u0270\u0138\u0000\u17c7\u17c8\u0005\u0299\u0000\u0000"+
		"\u17c8\u17ca\u0001\u0000\u0000\u0000\u17c9\u17c6\u0001\u0000\u0000\u0000"+
		"\u17c9\u17ca\u0001\u0000\u0000\u0000\u17ca\u17cb\u0001\u0000\u0000\u0000"+
		"\u17cb\u17cc\u0003\u0292\u0149\u0000\u17cc\u026f\u0001\u0000\u0000\u0000"+
		"\u17cd\u17ce\u0003\u02c4\u0162\u0000\u17ce\u0271\u0001\u0000\u0000\u0000"+
		"\u17cf\u17d0\u0003\u02c4\u0162\u0000\u17d0\u0273\u0001\u0000\u0000\u0000"+
		"\u17d1\u17d2\u0003\u02c4\u0162\u0000\u17d2\u0275\u0001\u0000\u0000\u0000"+
		"\u17d3\u17d4\u0005\u02c6\u0000\u0000\u17d4\u0277\u0001\u0000\u0000\u0000"+
		"\u17d5\u17d6\u0003\u02c4\u0162\u0000\u17d6\u0279\u0001\u0000\u0000\u0000"+
		"\u17d7\u17d8\u0003\u02c4\u0162\u0000\u17d8\u027b\u0001\u0000\u0000\u0000"+
		"\u17d9\u17da\u0003\u02c4\u0162\u0000\u17da\u027d\u0001\u0000\u0000\u0000"+
		"\u17db\u17dc\u0003\u02c4\u0162\u0000\u17dc\u027f\u0001\u0000\u0000\u0000"+
		"\u17dd\u17de\u0003\u02c4\u0162\u0000\u17de\u0281\u0001\u0000\u0000\u0000"+
		"\u17df\u17e0\u0003\u02c4\u0162\u0000\u17e0\u0283\u0001\u0000\u0000\u0000"+
		"\u17e1\u17e2\u0003\u02c4\u0162\u0000\u17e2\u0285\u0001\u0000\u0000\u0000"+
		"\u17e3\u17e4\u0003\u02c4\u0162\u0000\u17e4\u0287\u0001\u0000\u0000\u0000"+
		"\u17e5\u17e6\u0003\u02c4\u0162\u0000\u17e6\u0289\u0001\u0000\u0000\u0000"+
		"\u17e7\u17e9\u0003\u02c4\u0162\u0000\u17e8\u17ea\u0003\u02ac\u0156\u0000"+
		"\u17e9\u17e8\u0001\u0000\u0000\u0000\u17e9\u17ea\u0001\u0000\u0000\u0000"+
		"\u17ea\u028b\u0001\u0000\u0000\u0000\u17eb\u17ec\u0003\u02c4\u0162\u0000"+
		"\u17ec\u028d\u0001\u0000\u0000\u0000\u17ed\u17ee\u0003\u02a8\u0154\u0000"+
		"\u17ee\u028f\u0001\u0000\u0000\u0000\u17ef\u17f0\u0003\u02c4\u0162\u0000"+
		"\u17f0\u0291\u0001\u0000\u0000\u0000\u17f1\u17f4\u0003\u02c4\u0162\u0000"+
		"\u17f2\u17f4\u0005\u025e\u0000\u0000\u17f3\u17f1\u0001\u0000\u0000\u0000"+
		"\u17f3\u17f2\u0001\u0000\u0000\u0000\u17f4\u0293\u0001\u0000\u0000\u0000"+
		"\u17f5\u17f6\u0005\u02c1\u0000\u0000\u17f6\u0295\u0001\u0000\u0000\u0000"+
		"\u17f7\u17f8\u0003\u02c4\u0162\u0000\u17f8\u0297\u0001\u0000\u0000\u0000"+
		"\u17f9\u17fe\u0003\u02a0\u0150\u0000\u17fa\u17fb\u0005\u0292\u0000\u0000"+
		"\u17fb\u17fd\u0003\u02a0\u0150\u0000\u17fc\u17fa\u0001\u0000\u0000\u0000"+
		"\u17fd\u1800\u0001\u0000\u0000\u0000\u17fe\u17fc\u0001\u0000\u0000\u0000"+
		"\u17fe\u17ff\u0001\u0000\u0000\u0000\u17ff\u0299\u0001\u0000\u0000\u0000"+
		"\u1800\u17fe\u0001\u0000\u0000\u0000\u1801\u1802\u0003\u02c4\u0162\u0000"+
		"\u1802\u029b\u0001\u0000\u0000\u0000\u1803\u1804\u0003\u02c4\u0162\u0000"+
		"\u1804\u029d\u0001\u0000\u0000\u0000\u1805\u180a\u0005\u0282\u0000\u0000"+
		"\u1806\u180a\u0005\u01f3\u0000\u0000\u1807\u180a\u0005\u0003\u0000\u0000"+
		"\u1808\u180a\u0003\u02c4\u0162\u0000\u1809\u1805\u0001\u0000\u0000\u0000"+
		"\u1809\u1806\u0001\u0000\u0000\u0000\u1809\u1807\u0001\u0000\u0000\u0000"+
		"\u1809\u1808\u0001\u0000\u0000\u0000\u180a\u029f\u0001\u0000\u0000\u0000"+
		"\u180b\u180c\u0003\u02c4\u0162\u0000\u180c\u02a1\u0001\u0000\u0000\u0000"+
		"\u180d\u180e\u0003\u02c4\u0162\u0000\u180e\u02a3\u0001\u0000\u0000\u0000"+
		"\u180f\u1810\u0003\u02c4\u0162\u0000\u1810\u02a5\u0001\u0000\u0000\u0000"+
		"\u1811\u1812\u0003\u02c4\u0162\u0000\u1812\u02a7\u0001\u0000\u0000\u0000"+
		"\u1813\u1814\u0007!\u0000\u0000\u1814\u02a9\u0001\u0000\u0000\u0000\u1815"+
		"\u1816\u0005\u02c3\u0000\u0000\u1816\u02ab\u0001\u0000\u0000\u0000\u1817"+
		"\u1818\u0007\"\u0000\u0000\u1818\u02ad\u0001\u0000\u0000\u0000\u1819\u181a"+
		"\u0005\u02c6\u0000\u0000\u181a\u02af\u0001\u0000\u0000\u0000\u181b\u181c"+
		"\u0005\u0294\u0000\u0000\u181c\u02b1\u0001\u0000\u0000\u0000\u181d\u181e"+
		"\u0003\u02c4\u0162\u0000\u181e\u02b3\u0001\u0000\u0000\u0000\u181f\u1820"+
		"\u0003\u02c4\u0162\u0000\u1820\u02b5\u0001\u0000\u0000\u0000\u1821\u1822"+
		"\u0003\u02c4\u0162\u0000\u1822\u02b7\u0001\u0000\u0000\u0000\u1823\u1824"+
		"\u0003\u02c4\u0162\u0000\u1824\u02b9\u0001\u0000\u0000\u0000\u1825\u1826"+
		"\u0003\u02c4\u0162\u0000\u1826\u02bb\u0001\u0000\u0000\u0000\u1827\u1828"+
		"\u0003\u02c4\u0162\u0000\u1828\u02bd\u0001\u0000\u0000\u0000\u1829\u182a"+
		"\u0003\u02c4\u0162\u0000\u182a\u02bf\u0001\u0000\u0000\u0000\u182b\u182c"+
		"\u0003\u02c4\u0162\u0000\u182c\u02c1\u0001\u0000\u0000\u0000\u182d\u182e"+
		"\u0003\u02c4\u0162\u0000\u182e\u02c3\u0001\u0000\u0000\u0000\u182f\u1837"+
		"\u0005\u02c0\u0000\u0000\u1830\u1837\u0005\u02c3\u0000\u0000\u1831\u1837"+
		"\u0005\u02c2\u0000\u0000\u1832\u1837\u0005$\u0000\u0000\u1833\u1837\u0005"+
		"\u02c1\u0000\u0000\u1834\u1837\u0005\u02c7\u0000\u0000\u1835\u1837\u0003"+
		"\u02fa\u017d\u0000\u1836\u182f\u0001\u0000\u0000\u0000\u1836\u1830\u0001"+
		"\u0000\u0000\u0000\u1836\u1831\u0001\u0000\u0000\u0000\u1836\u1832\u0001"+
		"\u0000\u0000\u0000\u1836\u1833\u0001\u0000\u0000\u0000\u1836\u1834\u0001"+
		"\u0000\u0000\u0000\u1836\u1835\u0001\u0000\u0000\u0000\u1837\u02c5\u0001"+
		"\u0000\u0000\u0000\u1838\u1842\u0005\u02c6\u0000\u0000\u1839\u1842\u0005"+
		"\u02c4\u0000\u0000\u183a\u1842\u0005\u02c5\u0000\u0000\u183b\u1842\u0005"+
		"\u02c2\u0000\u0000\u183c\u1842\u0005\u02c0\u0000\u0000\u183d\u1842\u0005"+
		"\u02c3\u0000\u0000\u183e\u1842\u0005\u02c7\u0000\u0000\u183f\u1842\u0005"+
		"\u02c1\u0000\u0000\u1840\u1842\u0003\u02fa\u017d\u0000\u1841\u1838\u0001"+
		"\u0000\u0000\u0000\u1841\u1839\u0001\u0000\u0000\u0000\u1841\u183a\u0001"+
		"\u0000\u0000\u0000\u1841\u183b\u0001\u0000\u0000\u0000\u1841\u183c\u0001"+
		"\u0000\u0000\u0000\u1841\u183d\u0001\u0000\u0000\u0000\u1841\u183e\u0001"+
		"\u0000\u0000\u0000\u1841\u183f\u0001\u0000\u0000\u0000\u1841\u1840\u0001"+
		"\u0000\u0000\u0000\u1842\u02c7\u0001\u0000\u0000\u0000\u1843\u1844\u0007"+
		"\u0007\u0000\u0000\u1844\u02c9\u0001\u0000\u0000\u0000\u1845\u1846\u0007"+
		"#\u0000\u0000\u1846\u02cb\u0001\u0000\u0000\u0000\u1847\u1849\u0005U\u0000"+
		"\u0000\u1848\u1847\u0001\u0000\u0000\u0000\u1848\u1849\u0001\u0000\u0000"+
		"\u0000\u1849\u184a\u0001\u0000\u0000\u0000\u184a\u184b\u0005W\u0000\u0000"+
		"\u184b\u02cd\u0001\u0000\u0000\u0000\u184c\u184d\u0007$\u0000\u0000\u184d"+
		"\u02cf\u0001\u0000\u0000\u0000\u184e\u184f\u0007%\u0000\u0000\u184f\u02d1"+
		"\u0001\u0000\u0000\u0000\u1850\u1851\u0007&\u0000\u0000\u1851\u1852\u0003"+
		"\u02c6\u0163\u0000\u1852\u02d3\u0001\u0000\u0000\u0000\u1853\u1859\u0003"+
		"\u02da\u016d\u0000\u1854\u1859\u0003\u02de\u016f\u0000\u1855\u1859\u0003"+
		"\u02dc\u016e\u0000\u1856\u1859\u0003\u02d6\u016b\u0000\u1857\u1859\u0003"+
		"\u02d8\u016c\u0000\u1858\u1853\u0001\u0000\u0000\u0000\u1858\u1854\u0001"+
		"\u0000\u0000\u0000\u1858\u1855\u0001\u0000\u0000\u0000\u1858\u1856\u0001"+
		"\u0000\u0000\u0000\u1858\u1857\u0001\u0000\u0000\u0000\u1859\u02d5\u0001"+
		"\u0000\u0000\u0000\u185a\u185b\u0007\'\u0000\u0000\u185b\u02d7\u0001\u0000"+
		"\u0000\u0000\u185c\u185d\u0007\u001e\u0000\u0000\u185d\u02d9\u0001\u0000"+
		"\u0000\u0000\u185e\u185f\u0005\u02af\u0000\u0000\u185f\u02db\u0001\u0000"+
		"\u0000\u0000\u1860\u1861\u0007(\u0000\u0000\u1861\u02dd\u0001\u0000\u0000"+
		"\u0000\u1862\u1863\u0007)\u0000\u0000\u1863\u02df\u0001\u0000\u0000\u0000"+
		"\u1864\u1865\u0005\u01d7\u0000\u0000\u1865\u186c\u0005\u00d0\u0000\u0000"+
		"\u1866\u186c\u0005\u0206\u0000\u0000\u1867\u1868\u0005\u01e5\u0000\u0000"+
		"\u1868\u186c\u0005\u01d7\u0000\u0000\u1869\u186a\u0005\u01d7\u0000\u0000"+
		"\u186a\u186c\u0005\u023c\u0000\u0000\u186b\u1864\u0001\u0000\u0000\u0000"+
		"\u186b\u1866\u0001\u0000\u0000\u0000\u186b\u1867\u0001\u0000\u0000\u0000"+
		"\u186b\u1869\u0001\u0000\u0000\u0000\u186c\u02e1\u0001\u0000\u0000\u0000"+
		"\u186d\u186f\u0005\u01d7\u0000\u0000\u186e\u1870\u0007*\u0000\u0000\u186f"+
		"\u186e\u0001\u0000\u0000\u0000\u186f\u1870\u0001\u0000\u0000\u0000\u1870"+
		"\u02e3\u0001\u0000\u0000\u0000\u1871\u1872\u0007+\u0000\u0000\u1872\u02e5"+
		"\u0001\u0000\u0000\u0000\u1873\u187d\u0003\u02e8\u0174\u0000\u1874\u187d"+
		"\u0003\u02ea\u0175\u0000\u1875\u187d\u0003\u02ec\u0176\u0000\u1876\u187d"+
		"\u0003\u02ee\u0177\u0000\u1877\u187d\u0003\u02f0\u0178\u0000\u1878\u187d"+
		"\u0003\u02f2\u0179\u0000\u1879\u187d\u0003\u02f4\u017a\u0000\u187a\u187d"+
		"\u0003\u02f6\u017b\u0000\u187b\u187d\u0003\u02f8\u017c\u0000\u187c\u1873"+
		"\u0001\u0000\u0000\u0000\u187c\u1874\u0001\u0000\u0000\u0000\u187c\u1875"+
		"\u0001\u0000\u0000\u0000\u187c\u1876\u0001\u0000\u0000\u0000\u187c\u1877"+
		"\u0001\u0000\u0000\u0000\u187c\u1878\u0001\u0000\u0000\u0000\u187c\u1879"+
		"\u0001\u0000\u0000\u0000\u187c\u187a\u0001\u0000\u0000\u0000\u187c\u187b"+
		"\u0001\u0000\u0000\u0000\u187d\u1886\u0001\u0000\u0000\u0000\u187e\u187f"+
		"\u0005\u0297\u0000\u0000\u187f\u1882\u0003\u02c6\u0163\u0000\u1880\u1881"+
		"\u0005\u0292\u0000\u0000\u1881\u1883\u0003\u02c6\u0163\u0000\u1882\u1880"+
		"\u0001\u0000\u0000\u0000\u1882\u1883\u0001\u0000\u0000\u0000\u1883\u1884"+
		"\u0001\u0000\u0000\u0000\u1884\u1885\u0005\u0298\u0000\u0000\u1885\u1887"+
		"\u0001\u0000\u0000\u0000\u1886\u187e\u0001\u0000\u0000\u0000\u1886\u1887"+
		"\u0001\u0000\u0000\u0000\u1887\u02e7\u0001\u0000\u0000\u0000\u1888\u188f"+
		"\u0005\n\u0000\u0000\u1889\u188a\u0005\u016c\u0000\u0000\u188a\u188f\u0005"+
		"\u008e\u0000\u0000\u188b\u188f\u0005\u008e\u0000\u0000\u188c\u188f\u0005"+
		"\u00bb\u0000\u0000\u188d\u188f\u0005\u01d6\u0000\u0000\u188e\u1888\u0001"+
		"\u0000\u0000\u0000\u188e\u1889\u0001\u0000\u0000\u0000\u188e\u188b\u0001"+
		"\u0000\u0000\u0000\u188e\u188c\u0001\u0000\u0000\u0000\u188e\u188d\u0001"+
		"\u0000\u0000\u0000\u188f\u02e9\u0001\u0000\u0000\u0000\u1890\u1891\u0005"+
		"\f\u0000\u0000\u1891\u02eb\u0001\u0000\u0000\u0000\u1892\u1893\u0005\u016c"+
		"\u0000\u0000\u1893\u1897\u0005\u008f\u0000\u0000\u1894\u1897\u0005\u0010"+
		"\u0000\u0000\u1895\u1897\u0005\u008f\u0000\u0000\u1896\u1892\u0001\u0000"+
		"\u0000\u0000\u1896\u1894\u0001\u0000\u0000\u0000\u1896\u1895\u0001\u0000"+
		"\u0000\u0000\u1897\u02ed\u0001\u0000\u0000\u0000\u1898\u1899\u0005z\u0000"+
		"\u0000\u1899\u189a\u0005\u0094\u0000\u0000\u189a\u18ad\u0005\u0081\u0000"+
		"\u0000\u189b\u18ad\u0005\u007f\u0000\u0000\u189c\u18ad\u0005\u027e\u0000"+
		"\u0000\u189d\u18ad\u0005z\u0000\u0000\u189e\u18ad\u0005r\u0000\u0000\u189f"+
		"\u18a0\u0005|\u0000\u0000\u18a0\u18a1\u0005\u0094\u0000\u0000\u18a1\u18ad"+
		"\u0005\u0081\u0000\u0000\u18a2\u18a3\u0005@\u0000\u0000\u18a3\u18a4\u0005"+
		"\u00e6\u0000\u0000\u18a4\u18a5\u0005\u0083\u0000\u0000\u18a5\u18ad\u0005"+
		"\u01fd\u0000\u0000\u18a6\u18a7\u0005@\u0000\u0000\u18a7\u18a8\u0005\u025a"+
		"\u0000\u0000\u18a8\u18a9\u0005\u0083\u0000\u0000\u18a9\u18ad\u0005\u0187"+
		"\u0000\u0000\u18aa\u18ad\u0005|\u0000\u0000\u18ab\u18ad\u0005@\u0000\u0000"+
		"\u18ac\u1898\u0001\u0000\u0000\u0000\u18ac\u189b\u0001\u0000\u0000\u0000"+
		"\u18ac\u189c\u0001\u0000\u0000\u0000\u18ac\u189d\u0001\u0000\u0000\u0000"+
		"\u18ac\u189e\u0001\u0000\u0000\u0000\u18ac\u189f\u0001\u0000\u0000\u0000"+
		"\u18ac\u18a2\u0001\u0000\u0000\u0000\u18ac\u18a6\u0001\u0000\u0000\u0000"+
		"\u18ac\u18aa\u0001\u0000\u0000\u0000\u18ac\u18ab\u0001\u0000\u0000\u0000"+
		"\u18ad\u02ef\u0001\u0000\u0000\u0000\u18ae\u18af\u0005\u0102\u0000\u0000"+
		"\u18af\u18b8\u0005h\u0000\u0000\u18b0\u18b1\u0005/\u0000\u0000\u18b1\u18b2"+
		"\u0005\u0297\u0000\u0000\u18b2\u18b3\u0005\u02c6\u0000\u0000\u18b3\u18b8"+
		"\u0005\u0298\u0000\u0000\u18b4\u18b8\u0005\u027b\u0000\u0000\u18b5\u18b8"+
		"\u0005/\u0000\u0000\u18b6\u18b8\u0005j\u0000\u0000\u18b7\u18ae\u0001\u0000"+
		"\u0000\u0000\u18b7\u18b0\u0001\u0000\u0000\u0000\u18b7\u18b4\u0001\u0000"+
		"\u0000\u0000\u18b7\u18b5\u0001\u0000\u0000\u0000\u18b7\u18b6\u0001\u0000"+
		"\u0000\u0000\u18b8\u02f1\u0001\u0000\u0000\u0000\u18b9\u18ba\u0007,\u0000"+
		"\u0000\u18ba\u02f3\u0001\u0000\u0000\u0000\u18bb\u18bc\u0007-\u0000\u0000"+
		"\u18bc\u02f5\u0001\u0000\u0000\u0000\u18bd\u18be\u0005\u008d\u0000\u0000"+
		"\u18be\u02f7\u0001\u0000\u0000\u0000\u18bf\u18c0\u0005\u0148\u0000\u0000"+
		"\u18c0\u02f9\u0001\u0000\u0000\u0000\u18c1\u18c2\u0007.\u0000\u0000\u18c2"+
		"\u02fb\u0001\u0000\u0000\u0000\u0336\u02fd\u0302\u0307\u0309\u030c\u0313"+
		"\u039c\u03a7\u03ac\u03ae\u03b5\u03be\u03c1\u03c4\u03cd\u03dd\u03e2\u03e5"+
		"\u03fa\u0400\u0408\u0412\u041b\u041d\u0427\u0436\u043c\u0441\u0446\u0449"+
		"\u0451\u0455\u0464\u0472\u0480\u0492\u0497\u049c\u04a1\u04a6\u04ad\u04b2"+
		"\u04b7\u04bc\u04c3\u04d3\u04d5\u04dc\u04e1\u04ea\u04ec\u04f1\u04f7\u04fd"+
		"\u0502\u050c\u050e\u0514\u0519\u0520\u0527\u052a\u0538\u0544\u054a\u0550"+
		"\u0552\u0555\u0559\u055c\u0565\u056a\u058a\u0595\u0599\u059d\u05a1\u05ac"+
		"\u05b2\u05c2\u05ca\u05d4\u05df\u05e2\u05e7\u05ee\u05f5\u05fa\u0602\u0607"+
		"\u060e\u0616\u061f\u0622\u0629\u062b\u062d\u0639\u063f\u0645\u064a\u065e"+
		"\u06ac\u06b0\u06c0\u06c5\u06c9\u06cc\u06d0\u06d3\u06d6\u06da\u06df\u06e3"+
		"\u06e7\u06eb\u06ee\u06f2\u06f7\u06fa\u06fe\u0701\u0704\u0708\u070d\u0711"+
		"\u0715\u0719\u071c\u0720\u0727\u0732\u0739\u073b\u073e\u0743\u0746\u0752"+
		"\u075a\u0762\u0766\u076a\u0771\u0776\u077b\u077f\u0795\u079b\u07a3\u07ad"+
		"\u07b5\u07bf\u07c4\u07ce\u07d3\u07d8\u07df\u07e7\u07ec\u07ee\u07f1\u07f6"+
		"\u07f8\u07fd\u0805\u080b\u080e\u0813\u0817\u0827\u0833\u0836\u0839\u0844"+
		"\u0849\u0851\u0856\u0860\u0865\u086f\u0874\u087a\u0882\u0884\u0887\u0896"+
		"\u089d\u08a2\u08a6\u08b0\u08b3\u08b7\u08be\u08c4\u08cb\u08ce\u08d1\u08d7"+
		"\u08db\u08df\u08e2\u08e5\u08eb\u08ef\u08f4\u08fb\u0902\u0905\u0909\u090d"+
		"\u0912\u0916\u091a\u0927\u092c\u092f\u0932\u0935\u0938\u093b\u093e\u0942"+
		"\u0949\u094e\u0958\u095d\u0966\u0969\u096c\u0974\u097c\u0982\u0986\u0989"+
		"\u098d\u0991\u0994\u0998\u099d\u09a1\u09a4\u09a9\u09ad\u09b2\u09b6\u09ba"+
		"\u09c9\u09cc\u09dd\u09e0\u09e3\u09e8\u09ea\u09f4\u09f9\u0a01\u0a0a\u0a0f"+
		"\u0a1d\u0a22\u0a29\u0a32\u0a37\u0a3e\u0a47\u0a4c\u0a5a\u0a61\u0a68\u0a6f"+
		"\u0a72\u0a77\u0a7f\u0a88\u0a8d\u0a95\u0aa0\u0aa5\u0aab\u0aad\u0ab6\u0abd"+
		"\u0ac1\u0acf\u0ad9\u0adf\u0ae3\u0aee\u0afa\u0afd\u0b01\u0b05\u0b09\u0b25"+
		"\u0b39\u0b3c\u0b41\u0b4c\u0b50\u0b53\u0b56\u0b5a\u0b5e\u0b65\u0b69\u0b71"+
		"\u0b76\u0b7b\u0b7e\u0b81\u0b84\u0b88\u0b8d\u0b96\u0b9b\u0ba0\u0ba4\u0ba9"+
		"\u0bb2\u0bb7\u0bbc\u0bc1\u0bc6\u0bcf\u0bd4\u0bdc\u0bde\u0be1\u0be5\u0beb"+
		"\u0bf4\u0bf7\u0c06\u0c15\u0c21\u0c33\u0c38\u0c3c\u0c41\u0c47\u0c4d\u0c53"+
		"\u0c58\u0c62\u0c64\u0c6f\u0c73\u0c76\u0c7d\u0c81\u0c84\u0c88\u0c8c\u0c94"+
		"\u0c97\u0c9d\u0ca0\u0ca3\u0cae\u0cb5\u0cb8\u0cbb\u0cc0\u0cca\u0ccd\u0cd0"+
		"\u0cd3\u0cd6\u0cd9\u0cdc\u0cdf\u0ce7\u0cef\u0cf4\u0cfb\u0cfd\u0d05\u0d08"+
		"\u0d0e\u0d13\u0d17\u0d1a\u0d23\u0d28\u0d31\u0d3c\u0d42\u0d48\u0d4c\u0d50"+
		"\u0d59\u0d61\u0d69\u0d6c\u0d6e\u0d72\u0d76\u0d7b\u0d80\u0d86\u0d89\u0d8d"+
		"\u0d90\u0d93\u0d96\u0d99\u0d9f\u0da3\u0da9\u0dac\u0db0\u0db3\u0db7\u0dc0"+
		"\u0dc5\u0dc8\u0dd6\u0de0\u0de2\u0dea\u0df2\u0df8\u0dfd\u0e00\u0e05\u0e09"+
		"\u0e0e\u0e16\u0e24\u0e2d\u0e49\u0e4f\u0e57\u0e5b\u0e60\u0e67\u0e6b\u0e71"+
		"\u0e78\u0e92\u0e99\u0e9f\u0ea3\u0eab\u0eb3\u0eb9\u0ebd\u0ec2\u0ec9\u0ed1"+
		"\u0ed8\u0edc\u0ee1\u0ee8\u0eec\u0ef6\u0efd\u0f01\u0f0b\u0f12\u0f16\u0f1b"+
		"\u0f22\u0f26\u0f2b\u0f2f\u0f34\u0f3b\u0f3f\u0f45\u0f4d\u0f55\u0f5c\u0f60"+
		"\u0f65\u0f6c\u0f71\u0f75\u0f78\u0f87\u0f8d\u0f93\u0f99\u0f9f\u0fa3\u0fad"+
		"\u0fb4\u0fb6\u0fc5\u0fca\u0fd2\u0fd8\u0fde\u0fe0\u0fed\u0ff7\u1003\u1006"+
		"\u100b\u1013\u1018\u101a\u101e\u1025\u1031\u1034\u1039\u1041\u1046\u1048"+
		"\u1050\u1056\u1058\u1061\u106d\u1070\u1075\u107d\u1082\u1084\u108d\u1093"+
		"\u109d\u10a3\u10a9\u10ab\u10b5\u10bb\u10c1\u10c3\u10cf\u10d5\u10db\u10dd"+
		"\u10e6\u10ec\u10f2\u10f4\u10fd\u1103\u110a\u110c\u1114\u1125\u112a\u1134"+
		"\u1139\u114a\u114c\u1150\u1155\u115a\u115d\u1163\u116b\u117a\u117e\u1185"+
		"\u118f\u1196\u11a7\u11ad\u11b2\u11b4\u11bc\u11c2\u11c8\u11cd\u11cf\u11dc"+
		"\u11e6\u11f2\u11f5\u11fa\u1200\u1207\u120c\u120e\u1212\u1219\u1225\u1228"+
		"\u122d\u1233\u123a\u123f\u1241\u1249\u124f\u1254\u1256\u125f\u126b\u126e"+
		"\u1273\u1279\u1280\u1285\u1287\u1290\u1296\u129c\u12a3\u12a9\u12af\u12b4"+
		"\u12b6\u12c0\u12c6\u12cc\u12d1\u12d3\u12df\u12e5\u12eb\u12f0\u12f2\u12fb"+
		"\u1301\u1307\u130c\u130e\u1317\u131d\u1323\u132a\u132f\u1331\u1339\u1343"+
		"\u1348\u1351\u1361\u136a\u136f\u1376\u137b\u1380\u1383\u138d\u1392\u1394"+
		"\u13ac\u13b8\u13bc\u13c6\u13ca\u13d8\u13dc\u13df\u13e1\u13ea\u13f3\u13fc"+
		"\u140a\u1413\u141a\u1425\u1429\u1430\u1436\u143d\u1444\u144c\u1455\u145d"+
		"\u1461\u1466\u1469\u1472\u147a\u147d\u1480\u1483\u1486\u1489\u148c\u1490"+
		"\u1492\u1495\u1498\u149b\u149e\u14a1\u14ab\u14ae\u14b0\u14b2\u14ba\u14be"+
		"\u14c1\u14ce\u14d3\u14d7\u14db\u14df\u14e3\u14e7\u14ee\u14f0\u14ff\u1502"+
		"\u1506\u150e\u151f\u152b\u152e\u1537\u153f\u1546\u154a\u155a\u155c\u1564"+
		"\u1568\u157b\u1583\u1589\u158c\u1597\u159c\u159f\u15a1\u15a6\u15aa\u15ae"+
		"\u15b2\u15b7\u15ba\u15bd\u15c0\u15c7\u15cd\u15cf\u15d8\u15e8\u15ee\u15f8"+
		"\u15fb\u1602\u1605\u160e\u1611\u161c\u1624\u162a\u1632\u1641\u164c\u1650"+
		"\u1659\u165d\u166b\u1670\u1675\u167c\u1683\u1686\u168a\u168f\u1691\u1695"+
		"\u169a\u169e\u16a6\u16a9\u16b0\u16b5\u16bb\u16bf\u16cb\u16ea\u1700\u170c"+
		"\u1717\u171c\u1721\u1726\u172d\u1732\u1739\u173e\u1745\u174a\u1751\u1756"+
		"\u175d\u1762\u1769\u176e\u1773\u177a\u177f\u1784\u178d\u1792\u1799\u179e"+
		"\u17a5\u17aa\u17b1\u17b6\u17bd\u17c2\u17c9\u17e9\u17f3\u17fe\u1809\u1836"+
		"\u1841\u1848\u1858\u186b\u186f\u187c\u1882\u1886\u188e\u1896\u18ac\u18b7";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}