// Generated from antlr4-grammar-vsql\antlr4-grammar-vsql\src\main\antlr4\VSqlParser.g4 by ANTLR 4.7.2
package org.antlr.sql.dialects.vsql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class VSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		K_ALL=1, K_AND=2, K_ANY=3, K_ARRAY=4, K_AS=5, K_ASC=6, K_AUTHORIZATION=7, 
		K_BETWEEN=8, K_BIGINT=9, K_BINARY=10, K_BIT=11, K_BOOLEAN=12, K_BOTH=13, 
		K_CASE=14, K_CAST=15, K_CHAR=16, K_CHAR_LENGTH=17, K_CHARACTER_LENGTH=18, 
		K_CHECK=19, K_COLLATE=20, K_COLUMN=21, K_CONSTRAINT=22, K_CORRELATION=23, 
		K_CREATE=24, K_CROSS=25, K_CURRENT_DATABASE=26, K_CURRENT_DATE=27, K_CURRENT_SCHEMA=28, 
		K_CURRENT_TIME=29, K_CURRENT_TIMESTAMP=30, K_CURRENT_USER=31, K_DATEDIFF=32, 
		K_DATETIME=33, K_DECIMAL=34, K_DECODE=35, K_DEFAULT=36, K_DEFERRABLE=37, 
		K_DESC=38, K_DISTINCT=39, K_ELSE=40, K_ENCODED=41, K_END=42, K_EXCEPT=43, 
		K_EXISTS=44, K_EXTRACT=45, K_FALSE=46, K_FLOAT=47, K_FOR=48, K_FOREIGN=49, 
		K_FROM=50, K_FULL=51, K_GRANT=52, K_GROUP=53, K_HAVING=54, K_ILIKE=55, 
		K_ILIKEB=56, K_IN=57, K_INITIALLY=58, K_INNER=59, K_INOUT=60, K_INT=61, 
		K_INTEGER=62, K_INTERSECT=63, K_INTERVAL=64, K_INTERVALYM=65, K_INTO=66, 
		K_IS=67, K_ISNULL=68, K_JOIN=69, K_KSAFE=70, K_LEADING=71, K_LEFT=72, 
		K_LIKE=73, K_LIKEB=74, K_LIMIT=75, K_LOCALTIME=76, K_LOCALTIMESTAMP=77, 
		K_MATCH=78, K_MINUS=79, K_MONEY=80, K_NATURAL=81, K_NCHAR=82, K_NEW=83, 
		K_NONE=84, K_NOT=85, K_NOTNULL=86, K_NULL=87, K_NULLSEQUAL=88, K_NUMBER=89, 
		K_NUMERIC=90, K_OFFSET=91, K_OLD=92, K_ON=93, K_ONLY=94, K_OR=95, K_ORDER=96, 
		K_OUT=97, K_OUTER=98, K_OVER=99, K_OVERLAPS=100, K_OVERLAY=101, K_PINNED=102, 
		K_POSITION=103, K_PRECISION=104, K_PRIMARY=105, K_REAL=106, K_REFERENCES=107, 
		K_RIGHT=108, K_ROW=109, K_SCHEMA=110, K_SELECT=111, K_SESSION_USER=112, 
		K_SIMILAR=113, K_SMALLDATETIME=114, K_SMALLINT=115, K_SOME=116, K_SUBSTRING=117, 
		K_SYSDATE=118, K_TABLE=119, K_TEXT=120, K_THEN=121, K_TIME=122, K_TIMESERIES=123, 
		K_TIMESTAMP=124, K_TIMESTAMPADD=125, K_TIMESTAMPDIFF=126, K_TIMESTAMPTZ=127, 
		K_TIMETZ=128, K_TIMEZONE=129, K_TINYINT=130, K_TO=131, K_TRAILING=132, 
		K_TREAT=133, K_TRIM=134, K_TRUE=135, K_UNBOUNDED=136, K_UNION=137, K_UNIQUE=138, 
		K_USER=139, K_USING=140, K_UUID=141, K_VARBINARY=142, K_VARCHAR=143, K_VARCHAR2=144, 
		K_WHEN=145, K_WHERE=146, K_WINDOW=147, K_WITH=148, K_WITHIN=149, K_ABORT=150, 
		K_ABSOLUTE=151, K_ACCESS=152, K_ACCESSRANK=153, K_ACCOUNT=154, K_ACTION=155, 
		K_ACTIVATE=156, K_ACTIVEPARTITIONCOUNT=157, K_ADD=158, K_ADMIN=159, K_AFTER=160, 
		K_AGGREGATE=161, K_ALSO=162, K_ALTER=163, K_ANALYSE=164, K_ANALYTIC=165, 
		K_ANALYZE=166, K_ANNOTATED=167, K_ANTI=168, K_ASSERTION=169, K_ASSIGNMENT=170, 
		K_AT=171, K_AUTHENTICATION=172, K_AUTO=173, K_AUTO_INCREMENT=174, K_AVAILABLE=175, 
		K_BACKWARD=176, K_BASENAME=177, K_BATCH=178, K_BEFORE=179, K_BEGIN=180, 
		K_BEST=181, K_BLOCK=182, K_BLOCK_DICT=183, K_BLOCKDICT_COMP=184, K_BROADCAST=185, 
		K_BY=186, K_BYTEA=187, K_BYTES=188, K_BZIP=189, K_BZIP_COMP=190, K_CACHE=191, 
		K_CALLED=192, K_CASCADE=193, K_CATALOGPATH=194, K_CHAIN=195, K_CHARACTER=196, 
		K_CHARACTERISTICS=197, K_CHARACTERS=198, K_CHECKPOINT=199, K_CLASS=200, 
		K_CLEAR=201, K_CLOSE=202, K_CLUSTER=203, K_COLSIZES=204, K_COLUMNS_COUNT=205, 
		K_COMMENT=206, K_COMMIT=207, K_COMMITTED=208, K_COMMONDELTA_COMP=209, 
		K_COMMUNAL=210, K_COMPLEX=211, K_CONNECT=212, K_CONSTRAINTS=213, K_CONTROL=214, 
		K_COPY=215, K_CPUAFFINITYMODE=216, K_CPUAFFINITYSET=217, K_CREATEDB=218, 
		K_CREATEUSER=219, K_CSV=220, K_CUBE=221, K_CURRENT=222, K_CURSOR=223, 
		K_CUSTOM=224, K_CUSTOM_PARTITIONS=225, K_CYCLE=226, K_DATA=227, K_DATABASE=228, 
		K_DATAPATH=229, K_DAY=230, K_DEACTIVATE=231, K_DEALLOCATE=232, K_DEC=233, 
		K_DECLARE=234, K_DEFAULTS=235, K_DEFERRED=236, K_DEFINE=237, K_DEFINER=238, 
		K_DELETE=239, K_DELIMITER=240, K_DELIMITERS=241, K_DELTARANGE_COMP=242, 
		K_DELTARANGE_COMP_SP=243, K_DELTAVAL=244, K_DEPENDS=245, K_DETERMINES=246, 
		K_DIRECT=247, K_DIRECTCOLS=248, K_DIRECTED=249, K_DIRECTGROUPED=250, K_DIRECTPROJ=251, 
		K_DISABLE=252, K_DISABLED=253, K_DISCONNECT=254, K_DISTVALINDEX=255, K_DO=256, 
		K_DOMAIN=257, K_DOUBLE=258, K_DROP=259, K_DURABLE=260, K_EACH=261, K_ENABLE=262, 
		K_ENABLED=263, K_ENCLOSED=264, K_ENCODING=265, K_ENCRYPTED=266, K_ENFORCELENGTH=267, 
		K_EPHEMERAL=268, K_EPOCH=269, K_ERROR=270, K_ESCAPE=271, K_EVENT=272, 
		K_EVENTS=273, K_EXCEPTION=274, K_EXCEPTIONS=275, K_EXCLUDE=276, K_EXCLUDING=277, 
		K_EXCLUSIVE=278, K_EXECUTE=279, K_EXECUTIONPARALLELISM=280, K_EXPIRE=281, 
		K_EXPLAIN=282, K_EXPORT=283, K_EXTERNAL=284, K_FAILED_LOGIN_ATTEMPTS=285, 
		K_FAULT=286, K_FENCED=287, K_FETCH=288, K_FILESYSTEM=289, K_FILLER=290, 
		K_FILTER=291, K_FIRST=292, K_FIXEDWIDTH=293, K_FLEX=294, K_FLEXIBLE=295, 
		K_FOLLOWING=296, K_FORCE=297, K_FORMAT=298, K_FORWARD=299, K_FREEZE=300, 
		K_FUNCTION=301, K_FUNCTIONS=302, K_GCDDELTA=303, K_GET=304, K_GLOBAL=305, 
		K_GRACEPERIOD=306, K_GROUPED=307, K_GROUPING=308, K_GZIP=309, K_GZIP_COMP=310, 
		K_HANDLER=311, K_HCATALOG=312, K_HCATALOG_CONNECTION_TIMEOUT=313, K_HCATALOG_DB=314, 
		K_HCATALOG_SCHEMA=315, K_HCATALOG_SLOW_TRANSFER_LIMIT=316, K_HCATALOG_SLOW_TRANSFER_TIME=317, 
		K_HCATALOG_USER=318, K_HIGH=319, K_HIVE_PARTITION_COLS=320, K_HIVESERVER2_HOSTNAME=321, 
		K_HOLD=322, K_HOST=323, K_HOSTNAME=324, K_HOUR=325, K_HOURS=326, K_IDENTIFIED=327, 
		K_IDENTITY=328, K_IDLESESSIONTIMEOUT=329, K_IF=330, K_IGNORE=331, K_IMMEDIATE=332, 
		K_IMMUTABLE=333, K_IMPLICIT=334, K_INCLUDE=335, K_INCLUDING=336, K_INCREMENT=337, 
		K_INDEX=338, K_INHERITS=339, K_INPUT=340, K_INSENSITIVE=341, K_INSERT=342, 
		K_INSTEAD=343, K_INTERFACE=344, K_INTERPOLATE=345, K_INVOKER=346, K_ISOLATION=347, 
		K_JSON=348, K_KEY=349, K_LABEL=350, K_LANCOMPILER=351, K_LANGUAGE=352, 
		K_LARGE=353, K_LAST=354, K_LATEST=355, K_LESS=356, K_LEVEL=357, K_LIBRARY=358, 
		K_LISTEN=359, K_LOAD=360, K_LOCAL=361, K_LOCATION=362, K_LOCK=363, K_LONG=364, 
		K_LOW=365, K_LZO=366, K_MANAGED=367, K_MASK=368, K_MATCHED=369, K_MATERIALIZE=370, 
		K_MAXCONCURRENCY=371, K_MAXCONCURRENCYGRACE=372, K_MAXCONNECTIONS=373, 
		K_MAXMEMORYSIZE=374, K_MAXPAYLOAD=375, K_MAXQUERYMEMORYSIZE=376, K_MAXVALUE=377, 
		K_MEDIUM=378, K_MEMORYCAP=379, K_MEMORYSIZE=380, K_MERGE=381, K_MERGEOUT=382, 
		K_METHOD=383, K_MICROSECONDS=384, K_MILLISECONDS=385, K_MINUTE=386, K_MINUTES=387, 
		K_MINVALUE=388, K_MODE=389, K_MODEL=390, K_MONTH=391, K_MOVE=392, K_MOVEOUT=393, 
		K_NAME=394, K_NATIONAL=395, K_NATIVE=396, K_NETWORK=397, K_NEXT=398, K_NO=399, 
		K_NOCREATEDB=400, K_NOCREATEUSER=401, K_NODE=402, K_NODES=403, K_NOTHING=404, 
		K_NOTIFIER=405, K_NOTIFY=406, K_NOWAIT=407, K_NULLAWARE=408, K_NULLCOLS=409, 
		K_NULLS=410, K_OBJECT=411, K_OCTETS=412, K_OF=413, K_OFF=414, K_OIDS=415, 
		K_OPERATOR=416, K_OPT=417, K_OPTIMIZER=418, K_OPTION=419, K_OPTVER=420, 
		K_ORC=421, K_OTHERS=422, K_OWNER=423, K_PARAMETER=424, K_PARAMETERS=425, 
		K_PARQUET=426, K_PARSER=427, K_PARTIAL=428, K_PARTITION=429, K_PARTITIONING=430, 
		K_PASSWORD=431, K_PASSWORD_GRACE_TIME=432, K_PASSWORD_LIFE_TIME=433, K_PASSWORD_LOCK_TIME=434, 
		K_PASSWORD_MAX_LENGTH=435, K_PASSWORD_MIN_DIGITS=436, K_PASSWORD_MIN_LENGTH=437, 
		K_PASSWORD_MIN_LETTERS=438, K_PASSWORD_MIN_LOWERCASE_LETTERS=439, K_PASSWORD_MIN_SYMBOLS=440, 
		K_PASSWORD_MIN_UPPERCASE_LETTERS=441, K_PASSWORD_REUSE_MAX=442, K_PASSWORD_REUSE_TIME=443, 
		K_PATTERN=444, K_PERCENT=445, K_PERMANENT=446, K_PLACING=447, K_PLANNEDCONCURRENCY=448, 
		K_POLICY=449, K_POOL=450, K_PORT=451, K_PRECEDING=452, K_PREPARE=453, 
		K_PREPASS=454, K_PRESERVE=455, K_PREVIOUS=456, K_PRIOR=457, K_PRIORITY=458, 
		K_PRIVILEGES=459, K_PROCEDURAL=460, K_PROCEDURE=461, K_PROFILE=462, K_PROJECTION=463, 
		K_PROJECTIONS=464, K_PSDATE=465, K_QUERY=466, K_QUEUETIMEOUT=467, K_QUOTE=468, 
		K_RANGE=469, K_RAW=470, K_READ=471, K_RECHECK=472, K_RECORD=473, K_RECOVER=474, 
		K_RECURSIVE=475, K_REFRESH=476, K_REINDEX=477, K_REJECTED=478, K_REJECTMAX=479, 
		K_RELATIVE=480, K_RELEASE=481, K_REMOVE=482, K_RENAME=483, K_REORGANIZE=484, 
		K_REPEATABLE=485, K_REPLACE=486, K_RESET=487, K_RESOURCE=488, K_RESTART=489, 
		K_RESTRICT=490, K_RESULTS=491, K_RETURN=492, K_RETURNREJECTED=493, K_REVOKE=494, 
		K_RLE=495, K_ROLE=496, K_ROLES=497, K_ROLLBACK=498, K_ROLLUP=499, K_ROWS=500, 
		K_RULE=501, K_RUNTIMECAP=502, K_RUNTIMEPRIORITY=503, K_RUNTIMEPRIORITYTHRESHOLD=504, 
		K_SAVE=505, K_SAVEPOINT=506, K_SCROLL=507, K_SEARCH_PATH=508, K_SECOND=509, 
		K_SECONDS=510, K_SECURITY=511, K_SECURITY_ALGORITHM=512, K_SEGMENTED=513, 
		K_SEMI=514, K_SEMIALL=515, K_SEQUENCE=516, K_SEQUENCES=517, K_SERIALIZABLE=518, 
		K_SESSION=519, K_SET=520, K_SETOF=521, K_SETS=522, K_SHARE=523, K_SHARED=524, 
		K_SHOW=525, K_SIMPLE=526, K_SINGLEINITIATOR=527, K_SITE=528, K_SITES=529, 
		K_SKIP=530, K_SOURCE=531, K_SPLIT=532, K_SSL_CONFIG=533, K_STABLE=534, 
		K_STANDBY=535, K_START=536, K_STATEMENT=537, K_STATISTICS=538, K_STDIN=539, 
		K_STDOUT=540, K_STEMMER=541, K_STORAGE=542, K_STREAM=543, K_STRENGTH=544, 
		K_STRICT=545, K_SUBNET=546, K_SYSID=547, K_SYSTEM=548, K_TABLES=549, K_TABLESAMPLE=550, 
		K_TABLESPACE=551, K_TEMP=552, K_TEMPLATE=553, K_TEMPORARY=554, K_TEMPSPACECAP=555, 
		K_TERMINATOR=556, K_THAN=557, K_TIES=558, K_TLS=559, K_TOAST=560, K_TOKENIZER=561, 
		K_TOLERANCE=562, K_TRANSACTION=563, K_TRANSFORM=564, K_TRICKLE=565, K_TRIGGER=566, 
		K_TRUNCATE=567, K_TRUSTED=568, K_TUNING=569, K_TYPE=570, K_UDPARAMETER=571, 
		K_UNCOMMITTED=572, K_UNCOMPRESSED=573, K_UNI=574, K_UNINDEXED=575, K_UNKNOWN=576, 
		K_UNLIMITED=577, K_UNLISTEN=578, K_UNLOCK=579, K_UNPACKER=580, K_UNSEGMENTED=581, 
		K_UPDATE=582, K_USAGE=583, K_VACUUM=584, K_VALIDATE=585, K_VALIDATOR=586, 
		K_VALINDEX=587, K_VALUE=588, K_VALUES=589, K_VARYING=590, K_VERBOSE=591, 
		K_VERTICA=592, K_VIEW=593, K_VOLATILE=594, K_WAIT=595, K_WEBHDFS_ADDRESS=596, 
		K_WEBSERVICE_HOSTNAME=597, K_WEBSERVICE_PORT=598, K_WITHOUT=599, K_WORK=600, 
		K_WRITE=601, K_YEAR=602, K_ZONE=603, K_UDPARAMETERS=604, K_ALLNODES=605, 
		K_PUBLIC=606, K_DIRECTORY=607, K_ROWGROUPSIZEMB=608, K_COMPRESSION=609, 
		K_FILESIZEMB=610, K_FILEMODE=611, K_DIRMODE=612, K_ZSTD=613, K_ROUTE=614, 
		K_ROUTING=615, K_ESCAPE_STRING_WARNING=616, K_STANDARD_CONFORMING_STRINGS=617, 
		K_AUTOCOMMIT=618, K_LOCALE=619, K_MULTIPLEACTIVERESULTSETS=620, K_RESOURCE_POOL=621, 
		K_INTERVALSTYLE=622, K_PLAIN=623, K_UNITS=624, K_DATESTYLE=625, K_ISO=626, 
		K_MDY=627, K_POSTGRES=628, K_SQL=629, K_GERMAN=630, K_DMY=631, K_TLSMODE=632, 
		K_PREFER=633, K_INT8=634, K_FLOAT8=635, K_GEOMETRY=636, K_GEOGRAPHY=637, 
		K_DATE=638, K_ADDRESS=639, K_BALANCE=640, K_GBYTYPE=641, K_HASH=642, K_PIPE=643, 
		K_SYN_JOIN=644, K_ENABLE_WITH_CLAUSE_MATERIALIZATION=645, K_EARLY_MATERIALIZATION=646, 
		K_CREATETYPE=647, K_SYNTACTIC_JOIN=648, K_BRANCH=649, K_DATATYPE=650, 
		K_VERBATIM=651, K_IGNORECONST=652, K_UTYPE=653, K_JTYPE=654, K_DISTRIB=655, 
		K_PROJS=656, K_SKIP_PROJS=657, COMMA=658, MINUS=659, STAR=660, PLUS=661, 
		DCOLON=662, OPEN_PAREN=663, CLOSE_PAREN=664, DOT=665, SEMI=666, UNDERSCORE=667, 
		AMP_AMP=668, AMP_LT=669, BANG=670, ABS=671, BANG_BANG=672, BANG_EQUAL=673, 
		EQUAL=674, EQUAL2=675, GT=676, GTE=677, LT=678, LTE=679, LT_GT=680, SQROOT=681, 
		CUBEROOT=682, EXP=683, MOD=684, DIV2=685, DIV=686, DPIPE=687, OPEN_SQUARE_BRACKET=688, 
		CLOSE_SQUARE_BRACKET=689, O_AND=690, O_OR=691, O_XOR=692, O_NOT=693, O_SHIFT_LEFT=694, 
		O_SHIFT_RIGHT=695, IPV4_ADDR=696, IPV6_ADDR=697, SPACE=698, COMMENT=699, 
		LINE_COMMENT=700, COMMAND=701, OPEN_HINT=702, CLOSE_HINT=703, DOUBLE_QUOTE_STRING=704, 
		PARAM=705, WORD=706, SINGLE_QUOTE_STRING=707, FLOAT=708, REAL=709, DECIMAL=710, 
		ANY=711;
	public static final int
		RULE_root = 0, RULE_sqlStatement = 1, RULE_statement = 2, RULE_alter_access_policy_statement = 3, 
		RULE_alter_authentication_statement = 4, RULE_alter_database_drop_statement = 5, 
		RULE_alter_fault_group_statement = 6, RULE_alter_function_statement = 7, 
		RULE_alter_hcatalog_schema_statement = 8, RULE_alter_library_statement = 9, 
		RULE_alter_model_statement = 10, RULE_alter_network_interface_statement = 11, 
		RULE_alter_node_statement = 12, RULE_alter_notfifier_statement = 13, RULE_notifier_params = 14, 
		RULE_alter_projection_statement = 15, RULE_alter_profile_statement = 16, 
		RULE_alter_profile_rename_statement = 17, RULE_alter_resource_pool_statement = 18, 
		RULE_resource_pool_param = 19, RULE_alter_role_rename_statement = 20, 
		RULE_alter_schema_statement = 21, RULE_alter_sequence_statement = 22, 
		RULE_sequence_params = 23, RULE_alter_session_statement = 24, RULE_alter_subnet_statement = 25, 
		RULE_alter_table_rename_statement = 26, RULE_alter_table_general_statment = 27, 
		RULE_alter_table_item = 28, RULE_alter_user_statement = 29, RULE_user_params = 30, 
		RULE_alter_view_statement = 31, RULE_todo_statement = 32, RULE_begin_transaction_statement = 33, 
		RULE_comment_on_statement = 34, RULE_comment_on_column_statement = 35, 
		RULE_comment_on_constraint_statement = 36, RULE_comment_on_function_statement = 37, 
		RULE_comment_on_transform_function_statement = 38, RULE_comment_on_library_statement = 39, 
		RULE_comment_on_node_statement = 40, RULE_comment_on_schema_statement = 41, 
		RULE_comment_on_sequence_statement = 42, RULE_comment_on_table_statement = 43, 
		RULE_comment_on_view_statement = 44, RULE_comment_on_projection_statement = 45, 
		RULE_comment_value = 46, RULE_commit_statement = 47, RULE_connect_statement = 48, 
		RULE_copy_column = 49, RULE_column_option = 50, RULE_path = 51, RULE_local_path = 52, 
		RULE_inputFormat = 53, RULE_vertica_source = 54, RULE_udl_clause = 55, 
		RULE_copy_statement_option = 56, RULE_copy_statement = 57, RULE_copy_local_statement = 58, 
		RULE_copy_from_vertica_statement = 59, RULE_create_access_policy_statement = 60, 
		RULE_create_authentication_statement = 61, RULE_create_branch_statement = 62, 
		RULE_create_external_table_as_copy_statement = 63, RULE_create_fault_group_statement = 64, 
		RULE_create_flex_table_statement = 65, RULE_create_flex_external_table_as_copy_statement = 66, 
		RULE_create_function_statements_statement = 67, RULE_create_or_replace_transform_function_statement = 68, 
		RULE_create_or_replace_source_function_statement = 69, RULE_create_or_replace_parser_function_statement = 70, 
		RULE_create_or_replace_udf_function_statement = 71, RULE_create_or_replace_sql_function_statement = 72, 
		RULE_expreDefininition = 73, RULE_create_or_replace_filter_statement = 74, 
		RULE_create_or_replace_analytic_function_statement = 75, RULE_create_or_replace_aggregate_function_statement = 76, 
		RULE_create_hcatalog_schema_statement = 77, RULE_hcatalog_schema_param = 78, 
		RULE_create_library_statement = 79, RULE_create_load_balance_group_statement = 80, 
		RULE_create_local_temporary_view_statement = 81, RULE_create_location_statement = 82, 
		RULE_create_network_address_statement = 83, RULE_create_network_interface_statement = 84, 
		RULE_create_notifier_statement = 85, RULE_create_procedure_statement = 86, 
		RULE_argument_list = 87, RULE_argument_item = 88, RULE_create_profile_statement = 89, 
		RULE_projection_clause_item = 90, RULE_ksafe_clause = 91, RULE_ifNotExistsClause = 92, 
		RULE_create_projection_statement = 93, RULE_create_projection_live_aggregate_projections_statement = 94, 
		RULE_create_projection_live_aggregate_projections_gr_statement = 95, RULE_create_projection_live_aggregate_projections_topk_statement = 96, 
		RULE_create_projection_udtfs_statement = 97, RULE_columns = 98, RULE_batch_query = 99, 
		RULE_prepass_query = 100, RULE_create_resource_pool_statement = 101, RULE_create_role_statement = 102, 
		RULE_create_routing_rule_statement = 103, RULE_create_schema_statement = 104, 
		RULE_create_sequence_statement = 105, RULE_create_subnet_statement = 106, 
		RULE_create_table_statement = 107, RULE_schema_privileges_clause = 108, 
		RULE_create_table_as_statement = 109, RULE_column_name_list = 110, RULE_column_name_list_item = 111, 
		RULE_access_rank = 112, RULE_grouped_clause = 113, RULE_create_table_like_statement = 114, 
		RULE_create_table_default_statement = 115, RULE_table_constraint = 116, 
		RULE_column_definition_list = 117, RULE_column_definition = 118, RULE_column_constraint = 119, 
		RULE_load_method = 120, RULE_segmentation_clause = 121, RULE_create_temporary_table_statement = 122, 
		RULE_create_temporary_table_with_def_statement = 123, RULE_create_temporary_table_from_table_statement = 124, 
		RULE_encodedBy_clause = 125, RULE_column_ref = 126, RULE_create_text_index_statement = 127, 
		RULE_create_user_statement = 128, RULE_create_view_statement = 129, RULE_delete_statement = 130, 
		RULE_directed_query_statements_statement = 131, RULE_activate_directed_query_statement = 132, 
		RULE_create_directed_query_statement = 133, RULE_deactivate_directed_query_statement = 134, 
		RULE_drop_directed_query_statement = 135, RULE_get_directed_query_statement = 136, 
		RULE_save_query = 137, RULE_disconnect_statement = 138, RULE_drop_access_policy_statement = 139, 
		RULE_drop_aggregate_function_statement = 140, RULE_drop_authentication_statement = 141, 
		RULE_drop_branch_statement = 142, RULE_drop_fault_group_statement = 143, 
		RULE_drop_function_statement = 144, RULE_drop_source_statement = 145, 
		RULE_drop_filter_statement = 146, RULE_drop_parser_statement = 147, RULE_drop_model_statement = 148, 
		RULE_drop_library_statement = 149, RULE_drop_load_balance_group_statement = 150, 
		RULE_drop_network_address_statement = 151, RULE_drop_network_interface_statement = 152, 
		RULE_drop_notifier_statement = 153, RULE_drop_procedure_statement = 154, 
		RULE_drop_profile_statement = 155, RULE_drop_projection_statement = 156, 
		RULE_drop_resource_pool_statement = 157, RULE_drop_role_statement = 158, 
		RULE_drop_routing_rule_statement = 159, RULE_drop_schema_statement = 160, 
		RULE_drop_sequence_statement = 161, RULE_drop_subnet_statement = 162, 
		RULE_drop_table_statement = 163, RULE_drop_text_index_statement = 164, 
		RULE_drop_transform_function_statement = 165, RULE_drop_user_statement = 166, 
		RULE_drop_view_statement = 167, RULE_end_statement = 168, RULE_explain_statement = 169, 
		RULE_export_to_parquet_statement = 170, RULE_export_to_vertica_statement = 171, 
		RULE_grant_statements_statement = 172, RULE_grant_on_view_statement = 173, 
		RULE_grant_on_ude_statement = 174, RULE_grant_on_table_statement = 175, 
		RULE_grant_on_location_statement = 176, RULE_grant_on_sequence_statement = 177, 
		RULE_grant_on_schema_statement = 178, RULE_schema_privilege = 179, RULE_grant_on_role_statement = 180, 
		RULE_grant_on_resourcepool_statement = 181, RULE_grant_on_procedure_statement = 182, 
		RULE_grant_on_model_statement = 183, RULE_grant_on_library_statement = 184, 
		RULE_grant_privileges_on_database_statement = 185, RULE_grant_authentication_to_statement = 186, 
		RULE_withGrantOption = 187, RULE_grantees = 188, RULE_grantee = 189, RULE_grant_authentication_statement = 190, 
		RULE_insert_statement = 191, RULE_insert_values = 192, RULE_merge_statement = 193, 
		RULE_matchingClause = 194, RULE_profile_statement = 195, RULE_release_savepoint_statement = 196, 
		RULE_revoke_statements_statement = 197, RULE_revoke_on_view_statement = 198, 
		RULE_revoke_on_function_statement = 199, RULE_revoke_on_table_statement = 200, 
		RULE_revoke_on_location_statement = 201, RULE_revoke_on_sequence_statement = 202, 
		RULE_revoke_on_schema_statement = 203, RULE_revoke_on_role_statement = 204, 
		RULE_revoke_on_resource_pool_statement = 205, RULE_revoke_on_prodecure_statement = 206, 
		RULE_revoke_on_model_statement = 207, RULE_revoke_on_library_statement = 208, 
		RULE_revoke_on_database_statement = 209, RULE_revoke_authentication_statement = 210, 
		RULE_rollback_statement = 211, RULE_rollback_to_savepoint_statement = 212, 
		RULE_savepoint_statement = 213, RULE_with_statement = 214, RULE_at_epoch_clause = 215, 
		RULE_select_statement = 216, RULE_set_datestyle_statement = 217, RULE_set_escape_string_warning_statement = 218, 
		RULE_set_intervalstyle_statement = 219, RULE_set_locale_statement = 220, 
		RULE_set_role_statement = 221, RULE_set_search_path_statement = 222, RULE_set_session_autocommit_statement = 223, 
		RULE_set_session_characteristics_as_transaction_statement = 224, RULE_set_session_graceperiod_statement = 225, 
		RULE_set_session_idlesessiontimeout_statement = 226, RULE_set_session_memorycap_statement = 227, 
		RULE_set_session_multipleactiveresultsets_statement = 228, RULE_set_session_resource_pool_statement = 229, 
		RULE_set_session_runtimecap_statement = 230, RULE_set_session_tempspacecap_statement = 231, 
		RULE_set_standard_conforming_strings_statement = 232, RULE_set_time_zone_statement = 233, 
		RULE_show_statement = 234, RULE_show_current_statement = 235, RULE_show_database_statement = 236, 
		RULE_show_node_statement = 237, RULE_show_session_statement = 238, RULE_start_transaction_statement = 239, 
		RULE_truncate_table_statement = 240, RULE_update_statement = 241, RULE_simple_select_query_clause = 242, 
		RULE_select_query = 243, RULE_offset_clause = 244, RULE_limit_clause = 245, 
		RULE_select_clause = 246, RULE_intersect_clause = 247, RULE_except_clause = 248, 
		RULE_from_clause = 249, RULE_into_clause = 250, RULE_timeseries_clause = 251, 
		RULE_over_clause = 252, RULE_as_over_clause = 253, RULE_groupBy_clause = 254, 
		RULE_having_clause = 255, RULE_where_clause = 256, RULE_orderby_clause = 257, 
		RULE_match_clause = 258, RULE_partition_clause = 259, RULE_encoding_clause = 260, 
		RULE_owner_clause = 261, RULE_rename_clause = 262, RULE_set_schema_clause = 263, 
		RULE_orderbyItem = 264, RULE_predicates = 265, RULE_tableSample = 266, 
		RULE_dataset = 267, RULE_joinedTable = 268, RULE_elements = 269, RULE_element = 270, 
		RULE_el = 271, RULE_expressions = 272, RULE_castExpr = 273, RULE_castOperator = 274, 
		RULE_expression = 275, RULE_arrayExpr = 276, RULE_predicate = 277, RULE_nullPredicate = 278, 
		RULE_likePredicate = 279, RULE_joinPredicate = 280, RULE_interpolatePredicate = 281, 
		RULE_columnValuePredicate = 282, RULE_inPredicate = 283, RULE_constantExp = 284, 
		RULE_betweenPredicate = 285, RULE_booleanPredicate = 286, RULE_caseExp = 287, 
		RULE_alias = 288, RULE_functionCall = 289, RULE_elementWithUsing = 290, 
		RULE_usingClause = 291, RULE_commaSeparatedKeyValuePairs = 292, RULE_values = 293, 
		RULE_keyValuePair = 294, RULE_hints = 295, RULE_hint = 296, RULE_columnReference = 297, 
		RULE_tableReference = 298, RULE_viewReference = 299, RULE_sourceReference = 300, 
		RULE_filterReference = 301, RULE_parserReference = 302, RULE_projectionReference = 303, 
		RULE_procedureReference = 304, RULE_procedure = 305, RULE_functionReference = 306, 
		RULE_libraryReference = 307, RULE_sequenceReference = 308, RULE_modelReference = 309, 
		RULE_txtIndexReference = 310, RULE_schemaReference = 311, RULE_dbname = 312, 
		RULE_txtIndex = 313, RULE_host = 314, RULE_port = 315, RULE_source = 316, 
		RULE_notifier = 317, RULE_model = 318, RULE_filter = 319, RULE_parserName = 320, 
		RULE_view = 321, RULE_lb_group = 322, RULE_network_address = 323, RULE_routingRule = 324, 
		RULE_branch_identifier = 325, RULE_role = 326, RULE_lang = 327, RULE_resourcePool = 328, 
		RULE_schema = 329, RULE_udParam = 330, RULE_table = 331, RULE_params = 332, 
		RULE_projection = 333, RULE_library = 334, RULE_function = 335, RULE_param = 336, 
		RULE_node = 337, RULE_sequence = 338, RULE_column = 339, RULE_string = 340, 
		RULE_singleChar = 341, RULE_number = 342, RULE_integerNumber = 343, RULE_asteriskExp = 344, 
		RULE_subnet = 345, RULE_user = 346, RULE_owner = 347, RULE_method = 348, 
		RULE_faultGroup = 349, RULE_auth_method_name = 350, RULE_constraint = 351, 
		RULE_network_interface = 352, RULE_profile = 353, RULE_id = 354, RULE_value = 355, 
		RULE_enableOrDisable = 356, RULE_enabledOrDisabled = 357, RULE_nullOrNotNull = 358, 
		RULE_address = 359, RULE_compressionType = 360, RULE_password_parameter = 361, 
		RULE_operator = 362, RULE_bitwiseOperator = 363, RULE_booleanOperators = 364, 
		RULE_otherOperator = 365, RULE_mathematicalOperator = 366, RULE_comparisonOperator = 367, 
		RULE_isolationLevel = 368, RULE_transactionMode = 369, RULE_bool_expression = 370, 
		RULE_dataTypes = 371, RULE_binaryTypes = 372, RULE_booleanTypes = 373, 
		RULE_charTypes = 374, RULE_dateTypes = 375, RULE_apNumericTypes = 376, 
		RULE_eNumericTypes = 377, RULE_spatialTypes = 378, RULE_uuidTypes = 379, 
		RULE_otherTypes = 380, RULE_nonReserved = 381;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatement", "statement", "alter_access_policy_statement", 
			"alter_authentication_statement", "alter_database_drop_statement", "alter_fault_group_statement", 
			"alter_function_statement", "alter_hcatalog_schema_statement", "alter_library_statement", 
			"alter_model_statement", "alter_network_interface_statement", "alter_node_statement", 
			"alter_notfifier_statement", "notifier_params", "alter_projection_statement", 
			"alter_profile_statement", "alter_profile_rename_statement", "alter_resource_pool_statement", 
			"resource_pool_param", "alter_role_rename_statement", "alter_schema_statement", 
			"alter_sequence_statement", "sequence_params", "alter_session_statement", 
			"alter_subnet_statement", "alter_table_rename_statement", "alter_table_general_statment", 
			"alter_table_item", "alter_user_statement", "user_params", "alter_view_statement", 
			"todo_statement", "begin_transaction_statement", "comment_on_statement", 
			"comment_on_column_statement", "comment_on_constraint_statement", "comment_on_function_statement", 
			"comment_on_transform_function_statement", "comment_on_library_statement", 
			"comment_on_node_statement", "comment_on_schema_statement", "comment_on_sequence_statement", 
			"comment_on_table_statement", "comment_on_view_statement", "comment_on_projection_statement", 
			"comment_value", "commit_statement", "connect_statement", "copy_column", 
			"column_option", "path", "local_path", "inputFormat", "vertica_source", 
			"udl_clause", "copy_statement_option", "copy_statement", "copy_local_statement", 
			"copy_from_vertica_statement", "create_access_policy_statement", "create_authentication_statement", 
			"create_branch_statement", "create_external_table_as_copy_statement", 
			"create_fault_group_statement", "create_flex_table_statement", "create_flex_external_table_as_copy_statement", 
			"create_function_statements_statement", "create_or_replace_transform_function_statement", 
			"create_or_replace_source_function_statement", "create_or_replace_parser_function_statement", 
			"create_or_replace_udf_function_statement", "create_or_replace_sql_function_statement", 
			"expreDefininition", "create_or_replace_filter_statement", "create_or_replace_analytic_function_statement", 
			"create_or_replace_aggregate_function_statement", "create_hcatalog_schema_statement", 
			"hcatalog_schema_param", "create_library_statement", "create_load_balance_group_statement", 
			"create_local_temporary_view_statement", "create_location_statement", 
			"create_network_address_statement", "create_network_interface_statement", 
			"create_notifier_statement", "create_procedure_statement", "argument_list", 
			"argument_item", "create_profile_statement", "projection_clause_item", 
			"ksafe_clause", "ifNotExistsClause", "create_projection_statement", "create_projection_live_aggregate_projections_statement", 
			"create_projection_live_aggregate_projections_gr_statement", "create_projection_live_aggregate_projections_topk_statement", 
			"create_projection_udtfs_statement", "columns", "batch_query", "prepass_query", 
			"create_resource_pool_statement", "create_role_statement", "create_routing_rule_statement", 
			"create_schema_statement", "create_sequence_statement", "create_subnet_statement", 
			"create_table_statement", "schema_privileges_clause", "create_table_as_statement", 
			"column_name_list", "column_name_list_item", "access_rank", "grouped_clause", 
			"create_table_like_statement", "create_table_default_statement", "table_constraint", 
			"column_definition_list", "column_definition", "column_constraint", "load_method", 
			"segmentation_clause", "create_temporary_table_statement", "create_temporary_table_with_def_statement", 
			"create_temporary_table_from_table_statement", "encodedBy_clause", "column_ref", 
			"create_text_index_statement", "create_user_statement", "create_view_statement", 
			"delete_statement", "directed_query_statements_statement", "activate_directed_query_statement", 
			"create_directed_query_statement", "deactivate_directed_query_statement", 
			"drop_directed_query_statement", "get_directed_query_statement", "save_query", 
			"disconnect_statement", "drop_access_policy_statement", "drop_aggregate_function_statement", 
			"drop_authentication_statement", "drop_branch_statement", "drop_fault_group_statement", 
			"drop_function_statement", "drop_source_statement", "drop_filter_statement", 
			"drop_parser_statement", "drop_model_statement", "drop_library_statement", 
			"drop_load_balance_group_statement", "drop_network_address_statement", 
			"drop_network_interface_statement", "drop_notifier_statement", "drop_procedure_statement", 
			"drop_profile_statement", "drop_projection_statement", "drop_resource_pool_statement", 
			"drop_role_statement", "drop_routing_rule_statement", "drop_schema_statement", 
			"drop_sequence_statement", "drop_subnet_statement", "drop_table_statement", 
			"drop_text_index_statement", "drop_transform_function_statement", "drop_user_statement", 
			"drop_view_statement", "end_statement", "explain_statement", "export_to_parquet_statement", 
			"export_to_vertica_statement", "grant_statements_statement", "grant_on_view_statement", 
			"grant_on_ude_statement", "grant_on_table_statement", "grant_on_location_statement", 
			"grant_on_sequence_statement", "grant_on_schema_statement", "schema_privilege", 
			"grant_on_role_statement", "grant_on_resourcepool_statement", "grant_on_procedure_statement", 
			"grant_on_model_statement", "grant_on_library_statement", "grant_privileges_on_database_statement", 
			"grant_authentication_to_statement", "withGrantOption", "grantees", "grantee", 
			"grant_authentication_statement", "insert_statement", "insert_values", 
			"merge_statement", "matchingClause", "profile_statement", "release_savepoint_statement", 
			"revoke_statements_statement", "revoke_on_view_statement", "revoke_on_function_statement", 
			"revoke_on_table_statement", "revoke_on_location_statement", "revoke_on_sequence_statement", 
			"revoke_on_schema_statement", "revoke_on_role_statement", "revoke_on_resource_pool_statement", 
			"revoke_on_prodecure_statement", "revoke_on_model_statement", "revoke_on_library_statement", 
			"revoke_on_database_statement", "revoke_authentication_statement", "rollback_statement", 
			"rollback_to_savepoint_statement", "savepoint_statement", "with_statement", 
			"at_epoch_clause", "select_statement", "set_datestyle_statement", "set_escape_string_warning_statement", 
			"set_intervalstyle_statement", "set_locale_statement", "set_role_statement", 
			"set_search_path_statement", "set_session_autocommit_statement", "set_session_characteristics_as_transaction_statement", 
			"set_session_graceperiod_statement", "set_session_idlesessiontimeout_statement", 
			"set_session_memorycap_statement", "set_session_multipleactiveresultsets_statement", 
			"set_session_resource_pool_statement", "set_session_runtimecap_statement", 
			"set_session_tempspacecap_statement", "set_standard_conforming_strings_statement", 
			"set_time_zone_statement", "show_statement", "show_current_statement", 
			"show_database_statement", "show_node_statement", "show_session_statement", 
			"start_transaction_statement", "truncate_table_statement", "update_statement", 
			"simple_select_query_clause", "select_query", "offset_clause", "limit_clause", 
			"select_clause", "intersect_clause", "except_clause", "from_clause", 
			"into_clause", "timeseries_clause", "over_clause", "as_over_clause", 
			"groupBy_clause", "having_clause", "where_clause", "orderby_clause", 
			"match_clause", "partition_clause", "encoding_clause", "owner_clause", 
			"rename_clause", "set_schema_clause", "orderbyItem", "predicates", "tableSample", 
			"dataset", "joinedTable", "elements", "element", "el", "expressions", 
			"castExpr", "castOperator", "expression", "arrayExpr", "predicate", "nullPredicate", 
			"likePredicate", "joinPredicate", "interpolatePredicate", "columnValuePredicate", 
			"inPredicate", "constantExp", "betweenPredicate", "booleanPredicate", 
			"caseExp", "alias", "functionCall", "elementWithUsing", "usingClause", 
			"commaSeparatedKeyValuePairs", "values", "keyValuePair", "hints", "hint", 
			"columnReference", "tableReference", "viewReference", "sourceReference", 
			"filterReference", "parserReference", "projectionReference", "procedureReference", 
			"procedure", "functionReference", "libraryReference", "sequenceReference", 
			"modelReference", "txtIndexReference", "schemaReference", "dbname", "txtIndex", 
			"host", "port", "source", "notifier", "model", "filter", "parserName", 
			"view", "lb_group", "network_address", "routingRule", "branch_identifier", 
			"role", "lang", "resourcePool", "schema", "udParam", "table", "params", 
			"projection", "library", "function", "param", "node", "sequence", "column", 
			"string", "singleChar", "number", "integerNumber", "asteriskExp", "subnet", 
			"user", "owner", "method", "faultGroup", "auth_method_name", "constraint", 
			"network_interface", "profile", "id", "value", "enableOrDisable", "enabledOrDisabled", 
			"nullOrNotNull", "address", "compressionType", "password_parameter", 
			"operator", "bitwiseOperator", "booleanOperators", "otherOperator", "mathematicalOperator", 
			"comparisonOperator", "isolationLevel", "transactionMode", "bool_expression", 
			"dataTypes", "binaryTypes", "booleanTypes", "charTypes", "dateTypes", 
			"apNumericTypes", "eNumericTypes", "spatialTypes", "uuidTypes", "otherTypes", 
			"nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "','", "'-'", 
			"'*'", "'+'", "'::'", "'('", "')'", "'.'", "';'", "'_'", "'&&'", "'&<'", 
			"'!'", "'@'", "'!!'", "'!='", "'='", "'<=>'", "'>'", "'>='", "'<'", "'<='", 
			"'<>'", "'|/'", "'||/'", "'^'", "'%'", "'//'", "'/'", "'||'", "'['", 
			"']'", "'&'", "'|'", "'#'", "'~'", "'<<'", "'>>'", null, null, null, 
			null, null, null, "'/*+'", "'*/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "K_ALL", "K_AND", "K_ANY", "K_ARRAY", "K_AS", "K_ASC", "K_AUTHORIZATION", 
			"K_BETWEEN", "K_BIGINT", "K_BINARY", "K_BIT", "K_BOOLEAN", "K_BOTH", 
			"K_CASE", "K_CAST", "K_CHAR", "K_CHAR_LENGTH", "K_CHARACTER_LENGTH", 
			"K_CHECK", "K_COLLATE", "K_COLUMN", "K_CONSTRAINT", "K_CORRELATION", 
			"K_CREATE", "K_CROSS", "K_CURRENT_DATABASE", "K_CURRENT_DATE", "K_CURRENT_SCHEMA", 
			"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_CURRENT_USER", "K_DATEDIFF", 
			"K_DATETIME", "K_DECIMAL", "K_DECODE", "K_DEFAULT", "K_DEFERRABLE", "K_DESC", 
			"K_DISTINCT", "K_ELSE", "K_ENCODED", "K_END", "K_EXCEPT", "K_EXISTS", 
			"K_EXTRACT", "K_FALSE", "K_FLOAT", "K_FOR", "K_FOREIGN", "K_FROM", "K_FULL", 
			"K_GRANT", "K_GROUP", "K_HAVING", "K_ILIKE", "K_ILIKEB", "K_IN", "K_INITIALLY", 
			"K_INNER", "K_INOUT", "K_INT", "K_INTEGER", "K_INTERSECT", "K_INTERVAL", 
			"K_INTERVALYM", "K_INTO", "K_IS", "K_ISNULL", "K_JOIN", "K_KSAFE", "K_LEADING", 
			"K_LEFT", "K_LIKE", "K_LIKEB", "K_LIMIT", "K_LOCALTIME", "K_LOCALTIMESTAMP", 
			"K_MATCH", "K_MINUS", "K_MONEY", "K_NATURAL", "K_NCHAR", "K_NEW", "K_NONE", 
			"K_NOT", "K_NOTNULL", "K_NULL", "K_NULLSEQUAL", "K_NUMBER", "K_NUMERIC", 
			"K_OFFSET", "K_OLD", "K_ON", "K_ONLY", "K_OR", "K_ORDER", "K_OUT", "K_OUTER", 
			"K_OVER", "K_OVERLAPS", "K_OVERLAY", "K_PINNED", "K_POSITION", "K_PRECISION", 
			"K_PRIMARY", "K_REAL", "K_REFERENCES", "K_RIGHT", "K_ROW", "K_SCHEMA", 
			"K_SELECT", "K_SESSION_USER", "K_SIMILAR", "K_SMALLDATETIME", "K_SMALLINT", 
			"K_SOME", "K_SUBSTRING", "K_SYSDATE", "K_TABLE", "K_TEXT", "K_THEN", 
			"K_TIME", "K_TIMESERIES", "K_TIMESTAMP", "K_TIMESTAMPADD", "K_TIMESTAMPDIFF", 
			"K_TIMESTAMPTZ", "K_TIMETZ", "K_TIMEZONE", "K_TINYINT", "K_TO", "K_TRAILING", 
			"K_TREAT", "K_TRIM", "K_TRUE", "K_UNBOUNDED", "K_UNION", "K_UNIQUE", 
			"K_USER", "K_USING", "K_UUID", "K_VARBINARY", "K_VARCHAR", "K_VARCHAR2", 
			"K_WHEN", "K_WHERE", "K_WINDOW", "K_WITH", "K_WITHIN", "K_ABORT", "K_ABSOLUTE", 
			"K_ACCESS", "K_ACCESSRANK", "K_ACCOUNT", "K_ACTION", "K_ACTIVATE", "K_ACTIVEPARTITIONCOUNT", 
			"K_ADD", "K_ADMIN", "K_AFTER", "K_AGGREGATE", "K_ALSO", "K_ALTER", "K_ANALYSE", 
			"K_ANALYTIC", "K_ANALYZE", "K_ANNOTATED", "K_ANTI", "K_ASSERTION", "K_ASSIGNMENT", 
			"K_AT", "K_AUTHENTICATION", "K_AUTO", "K_AUTO_INCREMENT", "K_AVAILABLE", 
			"K_BACKWARD", "K_BASENAME", "K_BATCH", "K_BEFORE", "K_BEGIN", "K_BEST", 
			"K_BLOCK", "K_BLOCK_DICT", "K_BLOCKDICT_COMP", "K_BROADCAST", "K_BY", 
			"K_BYTEA", "K_BYTES", "K_BZIP", "K_BZIP_COMP", "K_CACHE", "K_CALLED", 
			"K_CASCADE", "K_CATALOGPATH", "K_CHAIN", "K_CHARACTER", "K_CHARACTERISTICS", 
			"K_CHARACTERS", "K_CHECKPOINT", "K_CLASS", "K_CLEAR", "K_CLOSE", "K_CLUSTER", 
			"K_COLSIZES", "K_COLUMNS_COUNT", "K_COMMENT", "K_COMMIT", "K_COMMITTED", 
			"K_COMMONDELTA_COMP", "K_COMMUNAL", "K_COMPLEX", "K_CONNECT", "K_CONSTRAINTS", 
			"K_CONTROL", "K_COPY", "K_CPUAFFINITYMODE", "K_CPUAFFINITYSET", "K_CREATEDB", 
			"K_CREATEUSER", "K_CSV", "K_CUBE", "K_CURRENT", "K_CURSOR", "K_CUSTOM", 
			"K_CUSTOM_PARTITIONS", "K_CYCLE", "K_DATA", "K_DATABASE", "K_DATAPATH", 
			"K_DAY", "K_DEACTIVATE", "K_DEALLOCATE", "K_DEC", "K_DECLARE", "K_DEFAULTS", 
			"K_DEFERRED", "K_DEFINE", "K_DEFINER", "K_DELETE", "K_DELIMITER", "K_DELIMITERS", 
			"K_DELTARANGE_COMP", "K_DELTARANGE_COMP_SP", "K_DELTAVAL", "K_DEPENDS", 
			"K_DETERMINES", "K_DIRECT", "K_DIRECTCOLS", "K_DIRECTED", "K_DIRECTGROUPED", 
			"K_DIRECTPROJ", "K_DISABLE", "K_DISABLED", "K_DISCONNECT", "K_DISTVALINDEX", 
			"K_DO", "K_DOMAIN", "K_DOUBLE", "K_DROP", "K_DURABLE", "K_EACH", "K_ENABLE", 
			"K_ENABLED", "K_ENCLOSED", "K_ENCODING", "K_ENCRYPTED", "K_ENFORCELENGTH", 
			"K_EPHEMERAL", "K_EPOCH", "K_ERROR", "K_ESCAPE", "K_EVENT", "K_EVENTS", 
			"K_EXCEPTION", "K_EXCEPTIONS", "K_EXCLUDE", "K_EXCLUDING", "K_EXCLUSIVE", 
			"K_EXECUTE", "K_EXECUTIONPARALLELISM", "K_EXPIRE", "K_EXPLAIN", "K_EXPORT", 
			"K_EXTERNAL", "K_FAILED_LOGIN_ATTEMPTS", "K_FAULT", "K_FENCED", "K_FETCH", 
			"K_FILESYSTEM", "K_FILLER", "K_FILTER", "K_FIRST", "K_FIXEDWIDTH", "K_FLEX", 
			"K_FLEXIBLE", "K_FOLLOWING", "K_FORCE", "K_FORMAT", "K_FORWARD", "K_FREEZE", 
			"K_FUNCTION", "K_FUNCTIONS", "K_GCDDELTA", "K_GET", "K_GLOBAL", "K_GRACEPERIOD", 
			"K_GROUPED", "K_GROUPING", "K_GZIP", "K_GZIP_COMP", "K_HANDLER", "K_HCATALOG", 
			"K_HCATALOG_CONNECTION_TIMEOUT", "K_HCATALOG_DB", "K_HCATALOG_SCHEMA", 
			"K_HCATALOG_SLOW_TRANSFER_LIMIT", "K_HCATALOG_SLOW_TRANSFER_TIME", "K_HCATALOG_USER", 
			"K_HIGH", "K_HIVE_PARTITION_COLS", "K_HIVESERVER2_HOSTNAME", "K_HOLD", 
			"K_HOST", "K_HOSTNAME", "K_HOUR", "K_HOURS", "K_IDENTIFIED", "K_IDENTITY", 
			"K_IDLESESSIONTIMEOUT", "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IMMUTABLE", 
			"K_IMPLICIT", "K_INCLUDE", "K_INCLUDING", "K_INCREMENT", "K_INDEX", "K_INHERITS", 
			"K_INPUT", "K_INSENSITIVE", "K_INSERT", "K_INSTEAD", "K_INTERFACE", "K_INTERPOLATE", 
			"K_INVOKER", "K_ISOLATION", "K_JSON", "K_KEY", "K_LABEL", "K_LANCOMPILER", 
			"K_LANGUAGE", "K_LARGE", "K_LAST", "K_LATEST", "K_LESS", "K_LEVEL", "K_LIBRARY", 
			"K_LISTEN", "K_LOAD", "K_LOCAL", "K_LOCATION", "K_LOCK", "K_LONG", "K_LOW", 
			"K_LZO", "K_MANAGED", "K_MASK", "K_MATCHED", "K_MATERIALIZE", "K_MAXCONCURRENCY", 
			"K_MAXCONCURRENCYGRACE", "K_MAXCONNECTIONS", "K_MAXMEMORYSIZE", "K_MAXPAYLOAD", 
			"K_MAXQUERYMEMORYSIZE", "K_MAXVALUE", "K_MEDIUM", "K_MEMORYCAP", "K_MEMORYSIZE", 
			"K_MERGE", "K_MERGEOUT", "K_METHOD", "K_MICROSECONDS", "K_MILLISECONDS", 
			"K_MINUTE", "K_MINUTES", "K_MINVALUE", "K_MODE", "K_MODEL", "K_MONTH", 
			"K_MOVE", "K_MOVEOUT", "K_NAME", "K_NATIONAL", "K_NATIVE", "K_NETWORK", 
			"K_NEXT", "K_NO", "K_NOCREATEDB", "K_NOCREATEUSER", "K_NODE", "K_NODES", 
			"K_NOTHING", "K_NOTIFIER", "K_NOTIFY", "K_NOWAIT", "K_NULLAWARE", "K_NULLCOLS", 
			"K_NULLS", "K_OBJECT", "K_OCTETS", "K_OF", "K_OFF", "K_OIDS", "K_OPERATOR", 
			"K_OPT", "K_OPTIMIZER", "K_OPTION", "K_OPTVER", "K_ORC", "K_OTHERS", 
			"K_OWNER", "K_PARAMETER", "K_PARAMETERS", "K_PARQUET", "K_PARSER", "K_PARTIAL", 
			"K_PARTITION", "K_PARTITIONING", "K_PASSWORD", "K_PASSWORD_GRACE_TIME", 
			"K_PASSWORD_LIFE_TIME", "K_PASSWORD_LOCK_TIME", "K_PASSWORD_MAX_LENGTH", 
			"K_PASSWORD_MIN_DIGITS", "K_PASSWORD_MIN_LENGTH", "K_PASSWORD_MIN_LETTERS", 
			"K_PASSWORD_MIN_LOWERCASE_LETTERS", "K_PASSWORD_MIN_SYMBOLS", "K_PASSWORD_MIN_UPPERCASE_LETTERS", 
			"K_PASSWORD_REUSE_MAX", "K_PASSWORD_REUSE_TIME", "K_PATTERN", "K_PERCENT", 
			"K_PERMANENT", "K_PLACING", "K_PLANNEDCONCURRENCY", "K_POLICY", "K_POOL", 
			"K_PORT", "K_PRECEDING", "K_PREPARE", "K_PREPASS", "K_PRESERVE", "K_PREVIOUS", 
			"K_PRIOR", "K_PRIORITY", "K_PRIVILEGES", "K_PROCEDURAL", "K_PROCEDURE", 
			"K_PROFILE", "K_PROJECTION", "K_PROJECTIONS", "K_PSDATE", "K_QUERY", 
			"K_QUEUETIMEOUT", "K_QUOTE", "K_RANGE", "K_RAW", "K_READ", "K_RECHECK", 
			"K_RECORD", "K_RECOVER", "K_RECURSIVE", "K_REFRESH", "K_REINDEX", "K_REJECTED", 
			"K_REJECTMAX", "K_RELATIVE", "K_RELEASE", "K_REMOVE", "K_RENAME", "K_REORGANIZE", 
			"K_REPEATABLE", "K_REPLACE", "K_RESET", "K_RESOURCE", "K_RESTART", "K_RESTRICT", 
			"K_RESULTS", "K_RETURN", "K_RETURNREJECTED", "K_REVOKE", "K_RLE", "K_ROLE", 
			"K_ROLES", "K_ROLLBACK", "K_ROLLUP", "K_ROWS", "K_RULE", "K_RUNTIMECAP", 
			"K_RUNTIMEPRIORITY", "K_RUNTIMEPRIORITYTHRESHOLD", "K_SAVE", "K_SAVEPOINT", 
			"K_SCROLL", "K_SEARCH_PATH", "K_SECOND", "K_SECONDS", "K_SECURITY", "K_SECURITY_ALGORITHM", 
			"K_SEGMENTED", "K_SEMI", "K_SEMIALL", "K_SEQUENCE", "K_SEQUENCES", "K_SERIALIZABLE", 
			"K_SESSION", "K_SET", "K_SETOF", "K_SETS", "K_SHARE", "K_SHARED", "K_SHOW", 
			"K_SIMPLE", "K_SINGLEINITIATOR", "K_SITE", "K_SITES", "K_SKIP", "K_SOURCE", 
			"K_SPLIT", "K_SSL_CONFIG", "K_STABLE", "K_STANDBY", "K_START", "K_STATEMENT", 
			"K_STATISTICS", "K_STDIN", "K_STDOUT", "K_STEMMER", "K_STORAGE", "K_STREAM", 
			"K_STRENGTH", "K_STRICT", "K_SUBNET", "K_SYSID", "K_SYSTEM", "K_TABLES", 
			"K_TABLESAMPLE", "K_TABLESPACE", "K_TEMP", "K_TEMPLATE", "K_TEMPORARY", 
			"K_TEMPSPACECAP", "K_TERMINATOR", "K_THAN", "K_TIES", "K_TLS", "K_TOAST", 
			"K_TOKENIZER", "K_TOLERANCE", "K_TRANSACTION", "K_TRANSFORM", "K_TRICKLE", 
			"K_TRIGGER", "K_TRUNCATE", "K_TRUSTED", "K_TUNING", "K_TYPE", "K_UDPARAMETER", 
			"K_UNCOMMITTED", "K_UNCOMPRESSED", "K_UNI", "K_UNINDEXED", "K_UNKNOWN", 
			"K_UNLIMITED", "K_UNLISTEN", "K_UNLOCK", "K_UNPACKER", "K_UNSEGMENTED", 
			"K_UPDATE", "K_USAGE", "K_VACUUM", "K_VALIDATE", "K_VALIDATOR", "K_VALINDEX", 
			"K_VALUE", "K_VALUES", "K_VARYING", "K_VERBOSE", "K_VERTICA", "K_VIEW", 
			"K_VOLATILE", "K_WAIT", "K_WEBHDFS_ADDRESS", "K_WEBSERVICE_HOSTNAME", 
			"K_WEBSERVICE_PORT", "K_WITHOUT", "K_WORK", "K_WRITE", "K_YEAR", "K_ZONE", 
			"K_UDPARAMETERS", "K_ALLNODES", "K_PUBLIC", "K_DIRECTORY", "K_ROWGROUPSIZEMB", 
			"K_COMPRESSION", "K_FILESIZEMB", "K_FILEMODE", "K_DIRMODE", "K_ZSTD", 
			"K_ROUTE", "K_ROUTING", "K_ESCAPE_STRING_WARNING", "K_STANDARD_CONFORMING_STRINGS", 
			"K_AUTOCOMMIT", "K_LOCALE", "K_MULTIPLEACTIVERESULTSETS", "K_RESOURCE_POOL", 
			"K_INTERVALSTYLE", "K_PLAIN", "K_UNITS", "K_DATESTYLE", "K_ISO", "K_MDY", 
			"K_POSTGRES", "K_SQL", "K_GERMAN", "K_DMY", "K_TLSMODE", "K_PREFER", 
			"K_INT8", "K_FLOAT8", "K_GEOMETRY", "K_GEOGRAPHY", "K_DATE", "K_ADDRESS", 
			"K_BALANCE", "K_GBYTYPE", "K_HASH", "K_PIPE", "K_SYN_JOIN", "K_ENABLE_WITH_CLAUSE_MATERIALIZATION", 
			"K_EARLY_MATERIALIZATION", "K_CREATETYPE", "K_SYNTACTIC_JOIN", "K_BRANCH", 
			"K_DATATYPE", "K_VERBATIM", "K_IGNORECONST", "K_UTYPE", "K_JTYPE", "K_DISTRIB", 
			"K_PROJS", "K_SKIP_PROJS", "COMMA", "MINUS", "STAR", "PLUS", "DCOLON", 
			"OPEN_PAREN", "CLOSE_PAREN", "DOT", "SEMI", "UNDERSCORE", "AMP_AMP", 
			"AMP_LT", "BANG", "ABS", "BANG_BANG", "BANG_EQUAL", "EQUAL", "EQUAL2", 
			"GT", "GTE", "LT", "LTE", "LT_GT", "SQROOT", "CUBEROOT", "EXP", "MOD", 
			"DIV2", "DIV", "DPIPE", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
			"O_AND", "O_OR", "O_XOR", "O_NOT", "O_SHIFT_LEFT", "O_SHIFT_RIGHT", "IPV4_ADDR", 
			"IPV6_ADDR", "SPACE", "COMMENT", "LINE_COMMENT", "COMMAND", "OPEN_HINT", 
			"CLOSE_HINT", "DOUBLE_QUOTE_STRING", "PARAM", "WORD", "SINGLE_QUOTE_STRING", 
			"FLOAT", "REAL", "DECIMAL", "ANY"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "VSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public VSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public List<TerminalNode> SEMI() { return getTokens(VSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(VSqlParser.SEMI, i);
		}
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public TerminalNode EOF() { return getToken(VSqlParser.EOF, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(765);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CREATE) | (1L << K_END) | (1L << K_GRANT))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (K_SELECT - 111)) | (1L << (K_WITH - 111)) | (1L << (K_ACTIVATE - 111)) | (1L << (K_ALTER - 111)) | (1L << (K_AT - 111)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (K_BEGIN - 180)) | (1L << (K_COMMENT - 180)) | (1L << (K_COMMIT - 180)) | (1L << (K_CONNECT - 180)) | (1L << (K_COPY - 180)) | (1L << (K_DEACTIVATE - 180)) | (1L << (K_DELETE - 180)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (K_DISCONNECT - 254)) | (1L << (K_DROP - 254)) | (1L << (K_EXPLAIN - 254)) | (1L << (K_EXPORT - 254)) | (1L << (K_GET - 254)))) != 0) || _la==K_INSERT || _la==K_MERGE || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RELEASE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_REVOKE - 462)) | (1L << (K_ROLLBACK - 462)) | (1L << (K_SAVE - 462)) | (1L << (K_SAVEPOINT - 462)) | (1L << (K_SET - 462)) | (1L << (K_SHOW - 462)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (K_START - 536)) | (1L << (K_TRUNCATE - 536)) | (1L << (K_UPDATE - 536)))) != 0) || _la==COMMA || _la==OPEN_PAREN) {
						{
						setState(764);
						sqlStatement();
						}
					}

					setState(767);
					match(SEMI);
					}
					} 
				}
				setState(772);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			}
			setState(777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CREATE) | (1L << K_END) | (1L << K_GRANT))) != 0) || ((((_la - 111)) & ~0x3f) == 0 && ((1L << (_la - 111)) & ((1L << (K_SELECT - 111)) | (1L << (K_WITH - 111)) | (1L << (K_ACTIVATE - 111)) | (1L << (K_ALTER - 111)) | (1L << (K_AT - 111)))) != 0) || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (K_BEGIN - 180)) | (1L << (K_COMMENT - 180)) | (1L << (K_COMMIT - 180)) | (1L << (K_CONNECT - 180)) | (1L << (K_COPY - 180)) | (1L << (K_DEACTIVATE - 180)) | (1L << (K_DELETE - 180)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (K_DISCONNECT - 254)) | (1L << (K_DROP - 254)) | (1L << (K_EXPLAIN - 254)) | (1L << (K_EXPORT - 254)) | (1L << (K_GET - 254)))) != 0) || _la==K_INSERT || _la==K_MERGE || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RELEASE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_REVOKE - 462)) | (1L << (K_ROLLBACK - 462)) | (1L << (K_SAVE - 462)) | (1L << (K_SAVEPOINT - 462)) | (1L << (K_SET - 462)) | (1L << (K_SHOW - 462)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (K_START - 536)) | (1L << (K_TRUNCATE - 536)) | (1L << (K_UPDATE - 536)))) != 0) || _la==COMMA || _la==OPEN_PAREN) {
				{
				setState(773);
				sqlStatement();
				setState(775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(774);
					match(SEMI);
					}
				}

				}
			}

			setState(780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(779);
				match(EOF);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		try {
			setState(787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(782);
				match(OPEN_PAREN);
				setState(783);
				sqlStatement();
				setState(784);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(786);
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Alter_access_policy_statementContext alter_access_policy_statement() {
			return getRuleContext(Alter_access_policy_statementContext.class,0);
		}
		public Alter_authentication_statementContext alter_authentication_statement() {
			return getRuleContext(Alter_authentication_statementContext.class,0);
		}
		public Alter_database_drop_statementContext alter_database_drop_statement() {
			return getRuleContext(Alter_database_drop_statementContext.class,0);
		}
		public Alter_fault_group_statementContext alter_fault_group_statement() {
			return getRuleContext(Alter_fault_group_statementContext.class,0);
		}
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() {
			return getRuleContext(Alter_hcatalog_schema_statementContext.class,0);
		}
		public Alter_library_statementContext alter_library_statement() {
			return getRuleContext(Alter_library_statementContext.class,0);
		}
		public Alter_model_statementContext alter_model_statement() {
			return getRuleContext(Alter_model_statementContext.class,0);
		}
		public Alter_network_interface_statementContext alter_network_interface_statement() {
			return getRuleContext(Alter_network_interface_statementContext.class,0);
		}
		public Alter_node_statementContext alter_node_statement() {
			return getRuleContext(Alter_node_statementContext.class,0);
		}
		public Alter_notfifier_statementContext alter_notfifier_statement() {
			return getRuleContext(Alter_notfifier_statementContext.class,0);
		}
		public Alter_projection_statementContext alter_projection_statement() {
			return getRuleContext(Alter_projection_statementContext.class,0);
		}
		public Alter_profile_statementContext alter_profile_statement() {
			return getRuleContext(Alter_profile_statementContext.class,0);
		}
		public Alter_profile_rename_statementContext alter_profile_rename_statement() {
			return getRuleContext(Alter_profile_rename_statementContext.class,0);
		}
		public Alter_resource_pool_statementContext alter_resource_pool_statement() {
			return getRuleContext(Alter_resource_pool_statementContext.class,0);
		}
		public Alter_role_rename_statementContext alter_role_rename_statement() {
			return getRuleContext(Alter_role_rename_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_session_statementContext alter_session_statement() {
			return getRuleContext(Alter_session_statementContext.class,0);
		}
		public Alter_subnet_statementContext alter_subnet_statement() {
			return getRuleContext(Alter_subnet_statementContext.class,0);
		}
		public Alter_table_rename_statementContext alter_table_rename_statement() {
			return getRuleContext(Alter_table_rename_statementContext.class,0);
		}
		public Alter_table_general_statmentContext alter_table_general_statment() {
			return getRuleContext(Alter_table_general_statmentContext.class,0);
		}
		public Alter_user_statementContext alter_user_statement() {
			return getRuleContext(Alter_user_statementContext.class,0);
		}
		public Alter_view_statementContext alter_view_statement() {
			return getRuleContext(Alter_view_statementContext.class,0);
		}
		public Begin_transaction_statementContext begin_transaction_statement() {
			return getRuleContext(Begin_transaction_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Connect_statementContext connect_statement() {
			return getRuleContext(Connect_statementContext.class,0);
		}
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext copy_local_statement() {
			return getRuleContext(Copy_local_statementContext.class,0);
		}
		public Copy_from_vertica_statementContext copy_from_vertica_statement() {
			return getRuleContext(Copy_from_vertica_statementContext.class,0);
		}
		public Create_access_policy_statementContext create_access_policy_statement() {
			return getRuleContext(Create_access_policy_statementContext.class,0);
		}
		public Create_authentication_statementContext create_authentication_statement() {
			return getRuleContext(Create_authentication_statementContext.class,0);
		}
		public Create_branch_statementContext create_branch_statement() {
			return getRuleContext(Create_branch_statementContext.class,0);
		}
		public Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() {
			return getRuleContext(Create_external_table_as_copy_statementContext.class,0);
		}
		public Create_fault_group_statementContext create_fault_group_statement() {
			return getRuleContext(Create_fault_group_statementContext.class,0);
		}
		public Create_flex_table_statementContext create_flex_table_statement() {
			return getRuleContext(Create_flex_table_statementContext.class,0);
		}
		public Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() {
			return getRuleContext(Create_flex_external_table_as_copy_statementContext.class,0);
		}
		public Create_function_statements_statementContext create_function_statements_statement() {
			return getRuleContext(Create_function_statements_statementContext.class,0);
		}
		public Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() {
			return getRuleContext(Create_hcatalog_schema_statementContext.class,0);
		}
		public Create_library_statementContext create_library_statement() {
			return getRuleContext(Create_library_statementContext.class,0);
		}
		public Create_load_balance_group_statementContext create_load_balance_group_statement() {
			return getRuleContext(Create_load_balance_group_statementContext.class,0);
		}
		public Create_local_temporary_view_statementContext create_local_temporary_view_statement() {
			return getRuleContext(Create_local_temporary_view_statementContext.class,0);
		}
		public Create_location_statementContext create_location_statement() {
			return getRuleContext(Create_location_statementContext.class,0);
		}
		public Create_network_address_statementContext create_network_address_statement() {
			return getRuleContext(Create_network_address_statementContext.class,0);
		}
		public Create_network_interface_statementContext create_network_interface_statement() {
			return getRuleContext(Create_network_interface_statementContext.class,0);
		}
		public Create_notifier_statementContext create_notifier_statement() {
			return getRuleContext(Create_notifier_statementContext.class,0);
		}
		public Create_procedure_statementContext create_procedure_statement() {
			return getRuleContext(Create_procedure_statementContext.class,0);
		}
		public Create_profile_statementContext create_profile_statement() {
			return getRuleContext(Create_profile_statementContext.class,0);
		}
		public Create_projection_statementContext create_projection_statement() {
			return getRuleContext(Create_projection_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_statementContext.class,0);
		}
		public Create_projection_udtfs_statementContext create_projection_udtfs_statement() {
			return getRuleContext(Create_projection_udtfs_statementContext.class,0);
		}
		public Create_resource_pool_statementContext create_resource_pool_statement() {
			return getRuleContext(Create_resource_pool_statementContext.class,0);
		}
		public Create_role_statementContext create_role_statement() {
			return getRuleContext(Create_role_statementContext.class,0);
		}
		public Create_routing_rule_statementContext create_routing_rule_statement() {
			return getRuleContext(Create_routing_rule_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Create_subnet_statementContext create_subnet_statement() {
			return getRuleContext(Create_subnet_statementContext.class,0);
		}
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext create_temporary_table_statement() {
			return getRuleContext(Create_temporary_table_statementContext.class,0);
		}
		public Create_text_index_statementContext create_text_index_statement() {
			return getRuleContext(Create_text_index_statementContext.class,0);
		}
		public Create_user_statementContext create_user_statement() {
			return getRuleContext(Create_user_statementContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Directed_query_statements_statementContext directed_query_statements_statement() {
			return getRuleContext(Directed_query_statements_statementContext.class,0);
		}
		public Disconnect_statementContext disconnect_statement() {
			return getRuleContext(Disconnect_statementContext.class,0);
		}
		public Drop_access_policy_statementContext drop_access_policy_statement() {
			return getRuleContext(Drop_access_policy_statementContext.class,0);
		}
		public Drop_aggregate_function_statementContext drop_aggregate_function_statement() {
			return getRuleContext(Drop_aggregate_function_statementContext.class,0);
		}
		public Drop_authentication_statementContext drop_authentication_statement() {
			return getRuleContext(Drop_authentication_statementContext.class,0);
		}
		public Drop_branch_statementContext drop_branch_statement() {
			return getRuleContext(Drop_branch_statementContext.class,0);
		}
		public Drop_fault_group_statementContext drop_fault_group_statement() {
			return getRuleContext(Drop_fault_group_statementContext.class,0);
		}
		public Drop_function_statementContext drop_function_statement() {
			return getRuleContext(Drop_function_statementContext.class,0);
		}
		public Drop_source_statementContext drop_source_statement() {
			return getRuleContext(Drop_source_statementContext.class,0);
		}
		public Drop_filter_statementContext drop_filter_statement() {
			return getRuleContext(Drop_filter_statementContext.class,0);
		}
		public Drop_parser_statementContext drop_parser_statement() {
			return getRuleContext(Drop_parser_statementContext.class,0);
		}
		public Drop_model_statementContext drop_model_statement() {
			return getRuleContext(Drop_model_statementContext.class,0);
		}
		public Drop_library_statementContext drop_library_statement() {
			return getRuleContext(Drop_library_statementContext.class,0);
		}
		public Drop_load_balance_group_statementContext drop_load_balance_group_statement() {
			return getRuleContext(Drop_load_balance_group_statementContext.class,0);
		}
		public Drop_network_address_statementContext drop_network_address_statement() {
			return getRuleContext(Drop_network_address_statementContext.class,0);
		}
		public Drop_network_interface_statementContext drop_network_interface_statement() {
			return getRuleContext(Drop_network_interface_statementContext.class,0);
		}
		public Drop_notifier_statementContext drop_notifier_statement() {
			return getRuleContext(Drop_notifier_statementContext.class,0);
		}
		public Drop_procedure_statementContext drop_procedure_statement() {
			return getRuleContext(Drop_procedure_statementContext.class,0);
		}
		public Drop_profile_statementContext drop_profile_statement() {
			return getRuleContext(Drop_profile_statementContext.class,0);
		}
		public Drop_projection_statementContext drop_projection_statement() {
			return getRuleContext(Drop_projection_statementContext.class,0);
		}
		public Drop_resource_pool_statementContext drop_resource_pool_statement() {
			return getRuleContext(Drop_resource_pool_statementContext.class,0);
		}
		public Drop_role_statementContext drop_role_statement() {
			return getRuleContext(Drop_role_statementContext.class,0);
		}
		public Drop_routing_rule_statementContext drop_routing_rule_statement() {
			return getRuleContext(Drop_routing_rule_statementContext.class,0);
		}
		public Drop_schema_statementContext drop_schema_statement() {
			return getRuleContext(Drop_schema_statementContext.class,0);
		}
		public Drop_sequence_statementContext drop_sequence_statement() {
			return getRuleContext(Drop_sequence_statementContext.class,0);
		}
		public Drop_subnet_statementContext drop_subnet_statement() {
			return getRuleContext(Drop_subnet_statementContext.class,0);
		}
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Drop_text_index_statementContext drop_text_index_statement() {
			return getRuleContext(Drop_text_index_statementContext.class,0);
		}
		public Drop_transform_function_statementContext drop_transform_function_statement() {
			return getRuleContext(Drop_transform_function_statementContext.class,0);
		}
		public Drop_user_statementContext drop_user_statement() {
			return getRuleContext(Drop_user_statementContext.class,0);
		}
		public Drop_view_statementContext drop_view_statement() {
			return getRuleContext(Drop_view_statementContext.class,0);
		}
		public End_statementContext end_statement() {
			return getRuleContext(End_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Export_to_parquet_statementContext export_to_parquet_statement() {
			return getRuleContext(Export_to_parquet_statementContext.class,0);
		}
		public Export_to_vertica_statementContext export_to_vertica_statement() {
			return getRuleContext(Export_to_vertica_statementContext.class,0);
		}
		public Grant_statements_statementContext grant_statements_statement() {
			return getRuleContext(Grant_statements_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Profile_statementContext profile_statement() {
			return getRuleContext(Profile_statementContext.class,0);
		}
		public Release_savepoint_statementContext release_savepoint_statement() {
			return getRuleContext(Release_savepoint_statementContext.class,0);
		}
		public Revoke_statements_statementContext revoke_statements_statement() {
			return getRuleContext(Revoke_statements_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() {
			return getRuleContext(Rollback_to_savepoint_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public With_statementContext with_statement() {
			return getRuleContext(With_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Set_datestyle_statementContext set_datestyle_statement() {
			return getRuleContext(Set_datestyle_statementContext.class,0);
		}
		public Set_escape_string_warning_statementContext set_escape_string_warning_statement() {
			return getRuleContext(Set_escape_string_warning_statementContext.class,0);
		}
		public Set_intervalstyle_statementContext set_intervalstyle_statement() {
			return getRuleContext(Set_intervalstyle_statementContext.class,0);
		}
		public Set_locale_statementContext set_locale_statement() {
			return getRuleContext(Set_locale_statementContext.class,0);
		}
		public Set_role_statementContext set_role_statement() {
			return getRuleContext(Set_role_statementContext.class,0);
		}
		public Set_search_path_statementContext set_search_path_statement() {
			return getRuleContext(Set_search_path_statementContext.class,0);
		}
		public Set_session_autocommit_statementContext set_session_autocommit_statement() {
			return getRuleContext(Set_session_autocommit_statementContext.class,0);
		}
		public Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() {
			return getRuleContext(Set_session_characteristics_as_transaction_statementContext.class,0);
		}
		public Set_session_graceperiod_statementContext set_session_graceperiod_statement() {
			return getRuleContext(Set_session_graceperiod_statementContext.class,0);
		}
		public Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() {
			return getRuleContext(Set_session_idlesessiontimeout_statementContext.class,0);
		}
		public Set_session_memorycap_statementContext set_session_memorycap_statement() {
			return getRuleContext(Set_session_memorycap_statementContext.class,0);
		}
		public Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() {
			return getRuleContext(Set_session_multipleactiveresultsets_statementContext.class,0);
		}
		public Set_session_resource_pool_statementContext set_session_resource_pool_statement() {
			return getRuleContext(Set_session_resource_pool_statementContext.class,0);
		}
		public Set_session_runtimecap_statementContext set_session_runtimecap_statement() {
			return getRuleContext(Set_session_runtimecap_statementContext.class,0);
		}
		public Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() {
			return getRuleContext(Set_session_tempspacecap_statementContext.class,0);
		}
		public Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() {
			return getRuleContext(Set_standard_conforming_strings_statementContext.class,0);
		}
		public Set_time_zone_statementContext set_time_zone_statement() {
			return getRuleContext(Set_time_zone_statementContext.class,0);
		}
		public Show_statementContext show_statement() {
			return getRuleContext(Show_statementContext.class,0);
		}
		public Show_current_statementContext show_current_statement() {
			return getRuleContext(Show_current_statementContext.class,0);
		}
		public Show_database_statementContext show_database_statement() {
			return getRuleContext(Show_database_statementContext.class,0);
		}
		public Show_node_statementContext show_node_statement() {
			return getRuleContext(Show_node_statementContext.class,0);
		}
		public Show_session_statementContext show_session_statement() {
			return getRuleContext(Show_session_statementContext.class,0);
		}
		public Start_transaction_statementContext start_transaction_statement() {
			return getRuleContext(Start_transaction_statementContext.class,0);
		}
		public Truncate_table_statementContext truncate_table_statement() {
			return getRuleContext(Truncate_table_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_statement);
		try {
			setState(924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(789);
				alter_access_policy_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(790);
				alter_authentication_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(791);
				alter_database_drop_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(792);
				alter_fault_group_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(793);
				alter_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(794);
				alter_hcatalog_schema_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(795);
				alter_library_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(796);
				alter_model_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(797);
				alter_network_interface_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(798);
				alter_node_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(799);
				alter_notfifier_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(800);
				alter_projection_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(801);
				alter_profile_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(802);
				alter_profile_rename_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(803);
				alter_resource_pool_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(804);
				alter_role_rename_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(805);
				alter_schema_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(806);
				alter_sequence_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(807);
				alter_session_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(808);
				alter_subnet_statement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(809);
				alter_table_rename_statement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(810);
				alter_table_general_statment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(811);
				alter_user_statement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(812);
				alter_view_statement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(813);
				begin_transaction_statement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(814);
				comment_on_statement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(815);
				commit_statement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(816);
				connect_statement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(817);
				copy_statement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(818);
				copy_local_statement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(819);
				copy_from_vertica_statement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(820);
				create_access_policy_statement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(821);
				create_authentication_statement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(822);
				create_branch_statement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(823);
				create_external_table_as_copy_statement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(824);
				create_fault_group_statement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(825);
				create_flex_table_statement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(826);
				create_flex_external_table_as_copy_statement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(827);
				create_function_statements_statement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(828);
				create_hcatalog_schema_statement();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(829);
				create_library_statement();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(830);
				create_load_balance_group_statement();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(831);
				create_local_temporary_view_statement();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(832);
				create_location_statement();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(833);
				create_network_address_statement();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(834);
				create_network_interface_statement();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(835);
				create_notifier_statement();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(836);
				create_procedure_statement();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(837);
				create_profile_statement();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(838);
				create_projection_statement();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(839);
				create_projection_live_aggregate_projections_statement();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(840);
				create_projection_udtfs_statement();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(841);
				create_resource_pool_statement();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(842);
				create_role_statement();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(843);
				create_routing_rule_statement();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(844);
				create_schema_statement();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(845);
				create_sequence_statement();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(846);
				create_subnet_statement();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(847);
				create_table_statement();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(848);
				create_temporary_table_statement();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(849);
				create_text_index_statement();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(850);
				create_user_statement();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(851);
				create_view_statement();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(852);
				delete_statement();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(853);
				directed_query_statements_statement();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(854);
				disconnect_statement();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(855);
				drop_access_policy_statement();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(856);
				drop_aggregate_function_statement();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(857);
				drop_authentication_statement();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(858);
				drop_branch_statement();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(859);
				drop_fault_group_statement();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(860);
				drop_function_statement();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(861);
				drop_source_statement();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(862);
				drop_filter_statement();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(863);
				drop_parser_statement();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(864);
				drop_model_statement();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(865);
				drop_library_statement();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(866);
				drop_load_balance_group_statement();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(867);
				drop_network_address_statement();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(868);
				drop_network_interface_statement();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(869);
				drop_notifier_statement();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(870);
				drop_procedure_statement();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(871);
				drop_profile_statement();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(872);
				drop_projection_statement();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(873);
				drop_resource_pool_statement();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(874);
				drop_role_statement();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(875);
				drop_routing_rule_statement();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(876);
				drop_schema_statement();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(877);
				drop_sequence_statement();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(878);
				drop_subnet_statement();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(879);
				drop_table_statement();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(880);
				drop_text_index_statement();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(881);
				drop_transform_function_statement();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(882);
				drop_user_statement();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(883);
				drop_view_statement();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(884);
				end_statement();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(885);
				explain_statement();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(886);
				export_to_parquet_statement();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(887);
				export_to_vertica_statement();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(888);
				grant_statements_statement();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(889);
				insert_statement();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(890);
				merge_statement();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(891);
				profile_statement();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(892);
				release_savepoint_statement();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(893);
				revoke_statements_statement();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(894);
				rollback_statement();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(895);
				rollback_to_savepoint_statement();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(896);
				savepoint_statement();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(897);
				with_statement();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(898);
				select_statement();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(899);
				set_datestyle_statement();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(900);
				set_escape_string_warning_statement();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(901);
				set_intervalstyle_statement();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(902);
				set_locale_statement();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(903);
				set_role_statement();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(904);
				set_search_path_statement();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(905);
				set_session_autocommit_statement();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(906);
				set_session_characteristics_as_transaction_statement();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(907);
				set_session_graceperiod_statement();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(908);
				set_session_idlesessiontimeout_statement();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(909);
				set_session_memorycap_statement();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(910);
				set_session_multipleactiveresultsets_statement();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(911);
				set_session_resource_pool_statement();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(912);
				set_session_runtimecap_statement();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(913);
				set_session_tempspacecap_statement();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(914);
				set_standard_conforming_strings_statement();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(915);
				set_time_zone_statement();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(916);
				show_statement();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(917);
				show_current_statement();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(918);
				show_database_statement();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(919);
				show_node_statement();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(920);
				show_session_statement();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(921);
				start_transaction_statement();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(922);
				truncate_table_statement();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(923);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Alter_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_access_policy_statementContext alter_access_policy_statement() throws RecognitionException {
		Alter_access_policy_statementContext _localctx = new Alter_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(926);
			match(K_ALTER);
			setState(927);
			match(K_ACCESS);
			setState(928);
			match(K_POLICY);
			setState(929);
			match(K_ON);
			setState(930);
			tableReference();
			setState(942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				{
				setState(931);
				match(K_FOR);
				setState(932);
				match(K_COLUMN);
				setState(933);
				columnReference();
				setState(935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(934);
					predicates();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(937);
				match(K_FOR);
				setState(938);
				match(K_ROWS);
				setState(940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(939);
					where_clause();
					}
				}

				}
				}
				break;
			}
			setState(949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(944);
				enableOrDisable();
				}
				break;
			case K_COPY:
				{
				{
				setState(945);
				match(K_COPY);
				setState(946);
				match(K_TO);
				setState(947);
				match(K_TABLE);
				setState(948);
				tableReference();
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Alter_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authentication_statementContext alter_authentication_statement() throws RecognitionException {
		Alter_authentication_statementContext _localctx = new Alter_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alter_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(951);
			match(K_ALTER);
			setState(952);
			match(K_AUTHENTICATION);
			setState(953);
			auth_method_name();
			setState(973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DISABLE:
			case K_ENABLE:
				{
				setState(954);
				enableOrDisable();
				}
				break;
			case K_HOST:
			case K_LOCAL:
				{
				setState(964);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_LOCAL:
					{
					setState(955);
					match(K_LOCAL);
					}
					break;
				case K_HOST:
					{
					{
					setState(956);
					match(K_HOST);
					setState(961);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO || _la==K_TLS) {
						{
						setState(958);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==K_NO) {
							{
							setState(957);
							match(K_NO);
							}
						}

						setState(960);
						match(K_TLS);
						}
					}

					setState(963);
					address();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
				{
				setState(966);
				rename_clause();
				}
				break;
			case K_METHOD:
				{
				{
				setState(967);
				match(K_METHOD);
				setState(968);
				method();
				}
				}
				break;
			case K_SET:
				{
				{
				setState(969);
				match(K_SET);
				setState(970);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_PRIORITY:
				{
				{
				setState(971);
				match(K_PRIORITY);
				setState(972);
				integerNumber();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_drop_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_STANDBY() { return getToken(VSqlParser.K_STANDBY, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_database_drop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_drop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_database_drop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_database_drop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_database_drop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_drop_statementContext alter_database_drop_statement() throws RecognitionException {
		Alter_database_drop_statementContext _localctx = new Alter_database_drop_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_database_drop_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(975);
			match(K_ALTER);
			setState(976);
			match(K_DATABASE);
			setState(977);
			dbname();
			setState(997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DROP:
				{
				{
				setState(978);
				match(K_DROP);
				setState(979);
				match(K_ALL);
				setState(980);
				match(K_FAULT);
				setState(981);
				match(K_GROUP);
				}
				}
				break;
			case K_EXPORT:
				{
				{
				setState(982);
				match(K_EXPORT);
				setState(983);
				match(K_ON);
				setState(984);
				subnet();
				}
				}
				break;
			case K_RESET:
				{
				{
				setState(985);
				match(K_RESET);
				setState(986);
				match(K_STANDBY);
				}
				}
				break;
			case K_SET:
				{
				{
				setState(987);
				match(K_SET);
				setState(989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(988);
					match(K_PARAMETER);
					}
					break;
				}
				setState(991);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case K_CLEAR:
				{
				{
				setState(992);
				match(K_CLEAR);
				setState(994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(993);
					match(K_PARAMETER);
					}
					break;
				}
				setState(996);
				params();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public List<TerminalNode> K_FAULT() { return getTokens(VSqlParser.K_FAULT); }
		public TerminalNode K_FAULT(int i) {
			return getToken(VSqlParser.K_FAULT, i);
		}
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Alter_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fault_group_statementContext alter_fault_group_statement() throws RecognitionException {
		Alter_fault_group_statementContext _localctx = new Alter_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alter_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(999);
			match(K_ALTER);
			setState(1000);
			match(K_FAULT);
			setState(1001);
			match(K_GROUP);
			setState(1002);
			faultGroup();
			setState(1018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				{
				setState(1003);
				match(K_ADD);
				setState(1004);
				match(K_NODE);
				setState(1005);
				node();
				}
				}
				break;
			case 2:
				{
				{
				setState(1006);
				match(K_DROP);
				setState(1007);
				match(K_NODE);
				setState(1008);
				node();
				}
				}
				break;
			case 3:
				{
				{
				setState(1009);
				match(K_ADD);
				setState(1010);
				match(K_FAULT);
				setState(1011);
				match(K_GROUP);
				setState(1012);
				value();
				}
				}
				break;
			case 4:
				{
				{
				setState(1013);
				match(K_DROP);
				setState(1014);
				match(K_FAULT);
				setState(1015);
				match(K_GROUP);
				setState(1016);
				value();
				}
				}
				break;
			case 5:
				{
				setState(1017);
				rename_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1020);
			match(K_ALTER);
			setState(1021);
			match(K_FUNCTION);
			setState(1022);
			functionReference();
			setState(1024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1023);
				argument_list();
				}
			}

			setState(1032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1026);
				owner_clause();
				}
				break;
			case 2:
				{
				setState(1027);
				rename_clause();
				}
				break;
			case 3:
				{
				setState(1028);
				set_schema_clause();
				}
				break;
			case 4:
				{
				{
				setState(1029);
				match(K_SET);
				setState(1030);
				match(K_FENCED);
				setState(1031);
				bool_expression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Alter_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_hcatalog_schema_statementContext alter_hcatalog_schema_statement() throws RecognitionException {
		Alter_hcatalog_schema_statementContext _localctx = new Alter_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1034);
			match(K_ALTER);
			setState(1035);
			match(K_HCATALOG);
			setState(1036);
			match(K_SCHEMA);
			setState(1037);
			schema();
			setState(1038);
			match(K_SET);
			setState(1040); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1039);
				hcatalog_schema_param();
				}
				}
				setState(1042); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_library_statementContext extends ParserRuleContext {
		public ValueContext depends;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Alter_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_library_statementContext alter_library_statement() throws RecognitionException {
		Alter_library_statementContext _localctx = new Alter_library_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1044);
			match(K_ALTER);
			setState(1045);
			match(K_LIBRARY);
			setState(1046);
			libraryReference();
			setState(1053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1047);
				match(K_DEPENDS);
				setState(1048);
				((Alter_library_statementContext)_localctx).depends = value();
				setState(1051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
				case 1:
					{
					setState(1049);
					match(K_LANGUAGE);
					setState(1050);
					lang();
					}
					break;
				}
				}
				break;
			}
			setState(1055);
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_model_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public ModelReferenceContext modelReference() {
			return getRuleContext(ModelReferenceContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Alter_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_model_statementContext alter_model_statement() throws RecognitionException {
		Alter_model_statementContext _localctx = new Alter_model_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_model_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057);
			match(K_ALTER);
			setState(1058);
			match(K_MODEL);
			setState(1059);
			modelReference();
			setState(1063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_OWNER:
				{
				setState(1060);
				owner_clause();
				}
				break;
			case K_RENAME:
				{
				setState(1061);
				rename_clause();
				}
				break;
			case K_SET:
				{
				setState(1062);
				set_schema_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_network_interface_statementContext alter_network_interface_statement() throws RecognitionException {
		Alter_network_interface_statementContext _localctx = new Alter_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1065);
			match(K_ALTER);
			setState(1066);
			match(K_NETWORK);
			setState(1067);
			match(K_INTERFACE);
			setState(1068);
			network_interface();
			setState(1069);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_node_statementContext extends ParserRuleContext {
		public NodeContext exportOn;
		public ValueContext nodeType;
		public ValueContext standByNode;
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public Alter_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_node_statementContext alter_node_statement() throws RecognitionException {
		Alter_node_statementContext _localctx = new Alter_node_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alter_node_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1071);
			match(K_ALTER);
			setState(1072);
			match(K_NODE);
			setState(1073);
			node();
			setState(1097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				{
				setState(1074);
				match(K_EXPORT);
				setState(1075);
				match(K_ON);
				setState(1076);
				((Alter_node_statementContext)_localctx).exportOn = node();
				}
				}
				break;
			case 2:
				{
				{
				setState(1078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_IS) {
					{
					setState(1077);
					match(K_IS);
					}
				}

				setState(1080);
				((Alter_node_statementContext)_localctx).nodeType = value();
				}
				}
				break;
			case 3:
				{
				{
				setState(1081);
				match(K_REPLACE);
				setState(1084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(1082);
					match(K_WITH);
					setState(1083);
					((Alter_node_statementContext)_localctx).standByNode = value();
					}
				}

				}
				}
				break;
			case 4:
				{
				setState(1086);
				match(K_RESET);
				}
				break;
			case 5:
				{
				{
				setState(1087);
				match(K_SET);
				setState(1089);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1088);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1091);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 6:
				{
				{
				setState(1092);
				match(K_CLEAR);
				setState(1094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(1093);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1096);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_notfifier_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Alter_notfifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_notfifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_notfifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_notfifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_notfifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_notfifier_statementContext alter_notfifier_statement() throws RecognitionException {
		Alter_notfifier_statementContext _localctx = new Alter_notfifier_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_notfifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1099);
			match(K_ALTER);
			setState(1100);
			match(K_NOTIFIER);
			setState(1101);
			notifier();
			setState(1105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (K_MAXMEMORYSIZE - 374)) | (1L << (K_MAXPAYLOAD - 374)) | (1L << (K_NO - 374)) | (1L << (K_PARAMETERS - 374)))) != 0)) {
				{
				{
				setState(1102);
				notifier_params();
				}
				}
				setState(1107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Notifier_paramsContext extends ParserRuleContext {
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public EnableOrDisableContext enableOrDisable() {
			return getRuleContext(EnableOrDisableContext.class,0);
		}
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXPAYLOAD() { return getToken(VSqlParser.K_MAXPAYLOAD, 0); }
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public Notifier_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notifier_paramsContext notifier_params() throws RecognitionException {
		Notifier_paramsContext _localctx = new Notifier_paramsContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_notifier_params);
		int _la;
		try {
			setState(1124);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CHECK:
			case K_NO:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO) {
					{
					setState(1108);
					match(K_NO);
					}
				}

				setState(1111);
				match(K_CHECK);
				setState(1112);
				match(K_COMMITTED);
				}
				}
				break;
			case K_DISABLE:
			case K_ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1113);
				enableOrDisable();
				{
				setState(1114);
				match(K_IDENTIFIED);
				setState(1115);
				match(K_BY);
				setState(1116);
				value();
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1118);
				match(K_MAXMEMORYSIZE);
				setState(1119);
				value();
				}
				}
				break;
			case K_MAXPAYLOAD:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1120);
				match(K_MAXPAYLOAD);
				setState(1121);
				value();
				}
				}
				break;
			case K_PARAMETERS:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1122);
				match(K_PARAMETERS);
				setState(1123);
				value();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_projection_statementContext alter_projection_statement() throws RecognitionException {
		Alter_projection_statementContext _localctx = new Alter_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1126);
			match(K_ALTER);
			setState(1127);
			match(K_PROJECTION);
			setState(1128);
			projectionReference();
			setState(1129);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Alter_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_statementContext alter_profile_statement() throws RecognitionException {
		Alter_profile_statementContext _localctx = new Alter_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1131);
			match(K_ALTER);
			setState(1132);
			match(K_PROFILE);
			setState(1133);
			profile();
			setState(1134);
			match(K_LIMIT);
			setState(1136); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1135);
				password_parameter();
				}
				}
				setState(1138); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_profile_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_profile_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_profile_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_profile_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_profile_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_profile_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_profile_rename_statementContext alter_profile_rename_statement() throws RecognitionException {
		Alter_profile_rename_statementContext _localctx = new Alter_profile_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_profile_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1140);
			match(K_ALTER);
			setState(1141);
			match(K_PROFILE);
			setState(1142);
			profile();
			setState(1143);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Alter_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_pool_statementContext alter_resource_pool_statement() throws RecognitionException {
		Alter_resource_pool_statementContext _localctx = new Alter_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_alter_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1145);
			match(K_ALTER);
			setState(1146);
			match(K_RESOURCE);
			setState(1147);
			match(K_POOL);
			setState(1148);
			resourcePool();
			setState(1150); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1149);
				resource_pool_param();
				}
				}
				setState(1152); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (K_CASCADE - 193)) | (1L << (K_CPUAFFINITYMODE - 193)) | (1L << (K_CPUAFFINITYSET - 193)))) != 0) || _la==K_EXECUTIONPARALLELISM || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (K_MAXCONCURRENCY - 371)) | (1L << (K_MAXMEMORYSIZE - 371)) | (1L << (K_MAXQUERYMEMORYSIZE - 371)) | (1L << (K_MEMORYSIZE - 371)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)))) != 0) || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Resource_pool_paramContext extends ParserRuleContext {
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_CPUAFFINITYMODE() { return getToken(VSqlParser.K_CPUAFFINITYMODE, 0); }
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_EXCLUSIVE() { return getToken(VSqlParser.K_EXCLUSIVE, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_CPUAFFINITYSET() { return getToken(VSqlParser.K_CPUAFFINITYSET, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode K_EXECUTIONPARALLELISM() { return getToken(VSqlParser.K_EXECUTIONPARALLELISM, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_MAXCONCURRENCY() { return getToken(VSqlParser.K_MAXCONCURRENCY, 0); }
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXQUERYMEMORYSIZE() { return getToken(VSqlParser.K_MAXQUERYMEMORYSIZE, 0); }
		public TerminalNode K_MEMORYSIZE() { return getToken(VSqlParser.K_MEMORYSIZE, 0); }
		public TerminalNode K_PLANNEDCONCURRENCY() { return getToken(VSqlParser.K_PLANNEDCONCURRENCY, 0); }
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_HOLD() { return getToken(VSqlParser.K_HOLD, 0); }
		public TerminalNode K_QUEUETIMEOUT() { return getToken(VSqlParser.K_QUEUETIMEOUT, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_RUNTIMEPRIORITY() { return getToken(VSqlParser.K_RUNTIMEPRIORITY, 0); }
		public TerminalNode K_HIGH() { return getToken(VSqlParser.K_HIGH, 0); }
		public TerminalNode K_MEDIUM() { return getToken(VSqlParser.K_MEDIUM, 0); }
		public TerminalNode K_LOW() { return getToken(VSqlParser.K_LOW, 0); }
		public TerminalNode K_RUNTIMEPRIORITYTHRESHOLD() { return getToken(VSqlParser.K_RUNTIMEPRIORITYTHRESHOLD, 0); }
		public TerminalNode K_SINGLEINITIATOR() { return getToken(VSqlParser.K_SINGLEINITIATOR, 0); }
		public Resource_pool_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource_pool_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResource_pool_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResource_pool_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResource_pool_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resource_pool_paramContext resource_pool_param() throws RecognitionException {
		Resource_pool_paramContext _localctx = new Resource_pool_paramContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_resource_pool_param);
		int _la;
		try {
			setState(1219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1154);
				match(K_CASCADE);
				setState(1155);
				match(K_TO);
				setState(1156);
				value();
				}
				}
				break;
			case K_CPUAFFINITYMODE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1157);
				match(K_CPUAFFINITYMODE);
				setState(1158);
				_la = _input.LA(1);
				if ( !(_la==K_ANY || _la==K_EXCLUSIVE || _la==K_SHARED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_CPUAFFINITYSET:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1159);
				match(K_CPUAFFINITYSET);
				setState(1170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1160);
					match(K_NONE);
					}
					break;
				case 2:
					{
					{
					setState(1161);
					value();
					setState(1162);
					match(COMMA);
					setState(1163);
					value();
					}
					}
					break;
				case 3:
					{
					{
					setState(1165);
					value();
					setState(1166);
					match(MINUS);
					setState(1167);
					value();
					}
					}
					break;
				case 4:
					{
					setState(1169);
					number();
					}
					break;
				}
				}
				}
				break;
			case K_EXECUTIONPARALLELISM:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1172);
				match(K_EXECUTIONPARALLELISM);
				setState(1175);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1173);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1174);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXCONCURRENCY:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1177);
				match(K_MAXCONCURRENCY);
				setState(1180);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1178);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1179);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXMEMORYSIZE:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1182);
				match(K_MAXMEMORYSIZE);
				setState(1185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1183);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1184);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MAXQUERYMEMORYSIZE:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1187);
				match(K_MAXQUERYMEMORYSIZE);
				setState(1190);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1188);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1189);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_MEMORYSIZE:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1192);
				match(K_MEMORYSIZE);
				setState(1193);
				number();
				}
				}
				break;
			case K_PLANNEDCONCURRENCY:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1194);
				match(K_PLANNEDCONCURRENCY);
				setState(1197);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1195);
					number();
					}
					break;
				case K_AUTO:
					{
					setState(1196);
					match(K_AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_PRIORITY:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1199);
				match(K_PRIORITY);
				setState(1202);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(1200);
					integerNumber();
					}
					break;
				case K_HOLD:
					{
					setState(1201);
					match(K_HOLD);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_QUEUETIMEOUT:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1204);
				match(K_QUEUETIMEOUT);
				setState(1207);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(1205);
					number();
					}
					break;
				case K_NONE:
					{
					setState(1206);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_RUNTIMECAP:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1209);
				match(K_RUNTIMECAP);
				setState(1212);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case FLOAT:
				case REAL:
				case DECIMAL:
				case ANY:
					{
					setState(1210);
					value();
					}
					break;
				case K_NONE:
					{
					setState(1211);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITY:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1214);
				match(K_RUNTIMEPRIORITY);
				setState(1215);
				_la = _input.LA(1);
				if ( !(((((_la - 319)) & ~0x3f) == 0 && ((1L << (_la - 319)) & ((1L << (K_HIGH - 319)) | (1L << (K_LOW - 319)) | (1L << (K_MEDIUM - 319)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_RUNTIMEPRIORITYTHRESHOLD:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1216);
				match(K_RUNTIMEPRIORITYTHRESHOLD);
				setState(1217);
				number();
				}
				}
				break;
			case K_SINGLEINITIATOR:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1218);
				match(K_SINGLEINITIATOR);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_role_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_role_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_role_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_role_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_role_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_role_rename_statementContext alter_role_rename_statement() throws RecognitionException {
		Alter_role_rename_statementContext _localctx = new Alter_role_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_role_rename_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1221);
			match(K_ALTER);
			setState(1222);
			match(K_ROLE);
			setState(1223);
			role();
			setState(1224);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			match(K_ALTER);
			setState(1227);
			match(K_SCHEMA);
			setState(1249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				{
				setState(1228);
				schemaReference();
				setState(1237);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1229);
					match(K_DEFAULT);
					setState(1230);
					schema_privileges_clause();
					}
					}
					break;
				case K_OWNER:
					{
					{
					setState(1231);
					match(K_OWNER);
					setState(1232);
					match(K_TO);
					setState(1233);
					owner();
					setState(1235);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_CASCADE) {
						{
						setState(1234);
						match(K_CASCADE);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(1239);
				schemaReference();
				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1240);
					match(COMMA);
					setState(1241);
					schemaReference();
					}
					}
					setState(1246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1247);
				rename_clause();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Sequence_paramsContext sequence_params() {
			return getRuleContext(Sequence_paramsContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Set_schema_clauseContext set_schema_clause() {
			return getRuleContext(Set_schema_clauseContext.class,0);
		}
		public Owner_clauseContext owner_clause() {
			return getRuleContext(Owner_clauseContext.class,0);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alter_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(K_ALTER);
			setState(1252);
			match(K_SEQUENCE);
			setState(1253);
			sequenceReference();
			{
			setState(1260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case K_CACHE:
			case K_INCREMENT:
			case K_MAXVALUE:
			case K_MINVALUE:
			case K_NO:
			case K_RESTART:
			case CLOSE_PAREN:
			case SEMI:
				{
				setState(1254);
				sequence_params();
				}
				break;
			case K_OWNER:
			case K_RENAME:
			case K_SET:
				{
				setState(1258);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_RENAME:
					{
					setState(1255);
					rename_clause();
					}
					break;
				case K_SET:
					{
					setState(1256);
					set_schema_clause();
					}
					break;
				case K_OWNER:
					{
					setState(1257);
					owner_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_paramsContext extends ParserRuleContext {
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Sequence_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_paramsContext sequence_params() throws RecognitionException {
		Sequence_paramsContext _localctx = new Sequence_paramsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_sequence_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(1262);
				match(K_INCREMENT);
				setState(1263);
				match(K_BY);
				setState(1264);
				match(DECIMAL);
				}
			}

			setState(1271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				{
				setState(1267);
				match(K_MINVALUE);
				setState(1268);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1269);
				match(K_NO);
				setState(1270);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				{
				setState(1273);
				match(K_MAXVALUE);
				setState(1274);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(1275);
				match(K_NO);
				setState(1276);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(1282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(1279);
				match(K_RESTART);
				setState(1280);
				match(K_WITH);
				setState(1281);
				match(DECIMAL);
				}
			}

			setState(1294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(1284);
				match(K_CACHE);
				setState(1285);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1286);
				match(K_NO);
				setState(1287);
				match(K_CACHE);
				}
				setState(1292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(1289);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(1290);
					match(K_NO);
					setState(1291);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_session_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETER() { return getToken(VSqlParser.K_UDPARAMETER, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public Alter_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_session_statementContext alter_session_statement() throws RecognitionException {
		Alter_session_statementContext _localctx = new Alter_session_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_session_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1296);
			match(K_ALTER);
			setState(1297);
			match(K_SESSION);
			setState(1322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				{
				setState(1298);
				match(K_SET);
				setState(1300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1299);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1302);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 2:
				{
				{
				setState(1303);
				match(K_CLEAR);
				setState(1305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(1304);
					match(K_PARAMETER);
					}
					break;
				}
				setState(1307);
				params();
				}
				}
				break;
			case 3:
				{
				{
				setState(1308);
				match(K_SET);
				setState(1309);
				match(K_UDPARAMETER);
				setState(1312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FOR) {
					{
					setState(1310);
					match(K_FOR);
					setState(1311);
					library();
					}
				}

				setState(1314);
				commaSeparatedKeyValuePairs();
				}
				}
				break;
			case 4:
				{
				{
				setState(1315);
				match(K_CLEAR);
				setState(1316);
				match(K_UDPARAMETER);
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FOR) {
					{
					setState(1317);
					match(K_FOR);
					setState(1318);
					library();
					}
				}

				setState(1321);
				params();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public Alter_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_subnet_statementContext alter_subnet_statement() throws RecognitionException {
		Alter_subnet_statementContext _localctx = new Alter_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(K_ALTER);
			setState(1325);
			match(K_SUBNET);
			setState(1326);
			subnet();
			setState(1327);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_rename_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public Rename_clauseContext rename_clause() {
			return getRuleContext(Rename_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_table_rename_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_rename_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_rename_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_rename_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_rename_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_rename_statementContext alter_table_rename_statement() throws RecognitionException {
		Alter_table_rename_statementContext _localctx = new Alter_table_rename_statementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_table_rename_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1329);
			match(K_ALTER);
			setState(1330);
			match(K_TABLE);
			setState(1331);
			tableReference();
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1332);
				match(COMMA);
				setState(1333);
				tableReference();
				}
				}
				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1339);
			rename_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_general_statmentContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<Alter_table_itemContext> alter_table_item() {
			return getRuleContexts(Alter_table_itemContext.class);
		}
		public Alter_table_itemContext alter_table_item(int i) {
			return getRuleContext(Alter_table_itemContext.class,i);
		}
		public Alter_table_general_statmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_general_statment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_general_statment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_general_statment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_general_statment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_general_statmentContext alter_table_general_statment() throws RecognitionException {
		Alter_table_general_statmentContext _localctx = new Alter_table_general_statmentContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_table_general_statment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1341);
			match(K_ALTER);
			setState(1342);
			match(K_TABLE);
			setState(1343);
			tableReference();
			setState(1344);
			alter_table_item();
			setState(1348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_ALL || _la==K_ADD || _la==K_ALTER || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (K_DROP - 259)) | (1L << (K_EXCLUDE - 259)) | (1L << (K_FORCE - 259)))) != 0) || _la==K_INCLUDE || _la==K_MATERIALIZE || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (K_OWNER - 423)) | (1L << (K_PARTITION - 423)) | (1L << (K_REMOVE - 423)) | (1L << (K_RENAME - 423)) | (1L << (K_REORGANIZE - 423)))) != 0) || _la==K_SET) {
				{
				{
				setState(1345);
				alter_table_item();
				}
				}
				setState(1350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_itemContext extends ParserRuleContext {
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_TYPE() { return getToken(VSqlParser.K_TYPE, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_FORCE() { return getToken(VSqlParser.K_FORCE, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_REORGANIZE() { return getToken(VSqlParser.K_REORGANIZE, 0); }
		public TerminalNode K_REMOVE() { return getToken(VSqlParser.K_REMOVE, 0); }
		public TerminalNode K_PARTITIONING() { return getToken(VSqlParser.K_PARTITIONING, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Alter_table_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_table_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_table_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_table_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_itemContext alter_table_item() throws RecognitionException {
		Alter_table_itemContext _localctx = new Alter_table_itemContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alter_table_item);
		int _la;
		try {
			setState(1474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1351);
				match(K_ADD);
				setState(1352);
				match(K_COLUMN);
				setState(1354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1353);
					ifNotExistsClause();
					}
					break;
				}
				setState(1356);
				columnReference();
				setState(1357);
				dataTypes();
				{
				{
				setState(1362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CONSTRAINT) {
					{
					setState(1358);
					match(K_CONSTRAINT);
					setState(1360);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						setState(1359);
						id();
						}
						break;
					}
					}
				}

				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NOT || _la==K_NULL) {
					{
					setState(1364);
					nullOrNotNull();
					}
				}

				setState(1369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT) {
					{
					setState(1367);
					match(K_DEFAULT);
					setState(1368);
					expression();
					}
				}

				}
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCODING) {
					{
					setState(1371);
					encoding_clause();
					}
				}

				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PROJECTIONS) {
					{
					setState(1374);
					match(K_PROJECTIONS);
					setState(1375);
					match(OPEN_PAREN);
					setState(1376);
					projectionReference();
					setState(1381);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1377);
						match(COMMA);
						setState(1378);
						projectionReference();
						}
						}
						setState(1383);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1384);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1388);
				match(K_ADD);
				setState(1389);
				table_constraint();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1390);
				match(K_ALTER);
				setState(1391);
				match(K_COLUMN);
				setState(1392);
				columnReference();
				setState(1418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					{
					setState(1393);
					match(K_SET);
					setState(1394);
					match(K_DEFAULT);
					setState(1395);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(1396);
					match(K_DROP);
					setState(1397);
					match(K_DEFAULT);
					}
					}
					break;
				case 3:
					{
					{
					setState(1398);
					match(K_SET);
					setState(1399);
					match(K_USING);
					setState(1400);
					expression();
					}
					}
					break;
				case 4:
					{
					{
					setState(1401);
					match(K_DROP);
					setState(1402);
					match(K_SET);
					setState(1403);
					match(K_USING);
					}
					}
					break;
				case 5:
					{
					{
					setState(1404);
					match(K_SET);
					setState(1405);
					match(K_DEFAULT);
					setState(1406);
					match(K_USING);
					setState(1407);
					expression();
					}
					}
					break;
				case 6:
					{
					{
					setState(1408);
					match(K_DROP);
					setState(1409);
					match(K_DEFAULT);
					setState(1410);
					match(K_USING);
					setState(1411);
					expression();
					}
					}
					break;
				case 7:
					{
					{
					setState(1412);
					match(K_SET);
					setState(1413);
					nullOrNotNull();
					}
					}
					break;
				case 8:
					{
					{
					setState(1414);
					match(K_SET);
					setState(1415);
					match(K_DATA);
					setState(1416);
					match(K_TYPE);
					setState(1417);
					dataTypes();
					}
					}
					break;
				}
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(1420);
				match(K_ALTER);
				setState(1421);
				match(K_CONSTRAINT);
				setState(1422);
				constraint();
				setState(1423);
				enabledOrDisabled();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1425);
				match(K_DROP);
				setState(1426);
				match(K_CONSTRAINT);
				setState(1427);
				constraint();
				setState(1429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1428);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1431);
				match(K_DROP);
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_COLUMN) {
					{
					setState(1432);
					match(K_COLUMN);
					}
				}

				setState(1437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(1435);
					match(K_IF);
					setState(1436);
					match(K_EXISTS);
					}
					break;
				}
				setState(1439);
				columnReference();
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_CASCADE || _la==K_RESTRICT) {
					{
					setState(1440);
					_la = _input.LA(1);
					if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1443);
				match(K_FORCE);
				setState(1444);
				match(K_OUTER);
				setState(1445);
				number();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1446);
				schema_privileges_clause();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1447);
				match(K_OWNER);
				setState(1448);
				match(K_TO);
				setState(1449);
				owner();
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1450);
				partition_clause();
				setState(1452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(1451);
					match(K_REORGANIZE);
					}
					break;
				}
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1454);
				match(K_REMOVE);
				setState(1455);
				match(K_PARTITIONING);
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1456);
				match(K_RENAME);
				setState(1458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_COLUMN) {
					{
					setState(1457);
					match(K_COLUMN);
					}
				}

				setState(1460);
				column();
				setState(1461);
				match(K_TO);
				setState(1462);
				column();
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1464);
				match(K_REORGANIZE);
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1465);
				match(K_SET);
				setState(1466);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(1467);
				expression();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1468);
				match(K_SET);
				setState(1469);
				match(K_SCHEMA);
				setState(1470);
				schema();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				{
				setState(1471);
				match(K_SET);
				setState(1472);
				match(K_STORAGE);
				setState(1473);
				load_method();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Alter_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_statementContext alter_user_statement() throws RecognitionException {
		Alter_user_statementContext _localctx = new Alter_user_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1476);
			match(K_ALTER);
			setState(1477);
			match(K_USER);
			setState(1478);
			user();
			setState(1480); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1479);
				user_params();
				}
				}
				setState(1482); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_DEFAULT || _la==K_ACCOUNT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (K_GRACEPERIOD - 306)) | (1L << (K_IDENTIFIED - 306)) | (1L << (K_IDLESESSIONTIMEOUT - 306)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (K_MAXCONNECTIONS - 373)) | (1L << (K_MEMORYCAP - 373)) | (1L << (K_PASSWORD - 373)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_RESOURCE - 462)) | (1L << (K_RUNTIMECAP - 462)) | (1L << (K_SEARCH_PATH - 462)) | (1L << (K_SECURITY_ALGORITHM - 462)))) != 0) || _la==K_TEMPSPACECAP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_paramsContext extends ParserRuleContext {
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ACCOUNT() { return getToken(VSqlParser.K_ACCOUNT, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public TerminalNode K_MAXCONNECTIONS() { return getToken(VSqlParser.K_MAXCONNECTIONS, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public TerminalNode K_EXPIRE() { return getToken(VSqlParser.K_EXPIRE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_SECURITY_ALGORITHM() { return getToken(VSqlParser.K_SECURITY_ALGORITHM, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public TerminalNode K_LOCK() { return getToken(VSqlParser.K_LOCK, 0); }
		public TerminalNode K_UNLOCK() { return getToken(VSqlParser.K_UNLOCK, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public User_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_paramsContext user_params() throws RecognitionException {
		User_paramsContext _localctx = new User_paramsContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_user_params);
		int _la;
		try {
			setState(1581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1511);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(1484);
					match(K_DEFAULT);
					setState(1485);
					match(K_ROLE);
					setState(1506);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
					case 1:
						{
						setState(1486);
						match(K_NONE);
						}
						break;
					case 2:
						{
						setState(1487);
						role();
						setState(1492);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1488);
							match(COMMA);
							setState(1489);
							role();
							}
							}
							setState(1494);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case 3:
						{
						setState(1495);
						match(K_ALL);
						}
						break;
					case 4:
						{
						{
						setState(1496);
						match(K_ALL);
						setState(1497);
						match(K_EXCEPT);
						setState(1498);
						role();
						setState(1503);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1499);
							match(COMMA);
							setState(1500);
							role();
							}
							}
							setState(1505);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_RENAME:
					{
					{
					setState(1508);
					match(K_RENAME);
					setState(1509);
					match(K_TO);
					setState(1510);
					value();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_ACCOUNT:
			case K_GRACEPERIOD:
			case K_IDENTIFIED:
			case K_IDLESESSIONTIMEOUT:
			case K_MAXCONNECTIONS:
			case K_MEMORYCAP:
			case K_PASSWORD:
			case K_PROFILE:
			case K_RESOURCE:
			case K_RUNTIMECAP:
			case K_SEARCH_PATH:
			case K_SECURITY_ALGORITHM:
			case K_TEMPSPACECAP:
				enterOuterAlt(_localctx, 2);
				{
				setState(1579);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ACCOUNT:
					{
					{
					setState(1513);
					match(K_ACCOUNT);
					setState(1514);
					_la = _input.LA(1);
					if ( !(_la==K_LOCK || _la==K_UNLOCK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				case K_GRACEPERIOD:
					{
					{
					setState(1515);
					match(K_GRACEPERIOD);
					setState(1518);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1516);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1517);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_IDENTIFIED:
					{
					{
					setState(1520);
					match(K_IDENTIFIED);
					setState(1521);
					match(K_BY);
					setState(1522);
					string();
					setState(1525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_REPLACE) {
						{
						setState(1523);
						match(K_REPLACE);
						setState(1524);
						string();
						}
					}

					}
					}
					break;
				case K_IDLESESSIONTIMEOUT:
					{
					{
					setState(1527);
					match(K_IDLESESSIONTIMEOUT);
					setState(1530);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1528);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1529);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_MAXCONNECTIONS:
					{
					{
					setState(1532);
					match(K_MAXCONNECTIONS);
					setState(1538);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1533);
						match(K_NONE);
						}
						break;
					case FLOAT:
					case REAL:
					case DECIMAL:
						{
						{
						setState(1534);
						number();
						setState(1535);
						match(K_ON);
						setState(1536);
						_la = _input.LA(1);
						if ( !(_la==K_DATABASE || _la==K_NODE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_MEMORYCAP:
					{
					{
					setState(1540);
					match(K_MEMORYCAP);
					setState(1543);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1541);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1542);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_PASSWORD:
					{
					{
					setState(1545);
					match(K_PASSWORD);
					setState(1546);
					match(K_EXPIRE);
					}
					}
					break;
				case K_PROFILE:
					{
					{
					setState(1547);
					match(K_PROFILE);
					setState(1550);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_DEFAULT:
						{
						setState(1548);
						match(K_DEFAULT);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1549);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_RESOURCE:
					{
					{
					setState(1552);
					match(K_RESOURCE);
					setState(1553);
					match(K_POOL);
					setState(1554);
					resourcePool();
					}
					}
					break;
				case K_RUNTIMECAP:
					{
					{
					setState(1555);
					match(K_RUNTIMECAP);
					setState(1558);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1556);
						match(K_NONE);
						}
						break;
					case DOUBLE_QUOTE_STRING:
					case SINGLE_QUOTE_STRING:
						{
						setState(1557);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				case K_SEARCH_PATH:
					{
					{
					setState(1560);
					match(K_SEARCH_PATH);
					setState(1570);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
					case 1:
						{
						setState(1561);
						match(K_DEFAULT);
						}
						break;
					case 2:
						{
						{
						setState(1562);
						schema();
						setState(1567);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1563);
							match(COMMA);
							setState(1564);
							schema();
							}
							}
							setState(1569);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						break;
					}
					}
					}
					break;
				case K_SECURITY_ALGORITHM:
					{
					{
					setState(1572);
					match(K_SECURITY_ALGORITHM);
					setState(1573);
					string();
					}
					}
					break;
				case K_TEMPSPACECAP:
					{
					{
					setState(1574);
					match(K_TEMPSPACECAP);
					setState(1577);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case K_NONE:
						{
						setState(1575);
						match(K_NONE);
						}
						break;
					case K_ABORT:
					case K_ABSOLUTE:
					case K_ACCESS:
					case K_ACCESSRANK:
					case K_ACCOUNT:
					case K_ACTION:
					case K_ACTIVATE:
					case K_ACTIVEPARTITIONCOUNT:
					case K_ADD:
					case K_ADMIN:
					case K_AFTER:
					case K_AGGREGATE:
					case K_ALSO:
					case K_ALTER:
					case K_ANALYSE:
					case K_ANALYTIC:
					case K_ANALYZE:
					case K_ANNOTATED:
					case K_ANTI:
					case K_ASSERTION:
					case K_ASSIGNMENT:
					case K_AT:
					case K_AUTHENTICATION:
					case K_AUTO:
					case K_AUTO_INCREMENT:
					case K_AVAILABLE:
					case K_BACKWARD:
					case K_BASENAME:
					case K_BATCH:
					case K_BEFORE:
					case K_BEGIN:
					case K_BEST:
					case K_BLOCK:
					case K_BLOCK_DICT:
					case K_BLOCKDICT_COMP:
					case K_BROADCAST:
					case K_BY:
					case K_BYTEA:
					case K_BYTES:
					case K_BZIP:
					case K_BZIP_COMP:
					case K_CACHE:
					case K_CALLED:
					case K_CASCADE:
					case K_CATALOGPATH:
					case K_CHAIN:
					case K_CHARACTER:
					case K_CHARACTERISTICS:
					case K_CHARACTERS:
					case K_CHECKPOINT:
					case K_CLASS:
					case K_CLEAR:
					case K_CLOSE:
					case K_CLUSTER:
					case K_COLSIZES:
					case K_COLUMNS_COUNT:
					case K_COMMENT:
					case K_COMMIT:
					case K_COMMITTED:
					case K_COMMONDELTA_COMP:
					case K_COMMUNAL:
					case K_COMPLEX:
					case K_CONNECT:
					case K_CONSTRAINTS:
					case K_CONTROL:
					case K_COPY:
					case K_CPUAFFINITYMODE:
					case K_CPUAFFINITYSET:
					case K_CREATEDB:
					case K_CREATEUSER:
					case K_CSV:
					case K_CUBE:
					case K_CURRENT:
					case K_CURSOR:
					case K_CUSTOM:
					case K_CUSTOM_PARTITIONS:
					case K_CYCLE:
					case K_DATA:
					case K_DATABASE:
					case K_DATAPATH:
					case K_DAY:
					case K_DEACTIVATE:
					case K_DEALLOCATE:
					case K_DEC:
					case K_DECLARE:
					case K_DEFAULTS:
					case K_DEFERRED:
					case K_DEFINE:
					case K_DEFINER:
					case K_DELETE:
					case K_DELIMITER:
					case K_DELIMITERS:
					case K_DELTARANGE_COMP:
					case K_DELTARANGE_COMP_SP:
					case K_DELTAVAL:
					case K_DEPENDS:
					case K_DETERMINES:
					case K_DIRECT:
					case K_DIRECTCOLS:
					case K_DIRECTED:
					case K_DIRECTGROUPED:
					case K_DIRECTPROJ:
					case K_DISABLE:
					case K_DISABLED:
					case K_DISCONNECT:
					case K_DISTVALINDEX:
					case K_DO:
					case K_DOMAIN:
					case K_DOUBLE:
					case K_DROP:
					case K_DURABLE:
					case K_EACH:
					case K_ENABLE:
					case K_ENABLED:
					case K_ENCLOSED:
					case K_ENCODING:
					case K_ENCRYPTED:
					case K_ENFORCELENGTH:
					case K_EPHEMERAL:
					case K_EPOCH:
					case K_ERROR:
					case K_ESCAPE:
					case K_EVENT:
					case K_EVENTS:
					case K_EXCEPTION:
					case K_EXCEPTIONS:
					case K_EXCLUDE:
					case K_EXCLUDING:
					case K_EXCLUSIVE:
					case K_EXECUTE:
					case K_EXECUTIONPARALLELISM:
					case K_EXPIRE:
					case K_EXPLAIN:
					case K_EXPORT:
					case K_EXTERNAL:
					case K_FAILED_LOGIN_ATTEMPTS:
					case K_FAULT:
					case K_FENCED:
					case K_FETCH:
					case K_FILESYSTEM:
					case K_FILLER:
					case K_FILTER:
					case K_FIRST:
					case K_FIXEDWIDTH:
					case K_FLEX:
					case K_FLEXIBLE:
					case K_FOLLOWING:
					case K_FORCE:
					case K_FORMAT:
					case K_FORWARD:
					case K_FREEZE:
					case K_FUNCTION:
					case K_FUNCTIONS:
					case K_GCDDELTA:
					case K_GET:
					case K_GLOBAL:
					case K_GRACEPERIOD:
					case K_GROUPED:
					case K_GROUPING:
					case K_GZIP:
					case K_GZIP_COMP:
					case K_HANDLER:
					case K_HCATALOG:
					case K_HCATALOG_CONNECTION_TIMEOUT:
					case K_HCATALOG_DB:
					case K_HCATALOG_SCHEMA:
					case K_HCATALOG_SLOW_TRANSFER_LIMIT:
					case K_HCATALOG_SLOW_TRANSFER_TIME:
					case K_HCATALOG_USER:
					case K_HIGH:
					case K_HIVE_PARTITION_COLS:
					case K_HIVESERVER2_HOSTNAME:
					case K_HOLD:
					case K_HOST:
					case K_HOSTNAME:
					case K_HOUR:
					case K_HOURS:
					case K_IDENTIFIED:
					case K_IDENTITY:
					case K_IDLESESSIONTIMEOUT:
					case K_IF:
					case K_IGNORE:
					case K_IMMEDIATE:
					case K_IMMUTABLE:
					case K_IMPLICIT:
					case K_INCLUDE:
					case K_INCLUDING:
					case K_INCREMENT:
					case K_INDEX:
					case K_INHERITS:
					case K_INPUT:
					case K_INSENSITIVE:
					case K_INSERT:
					case K_INSTEAD:
					case K_INTERFACE:
					case K_INTERPOLATE:
					case K_INVOKER:
					case K_ISOLATION:
					case K_JSON:
					case K_KEY:
					case K_LABEL:
					case K_LANCOMPILER:
					case K_LANGUAGE:
					case K_LARGE:
					case K_LAST:
					case K_LATEST:
					case K_LESS:
					case K_LEVEL:
					case K_LIBRARY:
					case K_LISTEN:
					case K_LOAD:
					case K_LOCAL:
					case K_LOCATION:
					case K_LOCK:
					case K_LONG:
					case K_LOW:
					case K_LZO:
					case K_MANAGED:
					case K_MASK:
					case K_MATCHED:
					case K_MATERIALIZE:
					case K_MAXCONCURRENCY:
					case K_MAXCONCURRENCYGRACE:
					case K_MAXCONNECTIONS:
					case K_MAXMEMORYSIZE:
					case K_MAXPAYLOAD:
					case K_MAXQUERYMEMORYSIZE:
					case K_MAXVALUE:
					case K_MEDIUM:
					case K_MEMORYCAP:
					case K_MEMORYSIZE:
					case K_MERGE:
					case K_MERGEOUT:
					case K_METHOD:
					case K_MICROSECONDS:
					case K_MILLISECONDS:
					case K_MINUTE:
					case K_MINUTES:
					case K_MINVALUE:
					case K_MODE:
					case K_MODEL:
					case K_MONTH:
					case K_MOVE:
					case K_MOVEOUT:
					case K_NAME:
					case K_NATIONAL:
					case K_NATIVE:
					case K_NETWORK:
					case K_NEXT:
					case K_NO:
					case K_NOCREATEDB:
					case K_NOCREATEUSER:
					case K_NODE:
					case K_NODES:
					case K_NOTHING:
					case K_NOTIFIER:
					case K_NOTIFY:
					case K_NOWAIT:
					case K_NULLAWARE:
					case K_NULLCOLS:
					case K_NULLS:
					case K_OBJECT:
					case K_OCTETS:
					case K_OF:
					case K_OFF:
					case K_OIDS:
					case K_OPERATOR:
					case K_OPT:
					case K_OPTIMIZER:
					case K_OPTION:
					case K_OPTVER:
					case K_ORC:
					case K_OTHERS:
					case K_OWNER:
					case K_PARAMETER:
					case K_PARAMETERS:
					case K_PARQUET:
					case K_PARSER:
					case K_PARTIAL:
					case K_PARTITION:
					case K_PARTITIONING:
					case K_PASSWORD:
					case K_PASSWORD_GRACE_TIME:
					case K_PASSWORD_LIFE_TIME:
					case K_PASSWORD_LOCK_TIME:
					case K_PASSWORD_MAX_LENGTH:
					case K_PASSWORD_MIN_DIGITS:
					case K_PASSWORD_MIN_LENGTH:
					case K_PASSWORD_MIN_LETTERS:
					case K_PASSWORD_MIN_LOWERCASE_LETTERS:
					case K_PASSWORD_MIN_SYMBOLS:
					case K_PASSWORD_MIN_UPPERCASE_LETTERS:
					case K_PASSWORD_REUSE_MAX:
					case K_PASSWORD_REUSE_TIME:
					case K_PATTERN:
					case K_PERCENT:
					case K_PERMANENT:
					case K_PLACING:
					case K_PLANNEDCONCURRENCY:
					case K_POLICY:
					case K_POOL:
					case K_PORT:
					case K_PRECEDING:
					case K_PREPARE:
					case K_PREPASS:
					case K_PRESERVE:
					case K_PREVIOUS:
					case K_PRIOR:
					case K_PRIORITY:
					case K_PRIVILEGES:
					case K_PROCEDURAL:
					case K_PROCEDURE:
					case K_PROFILE:
					case K_PROJECTION:
					case K_PROJECTIONS:
					case K_PSDATE:
					case K_QUERY:
					case K_QUEUETIMEOUT:
					case K_QUOTE:
					case K_RANGE:
					case K_RAW:
					case K_READ:
					case K_RECHECK:
					case K_RECORD:
					case K_RECOVER:
					case K_RECURSIVE:
					case K_REFRESH:
					case K_REINDEX:
					case K_REJECTED:
					case K_REJECTMAX:
					case K_RELATIVE:
					case K_RELEASE:
					case K_REMOVE:
					case K_RENAME:
					case K_REORGANIZE:
					case K_REPEATABLE:
					case K_REPLACE:
					case K_RESET:
					case K_RESOURCE:
					case K_RESTART:
					case K_RESTRICT:
					case K_RESULTS:
					case K_RETURN:
					case K_RETURNREJECTED:
					case K_REVOKE:
					case K_RLE:
					case K_ROLE:
					case K_ROLES:
					case K_ROLLBACK:
					case K_ROLLUP:
					case K_ROWS:
					case K_RULE:
					case K_RUNTIMECAP:
					case K_RUNTIMEPRIORITY:
					case K_RUNTIMEPRIORITYTHRESHOLD:
					case K_SAVE:
					case K_SAVEPOINT:
					case K_SCROLL:
					case K_SEARCH_PATH:
					case K_SECOND:
					case K_SECONDS:
					case K_SECURITY:
					case K_SECURITY_ALGORITHM:
					case K_SEGMENTED:
					case K_SEMI:
					case K_SEMIALL:
					case K_SEQUENCE:
					case K_SEQUENCES:
					case K_SERIALIZABLE:
					case K_SESSION:
					case K_SET:
					case K_SETOF:
					case K_SETS:
					case K_SHARE:
					case K_SHARED:
					case K_SHOW:
					case K_SIMPLE:
					case K_SINGLEINITIATOR:
					case K_SITE:
					case K_SITES:
					case K_SKIP:
					case K_SOURCE:
					case K_SPLIT:
					case K_SSL_CONFIG:
					case K_STABLE:
					case K_STANDBY:
					case K_START:
					case K_STATEMENT:
					case K_STATISTICS:
					case K_STDIN:
					case K_STDOUT:
					case K_STEMMER:
					case K_STORAGE:
					case K_STREAM:
					case K_STRENGTH:
					case K_STRICT:
					case K_SUBNET:
					case K_SYSID:
					case K_SYSTEM:
					case K_TABLES:
					case K_TABLESAMPLE:
					case K_TABLESPACE:
					case K_TEMP:
					case K_TEMPLATE:
					case K_TEMPORARY:
					case K_TEMPSPACECAP:
					case K_TERMINATOR:
					case K_THAN:
					case K_TIES:
					case K_TLS:
					case K_TOAST:
					case K_TOKENIZER:
					case K_TOLERANCE:
					case K_TRANSACTION:
					case K_TRANSFORM:
					case K_TRICKLE:
					case K_TRIGGER:
					case K_TRUNCATE:
					case K_TRUSTED:
					case K_TUNING:
					case K_TYPE:
					case K_UDPARAMETER:
					case K_UNCOMMITTED:
					case K_UNCOMPRESSED:
					case K_UNI:
					case K_UNINDEXED:
					case K_UNKNOWN:
					case K_UNLIMITED:
					case K_UNLISTEN:
					case K_UNLOCK:
					case K_UNPACKER:
					case K_UNSEGMENTED:
					case K_UPDATE:
					case K_USAGE:
					case K_VACUUM:
					case K_VALIDATE:
					case K_VALIDATOR:
					case K_VALINDEX:
					case K_VALUE:
					case K_VALUES:
					case K_VARYING:
					case K_VERBOSE:
					case K_VERTICA:
					case K_VIEW:
					case K_VOLATILE:
					case K_WAIT:
					case K_WEBHDFS_ADDRESS:
					case K_WEBSERVICE_HOSTNAME:
					case K_WEBSERVICE_PORT:
					case K_WITHOUT:
					case K_WORK:
					case K_WRITE:
					case K_YEAR:
					case K_ZONE:
					case DOUBLE_QUOTE_STRING:
					case PARAM:
					case WORD:
					case SINGLE_QUOTE_STRING:
					case FLOAT:
					case REAL:
					case DECIMAL:
					case ANY:
						{
						setState(1576);
						value();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_view_statementContext extends ParserRuleContext {
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Alter_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlter_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlter_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlter_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_view_statementContext alter_view_statement() throws RecognitionException {
		Alter_view_statementContext _localctx = new Alter_view_statementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_view_statement);
		int _la;
		try {
			setState(1605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1583);
				match(K_ALTER);
				setState(1584);
				match(K_VIEW);
				setState(1585);
				viewReference();
				setState(1593);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_OWNER:
					{
					{
					setState(1586);
					match(K_OWNER);
					setState(1587);
					match(K_TO);
					setState(1588);
					owner();
					}
					}
					break;
				case K_SET:
					{
					{
					setState(1589);
					match(K_SET);
					setState(1590);
					match(K_SCHEMA);
					setState(1591);
					schema();
					}
					}
					break;
				case K_ALL:
				case K_EXCLUDE:
				case K_INCLUDE:
				case K_MATERIALIZE:
					{
					setState(1592);
					schema_privileges_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case K_RENAME:
			case COMMA:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1595);
					match(COMMA);
					setState(1596);
					viewReference();
					}
					}
					setState(1601);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1602);
				match(K_RENAME);
				setState(1603);
				match(K_TO);
				setState(1604);
				values();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Todo_statementContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Todo_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_todo_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTodo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTodo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTodo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Todo_statementContext todo_statement() throws RecognitionException {
		Todo_statementContext _localctx = new Todo_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_todo_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1608); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1607);
				id();
				}
				}
				setState(1610); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Begin_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBegin_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBegin_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBegin_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_transaction_statementContext begin_transaction_statement() throws RecognitionException {
		Begin_transaction_statementContext _localctx = new Begin_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_begin_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			match(K_BEGIN);
			setState(1613);
			_la = _input.LA(1);
			if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1614);
			match(K_ISOLATION);
			setState(1615);
			match(K_LEVEL);
			setState(1616);
			isolationLevel();
			setState(1617);
			transactionMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public Comment_on_column_statementContext comment_on_column_statement() {
			return getRuleContext(Comment_on_column_statementContext.class,0);
		}
		public Comment_on_constraint_statementContext comment_on_constraint_statement() {
			return getRuleContext(Comment_on_constraint_statementContext.class,0);
		}
		public Comment_on_function_statementContext comment_on_function_statement() {
			return getRuleContext(Comment_on_function_statementContext.class,0);
		}
		public Comment_on_transform_function_statementContext comment_on_transform_function_statement() {
			return getRuleContext(Comment_on_transform_function_statementContext.class,0);
		}
		public Comment_on_library_statementContext comment_on_library_statement() {
			return getRuleContext(Comment_on_library_statementContext.class,0);
		}
		public Comment_on_node_statementContext comment_on_node_statement() {
			return getRuleContext(Comment_on_node_statementContext.class,0);
		}
		public Comment_on_schema_statementContext comment_on_schema_statement() {
			return getRuleContext(Comment_on_schema_statementContext.class,0);
		}
		public Comment_on_sequence_statementContext comment_on_sequence_statement() {
			return getRuleContext(Comment_on_sequence_statementContext.class,0);
		}
		public Comment_on_table_statementContext comment_on_table_statement() {
			return getRuleContext(Comment_on_table_statementContext.class,0);
		}
		public Comment_on_view_statementContext comment_on_view_statement() {
			return getRuleContext(Comment_on_view_statementContext.class,0);
		}
		public Comment_on_projection_statementContext comment_on_projection_statement() {
			return getRuleContext(Comment_on_projection_statementContext.class,0);
		}
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_comment_on_statement);
		try {
			setState(1630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1619);
				comment_on_column_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1620);
				comment_on_constraint_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1621);
				comment_on_function_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1622);
				comment_on_transform_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1623);
				comment_on_library_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1624);
				comment_on_node_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1625);
				comment_on_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1626);
				comment_on_sequence_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1627);
				comment_on_table_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1628);
				comment_on_view_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1629);
				comment_on_projection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_column_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_column_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_column_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_column_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_column_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_column_statementContext comment_on_column_statement() throws RecognitionException {
		Comment_on_column_statementContext _localctx = new Comment_on_column_statementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_comment_on_column_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(K_COMMENT);
			setState(1633);
			match(K_ON);
			setState(1634);
			match(K_COLUMN);
			setState(1635);
			projectionReference();
			setState(1636);
			match(DOT);
			setState(1637);
			column();
			setState(1638);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_constraint_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_constraint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_constraint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_constraint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_constraint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_constraint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_constraint_statementContext comment_on_constraint_statement() throws RecognitionException {
		Comment_on_constraint_statementContext _localctx = new Comment_on_constraint_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_comment_on_constraint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			match(K_COMMENT);
			setState(1641);
			match(K_ON);
			setState(1642);
			match(K_CONSTRAINT);
			setState(1643);
			constraint();
			setState(1644);
			match(K_ON);
			setState(1645);
			tableReference();
			setState(1646);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_function_statementContext comment_on_function_statement() throws RecognitionException {
		Comment_on_function_statementContext _localctx = new Comment_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_comment_on_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1648);
			match(K_COMMENT);
			setState(1649);
			match(K_ON);
			setState(1650);
			match(K_FUNCTION);
			setState(1651);
			functionReference();
			setState(1652);
			argument_list();
			setState(1653);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_transform_function_statementContext comment_on_transform_function_statement() throws RecognitionException {
		Comment_on_transform_function_statementContext _localctx = new Comment_on_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_comment_on_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1655);
			match(K_COMMENT);
			setState(1656);
			match(K_ON);
			setState(1657);
			match(K_TRANSFORM);
			setState(1658);
			match(K_FUNCTION);
			setState(1659);
			functionReference();
			setState(1660);
			argument_list();
			setState(1661);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_library_statementContext comment_on_library_statement() throws RecognitionException {
		Comment_on_library_statementContext _localctx = new Comment_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_comment_on_library_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1663);
			match(K_COMMENT);
			setState(1664);
			match(K_ON);
			setState(1665);
			match(K_FUNCTION);
			setState(1666);
			libraryReference();
			setState(1667);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_node_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_node_statementContext comment_on_node_statement() throws RecognitionException {
		Comment_on_node_statementContext _localctx = new Comment_on_node_statementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_comment_on_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			match(K_COMMENT);
			setState(1670);
			match(K_ON);
			setState(1671);
			match(K_NODE);
			setState(1672);
			node();
			setState(1673);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_schema_statementContext comment_on_schema_statement() throws RecognitionException {
		Comment_on_schema_statementContext _localctx = new Comment_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_comment_on_schema_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1675);
			match(K_COMMENT);
			setState(1676);
			match(K_ON);
			setState(1677);
			match(K_SCHEMA);
			setState(1678);
			schemaReference();
			setState(1679);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_sequence_statementContext comment_on_sequence_statement() throws RecognitionException {
		Comment_on_sequence_statementContext _localctx = new Comment_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_comment_on_sequence_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1681);
			match(K_COMMENT);
			setState(1682);
			match(K_ON);
			setState(1683);
			match(K_SEQUENCE);
			setState(1684);
			sequenceReference();
			setState(1685);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_table_statementContext comment_on_table_statement() throws RecognitionException {
		Comment_on_table_statementContext _localctx = new Comment_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_comment_on_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			match(K_COMMENT);
			setState(1688);
			match(K_ON);
			setState(1689);
			match(K_TABLE);
			setState(1690);
			tableReference();
			setState(1691);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_view_statementContext comment_on_view_statement() throws RecognitionException {
		Comment_on_view_statementContext _localctx = new Comment_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_comment_on_view_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1693);
			match(K_COMMENT);
			setState(1694);
			match(K_ON);
			setState(1695);
			match(K_VIEW);
			setState(1696);
			viewReference();
			setState(1697);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public Comment_valueContext comment_value() {
			return getRuleContext(Comment_valueContext.class,0);
		}
		public Comment_on_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_on_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_on_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_on_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_projection_statementContext comment_on_projection_statement() throws RecognitionException {
		Comment_on_projection_statementContext _localctx = new Comment_on_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_comment_on_projection_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			match(K_COMMENT);
			setState(1700);
			match(K_ON);
			setState(1701);
			match(K_PROJECTION);
			setState(1702);
			projectionReference();
			setState(1703);
			comment_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_valueContext extends ParserRuleContext {
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public Comment_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComment_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComment_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComment_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_valueContext comment_value() throws RecognitionException {
		Comment_valueContext _localctx = new Comment_valueContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_comment_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(K_IS);
			setState(1708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(1706);
				value();
				}
				break;
			case K_NULL:
				{
				setState(1707);
				match(K_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1710);
			match(K_COMMIT);
			setState(1712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(1711);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Connect_statementContext extends ParserRuleContext {
		public TerminalNode K_CONNECT() { return getToken(VSqlParser.K_CONNECT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public PortContext port() {
			return getRuleContext(PortContext.class,0);
		}
		public TerminalNode K_TLSMODE() { return getToken(VSqlParser.K_TLSMODE, 0); }
		public TerminalNode K_PREFER() { return getToken(VSqlParser.K_PREFER, 0); }
		public Connect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Connect_statementContext connect_statement() throws RecognitionException {
		Connect_statementContext _localctx = new Connect_statementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_connect_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			match(K_CONNECT);
			setState(1715);
			match(K_TO);
			setState(1716);
			match(K_VERTICA);
			setState(1717);
			dbname();
			setState(1718);
			match(K_USER);
			setState(1719);
			user();
			setState(1720);
			match(K_PASSWORD);
			setState(1721);
			value();
			setState(1722);
			match(K_ON);
			setState(1723);
			host();
			setState(1724);
			match(COMMA);
			setState(1725);
			port();
			setState(1728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TLSMODE) {
				{
				setState(1726);
				match(K_TLSMODE);
				setState(1727);
				match(K_PREFER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_columnContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Copy_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_columnContext copy_column() throws RecognitionException {
		Copy_columnContext _localctx = new Copy_columnContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_copy_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1730);
			column();
			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(1731);
				match(K_AS);
				setState(1732);
				expression();
				}
			}

			}
			setState(1740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1735);
				match(K_DELIMITER);
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1736);
					match(K_AS);
					}
				}

				setState(1739);
				value();
				}
			}

			setState(1747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1742);
				match(K_ENCLOSED);
				setState(1744);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1743);
					match(K_BY);
					}
					break;
				}
				setState(1746);
				value();
				}
			}

			setState(1750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1749);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1759);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1752);
				match(K_ESCAPE);
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1753);
					match(K_AS);
					}
				}

				setState(1756);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1757);
				match(K_NO);
				setState(1758);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1761);
				match(K_FILLER);
				setState(1762);
				dataTypes();
				}
			}

			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1765);
				match(K_FORMAT);
				setState(1766);
				value();
				}
			}

			setState(1774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1769);
				match(K_NULL);
				setState(1771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1770);
					match(K_AS);
					}
				}

				setState(1773);
				value();
				}
			}

			setState(1778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1776);
				match(K_TRIM);
				setState(1777);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_optionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_optionContext column_option() throws RecognitionException {
		Column_optionContext _localctx = new Column_optionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_column_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			column();
			setState(1786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DELIMITER) {
				{
				setState(1781);
				match(K_DELIMITER);
				setState(1783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1782);
					match(K_AS);
					}
				}

				setState(1785);
				value();
				}
			}

			setState(1793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(1788);
				match(K_ENCLOSED);
				setState(1790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1789);
					match(K_BY);
					}
					break;
				}
				setState(1792);
				value();
				}
			}

			setState(1796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(1795);
				match(K_ENFORCELENGTH);
				}
			}

			setState(1805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(1798);
				match(K_ESCAPE);
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1799);
					match(K_AS);
					}
				}

				setState(1802);
				value();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(1803);
				match(K_NO);
				setState(1804);
				match(K_ESCAPE);
				}
				}
				break;
			case K_NULL:
			case K_TRIM:
			case K_FILLER:
			case K_FORMAT:
			case COMMA:
			case CLOSE_PAREN:
				break;
			default:
				break;
			}
			setState(1809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FILLER) {
				{
				setState(1807);
				match(K_FILLER);
				setState(1808);
				dataTypes();
				}
			}

			setState(1813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FORMAT) {
				{
				setState(1811);
				match(K_FORMAT);
				setState(1812);
				value();
				}
			}

			setState(1820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(1815);
				match(K_NULL);
				setState(1817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1816);
					match(K_AS);
					}
				}

				setState(1819);
				value();
				}
			}

			setState(1824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(1822);
				match(K_TRIM);
				setState(1823);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PathContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public PathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPath(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPath(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PathContext path() throws RecognitionException {
		PathContext _localctx = new PathContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_path);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1826);
			id();
			setState(1831);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1827);
					match(COMMA);
					setState(1828);
					id();
					}
					} 
				}
				setState(1833);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1834);
				match(K_ON);
				setState(1849);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					setState(1835);
					node();
					}
					break;
				case OPEN_PAREN:
					{
					{
					setState(1836);
					match(OPEN_PAREN);
					setState(1837);
					node();
					setState(1842);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1838);
						match(COMMA);
						setState(1839);
						node();
						}
						}
						setState(1844);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1845);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_ANY:
					{
					{
					setState(1847);
					match(K_ANY);
					setState(1848);
					match(K_NODE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1853);
				inputFormat();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_pathContext extends ParserRuleContext {
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public Local_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLocal_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLocal_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLocal_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Local_pathContext local_path() throws RecognitionException {
		Local_pathContext _localctx = new Local_pathContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_path);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1856);
			match(K_LOCAL);
			setState(1859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1857);
				match(K_STDIN);
				}
				break;
			case 2:
				{
				setState(1858);
				id();
				}
				break;
			}
			setState(1862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(1861);
				inputFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InputFormatContext extends ParserRuleContext {
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_ZSTD() { return getToken(VSqlParser.K_ZSTD, 0); }
		public InputFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inputFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInputFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInputFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInputFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InputFormatContext inputFormat() throws RecognitionException {
		InputFormatContext _localctx = new InputFormatContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_inputFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vertica_sourceContext extends ParserRuleContext {
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Vertica_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vertica_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterVertica_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitVertica_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitVertica_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vertica_sourceContext vertica_source() throws RecognitionException {
		Vertica_sourceContext _localctx = new Vertica_sourceContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_vertica_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1866);
			match(K_VERTICA);
			setState(1867);
			tableReference();
			setState(1868);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udl_clauseContext extends ParserRuleContext {
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceReferenceContext sourceReference() {
			return getRuleContext(SourceReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public Udl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Udl_clauseContext udl_clause() throws RecognitionException {
		Udl_clauseContext _localctx = new Udl_clauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_udl_clause);
		int _la;
		try {
			setState(1894);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1870);
				match(K_SOURCE);
				setState(1871);
				sourceReference();
				setState(1872);
				match(OPEN_PAREN);
				setState(1874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(1873);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1876);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_FILTER:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1878);
				match(K_FILTER);
				setState(1879);
				filterReference();
				setState(1880);
				match(OPEN_PAREN);
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(1881);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1884);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_PARSER:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1886);
				match(K_PARSER);
				setState(1887);
				parserReference();
				setState(1888);
				match(OPEN_PAREN);
				setState(1890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(1889);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(1892);
				match(CLOSE_PAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statement_optionContext extends ParserRuleContext {
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_SKIP() { return getToken(VSqlParser.K_SKIP, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public Copy_statement_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_statement_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_statement_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_statement_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_statement_optionContext copy_statement_option() throws RecognitionException {
		Copy_statement_optionContext _localctx = new Copy_statement_optionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_copy_statement_option);
		int _la;
		try {
			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1896);
				match(K_DELIMITER);
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1897);
					match(K_AS);
					}
				}

				setState(1900);
				string();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1901);
				match(K_TRAILING);
				setState(1902);
				match(K_NULLCOLS);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1903);
				match(K_NULL);
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(1904);
					match(K_AS);
					}
				}

				setState(1907);
				string();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1915);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ESCAPE:
					{
					{
					setState(1908);
					match(K_ESCAPE);
					setState(1910);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(1909);
						match(K_AS);
						}
					}

					setState(1912);
					string();
					}
					}
					break;
				case K_NO:
					{
					{
					setState(1913);
					match(K_NO);
					setState(1914);
					match(K_ESCAPE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(1917);
				match(K_ENCLOSED);
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BY) {
					{
					setState(1918);
					match(K_BY);
					}
				}

				setState(1921);
				string();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(1922);
				match(K_RECORD);
				setState(1923);
				match(K_TERMINATOR);
				setState(1924);
				string();
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(1925);
				match(K_SKIP);
				setState(1926);
				number();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(1927);
				match(K_SKIP);
				setState(1928);
				match(K_BYTES);
				setState(1929);
				number();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(1930);
				match(K_TRIM);
				setState(1931);
				value();
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(1932);
				match(K_REJECTMAX);
				setState(1933);
				number();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(1934);
				match(K_REJECTED);
				setState(1935);
				match(K_DATA);
				setState(1947);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DOUBLE_QUOTE_STRING:
				case SINGLE_QUOTE_STRING:
					{
					{
					setState(1936);
					string();
					setState(1941);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_ON) {
						{
						{
						setState(1937);
						match(K_ON);
						setState(1938);
						node();
						}
						}
						setState(1943);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case K_AS:
					{
					{
					setState(1944);
					match(K_AS);
					setState(1945);
					match(K_TABLE);
					setState(1946);
					id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(1949);
				match(K_EXCEPTIONS);
				setState(1950);
				string();
				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==K_ON) {
					{
					{
					setState(1951);
					match(K_ON);
					setState(1952);
					node();
					}
					}
					setState(1957);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(1958);
				match(K_ENFORCELENGTH);
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(1959);
				match(K_ERROR);
				setState(1960);
				match(K_TOLERANCE);
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				{
				setState(1961);
				match(K_ABORT);
				setState(1962);
				match(K_ON);
				setState(1963);
				match(K_ERROR);
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				{
				setState(1965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_STORAGE) {
					{
					setState(1964);
					match(K_STORAGE);
					}
				}

				setState(1967);
				load_method();
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				{
				setState(1968);
				match(K_STREAM);
				setState(1969);
				match(K_NAME);
				setState(1970);
				value();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				{
				setState(1971);
				match(K_NO);
				setState(1972);
				match(K_COMMIT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statementContext extends ParserRuleContext {
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<Copy_statement_optionContext> copy_statement_option() {
			return getRuleContexts(Copy_statement_optionContext.class);
		}
		public Copy_statement_optionContext copy_statement_option(int i) {
			return getRuleContext(Copy_statement_optionContext.class,i);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public Vertica_sourceContext vertica_source() {
			return getRuleContext(Vertica_sourceContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<Udl_clauseContext> udl_clause() {
			return getRuleContexts(Udl_clauseContext.class);
		}
		public Udl_clauseContext udl_clause(int i) {
			return getRuleContext(Udl_clauseContext.class,i);
		}
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public List<Local_pathContext> local_path() {
			return getRuleContexts(Local_pathContext.class);
		}
		public Local_pathContext local_path(int i) {
			return getRuleContext(Local_pathContext.class,i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			match(K_COPY);
			setState(1976);
			tableReference();
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(1977);
				match(OPEN_PAREN);
				setState(1978);
				copy_column();
				setState(1983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1979);
					match(COMMA);
					setState(1980);
					copy_column();
					}
					}
					setState(1985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1986);
				match(CLOSE_PAREN);
				}
			}

			setState(2003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(1990);
				match(K_COLUMN);
				setState(1991);
				match(K_OPTION);
				{
				setState(1992);
				match(OPEN_PAREN);
				setState(1993);
				column_option();
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1994);
					match(COMMA);
					setState(1995);
					column_option();
					}
					}
					setState(2000);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2001);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(2005);
				match(K_FROM);
				setState(2028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					{
					setState(2006);
					match(K_STDIN);
					setState(2008);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
					case 1:
						{
						setState(2007);
						value();
						}
						break;
					}
					}
					}
					break;
				case 2:
					{
					{
					setState(2010);
					path();
					setState(2015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2011);
						match(COMMA);
						setState(2012);
						path();
						}
						}
						setState(2017);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 3:
					{
					{
					setState(2018);
					local_path();
					setState(2023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2019);
						match(COMMA);
						setState(2020);
						local_path();
						}
						}
						setState(2025);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case 4:
					{
					setState(2026);
					vertica_source();
					}
					break;
				case 5:
					{
					setState(2027);
					tableReference();
					}
					break;
				}
				}
			}

			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE) {
				{
				setState(2033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2032);
					match(K_WITH);
					}
				}

				setState(2036); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2035);
					udl_clause();
					}
					}
					setState(2038); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_FILTER || _la==K_PARSER || _la==K_SOURCE );
				}
			}

			setState(2045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (K_NULL - 87)) | (1L << (K_TRAILING - 87)) | (1L << (K_TRIM - 87)) | (1L << (K_ABORT - 87)))) != 0) || _la==K_AUTO || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (K_DELIMITER - 240)) | (1L << (K_DIRECT - 240)) | (1L << (K_ENCLOSED - 240)) | (1L << (K_ENFORCELENGTH - 240)) | (1L << (K_ERROR - 240)) | (1L << (K_ESCAPE - 240)) | (1L << (K_EXCEPTIONS - 240)))) != 0) || _la==K_NO || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (K_RECORD - 473)) | (1L << (K_REJECTED - 473)) | (1L << (K_REJECTMAX - 473)) | (1L << (K_SKIP - 473)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (K_STORAGE - 542)) | (1L << (K_STREAM - 542)) | (1L << (K_TRICKLE - 542)))) != 0)) {
				{
				{
				setState(2042);
				copy_statement_option();
				}
				}
				setState(2047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_local_statementContext extends ParserRuleContext {
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Copy_local_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_local_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_local_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_local_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_local_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_local_statementContext copy_local_statement() throws RecognitionException {
		Copy_local_statementContext _localctx = new Copy_local_statementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_copy_local_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2048);
			copy_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_from_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public Copy_from_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_from_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCopy_from_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCopy_from_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCopy_from_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_from_vertica_statementContext copy_from_vertica_statement() throws RecognitionException {
		Copy_from_vertica_statementContext _localctx = new Copy_from_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_copy_from_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			match(K_COPY);
			setState(2051);
			tableReference();
			setState(2053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
				{
				setState(2052);
				columns();
				}
			}

			setState(2055);
			match(K_FROM);
			setState(2056);
			match(K_VERTICA);
			setState(2057);
			tableReference();
			setState(2059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2058);
				columns();
				}
				break;
			}
			setState(2062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(2061);
				load_method();
				}
			}

			setState(2067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STREAM) {
				{
				setState(2064);
				match(K_STREAM);
				setState(2065);
				match(K_NAME);
				setState(2066);
				id();
				}
			}

			setState(2071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(2069);
				match(K_NO);
				setState(2070);
				match(K_COMMIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public Create_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_access_policy_statementContext create_access_policy_statement() throws RecognitionException {
		Create_access_policy_statementContext _localctx = new Create_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_create_access_policy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(K_CREATE);
			setState(2074);
			match(K_ACCESS);
			setState(2075);
			match(K_POLICY);
			setState(2076);
			match(K_ON);
			setState(2077);
			tableReference();
			setState(2087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				{
				setState(2078);
				match(K_FOR);
				setState(2079);
				match(K_COLUMN);
				setState(2080);
				column();
				setState(2081);
				expressions();
				}
				}
				break;
			case 2:
				{
				{
				setState(2083);
				match(K_FOR);
				setState(2084);
				match(K_ROWS);
				setState(2085);
				match(K_WHERE);
				setState(2086);
				expressions();
				}
				}
				break;
			}
			setState(2089);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public List<Auth_method_nameContext> auth_method_name() {
			return getRuleContexts(Auth_method_nameContext.class);
		}
		public Auth_method_nameContext auth_method_name(int i) {
			return getRuleContext(Auth_method_nameContext.class,i);
		}
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public Create_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_authentication_statementContext create_authentication_statement() throws RecognitionException {
		Create_authentication_statementContext _localctx = new Create_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_create_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2091);
			match(K_CREATE);
			setState(2092);
			match(K_AUTHENTICATION);
			setState(2093);
			auth_method_name();
			setState(2094);
			match(K_METHOD);
			setState(2095);
			auth_method_name();
			setState(2105);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LOCAL:
				{
				setState(2096);
				match(K_LOCAL);
				}
				break;
			case K_HOST:
				{
				{
				setState(2097);
				match(K_HOST);
				setState(2102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NO || _la==K_TLS) {
					{
					setState(2099);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_NO) {
						{
						setState(2098);
						match(K_NO);
						}
					}

					setState(2101);
					match(K_TLS);
					}
				}

				setState(2104);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_IMMUTABLE() { return getToken(VSqlParser.K_IMMUTABLE, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_branch_statementContext create_branch_statement() throws RecognitionException {
		Create_branch_statementContext _localctx = new Create_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_create_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			match(K_CREATE);
			setState(2108);
			match(K_DATA);
			setState(2109);
			match(K_IMMUTABLE);
			setState(2110);
			match(K_BRANCH);
			{
			setState(2111);
			branch_identifier();
			}
			setState(2116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2112);
				match(COMMA);
				setState(2113);
				branch_identifier();
				}
				}
				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIKE) {
				{
				setState(2119);
				match(K_LIKE);
				setState(2120);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<PathContext> path() {
			return getRuleContexts(PathContext.class);
		}
		public PathContext path(int i) {
			return getRuleContext(PathContext.class,i);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public InputFormatContext inputFormat() {
			return getRuleContext(InputFormatContext.class,0);
		}
		public TerminalNode K_NATIVE() { return getToken(VSqlParser.K_NATIVE, 0); }
		public TerminalNode K_ORC() { return getToken(VSqlParser.K_ORC, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public List<TerminalNode> K_ERROR() { return getTokens(VSqlParser.K_ERROR); }
		public TerminalNode K_ERROR(int i) {
			return getToken(VSqlParser.K_ERROR, i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public TerminalNode K_FIXEDWIDTH() { return getToken(VSqlParser.K_FIXEDWIDTH, 0); }
		public TerminalNode K_COLSIZES() { return getToken(VSqlParser.K_COLSIZES, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public List<TerminalNode> K_WITH() { return getTokens(VSqlParser.K_WITH); }
		public TerminalNode K_WITH(int i) {
			return getToken(VSqlParser.K_WITH, i);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public Create_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_table_as_copy_statementContext create_external_table_as_copy_statement() throws RecognitionException {
		Create_external_table_as_copy_statementContext _localctx = new Create_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2123);
			match(K_CREATE);
			setState(2124);
			match(K_EXTERNAL);
			setState(2125);
			match(K_TABLE);
			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				{
				setState(2126);
				match(K_IF);
				setState(2127);
				match(K_NOT);
				setState(2128);
				match(K_EXISTS);
				}
				break;
			}
			setState(2131);
			tableReference();
			setState(2132);
			column_definition_list();
			setState(2134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2133);
				schema_privileges_clause();
				}
			}

			setState(2136);
			match(K_AS);
			setState(2137);
			match(K_COPY);
			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2138);
				match(OPEN_PAREN);
				setState(2139);
				copy_column();
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2140);
					match(COMMA);
					setState(2141);
					copy_column();
					}
					}
					setState(2146);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2147);
				match(CLOSE_PAREN);
				}
			}

			setState(2164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_COLUMN) {
				{
				setState(2151);
				match(K_COLUMN);
				setState(2152);
				match(K_OPTION);
				{
				setState(2153);
				match(OPEN_PAREN);
				setState(2154);
				column_option();
				setState(2159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2155);
					match(COMMA);
					setState(2156);
					column_option();
					}
					}
					setState(2161);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2162);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2166);
			match(K_FROM);
			setState(2180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2167);
				path();
				}
				break;
			case 2:
				{
				}
				break;
			case 3:
				{
				{
				setState(2170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2169);
					match(K_WITH);
					}
				}

				setState(2172);
				match(K_SOURCE);
				setState(2173);
				source();
				setState(2178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(2174);
					match(OPEN_PAREN);
					setState(2175);
					commaSeparatedKeyValuePairs();
					setState(2176);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			}
			setState(2183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED || _la==K_ZSTD) {
				{
				setState(2182);
				inputFormat();
				}
			}

			setState(2205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2185);
				match(K_NATIVE);
				}
				break;
			case 2:
				{
				{
				setState(2186);
				match(K_FIXEDWIDTH);
				setState(2187);
				match(K_COLSIZES);
				setState(2188);
				match(OPEN_PAREN);
				setState(2189);
				integerNumber();
				setState(2190);
				match(CLOSE_PAREN);
				setState(2198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2191);
					match(COMMA);
					setState(2192);
					match(OPEN_PAREN);
					setState(2193);
					integerNumber();
					setState(2194);
					match(CLOSE_PAREN);
					}
					}
					setState(2200);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 3:
				{
				{
				setState(2201);
				match(K_NATIVE);
				setState(2202);
				match(K_VARCHAR);
				}
				}
				break;
			case 4:
				{
				setState(2203);
				match(K_ORC);
				}
				break;
			case 5:
				{
				setState(2204);
				match(K_PARQUET);
				}
				break;
			}
			setState(2210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ABORT) {
				{
				setState(2207);
				match(K_ABORT);
				setState(2208);
				match(K_ON);
				setState(2209);
				match(K_ERROR);
				}
			}

			{
			setState(2212);
			match(K_DELIMITER);
			setState(2214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2213);
				match(K_AS);
				}
			}

			setState(2216);
			singleChar();
			}
			setState(2224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCLOSED) {
				{
				setState(2218);
				match(K_ENCLOSED);
				setState(2219);
				match(K_BY);
				setState(2220);
				singleChar();
				{
				setState(2221);
				match(K_AND);
				setState(2222);
				singleChar();
				}
				}
			}

			setState(2227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENFORCELENGTH) {
				{
				setState(2226);
				match(K_ENFORCELENGTH);
				}
			}

			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ERROR) {
				{
				setState(2229);
				match(K_ERROR);
				setState(2230);
				match(K_TOLERANCE);
				}
			}

			setState(2238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ESCAPE:
				{
				{
				setState(2233);
				match(K_ESCAPE);
				setState(2234);
				match(K_AS);
				setState(2235);
				singleChar();
				}
				}
				break;
			case K_NO:
				{
				{
				setState(2236);
				match(K_NO);
				setState(2237);
				match(K_ESCAPE);
				}
				}
				break;
			case EOF:
			case K_NULL:
			case K_TRAILING:
			case K_TRIM:
			case K_WITH:
			case K_EXCEPTIONS:
			case K_FILTER:
			case K_PARSER:
			case K_RECORD:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_SKIP:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCEPTIONS) {
				{
				setState(2240);
				match(K_EXCEPTIONS);
				setState(2241);
				path();
				setState(2244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2242);
					match(K_ON);
					setState(2243);
					node();
					}
				}

				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2246);
					match(COMMA);
					{
					setState(2247);
					match(K_ON);
					setState(2248);
					node();
					}
					}
					}
					setState(2253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2256);
					match(K_WITH);
					}
				}

				setState(2259);
				match(K_FILTER);
				setState(2260);
				filterReference();
				{
				setState(2261);
				match(OPEN_PAREN);
				setState(2263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(2262);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2265);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NULL) {
				{
				setState(2269);
				match(K_NULL);
				setState(2271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AS) {
					{
					setState(2270);
					match(K_AS);
					}
				}

				setState(2273);
				string();
				}
			}

			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH || _la==K_PARSER) {
				{
				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2276);
					match(K_WITH);
					}
				}

				setState(2279);
				match(K_PARSER);
				setState(2280);
				parserReference();
				{
				setState(2281);
				match(OPEN_PAREN);
				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(2282);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2285);
				match(CLOSE_PAREN);
				}
				}
			}

			setState(2292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RECORD) {
				{
				setState(2289);
				match(K_RECORD);
				setState(2290);
				match(K_TERMINATOR);
				setState(2291);
				string();
				}
			}

			setState(2309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTED) {
				{
				setState(2294);
				match(K_REJECTED);
				setState(2295);
				match(K_DATA);
				setState(2296);
				path();
				setState(2299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ON) {
					{
					setState(2297);
					match(K_ON);
					setState(2298);
					node();
					}
				}

				setState(2306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2301);
					match(COMMA);
					{
					setState(2302);
					match(K_ON);
					setState(2303);
					node();
					}
					}
					}
					setState(2308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_REJECTMAX) {
				{
				setState(2311);
				match(K_REJECTMAX);
				setState(2312);
				integerNumber();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2315);
				match(K_SKIP);
				setState(2316);
				integerNumber();
				}
				break;
			}
			setState(2322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SKIP) {
				{
				setState(2319);
				match(K_SKIP);
				setState(2320);
				match(K_BYTES);
				setState(2321);
				integerNumber();
				}
			}

			setState(2326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRAILING) {
				{
				setState(2324);
				match(K_TRAILING);
				setState(2325);
				match(K_NULLCOLS);
				}
			}

			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRIM) {
				{
				setState(2328);
				match(K_TRIM);
				setState(2329);
				singleChar();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fault_group_statementContext create_fault_group_statement() throws RecognitionException {
		Create_fault_group_statementContext _localctx = new Create_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_create_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2332);
			match(K_CREATE);
			setState(2333);
			match(K_FAULT);
			setState(2334);
			match(K_GROUP);
			setState(2335);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_flex_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Create_flex_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_table_statementContext create_flex_table_statement() throws RecognitionException {
		Create_flex_table_statementContext _localctx = new Create_flex_table_statementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_flex_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2337);
			match(K_CREATE);
			setState(2338);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2339);
			match(K_TABLE);
			setState(2343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2340);
				match(K_IF);
				setState(2341);
				match(K_NOT);
				setState(2342);
				match(K_EXISTS);
				}
				break;
			}
			setState(2345);
			tableReference();
			setState(2348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2346);
				column_definition_list();
				}
				break;
			case 2:
				{
				setState(2347);
				column_name_list();
				}
				break;
			}
			setState(2351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2350);
				schema_privileges_clause();
				}
			}

			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2353);
				orderby_clause();
				}
			}

			setState(2357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(2356);
				encodedBy_clause();
				}
			}

			setState(2360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2359);
				segmentation_clause();
				}
			}

			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2362);
				ksafe_clause();
				}
			}

			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(2365);
				partition_clause();
				}
			}

			setState(2370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(2368);
				match(K_AS);
				setState(2369);
				select_statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_flex_external_table_as_copy_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Copy_columnContext> copy_column() {
			return getRuleContexts(Copy_columnContext.class);
		}
		public Copy_columnContext copy_column(int i) {
			return getRuleContext(Copy_columnContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<CompressionTypeContext> compressionType() {
			return getRuleContexts(CompressionTypeContext.class);
		}
		public CompressionTypeContext compressionType(int i) {
			return getRuleContext(CompressionTypeContext.class,i);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public List<CommaSeparatedKeyValuePairsContext> commaSeparatedKeyValuePairs() {
			return getRuleContexts(CommaSeparatedKeyValuePairsContext.class);
		}
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs(int i) {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public List<SingleCharContext> singleChar() {
			return getRuleContexts(SingleCharContext.class);
		}
		public SingleCharContext singleChar(int i) {
			return getRuleContext(SingleCharContext.class,i);
		}
		public TerminalNode K_TRAILING() { return getToken(VSqlParser.K_TRAILING, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public List<TerminalNode> K_SKIP() { return getTokens(VSqlParser.K_SKIP); }
		public TerminalNode K_SKIP(int i) {
			return getToken(VSqlParser.K_SKIP, i);
		}
		public List<IntegerNumberContext> integerNumber() {
			return getRuleContexts(IntegerNumberContext.class);
		}
		public IntegerNumberContext integerNumber(int i) {
			return getRuleContext(IntegerNumberContext.class,i);
		}
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_TRIM() { return getToken(VSqlParser.K_TRIM, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public List<TerminalNode> K_EXCEPTIONS() { return getTokens(VSqlParser.K_EXCEPTIONS); }
		public TerminalNode K_EXCEPTIONS(int i) {
			return getToken(VSqlParser.K_EXCEPTIONS, i);
		}
		public List<TerminalNode> K_REJECTED() { return getTokens(VSqlParser.K_REJECTED); }
		public TerminalNode K_REJECTED(int i) {
			return getToken(VSqlParser.K_REJECTED, i);
		}
		public List<TerminalNode> K_DATA() { return getTokens(VSqlParser.K_DATA); }
		public TerminalNode K_DATA(int i) {
			return getToken(VSqlParser.K_DATA, i);
		}
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public List<TerminalNode> K_ON() { return getTokens(VSqlParser.K_ON); }
		public TerminalNode K_ON(int i) {
			return getToken(VSqlParser.K_ON, i);
		}
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public Create_flex_external_table_as_copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_flex_external_table_as_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_flex_external_table_as_copy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_flex_external_table_as_copy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_flex_external_table_as_copy_statementContext create_flex_external_table_as_copy_statement() throws RecognitionException {
		Create_flex_external_table_as_copy_statementContext _localctx = new Create_flex_external_table_as_copy_statementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_create_flex_external_table_as_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(K_CREATE);
			setState(2373);
			_la = _input.LA(1);
			if ( !(_la==K_FLEX || _la==K_FLEXIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2374);
			match(K_EXTERNAL);
			setState(2375);
			match(K_TABLE);
			setState(2377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2376);
				ifNotExistsClause();
				}
				break;
			}
			setState(2379);
			tableReference();
			setState(2380);
			column_definition_list();
			setState(2382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(2381);
				schema_privileges_clause();
				}
			}

			setState(2384);
			match(K_AS);
			setState(2385);
			match(K_COPY);
			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2386);
				match(OPEN_PAREN);
				setState(2387);
				copy_column();
				setState(2392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2388);
					match(COMMA);
					setState(2389);
					copy_column();
					}
					}
					setState(2394);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2395);
				match(CLOSE_PAREN);
				}
			}

			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(2399);
				match(K_FROM);
				setState(2400);
				path();
				setState(2409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) {
					{
					setState(2401);
					compressionType();
					setState(2406);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2402);
						match(COMMA);
						setState(2403);
						compressionType();
						}
						}
						setState(2408);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WITH) {
					{
					setState(2411);
					match(K_WITH);
					}
				}

				setState(2420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SOURCE) {
					{
					setState(2414);
					match(K_SOURCE);
					setState(2415);
					source();
					setState(2416);
					match(OPEN_PAREN);
					setState(2417);
					commaSeparatedKeyValuePairs();
					setState(2418);
					match(CLOSE_PAREN);
					}
				}

				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_FILTER) {
					{
					setState(2422);
					match(K_FILTER);
					setState(2423);
					filter();
					setState(2424);
					match(OPEN_PAREN);
					setState(2425);
					commaSeparatedKeyValuePairs();
					setState(2426);
					match(CLOSE_PAREN);
					}
				}

				setState(2434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PARSER) {
					{
					setState(2430);
					match(K_PARSER);
					setState(2431);
					parserName();
					setState(2432);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(2441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DELIMITER) {
					{
					setState(2436);
					match(K_DELIMITER);
					setState(2438);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2437);
						match(K_AS);
						}
					}

					setState(2440);
					singleChar();
					}
				}

				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRAILING) {
					{
					setState(2443);
					match(K_TRAILING);
					setState(2444);
					match(K_NULLCOLS);
					}
				}

				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NULL) {
					{
					setState(2447);
					match(K_NULL);
					setState(2449);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2448);
						match(K_AS);
						}
					}

					setState(2451);
					string();
					}
				}

				setState(2461);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ESCAPE:
					{
					{
					setState(2454);
					match(K_ESCAPE);
					setState(2456);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS) {
						{
						setState(2455);
						match(K_AS);
						}
					}

					setState(2458);
					singleChar();
					}
					}
					break;
				case K_NO:
					{
					{
					setState(2459);
					match(K_NO);
					setState(2460);
					match(K_ESCAPE);
					}
					}
					break;
				case EOF:
				case K_TRIM:
				case K_ABORT:
				case K_ENCLOSED:
				case K_ENFORCELENGTH:
				case K_EXCEPTIONS:
				case K_RECORD:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_SKIP:
				case CLOSE_PAREN:
				case SEMI:
					break;
				default:
					break;
				}
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENCLOSED) {
					{
					setState(2463);
					match(K_ENCLOSED);
					setState(2465);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_BY) {
						{
						setState(2464);
						match(K_BY);
						}
					}

					setState(2467);
					singleChar();
					}
				}

				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_RECORD) {
					{
					setState(2470);
					match(K_RECORD);
					setState(2471);
					match(K_TERMINATOR);
					setState(2472);
					string();
					}
				}

				setState(2477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2475);
					match(K_SKIP);
					setState(2476);
					integerNumber();
					}
					break;
				}
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_SKIP) {
					{
					setState(2479);
					match(K_SKIP);
					setState(2480);
					match(K_BYTES);
					setState(2481);
					integerNumber();
					}
				}

				setState(2486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TRIM) {
					{
					setState(2484);
					match(K_TRIM);
					setState(2485);
					singleChar();
					}
				}

				setState(2490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTMAX) {
					{
					setState(2488);
					match(K_REJECTMAX);
					setState(2489);
					integerNumber();
					}
				}

				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_EXCEPTIONS) {
					{
					setState(2492);
					match(K_EXCEPTIONS);
					setState(2493);
					string();
					{
					setState(2494);
					match(K_ON);
					setState(2495);
					node();
					}
					{
					setState(2497);
					match(COMMA);
					setState(2505);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_EXCEPTIONS) {
						{
						{
						setState(2498);
						match(K_EXCEPTIONS);
						setState(2499);
						string();
						{
						setState(2500);
						match(K_ON);
						setState(2501);
						node();
						}
						}
						}
						setState(2507);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_REJECTED) {
					{
					setState(2510);
					match(K_REJECTED);
					setState(2511);
					match(K_DATA);
					setState(2512);
					string();
					{
					setState(2513);
					match(K_ON);
					setState(2514);
					node();
					}
					{
					setState(2516);
					match(COMMA);
					setState(2525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==K_REJECTED) {
						{
						{
						setState(2517);
						match(K_REJECTED);
						setState(2518);
						match(K_DATA);
						setState(2519);
						string();
						{
						setState(2520);
						match(K_ON);
						setState(2521);
						node();
						}
						}
						}
						setState(2527);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
				}

				setState(2531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ENFORCELENGTH) {
					{
					setState(2530);
					match(K_ENFORCELENGTH);
					}
				}

				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ABORT) {
					{
					setState(2533);
					match(K_ABORT);
					setState(2534);
					match(K_ON);
					setState(2535);
					match(K_ERROR);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_statements_statementContext extends ParserRuleContext {
		public Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() {
			return getRuleContext(Create_or_replace_aggregate_function_statementContext.class,0);
		}
		public Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() {
			return getRuleContext(Create_or_replace_analytic_function_statementContext.class,0);
		}
		public Create_or_replace_filter_statementContext create_or_replace_filter_statement() {
			return getRuleContext(Create_or_replace_filter_statementContext.class,0);
		}
		public Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() {
			return getRuleContext(Create_or_replace_sql_function_statementContext.class,0);
		}
		public Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() {
			return getRuleContext(Create_or_replace_udf_function_statementContext.class,0);
		}
		public Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() {
			return getRuleContext(Create_or_replace_parser_function_statementContext.class,0);
		}
		public Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() {
			return getRuleContext(Create_or_replace_source_function_statementContext.class,0);
		}
		public Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() {
			return getRuleContext(Create_or_replace_transform_function_statementContext.class,0);
		}
		public Create_function_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_function_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_function_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_function_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_statements_statementContext create_function_statements_statement() throws RecognitionException {
		Create_function_statements_statementContext _localctx = new Create_function_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_function_statements_statement);
		try {
			setState(2548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2540);
				create_or_replace_aggregate_function_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2541);
				create_or_replace_analytic_function_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2542);
				create_or_replace_filter_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2543);
				create_or_replace_sql_function_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2544);
				create_or_replace_udf_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2545);
				create_or_replace_parser_function_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2546);
				create_or_replace_source_function_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2547);
				create_or_replace_transform_function_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_transform_function_statementContext create_or_replace_transform_function_statement() throws RecognitionException {
		Create_or_replace_transform_function_statementContext _localctx = new Create_or_replace_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_create_or_replace_transform_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2550);
			match(K_CREATE);
			setState(2553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2551);
				match(K_OR);
				setState(2552);
				match(K_REPLACE);
				}
			}

			setState(2555);
			match(K_TRANSFORM);
			setState(2556);
			match(K_FUNCTION);
			setState(2557);
			function();
			setState(2558);
			match(K_AS);
			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2559);
				match(K_LANGUAGE);
				setState(2560);
				lang();
				}
			}

			setState(2563);
			match(K_NAME);
			setState(2564);
			id();
			setState(2565);
			match(K_LIBRARY);
			setState(2566);
			library();
			setState(2570);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2567);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2568);
				match(K_NOT);
				setState(2569);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_source_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_source_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_source_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_source_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_source_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_source_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_source_function_statementContext create_or_replace_source_function_statement() throws RecognitionException {
		Create_or_replace_source_function_statementContext _localctx = new Create_or_replace_source_function_statementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_or_replace_source_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(K_CREATE);
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2573);
				match(K_OR);
				setState(2574);
				match(K_REPLACE);
				}
			}

			setState(2577);
			match(K_SOURCE);
			setState(2578);
			functionReference();
			setState(2579);
			match(K_AS);
			setState(2580);
			match(K_LANGUAGE);
			setState(2581);
			lang();
			setState(2582);
			match(K_NAME);
			setState(2583);
			id();
			setState(2584);
			match(K_LIBRARY);
			setState(2585);
			library();
			setState(2589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2586);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2587);
				match(K_NOT);
				setState(2588);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_parser_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_parser_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_parser_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_parser_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_parser_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_parser_function_statementContext create_or_replace_parser_function_statement() throws RecognitionException {
		Create_or_replace_parser_function_statementContext _localctx = new Create_or_replace_parser_function_statementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_or_replace_parser_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			match(K_CREATE);
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2592);
				match(K_OR);
				setState(2593);
				match(K_REPLACE);
				}
			}

			setState(2596);
			match(K_PARSER);
			setState(2597);
			functionReference();
			setState(2598);
			match(K_AS);
			setState(2601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2599);
				match(K_LANGUAGE);
				setState(2600);
				lang();
				}
			}

			setState(2603);
			match(K_NAME);
			setState(2604);
			id();
			setState(2605);
			match(K_LIBRARY);
			setState(2606);
			library();
			setState(2610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2607);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2608);
				match(K_NOT);
				setState(2609);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_udf_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_udf_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_udf_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_udf_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_udf_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_udf_function_statementContext create_or_replace_udf_function_statement() throws RecognitionException {
		Create_or_replace_udf_function_statementContext _localctx = new Create_or_replace_udf_function_statementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_or_replace_udf_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(K_CREATE);
			setState(2615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2613);
				match(K_OR);
				setState(2614);
				match(K_REPLACE);
				}
			}

			setState(2617);
			match(K_FUNCTION);
			setState(2618);
			functionReference();
			setState(2619);
			match(K_AS);
			setState(2622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2620);
				match(K_LANGUAGE);
				setState(2621);
				lang();
				}
			}

			setState(2624);
			match(K_NAME);
			setState(2625);
			id();
			setState(2626);
			match(K_LIBRARY);
			setState(2627);
			library();
			setState(2631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2628);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2629);
				match(K_NOT);
				setState(2630);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_sql_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ExpreDefininitionContext expreDefininition() {
			return getRuleContext(ExpreDefininitionContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public Create_or_replace_sql_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_sql_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_sql_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_sql_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_sql_function_statementContext create_or_replace_sql_function_statement() throws RecognitionException {
		Create_or_replace_sql_function_statementContext _localctx = new Create_or_replace_sql_function_statementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_create_or_replace_sql_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(K_CREATE);
			setState(2636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2634);
				match(K_OR);
				setState(2635);
				match(K_REPLACE);
				}
			}

			setState(2638);
			match(K_FUNCTION);
			setState(2639);
			functionReference();
			setState(2640);
			argument_list();
			setState(2641);
			match(K_RETURN);
			setState(2642);
			dataTypes();
			setState(2643);
			match(K_AS);
			setState(2644);
			expreDefininition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpreDefininitionContext extends ParserRuleContext {
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode SEMI() { return getToken(VSqlParser.SEMI, 0); }
		public ExpreDefininitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expreDefininition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpreDefininition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpreDefininition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpreDefininition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpreDefininitionContext expreDefininition() throws RecognitionException {
		ExpreDefininitionContext _localctx = new ExpreDefininitionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_expreDefininition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646);
			match(K_BEGIN);
			setState(2647);
			match(K_RETURN);
			setState(2648);
			expression();
			setState(2650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(2649);
				match(SEMI);
				}
			}

			setState(2652);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_filter_statementContext create_or_replace_filter_statement() throws RecognitionException {
		Create_or_replace_filter_statementContext _localctx = new Create_or_replace_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_create_or_replace_filter_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2654);
			match(K_CREATE);
			setState(2657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2655);
				match(K_OR);
				setState(2656);
				match(K_REPLACE);
				}
			}

			setState(2659);
			match(K_FILTER);
			setState(2660);
			functionReference();
			setState(2661);
			match(K_AS);
			setState(2664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2662);
				match(K_LANGUAGE);
				setState(2663);
				lang();
				}
			}

			setState(2666);
			match(K_NAME);
			setState(2667);
			id();
			setState(2668);
			match(K_LIBRARY);
			setState(2669);
			library();
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT || _la==K_FENCED) {
				{
				setState(2671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_NOT) {
					{
					setState(2670);
					match(K_NOT);
					}
				}

				setState(2673);
				match(K_FENCED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_analytic_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Create_or_replace_analytic_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_analytic_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_analytic_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_analytic_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_analytic_function_statementContext create_or_replace_analytic_function_statement() throws RecognitionException {
		Create_or_replace_analytic_function_statementContext _localctx = new Create_or_replace_analytic_function_statementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_create_or_replace_analytic_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			match(K_CREATE);
			setState(2679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2677);
				match(K_OR);
				setState(2678);
				match(K_REPLACE);
				}
			}

			setState(2681);
			match(K_ANALYTIC);
			setState(2682);
			match(K_FUNCTION);
			setState(2683);
			function();
			setState(2684);
			match(K_AS);
			setState(2687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2685);
				match(K_LANGUAGE);
				setState(2686);
				lang();
				}
			}

			setState(2689);
			match(K_NAME);
			setState(2690);
			id();
			setState(2691);
			match(K_LIBRARY);
			setState(2692);
			library();
			setState(2696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FENCED:
				{
				setState(2693);
				match(K_FENCED);
				}
				break;
			case K_NOT:
				{
				setState(2694);
				match(K_NOT);
				setState(2695);
				match(K_FENCED);
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_replace_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_or_replace_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_replace_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_or_replace_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_or_replace_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_replace_aggregate_function_statementContext create_or_replace_aggregate_function_statement() throws RecognitionException {
		Create_or_replace_aggregate_function_statementContext _localctx = new Create_or_replace_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_or_replace_aggregate_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(K_CREATE);
			setState(2701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2699);
				match(K_OR);
				setState(2700);
				match(K_REPLACE);
				}
			}

			setState(2703);
			match(K_AGGREGATE);
			setState(2704);
			match(K_FUNCTION);
			setState(2705);
			functionReference();
			setState(2706);
			match(K_AS);
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2707);
				match(K_LANGUAGE);
				setState(2708);
				lang();
				}
			}

			setState(2711);
			match(K_NAME);
			setState(2712);
			id();
			setState(2713);
			match(K_LIBRARY);
			setState(2714);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_hcatalog_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<Hcatalog_schema_paramContext> hcatalog_schema_param() {
			return getRuleContexts(Hcatalog_schema_paramContext.class);
		}
		public Hcatalog_schema_paramContext hcatalog_schema_param(int i) {
			return getRuleContext(Hcatalog_schema_paramContext.class,i);
		}
		public Create_hcatalog_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_hcatalog_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_hcatalog_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_hcatalog_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_hcatalog_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_hcatalog_schema_statementContext create_hcatalog_schema_statement() throws RecognitionException {
		Create_hcatalog_schema_statementContext _localctx = new Create_hcatalog_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_create_hcatalog_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2716);
			match(K_CREATE);
			setState(2717);
			match(K_HCATALOG);
			setState(2718);
			match(K_SCHEMA);
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2719);
				ifNotExistsClause();
				}
				break;
			}
			setState(2722);
			schema();
			setState(2725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(2723);
				match(K_AUTHORIZATION);
				setState(2724);
				id();
				}
			}

			setState(2733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(2727);
				match(K_WITH);
				setState(2729); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2728);
					hcatalog_schema_param();
					}
					}
					setState(2731); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hcatalog_schema_paramContext extends ParserRuleContext {
		public Token key;
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_HOSTNAME() { return getToken(VSqlParser.K_HOSTNAME, 0); }
		public TerminalNode K_PORT() { return getToken(VSqlParser.K_PORT, 0); }
		public TerminalNode K_HIVESERVER2_HOSTNAME() { return getToken(VSqlParser.K_HIVESERVER2_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_HOSTNAME() { return getToken(VSqlParser.K_WEBSERVICE_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_PORT() { return getToken(VSqlParser.K_WEBSERVICE_PORT, 0); }
		public TerminalNode K_WEBHDFS_ADDRESS() { return getToken(VSqlParser.K_WEBHDFS_ADDRESS, 0); }
		public TerminalNode K_HCATALOG_SCHEMA() { return getToken(VSqlParser.K_HCATALOG_SCHEMA, 0); }
		public TerminalNode K_CUSTOM_PARTITIONS() { return getToken(VSqlParser.K_CUSTOM_PARTITIONS, 0); }
		public TerminalNode K_HCATALOG_USER() { return getToken(VSqlParser.K_HCATALOG_USER, 0); }
		public TerminalNode K_HCATALOG_CONNECTION_TIMEOUT() { return getToken(VSqlParser.K_HCATALOG_CONNECTION_TIMEOUT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_LIMIT() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_LIMIT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_TIME() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_TIME, 0); }
		public TerminalNode K_SSL_CONFIG() { return getToken(VSqlParser.K_SSL_CONFIG, 0); }
		public Hcatalog_schema_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hcatalog_schema_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHcatalog_schema_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHcatalog_schema_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHcatalog_schema_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hcatalog_schema_paramContext hcatalog_schema_param() throws RecognitionException {
		Hcatalog_schema_paramContext _localctx = new Hcatalog_schema_paramContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_hcatalog_schema_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			((Hcatalog_schema_paramContext)_localctx).key = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM_PARTITIONS || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (K_HCATALOG_CONNECTION_TIMEOUT - 313)) | (1L << (K_HCATALOG_SCHEMA - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 313)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 313)) | (1L << (K_HCATALOG_USER - 313)) | (1L << (K_HIVESERVER2_HOSTNAME - 313)) | (1L << (K_HOSTNAME - 313)))) != 0) || _la==K_PORT || _la==K_SSL_CONFIG || _la==K_WEBHDFS_ADDRESS || _la==K_WEBSERVICE_HOSTNAME || _la==K_WEBSERVICE_PORT) ) {
				((Hcatalog_schema_paramContext)_localctx).key = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2736);
			match(EQUAL);
			setState(2737);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_library_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public Create_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_library_statementContext create_library_statement() throws RecognitionException {
		Create_library_statementContext _localctx = new Create_library_statementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_create_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			match(K_CREATE);
			setState(2742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(2740);
				match(K_OR);
				setState(2741);
				match(K_REPLACE);
				}
			}

			setState(2744);
			match(K_LIBRARY);
			setState(2745);
			libraryReference();
			setState(2746);
			alias();
			setState(2749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEPENDS) {
				{
				setState(2747);
				match(K_DEPENDS);
				setState(2748);
				id();
				}
			}

			setState(2753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LANGUAGE) {
				{
				setState(2751);
				match(K_LANGUAGE);
				setState(2752);
				lang();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public List<TerminalNode> K_GROUP() { return getTokens(VSqlParser.K_GROUP); }
		public TerminalNode K_GROUP(int i) {
			return getToken(VSqlParser.K_GROUP, i);
		}
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public List<Network_addressContext> network_address() {
			return getRuleContexts(Network_addressContext.class);
		}
		public Network_addressContext network_address(int i) {
			return getRuleContext(Network_addressContext.class,i);
		}
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public List<FaultGroupContext> faultGroup() {
			return getRuleContexts(FaultGroupContext.class);
		}
		public FaultGroupContext faultGroup(int i) {
			return getRuleContext(FaultGroupContext.class,i);
		}
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_load_balance_group_statementContext create_load_balance_group_statement() throws RecognitionException {
		Create_load_balance_group_statementContext _localctx = new Create_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_create_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2755);
			match(K_CREATE);
			setState(2756);
			match(K_LOAD);
			setState(2757);
			match(K_BALANCE);
			setState(2758);
			match(K_GROUP);
			setState(2759);
			lb_group();
			setState(2760);
			match(K_WITH);
			setState(2783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ADDRESS:
				{
				{
				setState(2761);
				match(K_ADDRESS);
				setState(2762);
				network_address();
				setState(2767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2763);
					match(COMMA);
					setState(2764);
					network_address();
					}
					}
					setState(2769);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_FAULT:
				{
				{
				setState(2770);
				match(K_FAULT);
				setState(2771);
				match(K_GROUP);
				setState(2772);
				faultGroup();
				setState(2777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2773);
					match(COMMA);
					setState(2774);
					faultGroup();
					}
					}
					setState(2779);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2780);
				match(K_FILTER);
				setState(2781);
				address();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_POLICY) {
				{
				setState(2785);
				match(K_POLICY);
				setState(2786);
				value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_local_temporary_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Create_local_temporary_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_local_temporary_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_local_temporary_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_local_temporary_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_local_temporary_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_local_temporary_view_statementContext create_local_temporary_view_statement() throws RecognitionException {
		Create_local_temporary_view_statementContext _localctx = new Create_local_temporary_view_statementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_local_temporary_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(K_CREATE);
			{
			setState(2790);
			match(K_OR);
			setState(2791);
			match(K_REPLACE);
			}
			setState(2793);
			match(K_LOCAL);
			setState(2794);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2795);
			match(K_VIEW);
			setState(2796);
			viewReference();
			setState(2798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
				{
				setState(2797);
				columns();
				}
			}

			setState(2800);
			match(K_AS);
			setState(2801);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_location_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public Create_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_location_statementContext create_location_statement() throws RecognitionException {
		Create_location_statementContext _localctx = new Create_location_statementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2803);
			match(K_CREATE);
			setState(2804);
			match(K_LOCATION);
			setState(2805);
			string();
			setState(2810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_NODE:
				{
				{
				setState(2806);
				match(K_NODE);
				setState(2807);
				node();
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(2808);
				match(K_ALL);
				setState(2809);
				match(K_NODES);
				}
				}
				break;
			case EOF:
			case K_LIMIT:
			case K_LABEL:
			case K_SHARED:
			case K_USAGE:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SHARED) {
				{
				setState(2812);
				match(K_SHARED);
				}
			}

			setState(2817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_USAGE) {
				{
				setState(2815);
				match(K_USAGE);
				setState(2816);
				string();
				}
			}

			setState(2821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LABEL) {
				{
				setState(2819);
				match(K_LABEL);
				setState(2820);
				string();
				}
			}

			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_LIMIT) {
				{
				setState(2823);
				match(K_LIMIT);
				setState(2824);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_address_statementContext create_network_address_statement() throws RecognitionException {
		Create_network_address_statementContext _localctx = new Create_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_network_address_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2827);
			match(K_CREATE);
			setState(2828);
			match(K_NETWORK);
			setState(2829);
			match(K_ADDRESS);
			setState(2830);
			network_address();
			setState(2831);
			match(K_ON);
			setState(2832);
			node();
			setState(2833);
			match(K_WITH);
			setState(2834);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public Create_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_interface_statementContext create_network_interface_statement() throws RecognitionException {
		Create_network_interface_statementContext _localctx = new Create_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_network_interface_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			match(K_CREATE);
			setState(2837);
			match(K_NETWORK);
			setState(2838);
			match(K_INTERFACE);
			setState(2839);
			network_interface();
			setState(2840);
			match(K_ON);
			setState(2841);
			node();
			setState(2842);
			match(K_WITH);
			setState(2843);
			address();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public TerminalNode K_ACTION() { return getToken(VSqlParser.K_ACTION, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<Notifier_paramsContext> notifier_params() {
			return getRuleContexts(Notifier_paramsContext.class);
		}
		public Notifier_paramsContext notifier_params(int i) {
			return getRuleContext(Notifier_paramsContext.class,i);
		}
		public Create_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_notifier_statementContext create_notifier_statement() throws RecognitionException {
		Create_notifier_statementContext _localctx = new Create_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_notifier_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			match(K_CREATE);
			setState(2846);
			match(K_NOTIFIER);
			setState(2847);
			notifier();
			setState(2848);
			match(K_ACTION);
			setState(2849);
			value();
			setState(2853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_CHECK || _la==K_DISABLE || _la==K_ENABLE || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (K_MAXMEMORYSIZE - 374)) | (1L << (K_MAXPAYLOAD - 374)) | (1L << (K_NO - 374)) | (1L << (K_PARAMETERS - 374)))) != 0)) {
				{
				{
				setState(2850);
				notifier_params();
				}
				}
				setState(2855);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_statementContext extends ParserRuleContext {
		public ValueContext executable;
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_statementContext create_procedure_statement() throws RecognitionException {
		Create_procedure_statementContext _localctx = new Create_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856);
			match(K_CREATE);
			setState(2857);
			match(K_PROCEDURE);
			setState(2858);
			procedureReference();
			setState(2859);
			argument_list();
			setState(2860);
			match(K_AS);
			setState(2861);
			((Create_procedure_statementContext)_localctx).executable = value();
			setState(2862);
			match(K_LANGUAGE);
			setState(2863);
			lang();
			setState(2864);
			match(K_USER);
			setState(2865);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Argument_itemContext> argument_item() {
			return getRuleContexts(Argument_itemContext.class);
		}
		public Argument_itemContext argument_item(int i) {
			return getRuleContext(Argument_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_listContext argument_list() throws RecognitionException {
		Argument_listContext _localctx = new Argument_listContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2867);
			match(OPEN_PAREN);
			setState(2876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_BIGINT) | (1L << K_BINARY) | (1L << K_BOOLEAN) | (1L << K_CHAR) | (1L << K_DECIMAL) | (1L << K_DEFAULT) | (1L << K_FLOAT) | (1L << K_INT) | (1L << K_INTEGER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (K_INTERVAL - 64)) | (1L << (K_MONEY - 64)) | (1L << (K_NUMBER - 64)) | (1L << (K_NUMERIC - 64)) | (1L << (K_REAL - 64)) | (1L << (K_SMALLDATETIME - 64)) | (1L << (K_SMALLINT - 64)) | (1L << (K_TIME - 64)) | (1L << (K_TIMESTAMP - 64)) | (1L << (K_TIMESTAMPTZ - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (K_TINYINT - 130)) | (1L << (K_UUID - 130)) | (1L << (K_VARBINARY - 130)) | (1L << (K_VARCHAR - 130)) | (1L << (K_ABORT - 130)) | (1L << (K_ABSOLUTE - 130)) | (1L << (K_ACCESS - 130)) | (1L << (K_ACCESSRANK - 130)) | (1L << (K_ACCOUNT - 130)) | (1L << (K_ACTION - 130)) | (1L << (K_ACTIVATE - 130)) | (1L << (K_ACTIVEPARTITIONCOUNT - 130)) | (1L << (K_ADD - 130)) | (1L << (K_ADMIN - 130)) | (1L << (K_AFTER - 130)) | (1L << (K_AGGREGATE - 130)) | (1L << (K_ALSO - 130)) | (1L << (K_ALTER - 130)) | (1L << (K_ANALYSE - 130)) | (1L << (K_ANALYTIC - 130)) | (1L << (K_ANALYZE - 130)) | (1L << (K_ANNOTATED - 130)) | (1L << (K_ANTI - 130)) | (1L << (K_ASSERTION - 130)) | (1L << (K_ASSIGNMENT - 130)) | (1L << (K_AT - 130)) | (1L << (K_AUTHENTICATION - 130)) | (1L << (K_AUTO - 130)) | (1L << (K_AUTO_INCREMENT - 130)) | (1L << (K_AVAILABLE - 130)) | (1L << (K_BACKWARD - 130)) | (1L << (K_BASENAME - 130)) | (1L << (K_BATCH - 130)) | (1L << (K_BEFORE - 130)) | (1L << (K_BEGIN - 130)) | (1L << (K_BEST - 130)) | (1L << (K_BLOCK - 130)) | (1L << (K_BLOCK_DICT - 130)) | (1L << (K_BLOCKDICT_COMP - 130)) | (1L << (K_BROADCAST - 130)) | (1L << (K_BY - 130)) | (1L << (K_BYTEA - 130)) | (1L << (K_BYTES - 130)) | (1L << (K_BZIP - 130)) | (1L << (K_BZIP_COMP - 130)) | (1L << (K_CACHE - 130)) | (1L << (K_CALLED - 130)) | (1L << (K_CASCADE - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (K_CATALOGPATH - 194)) | (1L << (K_CHAIN - 194)) | (1L << (K_CHARACTER - 194)) | (1L << (K_CHARACTERISTICS - 194)) | (1L << (K_CHARACTERS - 194)) | (1L << (K_CHECKPOINT - 194)) | (1L << (K_CLASS - 194)) | (1L << (K_CLEAR - 194)) | (1L << (K_CLOSE - 194)) | (1L << (K_CLUSTER - 194)) | (1L << (K_COLSIZES - 194)) | (1L << (K_COLUMNS_COUNT - 194)) | (1L << (K_COMMENT - 194)) | (1L << (K_COMMIT - 194)) | (1L << (K_COMMITTED - 194)) | (1L << (K_COMMONDELTA_COMP - 194)) | (1L << (K_COMMUNAL - 194)) | (1L << (K_COMPLEX - 194)) | (1L << (K_CONNECT - 194)) | (1L << (K_CONSTRAINTS - 194)) | (1L << (K_CONTROL - 194)) | (1L << (K_COPY - 194)) | (1L << (K_CPUAFFINITYMODE - 194)) | (1L << (K_CPUAFFINITYSET - 194)) | (1L << (K_CREATEDB - 194)) | (1L << (K_CREATEUSER - 194)) | (1L << (K_CSV - 194)) | (1L << (K_CUBE - 194)) | (1L << (K_CURRENT - 194)) | (1L << (K_CURSOR - 194)) | (1L << (K_CUSTOM - 194)) | (1L << (K_CUSTOM_PARTITIONS - 194)) | (1L << (K_CYCLE - 194)) | (1L << (K_DATA - 194)) | (1L << (K_DATABASE - 194)) | (1L << (K_DATAPATH - 194)) | (1L << (K_DAY - 194)) | (1L << (K_DEACTIVATE - 194)) | (1L << (K_DEALLOCATE - 194)) | (1L << (K_DEC - 194)) | (1L << (K_DECLARE - 194)) | (1L << (K_DEFAULTS - 194)) | (1L << (K_DEFERRED - 194)) | (1L << (K_DEFINE - 194)) | (1L << (K_DEFINER - 194)) | (1L << (K_DELETE - 194)) | (1L << (K_DELIMITER - 194)) | (1L << (K_DELIMITERS - 194)) | (1L << (K_DELTARANGE_COMP - 194)) | (1L << (K_DELTARANGE_COMP_SP - 194)) | (1L << (K_DELTAVAL - 194)) | (1L << (K_DEPENDS - 194)) | (1L << (K_DETERMINES - 194)) | (1L << (K_DIRECT - 194)) | (1L << (K_DIRECTCOLS - 194)) | (1L << (K_DIRECTED - 194)) | (1L << (K_DIRECTGROUPED - 194)) | (1L << (K_DIRECTPROJ - 194)) | (1L << (K_DISABLE - 194)) | (1L << (K_DISABLED - 194)) | (1L << (K_DISCONNECT - 194)) | (1L << (K_DISTVALINDEX - 194)) | (1L << (K_DO - 194)) | (1L << (K_DOMAIN - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (K_DOUBLE - 258)) | (1L << (K_DROP - 258)) | (1L << (K_DURABLE - 258)) | (1L << (K_EACH - 258)) | (1L << (K_ENABLE - 258)) | (1L << (K_ENABLED - 258)) | (1L << (K_ENCLOSED - 258)) | (1L << (K_ENCODING - 258)) | (1L << (K_ENCRYPTED - 258)) | (1L << (K_ENFORCELENGTH - 258)) | (1L << (K_EPHEMERAL - 258)) | (1L << (K_EPOCH - 258)) | (1L << (K_ERROR - 258)) | (1L << (K_ESCAPE - 258)) | (1L << (K_EVENT - 258)) | (1L << (K_EVENTS - 258)) | (1L << (K_EXCEPTION - 258)) | (1L << (K_EXCEPTIONS - 258)) | (1L << (K_EXCLUDE - 258)) | (1L << (K_EXCLUDING - 258)) | (1L << (K_EXCLUSIVE - 258)) | (1L << (K_EXECUTE - 258)) | (1L << (K_EXECUTIONPARALLELISM - 258)) | (1L << (K_EXPIRE - 258)) | (1L << (K_EXPLAIN - 258)) | (1L << (K_EXPORT - 258)) | (1L << (K_EXTERNAL - 258)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 258)) | (1L << (K_FAULT - 258)) | (1L << (K_FENCED - 258)) | (1L << (K_FETCH - 258)) | (1L << (K_FILESYSTEM - 258)) | (1L << (K_FILLER - 258)) | (1L << (K_FILTER - 258)) | (1L << (K_FIRST - 258)) | (1L << (K_FIXEDWIDTH - 258)) | (1L << (K_FLEX - 258)) | (1L << (K_FLEXIBLE - 258)) | (1L << (K_FOLLOWING - 258)) | (1L << (K_FORCE - 258)) | (1L << (K_FORMAT - 258)) | (1L << (K_FORWARD - 258)) | (1L << (K_FREEZE - 258)) | (1L << (K_FUNCTION - 258)) | (1L << (K_FUNCTIONS - 258)) | (1L << (K_GCDDELTA - 258)) | (1L << (K_GET - 258)) | (1L << (K_GLOBAL - 258)) | (1L << (K_GRACEPERIOD - 258)) | (1L << (K_GROUPED - 258)) | (1L << (K_GROUPING - 258)) | (1L << (K_GZIP - 258)) | (1L << (K_GZIP_COMP - 258)) | (1L << (K_HANDLER - 258)) | (1L << (K_HCATALOG - 258)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 258)) | (1L << (K_HCATALOG_DB - 258)) | (1L << (K_HCATALOG_SCHEMA - 258)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 258)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 258)) | (1L << (K_HCATALOG_USER - 258)) | (1L << (K_HIGH - 258)) | (1L << (K_HIVE_PARTITION_COLS - 258)) | (1L << (K_HIVESERVER2_HOSTNAME - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (K_HOLD - 322)) | (1L << (K_HOST - 322)) | (1L << (K_HOSTNAME - 322)) | (1L << (K_HOUR - 322)) | (1L << (K_HOURS - 322)) | (1L << (K_IDENTIFIED - 322)) | (1L << (K_IDENTITY - 322)) | (1L << (K_IDLESESSIONTIMEOUT - 322)) | (1L << (K_IF - 322)) | (1L << (K_IGNORE - 322)) | (1L << (K_IMMEDIATE - 322)) | (1L << (K_IMMUTABLE - 322)) | (1L << (K_IMPLICIT - 322)) | (1L << (K_INCLUDE - 322)) | (1L << (K_INCLUDING - 322)) | (1L << (K_INCREMENT - 322)) | (1L << (K_INDEX - 322)) | (1L << (K_INHERITS - 322)) | (1L << (K_INPUT - 322)) | (1L << (K_INSENSITIVE - 322)) | (1L << (K_INSERT - 322)) | (1L << (K_INSTEAD - 322)) | (1L << (K_INTERFACE - 322)) | (1L << (K_INTERPOLATE - 322)) | (1L << (K_INVOKER - 322)) | (1L << (K_ISOLATION - 322)) | (1L << (K_JSON - 322)) | (1L << (K_KEY - 322)) | (1L << (K_LABEL - 322)) | (1L << (K_LANCOMPILER - 322)) | (1L << (K_LANGUAGE - 322)) | (1L << (K_LARGE - 322)) | (1L << (K_LAST - 322)) | (1L << (K_LATEST - 322)) | (1L << (K_LESS - 322)) | (1L << (K_LEVEL - 322)) | (1L << (K_LIBRARY - 322)) | (1L << (K_LISTEN - 322)) | (1L << (K_LOAD - 322)) | (1L << (K_LOCAL - 322)) | (1L << (K_LOCATION - 322)) | (1L << (K_LOCK - 322)) | (1L << (K_LONG - 322)) | (1L << (K_LOW - 322)) | (1L << (K_LZO - 322)) | (1L << (K_MANAGED - 322)) | (1L << (K_MASK - 322)) | (1L << (K_MATCHED - 322)) | (1L << (K_MATERIALIZE - 322)) | (1L << (K_MAXCONCURRENCY - 322)) | (1L << (K_MAXCONCURRENCYGRACE - 322)) | (1L << (K_MAXCONNECTIONS - 322)) | (1L << (K_MAXMEMORYSIZE - 322)) | (1L << (K_MAXPAYLOAD - 322)) | (1L << (K_MAXQUERYMEMORYSIZE - 322)) | (1L << (K_MAXVALUE - 322)) | (1L << (K_MEDIUM - 322)) | (1L << (K_MEMORYCAP - 322)) | (1L << (K_MEMORYSIZE - 322)) | (1L << (K_MERGE - 322)) | (1L << (K_MERGEOUT - 322)) | (1L << (K_METHOD - 322)) | (1L << (K_MICROSECONDS - 322)) | (1L << (K_MILLISECONDS - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (K_MINUTE - 386)) | (1L << (K_MINUTES - 386)) | (1L << (K_MINVALUE - 386)) | (1L << (K_MODE - 386)) | (1L << (K_MODEL - 386)) | (1L << (K_MONTH - 386)) | (1L << (K_MOVE - 386)) | (1L << (K_MOVEOUT - 386)) | (1L << (K_NAME - 386)) | (1L << (K_NATIONAL - 386)) | (1L << (K_NATIVE - 386)) | (1L << (K_NETWORK - 386)) | (1L << (K_NEXT - 386)) | (1L << (K_NO - 386)) | (1L << (K_NOCREATEDB - 386)) | (1L << (K_NOCREATEUSER - 386)) | (1L << (K_NODE - 386)) | (1L << (K_NODES - 386)) | (1L << (K_NOTHING - 386)) | (1L << (K_NOTIFIER - 386)) | (1L << (K_NOTIFY - 386)) | (1L << (K_NOWAIT - 386)) | (1L << (K_NULLAWARE - 386)) | (1L << (K_NULLCOLS - 386)) | (1L << (K_NULLS - 386)) | (1L << (K_OBJECT - 386)) | (1L << (K_OCTETS - 386)) | (1L << (K_OF - 386)) | (1L << (K_OFF - 386)) | (1L << (K_OIDS - 386)) | (1L << (K_OPERATOR - 386)) | (1L << (K_OPT - 386)) | (1L << (K_OPTIMIZER - 386)) | (1L << (K_OPTION - 386)) | (1L << (K_OPTVER - 386)) | (1L << (K_ORC - 386)) | (1L << (K_OTHERS - 386)) | (1L << (K_OWNER - 386)) | (1L << (K_PARAMETER - 386)) | (1L << (K_PARAMETERS - 386)) | (1L << (K_PARQUET - 386)) | (1L << (K_PARSER - 386)) | (1L << (K_PARTIAL - 386)) | (1L << (K_PARTITION - 386)) | (1L << (K_PARTITIONING - 386)) | (1L << (K_PASSWORD - 386)) | (1L << (K_PASSWORD_GRACE_TIME - 386)) | (1L << (K_PASSWORD_LIFE_TIME - 386)) | (1L << (K_PASSWORD_LOCK_TIME - 386)) | (1L << (K_PASSWORD_MAX_LENGTH - 386)) | (1L << (K_PASSWORD_MIN_DIGITS - 386)) | (1L << (K_PASSWORD_MIN_LENGTH - 386)) | (1L << (K_PASSWORD_MIN_LETTERS - 386)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 386)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 386)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 386)) | (1L << (K_PASSWORD_REUSE_MAX - 386)) | (1L << (K_PASSWORD_REUSE_TIME - 386)) | (1L << (K_PATTERN - 386)) | (1L << (K_PERCENT - 386)) | (1L << (K_PERMANENT - 386)) | (1L << (K_PLACING - 386)) | (1L << (K_PLANNEDCONCURRENCY - 386)) | (1L << (K_POLICY - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (K_POOL - 450)) | (1L << (K_PORT - 450)) | (1L << (K_PRECEDING - 450)) | (1L << (K_PREPARE - 450)) | (1L << (K_PREPASS - 450)) | (1L << (K_PRESERVE - 450)) | (1L << (K_PREVIOUS - 450)) | (1L << (K_PRIOR - 450)) | (1L << (K_PRIORITY - 450)) | (1L << (K_PRIVILEGES - 450)) | (1L << (K_PROCEDURAL - 450)) | (1L << (K_PROCEDURE - 450)) | (1L << (K_PROFILE - 450)) | (1L << (K_PROJECTION - 450)) | (1L << (K_PROJECTIONS - 450)) | (1L << (K_PSDATE - 450)) | (1L << (K_QUERY - 450)) | (1L << (K_QUEUETIMEOUT - 450)) | (1L << (K_QUOTE - 450)) | (1L << (K_RANGE - 450)) | (1L << (K_RAW - 450)) | (1L << (K_READ - 450)) | (1L << (K_RECHECK - 450)) | (1L << (K_RECORD - 450)) | (1L << (K_RECOVER - 450)) | (1L << (K_RECURSIVE - 450)) | (1L << (K_REFRESH - 450)) | (1L << (K_REINDEX - 450)) | (1L << (K_REJECTED - 450)) | (1L << (K_REJECTMAX - 450)) | (1L << (K_RELATIVE - 450)) | (1L << (K_RELEASE - 450)) | (1L << (K_REMOVE - 450)) | (1L << (K_RENAME - 450)) | (1L << (K_REORGANIZE - 450)) | (1L << (K_REPEATABLE - 450)) | (1L << (K_REPLACE - 450)) | (1L << (K_RESET - 450)) | (1L << (K_RESOURCE - 450)) | (1L << (K_RESTART - 450)) | (1L << (K_RESTRICT - 450)) | (1L << (K_RESULTS - 450)) | (1L << (K_RETURN - 450)) | (1L << (K_RETURNREJECTED - 450)) | (1L << (K_REVOKE - 450)) | (1L << (K_RLE - 450)) | (1L << (K_ROLE - 450)) | (1L << (K_ROLES - 450)) | (1L << (K_ROLLBACK - 450)) | (1L << (K_ROLLUP - 450)) | (1L << (K_ROWS - 450)) | (1L << (K_RULE - 450)) | (1L << (K_RUNTIMECAP - 450)) | (1L << (K_RUNTIMEPRIORITY - 450)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 450)) | (1L << (K_SAVE - 450)) | (1L << (K_SAVEPOINT - 450)) | (1L << (K_SCROLL - 450)) | (1L << (K_SEARCH_PATH - 450)) | (1L << (K_SECOND - 450)) | (1L << (K_SECONDS - 450)) | (1L << (K_SECURITY - 450)) | (1L << (K_SECURITY_ALGORITHM - 450)) | (1L << (K_SEGMENTED - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (K_SEMI - 514)) | (1L << (K_SEMIALL - 514)) | (1L << (K_SEQUENCE - 514)) | (1L << (K_SEQUENCES - 514)) | (1L << (K_SERIALIZABLE - 514)) | (1L << (K_SESSION - 514)) | (1L << (K_SET - 514)) | (1L << (K_SETOF - 514)) | (1L << (K_SETS - 514)) | (1L << (K_SHARE - 514)) | (1L << (K_SHARED - 514)) | (1L << (K_SHOW - 514)) | (1L << (K_SIMPLE - 514)) | (1L << (K_SINGLEINITIATOR - 514)) | (1L << (K_SITE - 514)) | (1L << (K_SITES - 514)) | (1L << (K_SKIP - 514)) | (1L << (K_SOURCE - 514)) | (1L << (K_SPLIT - 514)) | (1L << (K_SSL_CONFIG - 514)) | (1L << (K_STABLE - 514)) | (1L << (K_STANDBY - 514)) | (1L << (K_START - 514)) | (1L << (K_STATEMENT - 514)) | (1L << (K_STATISTICS - 514)) | (1L << (K_STDIN - 514)) | (1L << (K_STDOUT - 514)) | (1L << (K_STEMMER - 514)) | (1L << (K_STORAGE - 514)) | (1L << (K_STREAM - 514)) | (1L << (K_STRENGTH - 514)) | (1L << (K_STRICT - 514)) | (1L << (K_SUBNET - 514)) | (1L << (K_SYSID - 514)) | (1L << (K_SYSTEM - 514)) | (1L << (K_TABLES - 514)) | (1L << (K_TABLESAMPLE - 514)) | (1L << (K_TABLESPACE - 514)) | (1L << (K_TEMP - 514)) | (1L << (K_TEMPLATE - 514)) | (1L << (K_TEMPORARY - 514)) | (1L << (K_TEMPSPACECAP - 514)) | (1L << (K_TERMINATOR - 514)) | (1L << (K_THAN - 514)) | (1L << (K_TIES - 514)) | (1L << (K_TLS - 514)) | (1L << (K_TOAST - 514)) | (1L << (K_TOKENIZER - 514)) | (1L << (K_TOLERANCE - 514)) | (1L << (K_TRANSACTION - 514)) | (1L << (K_TRANSFORM - 514)) | (1L << (K_TRICKLE - 514)) | (1L << (K_TRIGGER - 514)) | (1L << (K_TRUNCATE - 514)) | (1L << (K_TRUSTED - 514)) | (1L << (K_TUNING - 514)) | (1L << (K_TYPE - 514)) | (1L << (K_UDPARAMETER - 514)) | (1L << (K_UNCOMMITTED - 514)) | (1L << (K_UNCOMPRESSED - 514)) | (1L << (K_UNI - 514)) | (1L << (K_UNINDEXED - 514)) | (1L << (K_UNKNOWN - 514)) | (1L << (K_UNLIMITED - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (K_UNLISTEN - 578)) | (1L << (K_UNLOCK - 578)) | (1L << (K_UNPACKER - 578)) | (1L << (K_UNSEGMENTED - 578)) | (1L << (K_UPDATE - 578)) | (1L << (K_USAGE - 578)) | (1L << (K_VACUUM - 578)) | (1L << (K_VALIDATE - 578)) | (1L << (K_VALIDATOR - 578)) | (1L << (K_VALINDEX - 578)) | (1L << (K_VALUE - 578)) | (1L << (K_VALUES - 578)) | (1L << (K_VARYING - 578)) | (1L << (K_VERBOSE - 578)) | (1L << (K_VERTICA - 578)) | (1L << (K_VIEW - 578)) | (1L << (K_VOLATILE - 578)) | (1L << (K_WAIT - 578)) | (1L << (K_WEBHDFS_ADDRESS - 578)) | (1L << (K_WEBSERVICE_HOSTNAME - 578)) | (1L << (K_WEBSERVICE_PORT - 578)) | (1L << (K_WITHOUT - 578)) | (1L << (K_WORK - 578)) | (1L << (K_WRITE - 578)) | (1L << (K_YEAR - 578)) | (1L << (K_ZONE - 578)) | (1L << (K_INT8 - 578)) | (1L << (K_FLOAT8 - 578)) | (1L << (K_GEOMETRY - 578)) | (1L << (K_GEOGRAPHY - 578)) | (1L << (K_DATE - 578)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(2868);
				argument_item();
				setState(2873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2869);
					match(COMMA);
					setState(2870);
					argument_item();
					}
					}
					setState(2875);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2878);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Argument_itemContext extends ParserRuleContext {
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Argument_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArgument_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArgument_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArgument_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Argument_itemContext argument_item() throws RecognitionException {
		Argument_itemContext _localctx = new Argument_itemContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_argument_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2880);
				id();
				}
				break;
			}
			setState(2883);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public ProfileContext profile() {
			return getRuleContext(ProfileContext.class,0);
		}
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public List<Password_parameterContext> password_parameter() {
			return getRuleContexts(Password_parameterContext.class);
		}
		public Password_parameterContext password_parameter(int i) {
			return getRuleContext(Password_parameterContext.class,i);
		}
		public Create_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_profile_statementContext create_profile_statement() throws RecognitionException {
		Create_profile_statementContext _localctx = new Create_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_create_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2885);
			match(K_CREATE);
			setState(2886);
			match(K_PROFILE);
			setState(2887);
			profile();
			setState(2888);
			match(K_LIMIT);
			setState(2890); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2889);
				password_parameter();
				}
				}
				setState(2892); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Projection_clause_itemContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Projection_clause_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection_clause_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection_clause_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection_clause_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection_clause_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Projection_clause_itemContext projection_clause_item() throws RecognitionException {
		Projection_clause_itemContext _localctx = new Projection_clause_itemContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_projection_clause_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2894);
				columnReference();
				}
				break;
			case 2:
				{
				setState(2895);
				grouped_clause();
				}
				break;
			}
			setState(2899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(2898);
				encoding_clause();
				}
			}

			setState(2902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(2901);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ksafe_clauseContext extends ParserRuleContext {
		public TerminalNode K_KSAFE() { return getToken(VSqlParser.K_KSAFE, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Ksafe_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ksafe_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKsafe_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKsafe_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKsafe_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ksafe_clauseContext ksafe_clause() throws RecognitionException {
		Ksafe_clauseContext _localctx = new Ksafe_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_ksafe_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904);
			match(K_KSAFE);
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(2905);
				integerNumber();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsClauseContext extends ParserRuleContext {
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_EXISTS() { return getToken(VSqlParser.K_EXISTS, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public IfNotExistsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExistsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIfNotExistsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIfNotExistsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIfNotExistsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsClauseContext ifNotExistsClause() throws RecognitionException {
		IfNotExistsClauseContext _localctx = new IfNotExistsClauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_ifNotExistsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			match(K_IF);
			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(2909);
				match(K_NOT);
				}
			}

			setState(2912);
			match(K_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_statementContext create_projection_statement() throws RecognitionException {
		Create_projection_statementContext _localctx = new Create_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2914);
			match(K_CREATE);
			setState(2915);
			match(K_PROJECTION);
			setState(2917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2916);
				ifNotExistsClause();
				}
				break;
			}
			setState(2919);
			projectionReference();
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(2920);
				hints();
				}
			}

			setState(2934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2923);
				match(OPEN_PAREN);
				setState(2924);
				projection_clause_item();
				setState(2929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2925);
					match(COMMA);
					setState(2926);
					projection_clause_item();
					}
					}
					setState(2931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2932);
				match(CLOSE_PAREN);
				}
			}

			setState(2936);
			match(K_AS);
			setState(2937);
			simple_select_query_clause();
			setState(2939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2938);
				alias();
				}
				break;
			}
			setState(2942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(2941);
				orderby_clause();
				}
			}

			setState(2945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(2944);
				segmentation_clause();
				}
			}

			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2947);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_statementContext extends ParserRuleContext {
		public Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_gr_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() {
			return getRuleContext(Create_projection_live_aggregate_projections_topk_statementContext.class,0);
		}
		public Create_projection_live_aggregate_projections_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_statementContext create_projection_live_aggregate_projections_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_statementContext _localctx = new Create_projection_live_aggregate_projections_statementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_create_projection_live_aggregate_projections_statement);
		try {
			setState(2952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2950);
				create_projection_live_aggregate_projections_gr_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2951);
				create_projection_live_aggregate_projections_topk_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_gr_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_gr_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_gr_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_gr_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_gr_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_gr_statementContext create_projection_live_aggregate_projections_gr_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_gr_statementContext _localctx = new Create_projection_live_aggregate_projections_gr_statementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_projection_live_aggregate_projections_gr_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2954);
			match(K_CREATE);
			setState(2955);
			match(K_PROJECTION);
			setState(2957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2956);
				ifNotExistsClause();
				}
				break;
			}
			setState(2959);
			projectionReference();
			setState(2971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2960);
				match(OPEN_PAREN);
				setState(2961);
				projection_clause_item();
				setState(2966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2962);
					match(COMMA);
					setState(2963);
					projection_clause_item();
					}
					}
					setState(2968);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2969);
				match(CLOSE_PAREN);
				}
			}

			setState(2973);
			match(K_AS);
			setState(2974);
			simple_select_query_clause();
			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(2975);
				alias();
				}
			}

			setState(2978);
			groupBy_clause();
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(2979);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_live_aggregate_projections_topk_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Create_projection_live_aggregate_projections_topk_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_live_aggregate_projections_topk_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_live_aggregate_projections_topk_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_live_aggregate_projections_topk_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_live_aggregate_projections_topk_statementContext create_projection_live_aggregate_projections_topk_statement() throws RecognitionException {
		Create_projection_live_aggregate_projections_topk_statementContext _localctx = new Create_projection_live_aggregate_projections_topk_statementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_create_projection_live_aggregate_projections_topk_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982);
			match(K_CREATE);
			setState(2983);
			match(K_PROJECTION);
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2984);
				ifNotExistsClause();
				}
				break;
			}
			setState(2987);
			projectionReference();
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(2988);
				match(OPEN_PAREN);
				setState(2989);
				projection_clause_item();
				setState(2994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2990);
					match(COMMA);
					setState(2991);
					projection_clause_item();
					}
					}
					setState(2996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2997);
				match(CLOSE_PAREN);
				}
			}

			setState(3001);
			match(K_AS);
			setState(3002);
			simple_select_query_clause();
			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(3003);
				alias();
				}
			}

			setState(3006);
			limit_clause();
			setState(3007);
			over_clause();
			setState(3009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3008);
				ksafe_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_projection_udtfs_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public ProjectionReferenceContext projectionReference() {
			return getRuleContext(ProjectionReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Prepass_queryContext prepass_query() {
			return getRuleContext(Prepass_queryContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<Projection_clause_itemContext> projection_clause_item() {
			return getRuleContexts(Projection_clause_itemContext.class);
		}
		public Projection_clause_itemContext projection_clause_item(int i) {
			return getRuleContext(Projection_clause_itemContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Batch_queryContext batch_query() {
			return getRuleContext(Batch_queryContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Create_projection_udtfs_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_projection_udtfs_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_projection_udtfs_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_projection_udtfs_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_projection_udtfs_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_projection_udtfs_statementContext create_projection_udtfs_statement() throws RecognitionException {
		Create_projection_udtfs_statementContext _localctx = new Create_projection_udtfs_statementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_projection_udtfs_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011);
			match(K_CREATE);
			setState(3012);
			match(K_PROJECTION);
			setState(3014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3013);
				ifNotExistsClause();
				}
				break;
			}
			setState(3016);
			projectionReference();
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3017);
				match(OPEN_PAREN);
				setState(3018);
				projection_clause_item();
				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3019);
					match(COMMA);
					setState(3020);
					projection_clause_item();
					}
					}
					setState(3025);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3026);
				match(CLOSE_PAREN);
				}
			}

			setState(3030);
			match(K_AS);
			setState(3041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				{
				setState(3031);
				batch_query();
				setState(3032);
				match(K_FROM);
				setState(3038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_SELECT:
					{
					setState(3033);
					prepass_query();
					}
					break;
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case K_PUBLIC:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					{
					setState(3034);
					tableReference();
					setState(3036);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
						{
						setState(3035);
						alias();
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				setState(3040);
				prepass_query();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsContext columns() throws RecognitionException {
		ColumnsContext _localctx = new ColumnsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_columns);
		int _la;
		try {
			int _alt;
			setState(3063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3043);
				match(OPEN_PAREN);
				setState(3045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
					{
					setState(3044);
					columnReference();
					}
				}

				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3047);
					match(COMMA);
					setState(3048);
					columnReference();
					}
					}
					setState(3053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3054);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3055);
				columnReference();
				setState(3060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,330,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3056);
						match(COMMA);
						setState(3057);
						columnReference();
						}
						} 
					}
					setState(3062);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,330,_ctx);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Batch_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBatch_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBatch_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBatch_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Batch_queryContext batch_query() throws RecognitionException {
		Batch_queryContext _localctx = new Batch_queryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_batch_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			match(K_SELECT);
			setState(3066);
			elements();
			setState(3067);
			match(COMMA);
			setState(3068);
			functionCall();
			setState(3069);
			match(K_OVER);
			setState(3070);
			match(OPEN_PAREN);
			setState(3071);
			match(K_PARTITION);
			setState(3072);
			match(K_BATCH);
			setState(3073);
			match(K_BY);
			setState(3074);
			elements();
			setState(3075);
			match(CLOSE_PAREN);
			setState(3078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3076);
				match(K_AS);
				setState(3077);
				columns();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prepass_queryContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public List<ElementsContext> elements() {
			return getRuleContexts(ElementsContext.class);
		}
		public ElementsContext elements(int i) {
			return getRuleContext(ElementsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Prepass_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepass_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPrepass_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPrepass_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPrepass_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prepass_queryContext prepass_query() throws RecognitionException {
		Prepass_queryContext _localctx = new Prepass_queryContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_prepass_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			match(K_SELECT);
			setState(3081);
			elements();
			setState(3082);
			match(COMMA);
			setState(3083);
			functionCall();
			setState(3084);
			match(K_OVER);
			setState(3085);
			match(OPEN_PAREN);
			setState(3086);
			match(K_PARTITION);
			setState(3087);
			match(K_BATCH);
			setState(3088);
			match(K_BY);
			setState(3089);
			elements();
			setState(3090);
			match(CLOSE_PAREN);
			setState(3093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(3091);
				match(K_AS);
				setState(3092);
				columns();
				}
			}

			setState(3095);
			match(K_FROM);
			setState(3096);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public List<Resource_pool_paramContext> resource_pool_param() {
			return getRuleContexts(Resource_pool_paramContext.class);
		}
		public Resource_pool_paramContext resource_pool_param(int i) {
			return getRuleContext(Resource_pool_paramContext.class,i);
		}
		public Create_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_pool_statementContext create_resource_pool_statement() throws RecognitionException {
		Create_resource_pool_statementContext _localctx = new Create_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_create_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3098);
			match(K_CREATE);
			setState(3099);
			match(K_RESOURCE);
			setState(3100);
			match(K_POOL);
			setState(3101);
			resourcePool();
			setState(3103); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3102);
				resource_pool_param();
				}
				}
				setState(3105); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (K_CASCADE - 193)) | (1L << (K_CPUAFFINITYMODE - 193)) | (1L << (K_CPUAFFINITYSET - 193)))) != 0) || _la==K_EXECUTIONPARALLELISM || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & ((1L << (K_MAXCONCURRENCY - 371)) | (1L << (K_MAXMEMORYSIZE - 371)) | (1L << (K_MAXQUERYMEMORYSIZE - 371)) | (1L << (K_MEMORYSIZE - 371)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (K_PLANNEDCONCURRENCY - 448)) | (1L << (K_PRIORITY - 448)) | (1L << (K_QUEUETIMEOUT - 448)) | (1L << (K_RUNTIMECAP - 448)) | (1L << (K_RUNTIMEPRIORITY - 448)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 448)))) != 0) || _la==K_SINGLEINITIATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_role_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public RoleContext role() {
			return getRuleContext(RoleContext.class,0);
		}
		public Create_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_role_statementContext create_role_statement() throws RecognitionException {
		Create_role_statementContext _localctx = new Create_role_statementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_create_role_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3107);
			match(K_CREATE);
			setState(3108);
			match(K_ROLE);
			setState(3109);
			role();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public TerminalNode K_ROUTE() { return getToken(VSqlParser.K_ROUTE, 0); }
		public AddressContext address() {
			return getRuleContext(AddressContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Create_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routing_rule_statementContext create_routing_rule_statement() throws RecognitionException {
		Create_routing_rule_statementContext _localctx = new Create_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_create_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			match(K_CREATE);
			setState(3112);
			match(K_ROUTING);
			setState(3113);
			match(K_RULE);
			setState(3114);
			routingRule();
			setState(3115);
			match(K_ROUTE);
			setState(3116);
			address();
			setState(3117);
			match(K_TO);
			setState(3118);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_AUTHORIZATION() { return getToken(VSqlParser.K_AUTHORIZATION, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_create_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3120);
			match(K_CREATE);
			setState(3121);
			match(K_SCHEMA);
			setState(3123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(3122);
				ifNotExistsClause();
				}
				break;
			}
			setState(3125);
			schemaReference();
			setState(3128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTHORIZATION) {
				{
				setState(3126);
				match(K_AUTHORIZATION);
				setState(3127);
				string();
				}
			}

			setState(3132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT) {
				{
				setState(3130);
				match(K_DEFAULT);
				setState(3131);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public SequenceReferenceContext sequenceReference() {
			return getRuleContext(SequenceReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(VSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(VSqlParser.DECIMAL, i);
		}
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public List<TerminalNode> K_NO() { return getTokens(VSqlParser.K_NO); }
		public TerminalNode K_NO(int i) {
			return getToken(VSqlParser.K_NO, i);
		}
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			match(K_CREATE);
			setState(3135);
			match(K_SEQUENCE);
			{
			setState(3137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3136);
				ifNotExistsClause();
				}
				break;
			}
			setState(3139);
			sequenceReference();
			setState(3143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INCREMENT) {
				{
				setState(3140);
				match(K_INCREMENT);
				setState(3141);
				match(K_BY);
				setState(3142);
				match(DECIMAL);
				}
			}

			setState(3149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				{
				setState(3145);
				match(K_MINVALUE);
				setState(3146);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3147);
				match(K_NO);
				setState(3148);
				match(K_MINVALUE);
				}
				}
				break;
			}
			setState(3155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				{
				setState(3151);
				match(K_MAXVALUE);
				setState(3152);
				match(DECIMAL);
				}
				}
				break;
			case 2:
				{
				{
				setState(3153);
				match(K_NO);
				setState(3154);
				match(K_MAXVALUE);
				}
				}
				break;
			}
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_RESTART) {
				{
				setState(3157);
				match(K_RESTART);
				setState(3158);
				match(K_WITH);
				setState(3159);
				match(DECIMAL);
				}
			}

			setState(3172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CACHE:
				{
				{
				setState(3162);
				match(K_CACHE);
				setState(3163);
				match(DECIMAL);
				}
				}
				break;
			case K_NO:
				{
				{
				setState(3164);
				match(K_NO);
				setState(3165);
				match(K_CACHE);
				}
				setState(3170);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_CYCLE:
					{
					setState(3167);
					match(K_CYCLE);
					}
					break;
				case K_NO:
					{
					setState(3168);
					match(K_NO);
					setState(3169);
					match(K_CYCLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case EOF:
			case CLOSE_PAREN:
			case SEMI:
				break;
			default:
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_subnet_statementContext create_subnet_statement() throws RecognitionException {
		Create_subnet_statementContext _localctx = new Create_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_create_subnet_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3174);
			match(K_CREATE);
			setState(3175);
			match(K_SUBNET);
			setState(3176);
			subnet();
			setState(3177);
			match(K_WITH);
			setState(3178);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_statementContext extends ParserRuleContext {
		public Create_table_default_statementContext create_table_default_statement() {
			return getRuleContext(Create_table_default_statementContext.class,0);
		}
		public Create_table_as_statementContext create_table_as_statement() {
			return getRuleContext(Create_table_as_statementContext.class,0);
		}
		public Create_table_like_statementContext create_table_like_statement() {
			return getRuleContext(Create_table_like_statementContext.class,0);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_create_table_statement);
		try {
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3180);
				create_table_default_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3181);
				create_table_as_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3182);
				create_table_like_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_privileges_clauseContext extends ParserRuleContext {
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_INCLUDE() { return getToken(VSqlParser.K_INCLUDE, 0); }
		public TerminalNode K_EXCLUDE() { return getToken(VSqlParser.K_EXCLUDE, 0); }
		public TerminalNode K_MATERIALIZE() { return getToken(VSqlParser.K_MATERIALIZE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public Schema_privileges_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privileges_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privileges_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privileges_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privileges_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privileges_clauseContext schema_privileges_clause() throws RecognitionException {
		Schema_privileges_clauseContext _localctx = new Schema_privileges_clauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_schema_privileges_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3185);
			_la = _input.LA(1);
			if ( !(_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SCHEMA) {
				{
				setState(3186);
				match(K_SCHEMA);
				}
			}

			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(3189);
				match(K_NOT);
				}
			}

			setState(3192);
			match(K_PRIVILEGES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_as_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public Create_table_as_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_as_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_as_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_as_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_statementContext create_table_as_statement() throws RecognitionException {
		Create_table_as_statementContext _localctx = new Create_table_as_statementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_create_table_as_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			match(K_CREATE);
			setState(3195);
			match(K_TABLE);
			setState(3197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3196);
				ifNotExistsClause();
				}
				break;
			}
			setState(3199);
			tableReference();
			setState(3201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3200);
				column_name_list();
				}
			}

			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3203);
				schema_privileges_clause();
				}
			}

			setState(3206);
			match(K_AS);
			setState(3208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3207);
				hints();
				}
			}

			setState(3210);
			select_statement();
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3211);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Column_name_list_itemContext> column_name_list_item() {
			return getRuleContexts(Column_name_list_itemContext.class);
		}
		public Column_name_list_itemContext column_name_list_item(int i) {
			return getRuleContext(Column_name_list_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(OPEN_PAREN);
			setState(3223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(3215);
				column_name_list_item();
				setState(3220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3216);
					match(COMMA);
					setState(3217);
					column_name_list_item();
					}
					}
					setState(3222);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3225);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_itemContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Grouped_clauseContext grouped_clause() {
			return getRuleContext(Grouped_clauseContext.class,0);
		}
		public Column_name_list_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_name_list_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_name_list_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_name_list_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_itemContext column_name_list_item() throws RecognitionException {
		Column_name_list_itemContext _localctx = new Column_name_list_itemContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_column_name_list_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			column();
			setState(3229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3228);
				encoding_clause();
				}
			}

			setState(3232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3231);
				access_rank();
				}
			}

			setState(3235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUPED) {
				{
				setState(3234);
				grouped_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Access_rankContext extends ParserRuleContext {
		public TerminalNode K_ACCESSRANK() { return getToken(VSqlParser.K_ACCESSRANK, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Access_rankContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_access_rank; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAccess_rank(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAccess_rank(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAccess_rank(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Access_rankContext access_rank() throws RecognitionException {
		Access_rankContext _localctx = new Access_rankContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_access_rank);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			match(K_ACCESSRANK);
			setState(3238);
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouped_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUPED() { return getToken(VSqlParser.K_GROUPED, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Grouped_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouped_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrouped_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrouped_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrouped_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouped_clauseContext grouped_clause() throws RecognitionException {
		Grouped_clauseContext _localctx = new Grouped_clauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_grouped_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3240);
			match(K_GROUPED);
			setState(3241);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_like_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_INCLUDING() { return getToken(VSqlParser.K_INCLUDING, 0); }
		public TerminalNode K_EXCLUDING() { return getToken(VSqlParser.K_EXCLUDING, 0); }
		public Create_table_like_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_like_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_like_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_like_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_like_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_like_statementContext create_table_like_statement() throws RecognitionException {
		Create_table_like_statementContext _localctx = new Create_table_like_statementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_create_table_like_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3243);
			match(K_CREATE);
			setState(3244);
			match(K_TABLE);
			setState(3246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3245);
				ifNotExistsClause();
				}
				break;
			}
			setState(3248);
			tableReference();
			setState(3249);
			match(K_LIKE);
			setState(3250);
			tableReference();
			setState(3253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_EXCLUDING || _la==K_INCLUDING) {
				{
				setState(3251);
				_la = _input.LA(1);
				if ( !(_la==K_EXCLUDING || _la==K_INCLUDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3252);
				match(K_PROJECTIONS);
				}
			}

			setState(3256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3255);
				load_method();
				}
			}

			setState(3259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1+1:
				{
				setState(3258);
				schema_privileges_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_default_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<Table_constraintContext> table_constraint() {
			return getRuleContexts(Table_constraintContext.class);
		}
		public Table_constraintContext table_constraint(int i) {
			return getRuleContext(Table_constraintContext.class,i);
		}
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Partition_clauseContext partition_clause() {
			return getRuleContext(Partition_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public Create_table_default_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_default_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_table_default_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_table_default_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_table_default_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_default_statementContext create_table_default_statement() throws RecognitionException {
		Create_table_default_statementContext _localctx = new Create_table_default_statementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_create_table_default_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3261);
			match(K_CREATE);
			setState(3262);
			match(K_TABLE);
			setState(3264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3263);
				ifNotExistsClause();
				}
				break;
			}
			setState(3266);
			tableReference();
			setState(3267);
			column_definition_list();
			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3268);
				match(COMMA);
				setState(3269);
				table_constraint();
				setState(3274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3270);
					match(COMMA);
					setState(3271);
					table_constraint();
					}
					}
					setState(3276);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3279);
				load_method();
				}
			}

			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3282);
				orderby_clause();
				}
			}

			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3285);
				segmentation_clause();
				}
			}

			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3288);
				ksafe_clause();
				}
			}

			setState(3292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(3291);
				partition_clause();
				}
			}

			setState(3295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3294);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FOREIGN() { return getToken(VSqlParser.K_FOREIGN, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(K_CONSTRAINT);
			setState(3298);
			constraint();
			setState(3325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_PRIMARY:
				{
				{
				setState(3299);
				match(K_PRIMARY);
				setState(3300);
				match(K_KEY);
				setState(3301);
				columns();
				setState(3303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3302);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case K_FOREIGN:
				{
				{
				{
				setState(3305);
				match(K_FOREIGN);
				setState(3306);
				match(K_KEY);
				setState(3307);
				columns();
				setState(3308);
				match(K_REFERENCES);
				setState(3309);
				tableReference();
				setState(3311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3310);
					columns();
					}
					break;
				}
				}
				}
				}
				break;
			case K_UNIQUE:
				{
				{
				setState(3313);
				match(K_UNIQUE);
				setState(3314);
				columns();
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3315);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case K_CHECK:
				{
				{
				setState(3318);
				match(K_CHECK);
				setState(3319);
				match(OPEN_PAREN);
				setState(3320);
				expression();
				setState(3321);
				match(CLOSE_PAREN);
				setState(3323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3322);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definition_listContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Column_definition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definition_listContext column_definition_list() throws RecognitionException {
		Column_definition_listContext _localctx = new Column_definition_listContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_column_definition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3327);
			match(OPEN_PAREN);
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(3328);
				column_definition();
				setState(3333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3329);
					match(COMMA);
					setState(3330);
					column_definition();
					}
					}
					setState(3335);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3338);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			column();
			setState(3342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3341);
				dataTypes();
				}
				break;
			}
			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_CHECK) | (1L << K_CONSTRAINT) | (1L << K_DEFAULT))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (K_NOT - 85)) | (1L << (K_NULL - 85)) | (1L << (K_PRIMARY - 85)) | (1L << (K_REFERENCES - 85)) | (1L << (K_UNIQUE - 85)))) != 0) || _la==K_AUTO_INCREMENT || _la==K_IDENTITY || _la==K_SET) {
				{
				{
				setState(3344);
				column_constraint();
				}
				}
				setState(3349);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3350);
				encoding_clause();
				}
			}

			setState(3354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3353);
				access_rank();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public TerminalNode K_AUTO_INCREMENT() { return getToken(VSqlParser.K_AUTO_INCREMENT, 0); }
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CONSTRAINT() { return getToken(VSqlParser.K_CONSTRAINT, 0); }
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public TerminalNode K_CHECK() { return getToken(VSqlParser.K_CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public EnabledOrDisabledContext enabledOrDisabled() {
			return getRuleContext(EnabledOrDisabledContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public TerminalNode K_PRIMARY() { return getToken(VSqlParser.K_PRIMARY, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_UNIQUE() { return getToken(VSqlParser.K_UNIQUE, 0); }
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_column_constraint);
		int _la;
		try {
			setState(3408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3356);
				_la = _input.LA(1);
				if ( !(_la==K_AUTO_INCREMENT || _la==K_IDENTITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAREN) {
					{
					setState(3357);
					match(OPEN_PAREN);
					setState(3358);
					value();
					setState(3363);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3359);
						match(COMMA);
						setState(3360);
						value();
						}
						}
						setState(3365);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3366);
					match(CLOSE_PAREN);
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3370);
				match(K_CONSTRAINT);
				setState(3371);
				constraint();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3372);
				match(K_CHECK);
				setState(3373);
				match(OPEN_PAREN);
				setState(3374);
				expression();
				setState(3375);
				match(CLOSE_PAREN);
				setState(3377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3376);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					{
					setState(3379);
					match(K_DEFAULT);
					setState(3380);
					match(K_USING);
					setState(3381);
					expression();
					}
					}
					break;
				case 2:
					{
					{
					setState(3382);
					match(K_SET);
					setState(3383);
					match(K_USING);
					setState(3384);
					expression();
					}
					}
					break;
				case 3:
					{
					{
					setState(3385);
					match(K_DEFAULT);
					setState(3386);
					match(K_USING);
					setState(3387);
					expression();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(3390);
				nullOrNotNull();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_PRIMARY:
					{
					{
					setState(3391);
					match(K_PRIMARY);
					setState(3392);
					match(K_KEY);
					setState(3394);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_DISABLED || _la==K_ENABLED) {
						{
						setState(3393);
						enabledOrDisabled();
						}
					}

					}
					}
					break;
				case K_REFERENCES:
					{
					{
					setState(3396);
					match(K_REFERENCES);
					setState(3397);
					tableReference();
					setState(3398);
					columns();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(3402);
				match(K_UNIQUE);
				setState(3404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DISABLED || _la==K_ENABLED) {
					{
					setState(3403);
					enabledOrDisabled();
					}
				}

				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(3406);
				match(K_DEFAULT);
				setState(3407);
				expression();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Load_methodContext extends ParserRuleContext {
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_TRICKLE() { return getToken(VSqlParser.K_TRICKLE, 0); }
		public Load_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_load_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLoad_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLoad_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLoad_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Load_methodContext load_method() throws RecognitionException {
		Load_methodContext _localctx = new Load_methodContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_load_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			_la = _input.LA(1);
			if ( !(_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segmentation_clauseContext extends ParserRuleContext {
		public TerminalNode K_UNSEGMENTED() { return getToken(VSqlParser.K_UNSEGMENTED, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public List<NodeContext> node() {
			return getRuleContexts(NodeContext.class);
		}
		public NodeContext node(int i) {
			return getRuleContext(NodeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public TerminalNode K_SEGMENTED() { return getToken(VSqlParser.K_SEGMENTED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Segmentation_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segmentation_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSegmentation_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSegmentation_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSegmentation_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Segmentation_clauseContext segmentation_clause() throws RecognitionException {
		Segmentation_clauseContext _localctx = new Segmentation_clauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_segmentation_clause);
		int _la;
		try {
			setState(3438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_UNSEGMENTED:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3412);
				match(K_UNSEGMENTED);
				setState(3417);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_NODE:
					{
					{
					setState(3413);
					match(K_NODE);
					setState(3414);
					node();
					}
					}
					break;
				case K_ALL:
					{
					{
					setState(3415);
					match(K_ALL);
					setState(3416);
					match(K_NODES);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case K_SEGMENTED:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3419);
				match(K_SEGMENTED);
				setState(3420);
				match(K_BY);
				setState(3421);
				expression();
				setState(3436);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(3422);
					match(K_ALL);
					setState(3423);
					match(K_NODES);
					setState(3425);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==K_OFFSET) {
						{
						setState(3424);
						offset_clause();
						}
					}

					}
					}
					break;
				case K_NODES:
					{
					{
					setState(3427);
					match(K_NODES);
					setState(3428);
					node();
					setState(3433);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3429);
						match(COMMA);
						setState(3430);
						node();
						}
						}
						setState(3435);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_statementContext extends ParserRuleContext {
		public Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() {
			return getRuleContext(Create_temporary_table_with_def_statementContext.class,0);
		}
		public Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() {
			return getRuleContext(Create_temporary_table_from_table_statementContext.class,0);
		}
		public Create_temporary_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_statementContext create_temporary_table_statement() throws RecognitionException {
		Create_temporary_table_statementContext _localctx = new Create_temporary_table_statementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_create_temporary_table_statement);
		try {
			setState(3442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3440);
				create_temporary_table_with_def_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3441);
				create_temporary_table_from_table_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_with_def_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Column_definition_listContext column_definition_list() {
			return getRuleContext(Column_definition_listContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Segmentation_clauseContext segmentation_clause() {
			return getRuleContext(Segmentation_clauseContext.class,0);
		}
		public Ksafe_clauseContext ksafe_clause() {
			return getRuleContext(Ksafe_clauseContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_with_def_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_with_def_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_with_def_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_with_def_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_with_def_statementContext create_temporary_table_with_def_statement() throws RecognitionException {
		Create_temporary_table_with_def_statementContext _localctx = new Create_temporary_table_with_def_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_create_temporary_table_with_def_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3444);
			match(K_CREATE);
			setState(3446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GLOBAL || _la==K_LOCAL) {
				{
				setState(3445);
				_la = _input.LA(1);
				if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3448);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3449);
			match(K_TABLE);
			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3450);
				ifNotExistsClause();
				}
				break;
			}
			setState(3453);
			tableReference();
			setState(3454);
			column_definition_list();
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CONSTRAINT) {
				{
				setState(3455);
				table_constraint();
				}
			}

			setState(3462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3458);
				match(K_ON);
				setState(3459);
				match(K_COMMIT);
				setState(3460);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3461);
				match(K_ROWS);
				}
			}

			setState(3465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3464);
				load_method();
				}
			}

			setState(3469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NO) {
				{
				setState(3467);
				match(K_NO);
				setState(3468);
				match(K_PROJECTION);
				}
			}

			setState(3472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(3471);
				orderby_clause();
				}
			}

			setState(3475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_SEGMENTED || _la==K_UNSEGMENTED) {
				{
				setState(3474);
				segmentation_clause();
				}
			}

			setState(3478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_KSAFE) {
				{
				setState(3477);
				ksafe_clause();
				}
			}

			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3480);
				schema_privileges_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_temporary_table_from_table_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Load_methodContext load_method() {
			return getRuleContext(Load_methodContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public EncodedBy_clauseContext encodedBy_clause() {
			return getRuleContext(EncodedBy_clauseContext.class,0);
		}
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public Create_temporary_table_from_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_temporary_table_from_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_temporary_table_from_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_temporary_table_from_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_temporary_table_from_table_statementContext create_temporary_table_from_table_statement() throws RecognitionException {
		Create_temporary_table_from_table_statementContext _localctx = new Create_temporary_table_from_table_statementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_create_temporary_table_from_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			match(K_CREATE);
			setState(3484);
			_la = _input.LA(1);
			if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3485);
			match(K_TABLE);
			setState(3487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3486);
				ifNotExistsClause();
				}
				break;
			}
			setState(3489);
			tableReference();
			setState(3491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAREN) {
				{
				setState(3490);
				column_name_list();
				}
			}

			setState(3497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ON) {
				{
				setState(3493);
				match(K_ON);
				setState(3494);
				match(K_COMMIT);
				setState(3495);
				_la = _input.LA(1);
				if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3496);
				match(K_ROWS);
				}
			}

			setState(3500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AUTO || _la==K_DIRECT || _la==K_TRICKLE) {
				{
				setState(3499);
				load_method();
				}
			}

			setState(3502);
			match(K_AS);
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3503);
				hints();
				}
			}

			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AT) {
				{
				setState(3506);
				at_epoch_clause();
				}
			}

			setState(3509);
			select_query();
			setState(3511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODED) {
				{
				setState(3510);
				encodedBy_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodedBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODED() { return getToken(VSqlParser.K_ENCODED, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<Column_refContext> column_ref() {
			return getRuleContexts(Column_refContext.class);
		}
		public Column_refContext column_ref(int i) {
			return getRuleContext(Column_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public EncodedBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encodedBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncodedBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncodedBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncodedBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodedBy_clauseContext encodedBy_clause() throws RecognitionException {
		EncodedBy_clauseContext _localctx = new EncodedBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_encodedBy_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3513);
			match(K_ENCODED);
			setState(3514);
			match(K_BY);
			setState(3515);
			column_ref();
			setState(3520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3516);
				match(COMMA);
				setState(3517);
				column_ref();
				}
				}
				setState(3522);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_refContext extends ParserRuleContext {
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public Access_rankContext access_rank() {
			return getRuleContext(Access_rankContext.class,0);
		}
		public Encoding_clauseContext encoding_clause() {
			return getRuleContext(Encoding_clauseContext.class,0);
		}
		public Column_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_refContext column_ref() throws RecognitionException {
		Column_refContext _localctx = new Column_refContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_column_ref);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3523);
			columnReference();
			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACCESSRANK) {
				{
				setState(3524);
				access_rank();
				}
			}

			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ENCODING) {
				{
				setState(3527);
				encoding_clause();
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<DataTypesContext> dataTypes() {
			return getRuleContexts(DataTypesContext.class);
		}
		public DataTypesContext dataTypes(int i) {
			return getRuleContext(DataTypesContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_STEMMER() { return getToken(VSqlParser.K_STEMMER, 0); }
		public TerminalNode K_TOKENIZER() { return getToken(VSqlParser.K_TOKENIZER, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Create_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_text_index_statementContext create_text_index_statement() throws RecognitionException {
		Create_text_index_statementContext _localctx = new Create_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_create_text_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3530);
			match(K_CREATE);
			setState(3531);
			match(K_TEXT);
			setState(3532);
			match(K_INDEX);
			setState(3533);
			txtIndexReference();
			setState(3534);
			match(K_ON);
			setState(3535);
			tableReference();
			setState(3536);
			match(OPEN_PAREN);
			setState(3537);
			id();
			setState(3538);
			match(COMMA);
			setState(3539);
			dataTypes();
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3540);
				match(COMMA);
				setState(3541);
				columns();
				}
			}

			setState(3544);
			match(CLOSE_PAREN);
			setState(3554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_STEMMER) {
				{
				setState(3545);
				match(K_STEMMER);
				setState(3552);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
				case K_ABORT:
				case K_ABSOLUTE:
				case K_ACCESS:
				case K_ACCESSRANK:
				case K_ACCOUNT:
				case K_ACTION:
				case K_ACTIVATE:
				case K_ACTIVEPARTITIONCOUNT:
				case K_ADD:
				case K_ADMIN:
				case K_AFTER:
				case K_AGGREGATE:
				case K_ALSO:
				case K_ALTER:
				case K_ANALYSE:
				case K_ANALYTIC:
				case K_ANALYZE:
				case K_ANNOTATED:
				case K_ANTI:
				case K_ASSERTION:
				case K_ASSIGNMENT:
				case K_AT:
				case K_AUTHENTICATION:
				case K_AUTO:
				case K_AUTO_INCREMENT:
				case K_AVAILABLE:
				case K_BACKWARD:
				case K_BASENAME:
				case K_BATCH:
				case K_BEFORE:
				case K_BEGIN:
				case K_BEST:
				case K_BLOCK:
				case K_BLOCK_DICT:
				case K_BLOCKDICT_COMP:
				case K_BROADCAST:
				case K_BY:
				case K_BYTEA:
				case K_BYTES:
				case K_BZIP:
				case K_BZIP_COMP:
				case K_CACHE:
				case K_CALLED:
				case K_CASCADE:
				case K_CATALOGPATH:
				case K_CHAIN:
				case K_CHARACTER:
				case K_CHARACTERISTICS:
				case K_CHARACTERS:
				case K_CHECKPOINT:
				case K_CLASS:
				case K_CLEAR:
				case K_CLOSE:
				case K_CLUSTER:
				case K_COLSIZES:
				case K_COLUMNS_COUNT:
				case K_COMMENT:
				case K_COMMIT:
				case K_COMMITTED:
				case K_COMMONDELTA_COMP:
				case K_COMMUNAL:
				case K_COMPLEX:
				case K_CONNECT:
				case K_CONSTRAINTS:
				case K_CONTROL:
				case K_COPY:
				case K_CPUAFFINITYMODE:
				case K_CPUAFFINITYSET:
				case K_CREATEDB:
				case K_CREATEUSER:
				case K_CSV:
				case K_CUBE:
				case K_CURRENT:
				case K_CURSOR:
				case K_CUSTOM:
				case K_CUSTOM_PARTITIONS:
				case K_CYCLE:
				case K_DATA:
				case K_DATABASE:
				case K_DATAPATH:
				case K_DAY:
				case K_DEACTIVATE:
				case K_DEALLOCATE:
				case K_DEC:
				case K_DECLARE:
				case K_DEFAULTS:
				case K_DEFERRED:
				case K_DEFINE:
				case K_DEFINER:
				case K_DELETE:
				case K_DELIMITER:
				case K_DELIMITERS:
				case K_DELTARANGE_COMP:
				case K_DELTARANGE_COMP_SP:
				case K_DELTAVAL:
				case K_DEPENDS:
				case K_DETERMINES:
				case K_DIRECT:
				case K_DIRECTCOLS:
				case K_DIRECTED:
				case K_DIRECTGROUPED:
				case K_DIRECTPROJ:
				case K_DISABLE:
				case K_DISABLED:
				case K_DISCONNECT:
				case K_DISTVALINDEX:
				case K_DO:
				case K_DOMAIN:
				case K_DOUBLE:
				case K_DROP:
				case K_DURABLE:
				case K_EACH:
				case K_ENABLE:
				case K_ENABLED:
				case K_ENCLOSED:
				case K_ENCODING:
				case K_ENCRYPTED:
				case K_ENFORCELENGTH:
				case K_EPHEMERAL:
				case K_EPOCH:
				case K_ERROR:
				case K_ESCAPE:
				case K_EVENT:
				case K_EVENTS:
				case K_EXCEPTION:
				case K_EXCEPTIONS:
				case K_EXCLUDE:
				case K_EXCLUDING:
				case K_EXCLUSIVE:
				case K_EXECUTE:
				case K_EXECUTIONPARALLELISM:
				case K_EXPIRE:
				case K_EXPLAIN:
				case K_EXPORT:
				case K_EXTERNAL:
				case K_FAILED_LOGIN_ATTEMPTS:
				case K_FAULT:
				case K_FENCED:
				case K_FETCH:
				case K_FILESYSTEM:
				case K_FILLER:
				case K_FILTER:
				case K_FIRST:
				case K_FIXEDWIDTH:
				case K_FLEX:
				case K_FLEXIBLE:
				case K_FOLLOWING:
				case K_FORCE:
				case K_FORMAT:
				case K_FORWARD:
				case K_FREEZE:
				case K_FUNCTION:
				case K_FUNCTIONS:
				case K_GCDDELTA:
				case K_GET:
				case K_GLOBAL:
				case K_GRACEPERIOD:
				case K_GROUPED:
				case K_GROUPING:
				case K_GZIP:
				case K_GZIP_COMP:
				case K_HANDLER:
				case K_HCATALOG:
				case K_HCATALOG_CONNECTION_TIMEOUT:
				case K_HCATALOG_DB:
				case K_HCATALOG_SCHEMA:
				case K_HCATALOG_SLOW_TRANSFER_LIMIT:
				case K_HCATALOG_SLOW_TRANSFER_TIME:
				case K_HCATALOG_USER:
				case K_HIGH:
				case K_HIVE_PARTITION_COLS:
				case K_HIVESERVER2_HOSTNAME:
				case K_HOLD:
				case K_HOST:
				case K_HOSTNAME:
				case K_HOUR:
				case K_HOURS:
				case K_IDENTIFIED:
				case K_IDENTITY:
				case K_IDLESESSIONTIMEOUT:
				case K_IF:
				case K_IGNORE:
				case K_IMMEDIATE:
				case K_IMMUTABLE:
				case K_IMPLICIT:
				case K_INCLUDE:
				case K_INCLUDING:
				case K_INCREMENT:
				case K_INDEX:
				case K_INHERITS:
				case K_INPUT:
				case K_INSENSITIVE:
				case K_INSERT:
				case K_INSTEAD:
				case K_INTERFACE:
				case K_INTERPOLATE:
				case K_INVOKER:
				case K_ISOLATION:
				case K_JSON:
				case K_KEY:
				case K_LABEL:
				case K_LANCOMPILER:
				case K_LANGUAGE:
				case K_LARGE:
				case K_LAST:
				case K_LATEST:
				case K_LESS:
				case K_LEVEL:
				case K_LIBRARY:
				case K_LISTEN:
				case K_LOAD:
				case K_LOCAL:
				case K_LOCATION:
				case K_LOCK:
				case K_LONG:
				case K_LOW:
				case K_LZO:
				case K_MANAGED:
				case K_MASK:
				case K_MATCHED:
				case K_MATERIALIZE:
				case K_MAXCONCURRENCY:
				case K_MAXCONCURRENCYGRACE:
				case K_MAXCONNECTIONS:
				case K_MAXMEMORYSIZE:
				case K_MAXPAYLOAD:
				case K_MAXQUERYMEMORYSIZE:
				case K_MAXVALUE:
				case K_MEDIUM:
				case K_MEMORYCAP:
				case K_MEMORYSIZE:
				case K_MERGE:
				case K_MERGEOUT:
				case K_METHOD:
				case K_MICROSECONDS:
				case K_MILLISECONDS:
				case K_MINUTE:
				case K_MINUTES:
				case K_MINVALUE:
				case K_MODE:
				case K_MODEL:
				case K_MONTH:
				case K_MOVE:
				case K_MOVEOUT:
				case K_NAME:
				case K_NATIONAL:
				case K_NATIVE:
				case K_NETWORK:
				case K_NEXT:
				case K_NO:
				case K_NOCREATEDB:
				case K_NOCREATEUSER:
				case K_NODE:
				case K_NODES:
				case K_NOTHING:
				case K_NOTIFIER:
				case K_NOTIFY:
				case K_NOWAIT:
				case K_NULLAWARE:
				case K_NULLCOLS:
				case K_NULLS:
				case K_OBJECT:
				case K_OCTETS:
				case K_OF:
				case K_OFF:
				case K_OIDS:
				case K_OPERATOR:
				case K_OPT:
				case K_OPTIMIZER:
				case K_OPTION:
				case K_OPTVER:
				case K_ORC:
				case K_OTHERS:
				case K_OWNER:
				case K_PARAMETER:
				case K_PARAMETERS:
				case K_PARQUET:
				case K_PARSER:
				case K_PARTIAL:
				case K_PARTITION:
				case K_PARTITIONING:
				case K_PASSWORD:
				case K_PASSWORD_GRACE_TIME:
				case K_PASSWORD_LIFE_TIME:
				case K_PASSWORD_LOCK_TIME:
				case K_PASSWORD_MAX_LENGTH:
				case K_PASSWORD_MIN_DIGITS:
				case K_PASSWORD_MIN_LENGTH:
				case K_PASSWORD_MIN_LETTERS:
				case K_PASSWORD_MIN_LOWERCASE_LETTERS:
				case K_PASSWORD_MIN_SYMBOLS:
				case K_PASSWORD_MIN_UPPERCASE_LETTERS:
				case K_PASSWORD_REUSE_MAX:
				case K_PASSWORD_REUSE_TIME:
				case K_PATTERN:
				case K_PERCENT:
				case K_PERMANENT:
				case K_PLACING:
				case K_PLANNEDCONCURRENCY:
				case K_POLICY:
				case K_POOL:
				case K_PORT:
				case K_PRECEDING:
				case K_PREPARE:
				case K_PREPASS:
				case K_PRESERVE:
				case K_PREVIOUS:
				case K_PRIOR:
				case K_PRIORITY:
				case K_PRIVILEGES:
				case K_PROCEDURAL:
				case K_PROCEDURE:
				case K_PROFILE:
				case K_PROJECTION:
				case K_PROJECTIONS:
				case K_PSDATE:
				case K_QUERY:
				case K_QUEUETIMEOUT:
				case K_QUOTE:
				case K_RANGE:
				case K_RAW:
				case K_READ:
				case K_RECHECK:
				case K_RECORD:
				case K_RECOVER:
				case K_RECURSIVE:
				case K_REFRESH:
				case K_REINDEX:
				case K_REJECTED:
				case K_REJECTMAX:
				case K_RELATIVE:
				case K_RELEASE:
				case K_REMOVE:
				case K_RENAME:
				case K_REORGANIZE:
				case K_REPEATABLE:
				case K_REPLACE:
				case K_RESET:
				case K_RESOURCE:
				case K_RESTART:
				case K_RESTRICT:
				case K_RESULTS:
				case K_RETURN:
				case K_RETURNREJECTED:
				case K_REVOKE:
				case K_RLE:
				case K_ROLE:
				case K_ROLES:
				case K_ROLLBACK:
				case K_ROLLUP:
				case K_ROWS:
				case K_RULE:
				case K_RUNTIMECAP:
				case K_RUNTIMEPRIORITY:
				case K_RUNTIMEPRIORITYTHRESHOLD:
				case K_SAVE:
				case K_SAVEPOINT:
				case K_SCROLL:
				case K_SEARCH_PATH:
				case K_SECOND:
				case K_SECONDS:
				case K_SECURITY:
				case K_SECURITY_ALGORITHM:
				case K_SEGMENTED:
				case K_SEMI:
				case K_SEMIALL:
				case K_SEQUENCE:
				case K_SEQUENCES:
				case K_SERIALIZABLE:
				case K_SESSION:
				case K_SET:
				case K_SETOF:
				case K_SETS:
				case K_SHARE:
				case K_SHARED:
				case K_SHOW:
				case K_SIMPLE:
				case K_SINGLEINITIATOR:
				case K_SITE:
				case K_SITES:
				case K_SKIP:
				case K_SOURCE:
				case K_SPLIT:
				case K_SSL_CONFIG:
				case K_STABLE:
				case K_STANDBY:
				case K_START:
				case K_STATEMENT:
				case K_STATISTICS:
				case K_STDIN:
				case K_STDOUT:
				case K_STEMMER:
				case K_STORAGE:
				case K_STREAM:
				case K_STRENGTH:
				case K_STRICT:
				case K_SUBNET:
				case K_SYSID:
				case K_SYSTEM:
				case K_TABLES:
				case K_TABLESAMPLE:
				case K_TABLESPACE:
				case K_TEMP:
				case K_TEMPLATE:
				case K_TEMPORARY:
				case K_TEMPSPACECAP:
				case K_TERMINATOR:
				case K_THAN:
				case K_TIES:
				case K_TLS:
				case K_TOAST:
				case K_TOKENIZER:
				case K_TOLERANCE:
				case K_TRANSACTION:
				case K_TRANSFORM:
				case K_TRICKLE:
				case K_TRIGGER:
				case K_TRUNCATE:
				case K_TRUSTED:
				case K_TUNING:
				case K_TYPE:
				case K_UDPARAMETER:
				case K_UNCOMMITTED:
				case K_UNCOMPRESSED:
				case K_UNI:
				case K_UNINDEXED:
				case K_UNKNOWN:
				case K_UNLIMITED:
				case K_UNLISTEN:
				case K_UNLOCK:
				case K_UNPACKER:
				case K_UNSEGMENTED:
				case K_UPDATE:
				case K_USAGE:
				case K_VACUUM:
				case K_VALIDATE:
				case K_VALIDATOR:
				case K_VALINDEX:
				case K_VALUE:
				case K_VALUES:
				case K_VARYING:
				case K_VERBOSE:
				case K_VERTICA:
				case K_VIEW:
				case K_VOLATILE:
				case K_WAIT:
				case K_WEBHDFS_ADDRESS:
				case K_WEBSERVICE_HOSTNAME:
				case K_WEBSERVICE_PORT:
				case K_WITHOUT:
				case K_WORK:
				case K_WRITE:
				case K_YEAR:
				case K_ZONE:
				case DOUBLE_QUOTE_STRING:
				case PARAM:
				case WORD:
				case SINGLE_QUOTE_STRING:
				case ANY:
					{
					setState(3546);
					id();
					{
					setState(3547);
					match(OPEN_PAREN);
					setState(3548);
					dataTypes();
					setState(3549);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_NONE:
					{
					setState(3551);
					match(K_NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TOKENIZER) {
				{
				setState(3556);
				match(K_TOKENIZER);
				setState(3557);
				id();
				{
				setState(3558);
				match(OPEN_PAREN);
				setState(3559);
				dataTypes();
				setState(3560);
				match(CLOSE_PAREN);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public List<User_paramsContext> user_params() {
			return getRuleContexts(User_paramsContext.class);
		}
		public User_paramsContext user_params(int i) {
			return getRuleContext(User_paramsContext.class,i);
		}
		public Create_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_user_statementContext create_user_statement() throws RecognitionException {
		Create_user_statementContext _localctx = new Create_user_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_create_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3564);
			match(K_CREATE);
			setState(3565);
			match(K_USER);
			setState(3566);
			user();
			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_DEFAULT || _la==K_ACCOUNT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (K_GRACEPERIOD - 306)) | (1L << (K_IDENTIFIED - 306)) | (1L << (K_IDLESESSIONTIMEOUT - 306)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (K_MAXCONNECTIONS - 373)) | (1L << (K_MEMORYCAP - 373)) | (1L << (K_PASSWORD - 373)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (K_PROFILE - 462)) | (1L << (K_RENAME - 462)) | (1L << (K_RESOURCE - 462)) | (1L << (K_RUNTIMECAP - 462)) | (1L << (K_SEARCH_PATH - 462)) | (1L << (K_SECURITY_ALGORITHM - 462)))) != 0) || _la==K_TEMPSPACECAP) {
				{
				{
				setState(3567);
				user_params();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public ViewReferenceContext viewReference() {
			return getRuleContext(ViewReferenceContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			match(K_CREATE);
			setState(3576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OR) {
				{
				setState(3574);
				match(K_OR);
				setState(3575);
				match(K_REPLACE);
				}
			}

			setState(3578);
			match(K_VIEW);
			setState(3579);
			viewReference();
			setState(3581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3580);
				columns();
				}
				break;
			}
			setState(3584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_EXCLUDE || _la==K_INCLUDE || _la==K_MATERIALIZE) {
				{
				setState(3583);
				schema_privileges_clause();
				}
			}

			setState(3586);
			match(K_AS);
			setState(3587);
			select_statement();
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(3588);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(K_DELETE);
			setState(3593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3592);
				hints();
				}
			}

			setState(3595);
			match(K_FROM);
			setState(3596);
			tableReference();
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(3597);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Directed_query_statements_statementContext extends ParserRuleContext {
		public Activate_directed_query_statementContext activate_directed_query_statement() {
			return getRuleContext(Activate_directed_query_statementContext.class,0);
		}
		public Deactivate_directed_query_statementContext deactivate_directed_query_statement() {
			return getRuleContext(Deactivate_directed_query_statementContext.class,0);
		}
		public Drop_directed_query_statementContext drop_directed_query_statement() {
			return getRuleContext(Drop_directed_query_statementContext.class,0);
		}
		public Get_directed_query_statementContext get_directed_query_statement() {
			return getRuleContext(Get_directed_query_statementContext.class,0);
		}
		public Save_queryContext save_query() {
			return getRuleContext(Save_queryContext.class,0);
		}
		public Directed_query_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directed_query_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDirected_query_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDirected_query_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDirected_query_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Directed_query_statements_statementContext directed_query_statements_statement() throws RecognitionException {
		Directed_query_statements_statementContext _localctx = new Directed_query_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_directed_query_statements_statement);
		try {
			setState(3606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3600);
				activate_directed_query_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3601);
				activate_directed_query_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3602);
				deactivate_directed_query_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3603);
				drop_directed_query_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3604);
				get_directed_query_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3605);
				save_query();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Activate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_ACTIVATE() { return getToken(VSqlParser.K_ACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Activate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_activate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterActivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitActivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitActivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Activate_directed_query_statementContext activate_directed_query_statement() throws RecognitionException {
		Activate_directed_query_statementContext _localctx = new Activate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_activate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(K_ACTIVATE);
			setState(3609);
			match(K_DIRECTED);
			setState(3610);
			match(K_QUERY);
			setState(3611);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public TerminalNode K_OPT() { return getToken(VSqlParser.K_OPT, 0); }
		public TerminalNode K_OPTIMIZER() { return getToken(VSqlParser.K_OPTIMIZER, 0); }
		public TerminalNode K_CUSTOM() { return getToken(VSqlParser.K_CUSTOM, 0); }
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Create_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCreate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCreate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCreate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_directed_query_statementContext create_directed_query_statement() throws RecognitionException {
		Create_directed_query_statementContext _localctx = new Create_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_create_directed_query_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3613);
			match(K_CREATE);
			setState(3614);
			match(K_DIRECTED);
			setState(3615);
			match(K_QUERY);
			setState(3616);
			_la = _input.LA(1);
			if ( !(_la==K_CUSTOM || _la==K_OPT || _la==K_OPTIMIZER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3617);
			id();
			setState(3620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3618);
				match(K_COMMENT);
				setState(3619);
				string();
				}
				break;
			}
			setState(3622);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deactivate_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DEACTIVATE() { return getToken(VSqlParser.K_DEACTIVATE, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Deactivate_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deactivate_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDeactivate_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDeactivate_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDeactivate_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deactivate_directed_query_statementContext deactivate_directed_query_statement() throws RecognitionException {
		Deactivate_directed_query_statementContext _localctx = new Deactivate_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_deactivate_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			match(K_DEACTIVATE);
			setState(3625);
			match(K_DIRECTED);
			setState(3626);
			match(K_QUERY);
			setState(3629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3627);
				id();
				}
				break;
			case 2:
				{
				setState(3628);
				sqlStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_directed_query_statementContext drop_directed_query_statement() throws RecognitionException {
		Drop_directed_query_statementContext _localctx = new Drop_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			match(K_DROP);
			setState(3632);
			match(K_DIRECTED);
			setState(3633);
			match(K_QUERY);
			setState(3634);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_directed_query_statementContext extends ParserRuleContext {
		public TerminalNode K_GET() { return getToken(VSqlParser.K_GET, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Get_directed_query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_directed_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGet_directed_query_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGet_directed_query_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGet_directed_query_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_directed_query_statementContext get_directed_query_statement() throws RecognitionException {
		Get_directed_query_statementContext _localctx = new Get_directed_query_statementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_get_directed_query_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			match(K_GET);
			setState(3637);
			match(K_DIRECTED);
			setState(3638);
			match(K_QUERY);
			setState(3639);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Save_queryContext extends ParserRuleContext {
		public TerminalNode K_SAVE() { return getToken(VSqlParser.K_SAVE, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Save_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_save_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSave_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSave_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSave_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Save_queryContext save_query() throws RecognitionException {
		Save_queryContext _localctx = new Save_queryContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_save_query);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(K_SAVE);
			setState(3642);
			match(K_QUERY);
			setState(3643);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disconnect_statementContext extends ParserRuleContext {
		public TerminalNode K_DISCONNECT() { return getToken(VSqlParser.K_DISCONNECT, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public Disconnect_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disconnect_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDisconnect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDisconnect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDisconnect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Disconnect_statementContext disconnect_statement() throws RecognitionException {
		Disconnect_statementContext _localctx = new Disconnect_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_disconnect_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(K_DISCONNECT);
			setState(3646);
			dbname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_access_policy_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_COLUMN() { return getToken(VSqlParser.K_COLUMN, 0); }
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public Drop_access_policy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_access_policy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_access_policy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_access_policy_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_access_policy_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_access_policy_statementContext drop_access_policy_statement() throws RecognitionException {
		Drop_access_policy_statementContext _localctx = new Drop_access_policy_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_drop_access_policy_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3648);
			match(K_DROP);
			setState(3649);
			match(K_ACCESS);
			setState(3650);
			match(K_POLICY);
			setState(3651);
			match(K_ON);
			setState(3652);
			tableReference();
			setState(3653);
			match(K_FOR);
			setState(3657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_COLUMN:
				{
				setState(3654);
				match(K_COLUMN);
				setState(3655);
				column();
				}
				break;
			case K_ROWS:
				{
				setState(3656);
				match(K_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregate_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_aggregate_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_aggregate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_aggregate_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_aggregate_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_aggregate_function_statementContext drop_aggregate_function_statement() throws RecognitionException {
		Drop_aggregate_function_statementContext _localctx = new Drop_aggregate_function_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_drop_aggregate_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			match(K_DROP);
			setState(3660);
			match(K_AGGREGATE);
			setState(3661);
			match(K_FUNCTION);
			setState(3663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3662);
				ifNotExistsClause();
				}
				break;
			}
			setState(3665);
			functionReference();
			setState(3666);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_authentication_statementContext drop_authentication_statement() throws RecognitionException {
		Drop_authentication_statementContext _localctx = new Drop_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_drop_authentication_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3668);
			match(K_DROP);
			setState(3669);
			match(K_AUTHENTICATION);
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3670);
				ifNotExistsClause();
				}
				break;
			}
			setState(3673);
			auth_method_name();
			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3674);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_branch_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_BRANCH() { return getToken(VSqlParser.K_BRANCH, 0); }
		public List<Branch_identifierContext> branch_identifier() {
			return getRuleContexts(Branch_identifierContext.class);
		}
		public Branch_identifierContext branch_identifier(int i) {
			return getRuleContext(Branch_identifierContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_branch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_branch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_branch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_branch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_branch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_branch_statementContext drop_branch_statement() throws RecognitionException {
		Drop_branch_statementContext _localctx = new Drop_branch_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_drop_branch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3677);
			match(K_DROP);
			setState(3678);
			match(K_BRANCH);
			setState(3680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(3679);
				ifNotExistsClause();
				}
				break;
			}
			{
			setState(3682);
			branch_identifier();
			}
			setState(3687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3683);
				match(COMMA);
				setState(3684);
				branch_identifier();
				}
				}
				setState(3689);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3690);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fault_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public FaultGroupContext faultGroup() {
			return getRuleContext(FaultGroupContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_fault_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fault_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_fault_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_fault_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_fault_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_fault_group_statementContext drop_fault_group_statement() throws RecognitionException {
		Drop_fault_group_statementContext _localctx = new Drop_fault_group_statementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_drop_fault_group_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3693);
			match(K_DROP);
			setState(3694);
			match(K_FAULT);
			setState(3695);
			match(K_GROUP);
			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3696);
				ifNotExistsClause();
				}
				break;
			}
			setState(3699);
			faultGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_function_statementContext drop_function_statement() throws RecognitionException {
		Drop_function_statementContext _localctx = new Drop_function_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_drop_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			match(K_DROP);
			setState(3702);
			match(K_FUNCTION);
			setState(3704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3703);
				ifNotExistsClause();
				}
				break;
			}
			setState(3706);
			functionReference();
			setState(3707);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_source_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public SourceReferenceContext sourceReference() {
			return getRuleContext(SourceReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_source_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_source_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_source_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_source_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_source_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_source_statementContext drop_source_statement() throws RecognitionException {
		Drop_source_statementContext _localctx = new Drop_source_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_drop_source_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(K_DROP);
			setState(3710);
			match(K_SOURCE);
			setState(3711);
			sourceReference();
			setState(3712);
			match(OPEN_PAREN);
			setState(3713);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_filter_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public FilterReferenceContext filterReference() {
			return getRuleContext(FilterReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_filter_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_filter_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_filter_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_filter_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_filter_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_filter_statementContext drop_filter_statement() throws RecognitionException {
		Drop_filter_statementContext _localctx = new Drop_filter_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_drop_filter_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			match(K_DROP);
			setState(3716);
			match(K_FILTER);
			setState(3717);
			filterReference();
			setState(3718);
			match(OPEN_PAREN);
			setState(3719);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_parser_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public ParserReferenceContext parserReference() {
			return getRuleContext(ParserReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Drop_parser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_parser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_parser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_parser_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_parser_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_parser_statementContext drop_parser_statement() throws RecognitionException {
		Drop_parser_statementContext _localctx = new Drop_parser_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_drop_parser_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3721);
			match(K_DROP);
			setState(3722);
			match(K_PARSER);
			setState(3723);
			parserReference();
			setState(3724);
			match(OPEN_PAREN);
			setState(3725);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_model_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Drop_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_model_statementContext drop_model_statement() throws RecognitionException {
		Drop_model_statementContext _localctx = new Drop_model_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_drop_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3727);
			match(K_DROP);
			setState(3728);
			match(K_MODEL);
			setState(3730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3729);
				ifNotExistsClause();
				}
				break;
			}
			setState(3732);
			modelReference();
			setState(3737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3733);
				match(COMMA);
				setState(3734);
				modelReference();
				}
				}
				setState(3739);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_library_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public LibraryReferenceContext libraryReference() {
			return getRuleContext(LibraryReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_library_statementContext drop_library_statement() throws RecognitionException {
		Drop_library_statementContext _localctx = new Drop_library_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_drop_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3740);
			match(K_DROP);
			setState(3741);
			match(K_LIBRARY);
			setState(3743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3742);
				ifNotExistsClause();
				}
				break;
			}
			setState(3745);
			libraryReference();
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3746);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_load_balance_group_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_BALANCE() { return getToken(VSqlParser.K_BALANCE, 0); }
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public Lb_groupContext lb_group() {
			return getRuleContext(Lb_groupContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_load_balance_group_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_load_balance_group_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_load_balance_group_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_load_balance_group_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_load_balance_group_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_load_balance_group_statementContext drop_load_balance_group_statement() throws RecognitionException {
		Drop_load_balance_group_statementContext _localctx = new Drop_load_balance_group_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_drop_load_balance_group_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			match(K_DROP);
			setState(3750);
			match(K_LOAD);
			setState(3751);
			match(K_BALANCE);
			setState(3752);
			match(K_GROUP);
			setState(3753);
			lb_group();
			setState(3755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3754);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_network_address_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_ADDRESS() { return getToken(VSqlParser.K_ADDRESS, 0); }
		public Network_addressContext network_address() {
			return getRuleContext(Network_addressContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_address_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_address_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_address_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_address_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_address_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_address_statementContext drop_network_address_statement() throws RecognitionException {
		Drop_network_address_statementContext _localctx = new Drop_network_address_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_drop_network_address_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			match(K_DROP);
			setState(3758);
			match(K_LOAD);
			setState(3759);
			match(K_NETWORK);
			setState(3760);
			match(K_ADDRESS);
			setState(3761);
			network_address();
			setState(3763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3762);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_network_interface_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public Network_interfaceContext network_interface() {
			return getRuleContext(Network_interfaceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_network_interface_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_interface_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_network_interface_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_network_interface_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_network_interface_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_interface_statementContext drop_network_interface_statement() throws RecognitionException {
		Drop_network_interface_statementContext _localctx = new Drop_network_interface_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_drop_network_interface_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			match(K_DROP);
			setState(3766);
			match(K_NETWORK);
			setState(3767);
			match(K_INTERFACE);
			setState(3769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3768);
				ifNotExistsClause();
				}
				break;
			}
			setState(3771);
			network_interface();
			setState(3773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3772);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_notifier_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public NotifierContext notifier() {
			return getRuleContext(NotifierContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_notifier_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_notifier_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_notifier_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_notifier_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_notifier_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_notifier_statementContext drop_notifier_statement() throws RecognitionException {
		Drop_notifier_statementContext _localctx = new Drop_notifier_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_drop_notifier_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			match(K_DROP);
			setState(3776);
			match(K_NOTIFIER);
			setState(3778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(3777);
				ifNotExistsClause();
				}
				break;
			}
			setState(3780);
			notifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedure_statementContext drop_procedure_statement() throws RecognitionException {
		Drop_procedure_statementContext _localctx = new Drop_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_drop_procedure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3782);
			match(K_DROP);
			setState(3783);
			match(K_PROCEDURE);
			setState(3785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3784);
				ifNotExistsClause();
				}
				break;
			}
			setState(3787);
			procedureReference();
			setState(3788);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_profile_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public List<ProfileContext> profile() {
			return getRuleContexts(ProfileContext.class);
		}
		public ProfileContext profile(int i) {
			return getRuleContext(ProfileContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_profile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_profile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_profile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_profile_statementContext drop_profile_statement() throws RecognitionException {
		Drop_profile_statementContext _localctx = new Drop_profile_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_drop_profile_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(K_DROP);
			setState(3791);
			match(K_PROFILE);
			setState(3793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3792);
				ifNotExistsClause();
				}
				break;
			}
			setState(3795);
			profile();
			setState(3800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3796);
				match(COMMA);
				setState(3797);
				profile();
				}
				}
				setState(3802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3803);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_projection_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_projection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_projection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_projection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_projection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_projection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_projection_statementContext drop_projection_statement() throws RecognitionException {
		Drop_projection_statementContext _localctx = new Drop_projection_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_drop_projection_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			match(K_DROP);
			setState(3807);
			match(K_PROJECTION);
			setState(3809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3808);
				ifNotExistsClause();
				}
				break;
			}
			setState(3811);
			projectionReference();
			setState(3816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3812);
				match(COMMA);
				setState(3813);
				projectionReference();
				}
				}
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3819);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public ResourcePoolContext resourcePool() {
			return getRuleContext(ResourcePoolContext.class,0);
		}
		public Drop_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_pool_statementContext drop_resource_pool_statement() throws RecognitionException {
		Drop_resource_pool_statementContext _localctx = new Drop_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_drop_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			match(K_DROP);
			setState(3823);
			match(K_RESOURCE);
			setState(3824);
			match(K_POOL);
			setState(3825);
			resourcePool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_role_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_role_statementContext drop_role_statement() throws RecognitionException {
		Drop_role_statementContext _localctx = new Drop_role_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_drop_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3827);
			match(K_DROP);
			setState(3828);
			match(K_ROLE);
			setState(3830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3829);
				ifNotExistsClause();
				}
				break;
			}
			setState(3832);
			role();
			setState(3837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3833);
				match(COMMA);
				setState(3834);
				role();
				}
				}
				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3840);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routing_rule_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_ROUTING() { return getToken(VSqlParser.K_ROUTING, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public RoutingRuleContext routingRule() {
			return getRuleContext(RoutingRuleContext.class,0);
		}
		public Drop_routing_rule_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_routing_rule_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_routing_rule_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_routing_rule_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_routing_rule_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_routing_rule_statementContext drop_routing_rule_statement() throws RecognitionException {
		Drop_routing_rule_statementContext _localctx = new Drop_routing_rule_statementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_drop_routing_rule_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			match(K_DROP);
			setState(3844);
			match(K_ROUTING);
			setState(3845);
			match(K_RULE);
			setState(3846);
			routingRule();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schema_statementContext drop_schema_statement() throws RecognitionException {
		Drop_schema_statementContext _localctx = new Drop_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_drop_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			match(K_DROP);
			setState(3849);
			match(K_SCHEMA);
			setState(3851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3850);
				ifNotExistsClause();
				}
				break;
			}
			setState(3853);
			schemaReference();
			setState(3858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3854);
				match(COMMA);
				setState(3855);
				schemaReference();
				}
				}
				setState(3860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3861);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public Drop_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequence_statementContext drop_sequence_statement() throws RecognitionException {
		Drop_sequence_statementContext _localctx = new Drop_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_drop_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(K_DROP);
			setState(3865);
			match(K_SEQUENCE);
			setState(3867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3866);
				ifNotExistsClause();
				}
				break;
			}
			setState(3869);
			sequenceReference();
			setState(3874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3870);
				match(COMMA);
				setState(3871);
				sequenceReference();
				}
				}
				setState(3876);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE || _la==K_RESTRICT) {
				{
				setState(3877);
				_la = _input.LA(1);
				if ( !(_la==K_CASCADE || _la==K_RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_subnet_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public SubnetContext subnet() {
			return getRuleContext(SubnetContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_subnet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_subnet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_subnet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_subnet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_subnet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_subnet_statementContext drop_subnet_statement() throws RecognitionException {
		Drop_subnet_statementContext _localctx = new Drop_subnet_statementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_drop_subnet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			match(K_DROP);
			setState(3881);
			match(K_SUBNET);
			setState(3883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(3882);
				ifNotExistsClause();
				}
				break;
			}
			setState(3885);
			subnet();
			setState(3887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3886);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_drop_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			match(K_DROP);
			setState(3890);
			match(K_TABLE);
			setState(3892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3891);
				ifNotExistsClause();
				}
				break;
			}
			setState(3894);
			tableReference();
			setState(3899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3895);
				match(COMMA);
				setState(3896);
				tableReference();
				}
				}
				setState(3901);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3902);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_text_index_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TEXT() { return getToken(VSqlParser.K_TEXT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TxtIndexReferenceContext txtIndexReference() {
			return getRuleContext(TxtIndexReferenceContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_text_index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_text_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_text_index_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_text_index_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_text_index_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_text_index_statementContext drop_text_index_statement() throws RecognitionException {
		Drop_text_index_statementContext _localctx = new Drop_text_index_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_drop_text_index_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3905);
			match(K_DROP);
			setState(3906);
			match(K_TEXT);
			setState(3907);
			match(K_INDEX);
			setState(3909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				setState(3908);
				ifNotExistsClause();
				}
				break;
			}
			setState(3911);
			txtIndexReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_transform_function_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public Argument_listContext argument_list() {
			return getRuleContext(Argument_listContext.class,0);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public Drop_transform_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_transform_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_transform_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_transform_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_transform_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_transform_function_statementContext drop_transform_function_statement() throws RecognitionException {
		Drop_transform_function_statementContext _localctx = new Drop_transform_function_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_drop_transform_function_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			match(K_DROP);
			setState(3914);
			match(K_TRANSFORM);
			setState(3915);
			match(K_FUNCTION);
			setState(3917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3916);
				ifNotExistsClause();
				}
				break;
			}
			setState(3919);
			functionReference();
			setState(3920);
			argument_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_user_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_USER() { return getToken(VSqlParser.K_USER, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Drop_user_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_user_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_user_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_user_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_user_statementContext drop_user_statement() throws RecognitionException {
		Drop_user_statementContext _localctx = new Drop_user_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_drop_user_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			match(K_DROP);
			setState(3923);
			match(K_USER);
			setState(3925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3924);
				ifNotExistsClause();
				}
				break;
			}
			setState(3927);
			user();
			setState(3932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3928);
				match(COMMA);
				setState(3929);
				user();
				}
				}
				setState(3934);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(3935);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_view_statementContext extends ParserRuleContext {
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public List<ViewReferenceContext> viewReference() {
			return getRuleContexts(ViewReferenceContext.class);
		}
		public ViewReferenceContext viewReference(int i) {
			return getRuleContext(ViewReferenceContext.class,i);
		}
		public IfNotExistsClauseContext ifNotExistsClause() {
			return getRuleContext(IfNotExistsClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Drop_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDrop_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDrop_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDrop_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_view_statementContext drop_view_statement() throws RecognitionException {
		Drop_view_statementContext _localctx = new Drop_view_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_drop_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			match(K_DROP);
			setState(3939);
			match(K_VIEW);
			setState(3941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(3940);
				ifNotExistsClause();
				}
				break;
			}
			setState(3943);
			viewReference();
			setState(3948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3944);
				match(COMMA);
				setState(3945);
				viewReference();
				}
				}
				setState(3950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_statementContext extends ParserRuleContext {
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public End_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnd_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnd_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnd_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_statementContext end_statement() throws RecognitionException {
		End_statementContext _localctx = new End_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_end_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3951);
			match(K_END);
			setState(3953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(3952);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPLAIN() { return getToken(VSqlParser.K_EXPLAIN, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_VERBOSE() { return getToken(VSqlParser.K_VERBOSE, 0); }
		public TerminalNode K_JSON() { return getToken(VSqlParser.K_JSON, 0); }
		public TerminalNode K_ANNOTATED() { return getToken(VSqlParser.K_ANNOTATED, 0); }
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955);
			match(K_EXPLAIN);
			setState(3957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(3956);
				hints();
				}
			}

			setState(3960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) {
				{
				setState(3959);
				_la = _input.LA(1);
				if ( !(_la==K_ANNOTATED || _la==K_JSON || _la==K_LOCAL || _la==K_VERBOSE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3962);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Export_to_parquet_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode K_DIRECTORY() { return getToken(VSqlParser.K_DIRECTORY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_COMPRESSION() { return getToken(VSqlParser.K_COMPRESSION, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode K_ROWGROUPSIZEMB() { return getToken(VSqlParser.K_ROWGROUPSIZEMB, 0); }
		public TerminalNode K_FILESIZEMB() { return getToken(VSqlParser.K_FILESIZEMB, 0); }
		public TerminalNode K_FILEMODE() { return getToken(VSqlParser.K_FILEMODE, 0); }
		public TerminalNode K_DIRMODE() { return getToken(VSqlParser.K_DIRMODE, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Export_to_parquet_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_parquet_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_parquet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_parquet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_parquet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_parquet_statementContext export_to_parquet_statement() throws RecognitionException {
		Export_to_parquet_statementContext _localctx = new Export_to_parquet_statementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_export_to_parquet_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			match(K_EXPORT);
			setState(3965);
			match(K_TO);
			setState(3966);
			match(K_PARQUET);
			setState(3967);
			match(OPEN_PAREN);
			setState(3968);
			match(K_DIRECTORY);
			setState(3969);
			match(EQUAL);
			setState(3970);
			path();
			setState(3975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(3971);
				match(COMMA);
				setState(3972);
				match(K_COMPRESSION);
				setState(3973);
				match(EQUAL);
				setState(3974);
				string();
				}
				break;
			}
			setState(3981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(3977);
				match(COMMA);
				setState(3978);
				match(K_ROWGROUPSIZEMB);
				setState(3979);
				match(EQUAL);
				setState(3980);
				string();
				}
				break;
			}
			setState(3987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(3983);
				match(COMMA);
				setState(3984);
				match(K_FILESIZEMB);
				setState(3985);
				match(EQUAL);
				setState(3986);
				string();
				}
				break;
			}
			setState(3993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(3989);
				match(COMMA);
				setState(3990);
				match(K_FILEMODE);
				setState(3991);
				match(EQUAL);
				setState(3992);
				string();
				}
				break;
			}
			setState(3999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3995);
				match(COMMA);
				setState(3996);
				match(K_DIRMODE);
				setState(3997);
				match(EQUAL);
				setState(3998);
				string();
				}
			}

			setState(4001);
			match(CLOSE_PAREN);
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_OVER) {
				{
				setState(4002);
				over_clause();
				}
			}

			setState(4005);
			match(K_AS);
			setState(4006);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Export_to_vertica_statementContext extends ParserRuleContext {
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<ColumnsContext> columns() {
			return getRuleContexts(ColumnsContext.class);
		}
		public ColumnsContext columns(int i) {
			return getRuleContext(ColumnsContext.class,i);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public Export_to_vertica_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_export_to_vertica_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExport_to_vertica_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExport_to_vertica_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExport_to_vertica_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Export_to_vertica_statementContext export_to_vertica_statement() throws RecognitionException {
		Export_to_vertica_statementContext _localctx = new Export_to_vertica_statementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_export_to_vertica_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4008);
			match(K_EXPORT);
			setState(4009);
			match(K_TO);
			setState(4010);
			match(K_VERTICA);
			setState(4011);
			tableReference();
			setState(4013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
				{
				setState(4012);
				columns();
				}
			}

			setState(4022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_AS:
				{
				{
				setState(4015);
				match(K_AS);
				setState(4016);
				select_statement();
				}
				}
				break;
			case K_FROM:
				{
				{
				setState(4017);
				match(K_FROM);
				setState(4018);
				tableReference();
				setState(4020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(4019);
					columns();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statements_statementContext extends ParserRuleContext {
		public Grant_authentication_to_statementContext grant_authentication_to_statement() {
			return getRuleContext(Grant_authentication_to_statementContext.class,0);
		}
		public Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() {
			return getRuleContext(Grant_privileges_on_database_statementContext.class,0);
		}
		public Grant_on_library_statementContext grant_on_library_statement() {
			return getRuleContext(Grant_on_library_statementContext.class,0);
		}
		public Grant_on_model_statementContext grant_on_model_statement() {
			return getRuleContext(Grant_on_model_statementContext.class,0);
		}
		public Grant_on_procedure_statementContext grant_on_procedure_statement() {
			return getRuleContext(Grant_on_procedure_statementContext.class,0);
		}
		public Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() {
			return getRuleContext(Grant_on_resourcepool_statementContext.class,0);
		}
		public Grant_on_schema_statementContext grant_on_schema_statement() {
			return getRuleContext(Grant_on_schema_statementContext.class,0);
		}
		public Grant_on_sequence_statementContext grant_on_sequence_statement() {
			return getRuleContext(Grant_on_sequence_statementContext.class,0);
		}
		public Grant_on_location_statementContext grant_on_location_statement() {
			return getRuleContext(Grant_on_location_statementContext.class,0);
		}
		public Grant_on_table_statementContext grant_on_table_statement() {
			return getRuleContext(Grant_on_table_statementContext.class,0);
		}
		public Grant_on_ude_statementContext grant_on_ude_statement() {
			return getRuleContext(Grant_on_ude_statementContext.class,0);
		}
		public Grant_on_view_statementContext grant_on_view_statement() {
			return getRuleContext(Grant_on_view_statementContext.class,0);
		}
		public Grant_on_role_statementContext grant_on_role_statement() {
			return getRuleContext(Grant_on_role_statementContext.class,0);
		}
		public Grant_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_statements_statementContext grant_statements_statement() throws RecognitionException {
		Grant_statements_statementContext _localctx = new Grant_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_grant_statements_statement);
		try {
			setState(4037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4024);
				grant_authentication_to_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4025);
				grant_privileges_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4026);
				grant_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4027);
				grant_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4028);
				grant_on_procedure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4029);
				grant_on_resourcepool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4030);
				grant_on_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4031);
				grant_on_sequence_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4032);
				grant_on_location_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4033);
				grant_on_table_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4034);
				grant_on_ude_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4035);
				grant_on_view_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4036);
				grant_on_role_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public Schema_privileges_clauseContext schema_privileges_clause() {
			return getRuleContext(Schema_privileges_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_view_statementContext grant_on_view_statement() throws RecognitionException {
		Grant_on_view_statementContext _localctx = new Grant_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_grant_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			match(K_GRANT);
			setState(4042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4040);
				match(K_SELECT);
				}
				break;
			case K_ALL:
			case K_EXCLUDE:
			case K_INCLUDE:
			case K_MATERIALIZE:
				{
				setState(4041);
				schema_privileges_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4044);
			match(K_ON);
			setState(4045);
			tableReference();
			setState(4050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4046);
				match(COMMA);
				setState(4047);
				tableReference();
				}
				}
				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4053);
			match(K_TO);
			setState(4054);
			grantees();
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4055);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_ude_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Grant_on_ude_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_ude_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_ude_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_ude_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_ude_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_ude_statementContext grant_on_ude_statement() throws RecognitionException {
		Grant_on_ude_statementContext _localctx = new Grant_on_ude_statementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_grant_on_ude_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4058);
			match(K_GRANT);
			setState(4064);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4059);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4060);
				match(K_ALL);
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4061);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4102);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4066);
				match(K_ON);
				setState(4077);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4067);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4068);
					match(K_AGGREGATE);
					setState(4069);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4070);
					match(K_ANALYTIC);
					setState(4071);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4072);
					match(K_TRANSFORM);
					setState(4073);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4074);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4075);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4076);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4079);
				functionReference();
				setState(4080);
				argument_list();
				setState(4087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4081);
					match(COMMA);
					setState(4082);
					functionReference();
					setState(4083);
					argument_list();
					}
					}
					setState(4089);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4090);
				match(K_ALL);
				setState(4091);
				match(K_FUNCTIONS);
				setState(4092);
				match(K_IN);
				setState(4093);
				match(K_SCHEMA);
				setState(4094);
				schemaReference();
				setState(4099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4095);
					match(COMMA);
					setState(4096);
					schemaReference();
					}
					}
					setState(4101);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4104);
			match(K_TO);
			setState(4105);
			grantees();
			setState(4107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4106);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public Grant_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_table_statementContext grant_on_table_statement() throws RecognitionException {
		Grant_on_table_statementContext _localctx = new Grant_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_grant_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			match(K_GRANT);
			setState(4122);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4110);
				schema_privilege();
				setState(4115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4111);
					match(COMMA);
					setState(4112);
					schema_privilege();
					}
					}
					setState(4117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4118);
				match(K_ALL);
				setState(4120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4119);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4124);
			match(K_ON);
			setState(4148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_TABLE:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				{
				setState(4126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(4125);
					match(K_TABLE);
					}
				}

				setState(4128);
				tableReference();
				setState(4133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4129);
					match(COMMA);
					setState(4130);
					tableReference();
					}
					}
					setState(4135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4136);
				match(K_ALL);
				setState(4137);
				match(K_TABLES);
				setState(4138);
				match(K_IN);
				setState(4139);
				match(K_SCHEMA);
				setState(4140);
				schemaReference();
				setState(4145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4141);
					match(COMMA);
					setState(4142);
					schemaReference();
					}
					}
					setState(4147);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4150);
			match(K_TO);
			setState(4151);
			grantees();
			setState(4153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4152);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_location_statementContext grant_on_location_statement() throws RecognitionException {
		Grant_on_location_statementContext _localctx = new Grant_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_grant_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4155);
			match(K_GRANT);
			setState(4168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4156);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4157);
					match(COMMA);
					setState(4158);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4163);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4164);
				match(K_ALL);
				setState(4166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4165);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4170);
			match(K_ON);
			setState(4171);
			match(K_LOCATION);
			setState(4172);
			path();
			setState(4173);
			match(K_TO);
			setState(4174);
			grantees();
			setState(4176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4175);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Grant_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_sequence_statementContext grant_on_sequence_statement() throws RecognitionException {
		Grant_on_sequence_statementContext _localctx = new Grant_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_grant_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4178);
			match(K_GRANT);
			setState(4184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4179);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4180);
				match(K_ALL);
				setState(4182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4181);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4186);
			match(K_ON);
			setState(4208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4187);
				match(K_SEQUENCE);
				setState(4188);
				sequenceReference();
				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4189);
					match(COMMA);
					setState(4190);
					sequenceReference();
					}
					}
					setState(4195);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4196);
				match(K_ALL);
				setState(4197);
				match(K_SEQUENCES);
				setState(4198);
				match(K_IN);
				setState(4199);
				match(K_SCHEMA);
				setState(4200);
				schemaReference();
				setState(4205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4201);
					match(COMMA);
					setState(4202);
					schemaReference();
					}
					}
					setState(4207);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4210);
			match(K_TO);
			setState(4211);
			grantees();
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4212);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_schema_statementContext grant_on_schema_statement() throws RecognitionException {
		Grant_on_schema_statementContext _localctx = new Grant_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_grant_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4215);
			match(K_GRANT);
			setState(4228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4216);
				schema_privilege();
				setState(4221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4217);
					match(COMMA);
					setState(4218);
					schema_privilege();
					}
					}
					setState(4223);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4224);
				match(K_ALL);
				setState(4226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4225);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4230);
			match(K_ON);
			setState(4231);
			match(K_SCHEMA);
			setState(4232);
			schemaReference();
			setState(4237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4233);
				match(COMMA);
				setState(4234);
				schemaReference();
				}
				}
				setState(4239);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4240);
			match(K_TO);
			setState(4241);
			grantees();
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4242);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_privilegeContext extends ParserRuleContext {
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_REFERENCES() { return getToken(VSqlParser.K_REFERENCES, 0); }
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public Schema_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privilegeContext schema_privilege() throws RecognitionException {
		Schema_privilegeContext _localctx = new Schema_privilegeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_schema_privilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4245);
			_la = _input.LA(1);
			if ( !(_la==K_CREATE || _la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (K_TRUNCATE - 567)) | (1L << (K_UPDATE - 567)) | (1L << (K_USAGE - 567)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public Grant_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_role_statementContext grant_on_role_statement() throws RecognitionException {
		Grant_on_role_statementContext _localctx = new Grant_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_grant_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(K_GRANT);
			setState(4248);
			role();
			setState(4253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4249);
				match(COMMA);
				setState(4250);
				role();
				}
				}
				setState(4255);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4256);
			match(K_TO);
			setState(4257);
			grantees();
			setState(4259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4258);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_resourcepool_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_resourcepool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_resourcepool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_resourcepool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_resourcepool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_resourcepool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_resourcepool_statementContext grant_on_resourcepool_statement() throws RecognitionException {
		Grant_on_resourcepool_statementContext _localctx = new Grant_on_resourcepool_statementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_grant_on_resourcepool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4261);
			match(K_GRANT);
			setState(4267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4262);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4263);
				match(K_ALL);
				setState(4265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4264);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4269);
			match(K_ON);
			setState(4270);
			match(K_RESOURCE);
			setState(4271);
			match(K_POOL);
			setState(4272);
			resourcePool();
			setState(4277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4273);
				match(COMMA);
				setState(4274);
				resourcePool();
				}
				}
				setState(4279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4280);
			match(K_TO);
			setState(4281);
			grantees();
			setState(4283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4282);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_procedure_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_procedure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_procedure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_procedure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_procedure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_procedure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_procedure_statementContext grant_on_procedure_statement() throws RecognitionException {
		Grant_on_procedure_statementContext _localctx = new Grant_on_procedure_statementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_grant_on_procedure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(K_GRANT);
			setState(4291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4286);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4287);
				match(K_ALL);
				setState(4289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4288);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4293);
			match(K_ON);
			setState(4294);
			match(K_PROCEDURE);
			setState(4295);
			procedureReference();
			setState(4296);
			argument_list();
			setState(4303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4297);
				match(COMMA);
				setState(4298);
				procedureReference();
				setState(4299);
				argument_list();
				}
				}
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4306);
			match(K_TO);
			setState(4307);
			grantees();
			setState(4309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4308);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_model_statementContext grant_on_model_statement() throws RecognitionException {
		Grant_on_model_statementContext _localctx = new Grant_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_grant_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4311);
			match(K_GRANT);
			setState(4317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4312);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4313);
				match(K_ALL);
				setState(4315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4314);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4319);
			match(K_ON);
			setState(4320);
			match(K_MODEL);
			setState(4321);
			modelReference();
			setState(4326);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4322);
				match(COMMA);
				setState(4323);
				modelReference();
				}
				}
				setState(4328);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4329);
			match(K_TO);
			setState(4330);
			grantees();
			setState(4332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4331);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_on_library_statementContext grant_on_library_statement() throws RecognitionException {
		Grant_on_library_statementContext _localctx = new Grant_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_grant_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4334);
			match(K_GRANT);
			setState(4340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4335);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4336);
				match(K_ALL);
				setState(4338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4337);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4342);
			match(K_ON);
			setState(4343);
			match(K_LIBRARY);
			setState(4344);
			libraryReference();
			setState(4349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4345);
				match(COMMA);
				setState(4346);
				libraryReference();
				}
				}
				setState(4351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4352);
			match(K_TO);
			setState(4353);
			grantees();
			setState(4355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4354);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_privileges_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_CREATE() { return getToken(VSqlParser.K_CREATE, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public WithGrantOptionContext withGrantOption() {
			return getRuleContext(WithGrantOptionContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Grant_privileges_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_privileges_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_privileges_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_privileges_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_privileges_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_privileges_on_database_statementContext grant_privileges_on_database_statement() throws RecognitionException {
		Grant_privileges_on_database_statementContext _localctx = new Grant_privileges_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_grant_privileges_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4357);
			match(K_GRANT);
			setState(4364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
				{
				setState(4358);
				match(K_CREATE);
				}
				break;
			case K_TEMP:
				{
				setState(4359);
				match(K_TEMP);
				}
				break;
			case K_ALL:
				{
				{
				setState(4360);
				match(K_ALL);
				setState(4362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4361);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4366);
			match(K_ON);
			setState(4367);
			match(K_DATABASE);
			setState(4368);
			dbname();
			setState(4369);
			match(K_TO);
			setState(4370);
			grantees();
			setState(4372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WITH) {
				{
				setState(4371);
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_authentication_to_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public MethodContext method() {
			return getRuleContext(MethodContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_to_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_to_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_to_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_to_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_to_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_to_statementContext grant_authentication_to_statement() throws RecognitionException {
		Grant_authentication_to_statementContext _localctx = new Grant_authentication_to_statementContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_grant_authentication_to_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4374);
			match(K_GRANT);
			setState(4375);
			match(K_AUTHENTICATION);
			setState(4376);
			method();
			setState(4377);
			match(K_TO);
			setState(4378);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithGrantOptionContext extends ParserRuleContext {
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWithGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWithGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWithGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithGrantOptionContext withGrantOption() throws RecognitionException {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_withGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4380);
			match(K_WITH);
			setState(4381);
			match(K_GRANT);
			setState(4382);
			match(K_OPTION);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteesContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public GranteesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantees; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantees(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantees(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantees(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteesContext grantees() throws RecognitionException {
		GranteesContext _localctx = new GranteesContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_grantees);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4384);
			grantee();
			setState(4389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4385);
				match(COMMA);
				setState(4386);
				grantee();
				}
				}
				setState(4391);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_grantee);
		try {
			setState(4394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4392);
				user();
				}
				break;
			case K_PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(4393);
				match(K_PUBLIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Grant_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGrant_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGrant_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGrant_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_authentication_statementContext grant_authentication_statement() throws RecognitionException {
		Grant_authentication_statementContext _localctx = new Grant_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_grant_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4396);
			match(K_GRANT);
			setState(4397);
			match(K_AUTHENTICATION);
			setState(4398);
			auth_method_name();
			setState(4399);
			match(K_TO);
			setState(4400);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Insert_valuesContext insert_values() {
			return getRuleContext(Insert_valuesContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4402);
			match(K_INSERT);
			setState(4404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4403);
				hints();
				}
			}

			setState(4406);
			match(K_INTO);
			setState(4407);
			tableReference();
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4408);
				columns();
				}
				break;
			}
			setState(4411);
			insert_values();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_valuesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Insert_valuesContext insert_values() {
			return getRuleContext(Insert_valuesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public With_statementContext with_statement() {
			return getRuleContext(With_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Insert_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInsert_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInsert_values(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInsert_values(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_valuesContext insert_values() throws RecognitionException {
		Insert_valuesContext _localctx = new Insert_valuesContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_insert_values);
		try {
			setState(4428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4413);
				match(OPEN_PAREN);
				setState(4414);
				insert_values();
				setState(4415);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4426);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_DEFAULT:
					{
					{
					setState(4417);
					match(K_DEFAULT);
					setState(4418);
					match(K_VALUES);
					}
					}
					break;
				case K_VALUES:
					{
					{
					setState(4419);
					match(K_VALUES);
					setState(4420);
					match(OPEN_PAREN);
					setState(4421);
					expressions();
					setState(4422);
					match(CLOSE_PAREN);
					}
					}
					break;
				case K_WITH:
					{
					setState(4424);
					with_statement();
					}
					break;
				case K_SELECT:
				case K_AT:
				case OPEN_PAREN:
					{
					setState(4425);
					select_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode K_MERGE() { return getToken(VSqlParser.K_MERGE, 0); }
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public List<MatchingClauseContext> matchingClause() {
			return getRuleContexts(MatchingClauseContext.class);
		}
		public MatchingClauseContext matchingClause(int i) {
			return getRuleContext(MatchingClauseContext.class,i);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4430);
			match(K_MERGE);
			setState(4432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4431);
				hints();
				}
			}

			setState(4434);
			match(K_INTO);
			setState(4435);
			tableReference();
			setState(4437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(4436);
				alias();
				}
			}

			setState(4439);
			match(K_USING);
			setState(4442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4440);
				tableReference();
				}
				break;
			case 2:
				{
				setState(4441);
				select_statement();
				}
				break;
			}
			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS || _la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
				{
				setState(4444);
				alias();
				}
			}

			setState(4447);
			joinPredicate();
			setState(4449); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4448);
				matchingClause();
				}
				}
				setState(4451); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==K_WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchingClauseContext extends ParserRuleContext {
		public TerminalNode K_WHEN() { return getToken(VSqlParser.K_WHEN, 0); }
		public TerminalNode K_MATCHED() { return getToken(VSqlParser.K_MATCHED, 0); }
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public List<ColumnContext> column() {
			return getRuleContexts(ColumnContext.class);
		}
		public ColumnContext column(int i) {
			return getRuleContext(ColumnContext.class,i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(VSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(VSqlParser.EQUAL, i);
		}
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public MatchingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatchingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatchingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatchingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchingClauseContext matchingClause() throws RecognitionException {
		MatchingClauseContext _localctx = new MatchingClauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_matchingClause);
		int _la;
		try {
			setState(4495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4453);
				match(K_WHEN);
				setState(4454);
				match(K_MATCHED);
				setState(4455);
				match(K_THEN);
				setState(4456);
				match(K_UPDATE);
				setState(4459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4457);
					match(K_AND);
					setState(4458);
					predicates();
					}
				}

				setState(4461);
				match(K_THEN);
				setState(4462);
				match(K_UPDATE);
				setState(4463);
				match(K_SET);
				{
				setState(4464);
				column();
				setState(4465);
				match(EQUAL);
				setState(4466);
				value();
				}
				setState(4474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (ANY - 704)))) != 0)) {
					{
					{
					setState(4468);
					column();
					setState(4469);
					match(EQUAL);
					setState(4470);
					value();
					}
					}
					setState(4476);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_WHERE) {
					{
					setState(4477);
					where_clause();
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4480);
				match(K_WHEN);
				setState(4481);
				match(K_NOT);
				setState(4482);
				match(K_MATCHED);
				setState(4485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AND) {
					{
					setState(4483);
					match(K_AND);
					setState(4484);
					predicates();
					}
				}

				setState(4487);
				match(K_THEN);
				setState(4488);
				match(K_INSERT);
				setState(4489);
				columns();
				setState(4490);
				match(K_VALUES);
				setState(4491);
				match(OPEN_PAREN);
				setState(4492);
				values();
				setState(4493);
				match(CLOSE_PAREN);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Profile_statementContext extends ParserRuleContext {
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public Profile_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Profile_statementContext profile_statement() throws RecognitionException {
		Profile_statementContext _localctx = new Profile_statementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_profile_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4497);
			match(K_PROFILE);
			setState(4498);
			sqlStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Release_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_RELEASE() { return getToken(VSqlParser.K_RELEASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Release_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_release_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRelease_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRelease_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRelease_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Release_savepoint_statementContext release_savepoint_statement() throws RecognitionException {
		Release_savepoint_statementContext _localctx = new Release_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_release_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4500);
			match(K_RELEASE);
			setState(4502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				setState(4501);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4504);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statements_statementContext extends ParserRuleContext {
		public Revoke_authentication_statementContext revoke_authentication_statement() {
			return getRuleContext(Revoke_authentication_statementContext.class,0);
		}
		public Revoke_on_database_statementContext revoke_on_database_statement() {
			return getRuleContext(Revoke_on_database_statementContext.class,0);
		}
		public Revoke_on_library_statementContext revoke_on_library_statement() {
			return getRuleContext(Revoke_on_library_statementContext.class,0);
		}
		public Revoke_on_model_statementContext revoke_on_model_statement() {
			return getRuleContext(Revoke_on_model_statementContext.class,0);
		}
		public Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() {
			return getRuleContext(Revoke_on_prodecure_statementContext.class,0);
		}
		public Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() {
			return getRuleContext(Revoke_on_resource_pool_statementContext.class,0);
		}
		public Revoke_on_role_statementContext revoke_on_role_statement() {
			return getRuleContext(Revoke_on_role_statementContext.class,0);
		}
		public Revoke_on_schema_statementContext revoke_on_schema_statement() {
			return getRuleContext(Revoke_on_schema_statementContext.class,0);
		}
		public Revoke_on_sequence_statementContext revoke_on_sequence_statement() {
			return getRuleContext(Revoke_on_sequence_statementContext.class,0);
		}
		public Revoke_on_location_statementContext revoke_on_location_statement() {
			return getRuleContext(Revoke_on_location_statementContext.class,0);
		}
		public Revoke_on_table_statementContext revoke_on_table_statement() {
			return getRuleContext(Revoke_on_table_statementContext.class,0);
		}
		public Revoke_on_function_statementContext revoke_on_function_statement() {
			return getRuleContext(Revoke_on_function_statementContext.class,0);
		}
		public Revoke_on_view_statementContext revoke_on_view_statement() {
			return getRuleContext(Revoke_on_view_statementContext.class,0);
		}
		public Revoke_statements_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statements_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_statements_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_statements_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_statements_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_statements_statementContext revoke_statements_statement() throws RecognitionException {
		Revoke_statements_statementContext _localctx = new Revoke_statements_statementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revoke_statements_statement);
		try {
			setState(4519);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4506);
				revoke_authentication_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4507);
				revoke_on_database_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4508);
				revoke_on_library_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4509);
				revoke_on_model_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4510);
				revoke_on_prodecure_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4511);
				revoke_on_resource_pool_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4512);
				revoke_on_role_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4513);
				revoke_on_schema_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4514);
				revoke_on_sequence_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4515);
				revoke_on_location_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4516);
				revoke_on_table_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4517);
				revoke_on_function_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4518);
				revoke_on_view_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_view_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_view_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_view_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_view_statementContext revoke_on_view_statement() throws RecognitionException {
		Revoke_on_view_statementContext _localctx = new Revoke_on_view_statementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revoke_on_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4521);
			match(K_REVOKE);
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4522);
				match(K_GRANT);
				setState(4523);
				match(K_OPTION);
				setState(4524);
				match(K_FOR);
				}
			}

			setState(4532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4527);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4528);
				match(K_ALL);
				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4529);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4534);
			match(K_ON);
			setState(4535);
			tableReference();
			setState(4540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4536);
				match(COMMA);
				setState(4537);
				tableReference();
				}
				}
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4543);
			match(K_FROM);
			setState(4544);
			grantees();
			setState(4546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4545);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_function_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<FunctionReferenceContext> functionReference() {
			return getRuleContexts(FunctionReferenceContext.class);
		}
		public FunctionReferenceContext functionReference(int i) {
			return getRuleContext(FunctionReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public Revoke_on_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_function_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_function_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_function_statementContext revoke_on_function_statement() throws RecognitionException {
		Revoke_on_function_statementContext _localctx = new Revoke_on_function_statementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_revoke_on_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4548);
			match(K_REVOKE);
			setState(4552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4549);
				match(K_GRANT);
				setState(4550);
				match(K_OPTION);
				setState(4551);
				match(K_FOR);
				}
			}

			setState(4559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4554);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4555);
				match(K_ALL);
				setState(4557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4556);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4597);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ON:
				{
				{
				setState(4561);
				match(K_ON);
				setState(4572);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_FUNCTION:
					{
					setState(4562);
					match(K_FUNCTION);
					}
					break;
				case K_AGGREGATE:
					{
					{
					setState(4563);
					match(K_AGGREGATE);
					setState(4564);
					match(K_FUNCTION);
					}
					}
					break;
				case K_ANALYTIC:
					{
					{
					setState(4565);
					match(K_ANALYTIC);
					setState(4566);
					match(K_FUNCTION);
					}
					}
					break;
				case K_TRANSFORM:
					{
					{
					setState(4567);
					match(K_TRANSFORM);
					setState(4568);
					match(K_FUNCTION);
					}
					}
					break;
				case K_FILTER:
					{
					setState(4569);
					match(K_FILTER);
					}
					break;
				case K_PARSER:
					{
					setState(4570);
					match(K_PARSER);
					}
					break;
				case K_SOURCE:
					{
					setState(4571);
					match(K_SOURCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4574);
				functionReference();
				setState(4575);
				argument_list();
				setState(4582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4576);
					match(COMMA);
					setState(4577);
					functionReference();
					setState(4578);
					argument_list();
					}
					}
					setState(4584);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4585);
				match(K_ALL);
				setState(4586);
				match(K_FUNCTIONS);
				setState(4587);
				match(K_IN);
				setState(4588);
				match(K_SCHEMA);
				setState(4589);
				schemaReference();
				setState(4594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4590);
					match(COMMA);
					setState(4591);
					schemaReference();
					}
					}
					setState(4596);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4599);
			match(K_FROM);
			setState(4600);
			grantees();
			setState(4602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4601);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_table_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public List<TerminalNode> K_SELECT() { return getTokens(VSqlParser.K_SELECT); }
		public TerminalNode K_SELECT(int i) {
			return getToken(VSqlParser.K_SELECT, i);
		}
		public List<TerminalNode> K_INSERT() { return getTokens(VSqlParser.K_INSERT); }
		public TerminalNode K_INSERT(int i) {
			return getToken(VSqlParser.K_INSERT, i);
		}
		public List<TerminalNode> K_UPDATE() { return getTokens(VSqlParser.K_UPDATE); }
		public TerminalNode K_UPDATE(int i) {
			return getToken(VSqlParser.K_UPDATE, i);
		}
		public List<TerminalNode> K_DELETE() { return getTokens(VSqlParser.K_DELETE); }
		public TerminalNode K_DELETE(int i) {
			return getToken(VSqlParser.K_DELETE, i);
		}
		public List<TerminalNode> K_REFERENCES() { return getTokens(VSqlParser.K_REFERENCES); }
		public TerminalNode K_REFERENCES(int i) {
			return getToken(VSqlParser.K_REFERENCES, i);
		}
		public List<TerminalNode> K_TRUNCATE() { return getTokens(VSqlParser.K_TRUNCATE); }
		public TerminalNode K_TRUNCATE(int i) {
			return getToken(VSqlParser.K_TRUNCATE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public Revoke_on_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_table_statementContext revoke_on_table_statement() throws RecognitionException {
		Revoke_on_table_statementContext _localctx = new Revoke_on_table_statementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_revoke_on_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4604);
			match(K_REVOKE);
			setState(4608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4605);
				match(K_GRANT);
				setState(4606);
				match(K_OPTION);
				setState(4607);
				match(K_FOR);
				}
			}

			setState(4622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
				{
				{
				setState(4610);
				_la = _input.LA(1);
				if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4611);
					match(COMMA);
					setState(4612);
					_la = _input.LA(1);
					if ( !(_la==K_REFERENCES || _la==K_SELECT || _la==K_DELETE || _la==K_INSERT || _la==K_TRUNCATE || _la==K_UPDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4618);
				match(K_ALL);
				setState(4620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4619);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4624);
			match(K_ON);
			setState(4648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_TABLE:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				{
				setState(4626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(4625);
					match(K_TABLE);
					}
				}

				setState(4628);
				tableReference();
				setState(4633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4629);
					match(COMMA);
					setState(4630);
					tableReference();
					}
					}
					setState(4635);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4636);
				match(K_ALL);
				setState(4637);
				match(K_TABLES);
				setState(4638);
				match(K_IN);
				setState(4639);
				match(K_SCHEMA);
				setState(4640);
				schemaReference();
				setState(4645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4641);
					match(COMMA);
					setState(4642);
					schemaReference();
					}
					}
					setState(4647);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4650);
			match(K_FROM);
			setState(4651);
			grantees();
			setState(4653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4652);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_location_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public PathContext path() {
			return getRuleContext(PathContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_READ() { return getTokens(VSqlParser.K_READ); }
		public TerminalNode K_READ(int i) {
			return getToken(VSqlParser.K_READ, i);
		}
		public List<TerminalNode> K_WRITE() { return getTokens(VSqlParser.K_WRITE); }
		public TerminalNode K_WRITE(int i) {
			return getToken(VSqlParser.K_WRITE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_location_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_location_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_location_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_location_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_location_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_location_statementContext revoke_on_location_statement() throws RecognitionException {
		Revoke_on_location_statementContext _localctx = new Revoke_on_location_statementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_revoke_on_location_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4655);
			match(K_REVOKE);
			setState(4659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4656);
				match(K_GRANT);
				setState(4657);
				match(K_OPTION);
				setState(4658);
				match(K_FOR);
				}
			}

			setState(4673);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_READ:
			case K_WRITE:
				{
				{
				setState(4661);
				_la = _input.LA(1);
				if ( !(_la==K_READ || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4662);
					match(COMMA);
					setState(4663);
					_la = _input.LA(1);
					if ( !(_la==K_READ || _la==K_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4668);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4669);
				match(K_ALL);
				setState(4671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4670);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4675);
			match(K_ON);
			setState(4676);
			match(K_LOCATION);
			setState(4677);
			path();
			setState(4678);
			match(K_FROM);
			setState(4679);
			grantees();
			setState(4681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4680);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_sequence_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public List<SequenceReferenceContext> sequenceReference() {
			return getRuleContexts(SequenceReferenceContext.class);
		}
		public SequenceReferenceContext sequenceReference(int i) {
			return getRuleContext(SequenceReferenceContext.class,i);
		}
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Revoke_on_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_sequence_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_sequence_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_sequence_statementContext revoke_on_sequence_statement() throws RecognitionException {
		Revoke_on_sequence_statementContext _localctx = new Revoke_on_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_revoke_on_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4683);
			match(K_REVOKE);
			setState(4687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4684);
				match(K_GRANT);
				setState(4685);
				match(K_OPTION);
				setState(4686);
				match(K_FOR);
				}
			}

			setState(4694);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SELECT:
				{
				setState(4689);
				match(K_SELECT);
				}
				break;
			case K_ALL:
				{
				{
				setState(4690);
				match(K_ALL);
				setState(4692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4691);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4696);
			match(K_ON);
			setState(4718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_SEQUENCE:
				{
				{
				setState(4697);
				match(K_SEQUENCE);
				setState(4698);
				sequenceReference();
				setState(4703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4699);
					match(COMMA);
					setState(4700);
					sequenceReference();
					}
					}
					setState(4705);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4706);
				match(K_ALL);
				setState(4707);
				match(K_SEQUENCES);
				setState(4708);
				match(K_IN);
				setState(4709);
				match(K_SCHEMA);
				setState(4710);
				schemaReference();
				setState(4715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4711);
					match(COMMA);
					setState(4712);
					schemaReference();
					}
					}
					setState(4717);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4720);
			match(K_FROM);
			setState(4721);
			grantees();
			setState(4723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4722);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_schema_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public List<SchemaReferenceContext> schemaReference() {
			return getRuleContexts(SchemaReferenceContext.class);
		}
		public SchemaReferenceContext schemaReference(int i) {
			return getRuleContext(SchemaReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_schema_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_schema_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_schema_statementContext revoke_on_schema_statement() throws RecognitionException {
		Revoke_on_schema_statementContext _localctx = new Revoke_on_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_revoke_on_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			match(K_REVOKE);
			setState(4729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4726);
				match(K_GRANT);
				setState(4727);
				match(K_OPTION);
				setState(4728);
				match(K_FOR);
				}
			}

			setState(4743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_REFERENCES:
			case K_SELECT:
			case K_DELETE:
			case K_INSERT:
			case K_TRUNCATE:
			case K_UPDATE:
			case K_USAGE:
				{
				{
				setState(4731);
				schema_privilege();
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4732);
					match(COMMA);
					setState(4733);
					schema_privilege();
					}
					}
					setState(4738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4739);
				match(K_ALL);
				setState(4741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4740);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4745);
			match(K_ON);
			setState(4746);
			match(K_SCHEMA);
			setState(4747);
			schemaReference();
			setState(4752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4748);
				match(COMMA);
				setState(4749);
				schemaReference();
				}
				}
				setState(4754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4755);
			match(K_FROM);
			setState(4756);
			grantees();
			setState(4758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4757);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_role_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_ADMIN() { return getToken(VSqlParser.K_ADMIN, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public Revoke_on_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_role_statementContext revoke_on_role_statement() throws RecognitionException {
		Revoke_on_role_statementContext _localctx = new Revoke_on_role_statementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_revoke_on_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			match(K_REVOKE);
			setState(4764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(4761);
				match(K_ADMIN);
				setState(4762);
				match(K_OPTION);
				setState(4763);
				match(K_FOR);
				}
				break;
			}
			setState(4766);
			role();
			setState(4771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4767);
				match(COMMA);
				setState(4768);
				role();
				}
				}
				setState(4773);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4774);
			match(K_FROM);
			setState(4775);
			grantees();
			setState(4777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4776);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public List<ResourcePoolContext> resourcePool() {
			return getRuleContexts(ResourcePoolContext.class);
		}
		public ResourcePoolContext resourcePool(int i) {
			return getRuleContext(ResourcePoolContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_resource_pool_statementContext revoke_on_resource_pool_statement() throws RecognitionException {
		Revoke_on_resource_pool_statementContext _localctx = new Revoke_on_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_revoke_on_resource_pool_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4779);
			match(K_REVOKE);
			setState(4783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4780);
				match(K_GRANT);
				setState(4781);
				match(K_OPTION);
				setState(4782);
				match(K_FOR);
				}
			}

			setState(4790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4785);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4786);
				match(K_ALL);
				setState(4788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4787);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4792);
			match(K_ON);
			setState(4793);
			match(K_RESOURCE);
			setState(4794);
			match(K_POOL);
			setState(4795);
			resourcePool();
			setState(4800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4796);
				match(COMMA);
				setState(4797);
				resourcePool();
				}
				}
				setState(4802);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4803);
			match(K_FROM);
			setState(4804);
			grantees();
			setState(4806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4805);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_prodecure_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public List<ProcedureReferenceContext> procedureReference() {
			return getRuleContexts(ProcedureReferenceContext.class);
		}
		public ProcedureReferenceContext procedureReference(int i) {
			return getRuleContext(ProcedureReferenceContext.class,i);
		}
		public List<Argument_listContext> argument_list() {
			return getRuleContexts(Argument_listContext.class);
		}
		public Argument_listContext argument_list(int i) {
			return getRuleContext(Argument_listContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_prodecure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_prodecure_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_prodecure_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_prodecure_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_prodecure_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_prodecure_statementContext revoke_on_prodecure_statement() throws RecognitionException {
		Revoke_on_prodecure_statementContext _localctx = new Revoke_on_prodecure_statementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_revoke_on_prodecure_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4808);
			match(K_REVOKE);
			setState(4812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4809);
				match(K_GRANT);
				setState(4810);
				match(K_OPTION);
				setState(4811);
				match(K_FOR);
				}
			}

			setState(4819);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_EXECUTE:
				{
				setState(4814);
				match(K_EXECUTE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4815);
				match(K_ALL);
				setState(4817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4816);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4821);
			match(K_ON);
			setState(4822);
			match(K_PROCEDURE);
			setState(4823);
			procedureReference();
			setState(4824);
			argument_list();
			setState(4831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4825);
				match(COMMA);
				{
				setState(4826);
				procedureReference();
				setState(4827);
				argument_list();
				}
				}
				}
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4834);
			match(K_FROM);
			setState(4835);
			grantees();
			setState(4837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4836);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_model_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public List<ModelReferenceContext> modelReference() {
			return getRuleContexts(ModelReferenceContext.class);
		}
		public ModelReferenceContext modelReference(int i) {
			return getRuleContext(ModelReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_model_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_model_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_model_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_model_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_model_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_model_statementContext revoke_on_model_statement() throws RecognitionException {
		Revoke_on_model_statementContext _localctx = new Revoke_on_model_statementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_revoke_on_model_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(K_REVOKE);
			setState(4843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4840);
				match(K_GRANT);
				setState(4841);
				match(K_OPTION);
				setState(4842);
				match(K_FOR);
				}
			}

			setState(4850);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4845);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4846);
				match(K_ALL);
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4847);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4852);
			match(K_ON);
			setState(4853);
			match(K_MODEL);
			setState(4854);
			modelReference();
			setState(4859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4855);
				match(COMMA);
				setState(4856);
				modelReference();
				}
				}
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4862);
			match(K_FROM);
			setState(4863);
			grantees();
			setState(4865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4864);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_library_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public List<LibraryReferenceContext> libraryReference() {
			return getRuleContexts(LibraryReferenceContext.class);
		}
		public LibraryReferenceContext libraryReference(int i) {
			return getRuleContext(LibraryReferenceContext.class,i);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_library_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_library_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_library_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_library_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_library_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_library_statementContext revoke_on_library_statement() throws RecognitionException {
		Revoke_on_library_statementContext _localctx = new Revoke_on_library_statementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_revoke_on_library_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			match(K_REVOKE);
			setState(4871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4868);
				match(K_GRANT);
				setState(4869);
				match(K_OPTION);
				setState(4870);
				match(K_FOR);
				}
			}

			setState(4878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USAGE:
				{
				setState(4873);
				match(K_USAGE);
				}
				break;
			case K_ALL:
				{
				{
				setState(4874);
				match(K_ALL);
				setState(4876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4875);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4880);
			match(K_ON);
			setState(4881);
			match(K_LIBRARY);
			setState(4882);
			libraryReference();
			setState(4887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4883);
				match(COMMA);
				setState(4884);
				libraryReference();
				}
				}
				setState(4889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4890);
			match(K_FROM);
			setState(4891);
			grantees();
			setState(4893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4892);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_on_database_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public TerminalNode K_GRANT() { return getToken(VSqlParser.K_GRANT, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public List<TerminalNode> K_CREATE() { return getTokens(VSqlParser.K_CREATE); }
		public TerminalNode K_CREATE(int i) {
			return getToken(VSqlParser.K_CREATE, i);
		}
		public List<TerminalNode> K_TEMP() { return getTokens(VSqlParser.K_TEMP); }
		public TerminalNode K_TEMP(int i) {
			return getToken(VSqlParser.K_TEMP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public Revoke_on_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_on_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_on_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_on_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_on_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_on_database_statementContext revoke_on_database_statement() throws RecognitionException {
		Revoke_on_database_statementContext _localctx = new Revoke_on_database_statementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_revoke_on_database_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4895);
			match(K_REVOKE);
			setState(4899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GRANT) {
				{
				setState(4896);
				match(K_GRANT);
				setState(4897);
				match(K_OPTION);
				setState(4898);
				match(K_FOR);
				}
			}

			setState(4913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CREATE:
			case K_TEMP:
				{
				{
				setState(4901);
				_la = _input.LA(1);
				if ( !(_la==K_CREATE || _la==K_TEMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4902);
					match(COMMA);
					setState(4903);
					_la = _input.LA(1);
					if ( !(_la==K_CREATE || _la==K_TEMP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(4908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case K_ALL:
				{
				{
				setState(4909);
				match(K_ALL);
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_PRIVILEGES) {
					{
					setState(4910);
					match(K_PRIVILEGES);
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4915);
			match(K_ON);
			setState(4916);
			match(K_DATABASE);
			setState(4917);
			dbname();
			setState(4918);
			match(K_FROM);
			setState(4919);
			grantees();
			setState(4921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_CASCADE) {
				{
				setState(4920);
				match(K_CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_authentication_statementContext extends ParserRuleContext {
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public Auth_method_nameContext auth_method_name() {
			return getRuleContext(Auth_method_nameContext.class,0);
		}
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public GranteesContext grantees() {
			return getRuleContext(GranteesContext.class,0);
		}
		public Revoke_authentication_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_authentication_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRevoke_authentication_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRevoke_authentication_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRevoke_authentication_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_authentication_statementContext revoke_authentication_statement() throws RecognitionException {
		Revoke_authentication_statementContext _localctx = new Revoke_authentication_statementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_revoke_authentication_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			match(K_REVOKE);
			setState(4924);
			match(K_AUTHENTICATION);
			setState(4925);
			auth_method_name();
			setState(4926);
			match(K_FROM);
			setState(4927);
			grantees();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			match(K_ROLLBACK);
			setState(4931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_TRANSACTION || _la==K_WORK) {
				{
				setState(4930);
				_la = _input.LA(1);
				if ( !(_la==K_TRANSACTION || _la==K_WORK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_to_savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public Rollback_to_savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_to_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRollback_to_savepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRollback_to_savepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRollback_to_savepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_to_savepoint_statementContext rollback_to_savepoint_statement() throws RecognitionException {
		Rollback_to_savepoint_statementContext _localctx = new Rollback_to_savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_rollback_to_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(K_ROLLBACK);
			setState(4934);
			match(K_TO);
			setState(4936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4935);
				match(K_SAVEPOINT);
				}
				break;
			}
			setState(4938);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4940);
			match(K_SAVEPOINT);
			setState(4941);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_statementContext extends ParserRuleContext {
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public List<Select_statementContext> select_statement() {
			return getRuleContexts(Select_statementContext.class);
		}
		public Select_statementContext select_statement(int i) {
			return getRuleContext(Select_statementContext.class,i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public With_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWith_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWith_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWith_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_statementContext with_statement() throws RecognitionException {
		With_statementContext _localctx = new With_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_with_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			match(K_WITH);
			setState(4945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(4944);
				hints();
				}
			}

			setState(4947);
			tableReference();
			setState(4948);
			match(K_AS);
			setState(4949);
			match(OPEN_PAREN);
			setState(4950);
			select_statement();
			setState(4951);
			match(CLOSE_PAREN);
			setState(4961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4952);
				match(COMMA);
				setState(4953);
				tableReference();
				setState(4954);
				match(K_AS);
				setState(4955);
				match(OPEN_PAREN);
				setState(4956);
				select_statement();
				setState(4957);
				match(CLOSE_PAREN);
				}
				}
				setState(4963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4964);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class At_epoch_clauseContext extends ParserRuleContext {
		public TerminalNode K_AT() { return getToken(VSqlParser.K_AT, 0); }
		public TerminalNode K_EPOCH() { return getToken(VSqlParser.K_EPOCH, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_LATEST() { return getToken(VSqlParser.K_LATEST, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public At_epoch_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_epoch_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAt_epoch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAt_epoch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAt_epoch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_epoch_clauseContext at_epoch_clause() throws RecognitionException {
		At_epoch_clauseContext _localctx = new At_epoch_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_at_epoch_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				{
				{
				setState(4966);
				match(K_AT);
				setState(4967);
				match(K_EPOCH);
				setState(4970);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_LATEST:
					{
					setState(4968);
					match(K_LATEST);
					}
					break;
				case FLOAT:
				case REAL:
				case DECIMAL:
					{
					setState(4969);
					number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(4972);
				match(K_AT);
				setState(4973);
				match(K_TIME);
				setState(4974);
				string();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<Select_queryContext> select_query() {
			return getRuleContexts(Select_queryContext.class);
		}
		public Select_queryContext select_query(int i) {
			return getRuleContext(Select_queryContext.class,i);
		}
		public At_epoch_clauseContext at_epoch_clause() {
			return getRuleContext(At_epoch_clauseContext.class,0);
		}
		public List<TerminalNode> K_UNION() { return getTokens(VSqlParser.K_UNION); }
		public TerminalNode K_UNION(int i) {
			return getToken(VSqlParser.K_UNION, i);
		}
		public List<TerminalNode> K_ALL() { return getTokens(VSqlParser.K_ALL); }
		public TerminalNode K_ALL(int i) {
			return getToken(VSqlParser.K_ALL, i);
		}
		public List<TerminalNode> K_DISTINCT() { return getTokens(VSqlParser.K_DISTINCT); }
		public TerminalNode K_DISTINCT(int i) {
			return getToken(VSqlParser.K_DISTINCT, i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_select_statement);
		int _la;
		try {
			int _alt;
			setState(4995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4977);
				match(OPEN_PAREN);
				setState(4978);
				select_statement();
				setState(4979);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(4982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_AT) {
					{
					setState(4981);
					at_epoch_clause();
					}
				}

				setState(4984);
				select_query();
				setState(4992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						{
						setState(4985);
						match(K_UNION);
						setState(4987);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==K_ALL || _la==K_DISTINCT) {
							{
							setState(4986);
							_la = _input.LA(1);
							if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(4989);
						select_query();
						}
						}
						} 
					}
					setState(4994);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,637,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_datestyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_DATESTYLE() { return getToken(VSqlParser.K_DATESTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ISO() { return getToken(VSqlParser.K_ISO, 0); }
		public TerminalNode K_GERMAN() { return getToken(VSqlParser.K_GERMAN, 0); }
		public TerminalNode K_SQL() { return getToken(VSqlParser.K_SQL, 0); }
		public TerminalNode K_POSTGRES() { return getToken(VSqlParser.K_POSTGRES, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public TerminalNode K_DMY() { return getToken(VSqlParser.K_DMY, 0); }
		public TerminalNode K_MDY() { return getToken(VSqlParser.K_MDY, 0); }
		public Set_datestyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_datestyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_datestyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_datestyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_datestyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_datestyle_statementContext set_datestyle_statement() throws RecognitionException {
		Set_datestyle_statementContext _localctx = new Set_datestyle_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_set_datestyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4997);
			match(K_SET);
			setState(4998);
			match(K_DATESTYLE);
			setState(4999);
			match(K_TO);
			setState(5012);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ISO:
				{
				setState(5000);
				match(K_ISO);
				}
				break;
			case K_GERMAN:
				{
				setState(5001);
				match(K_GERMAN);
				}
				break;
			case K_SQL:
				{
				{
				setState(5002);
				match(K_SQL);
				setState(5005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5003);
					match(COMMA);
					setState(5004);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			case K_POSTGRES:
				{
				{
				setState(5007);
				match(K_POSTGRES);
				setState(5010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5008);
					match(COMMA);
					setState(5009);
					_la = _input.LA(1);
					if ( !(_la==K_MDY || _la==K_DMY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_escape_string_warning_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ESCAPE_STRING_WARNING() { return getToken(VSqlParser.K_ESCAPE_STRING_WARNING, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_escape_string_warning_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_escape_string_warning_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_escape_string_warning_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_escape_string_warning_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_escape_string_warning_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_escape_string_warning_statementContext set_escape_string_warning_statement() throws RecognitionException {
		Set_escape_string_warning_statementContext _localctx = new Set_escape_string_warning_statementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_set_escape_string_warning_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5014);
			match(K_SET);
			setState(5015);
			match(K_ESCAPE_STRING_WARNING);
			setState(5016);
			match(K_TO);
			setState(5017);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_intervalstyle_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_INTERVALSTYLE() { return getToken(VSqlParser.K_INTERVALSTYLE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_PLAIN() { return getToken(VSqlParser.K_PLAIN, 0); }
		public TerminalNode K_UNITS() { return getToken(VSqlParser.K_UNITS, 0); }
		public Set_intervalstyle_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_intervalstyle_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_intervalstyle_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_intervalstyle_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_intervalstyle_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_intervalstyle_statementContext set_intervalstyle_statement() throws RecognitionException {
		Set_intervalstyle_statementContext _localctx = new Set_intervalstyle_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_set_intervalstyle_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5019);
			match(K_SET);
			setState(5020);
			match(K_INTERVALSTYLE);
			setState(5021);
			match(K_TO);
			setState(5022);
			_la = _input.LA(1);
			if ( !(_la==K_PLAIN || _la==K_UNITS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_locale_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_LOCALE() { return getToken(VSqlParser.K_LOCALE, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public Set_locale_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_locale_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_locale_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_locale_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_locale_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_locale_statementContext set_locale_statement() throws RecognitionException {
		Set_locale_statementContext _localctx = new Set_locale_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_set_locale_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5024);
			match(K_SET);
			setState(5025);
			match(K_LOCALE);
			setState(5026);
			match(K_TO);
			setState(5027);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_role_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_role_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_role_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_role_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_role_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_role_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_role_statementContext set_role_statement() throws RecognitionException {
		Set_role_statementContext _localctx = new Set_role_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_set_role_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			match(K_SET);
			setState(5030);
			match(K_ROLE);
			setState(5052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				{
				setState(5031);
				role();
				setState(5036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5032);
					match(COMMA);
					setState(5033);
					role();
					}
					}
					setState(5038);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(5039);
				match(K_NONE);
				}
				break;
			case 3:
				{
				setState(5040);
				match(K_ALL);
				}
				break;
			case 4:
				{
				{
				setState(5041);
				match(K_ALL);
				setState(5042);
				match(K_EXCEPT);
				{
				setState(5043);
				role();
				setState(5048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5044);
					match(COMMA);
					setState(5045);
					role();
					}
					}
					setState(5050);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				}
				break;
			case 5:
				{
				setState(5051);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_search_path_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public List<SchemaContext> schema() {
			return getRuleContexts(SchemaContext.class);
		}
		public SchemaContext schema(int i) {
			return getRuleContext(SchemaContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_search_path_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_search_path_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_search_path_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_search_path_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_search_path_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_search_path_statementContext set_search_path_statement() throws RecognitionException {
		Set_search_path_statementContext _localctx = new Set_search_path_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_set_search_path_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			match(K_SET);
			setState(5055);
			match(K_SEARCH_PATH);
			setState(5056);
			_la = _input.LA(1);
			if ( !(_la==K_TO || _la==EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				{
				setState(5057);
				schema();
				setState(5062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5058);
					match(COMMA);
					setState(5059);
					schema();
					}
					}
					setState(5064);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				setState(5065);
				match(K_DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_autocommit_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_AUTOCOMMIT() { return getToken(VSqlParser.K_AUTOCOMMIT, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_autocommit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_autocommit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_autocommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_autocommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_autocommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_autocommit_statementContext set_session_autocommit_statement() throws RecognitionException {
		Set_session_autocommit_statementContext _localctx = new Set_session_autocommit_statementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_set_session_autocommit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5068);
			match(K_SET);
			setState(5069);
			match(K_SESSION);
			setState(5070);
			match(K_AUTOCOMMIT);
			setState(5071);
			match(K_TO);
			setState(5072);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_characteristics_as_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_CHARACTERISTICS() { return getToken(VSqlParser.K_CHARACTERISTICS, 0); }
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public List<IsolationLevelContext> isolationLevel() {
			return getRuleContexts(IsolationLevelContext.class);
		}
		public IsolationLevelContext isolationLevel(int i) {
			return getRuleContext(IsolationLevelContext.class,i);
		}
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Set_session_characteristics_as_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_characteristics_as_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_characteristics_as_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_characteristics_as_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_characteristics_as_transaction_statementContext set_session_characteristics_as_transaction_statement() throws RecognitionException {
		Set_session_characteristics_as_transaction_statementContext _localctx = new Set_session_characteristics_as_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_set_session_characteristics_as_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5074);
			match(K_SET);
			setState(5075);
			match(K_SESSION);
			setState(5076);
			match(K_CHARACTERISTICS);
			setState(5077);
			match(K_AS);
			setState(5078);
			match(K_TRANSACTION);
			setState(5087); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(5087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					setState(5080);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5079);
						match(COMMA);
						}
					}

					setState(5082);
					isolationLevel();
					}
					break;
				case 2:
					{
					setState(5084);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5083);
						match(COMMA);
						}
					}

					setState(5086);
					transactionMode();
					}
					break;
				}
				}
				setState(5089); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (K_READ - 471)) | (1L << (K_REPEATABLE - 471)) | (1L << (K_SERIALIZABLE - 471)))) != 0) || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_graceperiod_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_graceperiod_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_graceperiod_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_graceperiod_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_graceperiod_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_graceperiod_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_graceperiod_statementContext set_session_graceperiod_statement() throws RecognitionException {
		Set_session_graceperiod_statementContext _localctx = new Set_session_graceperiod_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_set_session_graceperiod_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			match(K_SET);
			setState(5092);
			match(K_SESSION);
			setState(5093);
			match(K_GRACEPERIOD);
			setState(5098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5094);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5095);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5096);
				match(EQUAL);
				setState(5097);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_idlesessiontimeout_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_idlesessiontimeout_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_idlesessiontimeout_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_idlesessiontimeout_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_idlesessiontimeout_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_idlesessiontimeout_statementContext set_session_idlesessiontimeout_statement() throws RecognitionException {
		Set_session_idlesessiontimeout_statementContext _localctx = new Set_session_idlesessiontimeout_statementContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_set_session_idlesessiontimeout_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			match(K_SET);
			setState(5101);
			match(K_SESSION);
			setState(5102);
			match(K_IDLESESSIONTIMEOUT);
			setState(5107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5103);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5104);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5105);
				match(EQUAL);
				setState(5106);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_memorycap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_memorycap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_memorycap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_memorycap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_memorycap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_memorycap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_memorycap_statementContext set_session_memorycap_statement() throws RecognitionException {
		Set_session_memorycap_statementContext _localctx = new Set_session_memorycap_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_set_session_memorycap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			match(K_SET);
			setState(5110);
			match(K_SESSION);
			setState(5111);
			match(K_MEMORYCAP);
			setState(5116);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5112);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5113);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5114);
				match(EQUAL);
				setState(5115);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_multipleactiveresultsets_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_MULTIPLEACTIVERESULTSETS() { return getToken(VSqlParser.K_MULTIPLEACTIVERESULTSETS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_session_multipleactiveresultsets_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_multipleactiveresultsets_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_multipleactiveresultsets_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_multipleactiveresultsets_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_multipleactiveresultsets_statementContext set_session_multipleactiveresultsets_statement() throws RecognitionException {
		Set_session_multipleactiveresultsets_statementContext _localctx = new Set_session_multipleactiveresultsets_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_set_session_multipleactiveresultsets_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5118);
			match(K_SET);
			setState(5119);
			match(K_SESSION);
			setState(5120);
			match(K_MULTIPLEACTIVERESULTSETS);
			setState(5121);
			match(K_TO);
			setState(5122);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_resource_pool_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RESOURCE_POOL() { return getToken(VSqlParser.K_RESOURCE_POOL, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_resource_pool_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_resource_pool_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_resource_pool_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_resource_pool_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_resource_pool_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_resource_pool_statementContext set_session_resource_pool_statement() throws RecognitionException {
		Set_session_resource_pool_statementContext _localctx = new Set_session_resource_pool_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_set_session_resource_pool_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			match(K_SET);
			setState(5125);
			match(K_SESSION);
			setState(5126);
			match(K_RESOURCE_POOL);
			setState(5127);
			match(EQUAL);
			setState(5130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5128);
				value();
				}
				break;
			case K_DEFAULT:
				{
				{
				setState(5129);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_runtimecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public Set_session_runtimecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_runtimecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_runtimecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_runtimecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_runtimecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_runtimecap_statementContext set_session_runtimecap_statement() throws RecognitionException {
		Set_session_runtimecap_statementContext _localctx = new Set_session_runtimecap_statementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_set_session_runtimecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5132);
			match(K_SET);
			setState(5133);
			match(K_SESSION);
			setState(5134);
			match(K_RUNTIMECAP);
			setState(5139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5135);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5136);
				match(K_NONE);
				}
				break;
			case EQUAL:
				{
				{
				setState(5137);
				match(EQUAL);
				setState(5138);
				match(K_DEFAULT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_session_tempspacecap_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_NONE() { return getToken(VSqlParser.K_NONE, 0); }
		public Set_session_tempspacecap_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_session_tempspacecap_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_session_tempspacecap_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_session_tempspacecap_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_session_tempspacecap_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_session_tempspacecap_statementContext set_session_tempspacecap_statement() throws RecognitionException {
		Set_session_tempspacecap_statementContext _localctx = new Set_session_tempspacecap_statementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_set_session_tempspacecap_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(K_SET);
			setState(5142);
			match(K_SESSION);
			setState(5143);
			match(K_TEMPSPACECAP);
			setState(5146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				setState(5144);
				value();
				}
				break;
			case K_NONE:
				{
				setState(5145);
				match(K_NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_standard_conforming_strings_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_STANDARD_CONFORMING_STRINGS() { return getToken(VSqlParser.K_STANDARD_CONFORMING_STRINGS, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public Set_standard_conforming_strings_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_standard_conforming_strings_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_standard_conforming_strings_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_standard_conforming_strings_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_standard_conforming_strings_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_standard_conforming_strings_statementContext set_standard_conforming_strings_statement() throws RecognitionException {
		Set_standard_conforming_strings_statementContext _localctx = new Set_standard_conforming_strings_statementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_set_standard_conforming_strings_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5148);
			match(K_SET);
			setState(5149);
			match(K_STANDARD_CONFORMING_STRINGS);
			setState(5150);
			match(K_TO);
			setState(5151);
			_la = _input.LA(1);
			if ( !(_la==K_ON || _la==K_OFF) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_time_zone_statementContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_ZONE() { return getToken(VSqlParser.K_ZONE, 0); }
		public Set_time_zone_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_time_zone_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_time_zone_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_time_zone_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_time_zone_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_time_zone_statementContext set_time_zone_statement() throws RecognitionException {
		Set_time_zone_statementContext _localctx = new Set_time_zone_statementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_set_time_zone_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5153);
			match(K_SET);
			setState(5157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_TIME:
				{
				{
				setState(5154);
				match(K_TIME);
				setState(5155);
				match(K_ZONE);
				}
				}
				break;
			case K_TIMEZONE:
				{
				setState(5156);
				match(K_TIMEZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5159);
			match(K_TO);
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_INTERVAL) {
				{
				setState(5160);
				match(K_INTERVAL);
				}
			}

			setState(5163);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public Show_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_statementContext show_statement() throws RecognitionException {
		Show_statementContext _localctx = new Show_statementContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_show_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5165);
			match(K_SHOW);
			setState(5168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5166);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5167);
				param();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_current_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_CURRENT() { return getToken(VSqlParser.K_CURRENT, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_current_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_current_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_current_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_current_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_current_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_current_statementContext show_current_statement() throws RecognitionException {
		Show_current_statementContext _localctx = new Show_current_statementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_show_current_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(K_SHOW);
			setState(5171);
			match(K_CURRENT);
			setState(5174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5172);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5173);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_database_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_database_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_database_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_database_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_database_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_database_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_database_statementContext show_database_statement() throws RecognitionException {
		Show_database_statementContext _localctx = new Show_database_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_show_database_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			match(K_SHOW);
			setState(5177);
			match(K_DATABASE);
			setState(5178);
			dbname();
			setState(5181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5179);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5180);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_node_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public NodeContext node() {
			return getRuleContext(NodeContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public Show_node_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_node_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_node_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_node_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_node_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_node_statementContext show_node_statement() throws RecognitionException {
		Show_node_statementContext _localctx = new Show_node_statementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_show_node_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183);
			match(K_SHOW);
			setState(5184);
			match(K_NODE);
			setState(5185);
			node();
			setState(5188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5186);
				match(K_ALL);
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5187);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_session_statementContext extends ParserRuleContext {
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public ParamsContext params() {
			return getRuleContext(ParamsContext.class,0);
		}
		public TerminalNode K_UDPARAMETERS() { return getToken(VSqlParser.K_UDPARAMETERS, 0); }
		public Show_session_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_session_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterShow_session_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitShow_session_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitShow_session_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_session_statementContext show_session_statement() throws RecognitionException {
		Show_session_statementContext _localctx = new Show_session_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_show_session_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(K_SHOW);
			setState(5191);
			match(K_SESSION);
			setState(5196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALL:
				{
				setState(5192);
				match(K_ALL);
				}
				break;
			case K_UDPARAMETERS:
				{
				{
				setState(5193);
				match(K_UDPARAMETERS);
				setState(5194);
				match(K_ALL);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				{
				setState(5195);
				params();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_transaction_statementContext extends ParserRuleContext {
		public TerminalNode K_START() { return getToken(VSqlParser.K_START, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TransactionModeContext transactionMode() {
			return getRuleContext(TransactionModeContext.class,0);
		}
		public Start_transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterStart_transaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitStart_transaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitStart_transaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_transaction_statementContext start_transaction_statement() throws RecognitionException {
		Start_transaction_statementContext _localctx = new Start_transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_start_transaction_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5198);
			match(K_START);
			setState(5199);
			match(K_TRANSACTION);
			setState(5205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ISOLATION) {
				{
				setState(5200);
				match(K_ISOLATION);
				setState(5201);
				match(K_LEVEL);
				setState(5202);
				isolationLevel();
				setState(5203);
				transactionMode();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_table_statementContext extends ParserRuleContext {
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public Truncate_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTruncate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTruncate_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTruncate_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_table_statementContext truncate_table_statement() throws RecognitionException {
		Truncate_table_statementContext _localctx = new Truncate_table_statementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_truncate_table_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			match(K_TRUNCATE);
			setState(5208);
			match(K_TABLE);
			setState(5209);
			tableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5211);
			match(K_UPDATE);
			setState(5213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5212);
				hints();
				}
			}

			setState(5215);
			tableReference();
			setState(5217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5216);
				alias();
				}
				break;
			}
			setState(5219);
			match(K_SET);
			setState(5220);
			expressions();
			setState(5222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_FROM) {
				{
				setState(5221);
				from_clause();
				}
			}

			setState(5225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_WHERE) {
				{
				setState(5224);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_select_query_clauseContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Simple_select_query_clauseContext simple_select_query_clause() {
			return getRuleContext(Simple_select_query_clauseContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Simple_select_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_select_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSimple_select_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSimple_select_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSimple_select_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_select_query_clauseContext simple_select_query_clause() throws RecognitionException {
		Simple_select_query_clauseContext _localctx = new Simple_select_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_simple_select_query_clause);
		try {
			setState(5234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5227);
				match(OPEN_PAREN);
				setState(5228);
				simple_select_query_clause();
				setState(5229);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5231);
				select_clause();
				setState(5232);
				from_clause();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_queryContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Timeseries_clauseContext timeseries_clause() {
			return getRuleContext(Timeseries_clauseContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Match_clauseContext match_clause() {
			return getRuleContext(Match_clauseContext.class,0);
		}
		public TerminalNode K_UNION() { return getToken(VSqlParser.K_UNION, 0); }
		public Except_clauseContext except_clause() {
			return getRuleContext(Except_clauseContext.class,0);
		}
		public Intersect_clauseContext intersect_clause() {
			return getRuleContext(Intersect_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Offset_clauseContext offset_clause() {
			return getRuleContext(Offset_clauseContext.class,0);
		}
		public TerminalNode K_FOR() { return getToken(VSqlParser.K_FOR, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_OF() { return getToken(VSqlParser.K_OF, 0); }
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Select_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_queryContext select_query() throws RecognitionException {
		Select_queryContext _localctx = new Select_queryContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_select_query);
		int _la;
		try {
			int _alt;
			setState(5298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5236);
				match(OPEN_PAREN);
				setState(5237);
				select_query();
				setState(5238);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SELECT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5240);
				select_clause();
				setState(5242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
				case 1:
					{
					setState(5241);
					into_clause();
					}
					break;
				}
				setState(5245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5244);
					from_clause();
					}
					break;
				}
				setState(5248);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5247);
					where_clause();
					}
					break;
				}
				setState(5251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5250);
					timeseries_clause();
					}
					break;
				}
				setState(5254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5253);
					groupBy_clause();
					}
					break;
				}
				setState(5257);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5256);
					having_clause();
					}
					break;
				}
				setState(5260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(5259);
					match_clause();
					}
					break;
				}
				setState(5266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5262);
					match(K_UNION);
					setState(5264);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
					case 1:
						{
						setState(5263);
						_la = _input.LA(1);
						if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				}
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5268);
					except_clause();
					}
					break;
				}
				setState(5272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5271);
					intersect_clause();
					}
					break;
				}
				setState(5275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(5274);
					orderby_clause();
					}
					break;
				}
				setState(5278);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5277);
					limit_clause();
					}
					break;
				}
				setState(5281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5280);
					offset_clause();
					}
					break;
				}
				setState(5296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5283);
					match(K_FOR);
					setState(5284);
					match(K_UPDATE);
					setState(5294);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
					case 1:
						{
						setState(5285);
						match(K_OF);
						setState(5286);
						tableReference();
						setState(5291);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,684,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(5287);
								match(COMMA);
								setState(5288);
								tableReference();
								}
								} 
							}
							setState(5293);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,684,_ctx);
						}
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Offset_clauseContext extends ParserRuleContext {
		public TerminalNode K_OFFSET() { return getToken(VSqlParser.K_OFFSET, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public Offset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOffset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOffset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOffset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Offset_clauseContext offset_clause() throws RecognitionException {
		Offset_clauseContext _localctx = new Offset_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_offset_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5300);
			match(K_OFFSET);
			setState(5301);
			integerNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode K_LIMIT() { return getToken(VSqlParser.K_LIMIT, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5303);
			match(K_LIMIT);
			setState(5306);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				{
				setState(5304);
				integerNumber();
				}
				break;
			case K_ALL:
				{
				setState(5305);
				match(K_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_clauseContext extends ParserRuleContext {
		public TerminalNode K_SELECT() { return getToken(VSqlParser.K_SELECT, 0); }
		public ElementsContext elements() {
			return getRuleContext(ElementsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_select_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5308);
			match(K_SELECT);
			setState(5310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5309);
				hints();
				}
			}

			setState(5313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ALL || _la==K_DISTINCT) {
				{
				setState(5312);
				_la = _input.LA(1);
				if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5315);
			elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Intersect_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTERSECT() { return getToken(VSqlParser.K_INTERSECT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Intersect_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intersect_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntersect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntersect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntersect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Intersect_clauseContext intersect_clause() throws RecognitionException {
		Intersect_clauseContext _localctx = new Intersect_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_intersect_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			match(K_INTERSECT);
			setState(5318);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Except_clauseContext extends ParserRuleContext {
		public TerminalNode K_EXCEPT() { return getToken(VSqlParser.K_EXCEPT, 0); }
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public Except_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_except_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExcept_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExcept_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExcept_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Except_clauseContext except_clause() throws RecognitionException {
		Except_clauseContext _localctx = new Except_clauseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_except_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5320);
			match(K_EXCEPT);
			setState(5321);
			select_query();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode K_FROM() { return getToken(VSqlParser.K_FROM, 0); }
		public List<DatasetContext> dataset() {
			return getRuleContexts(DatasetContext.class);
		}
		public DatasetContext dataset(int i) {
			return getRuleContext(DatasetContext.class,i);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_from_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			match(K_FROM);
			{
			setState(5324);
			dataset();
			setState(5331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,692,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5326);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5325);
						match(COMMA);
						}
					}

					setState(5328);
					dataset();
					}
					} 
				}
				setState(5333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,692,_ctx);
			}
			}
			setState(5335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5334);
				tableSample();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode K_INTO() { return getToken(VSqlParser.K_INTO, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_TABLE() { return getToken(VSqlParser.K_TABLE, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_into_clause);
		int _la;
		try {
			setState(5360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5337);
				match(K_INTO);
				setState(5339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(5338);
					match(K_TABLE);
					}
				}

				setState(5341);
				tableReference();
				setState(5343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5342);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(K_INTO);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_GLOBAL || _la==K_LOCAL) {
					{
					setState(5346);
					_la = _input.LA(1);
					if ( !(_la==K_GLOBAL || _la==K_LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5349);
				_la = _input.LA(1);
				if ( !(_la==K_TEMP || _la==K_TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_TABLE) {
					{
					setState(5350);
					match(K_TABLE);
					}
				}

				setState(5353);
				tableReference();
				setState(5358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
				case 1:
					{
					setState(5354);
					match(K_ON);
					setState(5355);
					match(K_COMMIT);
					setState(5356);
					_la = _input.LA(1);
					if ( !(_la==K_DELETE || _la==K_PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5357);
					match(K_ROWS);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timeseries_clauseContext extends ParserRuleContext {
		public TerminalNode K_TIMESERIES() { return getToken(VSqlParser.K_TIMESERIES, 0); }
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Timeseries_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeseries_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTimeseries_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTimeseries_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTimeseries_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timeseries_clauseContext timeseries_clause() throws RecognitionException {
		Timeseries_clauseContext _localctx = new Timeseries_clauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_timeseries_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			match(K_TIMESERIES);
			setState(5363);
			columnReference();
			setState(5364);
			alias();
			setState(5365);
			over_clause();
			setState(5366);
			match(K_ORDER);
			setState(5367);
			match(K_BY);
			setState(5368);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode K_OVER() { return getToken(VSqlParser.K_OVER, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public As_over_clauseContext as_over_clause() {
			return getRuleContext(As_over_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5370);
			match(K_OVER);
			setState(5371);
			match(OPEN_PAREN);
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5372);
				match(K_PARTITION);
				setState(5373);
				match(K_BY);
				setState(5374);
				columns();
				}
			}

			setState(5378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ORDER) {
				{
				setState(5377);
				orderby_clause();
				}
			}

			setState(5380);
			match(CLOSE_PAREN);
			setState(5382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(5381);
				as_over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_over_clauseContext extends ParserRuleContext {
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public As_over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAs_over_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAs_over_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAs_over_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_over_clauseContext as_over_clause() throws RecognitionException {
		As_over_clauseContext _localctx = new As_over_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_as_over_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			match(K_AS);
			setState(5385);
			columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupBy_clauseContext extends ParserRuleContext {
		public TerminalNode K_GROUP() { return getToken(VSqlParser.K_GROUP, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public GroupBy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBy_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterGroupBy_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitGroupBy_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitGroupBy_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupBy_clauseContext groupBy_clause() throws RecognitionException {
		GroupBy_clauseContext _localctx = new GroupBy_clauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_groupBy_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			match(K_GROUP);
			setState(5388);
			match(K_BY);
			setState(5390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5389);
				hints();
				}
			}

			setState(5392);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode K_HAVING() { return getToken(VSqlParser.K_HAVING, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			match(K_HAVING);
			setState(5395);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode K_WHERE() { return getToken(VSqlParser.K_WHERE, 0); }
		public PredicatesContext predicates() {
			return getRuleContext(PredicatesContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5397);
			match(K_WHERE);
			setState(5398);
			predicates();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public List<OrderbyItemContext> orderbyItem() {
			return getRuleContexts(OrderbyItemContext.class);
		}
		public OrderbyItemContext orderbyItem(int i) {
			return getRuleContext(OrderbyItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderby_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderby_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_orderby_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5400);
			match(K_ORDER);
			setState(5401);
			match(K_BY);
			setState(5402);
			orderbyItem();
			setState(5407);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,704,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5403);
					match(COMMA);
					setState(5404);
					orderbyItem();
					}
					} 
				}
				setState(5409);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,704,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Match_clauseContext extends ParserRuleContext {
		public List<TerminalNode> K_MATCH() { return getTokens(VSqlParser.K_MATCH); }
		public TerminalNode K_MATCH(int i) {
			return getToken(VSqlParser.K_MATCH, i);
		}
		public List<TerminalNode> OPEN_PAREN() { return getTokens(VSqlParser.OPEN_PAREN); }
		public TerminalNode OPEN_PAREN(int i) {
			return getToken(VSqlParser.OPEN_PAREN, i);
		}
		public TerminalNode K_ORDER() { return getToken(VSqlParser.K_ORDER, 0); }
		public List<TerminalNode> K_BY() { return getTokens(VSqlParser.K_BY); }
		public TerminalNode K_BY(int i) {
			return getToken(VSqlParser.K_BY, i);
		}
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_DEFINE() { return getToken(VSqlParser.K_DEFINE, 0); }
		public TerminalNode K_PATTERN() { return getToken(VSqlParser.K_PATTERN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> K_AS() { return getTokens(VSqlParser.K_AS); }
		public TerminalNode K_AS(int i) {
			return getToken(VSqlParser.K_AS, i);
		}
		public List<TerminalNode> CLOSE_PAREN() { return getTokens(VSqlParser.CLOSE_PAREN); }
		public TerminalNode CLOSE_PAREN(int i) {
			return getToken(VSqlParser.CLOSE_PAREN, i);
		}
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_EVENTS() { return getToken(VSqlParser.K_EVENTS, 0); }
		public TerminalNode K_FIRST() { return getToken(VSqlParser.K_FIRST, 0); }
		public TerminalNode K_EVENT() { return getToken(VSqlParser.K_EVENT, 0); }
		public Match_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMatch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMatch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMatch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_clauseContext match_clause() throws RecognitionException {
		Match_clauseContext _localctx = new Match_clauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_match_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5410);
			match(K_MATCH);
			setState(5411);
			match(OPEN_PAREN);
			setState(5422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_PARTITION) {
				{
				setState(5412);
				match(K_PARTITION);
				setState(5413);
				match(K_BY);
				setState(5414);
				columnReference();
				setState(5419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5415);
					match(COMMA);
					setState(5416);
					columnReference();
					}
					}
					setState(5421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5424);
			match(K_ORDER);
			setState(5425);
			match(K_BY);
			setState(5426);
			columnReference();
			setState(5431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5427);
				match(COMMA);
				setState(5428);
				columnReference();
				}
				}
				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5434);
			match(K_DEFINE);
			{
			setState(5435);
			id();
			setState(5436);
			match(K_AS);
			setState(5439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(5437);
				expression();
				}
				break;
			case 2:
				{
				setState(5438);
				predicates();
				}
				break;
			}
			}
			setState(5450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5441);
				match(COMMA);
				{
				setState(5442);
				id();
				setState(5443);
				match(K_AS);
				setState(5446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(5444);
					expression();
					}
					break;
				case 2:
					{
					setState(5445);
					predicates();
					}
					break;
				}
				}
				}
				}
				setState(5452);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5453);
			match(K_PATTERN);
			setState(5454);
			id();
			setState(5455);
			match(K_AS);
			setState(5456);
			match(OPEN_PAREN);
			setState(5457);
			id();
			setState(5458);
			match(CLOSE_PAREN);
			setState(5468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ROWS) {
				{
				{
				setState(5459);
				match(K_ROWS);
				setState(5460);
				match(K_MATCH);
				}
				setState(5466);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case K_ALL:
					{
					{
					setState(5462);
					match(K_ALL);
					setState(5463);
					match(K_EVENTS);
					}
					}
					break;
				case K_FIRST:
					{
					{
					setState(5464);
					match(K_FIRST);
					setState(5465);
					match(K_EVENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5470);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_clauseContext extends ParserRuleContext {
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupBy_clauseContext groupBy_clause() {
			return getRuleContext(GroupBy_clauseContext.class,0);
		}
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPartition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPartition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPartition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_clauseContext partition_clause() throws RecognitionException {
		Partition_clauseContext _localctx = new Partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_partition_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5472);
			match(K_PARTITION);
			setState(5473);
			match(K_BY);
			setState(5474);
			expression();
			setState(5476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_GROUP) {
				{
				setState(5475);
				groupBy_clause();
				}
			}

			setState(5480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ACTIVEPARTITIONCOUNT) {
				{
				setState(5478);
				match(K_ACTIVEPARTITIONCOUNT);
				setState(5479);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encoding_clauseContext extends ParserRuleContext {
		public TerminalNode K_ENCODING() { return getToken(VSqlParser.K_ENCODING, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_BLOCK_DICT() { return getToken(VSqlParser.K_BLOCK_DICT, 0); }
		public TerminalNode K_BLOCKDICT_COMP() { return getToken(VSqlParser.K_BLOCKDICT_COMP, 0); }
		public TerminalNode K_BZIP_COMP() { return getToken(VSqlParser.K_BZIP_COMP, 0); }
		public TerminalNode K_COMMONDELTA_COMP() { return getToken(VSqlParser.K_COMMONDELTA_COMP, 0); }
		public TerminalNode K_DELTARANGE_COMP() { return getToken(VSqlParser.K_DELTARANGE_COMP, 0); }
		public TerminalNode K_DELTAVAL() { return getToken(VSqlParser.K_DELTAVAL, 0); }
		public TerminalNode K_GCDDELTA() { return getToken(VSqlParser.K_GCDDELTA, 0); }
		public TerminalNode K_GZIP_COMP() { return getToken(VSqlParser.K_GZIP_COMP, 0); }
		public TerminalNode K_RLE() { return getToken(VSqlParser.K_RLE, 0); }
		public Encoding_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEncoding_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEncoding_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEncoding_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encoding_clauseContext encoding_clause() throws RecognitionException {
		Encoding_clauseContext _localctx = new Encoding_clauseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_encoding_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			match(K_ENCODING);
			setState(5483);
			_la = _input.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (K_AUTO - 173)) | (1L << (K_BLOCK_DICT - 173)) | (1L << (K_BLOCKDICT_COMP - 173)) | (1L << (K_BZIP_COMP - 173)) | (1L << (K_COMMONDELTA_COMP - 173)))) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (K_DELTARANGE_COMP - 242)) | (1L << (K_DELTAVAL - 242)) | (1L << (K_GCDDELTA - 242)))) != 0) || _la==K_GZIP_COMP || _la==K_RLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Owner_clauseContext extends ParserRuleContext {
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public Owner_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Owner_clauseContext owner_clause() throws RecognitionException {
		Owner_clauseContext _localctx = new Owner_clauseContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_owner_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5485);
			match(K_OWNER);
			setState(5486);
			match(K_TO);
			setState(5487);
			owner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rename_clauseContext extends ParserRuleContext {
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public Rename_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rename_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRename_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRename_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRename_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rename_clauseContext rename_clause() throws RecognitionException {
		Rename_clauseContext _localctx = new Rename_clauseContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_rename_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5489);
			match(K_RENAME);
			setState(5490);
			match(K_TO);
			setState(5491);
			values();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schema_clauseContext extends ParserRuleContext {
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SCHEMA() { return getToken(VSqlParser.K_SCHEMA, 0); }
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public Set_schema_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSet_schema_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSet_schema_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSet_schema_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schema_clauseContext set_schema_clause() throws RecognitionException {
		Set_schema_clauseContext _localctx = new Set_schema_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_set_schema_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5493);
			match(K_SET);
			setState(5494);
			match(K_SCHEMA);
			setState(5495);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderbyItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_ASC() { return getToken(VSqlParser.K_ASC, 0); }
		public TerminalNode K_DESC() { return getToken(VSqlParser.K_DESC, 0); }
		public OrderbyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderbyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOrderbyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOrderbyItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOrderbyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderbyItemContext orderbyItem() throws RecognitionException {
		OrderbyItemContext _localctx = new OrderbyItemContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_orderbyItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			expression();
			setState(5499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5498);
				_la = _input.LA(1);
				if ( !(_la==K_ASC || _la==K_DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicatesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public List<TerminalNode> K_NOT() { return getTokens(VSqlParser.K_NOT); }
		public TerminalNode K_NOT(int i) {
			return getToken(VSqlParser.K_NOT, i);
		}
		public PredicatesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicates; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicates(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicates(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicates(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicatesContext predicates() throws RecognitionException {
		PredicatesContext _localctx = new PredicatesContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_predicates);
		int _la;
		try {
			int _alt;
			setState(5516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5501);
				match(OPEN_PAREN);
				setState(5502);
				predicates();
				setState(5503);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5507);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5505);
					expression();
					}
					break;
				case 2:
					{
					setState(5506);
					predicate();
					}
					break;
				}
				setState(5513);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5509);
						_la = _input.LA(1);
						if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5510);
						predicates();
						}
						} 
					}
					setState(5515);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,717,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSampleContext extends ParserRuleContext {
		public TerminalNode K_TABLESAMPLE() { return getToken(VSqlParser.K_TABLESAMPLE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TableSampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSampleContext tableSample() throws RecognitionException {
		TableSampleContext _localctx = new TableSampleContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_tableSample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			match(K_TABLESAMPLE);
			setState(5519);
			match(OPEN_PAREN);
			setState(5520);
			match(FLOAT);
			setState(5521);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatasetContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public DatasetContext dataset() {
			return getRuleContext(DatasetContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public DatasetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatasetContext dataset() throws RecognitionException {
		DatasetContext _localctx = new DatasetContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_dataset);
		try {
			setState(5537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5523);
				match(OPEN_PAREN);
				setState(5524);
				dataset();
				setState(5525);
				match(CLOSE_PAREN);
				setState(5527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5526);
					alias();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5529);
					select_statement();
					}
					break;
				case 2:
					{
					setState(5530);
					joinedTable();
					}
					break;
				case 3:
					{
					setState(5531);
					tableReference();
					}
					break;
				}
				setState(5535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5534);
					alias();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode K_JOIN() { return getToken(VSqlParser.K_JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode K_INNER() { return getToken(VSqlParser.K_INNER, 0); }
		public TerminalNode K_NATURAL() { return getToken(VSqlParser.K_NATURAL, 0); }
		public TerminalNode K_CROSS() { return getToken(VSqlParser.K_CROSS, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public HintsContext hints() {
			return getRuleContext(HintsContext.class,0);
		}
		public TableSampleContext tableSample() {
			return getRuleContext(TableSampleContext.class,0);
		}
		public JoinPredicateContext joinPredicate() {
			return getRuleContext(JoinPredicateContext.class,0);
		}
		public TerminalNode K_LEFT() { return getToken(VSqlParser.K_LEFT, 0); }
		public TerminalNode K_RIGHT() { return getToken(VSqlParser.K_RIGHT, 0); }
		public TerminalNode K_FULL() { return getToken(VSqlParser.K_FULL, 0); }
		public TerminalNode K_OUTER() { return getToken(VSqlParser.K_OUTER, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_joinedTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_INNER:
				{
				setState(5539);
				match(K_INNER);
				}
				break;
			case K_LEFT:
				{
				{
				setState(5540);
				match(K_LEFT);
				setState(5542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5541);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_RIGHT:
				{
				{
				setState(5544);
				match(K_RIGHT);
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5545);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_FULL:
				{
				{
				setState(5548);
				match(K_FULL);
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_OUTER) {
					{
					setState(5549);
					match(K_OUTER);
					}
				}

				}
				}
				break;
			case K_NATURAL:
				{
				setState(5552);
				match(K_NATURAL);
				}
				break;
			case K_CROSS:
				{
				setState(5553);
				match(K_CROSS);
				}
				break;
			case K_JOIN:
				break;
			default:
				break;
			}
			setState(5556);
			match(K_JOIN);
			setState(5557);
			tableReference();
			setState(5559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
			case 1:
				{
				setState(5558);
				alias();
				}
				break;
			}
			setState(5562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_HINT) {
				{
				setState(5561);
				hints();
				}
			}

			setState(5565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(5564);
				tableSample();
				}
				break;
			}
			setState(5568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				{
				setState(5567);
				joinPredicate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementsContext extends ParserRuleContext {
		public List<ElementContext> element() {
			return getRuleContexts(ElementContext.class);
		}
		public ElementContext element(int i) {
			return getRuleContext(ElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementsContext elements() throws RecognitionException {
		ElementsContext _localctx = new ElementsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_elements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			element();
			setState(5575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,731,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5571);
					match(COMMA);
					setState(5572);
					element();
					}
					} 
				}
				setState(5577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,731,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementContext extends ParserRuleContext {
		public AsteriskExpContext asteriskExp() {
			return getRuleContext(AsteriskExpContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementContext element() throws RecognitionException {
		ElementContext _localctx = new ElementContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(5578);
				asteriskExp();
				}
				break;
			case K_ANY:
			case K_ARRAY:
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CASE:
			case K_CAST:
			case K_CHAR:
			case K_DECIMAL:
			case K_DEFAULT:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SELECT:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
			case K_HASH:
			case OPEN_PAREN:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				{
				{
				setState(5579);
				expression();
				setState(5581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5580);
					alias();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElContext extends ParserRuleContext {
		public ElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_el; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElContext el() throws RecognitionException {
		ElContext _localctx = new ElContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_el);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5587);
			expression();
			}
			setState(5592);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5588);
					match(COMMA);
					{
					setState(5589);
					expression();
					}
					}
					} 
				}
				setState(5594);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,734,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastExprContext extends ParserRuleContext {
		public TerminalNode DCOLON() { return getToken(VSqlParser.DCOLON, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public CastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCastExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCastExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCastExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastExprContext castExpr() throws RecognitionException {
		CastExprContext _localctx = new CastExprContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_castExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5595);
			match(DCOLON);
			setState(5596);
			dataTypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastOperatorContext extends ParserRuleContext {
		public TerminalNode K_CAST() { return getToken(VSqlParser.K_CAST, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public DataTypesContext dataTypes() {
			return getRuleContext(DataTypesContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public CastOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCastOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCastOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCastOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastOperatorContext castOperator() throws RecognitionException {
		CastOperatorContext _localctx = new CastOperatorContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_castOperator);
		try {
			setState(5608);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_CAST:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5598);
				match(K_CAST);
				setState(5599);
				match(OPEN_PAREN);
				setState(5600);
				expression();
				setState(5601);
				match(K_AS);
				setState(5602);
				dataTypes();
				setState(5603);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CHAR:
			case K_DECIMAL:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_BYTEA:
			case K_DOUBLE:
			case K_IDENTITY:
			case K_LONG:
			case K_RAW:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5605);
				dataTypes();
				setState(5606);
				string();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CastExprContext castExpr() {
			return getRuleContext(CastExprContext.class,0);
		}
		public CastOperatorContext castOperator() {
			return getRuleContext(CastOperatorContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public ColumnReferenceContext columnReference() {
			return getRuleContext(ColumnReferenceContext.class,0);
		}
		public CaseExpContext caseExp() {
			return getRuleContext(CaseExpContext.class,0);
		}
		public Select_queryContext select_query() {
			return getRuleContext(Select_queryContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public List<OperatorContext> operator() {
			return getRuleContexts(OperatorContext.class);
		}
		public OperatorContext operator(int i) {
			return getRuleContext(OperatorContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_expression);
		try {
			int _alt;
			setState(5637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5610);
				match(OPEN_PAREN);
				{
				setState(5611);
				expression();
				}
				setState(5612);
				match(CLOSE_PAREN);
				setState(5614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5613);
					castExpr();
					}
					break;
				}
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5616);
					castOperator();
					}
					break;
				case 2:
					{
					setState(5617);
					functionCall();
					}
					break;
				case 3:
					{
					setState(5618);
					arrayExpr();
					}
					break;
				case 4:
					{
					setState(5619);
					number();
					}
					break;
				case 5:
					{
					setState(5620);
					columnReference();
					}
					break;
				case 6:
					{
					setState(5621);
					caseExp();
					}
					break;
				case 7:
					{
					setState(5622);
					select_query();
					}
					break;
				case 8:
					{
					setState(5623);
					value();
					}
					break;
				}
				setState(5627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
				case 1:
					{
					setState(5626);
					castExpr();
					}
					break;
				}
				setState(5634);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,739,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5629);
						operator();
						setState(5630);
						expression();
						}
						} 
					}
					setState(5636);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,739,_ctx);
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode K_ARRAY() { return getToken(VSqlParser.K_ARRAY, 0); }
		public TerminalNode OPEN_SQUARE_BRACKET() { return getToken(VSqlParser.OPEN_SQUARE_BRACKET, 0); }
		public TerminalNode CLOSE_SQUARE_BRACKET() { return getToken(VSqlParser.CLOSE_SQUARE_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_arrayExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5639);
			match(K_ARRAY);
			setState(5640);
			match(OPEN_SQUARE_BRACKET);
			setState(5649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (K_ANY - 3)) | (1L << (K_ARRAY - 3)) | (1L << (K_BIGINT - 3)) | (1L << (K_BINARY - 3)) | (1L << (K_BOOLEAN - 3)) | (1L << (K_CASE - 3)) | (1L << (K_CAST - 3)) | (1L << (K_CHAR - 3)) | (1L << (K_DECIMAL - 3)) | (1L << (K_DEFAULT - 3)) | (1L << (K_FLOAT - 3)) | (1L << (K_INT - 3)) | (1L << (K_INTEGER - 3)) | (1L << (K_INTERVAL - 3)))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (K_MONEY - 80)) | (1L << (K_NUMBER - 80)) | (1L << (K_NUMERIC - 80)) | (1L << (K_REAL - 80)) | (1L << (K_SELECT - 80)) | (1L << (K_SMALLDATETIME - 80)) | (1L << (K_SMALLINT - 80)) | (1L << (K_TIME - 80)) | (1L << (K_TIMESTAMP - 80)) | (1L << (K_TIMESTAMPTZ - 80)) | (1L << (K_TINYINT - 80)) | (1L << (K_UUID - 80)) | (1L << (K_VARBINARY - 80)) | (1L << (K_VARCHAR - 80)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)) | (1L << (K_INT8 - 598)) | (1L << (K_FLOAT8 - 598)) | (1L << (K_GEOMETRY - 598)) | (1L << (K_GEOGRAPHY - 598)) | (1L << (K_DATE - 598)) | (1L << (K_HASH - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (FLOAT - 663)) | (1L << (REAL - 663)) | (1L << (DECIMAL - 663)) | (1L << (ANY - 663)))) != 0)) {
				{
				setState(5641);
				expression();
				setState(5646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5642);
					match(COMMA);
					setState(5643);
					expression();
					}
					}
					setState(5648);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5651);
			match(CLOSE_SQUARE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public BetweenPredicateContext betweenPredicate() {
			return getRuleContext(BetweenPredicateContext.class,0);
		}
		public BooleanPredicateContext booleanPredicate() {
			return getRuleContext(BooleanPredicateContext.class,0);
		}
		public ColumnValuePredicateContext columnValuePredicate() {
			return getRuleContext(ColumnValuePredicateContext.class,0);
		}
		public InPredicateContext inPredicate() {
			return getRuleContext(InPredicateContext.class,0);
		}
		public InterpolatePredicateContext interpolatePredicate() {
			return getRuleContext(InterpolatePredicateContext.class,0);
		}
		public LikePredicateContext likePredicate() {
			return getRuleContext(LikePredicateContext.class,0);
		}
		public NullPredicateContext nullPredicate() {
			return getRuleContext(NullPredicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_predicate);
		try {
			setState(5660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5653);
				betweenPredicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5654);
				booleanPredicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5655);
				columnValuePredicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5656);
				inPredicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5657);
				interpolatePredicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5658);
				likePredicate();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5659);
				nullPredicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public NullPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullPredicateContext nullPredicate() throws RecognitionException {
		NullPredicateContext _localctx = new NullPredicateContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_nullPredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			expression();
			setState(5663);
			match(K_IS);
			setState(5664);
			nullOrNotNull();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_LIKE() { return getToken(VSqlParser.K_LIKE, 0); }
		public TerminalNode K_ILIKE() { return getToken(VSqlParser.K_ILIKE, 0); }
		public TerminalNode K_LIKEB() { return getToken(VSqlParser.K_LIKEB, 0); }
		public TerminalNode K_ILIKEB() { return getToken(VSqlParser.K_ILIKEB, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public LikePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikePredicateContext likePredicate() throws RecognitionException {
		LikePredicateContext _localctx = new LikePredicateContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_likePredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5666);
			expression();
			setState(5668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5667);
				match(K_NOT);
				}
			}

			setState(5670);
			_la = _input.LA(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (K_ILIKE - 55)) | (1L << (K_ILIKEB - 55)) | (1L << (K_LIKE - 55)) | (1L << (K_LIKEB - 55)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5671);
			expression();
			setState(5674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				{
				setState(5672);
				match(K_ESCAPE);
				setState(5673);
				value();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPredicateContext extends ParserRuleContext {
		public TerminalNode K_ON() { return getToken(VSqlParser.K_ON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> K_AND() { return getTokens(VSqlParser.K_AND); }
		public TerminalNode K_AND(int i) {
			return getToken(VSqlParser.K_AND, i);
		}
		public List<TerminalNode> K_OR() { return getTokens(VSqlParser.K_OR); }
		public TerminalNode K_OR(int i) {
			return getToken(VSqlParser.K_OR, i);
		}
		public List<TerminalNode> K_NOT() { return getTokens(VSqlParser.K_NOT); }
		public TerminalNode K_NOT(int i) {
			return getToken(VSqlParser.K_NOT, i);
		}
		public JoinPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterJoinPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitJoinPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitJoinPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPredicateContext joinPredicate() throws RecognitionException {
		JoinPredicateContext _localctx = new JoinPredicateContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_joinPredicate);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5676);
			match(K_ON);
			setState(5677);
			expression();
			setState(5682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,746,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5678);
					_la = _input.LA(1);
					if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5679);
					expression();
					}
					} 
				}
				setState(5684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,746,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InterpolatePredicateContext extends ParserRuleContext {
		public List<ColumnReferenceContext> columnReference() {
			return getRuleContexts(ColumnReferenceContext.class);
		}
		public ColumnReferenceContext columnReference(int i) {
			return getRuleContext(ColumnReferenceContext.class,i);
		}
		public TerminalNode K_PREVIOUS() { return getToken(VSqlParser.K_PREVIOUS, 0); }
		public TerminalNode K_VALUE() { return getToken(VSqlParser.K_VALUE, 0); }
		public InterpolatePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interpolatePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInterpolatePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInterpolatePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInterpolatePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InterpolatePredicateContext interpolatePredicate() throws RecognitionException {
		InterpolatePredicateContext _localctx = new InterpolatePredicateContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_interpolatePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5685);
			columnReference();
			setState(5686);
			match(K_PREVIOUS);
			setState(5687);
			match(K_VALUE);
			setState(5688);
			columnReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnValuePredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ColumnValuePredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnValuePredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnValuePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnValuePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnValuePredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnValuePredicateContext columnValuePredicate() throws RecognitionException {
		ColumnValuePredicateContext _localctx = new ColumnValuePredicateContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_columnValuePredicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5690);
			expression();
			setState(5691);
			operator();
			setState(5692);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InPredicateContext extends ParserRuleContext {
		public ColumnsContext columns() {
			return getRuleContext(ColumnsContext.class,0);
		}
		public TerminalNode K_IN() { return getToken(VSqlParser.K_IN, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public InPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InPredicateContext inPredicate() throws RecognitionException {
		InPredicateContext _localctx = new InPredicateContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_inPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5694);
			columns();
			setState(5695);
			match(K_IN);
			setState(5697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5696);
				match(K_NOT);
				}
			}

			setState(5699);
			match(OPEN_PAREN);
			setState(5700);
			expressions();
			setState(5701);
			match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantExpContext extends ParserRuleContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public NullOrNotNullContext nullOrNotNull() {
			return getRuleContext(NullOrNotNullContext.class,0);
		}
		public ConstantExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstantExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstantExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstantExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantExpContext constantExp() throws RecognitionException {
		ConstantExpContext _localctx = new ConstantExpContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_constantExp);
		try {
			setState(5708);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5703);
				number();
				}
				break;
			case DOUBLE_QUOTE_STRING:
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5704);
				string();
				{
				setState(5705);
				match(K_IS);
				setState(5706);
				nullOrNotNull();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BetweenPredicateContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_BETWEEN() { return getToken(VSqlParser.K_BETWEEN, 0); }
		public BetweenPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_betweenPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BetweenPredicateContext betweenPredicate() throws RecognitionException {
		BetweenPredicateContext _localctx = new BetweenPredicateContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_betweenPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5710);
			expression();
			setState(5712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_BETWEEN) {
				{
				setState(5711);
				match(K_BETWEEN);
				}
			}

			setState(5714);
			expression();
			setState(5715);
			match(K_AND);
			setState(5716);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanPredicateContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode K_IS() { return getToken(VSqlParser.K_IS, 0); }
		public Bool_expressionContext bool_expression() {
			return getRuleContext(Bool_expressionContext.class,0);
		}
		public TerminalNode K_UNKNOWN() { return getToken(VSqlParser.K_UNKNOWN, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public BooleanPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPredicateContext booleanPredicate() throws RecognitionException {
		BooleanPredicateContext _localctx = new BooleanPredicateContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_booleanPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5718);
			expression();
			setState(5719);
			match(K_IS);
			setState(5721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(5720);
				match(K_NOT);
				}
			}

			setState(5725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FALSE:
			case K_TRUE:
				{
				setState(5723);
				bool_expression();
				}
				break;
			case K_UNKNOWN:
				{
				setState(5724);
				match(K_UNKNOWN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpContext extends ParserRuleContext {
		public TerminalNode K_CASE() { return getToken(VSqlParser.K_CASE, 0); }
		public List<TerminalNode> K_WHEN() { return getTokens(VSqlParser.K_WHEN); }
		public TerminalNode K_WHEN(int i) {
			return getToken(VSqlParser.K_WHEN, i);
		}
		public List<PredicatesContext> predicates() {
			return getRuleContexts(PredicatesContext.class);
		}
		public PredicatesContext predicates(int i) {
			return getRuleContext(PredicatesContext.class,i);
		}
		public List<TerminalNode> K_THEN() { return getTokens(VSqlParser.K_THEN); }
		public TerminalNode K_THEN(int i) {
			return getToken(VSqlParser.K_THEN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode K_END() { return getToken(VSqlParser.K_END, 0); }
		public TerminalNode K_ELSE() { return getToken(VSqlParser.K_ELSE, 0); }
		public CaseExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCaseExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCaseExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCaseExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpContext caseExp() throws RecognitionException {
		CaseExpContext _localctx = new CaseExpContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_caseExp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			match(K_CASE);
			setState(5728);
			match(K_WHEN);
			setState(5729);
			predicates();
			setState(5730);
			match(K_THEN);
			setState(5731);
			expression();
			setState(5739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==K_WHEN) {
				{
				{
				setState(5732);
				match(K_WHEN);
				setState(5733);
				predicates();
				setState(5734);
				match(K_THEN);
				setState(5735);
				expression();
				}
				}
				setState(5741);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ELSE) {
				{
				setState(5742);
				match(K_ELSE);
				setState(5743);
				expression();
				}
			}

			setState(5746);
			match(K_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_AS() { return getToken(VSqlParser.K_AS, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_AS) {
				{
				setState(5748);
				match(K_AS);
				}
			}

			setState(5751);
			id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionReferenceContext functionReference() {
			return getRuleContext(FunctionReferenceContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public List<ElementWithUsingContext> elementWithUsing() {
			return getRuleContexts(ElementWithUsingContext.class);
		}
		public ElementWithUsingContext elementWithUsing(int i) {
			return getRuleContext(ElementWithUsingContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_ALL() { return getToken(VSqlParser.K_ALL, 0); }
		public TerminalNode K_DISTINCT() { return getToken(VSqlParser.K_DISTINCT, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_functionCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5753);
			functionReference();
			setState(5754);
			match(OPEN_PAREN);
			setState(5766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (K_ALL - 1)) | (1L << (K_ANY - 1)) | (1L << (K_ARRAY - 1)) | (1L << (K_BIGINT - 1)) | (1L << (K_BINARY - 1)) | (1L << (K_BOOLEAN - 1)) | (1L << (K_CASE - 1)) | (1L << (K_CAST - 1)) | (1L << (K_CHAR - 1)) | (1L << (K_DECIMAL - 1)) | (1L << (K_DEFAULT - 1)) | (1L << (K_DISTINCT - 1)) | (1L << (K_FLOAT - 1)) | (1L << (K_INT - 1)) | (1L << (K_INTEGER - 1)) | (1L << (K_INTERVAL - 1)))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (K_MONEY - 80)) | (1L << (K_NUMBER - 80)) | (1L << (K_NUMERIC - 80)) | (1L << (K_REAL - 80)) | (1L << (K_SELECT - 80)) | (1L << (K_SMALLDATETIME - 80)) | (1L << (K_SMALLINT - 80)) | (1L << (K_TIME - 80)) | (1L << (K_TIMESTAMP - 80)) | (1L << (K_TIMESTAMPTZ - 80)) | (1L << (K_TINYINT - 80)) | (1L << (K_USING - 80)) | (1L << (K_UUID - 80)) | (1L << (K_VARBINARY - 80)) | (1L << (K_VARCHAR - 80)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)) | (1L << (K_PUBLIC - 598)) | (1L << (K_INT8 - 598)) | (1L << (K_FLOAT8 - 598)) | (1L << (K_GEOMETRY - 598)) | (1L << (K_GEOGRAPHY - 598)) | (1L << (K_DATE - 598)) | (1L << (K_HASH - 598)) | (1L << (STAR - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (FLOAT - 663)) | (1L << (REAL - 663)) | (1L << (DECIMAL - 663)) | (1L << (ANY - 663)))) != 0)) {
				{
				setState(5756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_ALL || _la==K_DISTINCT) {
					{
					setState(5755);
					_la = _input.LA(1);
					if ( !(_la==K_ALL || _la==K_DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5758);
				elementWithUsing();
				setState(5763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5759);
					match(COMMA);
					setState(5760);
					elementWithUsing();
					}
					}
					setState(5765);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5768);
			match(CLOSE_PAREN);
			setState(5770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(5769);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementWithUsingContext extends ParserRuleContext {
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public ElementContext element() {
			return getRuleContext(ElementContext.class,0);
		}
		public ElementWithUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementWithUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterElementWithUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitElementWithUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitElementWithUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementWithUsingContext elementWithUsing() throws RecognitionException {
		ElementWithUsingContext _localctx = new ElementWithUsingContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_elementWithUsing);
		int _la;
		try {
			setState(5777);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5772);
				usingClause();
				}
				break;
			case K_ANY:
			case K_ARRAY:
			case K_BIGINT:
			case K_BINARY:
			case K_BOOLEAN:
			case K_CASE:
			case K_CAST:
			case K_CHAR:
			case K_DECIMAL:
			case K_DEFAULT:
			case K_FLOAT:
			case K_INT:
			case K_INTEGER:
			case K_INTERVAL:
			case K_MONEY:
			case K_NUMBER:
			case K_NUMERIC:
			case K_REAL:
			case K_SELECT:
			case K_SMALLDATETIME:
			case K_SMALLINT:
			case K_TIME:
			case K_TIMESTAMP:
			case K_TIMESTAMPTZ:
			case K_TINYINT:
			case K_UUID:
			case K_VARBINARY:
			case K_VARCHAR:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case K_PUBLIC:
			case K_INT8:
			case K_FLOAT8:
			case K_GEOMETRY:
			case K_GEOGRAPHY:
			case K_DATE:
			case K_HASH:
			case STAR:
			case OPEN_PAREN:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5773);
				element();
				setState(5775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_USING) {
					{
					setState(5774);
					usingClause();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode K_USING() { return getToken(VSqlParser.K_USING, 0); }
		public TerminalNode K_OCTETS() { return getToken(VSqlParser.K_OCTETS, 0); }
		public TerminalNode K_CHARACTERS() { return getToken(VSqlParser.K_CHARACTERS, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5779);
			match(K_USING);
			setState(5781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				setState(5780);
				match(K_PARAMETERS);
				}
				break;
			}
			setState(5786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				{
				setState(5783);
				match(K_OCTETS);
				}
				break;
			case 2:
				{
				setState(5784);
				match(K_CHARACTERS);
				}
				break;
			case 3:
				{
				setState(5785);
				commaSeparatedKeyValuePairs();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommaSeparatedKeyValuePairsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() {
			return getRuleContext(CommaSeparatedKeyValuePairsContext.class,0);
		}
		public List<KeyValuePairContext> keyValuePair() {
			return getRuleContexts(KeyValuePairContext.class);
		}
		public KeyValuePairContext keyValuePair(int i) {
			return getRuleContext(KeyValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public CommaSeparatedKeyValuePairsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commaSeparatedKeyValuePairs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCommaSeparatedKeyValuePairs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCommaSeparatedKeyValuePairs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommaSeparatedKeyValuePairsContext commaSeparatedKeyValuePairs() throws RecognitionException {
		CommaSeparatedKeyValuePairsContext _localctx = new CommaSeparatedKeyValuePairsContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_commaSeparatedKeyValuePairs);
		int _la;
		try {
			int _alt;
			setState(5801);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5788);
				match(OPEN_PAREN);
				setState(5790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==K_DEFAULT || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (OPEN_PAREN - 663)) | (1L << (DOUBLE_QUOTE_STRING - 663)) | (1L << (PARAM - 663)) | (1L << (WORD - 663)) | (1L << (SINGLE_QUOTE_STRING - 663)) | (1L << (ANY - 663)))) != 0)) {
					{
					setState(5789);
					commaSeparatedKeyValuePairs();
					}
				}

				setState(5792);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5793);
				keyValuePair();
				setState(5798);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5794);
						match(COMMA);
						setState(5795);
						keyValuePair();
						}
						} 
					}
					setState(5800);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_values);
		int _la;
		try {
			setState(5823);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case FLOAT:
			case REAL:
			case DECIMAL:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5803);
				value();
				setState(5808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5804);
					match(COMMA);
					setState(5805);
					value();
					}
					}
					setState(5810);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case OPEN_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5811);
				match(OPEN_PAREN);
				{
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (DOUBLE_QUOTE_STRING - 704)) | (1L << (PARAM - 704)) | (1L << (WORD - 704)) | (1L << (SINGLE_QUOTE_STRING - 704)) | (1L << (FLOAT - 704)) | (1L << (REAL - 704)) | (1L << (DECIMAL - 704)) | (1L << (ANY - 704)))) != 0)) {
					{
					setState(5812);
					value();
					}
				}

				setState(5819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5815);
					match(COMMA);
					setState(5816);
					value();
					}
					}
					setState(5821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5822);
				match(CLOSE_PAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyValuePairContext extends ParserRuleContext {
		public ParamContext param() {
			return getRuleContext(ParamContext.class,0);
		}
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterKeyValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitKeyValuePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitKeyValuePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyValuePairContext keyValuePair() throws RecognitionException {
		KeyValuePairContext _localctx = new KeyValuePairContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_keyValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5825);
			param();
			setState(5826);
			operator();
			setState(5827);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintsContext extends ParserRuleContext {
		public TerminalNode OPEN_HINT() { return getToken(VSqlParser.OPEN_HINT, 0); }
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public TerminalNode CLOSE_HINT() { return getToken(VSqlParser.CLOSE_HINT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public HintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintsContext hints() throws RecognitionException {
		HintsContext _localctx = new HintsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5829);
			match(OPEN_HINT);
			setState(5830);
			hint();
			setState(5835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5831);
				match(COMMA);
				setState(5832);
				hint();
				}
				}
				setState(5837);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5838);
			match(CLOSE_HINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HintContext extends ParserRuleContext {
		public TerminalNode K_ALLNODES() { return getToken(VSqlParser.K_ALLNODES, 0); }
		public TerminalNode K_GBYTYPE() { return getToken(VSqlParser.K_GBYTYPE, 0); }
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_PIPE() { return getToken(VSqlParser.K_PIPE, 0); }
		public TerminalNode K_ENABLE_WITH_CLAUSE_MATERIALIZATION() { return getToken(VSqlParser.K_ENABLE_WITH_CLAUSE_MATERIALIZATION, 0); }
		public TerminalNode K_CREATETYPE() { return getToken(VSqlParser.K_CREATETYPE, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_EARLY_MATERIALIZATION() { return getToken(VSqlParser.K_EARLY_MATERIALIZATION, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_SYN_JOIN() { return getToken(VSqlParser.K_SYN_JOIN, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_SYNTACTIC_JOIN() { return getToken(VSqlParser.K_SYNTACTIC_JOIN, 0); }
		public TerminalNode K_DISTRIB() { return getToken(VSqlParser.K_DISTRIB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public TerminalNode K_JTYPE() { return getToken(VSqlParser.K_JTYPE, 0); }
		public TerminalNode K_UTYPE() { return getToken(VSqlParser.K_UTYPE, 0); }
		public TerminalNode K_PROJS() { return getToken(VSqlParser.K_PROJS, 0); }
		public List<ProjectionReferenceContext> projectionReference() {
			return getRuleContexts(ProjectionReferenceContext.class);
		}
		public ProjectionReferenceContext projectionReference(int i) {
			return getRuleContext(ProjectionReferenceContext.class,i);
		}
		public TerminalNode K_SKIP_PROJS() { return getToken(VSqlParser.K_SKIP_PROJS, 0); }
		public TerminalNode K_IGNORECONST() { return getToken(VSqlParser.K_IGNORECONST, 0); }
		public IntegerNumberContext integerNumber() {
			return getRuleContext(IntegerNumberContext.class,0);
		}
		public TerminalNode K_VERBATIM() { return getToken(VSqlParser.K_VERBATIM, 0); }
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_hint);
		int _la;
		try {
			setState(5911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_ALLNODES:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(5840);
				match(K_ALLNODES);
				}
				}
				break;
			case K_GBYTYPE:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5841);
				match(K_GBYTYPE);
				setState(5842);
				_la = _input.LA(1);
				if ( !(_la==K_HASH || _la==K_PIPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case K_ENABLE_WITH_CLAUSE_MATERIALIZATION:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5843);
				match(K_ENABLE_WITH_CLAUSE_MATERIALIZATION);
				}
				}
				break;
			case K_CREATETYPE:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(5844);
				match(K_CREATETYPE);
				setState(5845);
				match(OPEN_PAREN);
				setState(5846);
				value();
				setState(5847);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_EARLY_MATERIALIZATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5849);
				match(K_EARLY_MATERIALIZATION);
				}
				break;
			case K_DIRECT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5850);
				match(K_DIRECT);
				}
				break;
			case K_LABEL:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(5851);
				match(K_LABEL);
				setState(5852);
				match(OPEN_PAREN);
				setState(5853);
				value();
				setState(5854);
				match(CLOSE_PAREN);
				}
				setState(5856);
				match(K_SYN_JOIN);
				}
				break;
			case K_SYNTACTIC_JOIN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5858);
				match(K_SYNTACTIC_JOIN);
				}
				break;
			case K_DISTRIB:
				enterOuterAlt(_localctx, 9);
				{
				{
				setState(5859);
				match(K_DISTRIB);
				setState(5860);
				match(OPEN_PAREN);
				{
				setState(5861);
				value();
				}
				setState(5866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5862);
					match(COMMA);
					{
					setState(5863);
					value();
					}
					}
					}
					setState(5868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5869);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_JTYPE:
				enterOuterAlt(_localctx, 10);
				{
				{
				setState(5871);
				match(K_JTYPE);
				setState(5872);
				match(OPEN_PAREN);
				{
				setState(5873);
				value();
				}
				setState(5874);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_UTYPE:
				enterOuterAlt(_localctx, 11);
				{
				{
				setState(5876);
				match(K_UTYPE);
				setState(5877);
				match(OPEN_PAREN);
				{
				setState(5878);
				value();
				}
				setState(5879);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_PROJS:
				enterOuterAlt(_localctx, 12);
				{
				{
				setState(5881);
				match(K_PROJS);
				setState(5882);
				match(OPEN_PAREN);
				{
				setState(5883);
				projectionReference();
				setState(5888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5884);
					match(COMMA);
					setState(5885);
					projectionReference();
					}
					}
					setState(5890);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5891);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_SKIP_PROJS:
				enterOuterAlt(_localctx, 13);
				{
				{
				setState(5893);
				match(K_SKIP_PROJS);
				setState(5894);
				match(OPEN_PAREN);
				{
				setState(5895);
				projectionReference();
				setState(5900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5896);
					match(COMMA);
					setState(5897);
					projectionReference();
					}
					}
					setState(5902);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				setState(5903);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_IGNORECONST:
				enterOuterAlt(_localctx, 14);
				{
				{
				setState(5905);
				match(K_IGNORECONST);
				setState(5906);
				match(OPEN_PAREN);
				setState(5907);
				integerNumber();
				setState(5908);
				match(CLOSE_PAREN);
				}
				}
				break;
			case K_VERBATIM:
				enterOuterAlt(_localctx, 15);
				{
				setState(5910);
				match(K_VERBATIM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnReferenceContext extends ParserRuleContext {
		public ColumnContext column() {
			return getRuleContext(ColumnContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ColumnReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumnReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumnReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumnReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnReferenceContext columnReference() throws RecognitionException {
		ColumnReferenceContext _localctx = new ColumnReferenceContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_columnReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				{
				setState(5921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5916);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
					case 1:
						{
						setState(5913);
						dbname();
						setState(5914);
						match(DOT);
						}
						break;
					}
					{
					setState(5918);
					schema();
					setState(5919);
					match(DOT);
					}
					}
					break;
				}
				{
				setState(5923);
				table();
				setState(5924);
				match(DOT);
				}
				}
				}
				break;
			}
			setState(5928);
			column();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_tableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				setState(5933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(5930);
					dbname();
					setState(5931);
					match(DOT);
					}
					break;
				}
				{
				setState(5935);
				schema();
				setState(5936);
				match(DOT);
				}
				}
				break;
			}
			setState(5940);
			table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReferenceContext extends ParserRuleContext {
		public ViewContext view() {
			return getRuleContext(ViewContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ViewReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterViewReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitViewReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitViewReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewReferenceContext viewReference() throws RecognitionException {
		ViewReferenceContext _localctx = new ViewReferenceContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_viewReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(5945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
				case 1:
					{
					setState(5942);
					dbname();
					setState(5943);
					match(DOT);
					}
					break;
				}
				{
				setState(5947);
				schema();
				setState(5948);
				match(DOT);
				}
				}
				break;
			}
			setState(5952);
			view();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceReferenceContext extends ParserRuleContext {
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SourceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSourceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSourceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSourceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceReferenceContext sourceReference() throws RecognitionException {
		SourceReferenceContext _localctx = new SourceReferenceContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_sourceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(5957);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(5954);
					dbname();
					setState(5955);
					match(DOT);
					}
					break;
				}
				{
				setState(5959);
				schema();
				setState(5960);
				match(DOT);
				}
				}
				break;
			}
			setState(5964);
			source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterReferenceContext extends ParserRuleContext {
		public FilterContext filter() {
			return getRuleContext(FilterContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FilterReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilterReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilterReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilterReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterReferenceContext filterReference() throws RecognitionException {
		FilterReferenceContext _localctx = new FilterReferenceContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_filterReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(5969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(5966);
					dbname();
					setState(5967);
					match(DOT);
					}
					break;
				}
				{
				setState(5971);
				schema();
				setState(5972);
				match(DOT);
				}
				}
				break;
			}
			setState(5976);
			filter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParserReferenceContext extends ParserRuleContext {
		public ParserNameContext parserName() {
			return getRuleContext(ParserNameContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ParserReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserReferenceContext parserReference() throws RecognitionException {
		ParserReferenceContext _localctx = new ParserReferenceContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_parserReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(5981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(5978);
					dbname();
					setState(5979);
					match(DOT);
					}
					break;
				}
				{
				setState(5983);
				schema();
				setState(5984);
				match(DOT);
				}
				}
				break;
			}
			setState(5988);
			parserName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionReferenceContext extends ParserRuleContext {
		public ProjectionContext projection() {
			return getRuleContext(ProjectionContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProjectionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projectionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjectionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjectionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjectionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionReferenceContext projectionReference() throws RecognitionException {
		ProjectionReferenceContext _localctx = new ProjectionReferenceContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_projectionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(5998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(5993);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
					case 1:
						{
						setState(5990);
						dbname();
						setState(5991);
						match(DOT);
						}
						break;
					}
					{
					setState(5995);
					schema();
					setState(5996);
					match(DOT);
					}
					}
					break;
				}
				setState(6000);
				table();
				setState(6001);
				match(DOT);
				}
				break;
			}
			setState(6005);
			projection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureReferenceContext extends ParserRuleContext {
		public ProcedureContext procedure() {
			return getRuleContext(ProcedureContext.class,0);
		}
		public TableContext table() {
			return getRuleContext(TableContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ProcedureReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedureReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedureReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureReferenceContext procedureReference() throws RecognitionException {
		ProcedureReferenceContext _localctx = new ProcedureReferenceContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_procedureReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(6015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(6010);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
					case 1:
						{
						setState(6007);
						dbname();
						setState(6008);
						match(DOT);
						}
						break;
					}
					{
					setState(6012);
					schema();
					setState(6013);
					match(DOT);
					}
					}
					break;
				}
				setState(6017);
				table();
				setState(6018);
				match(DOT);
				}
				break;
			}
			setState(6022);
			procedure();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureContext procedure() throws RecognitionException {
		ProcedureContext _localctx = new ProcedureContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6024);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionReferenceContext extends ParserRuleContext {
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public FunctionReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunctionReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunctionReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunctionReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionReferenceContext functionReference() throws RecognitionException {
		FunctionReferenceContext _localctx = new FunctionReferenceContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_functionReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
				case 1:
					{
					setState(6026);
					dbname();
					setState(6027);
					match(DOT);
					}
					break;
				}
				{
				setState(6031);
				schema();
				setState(6032);
				match(DOT);
				}
				}
				break;
			}
			setState(6036);
			function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibraryReferenceContext extends ParserRuleContext {
		public LibraryContext library() {
			return getRuleContext(LibraryContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public LibraryReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_libraryReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibraryReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibraryReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibraryReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryReferenceContext libraryReference() throws RecognitionException {
		LibraryReferenceContext _localctx = new LibraryReferenceContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_libraryReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(6041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(6038);
					dbname();
					setState(6039);
					match(DOT);
					}
					break;
				}
				{
				setState(6043);
				schema();
				setState(6044);
				match(DOT);
				}
				}
				break;
			}
			setState(6048);
			library();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceReferenceContext extends ParserRuleContext {
		public SequenceContext sequence() {
			return getRuleContext(SequenceContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public SequenceReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequenceReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequenceReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequenceReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceReferenceContext sequenceReference() throws RecognitionException {
		SequenceReferenceContext _localctx = new SequenceReferenceContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_sequenceReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				{
				setState(6053);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(6050);
					dbname();
					setState(6051);
					match(DOT);
					}
					break;
				}
				{
				setState(6055);
				schema();
				setState(6056);
				match(DOT);
				}
				}
				break;
			}
			setState(6060);
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModelReferenceContext extends ParserRuleContext {
		public ModelContext model() {
			return getRuleContext(ModelContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public ModelReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modelReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModelReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModelReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModelReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelReferenceContext modelReference() throws RecognitionException {
		ModelReferenceContext _localctx = new ModelReferenceContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_modelReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6065);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(6062);
					dbname();
					setState(6063);
					match(DOT);
					}
					break;
				}
				{
				setState(6067);
				schema();
				setState(6068);
				match(DOT);
				}
				}
				break;
			}
			setState(6072);
			model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TxtIndexReferenceContext extends ParserRuleContext {
		public TxtIndexContext txtIndex() {
			return getRuleContext(TxtIndexContext.class,0);
		}
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public List<TerminalNode> DOT() { return getTokens(VSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(VSqlParser.DOT, i);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TxtIndexReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndexReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndexReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndexReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndexReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexReferenceContext txtIndexReference() throws RecognitionException {
		TxtIndexReferenceContext _localctx = new TxtIndexReferenceContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_txtIndexReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(6077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
				case 1:
					{
					setState(6074);
					dbname();
					setState(6075);
					match(DOT);
					}
					break;
				}
				{
				setState(6079);
				schema();
				setState(6080);
				match(DOT);
				}
				}
				break;
			}
			setState(6084);
			txtIndex();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaReferenceContext extends ParserRuleContext {
		public SchemaContext schema() {
			return getRuleContext(SchemaContext.class,0);
		}
		public DbnameContext dbname() {
			return getRuleContext(DbnameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(VSqlParser.DOT, 0); }
		public SchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchemaReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchemaReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaReferenceContext schemaReference() throws RecognitionException {
		SchemaReferenceContext _localctx = new SchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_schemaReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(6086);
				dbname();
				setState(6087);
				match(DOT);
				}
				break;
			}
			setState(6091);
			schema();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DbnameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public DbnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbname; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDbname(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDbname(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDbname(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DbnameContext dbname() throws RecognitionException {
		DbnameContext _localctx = new DbnameContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_dbname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6093);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TxtIndexContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TxtIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_txtIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTxtIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTxtIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTxtIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TxtIndexContext txtIndex() throws RecognitionException {
		TxtIndexContext _localctx = new TxtIndexContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_txtIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6095);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitHost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitHost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_host);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6097);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PortContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_port);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6099);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SourceContext source() throws RecognitionException {
		SourceContext _localctx = new SourceContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6101);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NotifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNotifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNotifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNotifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifierContext notifier() throws RecognitionException {
		NotifierContext _localctx = new NotifierContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_notifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6103);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModelContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ModelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterModel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitModel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitModel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModelContext model() throws RecognitionException {
		ModelContext _localctx = new ModelContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_model);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6105);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterContext filter() throws RecognitionException {
		FilterContext _localctx = new FilterContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_filter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6107);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParserNameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parserName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParserNameContext parserName() throws RecognitionException {
		ParserNameContext _localctx = new ParserNameContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_parserName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6109);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewContext view() throws RecognitionException {
		ViewContext _localctx = new ViewContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lb_groupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Lb_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lb_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLb_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLb_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLb_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lb_groupContext lb_group() throws RecognitionException {
		Lb_groupContext _localctx = new Lb_groupContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_lb_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6113);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_addressContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_addressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_address(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_address(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_address(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_addressContext network_address() throws RecognitionException {
		Network_addressContext _localctx = new Network_addressContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_network_address);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6115);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutingRuleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoutingRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routingRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRoutingRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRoutingRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRoutingRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutingRuleContext routingRule() throws RecognitionException {
		RoutingRuleContext _localctx = new RoutingRuleContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_routingRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6117);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Branch_identifierContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public Branch_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_branch_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBranch_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBranch_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBranch_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Branch_identifierContext branch_identifier() throws RecognitionException {
		Branch_identifierContext _localctx = new Branch_identifierContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_branch_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6119);
			id();
			setState(6121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (FLOAT - 708)) | (1L << (REAL - 708)) | (1L << (DECIMAL - 708)))) != 0)) {
				{
				setState(6120);
				number();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6123);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LangContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public LangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lang; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLang(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLang(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LangContext lang() throws RecognitionException {
		LangContext _localctx = new LangContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_lang);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6125);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourcePoolContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ResourcePoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourcePool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterResourcePool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitResourcePool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitResourcePool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourcePoolContext resourcePool() throws RecognitionException {
		ResourcePoolContext _localctx = new ResourcePoolContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_resourcePool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6127);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode K_PUBLIC() { return getToken(VSqlParser.K_PUBLIC, 0); }
		public SchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaContext schema() throws RecognitionException {
		SchemaContext _localctx = new SchemaContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_schema);
		try {
			setState(6131);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_DEFAULT:
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
			case DOUBLE_QUOTE_STRING:
			case PARAM:
			case WORD:
			case SINGLE_QUOTE_STRING:
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6129);
				id();
				}
				break;
			case K_PUBLIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(6130);
				match(K_PUBLIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdParamContext extends ParserRuleContext {
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public UdParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUdParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUdParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUdParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdParamContext udParam() throws RecognitionException {
		UdParamContext _localctx = new UdParamContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_udParam);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6133);
			match(PARAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableContext table() throws RecognitionException {
		TableContext _localctx = new TableContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6135);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamsContext extends ParserRuleContext {
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(VSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(VSqlParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamsContext params() throws RecognitionException {
		ParamsContext _localctx = new ParamsContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6137);
			param();
			setState(6142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6138);
				match(COMMA);
				setState(6139);
				param();
				}
				}
				setState(6144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_projection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6145);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LibraryContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public LibraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterLibrary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitLibrary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitLibrary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LibraryContext library() throws RecognitionException {
		LibraryContext _localctx = new LibraryContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_library);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6147);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public TerminalNode K_HASH() { return getToken(VSqlParser.K_HASH, 0); }
		public TerminalNode K_ROLLUP() { return getToken(VSqlParser.K_ROLLUP, 0); }
		public TerminalNode K_ANY() { return getToken(VSqlParser.K_ANY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_function);
		try {
			setState(6153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6149);
				match(K_HASH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6150);
				match(K_ROLLUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6151);
				match(K_ANY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6152);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6155);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NodeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public NodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_node; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NodeContext node() throws RecognitionException {
		NodeContext _localctx = new NodeContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_node);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6157);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceContext sequence() throws RecognitionException {
		SequenceContext _localctx = new SequenceContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6159);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnContext column() throws RecognitionException {
		ColumnContext _localctx = new ColumnContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6161);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6163);
			_la = _input.LA(1);
			if ( !(_la==DOUBLE_QUOTE_STRING || _la==SINGLE_QUOTE_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleCharContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public SingleCharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleChar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSingleChar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSingleChar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSingleChar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleCharContext singleChar() throws RecognitionException {
		SingleCharContext _localctx = new SingleCharContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_singleChar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6165);
			match(SINGLE_QUOTE_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6167);
			_la = _input.LA(1);
			if ( !(((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (FLOAT - 708)) | (1L << (REAL - 708)) | (1L << (DECIMAL - 708)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerNumberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public IntegerNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIntegerNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIntegerNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIntegerNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntegerNumberContext integerNumber() throws RecognitionException {
		IntegerNumberContext _localctx = new IntegerNumberContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_integerNumber);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6169);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskExpContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public AsteriskExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAsteriskExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAsteriskExp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAsteriskExp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskExpContext asteriskExp() throws RecognitionException {
		AsteriskExpContext _localctx = new AsteriskExpContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_asteriskExp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6171);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubnetContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public SubnetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subnet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSubnet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSubnet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSubnet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubnetContext subnet() throws RecognitionException {
		SubnetContext _localctx = new SubnetContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_subnet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6173);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6175);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6177);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MethodContext method() throws RecognitionException {
		MethodContext _localctx = new MethodContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6179);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FaultGroupContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public FaultGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_faultGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterFaultGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitFaultGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitFaultGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FaultGroupContext faultGroup() throws RecognitionException {
		FaultGroupContext _localctx = new FaultGroupContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_faultGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6181);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auth_method_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Auth_method_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auth_method_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAuth_method_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAuth_method_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAuth_method_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auth_method_nameContext auth_method_name() throws RecognitionException {
		Auth_method_nameContext _localctx = new Auth_method_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_auth_method_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6183);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6185);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_interfaceContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_interfaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_interface; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNetwork_interface(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNetwork_interface(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNetwork_interface(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_interfaceContext network_interface() throws RecognitionException {
		Network_interfaceContext _localctx = new Network_interfaceContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_network_interface);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6187);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ProfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitProfile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileContext profile() throws RecognitionException {
		ProfileContext _localctx = new ProfileContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_profile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6189);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode K_DEFAULT() { return getToken(VSqlParser.K_DEFAULT, 0); }
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public TerminalNode ANY() { return getToken(VSqlParser.ANY, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_id);
		try {
			setState(6198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6191);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6192);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 3);
				{
				setState(6193);
				match(WORD);
				}
				break;
			case K_DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6194);
				match(K_DEFAULT);
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 5);
				{
				setState(6195);
				match(PARAM);
				}
				break;
			case ANY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6196);
				match(ANY);
				}
				break;
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6197);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(VSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(VSqlParser.REAL, 0); }
		public TerminalNode WORD() { return getToken(VSqlParser.WORD, 0); }
		public TerminalNode DOUBLE_QUOTE_STRING() { return getToken(VSqlParser.DOUBLE_QUOTE_STRING, 0); }
		public TerminalNode SINGLE_QUOTE_STRING() { return getToken(VSqlParser.SINGLE_QUOTE_STRING, 0); }
		public TerminalNode ANY() { return getToken(VSqlParser.ANY, 0); }
		public TerminalNode PARAM() { return getToken(VSqlParser.PARAM, 0); }
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_value);
		try {
			setState(6209);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6200);
				match(DECIMAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6201);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6202);
				match(REAL);
				}
				break;
			case WORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(6203);
				match(WORD);
				}
				break;
			case DOUBLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(6204);
				match(DOUBLE_QUOTE_STRING);
				}
				break;
			case SINGLE_QUOTE_STRING:
				enterOuterAlt(_localctx, 6);
				{
				setState(6205);
				match(SINGLE_QUOTE_STRING);
				}
				break;
			case ANY:
				enterOuterAlt(_localctx, 7);
				{
				setState(6206);
				match(ANY);
				}
				break;
			case PARAM:
				enterOuterAlt(_localctx, 8);
				{
				setState(6207);
				match(PARAM);
				}
				break;
			case K_ABORT:
			case K_ABSOLUTE:
			case K_ACCESS:
			case K_ACCESSRANK:
			case K_ACCOUNT:
			case K_ACTION:
			case K_ACTIVATE:
			case K_ACTIVEPARTITIONCOUNT:
			case K_ADD:
			case K_ADMIN:
			case K_AFTER:
			case K_AGGREGATE:
			case K_ALSO:
			case K_ALTER:
			case K_ANALYSE:
			case K_ANALYTIC:
			case K_ANALYZE:
			case K_ANNOTATED:
			case K_ANTI:
			case K_ASSERTION:
			case K_ASSIGNMENT:
			case K_AT:
			case K_AUTHENTICATION:
			case K_AUTO:
			case K_AUTO_INCREMENT:
			case K_AVAILABLE:
			case K_BACKWARD:
			case K_BASENAME:
			case K_BATCH:
			case K_BEFORE:
			case K_BEGIN:
			case K_BEST:
			case K_BLOCK:
			case K_BLOCK_DICT:
			case K_BLOCKDICT_COMP:
			case K_BROADCAST:
			case K_BY:
			case K_BYTEA:
			case K_BYTES:
			case K_BZIP:
			case K_BZIP_COMP:
			case K_CACHE:
			case K_CALLED:
			case K_CASCADE:
			case K_CATALOGPATH:
			case K_CHAIN:
			case K_CHARACTER:
			case K_CHARACTERISTICS:
			case K_CHARACTERS:
			case K_CHECKPOINT:
			case K_CLASS:
			case K_CLEAR:
			case K_CLOSE:
			case K_CLUSTER:
			case K_COLSIZES:
			case K_COLUMNS_COUNT:
			case K_COMMENT:
			case K_COMMIT:
			case K_COMMITTED:
			case K_COMMONDELTA_COMP:
			case K_COMMUNAL:
			case K_COMPLEX:
			case K_CONNECT:
			case K_CONSTRAINTS:
			case K_CONTROL:
			case K_COPY:
			case K_CPUAFFINITYMODE:
			case K_CPUAFFINITYSET:
			case K_CREATEDB:
			case K_CREATEUSER:
			case K_CSV:
			case K_CUBE:
			case K_CURRENT:
			case K_CURSOR:
			case K_CUSTOM:
			case K_CUSTOM_PARTITIONS:
			case K_CYCLE:
			case K_DATA:
			case K_DATABASE:
			case K_DATAPATH:
			case K_DAY:
			case K_DEACTIVATE:
			case K_DEALLOCATE:
			case K_DEC:
			case K_DECLARE:
			case K_DEFAULTS:
			case K_DEFERRED:
			case K_DEFINE:
			case K_DEFINER:
			case K_DELETE:
			case K_DELIMITER:
			case K_DELIMITERS:
			case K_DELTARANGE_COMP:
			case K_DELTARANGE_COMP_SP:
			case K_DELTAVAL:
			case K_DEPENDS:
			case K_DETERMINES:
			case K_DIRECT:
			case K_DIRECTCOLS:
			case K_DIRECTED:
			case K_DIRECTGROUPED:
			case K_DIRECTPROJ:
			case K_DISABLE:
			case K_DISABLED:
			case K_DISCONNECT:
			case K_DISTVALINDEX:
			case K_DO:
			case K_DOMAIN:
			case K_DOUBLE:
			case K_DROP:
			case K_DURABLE:
			case K_EACH:
			case K_ENABLE:
			case K_ENABLED:
			case K_ENCLOSED:
			case K_ENCODING:
			case K_ENCRYPTED:
			case K_ENFORCELENGTH:
			case K_EPHEMERAL:
			case K_EPOCH:
			case K_ERROR:
			case K_ESCAPE:
			case K_EVENT:
			case K_EVENTS:
			case K_EXCEPTION:
			case K_EXCEPTIONS:
			case K_EXCLUDE:
			case K_EXCLUDING:
			case K_EXCLUSIVE:
			case K_EXECUTE:
			case K_EXECUTIONPARALLELISM:
			case K_EXPIRE:
			case K_EXPLAIN:
			case K_EXPORT:
			case K_EXTERNAL:
			case K_FAILED_LOGIN_ATTEMPTS:
			case K_FAULT:
			case K_FENCED:
			case K_FETCH:
			case K_FILESYSTEM:
			case K_FILLER:
			case K_FILTER:
			case K_FIRST:
			case K_FIXEDWIDTH:
			case K_FLEX:
			case K_FLEXIBLE:
			case K_FOLLOWING:
			case K_FORCE:
			case K_FORMAT:
			case K_FORWARD:
			case K_FREEZE:
			case K_FUNCTION:
			case K_FUNCTIONS:
			case K_GCDDELTA:
			case K_GET:
			case K_GLOBAL:
			case K_GRACEPERIOD:
			case K_GROUPED:
			case K_GROUPING:
			case K_GZIP:
			case K_GZIP_COMP:
			case K_HANDLER:
			case K_HCATALOG:
			case K_HCATALOG_CONNECTION_TIMEOUT:
			case K_HCATALOG_DB:
			case K_HCATALOG_SCHEMA:
			case K_HCATALOG_SLOW_TRANSFER_LIMIT:
			case K_HCATALOG_SLOW_TRANSFER_TIME:
			case K_HCATALOG_USER:
			case K_HIGH:
			case K_HIVE_PARTITION_COLS:
			case K_HIVESERVER2_HOSTNAME:
			case K_HOLD:
			case K_HOST:
			case K_HOSTNAME:
			case K_HOUR:
			case K_HOURS:
			case K_IDENTIFIED:
			case K_IDENTITY:
			case K_IDLESESSIONTIMEOUT:
			case K_IF:
			case K_IGNORE:
			case K_IMMEDIATE:
			case K_IMMUTABLE:
			case K_IMPLICIT:
			case K_INCLUDE:
			case K_INCLUDING:
			case K_INCREMENT:
			case K_INDEX:
			case K_INHERITS:
			case K_INPUT:
			case K_INSENSITIVE:
			case K_INSERT:
			case K_INSTEAD:
			case K_INTERFACE:
			case K_INTERPOLATE:
			case K_INVOKER:
			case K_ISOLATION:
			case K_JSON:
			case K_KEY:
			case K_LABEL:
			case K_LANCOMPILER:
			case K_LANGUAGE:
			case K_LARGE:
			case K_LAST:
			case K_LATEST:
			case K_LESS:
			case K_LEVEL:
			case K_LIBRARY:
			case K_LISTEN:
			case K_LOAD:
			case K_LOCAL:
			case K_LOCATION:
			case K_LOCK:
			case K_LONG:
			case K_LOW:
			case K_LZO:
			case K_MANAGED:
			case K_MASK:
			case K_MATCHED:
			case K_MATERIALIZE:
			case K_MAXCONCURRENCY:
			case K_MAXCONCURRENCYGRACE:
			case K_MAXCONNECTIONS:
			case K_MAXMEMORYSIZE:
			case K_MAXPAYLOAD:
			case K_MAXQUERYMEMORYSIZE:
			case K_MAXVALUE:
			case K_MEDIUM:
			case K_MEMORYCAP:
			case K_MEMORYSIZE:
			case K_MERGE:
			case K_MERGEOUT:
			case K_METHOD:
			case K_MICROSECONDS:
			case K_MILLISECONDS:
			case K_MINUTE:
			case K_MINUTES:
			case K_MINVALUE:
			case K_MODE:
			case K_MODEL:
			case K_MONTH:
			case K_MOVE:
			case K_MOVEOUT:
			case K_NAME:
			case K_NATIONAL:
			case K_NATIVE:
			case K_NETWORK:
			case K_NEXT:
			case K_NO:
			case K_NOCREATEDB:
			case K_NOCREATEUSER:
			case K_NODE:
			case K_NODES:
			case K_NOTHING:
			case K_NOTIFIER:
			case K_NOTIFY:
			case K_NOWAIT:
			case K_NULLAWARE:
			case K_NULLCOLS:
			case K_NULLS:
			case K_OBJECT:
			case K_OCTETS:
			case K_OF:
			case K_OFF:
			case K_OIDS:
			case K_OPERATOR:
			case K_OPT:
			case K_OPTIMIZER:
			case K_OPTION:
			case K_OPTVER:
			case K_ORC:
			case K_OTHERS:
			case K_OWNER:
			case K_PARAMETER:
			case K_PARAMETERS:
			case K_PARQUET:
			case K_PARSER:
			case K_PARTIAL:
			case K_PARTITION:
			case K_PARTITIONING:
			case K_PASSWORD:
			case K_PASSWORD_GRACE_TIME:
			case K_PASSWORD_LIFE_TIME:
			case K_PASSWORD_LOCK_TIME:
			case K_PASSWORD_MAX_LENGTH:
			case K_PASSWORD_MIN_DIGITS:
			case K_PASSWORD_MIN_LENGTH:
			case K_PASSWORD_MIN_LETTERS:
			case K_PASSWORD_MIN_LOWERCASE_LETTERS:
			case K_PASSWORD_MIN_SYMBOLS:
			case K_PASSWORD_MIN_UPPERCASE_LETTERS:
			case K_PASSWORD_REUSE_MAX:
			case K_PASSWORD_REUSE_TIME:
			case K_PATTERN:
			case K_PERCENT:
			case K_PERMANENT:
			case K_PLACING:
			case K_PLANNEDCONCURRENCY:
			case K_POLICY:
			case K_POOL:
			case K_PORT:
			case K_PRECEDING:
			case K_PREPARE:
			case K_PREPASS:
			case K_PRESERVE:
			case K_PREVIOUS:
			case K_PRIOR:
			case K_PRIORITY:
			case K_PRIVILEGES:
			case K_PROCEDURAL:
			case K_PROCEDURE:
			case K_PROFILE:
			case K_PROJECTION:
			case K_PROJECTIONS:
			case K_PSDATE:
			case K_QUERY:
			case K_QUEUETIMEOUT:
			case K_QUOTE:
			case K_RANGE:
			case K_RAW:
			case K_READ:
			case K_RECHECK:
			case K_RECORD:
			case K_RECOVER:
			case K_RECURSIVE:
			case K_REFRESH:
			case K_REINDEX:
			case K_REJECTED:
			case K_REJECTMAX:
			case K_RELATIVE:
			case K_RELEASE:
			case K_REMOVE:
			case K_RENAME:
			case K_REORGANIZE:
			case K_REPEATABLE:
			case K_REPLACE:
			case K_RESET:
			case K_RESOURCE:
			case K_RESTART:
			case K_RESTRICT:
			case K_RESULTS:
			case K_RETURN:
			case K_RETURNREJECTED:
			case K_REVOKE:
			case K_RLE:
			case K_ROLE:
			case K_ROLES:
			case K_ROLLBACK:
			case K_ROLLUP:
			case K_ROWS:
			case K_RULE:
			case K_RUNTIMECAP:
			case K_RUNTIMEPRIORITY:
			case K_RUNTIMEPRIORITYTHRESHOLD:
			case K_SAVE:
			case K_SAVEPOINT:
			case K_SCROLL:
			case K_SEARCH_PATH:
			case K_SECOND:
			case K_SECONDS:
			case K_SECURITY:
			case K_SECURITY_ALGORITHM:
			case K_SEGMENTED:
			case K_SEMI:
			case K_SEMIALL:
			case K_SEQUENCE:
			case K_SEQUENCES:
			case K_SERIALIZABLE:
			case K_SESSION:
			case K_SET:
			case K_SETOF:
			case K_SETS:
			case K_SHARE:
			case K_SHARED:
			case K_SHOW:
			case K_SIMPLE:
			case K_SINGLEINITIATOR:
			case K_SITE:
			case K_SITES:
			case K_SKIP:
			case K_SOURCE:
			case K_SPLIT:
			case K_SSL_CONFIG:
			case K_STABLE:
			case K_STANDBY:
			case K_START:
			case K_STATEMENT:
			case K_STATISTICS:
			case K_STDIN:
			case K_STDOUT:
			case K_STEMMER:
			case K_STORAGE:
			case K_STREAM:
			case K_STRENGTH:
			case K_STRICT:
			case K_SUBNET:
			case K_SYSID:
			case K_SYSTEM:
			case K_TABLES:
			case K_TABLESAMPLE:
			case K_TABLESPACE:
			case K_TEMP:
			case K_TEMPLATE:
			case K_TEMPORARY:
			case K_TEMPSPACECAP:
			case K_TERMINATOR:
			case K_THAN:
			case K_TIES:
			case K_TLS:
			case K_TOAST:
			case K_TOKENIZER:
			case K_TOLERANCE:
			case K_TRANSACTION:
			case K_TRANSFORM:
			case K_TRICKLE:
			case K_TRIGGER:
			case K_TRUNCATE:
			case K_TRUSTED:
			case K_TUNING:
			case K_TYPE:
			case K_UDPARAMETER:
			case K_UNCOMMITTED:
			case K_UNCOMPRESSED:
			case K_UNI:
			case K_UNINDEXED:
			case K_UNKNOWN:
			case K_UNLIMITED:
			case K_UNLISTEN:
			case K_UNLOCK:
			case K_UNPACKER:
			case K_UNSEGMENTED:
			case K_UPDATE:
			case K_USAGE:
			case K_VACUUM:
			case K_VALIDATE:
			case K_VALIDATOR:
			case K_VALINDEX:
			case K_VALUE:
			case K_VALUES:
			case K_VARYING:
			case K_VERBOSE:
			case K_VERTICA:
			case K_VIEW:
			case K_VOLATILE:
			case K_WAIT:
			case K_WEBHDFS_ADDRESS:
			case K_WEBSERVICE_HOSTNAME:
			case K_WEBSERVICE_PORT:
			case K_WITHOUT:
			case K_WORK:
			case K_WRITE:
			case K_YEAR:
			case K_ZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(6208);
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableOrDisableContext extends ParserRuleContext {
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public EnableOrDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableOrDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnableOrDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnableOrDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnableOrDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableOrDisableContext enableOrDisable() throws RecognitionException {
		EnableOrDisableContext _localctx = new EnableOrDisableContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_enableOrDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6211);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLE || _la==K_ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnabledOrDisabledContext extends ParserRuleContext {
		public TerminalNode K_ENABLED() { return getToken(VSqlParser.K_ENABLED, 0); }
		public TerminalNode K_DISABLED() { return getToken(VSqlParser.K_DISABLED, 0); }
		public EnabledOrDisabledContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enabledOrDisabled; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterEnabledOrDisabled(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitEnabledOrDisabled(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitEnabledOrDisabled(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnabledOrDisabledContext enabledOrDisabled() throws RecognitionException {
		EnabledOrDisabledContext _localctx = new EnabledOrDisabledContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_enabledOrDisabled);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6213);
			_la = _input.LA(1);
			if ( !(_la==K_DISABLED || _la==K_ENABLED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullOrNotNullContext extends ParserRuleContext {
		public TerminalNode K_NULL() { return getToken(VSqlParser.K_NULL, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public NullOrNotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrNotNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNullOrNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNullOrNotNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNullOrNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrNotNullContext nullOrNotNull() throws RecognitionException {
		NullOrNotNullContext _localctx = new NullOrNotNullContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_nullOrNotNull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_NOT) {
				{
				setState(6215);
				match(K_NOT);
				}
			}

			setState(6218);
			match(K_NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddressContext extends ParserRuleContext {
		public TerminalNode IPV4_ADDR() { return getToken(VSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(VSqlParser.IPV6_ADDR, 0); }
		public AddressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_address; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterAddress(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitAddress(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitAddress(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddressContext address() throws RecognitionException {
		AddressContext _localctx = new AddressContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_address);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6220);
			_la = _input.LA(1);
			if ( !(_la==IPV4_ADDR || _la==IPV6_ADDR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressionTypeContext extends ParserRuleContext {
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public CompressionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCompressionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCompressionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCompressionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionTypeContext compressionType() throws RecognitionException {
		CompressionTypeContext _localctx = new CompressionTypeContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_compressionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6222);
			_la = _input.LA(1);
			if ( !(_la==K_BZIP || _la==K_GZIP || _la==K_LZO || _la==K_UNCOMPRESSED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Password_parameterContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode K_PASSWORD_LIFE_TIME() { return getToken(VSqlParser.K_PASSWORD_LIFE_TIME, 0); }
		public TerminalNode K_PASSWORD_GRACE_TIME() { return getToken(VSqlParser.K_PASSWORD_GRACE_TIME, 0); }
		public TerminalNode K_FAILED_LOGIN_ATTEMPTS() { return getToken(VSqlParser.K_FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode K_PASSWORD_LOCK_TIME() { return getToken(VSqlParser.K_PASSWORD_LOCK_TIME, 0); }
		public TerminalNode K_PASSWORD_REUSE_MAX() { return getToken(VSqlParser.K_PASSWORD_REUSE_MAX, 0); }
		public TerminalNode K_PASSWORD_REUSE_TIME() { return getToken(VSqlParser.K_PASSWORD_REUSE_TIME, 0); }
		public TerminalNode K_PASSWORD_MAX_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_UPPERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_UPPERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_LOWERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LOWERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_DIGITS() { return getToken(VSqlParser.K_PASSWORD_MIN_DIGITS, 0); }
		public TerminalNode K_PASSWORD_MIN_SYMBOLS() { return getToken(VSqlParser.K_PASSWORD_MIN_SYMBOLS, 0); }
		public Password_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterPassword_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitPassword_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitPassword_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Password_parameterContext password_parameter() throws RecognitionException {
		Password_parameterContext _localctx = new Password_parameterContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_password_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6224);
			_la = _input.LA(1);
			if ( !(_la==K_FAILED_LOGIN_ATTEMPTS || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (K_PASSWORD_GRACE_TIME - 432)) | (1L << (K_PASSWORD_LIFE_TIME - 432)) | (1L << (K_PASSWORD_LOCK_TIME - 432)) | (1L << (K_PASSWORD_MAX_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_DIGITS - 432)) | (1L << (K_PASSWORD_MIN_LENGTH - 432)) | (1L << (K_PASSWORD_MIN_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 432)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 432)) | (1L << (K_PASSWORD_REUSE_MAX - 432)) | (1L << (K_PASSWORD_REUSE_TIME - 432)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6225);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public OtherOperatorContext otherOperator() {
			return getRuleContext(OtherOperatorContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public MathematicalOperatorContext mathematicalOperator() {
			return getRuleContext(MathematicalOperatorContext.class,0);
		}
		public BitwiseOperatorContext bitwiseOperator() {
			return getRuleContext(BitwiseOperatorContext.class,0);
		}
		public BooleanOperatorsContext booleanOperators() {
			return getRuleContext(BooleanOperatorsContext.class,0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_operator);
		try {
			setState(6232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DPIPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6227);
				otherOperator();
				}
				break;
			case BANG_EQUAL:
			case EQUAL:
			case EQUAL2:
			case GT:
			case GTE:
			case LT:
			case LTE:
			case LT_GT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6228);
				comparisonOperator();
				}
				break;
			case MINUS:
			case STAR:
			case PLUS:
			case BANG:
			case ABS:
			case BANG_BANG:
			case SQROOT:
			case CUBEROOT:
			case EXP:
			case MOD:
			case DIV2:
			case DIV:
				enterOuterAlt(_localctx, 3);
				{
				setState(6229);
				mathematicalOperator();
				}
				break;
			case O_AND:
			case O_OR:
			case O_XOR:
			case O_NOT:
			case O_SHIFT_LEFT:
			case O_SHIFT_RIGHT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6230);
				bitwiseOperator();
				}
				break;
			case K_AND:
			case K_NOT:
			case K_OR:
				enterOuterAlt(_localctx, 5);
				{
				setState(6231);
				booleanOperators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitwiseOperatorContext extends ParserRuleContext {
		public TerminalNode O_AND() { return getToken(VSqlParser.O_AND, 0); }
		public TerminalNode O_OR() { return getToken(VSqlParser.O_OR, 0); }
		public TerminalNode O_XOR() { return getToken(VSqlParser.O_XOR, 0); }
		public TerminalNode O_NOT() { return getToken(VSqlParser.O_NOT, 0); }
		public TerminalNode O_SHIFT_LEFT() { return getToken(VSqlParser.O_SHIFT_LEFT, 0); }
		public TerminalNode O_SHIFT_RIGHT() { return getToken(VSqlParser.O_SHIFT_RIGHT, 0); }
		public BitwiseOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitwiseOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBitwiseOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBitwiseOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBitwiseOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitwiseOperatorContext bitwiseOperator() throws RecognitionException {
		BitwiseOperatorContext _localctx = new BitwiseOperatorContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_bitwiseOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6234);
			_la = _input.LA(1);
			if ( !(((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & ((1L << (O_AND - 690)) | (1L << (O_OR - 690)) | (1L << (O_XOR - 690)) | (1L << (O_NOT - 690)) | (1L << (O_SHIFT_LEFT - 690)) | (1L << (O_SHIFT_RIGHT - 690)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanOperatorsContext extends ParserRuleContext {
		public TerminalNode K_AND() { return getToken(VSqlParser.K_AND, 0); }
		public TerminalNode K_OR() { return getToken(VSqlParser.K_OR, 0); }
		public TerminalNode K_NOT() { return getToken(VSqlParser.K_NOT, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOperators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanOperators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanOperators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanOperators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOperatorsContext booleanOperators() throws RecognitionException {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_booleanOperators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6236);
			_la = _input.LA(1);
			if ( !(_la==K_AND || _la==K_NOT || _la==K_OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherOperatorContext extends ParserRuleContext {
		public TerminalNode DPIPE() { return getToken(VSqlParser.DPIPE, 0); }
		public OtherOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOtherOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOtherOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOtherOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherOperatorContext otherOperator() throws RecognitionException {
		OtherOperatorContext _localctx = new OtherOperatorContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_otherOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6238);
			match(DPIPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathematicalOperatorContext extends ParserRuleContext {
		public TerminalNode BANG_BANG() { return getToken(VSqlParser.BANG_BANG, 0); }
		public TerminalNode ABS() { return getToken(VSqlParser.ABS, 0); }
		public TerminalNode SQROOT() { return getToken(VSqlParser.SQROOT, 0); }
		public TerminalNode CUBEROOT() { return getToken(VSqlParser.CUBEROOT, 0); }
		public TerminalNode DIV2() { return getToken(VSqlParser.DIV2, 0); }
		public TerminalNode EXP() { return getToken(VSqlParser.EXP, 0); }
		public TerminalNode MOD() { return getToken(VSqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(VSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(VSqlParser.MINUS, 0); }
		public TerminalNode DIV() { return getToken(VSqlParser.DIV, 0); }
		public TerminalNode STAR() { return getToken(VSqlParser.STAR, 0); }
		public TerminalNode BANG() { return getToken(VSqlParser.BANG, 0); }
		public MathematicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathematicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterMathematicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitMathematicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitMathematicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathematicalOperatorContext mathematicalOperator() throws RecognitionException {
		MathematicalOperatorContext _localctx = new MathematicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_mathematicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6240);
			_la = _input.LA(1);
			if ( !(((((_la - 659)) & ~0x3f) == 0 && ((1L << (_la - 659)) & ((1L << (MINUS - 659)) | (1L << (STAR - 659)) | (1L << (PLUS - 659)) | (1L << (BANG - 659)) | (1L << (ABS - 659)) | (1L << (BANG_BANG - 659)) | (1L << (SQROOT - 659)) | (1L << (CUBEROOT - 659)) | (1L << (EXP - 659)) | (1L << (MOD - 659)) | (1L << (DIV2 - 659)) | (1L << (DIV - 659)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(VSqlParser.EQUAL, 0); }
		public TerminalNode EQUAL2() { return getToken(VSqlParser.EQUAL2, 0); }
		public TerminalNode GT() { return getToken(VSqlParser.GT, 0); }
		public TerminalNode GTE() { return getToken(VSqlParser.GTE, 0); }
		public TerminalNode LT() { return getToken(VSqlParser.LT, 0); }
		public TerminalNode LTE() { return getToken(VSqlParser.LTE, 0); }
		public TerminalNode LT_GT() { return getToken(VSqlParser.LT_GT, 0); }
		public TerminalNode BANG_EQUAL() { return getToken(VSqlParser.BANG_EQUAL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6242);
			_la = _input.LA(1);
			if ( !(((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (BANG_EQUAL - 673)) | (1L << (EQUAL - 673)) | (1L << (EQUAL2 - 673)) | (1L << (GT - 673)) | (1L << (GTE - 673)) | (1L << (LT - 673)) | (1L << (LTE - 673)) | (1L << (LT_GT - 673)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_SERIALIZABLE() { return getToken(VSqlParser.K_SERIALIZABLE, 0); }
		public TerminalNode K_REPEATABLE() { return getToken(VSqlParser.K_REPEATABLE, 0); }
		public TerminalNode K_UNCOMMITTED() { return getToken(VSqlParser.K_UNCOMMITTED, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_isolationLevel);
		try {
			setState(6251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6244);
				match(K_READ);
				setState(6245);
				match(K_COMMITTED);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6246);
				match(K_SERIALIZABLE);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6247);
				match(K_REPEATABLE);
				setState(6248);
				match(K_READ);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				{
				setState(6249);
				match(K_READ);
				setState(6250);
				match(K_UNCOMMITTED);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_ONLY() { return getToken(VSqlParser.K_ONLY, 0); }
		public TerminalNode K_WRITE() { return getToken(VSqlParser.K_WRITE, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_transactionMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6253);
			match(K_READ);
			setState(6255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==K_ONLY || _la==K_WRITE) {
				{
				setState(6254);
				_la = _input.LA(1);
				if ( !(_la==K_ONLY || _la==K_WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bool_expressionContext extends ParserRuleContext {
		public TerminalNode K_TRUE() { return getToken(VSqlParser.K_TRUE, 0); }
		public TerminalNode K_FALSE() { return getToken(VSqlParser.K_FALSE, 0); }
		public Bool_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBool_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBool_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBool_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bool_expressionContext bool_expression() throws RecognitionException {
		Bool_expressionContext _localctx = new Bool_expressionContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_bool_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			_la = _input.LA(1);
			if ( !(_la==K_FALSE || _la==K_TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypesContext extends ParserRuleContext {
		public BinaryTypesContext binaryTypes() {
			return getRuleContext(BinaryTypesContext.class,0);
		}
		public BooleanTypesContext booleanTypes() {
			return getRuleContext(BooleanTypesContext.class,0);
		}
		public CharTypesContext charTypes() {
			return getRuleContext(CharTypesContext.class,0);
		}
		public DateTypesContext dateTypes() {
			return getRuleContext(DateTypesContext.class,0);
		}
		public ApNumericTypesContext apNumericTypes() {
			return getRuleContext(ApNumericTypesContext.class,0);
		}
		public ENumericTypesContext eNumericTypes() {
			return getRuleContext(ENumericTypesContext.class,0);
		}
		public SpatialTypesContext spatialTypes() {
			return getRuleContext(SpatialTypesContext.class,0);
		}
		public UuidTypesContext uuidTypes() {
			return getRuleContext(UuidTypesContext.class,0);
		}
		public OtherTypesContext otherTypes() {
			return getRuleContext(OtherTypesContext.class,0);
		}
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(VSqlParser.COMMA, 0); }
		public DataTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDataTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDataTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDataTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypesContext dataTypes() throws RecognitionException {
		DataTypesContext _localctx = new DataTypesContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_dataTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
			case 1:
				{
				setState(6259);
				binaryTypes();
				}
				break;
			case 2:
				{
				setState(6260);
				booleanTypes();
				}
				break;
			case 3:
				{
				setState(6261);
				charTypes();
				}
				break;
			case 4:
				{
				setState(6262);
				dateTypes();
				}
				break;
			case 5:
				{
				setState(6263);
				apNumericTypes();
				}
				break;
			case 6:
				{
				setState(6264);
				eNumericTypes();
				}
				break;
			case 7:
				{
				setState(6265);
				spatialTypes();
				}
				break;
			case 8:
				{
				setState(6266);
				uuidTypes();
				}
				break;
			case 9:
				{
				setState(6267);
				otherTypes();
				}
				break;
			}
			setState(6278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				{
				setState(6270);
				match(OPEN_PAREN);
				setState(6271);
				value();
				setState(6274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6272);
					match(COMMA);
					setState(6273);
					value();
					}
				}

				setState(6276);
				match(CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinaryTypesContext extends ParserRuleContext {
		public TerminalNode K_BINARY() { return getToken(VSqlParser.K_BINARY, 0); }
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARBINARY() { return getToken(VSqlParser.K_VARBINARY, 0); }
		public TerminalNode K_BYTEA() { return getToken(VSqlParser.K_BYTEA, 0); }
		public TerminalNode K_RAW() { return getToken(VSqlParser.K_RAW, 0); }
		public BinaryTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBinaryTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBinaryTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBinaryTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinaryTypesContext binaryTypes() throws RecognitionException {
		BinaryTypesContext _localctx = new BinaryTypesContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_binaryTypes);
		try {
			setState(6286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6280);
				match(K_BINARY);
				}
				break;
			case K_LONG:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6281);
				match(K_LONG);
				setState(6282);
				match(K_VARBINARY);
				}
				}
				break;
			case K_VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6283);
				match(K_VARBINARY);
				}
				break;
			case K_BYTEA:
				enterOuterAlt(_localctx, 4);
				{
				setState(6284);
				match(K_BYTEA);
				}
				break;
			case K_RAW:
				enterOuterAlt(_localctx, 5);
				{
				setState(6285);
				match(K_RAW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanTypesContext extends ParserRuleContext {
		public TerminalNode K_BOOLEAN() { return getToken(VSqlParser.K_BOOLEAN, 0); }
		public BooleanTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterBooleanTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitBooleanTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitBooleanTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanTypesContext booleanTypes() throws RecognitionException {
		BooleanTypesContext _localctx = new BooleanTypesContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_booleanTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6288);
			match(K_BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharTypesContext extends ParserRuleContext {
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_VARCHAR() { return getToken(VSqlParser.K_VARCHAR, 0); }
		public TerminalNode K_CHAR() { return getToken(VSqlParser.K_CHAR, 0); }
		public CharTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterCharTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitCharTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitCharTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharTypesContext charTypes() throws RecognitionException {
		CharTypesContext _localctx = new CharTypesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_charTypes);
		try {
			setState(6294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_LONG:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6290);
				match(K_LONG);
				setState(6291);
				match(K_VARCHAR);
				}
				}
				break;
			case K_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6292);
				match(K_CHAR);
				}
				break;
			case K_VARCHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6293);
				match(K_VARCHAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTypesContext extends ParserRuleContext {
		public TerminalNode K_TIME() { return getToken(VSqlParser.K_TIME, 0); }
		public TerminalNode K_WITH() { return getToken(VSqlParser.K_WITH, 0); }
		public TerminalNode K_TIMEZONE() { return getToken(VSqlParser.K_TIMEZONE, 0); }
		public TerminalNode K_TIMESTAMPTZ() { return getToken(VSqlParser.K_TIMESTAMPTZ, 0); }
		public TerminalNode K_DATE() { return getToken(VSqlParser.K_DATE, 0); }
		public TerminalNode K_SMALLDATETIME() { return getToken(VSqlParser.K_SMALLDATETIME, 0); }
		public TerminalNode K_TIMESTAMP() { return getToken(VSqlParser.K_TIMESTAMP, 0); }
		public TerminalNode K_INTERVAL() { return getToken(VSqlParser.K_INTERVAL, 0); }
		public TerminalNode K_DAY() { return getToken(VSqlParser.K_DAY, 0); }
		public TerminalNode K_TO() { return getToken(VSqlParser.K_TO, 0); }
		public TerminalNode K_SECOND() { return getToken(VSqlParser.K_SECOND, 0); }
		public TerminalNode K_YEAR() { return getToken(VSqlParser.K_YEAR, 0); }
		public TerminalNode K_MONTH() { return getToken(VSqlParser.K_MONTH, 0); }
		public DateTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterDateTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitDateTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitDateTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTypesContext dateTypes() throws RecognitionException {
		DateTypesContext _localctx = new DateTypesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_dateTypes);
		try {
			setState(6316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6296);
				match(K_TIME);
				setState(6297);
				match(K_WITH);
				setState(6298);
				match(K_TIMEZONE);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6299);
				match(K_TIMESTAMPTZ);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6300);
				match(K_DATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6301);
				match(K_TIME);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6302);
				match(K_SMALLDATETIME);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				{
				setState(6303);
				match(K_TIMESTAMP);
				setState(6304);
				match(K_WITH);
				setState(6305);
				match(K_TIMEZONE);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				{
				setState(6306);
				match(K_INTERVAL);
				setState(6307);
				match(K_DAY);
				setState(6308);
				match(K_TO);
				setState(6309);
				match(K_SECOND);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				{
				setState(6310);
				match(K_INTERVAL);
				setState(6311);
				match(K_YEAR);
				setState(6312);
				match(K_TO);
				setState(6313);
				match(K_MONTH);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6314);
				match(K_TIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6315);
				match(K_INTERVAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApNumericTypesContext extends ParserRuleContext {
		public TerminalNode K_DOUBLE() { return getToken(VSqlParser.K_DOUBLE, 0); }
		public TerminalNode K_PRECISION() { return getToken(VSqlParser.K_PRECISION, 0); }
		public TerminalNode K_FLOAT() { return getToken(VSqlParser.K_FLOAT, 0); }
		public TerminalNode OPEN_PAREN() { return getToken(VSqlParser.OPEN_PAREN, 0); }
		public TerminalNode DECIMAL() { return getToken(VSqlParser.DECIMAL, 0); }
		public TerminalNode CLOSE_PAREN() { return getToken(VSqlParser.CLOSE_PAREN, 0); }
		public TerminalNode K_FLOAT8() { return getToken(VSqlParser.K_FLOAT8, 0); }
		public TerminalNode K_REAL() { return getToken(VSqlParser.K_REAL, 0); }
		public ApNumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterApNumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitApNumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitApNumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ApNumericTypesContext apNumericTypes() throws RecognitionException {
		ApNumericTypesContext _localctx = new ApNumericTypesContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_apNumericTypes);
		try {
			setState(6327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(6318);
				match(K_DOUBLE);
				setState(6319);
				match(K_PRECISION);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(6320);
				match(K_FLOAT);
				setState(6321);
				match(OPEN_PAREN);
				setState(6322);
				match(DECIMAL);
				setState(6323);
				match(CLOSE_PAREN);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(6324);
				match(K_FLOAT8);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6325);
				match(K_FLOAT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				{
				setState(6326);
				match(K_REAL);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ENumericTypesContext extends ParserRuleContext {
		public TerminalNode K_BIGINT() { return getToken(VSqlParser.K_BIGINT, 0); }
		public TerminalNode K_INT8() { return getToken(VSqlParser.K_INT8, 0); }
		public TerminalNode K_SMALLINT() { return getToken(VSqlParser.K_SMALLINT, 0); }
		public TerminalNode K_TINYINT() { return getToken(VSqlParser.K_TINYINT, 0); }
		public TerminalNode K_DECIMAL() { return getToken(VSqlParser.K_DECIMAL, 0); }
		public TerminalNode K_NUMERIC() { return getToken(VSqlParser.K_NUMERIC, 0); }
		public TerminalNode K_NUMBER() { return getToken(VSqlParser.K_NUMBER, 0); }
		public TerminalNode K_MONEY() { return getToken(VSqlParser.K_MONEY, 0); }
		public TerminalNode K_INTEGER() { return getToken(VSqlParser.K_INTEGER, 0); }
		public TerminalNode K_INT() { return getToken(VSqlParser.K_INT, 0); }
		public ENumericTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eNumericTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterENumericTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitENumericTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitENumericTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ENumericTypesContext eNumericTypes() throws RecognitionException {
		ENumericTypesContext _localctx = new ENumericTypesContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_eNumericTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_BIGINT) | (1L << K_DECIMAL) | (1L << K_INT) | (1L << K_INTEGER))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (K_MONEY - 80)) | (1L << (K_NUMBER - 80)) | (1L << (K_NUMERIC - 80)) | (1L << (K_SMALLINT - 80)) | (1L << (K_TINYINT - 80)))) != 0) || _la==K_INT8) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialTypesContext extends ParserRuleContext {
		public TerminalNode K_GEOMETRY() { return getToken(VSqlParser.K_GEOMETRY, 0); }
		public TerminalNode K_GEOGRAPHY() { return getToken(VSqlParser.K_GEOGRAPHY, 0); }
		public SpatialTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterSpatialTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitSpatialTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitSpatialTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialTypesContext spatialTypes() throws RecognitionException {
		SpatialTypesContext _localctx = new SpatialTypesContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_spatialTypes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6331);
			_la = _input.LA(1);
			if ( !(_la==K_GEOMETRY || _la==K_GEOGRAPHY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidTypesContext extends ParserRuleContext {
		public TerminalNode K_UUID() { return getToken(VSqlParser.K_UUID, 0); }
		public UuidTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterUuidTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitUuidTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitUuidTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidTypesContext uuidTypes() throws RecognitionException {
		UuidTypesContext _localctx = new UuidTypesContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_uuidTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6333);
			match(K_UUID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherTypesContext extends ParserRuleContext {
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public OtherTypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherTypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterOtherTypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitOtherTypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitOtherTypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherTypesContext otherTypes() throws RecognitionException {
		OtherTypesContext _localctx = new OtherTypesContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_otherTypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6335);
			match(K_IDENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode K_ABORT() { return getToken(VSqlParser.K_ABORT, 0); }
		public TerminalNode K_ABSOLUTE() { return getToken(VSqlParser.K_ABSOLUTE, 0); }
		public TerminalNode K_ACCESS() { return getToken(VSqlParser.K_ACCESS, 0); }
		public TerminalNode K_ACCESSRANK() { return getToken(VSqlParser.K_ACCESSRANK, 0); }
		public TerminalNode K_ACCOUNT() { return getToken(VSqlParser.K_ACCOUNT, 0); }
		public TerminalNode K_ACTION() { return getToken(VSqlParser.K_ACTION, 0); }
		public TerminalNode K_ACTIVATE() { return getToken(VSqlParser.K_ACTIVATE, 0); }
		public TerminalNode K_ACTIVEPARTITIONCOUNT() { return getToken(VSqlParser.K_ACTIVEPARTITIONCOUNT, 0); }
		public TerminalNode K_ADD() { return getToken(VSqlParser.K_ADD, 0); }
		public TerminalNode K_ADMIN() { return getToken(VSqlParser.K_ADMIN, 0); }
		public TerminalNode K_AFTER() { return getToken(VSqlParser.K_AFTER, 0); }
		public TerminalNode K_AGGREGATE() { return getToken(VSqlParser.K_AGGREGATE, 0); }
		public TerminalNode K_ALSO() { return getToken(VSqlParser.K_ALSO, 0); }
		public TerminalNode K_ALTER() { return getToken(VSqlParser.K_ALTER, 0); }
		public TerminalNode K_ANALYSE() { return getToken(VSqlParser.K_ANALYSE, 0); }
		public TerminalNode K_ANALYTIC() { return getToken(VSqlParser.K_ANALYTIC, 0); }
		public TerminalNode K_ANALYZE() { return getToken(VSqlParser.K_ANALYZE, 0); }
		public TerminalNode K_ANNOTATED() { return getToken(VSqlParser.K_ANNOTATED, 0); }
		public TerminalNode K_ANTI() { return getToken(VSqlParser.K_ANTI, 0); }
		public TerminalNode K_ASSERTION() { return getToken(VSqlParser.K_ASSERTION, 0); }
		public TerminalNode K_ASSIGNMENT() { return getToken(VSqlParser.K_ASSIGNMENT, 0); }
		public TerminalNode K_AT() { return getToken(VSqlParser.K_AT, 0); }
		public TerminalNode K_AUTHENTICATION() { return getToken(VSqlParser.K_AUTHENTICATION, 0); }
		public TerminalNode K_AUTO() { return getToken(VSqlParser.K_AUTO, 0); }
		public TerminalNode K_AUTO_INCREMENT() { return getToken(VSqlParser.K_AUTO_INCREMENT, 0); }
		public TerminalNode K_AVAILABLE() { return getToken(VSqlParser.K_AVAILABLE, 0); }
		public TerminalNode K_BACKWARD() { return getToken(VSqlParser.K_BACKWARD, 0); }
		public TerminalNode K_BASENAME() { return getToken(VSqlParser.K_BASENAME, 0); }
		public TerminalNode K_BATCH() { return getToken(VSqlParser.K_BATCH, 0); }
		public TerminalNode K_BEFORE() { return getToken(VSqlParser.K_BEFORE, 0); }
		public TerminalNode K_BEGIN() { return getToken(VSqlParser.K_BEGIN, 0); }
		public TerminalNode K_BEST() { return getToken(VSqlParser.K_BEST, 0); }
		public TerminalNode K_BLOCK() { return getToken(VSqlParser.K_BLOCK, 0); }
		public TerminalNode K_BLOCK_DICT() { return getToken(VSqlParser.K_BLOCK_DICT, 0); }
		public TerminalNode K_BLOCKDICT_COMP() { return getToken(VSqlParser.K_BLOCKDICT_COMP, 0); }
		public TerminalNode K_BROADCAST() { return getToken(VSqlParser.K_BROADCAST, 0); }
		public TerminalNode K_BY() { return getToken(VSqlParser.K_BY, 0); }
		public TerminalNode K_BYTEA() { return getToken(VSqlParser.K_BYTEA, 0); }
		public TerminalNode K_BYTES() { return getToken(VSqlParser.K_BYTES, 0); }
		public TerminalNode K_BZIP() { return getToken(VSqlParser.K_BZIP, 0); }
		public TerminalNode K_BZIP_COMP() { return getToken(VSqlParser.K_BZIP_COMP, 0); }
		public TerminalNode K_CACHE() { return getToken(VSqlParser.K_CACHE, 0); }
		public TerminalNode K_CALLED() { return getToken(VSqlParser.K_CALLED, 0); }
		public TerminalNode K_CASCADE() { return getToken(VSqlParser.K_CASCADE, 0); }
		public TerminalNode K_CATALOGPATH() { return getToken(VSqlParser.K_CATALOGPATH, 0); }
		public TerminalNode K_CHAIN() { return getToken(VSqlParser.K_CHAIN, 0); }
		public TerminalNode K_CHARACTER() { return getToken(VSqlParser.K_CHARACTER, 0); }
		public TerminalNode K_CHARACTERISTICS() { return getToken(VSqlParser.K_CHARACTERISTICS, 0); }
		public TerminalNode K_CHARACTERS() { return getToken(VSqlParser.K_CHARACTERS, 0); }
		public TerminalNode K_CHECKPOINT() { return getToken(VSqlParser.K_CHECKPOINT, 0); }
		public TerminalNode K_CLASS() { return getToken(VSqlParser.K_CLASS, 0); }
		public TerminalNode K_CLEAR() { return getToken(VSqlParser.K_CLEAR, 0); }
		public TerminalNode K_CLOSE() { return getToken(VSqlParser.K_CLOSE, 0); }
		public TerminalNode K_CLUSTER() { return getToken(VSqlParser.K_CLUSTER, 0); }
		public TerminalNode K_COLSIZES() { return getToken(VSqlParser.K_COLSIZES, 0); }
		public TerminalNode K_COLUMNS_COUNT() { return getToken(VSqlParser.K_COLUMNS_COUNT, 0); }
		public TerminalNode K_COMMENT() { return getToken(VSqlParser.K_COMMENT, 0); }
		public TerminalNode K_COMMIT() { return getToken(VSqlParser.K_COMMIT, 0); }
		public TerminalNode K_COMMITTED() { return getToken(VSqlParser.K_COMMITTED, 0); }
		public TerminalNode K_COMMONDELTA_COMP() { return getToken(VSqlParser.K_COMMONDELTA_COMP, 0); }
		public TerminalNode K_COMMUNAL() { return getToken(VSqlParser.K_COMMUNAL, 0); }
		public TerminalNode K_COMPLEX() { return getToken(VSqlParser.K_COMPLEX, 0); }
		public TerminalNode K_CONNECT() { return getToken(VSqlParser.K_CONNECT, 0); }
		public TerminalNode K_CONSTRAINTS() { return getToken(VSqlParser.K_CONSTRAINTS, 0); }
		public TerminalNode K_CONTROL() { return getToken(VSqlParser.K_CONTROL, 0); }
		public TerminalNode K_COPY() { return getToken(VSqlParser.K_COPY, 0); }
		public TerminalNode K_CPUAFFINITYMODE() { return getToken(VSqlParser.K_CPUAFFINITYMODE, 0); }
		public TerminalNode K_CPUAFFINITYSET() { return getToken(VSqlParser.K_CPUAFFINITYSET, 0); }
		public TerminalNode K_CREATEDB() { return getToken(VSqlParser.K_CREATEDB, 0); }
		public TerminalNode K_CREATEUSER() { return getToken(VSqlParser.K_CREATEUSER, 0); }
		public TerminalNode K_CSV() { return getToken(VSqlParser.K_CSV, 0); }
		public TerminalNode K_CUBE() { return getToken(VSqlParser.K_CUBE, 0); }
		public TerminalNode K_CURRENT() { return getToken(VSqlParser.K_CURRENT, 0); }
		public TerminalNode K_CURSOR() { return getToken(VSqlParser.K_CURSOR, 0); }
		public TerminalNode K_CUSTOM() { return getToken(VSqlParser.K_CUSTOM, 0); }
		public TerminalNode K_CUSTOM_PARTITIONS() { return getToken(VSqlParser.K_CUSTOM_PARTITIONS, 0); }
		public TerminalNode K_CYCLE() { return getToken(VSqlParser.K_CYCLE, 0); }
		public TerminalNode K_DATA() { return getToken(VSqlParser.K_DATA, 0); }
		public TerminalNode K_DATABASE() { return getToken(VSqlParser.K_DATABASE, 0); }
		public TerminalNode K_DATAPATH() { return getToken(VSqlParser.K_DATAPATH, 0); }
		public TerminalNode K_DAY() { return getToken(VSqlParser.K_DAY, 0); }
		public TerminalNode K_DEACTIVATE() { return getToken(VSqlParser.K_DEACTIVATE, 0); }
		public TerminalNode K_DEALLOCATE() { return getToken(VSqlParser.K_DEALLOCATE, 0); }
		public TerminalNode K_DEC() { return getToken(VSqlParser.K_DEC, 0); }
		public TerminalNode K_DECLARE() { return getToken(VSqlParser.K_DECLARE, 0); }
		public TerminalNode K_DEFAULTS() { return getToken(VSqlParser.K_DEFAULTS, 0); }
		public TerminalNode K_DEFERRED() { return getToken(VSqlParser.K_DEFERRED, 0); }
		public TerminalNode K_DEFINE() { return getToken(VSqlParser.K_DEFINE, 0); }
		public TerminalNode K_DEFINER() { return getToken(VSqlParser.K_DEFINER, 0); }
		public TerminalNode K_DELETE() { return getToken(VSqlParser.K_DELETE, 0); }
		public TerminalNode K_DELIMITER() { return getToken(VSqlParser.K_DELIMITER, 0); }
		public TerminalNode K_DELIMITERS() { return getToken(VSqlParser.K_DELIMITERS, 0); }
		public TerminalNode K_DELTARANGE_COMP() { return getToken(VSqlParser.K_DELTARANGE_COMP, 0); }
		public TerminalNode K_DELTARANGE_COMP_SP() { return getToken(VSqlParser.K_DELTARANGE_COMP_SP, 0); }
		public TerminalNode K_DELTAVAL() { return getToken(VSqlParser.K_DELTAVAL, 0); }
		public TerminalNode K_DEPENDS() { return getToken(VSqlParser.K_DEPENDS, 0); }
		public TerminalNode K_DETERMINES() { return getToken(VSqlParser.K_DETERMINES, 0); }
		public TerminalNode K_DIRECT() { return getToken(VSqlParser.K_DIRECT, 0); }
		public TerminalNode K_DIRECTCOLS() { return getToken(VSqlParser.K_DIRECTCOLS, 0); }
		public TerminalNode K_DIRECTED() { return getToken(VSqlParser.K_DIRECTED, 0); }
		public TerminalNode K_DIRECTGROUPED() { return getToken(VSqlParser.K_DIRECTGROUPED, 0); }
		public TerminalNode K_DIRECTPROJ() { return getToken(VSqlParser.K_DIRECTPROJ, 0); }
		public TerminalNode K_DISABLE() { return getToken(VSqlParser.K_DISABLE, 0); }
		public TerminalNode K_DISABLED() { return getToken(VSqlParser.K_DISABLED, 0); }
		public TerminalNode K_DISCONNECT() { return getToken(VSqlParser.K_DISCONNECT, 0); }
		public TerminalNode K_DISTVALINDEX() { return getToken(VSqlParser.K_DISTVALINDEX, 0); }
		public TerminalNode K_DO() { return getToken(VSqlParser.K_DO, 0); }
		public TerminalNode K_DOMAIN() { return getToken(VSqlParser.K_DOMAIN, 0); }
		public TerminalNode K_DOUBLE() { return getToken(VSqlParser.K_DOUBLE, 0); }
		public TerminalNode K_DROP() { return getToken(VSqlParser.K_DROP, 0); }
		public TerminalNode K_DURABLE() { return getToken(VSqlParser.K_DURABLE, 0); }
		public TerminalNode K_EACH() { return getToken(VSqlParser.K_EACH, 0); }
		public TerminalNode K_ENABLE() { return getToken(VSqlParser.K_ENABLE, 0); }
		public TerminalNode K_ENABLED() { return getToken(VSqlParser.K_ENABLED, 0); }
		public TerminalNode K_ENCLOSED() { return getToken(VSqlParser.K_ENCLOSED, 0); }
		public TerminalNode K_ENCODING() { return getToken(VSqlParser.K_ENCODING, 0); }
		public TerminalNode K_ENCRYPTED() { return getToken(VSqlParser.K_ENCRYPTED, 0); }
		public TerminalNode K_ENFORCELENGTH() { return getToken(VSqlParser.K_ENFORCELENGTH, 0); }
		public TerminalNode K_EPHEMERAL() { return getToken(VSqlParser.K_EPHEMERAL, 0); }
		public TerminalNode K_EPOCH() { return getToken(VSqlParser.K_EPOCH, 0); }
		public TerminalNode K_ERROR() { return getToken(VSqlParser.K_ERROR, 0); }
		public TerminalNode K_ESCAPE() { return getToken(VSqlParser.K_ESCAPE, 0); }
		public TerminalNode K_EVENT() { return getToken(VSqlParser.K_EVENT, 0); }
		public TerminalNode K_EVENTS() { return getToken(VSqlParser.K_EVENTS, 0); }
		public TerminalNode K_EXCEPTION() { return getToken(VSqlParser.K_EXCEPTION, 0); }
		public TerminalNode K_EXCEPTIONS() { return getToken(VSqlParser.K_EXCEPTIONS, 0); }
		public TerminalNode K_EXCLUDE() { return getToken(VSqlParser.K_EXCLUDE, 0); }
		public TerminalNode K_EXCLUDING() { return getToken(VSqlParser.K_EXCLUDING, 0); }
		public TerminalNode K_EXCLUSIVE() { return getToken(VSqlParser.K_EXCLUSIVE, 0); }
		public TerminalNode K_EXECUTE() { return getToken(VSqlParser.K_EXECUTE, 0); }
		public TerminalNode K_EXECUTIONPARALLELISM() { return getToken(VSqlParser.K_EXECUTIONPARALLELISM, 0); }
		public TerminalNode K_EXPIRE() { return getToken(VSqlParser.K_EXPIRE, 0); }
		public TerminalNode K_EXPLAIN() { return getToken(VSqlParser.K_EXPLAIN, 0); }
		public TerminalNode K_EXPORT() { return getToken(VSqlParser.K_EXPORT, 0); }
		public TerminalNode K_EXTERNAL() { return getToken(VSqlParser.K_EXTERNAL, 0); }
		public TerminalNode K_FAILED_LOGIN_ATTEMPTS() { return getToken(VSqlParser.K_FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode K_FAULT() { return getToken(VSqlParser.K_FAULT, 0); }
		public TerminalNode K_FENCED() { return getToken(VSqlParser.K_FENCED, 0); }
		public TerminalNode K_FETCH() { return getToken(VSqlParser.K_FETCH, 0); }
		public TerminalNode K_FILESYSTEM() { return getToken(VSqlParser.K_FILESYSTEM, 0); }
		public TerminalNode K_FILLER() { return getToken(VSqlParser.K_FILLER, 0); }
		public TerminalNode K_FILTER() { return getToken(VSqlParser.K_FILTER, 0); }
		public TerminalNode K_FIRST() { return getToken(VSqlParser.K_FIRST, 0); }
		public TerminalNode K_FIXEDWIDTH() { return getToken(VSqlParser.K_FIXEDWIDTH, 0); }
		public TerminalNode K_FLEX() { return getToken(VSqlParser.K_FLEX, 0); }
		public TerminalNode K_FLEXIBLE() { return getToken(VSqlParser.K_FLEXIBLE, 0); }
		public TerminalNode K_FOLLOWING() { return getToken(VSqlParser.K_FOLLOWING, 0); }
		public TerminalNode K_FORCE() { return getToken(VSqlParser.K_FORCE, 0); }
		public TerminalNode K_FORMAT() { return getToken(VSqlParser.K_FORMAT, 0); }
		public TerminalNode K_FORWARD() { return getToken(VSqlParser.K_FORWARD, 0); }
		public TerminalNode K_FREEZE() { return getToken(VSqlParser.K_FREEZE, 0); }
		public TerminalNode K_FUNCTION() { return getToken(VSqlParser.K_FUNCTION, 0); }
		public TerminalNode K_FUNCTIONS() { return getToken(VSqlParser.K_FUNCTIONS, 0); }
		public TerminalNode K_GCDDELTA() { return getToken(VSqlParser.K_GCDDELTA, 0); }
		public TerminalNode K_GET() { return getToken(VSqlParser.K_GET, 0); }
		public TerminalNode K_GLOBAL() { return getToken(VSqlParser.K_GLOBAL, 0); }
		public TerminalNode K_GRACEPERIOD() { return getToken(VSqlParser.K_GRACEPERIOD, 0); }
		public TerminalNode K_GROUPED() { return getToken(VSqlParser.K_GROUPED, 0); }
		public TerminalNode K_GROUPING() { return getToken(VSqlParser.K_GROUPING, 0); }
		public TerminalNode K_GZIP() { return getToken(VSqlParser.K_GZIP, 0); }
		public TerminalNode K_GZIP_COMP() { return getToken(VSqlParser.K_GZIP_COMP, 0); }
		public TerminalNode K_HANDLER() { return getToken(VSqlParser.K_HANDLER, 0); }
		public TerminalNode K_HCATALOG() { return getToken(VSqlParser.K_HCATALOG, 0); }
		public TerminalNode K_HCATALOG_CONNECTION_TIMEOUT() { return getToken(VSqlParser.K_HCATALOG_CONNECTION_TIMEOUT, 0); }
		public TerminalNode K_HCATALOG_DB() { return getToken(VSqlParser.K_HCATALOG_DB, 0); }
		public TerminalNode K_HCATALOG_SCHEMA() { return getToken(VSqlParser.K_HCATALOG_SCHEMA, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_LIMIT() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_LIMIT, 0); }
		public TerminalNode K_HCATALOG_SLOW_TRANSFER_TIME() { return getToken(VSqlParser.K_HCATALOG_SLOW_TRANSFER_TIME, 0); }
		public TerminalNode K_HCATALOG_USER() { return getToken(VSqlParser.K_HCATALOG_USER, 0); }
		public TerminalNode K_HIGH() { return getToken(VSqlParser.K_HIGH, 0); }
		public TerminalNode K_HIVE_PARTITION_COLS() { return getToken(VSqlParser.K_HIVE_PARTITION_COLS, 0); }
		public TerminalNode K_HIVESERVER2_HOSTNAME() { return getToken(VSqlParser.K_HIVESERVER2_HOSTNAME, 0); }
		public TerminalNode K_HOLD() { return getToken(VSqlParser.K_HOLD, 0); }
		public TerminalNode K_HOST() { return getToken(VSqlParser.K_HOST, 0); }
		public TerminalNode K_HOSTNAME() { return getToken(VSqlParser.K_HOSTNAME, 0); }
		public TerminalNode K_HOUR() { return getToken(VSqlParser.K_HOUR, 0); }
		public TerminalNode K_HOURS() { return getToken(VSqlParser.K_HOURS, 0); }
		public TerminalNode K_IDENTIFIED() { return getToken(VSqlParser.K_IDENTIFIED, 0); }
		public TerminalNode K_IDENTITY() { return getToken(VSqlParser.K_IDENTITY, 0); }
		public TerminalNode K_IDLESESSIONTIMEOUT() { return getToken(VSqlParser.K_IDLESESSIONTIMEOUT, 0); }
		public TerminalNode K_IF() { return getToken(VSqlParser.K_IF, 0); }
		public TerminalNode K_IGNORE() { return getToken(VSqlParser.K_IGNORE, 0); }
		public TerminalNode K_IMMEDIATE() { return getToken(VSqlParser.K_IMMEDIATE, 0); }
		public TerminalNode K_IMMUTABLE() { return getToken(VSqlParser.K_IMMUTABLE, 0); }
		public TerminalNode K_IMPLICIT() { return getToken(VSqlParser.K_IMPLICIT, 0); }
		public TerminalNode K_INCLUDE() { return getToken(VSqlParser.K_INCLUDE, 0); }
		public TerminalNode K_INCLUDING() { return getToken(VSqlParser.K_INCLUDING, 0); }
		public TerminalNode K_INCREMENT() { return getToken(VSqlParser.K_INCREMENT, 0); }
		public TerminalNode K_INDEX() { return getToken(VSqlParser.K_INDEX, 0); }
		public TerminalNode K_INHERITS() { return getToken(VSqlParser.K_INHERITS, 0); }
		public TerminalNode K_INPUT() { return getToken(VSqlParser.K_INPUT, 0); }
		public TerminalNode K_INSENSITIVE() { return getToken(VSqlParser.K_INSENSITIVE, 0); }
		public TerminalNode K_INSERT() { return getToken(VSqlParser.K_INSERT, 0); }
		public TerminalNode K_INSTEAD() { return getToken(VSqlParser.K_INSTEAD, 0); }
		public TerminalNode K_INTERFACE() { return getToken(VSqlParser.K_INTERFACE, 0); }
		public TerminalNode K_INTERPOLATE() { return getToken(VSqlParser.K_INTERPOLATE, 0); }
		public TerminalNode K_INVOKER() { return getToken(VSqlParser.K_INVOKER, 0); }
		public TerminalNode K_ISOLATION() { return getToken(VSqlParser.K_ISOLATION, 0); }
		public TerminalNode K_JSON() { return getToken(VSqlParser.K_JSON, 0); }
		public TerminalNode K_KEY() { return getToken(VSqlParser.K_KEY, 0); }
		public TerminalNode K_LABEL() { return getToken(VSqlParser.K_LABEL, 0); }
		public TerminalNode K_LANCOMPILER() { return getToken(VSqlParser.K_LANCOMPILER, 0); }
		public TerminalNode K_LANGUAGE() { return getToken(VSqlParser.K_LANGUAGE, 0); }
		public TerminalNode K_LARGE() { return getToken(VSqlParser.K_LARGE, 0); }
		public TerminalNode K_LAST() { return getToken(VSqlParser.K_LAST, 0); }
		public TerminalNode K_LATEST() { return getToken(VSqlParser.K_LATEST, 0); }
		public TerminalNode K_LESS() { return getToken(VSqlParser.K_LESS, 0); }
		public TerminalNode K_LEVEL() { return getToken(VSqlParser.K_LEVEL, 0); }
		public TerminalNode K_LIBRARY() { return getToken(VSqlParser.K_LIBRARY, 0); }
		public TerminalNode K_LISTEN() { return getToken(VSqlParser.K_LISTEN, 0); }
		public TerminalNode K_LOAD() { return getToken(VSqlParser.K_LOAD, 0); }
		public TerminalNode K_LOCAL() { return getToken(VSqlParser.K_LOCAL, 0); }
		public TerminalNode K_LOCATION() { return getToken(VSqlParser.K_LOCATION, 0); }
		public TerminalNode K_LOCK() { return getToken(VSqlParser.K_LOCK, 0); }
		public TerminalNode K_LONG() { return getToken(VSqlParser.K_LONG, 0); }
		public TerminalNode K_LOW() { return getToken(VSqlParser.K_LOW, 0); }
		public TerminalNode K_LZO() { return getToken(VSqlParser.K_LZO, 0); }
		public TerminalNode K_MANAGED() { return getToken(VSqlParser.K_MANAGED, 0); }
		public TerminalNode K_MASK() { return getToken(VSqlParser.K_MASK, 0); }
		public TerminalNode K_MATCHED() { return getToken(VSqlParser.K_MATCHED, 0); }
		public TerminalNode K_MATERIALIZE() { return getToken(VSqlParser.K_MATERIALIZE, 0); }
		public TerminalNode K_MAXCONCURRENCY() { return getToken(VSqlParser.K_MAXCONCURRENCY, 0); }
		public TerminalNode K_MAXCONCURRENCYGRACE() { return getToken(VSqlParser.K_MAXCONCURRENCYGRACE, 0); }
		public TerminalNode K_MAXCONNECTIONS() { return getToken(VSqlParser.K_MAXCONNECTIONS, 0); }
		public TerminalNode K_MAXMEMORYSIZE() { return getToken(VSqlParser.K_MAXMEMORYSIZE, 0); }
		public TerminalNode K_MAXPAYLOAD() { return getToken(VSqlParser.K_MAXPAYLOAD, 0); }
		public TerminalNode K_MAXQUERYMEMORYSIZE() { return getToken(VSqlParser.K_MAXQUERYMEMORYSIZE, 0); }
		public TerminalNode K_MAXVALUE() { return getToken(VSqlParser.K_MAXVALUE, 0); }
		public TerminalNode K_MEDIUM() { return getToken(VSqlParser.K_MEDIUM, 0); }
		public TerminalNode K_MEMORYCAP() { return getToken(VSqlParser.K_MEMORYCAP, 0); }
		public TerminalNode K_MEMORYSIZE() { return getToken(VSqlParser.K_MEMORYSIZE, 0); }
		public TerminalNode K_MERGE() { return getToken(VSqlParser.K_MERGE, 0); }
		public TerminalNode K_MERGEOUT() { return getToken(VSqlParser.K_MERGEOUT, 0); }
		public TerminalNode K_METHOD() { return getToken(VSqlParser.K_METHOD, 0); }
		public TerminalNode K_MICROSECONDS() { return getToken(VSqlParser.K_MICROSECONDS, 0); }
		public TerminalNode K_MILLISECONDS() { return getToken(VSqlParser.K_MILLISECONDS, 0); }
		public TerminalNode K_MINUTE() { return getToken(VSqlParser.K_MINUTE, 0); }
		public TerminalNode K_MINUTES() { return getToken(VSqlParser.K_MINUTES, 0); }
		public TerminalNode K_MINVALUE() { return getToken(VSqlParser.K_MINVALUE, 0); }
		public TerminalNode K_MODE() { return getToken(VSqlParser.K_MODE, 0); }
		public TerminalNode K_MODEL() { return getToken(VSqlParser.K_MODEL, 0); }
		public TerminalNode K_MONTH() { return getToken(VSqlParser.K_MONTH, 0); }
		public TerminalNode K_MOVE() { return getToken(VSqlParser.K_MOVE, 0); }
		public TerminalNode K_MOVEOUT() { return getToken(VSqlParser.K_MOVEOUT, 0); }
		public TerminalNode K_NAME() { return getToken(VSqlParser.K_NAME, 0); }
		public TerminalNode K_NATIONAL() { return getToken(VSqlParser.K_NATIONAL, 0); }
		public TerminalNode K_NATIVE() { return getToken(VSqlParser.K_NATIVE, 0); }
		public TerminalNode K_NETWORK() { return getToken(VSqlParser.K_NETWORK, 0); }
		public TerminalNode K_NEXT() { return getToken(VSqlParser.K_NEXT, 0); }
		public TerminalNode K_NO() { return getToken(VSqlParser.K_NO, 0); }
		public TerminalNode K_NOCREATEDB() { return getToken(VSqlParser.K_NOCREATEDB, 0); }
		public TerminalNode K_NOCREATEUSER() { return getToken(VSqlParser.K_NOCREATEUSER, 0); }
		public TerminalNode K_NODE() { return getToken(VSqlParser.K_NODE, 0); }
		public TerminalNode K_NODES() { return getToken(VSqlParser.K_NODES, 0); }
		public TerminalNode K_NOTHING() { return getToken(VSqlParser.K_NOTHING, 0); }
		public TerminalNode K_NOTIFIER() { return getToken(VSqlParser.K_NOTIFIER, 0); }
		public TerminalNode K_NOTIFY() { return getToken(VSqlParser.K_NOTIFY, 0); }
		public TerminalNode K_NOWAIT() { return getToken(VSqlParser.K_NOWAIT, 0); }
		public TerminalNode K_NULLAWARE() { return getToken(VSqlParser.K_NULLAWARE, 0); }
		public TerminalNode K_NULLCOLS() { return getToken(VSqlParser.K_NULLCOLS, 0); }
		public TerminalNode K_NULLS() { return getToken(VSqlParser.K_NULLS, 0); }
		public TerminalNode K_OBJECT() { return getToken(VSqlParser.K_OBJECT, 0); }
		public TerminalNode K_OCTETS() { return getToken(VSqlParser.K_OCTETS, 0); }
		public TerminalNode K_OF() { return getToken(VSqlParser.K_OF, 0); }
		public TerminalNode K_OFF() { return getToken(VSqlParser.K_OFF, 0); }
		public TerminalNode K_OIDS() { return getToken(VSqlParser.K_OIDS, 0); }
		public TerminalNode K_OPERATOR() { return getToken(VSqlParser.K_OPERATOR, 0); }
		public TerminalNode K_OPT() { return getToken(VSqlParser.K_OPT, 0); }
		public TerminalNode K_OPTIMIZER() { return getToken(VSqlParser.K_OPTIMIZER, 0); }
		public TerminalNode K_OPTION() { return getToken(VSqlParser.K_OPTION, 0); }
		public TerminalNode K_OPTVER() { return getToken(VSqlParser.K_OPTVER, 0); }
		public TerminalNode K_ORC() { return getToken(VSqlParser.K_ORC, 0); }
		public TerminalNode K_OTHERS() { return getToken(VSqlParser.K_OTHERS, 0); }
		public TerminalNode K_OWNER() { return getToken(VSqlParser.K_OWNER, 0); }
		public TerminalNode K_PARAMETER() { return getToken(VSqlParser.K_PARAMETER, 0); }
		public TerminalNode K_PARAMETERS() { return getToken(VSqlParser.K_PARAMETERS, 0); }
		public TerminalNode K_PARQUET() { return getToken(VSqlParser.K_PARQUET, 0); }
		public TerminalNode K_PARSER() { return getToken(VSqlParser.K_PARSER, 0); }
		public TerminalNode K_PARTIAL() { return getToken(VSqlParser.K_PARTIAL, 0); }
		public TerminalNode K_PARTITION() { return getToken(VSqlParser.K_PARTITION, 0); }
		public TerminalNode K_PARTITIONING() { return getToken(VSqlParser.K_PARTITIONING, 0); }
		public TerminalNode K_PASSWORD() { return getToken(VSqlParser.K_PASSWORD, 0); }
		public TerminalNode K_PASSWORD_GRACE_TIME() { return getToken(VSqlParser.K_PASSWORD_GRACE_TIME, 0); }
		public TerminalNode K_PASSWORD_LIFE_TIME() { return getToken(VSqlParser.K_PASSWORD_LIFE_TIME, 0); }
		public TerminalNode K_PASSWORD_LOCK_TIME() { return getToken(VSqlParser.K_PASSWORD_LOCK_TIME, 0); }
		public TerminalNode K_PASSWORD_MAX_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_DIGITS() { return getToken(VSqlParser.K_PASSWORD_MIN_DIGITS, 0); }
		public TerminalNode K_PASSWORD_MIN_LENGTH() { return getToken(VSqlParser.K_PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode K_PASSWORD_MIN_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_LOWERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_LOWERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_MIN_SYMBOLS() { return getToken(VSqlParser.K_PASSWORD_MIN_SYMBOLS, 0); }
		public TerminalNode K_PASSWORD_MIN_UPPERCASE_LETTERS() { return getToken(VSqlParser.K_PASSWORD_MIN_UPPERCASE_LETTERS, 0); }
		public TerminalNode K_PASSWORD_REUSE_MAX() { return getToken(VSqlParser.K_PASSWORD_REUSE_MAX, 0); }
		public TerminalNode K_PASSWORD_REUSE_TIME() { return getToken(VSqlParser.K_PASSWORD_REUSE_TIME, 0); }
		public TerminalNode K_PATTERN() { return getToken(VSqlParser.K_PATTERN, 0); }
		public TerminalNode K_PERCENT() { return getToken(VSqlParser.K_PERCENT, 0); }
		public TerminalNode K_PERMANENT() { return getToken(VSqlParser.K_PERMANENT, 0); }
		public TerminalNode K_PLACING() { return getToken(VSqlParser.K_PLACING, 0); }
		public TerminalNode K_PLANNEDCONCURRENCY() { return getToken(VSqlParser.K_PLANNEDCONCURRENCY, 0); }
		public TerminalNode K_POLICY() { return getToken(VSqlParser.K_POLICY, 0); }
		public TerminalNode K_POOL() { return getToken(VSqlParser.K_POOL, 0); }
		public TerminalNode K_PORT() { return getToken(VSqlParser.K_PORT, 0); }
		public TerminalNode K_PRECEDING() { return getToken(VSqlParser.K_PRECEDING, 0); }
		public TerminalNode K_PREPARE() { return getToken(VSqlParser.K_PREPARE, 0); }
		public TerminalNode K_PREPASS() { return getToken(VSqlParser.K_PREPASS, 0); }
		public TerminalNode K_PRESERVE() { return getToken(VSqlParser.K_PRESERVE, 0); }
		public TerminalNode K_PREVIOUS() { return getToken(VSqlParser.K_PREVIOUS, 0); }
		public TerminalNode K_PRIOR() { return getToken(VSqlParser.K_PRIOR, 0); }
		public TerminalNode K_PRIORITY() { return getToken(VSqlParser.K_PRIORITY, 0); }
		public TerminalNode K_PRIVILEGES() { return getToken(VSqlParser.K_PRIVILEGES, 0); }
		public TerminalNode K_PROCEDURAL() { return getToken(VSqlParser.K_PROCEDURAL, 0); }
		public TerminalNode K_PROCEDURE() { return getToken(VSqlParser.K_PROCEDURE, 0); }
		public TerminalNode K_PROFILE() { return getToken(VSqlParser.K_PROFILE, 0); }
		public TerminalNode K_PROJECTION() { return getToken(VSqlParser.K_PROJECTION, 0); }
		public TerminalNode K_PROJECTIONS() { return getToken(VSqlParser.K_PROJECTIONS, 0); }
		public TerminalNode K_PSDATE() { return getToken(VSqlParser.K_PSDATE, 0); }
		public TerminalNode K_QUERY() { return getToken(VSqlParser.K_QUERY, 0); }
		public TerminalNode K_QUEUETIMEOUT() { return getToken(VSqlParser.K_QUEUETIMEOUT, 0); }
		public TerminalNode K_QUOTE() { return getToken(VSqlParser.K_QUOTE, 0); }
		public TerminalNode K_RANGE() { return getToken(VSqlParser.K_RANGE, 0); }
		public TerminalNode K_RAW() { return getToken(VSqlParser.K_RAW, 0); }
		public TerminalNode K_READ() { return getToken(VSqlParser.K_READ, 0); }
		public TerminalNode K_RECHECK() { return getToken(VSqlParser.K_RECHECK, 0); }
		public TerminalNode K_RECORD() { return getToken(VSqlParser.K_RECORD, 0); }
		public TerminalNode K_RECOVER() { return getToken(VSqlParser.K_RECOVER, 0); }
		public TerminalNode K_RECURSIVE() { return getToken(VSqlParser.K_RECURSIVE, 0); }
		public TerminalNode K_REFRESH() { return getToken(VSqlParser.K_REFRESH, 0); }
		public TerminalNode K_REINDEX() { return getToken(VSqlParser.K_REINDEX, 0); }
		public TerminalNode K_REJECTED() { return getToken(VSqlParser.K_REJECTED, 0); }
		public TerminalNode K_REJECTMAX() { return getToken(VSqlParser.K_REJECTMAX, 0); }
		public TerminalNode K_RELATIVE() { return getToken(VSqlParser.K_RELATIVE, 0); }
		public TerminalNode K_RELEASE() { return getToken(VSqlParser.K_RELEASE, 0); }
		public TerminalNode K_REMOVE() { return getToken(VSqlParser.K_REMOVE, 0); }
		public TerminalNode K_RENAME() { return getToken(VSqlParser.K_RENAME, 0); }
		public TerminalNode K_REORGANIZE() { return getToken(VSqlParser.K_REORGANIZE, 0); }
		public TerminalNode K_REPEATABLE() { return getToken(VSqlParser.K_REPEATABLE, 0); }
		public TerminalNode K_REPLACE() { return getToken(VSqlParser.K_REPLACE, 0); }
		public TerminalNode K_RESET() { return getToken(VSqlParser.K_RESET, 0); }
		public TerminalNode K_RESOURCE() { return getToken(VSqlParser.K_RESOURCE, 0); }
		public TerminalNode K_RESTART() { return getToken(VSqlParser.K_RESTART, 0); }
		public TerminalNode K_RESTRICT() { return getToken(VSqlParser.K_RESTRICT, 0); }
		public TerminalNode K_RESULTS() { return getToken(VSqlParser.K_RESULTS, 0); }
		public TerminalNode K_RETURN() { return getToken(VSqlParser.K_RETURN, 0); }
		public TerminalNode K_RETURNREJECTED() { return getToken(VSqlParser.K_RETURNREJECTED, 0); }
		public TerminalNode K_REVOKE() { return getToken(VSqlParser.K_REVOKE, 0); }
		public TerminalNode K_RLE() { return getToken(VSqlParser.K_RLE, 0); }
		public TerminalNode K_ROLE() { return getToken(VSqlParser.K_ROLE, 0); }
		public TerminalNode K_ROLES() { return getToken(VSqlParser.K_ROLES, 0); }
		public TerminalNode K_ROLLBACK() { return getToken(VSqlParser.K_ROLLBACK, 0); }
		public TerminalNode K_ROLLUP() { return getToken(VSqlParser.K_ROLLUP, 0); }
		public TerminalNode K_ROWS() { return getToken(VSqlParser.K_ROWS, 0); }
		public TerminalNode K_RULE() { return getToken(VSqlParser.K_RULE, 0); }
		public TerminalNode K_RUNTIMECAP() { return getToken(VSqlParser.K_RUNTIMECAP, 0); }
		public TerminalNode K_RUNTIMEPRIORITY() { return getToken(VSqlParser.K_RUNTIMEPRIORITY, 0); }
		public TerminalNode K_RUNTIMEPRIORITYTHRESHOLD() { return getToken(VSqlParser.K_RUNTIMEPRIORITYTHRESHOLD, 0); }
		public TerminalNode K_SAVE() { return getToken(VSqlParser.K_SAVE, 0); }
		public TerminalNode K_SAVEPOINT() { return getToken(VSqlParser.K_SAVEPOINT, 0); }
		public TerminalNode K_SCROLL() { return getToken(VSqlParser.K_SCROLL, 0); }
		public TerminalNode K_SEARCH_PATH() { return getToken(VSqlParser.K_SEARCH_PATH, 0); }
		public TerminalNode K_SECOND() { return getToken(VSqlParser.K_SECOND, 0); }
		public TerminalNode K_SECONDS() { return getToken(VSqlParser.K_SECONDS, 0); }
		public TerminalNode K_SECURITY() { return getToken(VSqlParser.K_SECURITY, 0); }
		public TerminalNode K_SECURITY_ALGORITHM() { return getToken(VSqlParser.K_SECURITY_ALGORITHM, 0); }
		public TerminalNode K_SEGMENTED() { return getToken(VSqlParser.K_SEGMENTED, 0); }
		public TerminalNode K_SEMI() { return getToken(VSqlParser.K_SEMI, 0); }
		public TerminalNode K_SEMIALL() { return getToken(VSqlParser.K_SEMIALL, 0); }
		public TerminalNode K_SEQUENCE() { return getToken(VSqlParser.K_SEQUENCE, 0); }
		public TerminalNode K_SEQUENCES() { return getToken(VSqlParser.K_SEQUENCES, 0); }
		public TerminalNode K_SERIALIZABLE() { return getToken(VSqlParser.K_SERIALIZABLE, 0); }
		public TerminalNode K_SESSION() { return getToken(VSqlParser.K_SESSION, 0); }
		public TerminalNode K_SET() { return getToken(VSqlParser.K_SET, 0); }
		public TerminalNode K_SETOF() { return getToken(VSqlParser.K_SETOF, 0); }
		public TerminalNode K_SETS() { return getToken(VSqlParser.K_SETS, 0); }
		public TerminalNode K_SHARE() { return getToken(VSqlParser.K_SHARE, 0); }
		public TerminalNode K_SHARED() { return getToken(VSqlParser.K_SHARED, 0); }
		public TerminalNode K_SHOW() { return getToken(VSqlParser.K_SHOW, 0); }
		public TerminalNode K_SIMPLE() { return getToken(VSqlParser.K_SIMPLE, 0); }
		public TerminalNode K_SINGLEINITIATOR() { return getToken(VSqlParser.K_SINGLEINITIATOR, 0); }
		public TerminalNode K_SITE() { return getToken(VSqlParser.K_SITE, 0); }
		public TerminalNode K_SITES() { return getToken(VSqlParser.K_SITES, 0); }
		public TerminalNode K_SKIP() { return getToken(VSqlParser.K_SKIP, 0); }
		public TerminalNode K_SOURCE() { return getToken(VSqlParser.K_SOURCE, 0); }
		public TerminalNode K_SPLIT() { return getToken(VSqlParser.K_SPLIT, 0); }
		public TerminalNode K_SSL_CONFIG() { return getToken(VSqlParser.K_SSL_CONFIG, 0); }
		public TerminalNode K_STABLE() { return getToken(VSqlParser.K_STABLE, 0); }
		public TerminalNode K_STANDBY() { return getToken(VSqlParser.K_STANDBY, 0); }
		public TerminalNode K_START() { return getToken(VSqlParser.K_START, 0); }
		public TerminalNode K_STATEMENT() { return getToken(VSqlParser.K_STATEMENT, 0); }
		public TerminalNode K_STATISTICS() { return getToken(VSqlParser.K_STATISTICS, 0); }
		public TerminalNode K_STDIN() { return getToken(VSqlParser.K_STDIN, 0); }
		public TerminalNode K_STDOUT() { return getToken(VSqlParser.K_STDOUT, 0); }
		public TerminalNode K_STEMMER() { return getToken(VSqlParser.K_STEMMER, 0); }
		public TerminalNode K_STORAGE() { return getToken(VSqlParser.K_STORAGE, 0); }
		public TerminalNode K_STREAM() { return getToken(VSqlParser.K_STREAM, 0); }
		public TerminalNode K_STRENGTH() { return getToken(VSqlParser.K_STRENGTH, 0); }
		public TerminalNode K_STRICT() { return getToken(VSqlParser.K_STRICT, 0); }
		public TerminalNode K_SUBNET() { return getToken(VSqlParser.K_SUBNET, 0); }
		public TerminalNode K_SYSID() { return getToken(VSqlParser.K_SYSID, 0); }
		public TerminalNode K_SYSTEM() { return getToken(VSqlParser.K_SYSTEM, 0); }
		public TerminalNode K_TABLES() { return getToken(VSqlParser.K_TABLES, 0); }
		public TerminalNode K_TABLESAMPLE() { return getToken(VSqlParser.K_TABLESAMPLE, 0); }
		public TerminalNode K_TABLESPACE() { return getToken(VSqlParser.K_TABLESPACE, 0); }
		public TerminalNode K_TEMP() { return getToken(VSqlParser.K_TEMP, 0); }
		public TerminalNode K_TEMPLATE() { return getToken(VSqlParser.K_TEMPLATE, 0); }
		public TerminalNode K_TEMPORARY() { return getToken(VSqlParser.K_TEMPORARY, 0); }
		public TerminalNode K_TEMPSPACECAP() { return getToken(VSqlParser.K_TEMPSPACECAP, 0); }
		public TerminalNode K_TERMINATOR() { return getToken(VSqlParser.K_TERMINATOR, 0); }
		public TerminalNode K_THAN() { return getToken(VSqlParser.K_THAN, 0); }
		public TerminalNode K_TIES() { return getToken(VSqlParser.K_TIES, 0); }
		public TerminalNode K_TLS() { return getToken(VSqlParser.K_TLS, 0); }
		public TerminalNode K_TOAST() { return getToken(VSqlParser.K_TOAST, 0); }
		public TerminalNode K_TOKENIZER() { return getToken(VSqlParser.K_TOKENIZER, 0); }
		public TerminalNode K_TOLERANCE() { return getToken(VSqlParser.K_TOLERANCE, 0); }
		public TerminalNode K_TRANSACTION() { return getToken(VSqlParser.K_TRANSACTION, 0); }
		public TerminalNode K_TRANSFORM() { return getToken(VSqlParser.K_TRANSFORM, 0); }
		public TerminalNode K_TRICKLE() { return getToken(VSqlParser.K_TRICKLE, 0); }
		public TerminalNode K_TRIGGER() { return getToken(VSqlParser.K_TRIGGER, 0); }
		public TerminalNode K_TRUNCATE() { return getToken(VSqlParser.K_TRUNCATE, 0); }
		public TerminalNode K_TRUSTED() { return getToken(VSqlParser.K_TRUSTED, 0); }
		public TerminalNode K_TUNING() { return getToken(VSqlParser.K_TUNING, 0); }
		public TerminalNode K_TYPE() { return getToken(VSqlParser.K_TYPE, 0); }
		public TerminalNode K_UDPARAMETER() { return getToken(VSqlParser.K_UDPARAMETER, 0); }
		public TerminalNode K_UNCOMMITTED() { return getToken(VSqlParser.K_UNCOMMITTED, 0); }
		public TerminalNode K_UNCOMPRESSED() { return getToken(VSqlParser.K_UNCOMPRESSED, 0); }
		public TerminalNode K_UNI() { return getToken(VSqlParser.K_UNI, 0); }
		public TerminalNode K_UNINDEXED() { return getToken(VSqlParser.K_UNINDEXED, 0); }
		public TerminalNode K_UNKNOWN() { return getToken(VSqlParser.K_UNKNOWN, 0); }
		public TerminalNode K_UNLIMITED() { return getToken(VSqlParser.K_UNLIMITED, 0); }
		public TerminalNode K_UNLISTEN() { return getToken(VSqlParser.K_UNLISTEN, 0); }
		public TerminalNode K_UNLOCK() { return getToken(VSqlParser.K_UNLOCK, 0); }
		public TerminalNode K_UNPACKER() { return getToken(VSqlParser.K_UNPACKER, 0); }
		public TerminalNode K_UNSEGMENTED() { return getToken(VSqlParser.K_UNSEGMENTED, 0); }
		public TerminalNode K_UPDATE() { return getToken(VSqlParser.K_UPDATE, 0); }
		public TerminalNode K_USAGE() { return getToken(VSqlParser.K_USAGE, 0); }
		public TerminalNode K_VACUUM() { return getToken(VSqlParser.K_VACUUM, 0); }
		public TerminalNode K_VALIDATE() { return getToken(VSqlParser.K_VALIDATE, 0); }
		public TerminalNode K_VALIDATOR() { return getToken(VSqlParser.K_VALIDATOR, 0); }
		public TerminalNode K_VALINDEX() { return getToken(VSqlParser.K_VALINDEX, 0); }
		public TerminalNode K_VALUE() { return getToken(VSqlParser.K_VALUE, 0); }
		public TerminalNode K_VALUES() { return getToken(VSqlParser.K_VALUES, 0); }
		public TerminalNode K_VARYING() { return getToken(VSqlParser.K_VARYING, 0); }
		public TerminalNode K_VERBOSE() { return getToken(VSqlParser.K_VERBOSE, 0); }
		public TerminalNode K_VERTICA() { return getToken(VSqlParser.K_VERTICA, 0); }
		public TerminalNode K_VIEW() { return getToken(VSqlParser.K_VIEW, 0); }
		public TerminalNode K_VOLATILE() { return getToken(VSqlParser.K_VOLATILE, 0); }
		public TerminalNode K_WAIT() { return getToken(VSqlParser.K_WAIT, 0); }
		public TerminalNode K_WEBHDFS_ADDRESS() { return getToken(VSqlParser.K_WEBHDFS_ADDRESS, 0); }
		public TerminalNode K_WEBSERVICE_HOSTNAME() { return getToken(VSqlParser.K_WEBSERVICE_HOSTNAME, 0); }
		public TerminalNode K_WEBSERVICE_PORT() { return getToken(VSqlParser.K_WEBSERVICE_PORT, 0); }
		public TerminalNode K_WITHOUT() { return getToken(VSqlParser.K_WITHOUT, 0); }
		public TerminalNode K_WORK() { return getToken(VSqlParser.K_WORK, 0); }
		public TerminalNode K_WRITE() { return getToken(VSqlParser.K_WRITE, 0); }
		public TerminalNode K_YEAR() { return getToken(VSqlParser.K_YEAR, 0); }
		public TerminalNode K_ZONE() { return getToken(VSqlParser.K_ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).enterNonReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof VSqlParserListener ) ((VSqlParserListener)listener).exitNonReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof VSqlParserVisitor ) return ((VSqlParserVisitor<? extends T>)visitor).visitNonReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_la = _input.LA(1);
			if ( !(((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (K_ABORT - 150)) | (1L << (K_ABSOLUTE - 150)) | (1L << (K_ACCESS - 150)) | (1L << (K_ACCESSRANK - 150)) | (1L << (K_ACCOUNT - 150)) | (1L << (K_ACTION - 150)) | (1L << (K_ACTIVATE - 150)) | (1L << (K_ACTIVEPARTITIONCOUNT - 150)) | (1L << (K_ADD - 150)) | (1L << (K_ADMIN - 150)) | (1L << (K_AFTER - 150)) | (1L << (K_AGGREGATE - 150)) | (1L << (K_ALSO - 150)) | (1L << (K_ALTER - 150)) | (1L << (K_ANALYSE - 150)) | (1L << (K_ANALYTIC - 150)) | (1L << (K_ANALYZE - 150)) | (1L << (K_ANNOTATED - 150)) | (1L << (K_ANTI - 150)) | (1L << (K_ASSERTION - 150)) | (1L << (K_ASSIGNMENT - 150)) | (1L << (K_AT - 150)) | (1L << (K_AUTHENTICATION - 150)) | (1L << (K_AUTO - 150)) | (1L << (K_AUTO_INCREMENT - 150)) | (1L << (K_AVAILABLE - 150)) | (1L << (K_BACKWARD - 150)) | (1L << (K_BASENAME - 150)) | (1L << (K_BATCH - 150)) | (1L << (K_BEFORE - 150)) | (1L << (K_BEGIN - 150)) | (1L << (K_BEST - 150)) | (1L << (K_BLOCK - 150)) | (1L << (K_BLOCK_DICT - 150)) | (1L << (K_BLOCKDICT_COMP - 150)) | (1L << (K_BROADCAST - 150)) | (1L << (K_BY - 150)) | (1L << (K_BYTEA - 150)) | (1L << (K_BYTES - 150)) | (1L << (K_BZIP - 150)) | (1L << (K_BZIP_COMP - 150)) | (1L << (K_CACHE - 150)) | (1L << (K_CALLED - 150)) | (1L << (K_CASCADE - 150)) | (1L << (K_CATALOGPATH - 150)) | (1L << (K_CHAIN - 150)) | (1L << (K_CHARACTER - 150)) | (1L << (K_CHARACTERISTICS - 150)) | (1L << (K_CHARACTERS - 150)) | (1L << (K_CHECKPOINT - 150)) | (1L << (K_CLASS - 150)) | (1L << (K_CLEAR - 150)) | (1L << (K_CLOSE - 150)) | (1L << (K_CLUSTER - 150)) | (1L << (K_COLSIZES - 150)) | (1L << (K_COLUMNS_COUNT - 150)) | (1L << (K_COMMENT - 150)) | (1L << (K_COMMIT - 150)) | (1L << (K_COMMITTED - 150)) | (1L << (K_COMMONDELTA_COMP - 150)) | (1L << (K_COMMUNAL - 150)) | (1L << (K_COMPLEX - 150)) | (1L << (K_CONNECT - 150)) | (1L << (K_CONSTRAINTS - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (K_CONTROL - 214)) | (1L << (K_COPY - 214)) | (1L << (K_CPUAFFINITYMODE - 214)) | (1L << (K_CPUAFFINITYSET - 214)) | (1L << (K_CREATEDB - 214)) | (1L << (K_CREATEUSER - 214)) | (1L << (K_CSV - 214)) | (1L << (K_CUBE - 214)) | (1L << (K_CURRENT - 214)) | (1L << (K_CURSOR - 214)) | (1L << (K_CUSTOM - 214)) | (1L << (K_CUSTOM_PARTITIONS - 214)) | (1L << (K_CYCLE - 214)) | (1L << (K_DATA - 214)) | (1L << (K_DATABASE - 214)) | (1L << (K_DATAPATH - 214)) | (1L << (K_DAY - 214)) | (1L << (K_DEACTIVATE - 214)) | (1L << (K_DEALLOCATE - 214)) | (1L << (K_DEC - 214)) | (1L << (K_DECLARE - 214)) | (1L << (K_DEFAULTS - 214)) | (1L << (K_DEFERRED - 214)) | (1L << (K_DEFINE - 214)) | (1L << (K_DEFINER - 214)) | (1L << (K_DELETE - 214)) | (1L << (K_DELIMITER - 214)) | (1L << (K_DELIMITERS - 214)) | (1L << (K_DELTARANGE_COMP - 214)) | (1L << (K_DELTARANGE_COMP_SP - 214)) | (1L << (K_DELTAVAL - 214)) | (1L << (K_DEPENDS - 214)) | (1L << (K_DETERMINES - 214)) | (1L << (K_DIRECT - 214)) | (1L << (K_DIRECTCOLS - 214)) | (1L << (K_DIRECTED - 214)) | (1L << (K_DIRECTGROUPED - 214)) | (1L << (K_DIRECTPROJ - 214)) | (1L << (K_DISABLE - 214)) | (1L << (K_DISABLED - 214)) | (1L << (K_DISCONNECT - 214)) | (1L << (K_DISTVALINDEX - 214)) | (1L << (K_DO - 214)) | (1L << (K_DOMAIN - 214)) | (1L << (K_DOUBLE - 214)) | (1L << (K_DROP - 214)) | (1L << (K_DURABLE - 214)) | (1L << (K_EACH - 214)) | (1L << (K_ENABLE - 214)) | (1L << (K_ENABLED - 214)) | (1L << (K_ENCLOSED - 214)) | (1L << (K_ENCODING - 214)) | (1L << (K_ENCRYPTED - 214)) | (1L << (K_ENFORCELENGTH - 214)) | (1L << (K_EPHEMERAL - 214)) | (1L << (K_EPOCH - 214)) | (1L << (K_ERROR - 214)) | (1L << (K_ESCAPE - 214)) | (1L << (K_EVENT - 214)) | (1L << (K_EVENTS - 214)) | (1L << (K_EXCEPTION - 214)) | (1L << (K_EXCEPTIONS - 214)) | (1L << (K_EXCLUDE - 214)) | (1L << (K_EXCLUDING - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (K_EXCLUSIVE - 278)) | (1L << (K_EXECUTE - 278)) | (1L << (K_EXECUTIONPARALLELISM - 278)) | (1L << (K_EXPIRE - 278)) | (1L << (K_EXPLAIN - 278)) | (1L << (K_EXPORT - 278)) | (1L << (K_EXTERNAL - 278)) | (1L << (K_FAILED_LOGIN_ATTEMPTS - 278)) | (1L << (K_FAULT - 278)) | (1L << (K_FENCED - 278)) | (1L << (K_FETCH - 278)) | (1L << (K_FILESYSTEM - 278)) | (1L << (K_FILLER - 278)) | (1L << (K_FILTER - 278)) | (1L << (K_FIRST - 278)) | (1L << (K_FIXEDWIDTH - 278)) | (1L << (K_FLEX - 278)) | (1L << (K_FLEXIBLE - 278)) | (1L << (K_FOLLOWING - 278)) | (1L << (K_FORCE - 278)) | (1L << (K_FORMAT - 278)) | (1L << (K_FORWARD - 278)) | (1L << (K_FREEZE - 278)) | (1L << (K_FUNCTION - 278)) | (1L << (K_FUNCTIONS - 278)) | (1L << (K_GCDDELTA - 278)) | (1L << (K_GET - 278)) | (1L << (K_GLOBAL - 278)) | (1L << (K_GRACEPERIOD - 278)) | (1L << (K_GROUPED - 278)) | (1L << (K_GROUPING - 278)) | (1L << (K_GZIP - 278)) | (1L << (K_GZIP_COMP - 278)) | (1L << (K_HANDLER - 278)) | (1L << (K_HCATALOG - 278)) | (1L << (K_HCATALOG_CONNECTION_TIMEOUT - 278)) | (1L << (K_HCATALOG_DB - 278)) | (1L << (K_HCATALOG_SCHEMA - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_LIMIT - 278)) | (1L << (K_HCATALOG_SLOW_TRANSFER_TIME - 278)) | (1L << (K_HCATALOG_USER - 278)) | (1L << (K_HIGH - 278)) | (1L << (K_HIVE_PARTITION_COLS - 278)) | (1L << (K_HIVESERVER2_HOSTNAME - 278)) | (1L << (K_HOLD - 278)) | (1L << (K_HOST - 278)) | (1L << (K_HOSTNAME - 278)) | (1L << (K_HOUR - 278)) | (1L << (K_HOURS - 278)) | (1L << (K_IDENTIFIED - 278)) | (1L << (K_IDENTITY - 278)) | (1L << (K_IDLESESSIONTIMEOUT - 278)) | (1L << (K_IF - 278)) | (1L << (K_IGNORE - 278)) | (1L << (K_IMMEDIATE - 278)) | (1L << (K_IMMUTABLE - 278)) | (1L << (K_IMPLICIT - 278)) | (1L << (K_INCLUDE - 278)) | (1L << (K_INCLUDING - 278)) | (1L << (K_INCREMENT - 278)) | (1L << (K_INDEX - 278)) | (1L << (K_INHERITS - 278)) | (1L << (K_INPUT - 278)) | (1L << (K_INSENSITIVE - 278)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (K_INSERT - 342)) | (1L << (K_INSTEAD - 342)) | (1L << (K_INTERFACE - 342)) | (1L << (K_INTERPOLATE - 342)) | (1L << (K_INVOKER - 342)) | (1L << (K_ISOLATION - 342)) | (1L << (K_JSON - 342)) | (1L << (K_KEY - 342)) | (1L << (K_LABEL - 342)) | (1L << (K_LANCOMPILER - 342)) | (1L << (K_LANGUAGE - 342)) | (1L << (K_LARGE - 342)) | (1L << (K_LAST - 342)) | (1L << (K_LATEST - 342)) | (1L << (K_LESS - 342)) | (1L << (K_LEVEL - 342)) | (1L << (K_LIBRARY - 342)) | (1L << (K_LISTEN - 342)) | (1L << (K_LOAD - 342)) | (1L << (K_LOCAL - 342)) | (1L << (K_LOCATION - 342)) | (1L << (K_LOCK - 342)) | (1L << (K_LONG - 342)) | (1L << (K_LOW - 342)) | (1L << (K_LZO - 342)) | (1L << (K_MANAGED - 342)) | (1L << (K_MASK - 342)) | (1L << (K_MATCHED - 342)) | (1L << (K_MATERIALIZE - 342)) | (1L << (K_MAXCONCURRENCY - 342)) | (1L << (K_MAXCONCURRENCYGRACE - 342)) | (1L << (K_MAXCONNECTIONS - 342)) | (1L << (K_MAXMEMORYSIZE - 342)) | (1L << (K_MAXPAYLOAD - 342)) | (1L << (K_MAXQUERYMEMORYSIZE - 342)) | (1L << (K_MAXVALUE - 342)) | (1L << (K_MEDIUM - 342)) | (1L << (K_MEMORYCAP - 342)) | (1L << (K_MEMORYSIZE - 342)) | (1L << (K_MERGE - 342)) | (1L << (K_MERGEOUT - 342)) | (1L << (K_METHOD - 342)) | (1L << (K_MICROSECONDS - 342)) | (1L << (K_MILLISECONDS - 342)) | (1L << (K_MINUTE - 342)) | (1L << (K_MINUTES - 342)) | (1L << (K_MINVALUE - 342)) | (1L << (K_MODE - 342)) | (1L << (K_MODEL - 342)) | (1L << (K_MONTH - 342)) | (1L << (K_MOVE - 342)) | (1L << (K_MOVEOUT - 342)) | (1L << (K_NAME - 342)) | (1L << (K_NATIONAL - 342)) | (1L << (K_NATIVE - 342)) | (1L << (K_NETWORK - 342)) | (1L << (K_NEXT - 342)) | (1L << (K_NO - 342)) | (1L << (K_NOCREATEDB - 342)) | (1L << (K_NOCREATEUSER - 342)) | (1L << (K_NODE - 342)) | (1L << (K_NODES - 342)) | (1L << (K_NOTHING - 342)) | (1L << (K_NOTIFIER - 342)))) != 0) || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (K_NOTIFY - 406)) | (1L << (K_NOWAIT - 406)) | (1L << (K_NULLAWARE - 406)) | (1L << (K_NULLCOLS - 406)) | (1L << (K_NULLS - 406)) | (1L << (K_OBJECT - 406)) | (1L << (K_OCTETS - 406)) | (1L << (K_OF - 406)) | (1L << (K_OFF - 406)) | (1L << (K_OIDS - 406)) | (1L << (K_OPERATOR - 406)) | (1L << (K_OPT - 406)) | (1L << (K_OPTIMIZER - 406)) | (1L << (K_OPTION - 406)) | (1L << (K_OPTVER - 406)) | (1L << (K_ORC - 406)) | (1L << (K_OTHERS - 406)) | (1L << (K_OWNER - 406)) | (1L << (K_PARAMETER - 406)) | (1L << (K_PARAMETERS - 406)) | (1L << (K_PARQUET - 406)) | (1L << (K_PARSER - 406)) | (1L << (K_PARTIAL - 406)) | (1L << (K_PARTITION - 406)) | (1L << (K_PARTITIONING - 406)) | (1L << (K_PASSWORD - 406)) | (1L << (K_PASSWORD_GRACE_TIME - 406)) | (1L << (K_PASSWORD_LIFE_TIME - 406)) | (1L << (K_PASSWORD_LOCK_TIME - 406)) | (1L << (K_PASSWORD_MAX_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_DIGITS - 406)) | (1L << (K_PASSWORD_MIN_LENGTH - 406)) | (1L << (K_PASSWORD_MIN_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_LOWERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_MIN_SYMBOLS - 406)) | (1L << (K_PASSWORD_MIN_UPPERCASE_LETTERS - 406)) | (1L << (K_PASSWORD_REUSE_MAX - 406)) | (1L << (K_PASSWORD_REUSE_TIME - 406)) | (1L << (K_PATTERN - 406)) | (1L << (K_PERCENT - 406)) | (1L << (K_PERMANENT - 406)) | (1L << (K_PLACING - 406)) | (1L << (K_PLANNEDCONCURRENCY - 406)) | (1L << (K_POLICY - 406)) | (1L << (K_POOL - 406)) | (1L << (K_PORT - 406)) | (1L << (K_PRECEDING - 406)) | (1L << (K_PREPARE - 406)) | (1L << (K_PREPASS - 406)) | (1L << (K_PRESERVE - 406)) | (1L << (K_PREVIOUS - 406)) | (1L << (K_PRIOR - 406)) | (1L << (K_PRIORITY - 406)) | (1L << (K_PRIVILEGES - 406)) | (1L << (K_PROCEDURAL - 406)) | (1L << (K_PROCEDURE - 406)) | (1L << (K_PROFILE - 406)) | (1L << (K_PROJECTION - 406)) | (1L << (K_PROJECTIONS - 406)) | (1L << (K_PSDATE - 406)) | (1L << (K_QUERY - 406)) | (1L << (K_QUEUETIMEOUT - 406)) | (1L << (K_QUOTE - 406)) | (1L << (K_RANGE - 406)))) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & ((1L << (K_RAW - 470)) | (1L << (K_READ - 470)) | (1L << (K_RECHECK - 470)) | (1L << (K_RECORD - 470)) | (1L << (K_RECOVER - 470)) | (1L << (K_RECURSIVE - 470)) | (1L << (K_REFRESH - 470)) | (1L << (K_REINDEX - 470)) | (1L << (K_REJECTED - 470)) | (1L << (K_REJECTMAX - 470)) | (1L << (K_RELATIVE - 470)) | (1L << (K_RELEASE - 470)) | (1L << (K_REMOVE - 470)) | (1L << (K_RENAME - 470)) | (1L << (K_REORGANIZE - 470)) | (1L << (K_REPEATABLE - 470)) | (1L << (K_REPLACE - 470)) | (1L << (K_RESET - 470)) | (1L << (K_RESOURCE - 470)) | (1L << (K_RESTART - 470)) | (1L << (K_RESTRICT - 470)) | (1L << (K_RESULTS - 470)) | (1L << (K_RETURN - 470)) | (1L << (K_RETURNREJECTED - 470)) | (1L << (K_REVOKE - 470)) | (1L << (K_RLE - 470)) | (1L << (K_ROLE - 470)) | (1L << (K_ROLES - 470)) | (1L << (K_ROLLBACK - 470)) | (1L << (K_ROLLUP - 470)) | (1L << (K_ROWS - 470)) | (1L << (K_RULE - 470)) | (1L << (K_RUNTIMECAP - 470)) | (1L << (K_RUNTIMEPRIORITY - 470)) | (1L << (K_RUNTIMEPRIORITYTHRESHOLD - 470)) | (1L << (K_SAVE - 470)) | (1L << (K_SAVEPOINT - 470)) | (1L << (K_SCROLL - 470)) | (1L << (K_SEARCH_PATH - 470)) | (1L << (K_SECOND - 470)) | (1L << (K_SECONDS - 470)) | (1L << (K_SECURITY - 470)) | (1L << (K_SECURITY_ALGORITHM - 470)) | (1L << (K_SEGMENTED - 470)) | (1L << (K_SEMI - 470)) | (1L << (K_SEMIALL - 470)) | (1L << (K_SEQUENCE - 470)) | (1L << (K_SEQUENCES - 470)) | (1L << (K_SERIALIZABLE - 470)) | (1L << (K_SESSION - 470)) | (1L << (K_SET - 470)) | (1L << (K_SETOF - 470)) | (1L << (K_SETS - 470)) | (1L << (K_SHARE - 470)) | (1L << (K_SHARED - 470)) | (1L << (K_SHOW - 470)) | (1L << (K_SIMPLE - 470)) | (1L << (K_SINGLEINITIATOR - 470)) | (1L << (K_SITE - 470)) | (1L << (K_SITES - 470)) | (1L << (K_SKIP - 470)) | (1L << (K_SOURCE - 470)) | (1L << (K_SPLIT - 470)) | (1L << (K_SSL_CONFIG - 470)))) != 0) || ((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & ((1L << (K_STABLE - 534)) | (1L << (K_STANDBY - 534)) | (1L << (K_START - 534)) | (1L << (K_STATEMENT - 534)) | (1L << (K_STATISTICS - 534)) | (1L << (K_STDIN - 534)) | (1L << (K_STDOUT - 534)) | (1L << (K_STEMMER - 534)) | (1L << (K_STORAGE - 534)) | (1L << (K_STREAM - 534)) | (1L << (K_STRENGTH - 534)) | (1L << (K_STRICT - 534)) | (1L << (K_SUBNET - 534)) | (1L << (K_SYSID - 534)) | (1L << (K_SYSTEM - 534)) | (1L << (K_TABLES - 534)) | (1L << (K_TABLESAMPLE - 534)) | (1L << (K_TABLESPACE - 534)) | (1L << (K_TEMP - 534)) | (1L << (K_TEMPLATE - 534)) | (1L << (K_TEMPORARY - 534)) | (1L << (K_TEMPSPACECAP - 534)) | (1L << (K_TERMINATOR - 534)) | (1L << (K_THAN - 534)) | (1L << (K_TIES - 534)) | (1L << (K_TLS - 534)) | (1L << (K_TOAST - 534)) | (1L << (K_TOKENIZER - 534)) | (1L << (K_TOLERANCE - 534)) | (1L << (K_TRANSACTION - 534)) | (1L << (K_TRANSFORM - 534)) | (1L << (K_TRICKLE - 534)) | (1L << (K_TRIGGER - 534)) | (1L << (K_TRUNCATE - 534)) | (1L << (K_TRUSTED - 534)) | (1L << (K_TUNING - 534)) | (1L << (K_TYPE - 534)) | (1L << (K_UDPARAMETER - 534)) | (1L << (K_UNCOMMITTED - 534)) | (1L << (K_UNCOMPRESSED - 534)) | (1L << (K_UNI - 534)) | (1L << (K_UNINDEXED - 534)) | (1L << (K_UNKNOWN - 534)) | (1L << (K_UNLIMITED - 534)) | (1L << (K_UNLISTEN - 534)) | (1L << (K_UNLOCK - 534)) | (1L << (K_UNPACKER - 534)) | (1L << (K_UNSEGMENTED - 534)) | (1L << (K_UPDATE - 534)) | (1L << (K_USAGE - 534)) | (1L << (K_VACUUM - 534)) | (1L << (K_VALIDATE - 534)) | (1L << (K_VALIDATOR - 534)) | (1L << (K_VALINDEX - 534)) | (1L << (K_VALUE - 534)) | (1L << (K_VALUES - 534)) | (1L << (K_VARYING - 534)) | (1L << (K_VERBOSE - 534)) | (1L << (K_VERTICA - 534)) | (1L << (K_VIEW - 534)) | (1L << (K_VOLATILE - 534)) | (1L << (K_WAIT - 534)) | (1L << (K_WEBHDFS_ADDRESS - 534)) | (1L << (K_WEBSERVICE_HOSTNAME - 534)))) != 0) || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & ((1L << (K_WEBSERVICE_PORT - 598)) | (1L << (K_WITHOUT - 598)) | (1L << (K_WORK - 598)) | (1L << (K_WRITE - 598)) | (1L << (K_YEAR - 598)) | (1L << (K_ZONE - 598)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u02c9\u18c6\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\3\2\5\2\u0300\n\2\3\2"+
		"\7\2\u0303\n\2\f\2\16\2\u0306\13\2\3\2\3\2\5\2\u030a\n\2\5\2\u030c\n\2"+
		"\3\2\5\2\u030f\n\2\3\3\3\3\3\3\3\3\3\3\5\3\u0316\n\3\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u039f\n\4\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\5\5\u03aa\n\5\3\5\3\5\3\5\5\5\u03af\n\5\5\5\u03b1\n\5\3\5"+
		"\3\5\3\5\3\5\3\5\5\5\u03b8\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u03c1\n"+
		"\6\3\6\5\6\u03c4\n\6\3\6\5\6\u03c7\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6"+
		"\u03d0\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7"+
		"\u03e0\n\7\3\7\3\7\3\7\5\7\u03e5\n\7\3\7\5\7\u03e8\n\7\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03fd"+
		"\n\b\3\t\3\t\3\t\3\t\5\t\u0403\n\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u040b\n"+
		"\t\3\n\3\n\3\n\3\n\3\n\3\n\6\n\u0413\n\n\r\n\16\n\u0414\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\5\13\u041e\n\13\5\13\u0420\n\13\3\13\3\13\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\5\f\u042a\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\5\16\u0439\n\16\3\16\3\16\3\16\3\16\5\16\u043f\n"+
		"\16\3\16\3\16\3\16\5\16\u0444\n\16\3\16\3\16\3\16\5\16\u0449\n\16\3\16"+
		"\5\16\u044c\n\16\3\17\3\17\3\17\3\17\7\17\u0452\n\17\f\17\16\17\u0455"+
		"\13\17\3\20\5\20\u0458\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\3\20\5\20\u0467\n\20\3\21\3\21\3\21\3\21\3\21\3\22"+
		"\3\22\3\22\3\22\3\22\6\22\u0473\n\22\r\22\16\22\u0474\3\23\3\23\3\23\3"+
		"\23\3\23\3\24\3\24\3\24\3\24\3\24\6\24\u0481\n\24\r\24\16\24\u0482\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u0495\n\25\3\25\3\25\3\25\5\25\u049a\n\25\3\25\3\25\3\25\5"+
		"\25\u049f\n\25\3\25\3\25\3\25\5\25\u04a4\n\25\3\25\3\25\3\25\5\25\u04a9"+
		"\n\25\3\25\3\25\3\25\3\25\3\25\5\25\u04b0\n\25\3\25\3\25\3\25\5\25\u04b5"+
		"\n\25\3\25\3\25\3\25\5\25\u04ba\n\25\3\25\3\25\3\25\5\25\u04bf\n\25\3"+
		"\25\3\25\3\25\3\25\3\25\5\25\u04c6\n\25\3\26\3\26\3\26\3\26\3\26\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u04d6\n\27\5\27\u04d8\n"+
		"\27\3\27\3\27\3\27\7\27\u04dd\n\27\f\27\16\27\u04e0\13\27\3\27\3\27\5"+
		"\27\u04e4\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u04ed\n\30\5\30"+
		"\u04ef\n\30\3\31\3\31\3\31\5\31\u04f4\n\31\3\31\3\31\3\31\3\31\5\31\u04fa"+
		"\n\31\3\31\3\31\3\31\3\31\5\31\u0500\n\31\3\31\3\31\3\31\5\31\u0505\n"+
		"\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u050f\n\31\5\31\u0511"+
		"\n\31\3\32\3\32\3\32\3\32\5\32\u0517\n\32\3\32\3\32\3\32\5\32\u051c\n"+
		"\32\3\32\3\32\3\32\3\32\3\32\5\32\u0523\n\32\3\32\3\32\3\32\3\32\3\32"+
		"\5\32\u052a\n\32\3\32\5\32\u052d\n\32\3\33\3\33\3\33\3\33\3\33\3\34\3"+
		"\34\3\34\3\34\3\34\7\34\u0539\n\34\f\34\16\34\u053c\13\34\3\34\3\34\3"+
		"\35\3\35\3\35\3\35\3\35\7\35\u0545\n\35\f\35\16\35\u0548\13\35\3\36\3"+
		"\36\3\36\5\36\u054d\n\36\3\36\3\36\3\36\3\36\5\36\u0553\n\36\5\36\u0555"+
		"\n\36\3\36\5\36\u0558\n\36\3\36\3\36\5\36\u055c\n\36\3\36\5\36\u055f\n"+
		"\36\3\36\3\36\3\36\3\36\3\36\7\36\u0566\n\36\f\36\16\36\u0569\13\36\3"+
		"\36\3\36\5\36\u056d\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u058d\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u0598\n\36\3\36\3\36\5\36\u059c\n\36\3"+
		"\36\3\36\5\36\u05a0\n\36\3\36\3\36\5\36\u05a4\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u05af\n\36\3\36\3\36\3\36\3\36\5\36\u05b5"+
		"\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u05c5\n\36\3\37\3\37\3\37\3\37\6\37\u05cb\n\37\r\37\16\37\u05cc"+
		"\3 \3 \3 \3 \3 \3 \7 \u05d5\n \f \16 \u05d8\13 \3 \3 \3 \3 \3 \3 \7 \u05e0"+
		"\n \f \16 \u05e3\13 \5 \u05e5\n \3 \3 \3 \5 \u05ea\n \3 \3 \3 \3 \3 \5"+
		" \u05f1\n \3 \3 \3 \3 \3 \5 \u05f8\n \3 \3 \3 \5 \u05fd\n \3 \3 \3 \3"+
		" \3 \3 \5 \u0605\n \3 \3 \3 \5 \u060a\n \3 \3 \3 \3 \3 \5 \u0611\n \3"+
		" \3 \3 \3 \3 \3 \5 \u0619\n \3 \3 \3 \3 \3 \7 \u0620\n \f \16 \u0623\13"+
		" \5 \u0625\n \3 \3 \3 \3 \3 \5 \u062c\n \5 \u062e\n \5 \u0630\n \3!\3"+
		"!\3!\3!\3!\3!\3!\3!\3!\3!\5!\u063c\n!\3!\3!\7!\u0640\n!\f!\16!\u0643\13"+
		"!\3!\3!\3!\5!\u0648\n!\3\"\6\"\u064b\n\"\r\"\16\"\u064c\3#\3#\3#\3#\3"+
		"#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0661\n$\3%\3%\3%\3%\3%\3"+
		"%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3"+
		",\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3"+
		"/\3\60\3\60\3\60\5\60\u06af\n\60\3\61\3\61\5\61\u06b3\n\61\3\62\3\62\3"+
		"\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u06c3"+
		"\n\62\3\63\3\63\3\63\5\63\u06c8\n\63\3\63\3\63\5\63\u06cc\n\63\3\63\5"+
		"\63\u06cf\n\63\3\63\3\63\5\63\u06d3\n\63\3\63\5\63\u06d6\n\63\3\63\5\63"+
		"\u06d9\n\63\3\63\3\63\5\63\u06dd\n\63\3\63\3\63\3\63\5\63\u06e2\n\63\3"+
		"\63\3\63\5\63\u06e6\n\63\3\63\3\63\5\63\u06ea\n\63\3\63\3\63\5\63\u06ee"+
		"\n\63\3\63\5\63\u06f1\n\63\3\63\3\63\5\63\u06f5\n\63\3\64\3\64\3\64\5"+
		"\64\u06fa\n\64\3\64\5\64\u06fd\n\64\3\64\3\64\5\64\u0701\n\64\3\64\5\64"+
		"\u0704\n\64\3\64\5\64\u0707\n\64\3\64\3\64\5\64\u070b\n\64\3\64\3\64\3"+
		"\64\5\64\u0710\n\64\3\64\3\64\5\64\u0714\n\64\3\64\3\64\5\64\u0718\n\64"+
		"\3\64\3\64\5\64\u071c\n\64\3\64\5\64\u071f\n\64\3\64\3\64\5\64\u0723\n"+
		"\64\3\65\3\65\3\65\7\65\u0728\n\65\f\65\16\65\u072b\13\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\7\65\u0733\n\65\f\65\16\65\u0736\13\65\3\65\3\65\3"+
		"\65\3\65\5\65\u073c\n\65\5\65\u073e\n\65\3\65\5\65\u0741\n\65\3\66\3\66"+
		"\3\66\5\66\u0746\n\66\3\66\5\66\u0749\n\66\3\67\3\67\38\38\38\38\39\3"+
		"9\39\39\59\u0755\n9\39\39\39\39\39\39\59\u075d\n9\39\39\39\39\39\39\5"+
		"9\u0765\n9\39\39\59\u0769\n9\3:\3:\5:\u076d\n:\3:\3:\3:\3:\3:\5:\u0774"+
		"\n:\3:\3:\3:\5:\u0779\n:\3:\3:\3:\5:\u077e\n:\3:\3:\5:\u0782\n:\3:\3:"+
		"\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\7:\u0796\n:\f:\16:\u0799"+
		"\13:\3:\3:\3:\5:\u079e\n:\3:\3:\3:\3:\7:\u07a4\n:\f:\16:\u07a7\13:\3:"+
		"\3:\3:\3:\3:\3:\3:\5:\u07b0\n:\3:\3:\3:\3:\3:\3:\5:\u07b8\n:\3;\3;\3;"+
		"\3;\3;\3;\7;\u07c0\n;\f;\16;\u07c3\13;\3;\3;\5;\u07c7\n;\3;\3;\3;\3;\3"+
		";\3;\7;\u07cf\n;\f;\16;\u07d2\13;\3;\3;\5;\u07d6\n;\3;\3;\3;\5;\u07db"+
		"\n;\3;\3;\3;\7;\u07e0\n;\f;\16;\u07e3\13;\3;\3;\3;\7;\u07e8\n;\f;\16;"+
		"\u07eb\13;\3;\3;\5;\u07ef\n;\5;\u07f1\n;\3;\5;\u07f4\n;\3;\6;\u07f7\n"+
		";\r;\16;\u07f8\5;\u07fb\n;\3;\7;\u07fe\n;\f;\16;\u0801\13;\3<\3<\3=\3"+
		"=\3=\5=\u0808\n=\3=\3=\3=\3=\5=\u080e\n=\3=\5=\u0811\n=\3=\3=\3=\5=\u0816"+
		"\n=\3=\3=\5=\u081a\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u082a"+
		"\n>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0836\n?\3?\5?\u0839\n?\3?\5?\u083c"+
		"\n?\3@\3@\3@\3@\3@\3@\3@\7@\u0845\n@\f@\16@\u0848\13@\3@\3@\5@\u084c\n"+
		"@\3A\3A\3A\3A\3A\3A\5A\u0854\nA\3A\3A\3A\5A\u0859\nA\3A\3A\3A\3A\3A\3"+
		"A\7A\u0861\nA\fA\16A\u0864\13A\3A\3A\5A\u0868\nA\3A\3A\3A\3A\3A\3A\7A"+
		"\u0870\nA\fA\16A\u0873\13A\3A\3A\5A\u0877\nA\3A\3A\3A\3A\5A\u087d\nA\3"+
		"A\3A\3A\3A\3A\3A\5A\u0885\nA\5A\u0887\nA\3A\5A\u088a\nA\3A\3A\3A\3A\3"+
		"A\3A\3A\3A\3A\3A\3A\7A\u0897\nA\fA\16A\u089a\13A\3A\3A\3A\3A\5A\u08a0"+
		"\nA\3A\3A\3A\5A\u08a5\nA\3A\3A\5A\u08a9\nA\3A\3A\3A\3A\3A\3A\3A\3A\5A"+
		"\u08b3\nA\3A\5A\u08b6\nA\3A\3A\5A\u08ba\nA\3A\3A\3A\3A\3A\5A\u08c1\nA"+
		"\3A\3A\3A\3A\5A\u08c7\nA\3A\3A\3A\7A\u08cc\nA\fA\16A\u08cf\13A\5A\u08d1"+
		"\nA\3A\5A\u08d4\nA\3A\3A\3A\3A\5A\u08da\nA\3A\3A\5A\u08de\nA\3A\3A\5A"+
		"\u08e2\nA\3A\5A\u08e5\nA\3A\5A\u08e8\nA\3A\3A\3A\3A\5A\u08ee\nA\3A\3A"+
		"\5A\u08f2\nA\3A\3A\3A\5A\u08f7\nA\3A\3A\3A\3A\3A\5A\u08fe\nA\3A\3A\3A"+
		"\7A\u0903\nA\fA\16A\u0906\13A\5A\u0908\nA\3A\3A\5A\u090c\nA\3A\3A\5A\u0910"+
		"\nA\3A\3A\3A\5A\u0915\nA\3A\3A\5A\u0919\nA\3A\3A\5A\u091d\nA\3B\3B\3B"+
		"\3B\3B\3C\3C\3C\3C\3C\3C\5C\u092a\nC\3C\3C\3C\5C\u092f\nC\3C\5C\u0932"+
		"\nC\3C\5C\u0935\nC\3C\5C\u0938\nC\3C\5C\u093b\nC\3C\5C\u093e\nC\3C\5C"+
		"\u0941\nC\3C\3C\5C\u0945\nC\3D\3D\3D\3D\3D\5D\u094c\nD\3D\3D\3D\5D\u0951"+
		"\nD\3D\3D\3D\3D\3D\3D\7D\u0959\nD\fD\16D\u095c\13D\3D\3D\5D\u0960\nD\3"+
		"D\3D\3D\3D\3D\7D\u0967\nD\fD\16D\u096a\13D\5D\u096c\nD\3D\5D\u096f\nD"+
		"\3D\3D\3D\3D\3D\3D\5D\u0977\nD\3D\3D\3D\3D\3D\3D\5D\u097f\nD\3D\3D\3D"+
		"\3D\5D\u0985\nD\3D\3D\5D\u0989\nD\3D\5D\u098c\nD\3D\3D\5D\u0990\nD\3D"+
		"\3D\5D\u0994\nD\3D\5D\u0997\nD\3D\3D\5D\u099b\nD\3D\3D\3D\5D\u09a0\nD"+
		"\3D\3D\5D\u09a4\nD\3D\5D\u09a7\nD\3D\3D\3D\5D\u09ac\nD\3D\3D\5D\u09b0"+
		"\nD\3D\3D\3D\5D\u09b5\nD\3D\3D\5D\u09b9\nD\3D\3D\5D\u09bd\nD\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09ca\nD\fD\16D\u09cd\13D\5D\u09cf\nD\3D\3"+
		"D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09de\nD\fD\16D\u09e1\13D\5D\u09e3"+
		"\nD\3D\5D\u09e6\nD\3D\3D\3D\5D\u09eb\nD\5D\u09ed\nD\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\5E\u09f7\nE\3F\3F\3F\5F\u09fc\nF\3F\3F\3F\3F\3F\3F\5F\u0a04\nF"+
		"\3F\3F\3F\3F\3F\3F\3F\5F\u0a0d\nF\3G\3G\3G\5G\u0a12\nG\3G\3G\3G\3G\3G"+
		"\3G\3G\3G\3G\3G\3G\3G\5G\u0a20\nG\3H\3H\3H\5H\u0a25\nH\3H\3H\3H\3H\3H"+
		"\5H\u0a2c\nH\3H\3H\3H\3H\3H\3H\3H\5H\u0a35\nH\3I\3I\3I\5I\u0a3a\nI\3I"+
		"\3I\3I\3I\3I\5I\u0a41\nI\3I\3I\3I\3I\3I\3I\3I\5I\u0a4a\nI\3J\3J\3J\5J"+
		"\u0a4f\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3K\3K\3K\3K\5K\u0a5d\nK\3K\3K\3L\3L"+
		"\3L\5L\u0a64\nL\3L\3L\3L\3L\3L\5L\u0a6b\nL\3L\3L\3L\3L\3L\5L\u0a72\nL"+
		"\3L\5L\u0a75\nL\3M\3M\3M\5M\u0a7a\nM\3M\3M\3M\3M\3M\3M\5M\u0a82\nM\3M"+
		"\3M\3M\3M\3M\3M\3M\5M\u0a8b\nM\3N\3N\3N\5N\u0a90\nN\3N\3N\3N\3N\3N\3N"+
		"\5N\u0a98\nN\3N\3N\3N\3N\3N\3O\3O\3O\3O\5O\u0aa3\nO\3O\3O\3O\5O\u0aa8"+
		"\nO\3O\3O\6O\u0aac\nO\rO\16O\u0aad\5O\u0ab0\nO\3P\3P\3P\3P\3Q\3Q\3Q\5"+
		"Q\u0ab9\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u0ac0\nQ\3Q\3Q\5Q\u0ac4\nQ\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\7R\u0ad0\nR\fR\16R\u0ad3\13R\3R\3R\3R\3R\3R\7R\u0ada"+
		"\nR\fR\16R\u0add\13R\3R\3R\3R\5R\u0ae2\nR\3R\3R\5R\u0ae6\nR\3S\3S\3S\3"+
		"S\3S\3S\3S\3S\3S\5S\u0af1\nS\3S\3S\3S\3T\3T\3T\3T\3T\3T\3T\5T\u0afd\n"+
		"T\3T\5T\u0b00\nT\3T\3T\5T\u0b04\nT\3T\3T\5T\u0b08\nT\3T\3T\5T\u0b0c\n"+
		"T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3W\3W\3W\3W\3"+
		"W\3W\7W\u0b26\nW\fW\16W\u0b29\13W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3Y"+
		"\3Y\3Y\3Y\7Y\u0b3a\nY\fY\16Y\u0b3d\13Y\5Y\u0b3f\nY\3Y\3Y\3Z\5Z\u0b44\n"+
		"Z\3Z\3Z\3[\3[\3[\3[\3[\6[\u0b4d\n[\r[\16[\u0b4e\3\\\3\\\5\\\u0b53\n\\"+
		"\3\\\5\\\u0b56\n\\\3\\\5\\\u0b59\n\\\3]\3]\5]\u0b5d\n]\3^\3^\5^\u0b61"+
		"\n^\3^\3^\3_\3_\3_\5_\u0b68\n_\3_\3_\5_\u0b6c\n_\3_\3_\3_\3_\7_\u0b72"+
		"\n_\f_\16_\u0b75\13_\3_\3_\5_\u0b79\n_\3_\3_\3_\5_\u0b7e\n_\3_\5_\u0b81"+
		"\n_\3_\5_\u0b84\n_\3_\5_\u0b87\n_\3`\3`\5`\u0b8b\n`\3a\3a\3a\5a\u0b90"+
		"\na\3a\3a\3a\3a\3a\7a\u0b97\na\fa\16a\u0b9a\13a\3a\3a\5a\u0b9e\na\3a\3"+
		"a\3a\5a\u0ba3\na\3a\3a\5a\u0ba7\na\3b\3b\3b\5b\u0bac\nb\3b\3b\3b\3b\3"+
		"b\7b\u0bb3\nb\fb\16b\u0bb6\13b\3b\3b\5b\u0bba\nb\3b\3b\3b\5b\u0bbf\nb"+
		"\3b\3b\3b\5b\u0bc4\nb\3c\3c\3c\5c\u0bc9\nc\3c\3c\3c\3c\3c\7c\u0bd0\nc"+
		"\fc\16c\u0bd3\13c\3c\3c\5c\u0bd7\nc\3c\3c\3c\3c\3c\3c\5c\u0bdf\nc\5c\u0be1"+
		"\nc\3c\5c\u0be4\nc\3d\3d\5d\u0be8\nd\3d\3d\7d\u0bec\nd\fd\16d\u0bef\13"+
		"d\3d\3d\3d\3d\7d\u0bf5\nd\fd\16d\u0bf8\13d\5d\u0bfa\nd\3e\3e\3e\3e\3e"+
		"\3e\3e\3e\3e\3e\3e\3e\3e\5e\u0c09\ne\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\5f\u0c18\nf\3f\3f\3f\3g\3g\3g\3g\3g\6g\u0c22\ng\rg\16g\u0c23\3"+
		"h\3h\3h\3h\3i\3i\3i\3i\3i\3i\3i\3i\3i\3j\3j\3j\5j\u0c36\nj\3j\3j\3j\5"+
		"j\u0c3b\nj\3j\3j\5j\u0c3f\nj\3k\3k\3k\5k\u0c44\nk\3k\3k\3k\3k\5k\u0c4a"+
		"\nk\3k\3k\3k\3k\5k\u0c50\nk\3k\3k\3k\3k\5k\u0c56\nk\3k\3k\3k\5k\u0c5b"+
		"\nk\3k\3k\3k\3k\3k\3k\3k\3k\5k\u0c65\nk\5k\u0c67\nk\3l\3l\3l\3l\3l\3l"+
		"\3m\3m\3m\5m\u0c72\nm\3n\3n\5n\u0c76\nn\3n\5n\u0c79\nn\3n\3n\3o\3o\3o"+
		"\5o\u0c80\no\3o\3o\5o\u0c84\no\3o\5o\u0c87\no\3o\3o\5o\u0c8b\no\3o\3o"+
		"\5o\u0c8f\no\3p\3p\3p\3p\7p\u0c95\np\fp\16p\u0c98\13p\5p\u0c9a\np\3p\3"+
		"p\3q\3q\5q\u0ca0\nq\3q\5q\u0ca3\nq\3q\5q\u0ca6\nq\3r\3r\3r\3s\3s\3s\3"+
		"t\3t\3t\5t\u0cb1\nt\3t\3t\3t\3t\3t\5t\u0cb8\nt\3t\5t\u0cbb\nt\3t\5t\u0cbe"+
		"\nt\3u\3u\3u\5u\u0cc3\nu\3u\3u\3u\3u\3u\3u\7u\u0ccb\nu\fu\16u\u0cce\13"+
		"u\5u\u0cd0\nu\3u\5u\u0cd3\nu\3u\5u\u0cd6\nu\3u\5u\u0cd9\nu\3u\5u\u0cdc"+
		"\nu\3u\5u\u0cdf\nu\3u\5u\u0ce2\nu\3v\3v\3v\3v\3v\3v\5v\u0cea\nv\3v\3v"+
		"\3v\3v\3v\3v\5v\u0cf2\nv\3v\3v\3v\5v\u0cf7\nv\3v\3v\3v\3v\3v\5v\u0cfe"+
		"\nv\5v\u0d00\nv\3w\3w\3w\3w\7w\u0d06\nw\fw\16w\u0d09\13w\5w\u0d0b\nw\3"+
		"w\3w\3x\3x\5x\u0d11\nx\3x\7x\u0d14\nx\fx\16x\u0d17\13x\3x\5x\u0d1a\nx"+
		"\3x\5x\u0d1d\nx\3y\3y\3y\3y\3y\7y\u0d24\ny\fy\16y\u0d27\13y\3y\3y\5y\u0d2b"+
		"\ny\3y\3y\3y\3y\3y\3y\3y\5y\u0d34\ny\3y\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0d3f"+
		"\ny\3y\3y\3y\3y\5y\u0d45\ny\3y\3y\3y\3y\5y\u0d4b\ny\3y\3y\5y\u0d4f\ny"+
		"\3y\3y\5y\u0d53\ny\3z\3z\3{\3{\3{\3{\3{\5{\u0d5c\n{\3{\3{\3{\3{\3{\3{"+
		"\5{\u0d64\n{\3{\3{\3{\3{\7{\u0d6a\n{\f{\16{\u0d6d\13{\5{\u0d6f\n{\5{\u0d71"+
		"\n{\3|\3|\5|\u0d75\n|\3}\3}\5}\u0d79\n}\3}\3}\3}\5}\u0d7e\n}\3}\3}\3}"+
		"\5}\u0d83\n}\3}\3}\3}\3}\5}\u0d89\n}\3}\5}\u0d8c\n}\3}\3}\5}\u0d90\n}"+
		"\3}\5}\u0d93\n}\3}\5}\u0d96\n}\3}\5}\u0d99\n}\3}\5}\u0d9c\n}\3~\3~\3~"+
		"\3~\5~\u0da2\n~\3~\3~\5~\u0da6\n~\3~\3~\3~\3~\5~\u0dac\n~\3~\5~\u0daf"+
		"\n~\3~\3~\5~\u0db3\n~\3~\5~\u0db6\n~\3~\3~\5~\u0dba\n~\3\177\3\177\3\177"+
		"\3\177\3\177\7\177\u0dc1\n\177\f\177\16\177\u0dc4\13\177\3\u0080\3\u0080"+
		"\5\u0080\u0dc8\n\u0080\3\u0080\5\u0080\u0dcb\n\u0080\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\5\u0081\u0dd9\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\5\u0081\u0de3\n\u0081\5\u0081\u0de5\n\u0081\3"+
		"\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0ded\n\u0081\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u0df3\n\u0082\f\u0082\16\u0082"+
		"\u0df6\13\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u0dfb\n\u0083\3\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0e00\n\u0083\3\u0083\5\u0083\u0e03\n\u0083\3"+
		"\u0083\3\u0083\3\u0083\5\u0083\u0e08\n\u0083\3\u0084\3\u0084\5\u0084\u0e0c"+
		"\n\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0e11\n\u0084\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0e19\n\u0085\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\5\u0087\u0e27\n\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0e30\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0e4c\n\u008d\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\5\u008e\u0e52\n\u008e\3\u008e\3\u008e\3\u008e\3\u008f"+
		"\3\u008f\3\u008f\5\u008f\u0e5a\n\u008f\3\u008f\3\u008f\5\u008f\u0e5e\n"+
		"\u008f\3\u0090\3\u0090\3\u0090\5\u0090\u0e63\n\u0090\3\u0090\3\u0090\3"+
		"\u0090\7\u0090\u0e68\n\u0090\f\u0090\16\u0090\u0e6b\13\u0090\3\u0090\5"+
		"\u0090\u0e6e\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0e74\n\u0091"+
		"\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\5\u0092\u0e7b\n\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096\5\u0096\u0e95\n\u0096\3\u0096"+
		"\3\u0096\3\u0096\7\u0096\u0e9a\n\u0096\f\u0096\16\u0096\u0e9d\13\u0096"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0ea2\n\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0ea6\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0eae\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099"+
		"\u0eb6\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0ebc\n\u009a\3"+
		"\u009a\3\u009a\5\u009a\u0ec0\n\u009a\3\u009b\3\u009b\3\u009b\5\u009b\u0ec5"+
		"\n\u009b\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\5\u009c\u0ecc\n\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0ed4\n\u009d"+
		"\3\u009d\3\u009d\3\u009d\7\u009d\u0ed9\n\u009d\f\u009d\16\u009d\u0edc"+
		"\13\u009d\3\u009d\5\u009d\u0edf\n\u009d\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0ee4\n\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0ee9\n\u009e\f\u009e\16"+
		"\u009e\u0eec\13\u009e\3\u009e\5\u009e\u0eef\n\u009e\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0ef9\n\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\7\u00a0\u0efe\n\u00a0\f\u00a0\16\u00a0\u0f01\13"+
		"\u00a0\3\u00a0\5\u00a0\u0f04\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f0e\n\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\7\u00a2\u0f13\n\u00a2\f\u00a2\16\u00a2\u0f16\13\u00a2\3\u00a2\5"+
		"\u00a2\u0f19\n\u00a2\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f1e\n\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\7\u00a3\u0f23\n\u00a3\f\u00a3\16\u00a3\u0f26\13\u00a3"+
		"\3\u00a3\5\u00a3\u0f29\n\u00a3\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f2e\n"+
		"\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f32\n\u00a4\3\u00a5\3\u00a5\3\u00a5\5"+
		"\u00a5\u0f37\n\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f3c\n\u00a5\f\u00a5"+
		"\16\u00a5\u0f3f\13\u00a5\3\u00a5\5\u00a5\u0f42\n\u00a5\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\5\u00a6\u0f48\n\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\5\u00a7\u0f50\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8"+
		"\3\u00a8\3\u00a8\5\u00a8\u0f58\n\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8"+
		"\u0f5d\n\u00a8\f\u00a8\16\u00a8\u0f60\13\u00a8\3\u00a8\5\u00a8\u0f63\n"+
		"\u00a8\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f68\n\u00a9\3\u00a9\3\u00a9\3"+
		"\u00a9\7\u00a9\u0f6d\n\u00a9\f\u00a9\16\u00a9\u0f70\13\u00a9\3\u00aa\3"+
		"\u00aa\5\u00aa\u0f74\n\u00aa\3\u00ab\3\u00ab\5\u00ab\u0f78\n\u00ab\3\u00ab"+
		"\5\u00ab\u0f7b\n\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f8a"+
		"\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f90\n\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f96\n\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\5\u00ac\u0f9c\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0fa2\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fa6\n\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb0\n\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb7\n\u00ad\5\u00ad\u0fb9"+
		"\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0fc8\n\u00ae\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0fcd\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\7\u00af\u0fd3\n\u00af\f\u00af\16\u00af\u0fd6\13\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0fdb\n\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0"+
		"\u0fe1\n\u00b0\5\u00b0\u0fe3\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0ff0\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0ff8\n"+
		"\u00b0\f\u00b0\16\u00b0\u0ffb\13\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u1004\n\u00b0\f\u00b0\16\u00b0\u1007"+
		"\13\u00b0\5\u00b0\u1009\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u100e"+
		"\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u1014\n\u00b1\f\u00b1"+
		"\16\u00b1\u1017\13\u00b1\3\u00b1\3\u00b1\5\u00b1\u101b\n\u00b1\5\u00b1"+
		"\u101d\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u1021\n\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\7\u00b1\u1026\n\u00b1\f\u00b1\16\u00b1\u1029\13\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u1032\n\u00b1\f"+
		"\u00b1\16\u00b1\u1035\13\u00b1\5\u00b1\u1037\n\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\5\u00b1\u103c\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\7\u00b2\u1042"+
		"\n\u00b2\f\u00b2\16\u00b2\u1045\13\u00b2\3\u00b2\3\u00b2\5\u00b2\u1049"+
		"\n\u00b2\5\u00b2\u104b\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u1053\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u1059\n\u00b3\5\u00b3\u105b\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3"+
		"\u00b3\7\u00b3\u1062\n\u00b3\f\u00b3\16\u00b3\u1065\13\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u106e\n\u00b3\f"+
		"\u00b3\16\u00b3\u1071\13\u00b3\5\u00b3\u1073\n\u00b3\3\u00b3\3\u00b3\3"+
		"\u00b3\5\u00b3\u1078\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u107e"+
		"\n\u00b4\f\u00b4\16\u00b4\u1081\13\u00b4\3\u00b4\3\u00b4\5\u00b4\u1085"+
		"\n\u00b4\5\u00b4\u1087\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u108e\n\u00b4\f\u00b4\16\u00b4\u1091\13\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u1096\n\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\7\u00b6\u109e\n\u00b6\f\u00b6\16\u00b6\u10a1\13\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\5\u00b6\u10a6\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u10ac\n\u00b7\5\u00b7\u10ae\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\7\u00b7\u10b6\n\u00b7\f\u00b7\16\u00b7\u10b9\13"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10be\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\5\u00b8\u10c4\n\u00b8\5\u00b8\u10c6\n\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\7\u00b8\u10d0\n\u00b8"+
		"\f\u00b8\16\u00b8\u10d3\13\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10d8"+
		"\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10de\n\u00b9\5\u00b9"+
		"\u10e0\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u10e7\n"+
		"\u00b9\f\u00b9\16\u00b9\u10ea\13\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9"+
		"\u10ef\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u10f5\n\u00ba\5"+
		"\u00ba\u10f7\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u10fe"+
		"\n\u00ba\f\u00ba\16\u00ba\u1101\13\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u1106\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u110d\n"+
		"\u00bb\5\u00bb\u110f\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\5\u00bb\u1117\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\7\u00be"+
		"\u1126\n\u00be\f\u00be\16\u00be\u1129\13\u00be\3\u00bf\3\u00bf\5\u00bf"+
		"\u112d\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1"+
		"\3\u00c1\5\u00c1\u1137\n\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u113c\n"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u114d"+
		"\n\u00c2\5\u00c2\u114f\n\u00c2\3\u00c3\3\u00c3\5\u00c3\u1153\n\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\5\u00c3\u1158\n\u00c3\3\u00c3\3\u00c3\3\u00c3\5"+
		"\u00c3\u115d\n\u00c3\3\u00c3\5\u00c3\u1160\n\u00c3\3\u00c3\3\u00c3\6\u00c3"+
		"\u1164\n\u00c3\r\u00c3\16\u00c3\u1165\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u116e\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u117b"+
		"\n\u00c4\f\u00c4\16\u00c4\u117e\13\u00c4\3\u00c4\5\u00c4\u1181\n\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1188\n\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1192"+
		"\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\5\u00c6\u1199\n\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11aa\n\u00c7"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u11b0\n\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u11b5\n\u00c8\5\u00c8\u11b7\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\7\u00c8\u11bd\n\u00c8\f\u00c8\16\u00c8\u11c0\13\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u11c5\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\5\u00c9\u11cb\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11d0\n\u00c9"+
		"\5\u00c9\u11d2\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11df\n\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u11e7\n\u00c9\f\u00c9"+
		"\16\u00c9\u11ea\13\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\7\u00c9\u11f3\n\u00c9\f\u00c9\16\u00c9\u11f6\13\u00c9\5\u00c9"+
		"\u11f8\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11fd\n\u00c9\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\5\u00ca\u1203\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7"+
		"\u00ca\u1208\n\u00ca\f\u00ca\16\u00ca\u120b\13\u00ca\3\u00ca\3\u00ca\5"+
		"\u00ca\u120f\n\u00ca\5\u00ca\u1211\n\u00ca\3\u00ca\3\u00ca\5\u00ca\u1215"+
		"\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u121a\n\u00ca\f\u00ca\16\u00ca"+
		"\u121d\13\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\7\u00ca\u1226\n\u00ca\f\u00ca\16\u00ca\u1229\13\u00ca\5\u00ca\u122b\n"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1230\n\u00ca\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u1236\n\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u123b"+
		"\n\u00cb\f\u00cb\16\u00cb\u123e\13\u00cb\3\u00cb\3\u00cb\5\u00cb\u1242"+
		"\n\u00cb\5\u00cb\u1244\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u124c\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u1252\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1257\n\u00cc\5\u00cc\u1259"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u1260\n\u00cc"+
		"\f\u00cc\16\u00cc\u1263\13\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u126c\n\u00cc\f\u00cc\16\u00cc\u126f\13\u00cc"+
		"\5\u00cc\u1271\n\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1276\n\u00cc\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u127c\n\u00cd\3\u00cd\3\u00cd\3"+
		"\u00cd\7\u00cd\u1281\n\u00cd\f\u00cd\16\u00cd\u1284\13\u00cd\3\u00cd\3"+
		"\u00cd\5\u00cd\u1288\n\u00cd\5\u00cd\u128a\n\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\7\u00cd\u1291\n\u00cd\f\u00cd\16\u00cd\u1294\13\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1299\n\u00cd\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\5\u00ce\u129f\n\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u12a4\n"+
		"\u00ce\f\u00ce\16\u00ce\u12a7\13\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u12ac\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u12b2\n\u00cf\3"+
		"\u00cf\3\u00cf\3\u00cf\5\u00cf\u12b7\n\u00cf\5\u00cf\u12b9\n\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u12c1\n\u00cf\f\u00cf"+
		"\16\u00cf\u12c4\13\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u12c9\n\u00cf"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u12cf\n\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u12d4\n\u00d0\5\u00d0\u12d6\n\u00d0\3\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u12e0\n\u00d0\f"+
		"\u00d0\16\u00d0\u12e3\13\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u12e8\n"+
		"\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u12ee\n\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u12f3\n\u00d1\5\u00d1\u12f5\n\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u12fc\n\u00d1\f\u00d1\16\u00d1\u12ff"+
		"\13\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1304\n\u00d1\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u130a\n\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u130f\n\u00d2\5\u00d2\u1311\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3"+
		"\u00d2\7\u00d2\u1318\n\u00d2\f\u00d2\16\u00d2\u131b\13\u00d2\3\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u1320\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5"+
		"\u00d3\u1326\n\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u132b\n\u00d3\f\u00d3"+
		"\16\u00d3\u132e\13\u00d3\3\u00d3\3\u00d3\5\u00d3\u1332\n\u00d3\5\u00d3"+
		"\u1334\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u133c\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5"+
		"\3\u00d5\5\u00d5\u1346\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u134b\n"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8"+
		"\u1354\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u1362\n\u00d8\f\u00d8"+
		"\16\u00d8\u1365\13\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\5\u00d9\u136d\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1372\n\u00d9\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u1379\n\u00da\3\u00da\3"+
		"\u00da\3\u00da\5\u00da\u137e\n\u00da\3\u00da\7\u00da\u1381\n\u00da\f\u00da"+
		"\16\u00da\u1384\13\u00da\5\u00da\u1386\n\u00da\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u1390\n\u00db\3\u00db"+
		"\3\u00db\3\u00db\5\u00db\u1395\n\u00db\5\u00db\u1397\n\u00db\3\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\7\u00df\u13ad\n\u00df\f\u00df\16\u00df\u13b0\13\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u13b9\n\u00df"+
		"\f\u00df\16\u00df\u13bc\13\u00df\3\u00df\5\u00df\u13bf\n\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\7\u00e0\u13c7\n\u00e0\f\u00e0"+
		"\16\u00e0\u13ca\13\u00e0\3\u00e0\5\u00e0\u13cd\n\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\5\u00e2\u13db\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u13df\n\u00e2\3"+
		"\u00e2\6\u00e2\u13e2\n\u00e2\r\u00e2\16\u00e2\u13e3\3\u00e3\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u13ed\n\u00e3\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u13f6\n\u00e4\3"+
		"\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u13ff\n"+
		"\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u140d\n\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1416\n\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u141d\n\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1428"+
		"\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u142c\n\u00eb\3\u00eb\3\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ec\5\u00ec\u1433\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\5\u00ed\u1439\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee"+
		"\u1440\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1447\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u144f\n"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1"+
		"\u1458\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\5\u00f3"+
		"\u1460\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1464\n\u00f3\3\u00f3\3\u00f3\3"+
		"\u00f3\5\u00f3\u1469\n\u00f3\3\u00f3\5\u00f3\u146c\n\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1475\n\u00f4\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u147d\n\u00f5\3\u00f5"+
		"\5\u00f5\u1480\n\u00f5\3\u00f5\5\u00f5\u1483\n\u00f5\3\u00f5\5\u00f5\u1486"+
		"\n\u00f5\3\u00f5\5\u00f5\u1489\n\u00f5\3\u00f5\5\u00f5\u148c\n\u00f5\3"+
		"\u00f5\5\u00f5\u148f\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u1493\n\u00f5\5\u00f5"+
		"\u1495\n\u00f5\3\u00f5\5\u00f5\u1498\n\u00f5\3\u00f5\5\u00f5\u149b\n\u00f5"+
		"\3\u00f5\5\u00f5\u149e\n\u00f5\3\u00f5\5\u00f5\u14a1\n\u00f5\3\u00f5\5"+
		"\u00f5\u14a4\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\7"+
		"\u00f5\u14ac\n\u00f5\f\u00f5\16\u00f5\u14af\13\u00f5\5\u00f5\u14b1\n\u00f5"+
		"\5\u00f5\u14b3\n\u00f5\5\u00f5\u14b5\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f7\3\u00f7\3\u00f7\5\u00f7\u14bd\n\u00f7\3\u00f8\3\u00f8\5\u00f8\u14c1"+
		"\n\u00f8\3\u00f8\5\u00f8\u14c4\n\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u14d1"+
		"\n\u00fb\3\u00fb\7\u00fb\u14d4\n\u00fb\f\u00fb\16\u00fb\u14d7\13\u00fb"+
		"\3\u00fb\5\u00fb\u14da\n\u00fb\3\u00fc\3\u00fc\5\u00fc\u14de\n\u00fc\3"+
		"\u00fc\3\u00fc\5\u00fc\u14e2\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u14e6\n\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u14ea\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\5\u00fc\u14f1\n\u00fc\5\u00fc\u14f3\n\u00fc\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\5\u00fe\u1502\n\u00fe\3\u00fe\5\u00fe\u1505\n\u00fe\3"+
		"\u00fe\3\u00fe\5\u00fe\u1509\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100\3"+
		"\u0100\3\u0100\5\u0100\u1511\n\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3"+
		"\u0101\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\7\u0103\u1520\n\u0103\f\u0103\16\u0103\u1523\13\u0103\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\7\u0104\u152c\n\u0104\f\u0104"+
		"\16\u0104\u152f\13\u0104\5\u0104\u1531\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\7\u0104\u1538\n\u0104\f\u0104\16\u0104\u153b\13\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1542\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1549\n\u0104\7\u0104\u154b\n"+
		"\u0104\f\u0104\16\u0104\u154e\13\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u155d\n\u0104\5\u0104\u155f\n\u0104\3\u0104\3\u0104\3\u0105\3"+
		"\u0105\3\u0105\3\u0105\5\u0105\u1567\n\u0105\3\u0105\3\u0105\5\u0105\u156b"+
		"\n\u0105\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\5\u010a\u157e\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u1586\n\u010b\3\u010b\3\u010b\7\u010b\u158a\n\u010b\f\u010b\16"+
		"\u010b\u158d\13\u010b\5\u010b\u158f\n\u010b\3\u010c\3\u010c\3\u010c\3"+
		"\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u159a\n\u010d\3"+
		"\u010d\3\u010d\3\u010d\5\u010d\u159f\n\u010d\3\u010d\5\u010d\u15a2\n\u010d"+
		"\5\u010d\u15a4\n\u010d\3\u010e\3\u010e\3\u010e\5\u010e\u15a9\n\u010e\3"+
		"\u010e\3\u010e\5\u010e\u15ad\n\u010e\3\u010e\3\u010e\5\u010e\u15b1\n\u010e"+
		"\3\u010e\3\u010e\5\u010e\u15b5\n\u010e\3\u010e\3\u010e\3\u010e\5\u010e"+
		"\u15ba\n\u010e\3\u010e\5\u010e\u15bd\n\u010e\3\u010e\5\u010e\u15c0\n\u010e"+
		"\3\u010e\5\u010e\u15c3\n\u010e\3\u010f\3\u010f\3\u010f\7\u010f\u15c8\n"+
		"\u010f\f\u010f\16\u010f\u15cb\13\u010f\3\u0110\3\u0110\3\u0110\5\u0110"+
		"\u15d0\n\u0110\5\u0110\u15d2\n\u0110\3\u0111\3\u0111\3\u0112\3\u0112\3"+
		"\u0112\7\u0112\u15d9\n\u0112\f\u0112\16\u0112\u15dc\13\u0112\3\u0113\3"+
		"\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\5\u0114\u15eb\n\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\5\u0115\u15f1\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\5\u0115\u15fb\n\u0115\3\u0115\5\u0115\u15fe\n"+
		"\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u1603\n\u0115\f\u0115\16\u0115"+
		"\u1606\13\u0115\5\u0115\u1608\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\7\u0116\u160f\n\u0116\f\u0116\16\u0116\u1612\13\u0116\5\u0116"+
		"\u1614\n\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\5\u0117\u161f\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\3\u0119\3\u0119\5\u0119\u1627\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\5\u0119\u162d\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u1633\n"+
		"\u011a\f\u011a\16\u011a\u1636\13\u011a\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011d\3\u011d\3\u011d\5\u011d"+
		"\u1644\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\5\u011e\u164f\n\u011e\3\u011f\3\u011f\5\u011f\u1653\n"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u165c\n\u0120\3\u0120\3\u0120\5\u0120\u1660\n\u0120\3\u0121\3\u0121\3"+
		"\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\7\u0121"+
		"\u166c\n\u0121\f\u0121\16\u0121\u166f\13\u0121\3\u0121\3\u0121\5\u0121"+
		"\u1673\n\u0121\3\u0121\3\u0121\3\u0122\5\u0122\u1678\n\u0122\3\u0122\3"+
		"\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u167f\n\u0123\3\u0123\3\u0123\3"+
		"\u0123\7\u0123\u1684\n\u0123\f\u0123\16\u0123\u1687\13\u0123\5\u0123\u1689"+
		"\n\u0123\3\u0123\3\u0123\5\u0123\u168d\n\u0123\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u1692\n\u0124\5\u0124\u1694\n\u0124\3\u0125\3\u0125\5\u0125\u1698"+
		"\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u169d\n\u0125\3\u0126\3\u0126"+
		"\5\u0126\u16a1\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\7\u0126\u16a7\n"+
		"\u0126\f\u0126\16\u0126\u16aa\13\u0126\5\u0126\u16ac\n\u0126\3\u0127\3"+
		"\u0127\3\u0127\7\u0127\u16b1\n\u0127\f\u0127\16\u0127\u16b4\13\u0127\3"+
		"\u0127\3\u0127\5\u0127\u16b8\n\u0127\3\u0127\3\u0127\7\u0127\u16bc\n\u0127"+
		"\f\u0127\16\u0127\u16bf\13\u0127\3\u0127\5\u0127\u16c2\n\u0127\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u16cc"+
		"\n\u0129\f\u0129\16\u0129\u16cf\13\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u16eb\n\u012a\f\u012a\16\u012a"+
		"\u16ee\13\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\7\u012a\u1701\n\u012a\f\u012a\16\u012a\u1704\13\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u170d\n\u012a"+
		"\f\u012a\16\u012a\u1710\13\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u171a\n\u012a\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u171f\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1724\n\u012b\3"+
		"\u012b\3\u012b\3\u012b\5\u012b\u1729\n\u012b\3\u012b\3\u012b\3\u012c\3"+
		"\u012c\3\u012c\5\u012c\u1730\n\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1735"+
		"\n\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u173c\n\u012d"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u1741\n\u012d\3\u012d\3\u012d\3\u012e"+
		"\3\u012e\3\u012e\5\u012e\u1748\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e"+
		"\u174d\n\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u1754\n"+
		"\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1759\n\u012f\3\u012f\3\u012f\3"+
		"\u0130\3\u0130\3\u0130\5\u0130\u1760\n\u0130\3\u0130\3\u0130\3\u0130\5"+
		"\u0130\u1765\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\5\u0131\u176c"+
		"\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1771\n\u0131\3\u0131\3\u0131"+
		"\3\u0131\5\u0131\u1776\n\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u177d\n\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1782\n\u0132\3"+
		"\u0132\3\u0132\3\u0132\5\u0132\u1787\n\u0132\3\u0132\3\u0132\3\u0133\3"+
		"\u0133\3\u0134\3\u0134\3\u0134\5\u0134\u1790\n\u0134\3\u0134\3\u0134\3"+
		"\u0134\5\u0134\u1795\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u179c\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u17a1\n\u0135\3\u0135"+
		"\3\u0135\3\u0136\3\u0136\3\u0136\5\u0136\u17a8\n\u0136\3\u0136\3\u0136"+
		"\3\u0136\5\u0136\u17ad\n\u0136\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u17b4\n\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u17b9\n\u0137\3"+
		"\u0137\3\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u17c0\n\u0138\3\u0138\3"+
		"\u0138\3\u0138\5\u0138\u17c5\n\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3"+
		"\u0139\5\u0139\u17cc\n\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3\u013b\3"+
		"\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f"+
		"\3\u0140\3\u0140\3\u0141\3\u0141\3\u0142\3\u0142\3\u0143\3\u0143\3\u0144"+
		"\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147\5\u0147\u17ec"+
		"\n\u0147\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b"+
		"\5\u014b\u17f6\n\u014b\3\u014c\3\u014c\3\u014d\3\u014d\3\u014e\3\u014e"+
		"\3\u014e\7\u014e\u17ff\n\u014e\f\u014e\16\u014e\u1802\13\u014e\3\u014f"+
		"\3\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u180c"+
		"\n\u0151\3\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0155\3\u0155"+
		"\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158\3\u0159\3\u0159\3\u015a"+
		"\3\u015a\3\u015b\3\u015b\3\u015c\3\u015c\3\u015d\3\u015d\3\u015e\3\u015e"+
		"\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\3\u0161\3\u0162\3\u0162\3\u0163"+
		"\3\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164"+
		"\u1839\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\5\u0165\u1844\n\u0165\3\u0166\3\u0166\3\u0167\3\u0167"+
		"\3\u0168\5\u0168\u184b\n\u0168\3\u0168\3\u0168\3\u0169\3\u0169\3\u016a"+
		"\3\u016a\3\u016b\3\u016b\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\5\u016c\u185b\n\u016c\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f\3\u016f"+
		"\3\u0170\3\u0170\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\5\u0172\u186e\n\u0172\3\u0173\3\u0173\5\u0173\u1872\n"+
		"\u0173\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\5\u0175\u187f\n\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\5\u0175\u1885\n\u0175\3\u0175\3\u0175\5\u0175\u1889\n\u0175\3"+
		"\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1891\n\u0176\3"+
		"\u0177\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u1899\n\u0178\3"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\5\u0179\u18af\n\u0179\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u18ba\n\u017a\3\u017b"+
		"\3\u017b\3\u017c\3\u017c\3\u017d\3\u017d\3\u017e\3\u017e\3\u017f\3\u017f"+
		"\3\u017f\3\u0cbd\2\u0180\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4"+
		"\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc"+
		"\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4"+
		"\u02f6\u02f8\u02fa\u02fc\2\61\5\2\5\5\u0118\u0118\u020e\u020e\5\2\u0141"+
		"\u0141\u016f\u016f\u017c\u017c\4\2\u00c3\u00c3\u01ec\u01ec\4\2\u016d\u016d"+
		"\u0245\u0245\4\2\u00e6\u00e6\u0194\u0194\4\2\u0235\u0235\u025a\u025a\7"+
		"\2\u00bf\u00bf\u0137\u0137\u0170\u0170\u023f\u023f\u0267\u0267\4\2\u00fe"+
		"\u00fe\u0108\u0108\3\2\u0128\u0129\n\2\u00e3\u00e3\u013b\u013b\u013d\u0140"+
		"\u0143\u0143\u0146\u0146\u01c5\u01c5\u0217\u0217\u0256\u0258\4\2\u022a"+
		"\u022a\u022c\u022c\6\2\3\3\u0116\u0116\u0151\u0151\u0174\u0174\4\2\u0117"+
		"\u0117\u0152\u0152\4\2\u00b0\u00b0\u014a\u014a\5\2\u00af\u00af\u00f9\u00f9"+
		"\u0237\u0237\4\2\u0133\u0133\u016b\u016b\4\2\u00f1\u00f1\u01c9\u01c9\4"+
		"\2\u00e2\u00e2\u01a3\u01a4\6\2\u00a9\u00a9\u015e\u015e\u016b\u016b\u0251"+
		"\u0251\4\2\u01d9\u01d9\u025b\u025b\t\2\32\32mmqq\u00f1\u00f1\u0158\u0158"+
		"\u0239\u0239\u0248\u0249\b\2mmqq\u00f1\u00f1\u0158\u0158\u0239\u0239\u0248"+
		"\u0248\4\2\32\32\u022a\u022a\4\2\3\3))\4\2\u0275\u0275\u0279\u0279\4\2"+
		"__\u01a0\u01a0\3\2\u0271\u0272\4\2\u0085\u0085\u02a4\u02a4\13\2\u00af"+
		"\u00af\u00b9\u00ba\u00c0\u00c0\u00d3\u00d3\u00f4\u00f4\u00f6\u00f6\u0131"+
		"\u0131\u0138\u0138\u01f1\u01f1\4\2\b\b((\5\2\4\4WWaa\4\29:KL\3\2\u0284"+
		"\u0285\4\2\u02c2\u02c2\u02c5\u02c5\3\2\u02c6\u02c8\4\2\u00ff\u00ff\u0109"+
		"\u0109\3\2\u02ba\u02bb\6\2\u00bf\u00bf\u0137\u0137\u0170\u0170\u023f\u023f"+
		"\4\2\u011f\u011f\u01b2\u01bd\3\2\u02b4\u02b9\5\2\u0295\u0297\u02a0\u02a2"+
		"\u02ab\u02b0\3\2\u02a3\u02aa\4\2``\u025b\u025b\4\2\60\60\u0089\u0089\n"+
		"\2\13\13$$?@RR[\\uu\u0084\u0084\u027c\u027c\3\2\u027e\u027f\3\2\u0098"+
		"\u025d\2\u1c07\2\u0304\3\2\2\2\4\u0315\3\2\2\2\6\u039e\3\2\2\2\b\u03a0"+
		"\3\2\2\2\n\u03b9\3\2\2\2\f\u03d1\3\2\2\2\16\u03e9\3\2\2\2\20\u03fe\3\2"+
		"\2\2\22\u040c\3\2\2\2\24\u0416\3\2\2\2\26\u0423\3\2\2\2\30\u042b\3\2\2"+
		"\2\32\u0431\3\2\2\2\34\u044d\3\2\2\2\36\u0466\3\2\2\2 \u0468\3\2\2\2\""+
		"\u046d\3\2\2\2$\u0476\3\2\2\2&\u047b\3\2\2\2(\u04c5\3\2\2\2*\u04c7\3\2"+
		"\2\2,\u04cc\3\2\2\2.\u04e5\3\2\2\2\60\u04f3\3\2\2\2\62\u0512\3\2\2\2\64"+
		"\u052e\3\2\2\2\66\u0533\3\2\2\28\u053f\3\2\2\2:\u05c4\3\2\2\2<\u05c6\3"+
		"\2\2\2>\u062f\3\2\2\2@\u0647\3\2\2\2B\u064a\3\2\2\2D\u064e\3\2\2\2F\u0660"+
		"\3\2\2\2H\u0662\3\2\2\2J\u066a\3\2\2\2L\u0672\3\2\2\2N\u0679\3\2\2\2P"+
		"\u0681\3\2\2\2R\u0687\3\2\2\2T\u068d\3\2\2\2V\u0693\3\2\2\2X\u0699\3\2"+
		"\2\2Z\u069f\3\2\2\2\\\u06a5\3\2\2\2^\u06ab\3\2\2\2`\u06b0\3\2\2\2b\u06b4"+
		"\3\2\2\2d\u06c4\3\2\2\2f\u06f6\3\2\2\2h\u0724\3\2\2\2j\u0742\3\2\2\2l"+
		"\u074a\3\2\2\2n\u074c\3\2\2\2p\u0768\3\2\2\2r\u07b7\3\2\2\2t\u07b9\3\2"+
		"\2\2v\u0802\3\2\2\2x\u0804\3\2\2\2z\u081b\3\2\2\2|\u082d\3\2\2\2~\u083d"+
		"\3\2\2\2\u0080\u084d\3\2\2\2\u0082\u091e\3\2\2\2\u0084\u0923\3\2\2\2\u0086"+
		"\u0946\3\2\2\2\u0088\u09f6\3\2\2\2\u008a\u09f8\3\2\2\2\u008c\u0a0e\3\2"+
		"\2\2\u008e\u0a21\3\2\2\2\u0090\u0a36\3\2\2\2\u0092\u0a4b\3\2\2\2\u0094"+
		"\u0a58\3\2\2\2\u0096\u0a60\3\2\2\2\u0098\u0a76\3\2\2\2\u009a\u0a8c\3\2"+
		"\2\2\u009c\u0a9e\3\2\2\2\u009e\u0ab1\3\2\2\2\u00a0\u0ab5\3\2\2\2\u00a2"+
		"\u0ac5\3\2\2\2\u00a4\u0ae7\3\2\2\2\u00a6\u0af5\3\2\2\2\u00a8\u0b0d\3\2"+
		"\2\2\u00aa\u0b16\3\2\2\2\u00ac\u0b1f\3\2\2\2\u00ae\u0b2a\3\2\2\2\u00b0"+
		"\u0b35\3\2\2\2\u00b2\u0b43\3\2\2\2\u00b4\u0b47\3\2\2\2\u00b6\u0b52\3\2"+
		"\2\2\u00b8\u0b5a\3\2\2\2\u00ba\u0b5e\3\2\2\2\u00bc\u0b64\3\2\2\2\u00be"+
		"\u0b8a\3\2\2\2\u00c0\u0b8c\3\2\2\2\u00c2\u0ba8\3\2\2\2\u00c4\u0bc5\3\2"+
		"\2\2\u00c6\u0bf9\3\2\2\2\u00c8\u0bfb\3\2\2\2\u00ca\u0c0a\3\2\2\2\u00cc"+
		"\u0c1c\3\2\2\2\u00ce\u0c25\3\2\2\2\u00d0\u0c29\3\2\2\2\u00d2\u0c32\3\2"+
		"\2\2\u00d4\u0c40\3\2\2\2\u00d6\u0c68\3\2\2\2\u00d8\u0c71\3\2\2\2\u00da"+
		"\u0c73\3\2\2\2\u00dc\u0c7c\3\2\2\2\u00de\u0c90\3\2\2\2\u00e0\u0c9d\3\2"+
		"\2\2\u00e2\u0ca7\3\2\2\2\u00e4\u0caa\3\2\2\2\u00e6\u0cad\3\2\2\2\u00e8"+
		"\u0cbf\3\2\2\2\u00ea\u0ce3\3\2\2\2\u00ec\u0d01\3\2\2\2\u00ee\u0d0e\3\2"+
		"\2\2\u00f0\u0d52\3\2\2\2\u00f2\u0d54\3\2\2\2\u00f4\u0d70\3\2\2\2\u00f6"+
		"\u0d74\3\2\2\2\u00f8\u0d76\3\2\2\2\u00fa\u0d9d\3\2\2\2\u00fc\u0dbb\3\2"+
		"\2\2\u00fe\u0dc5\3\2\2\2\u0100\u0dcc\3\2\2\2\u0102\u0dee\3\2\2\2\u0104"+
		"\u0df7\3\2\2\2\u0106\u0e09\3\2\2\2\u0108\u0e18\3\2\2\2\u010a\u0e1a\3\2"+
		"\2\2\u010c\u0e1f\3\2\2\2\u010e\u0e2a\3\2\2\2\u0110\u0e31\3\2\2\2\u0112"+
		"\u0e36\3\2\2\2\u0114\u0e3b\3\2\2\2\u0116\u0e3f\3\2\2\2\u0118\u0e42\3\2"+
		"\2\2\u011a\u0e4d\3\2\2\2\u011c\u0e56\3\2\2\2\u011e\u0e5f\3\2\2\2\u0120"+
		"\u0e6f\3\2\2\2\u0122\u0e77\3\2\2\2\u0124\u0e7f\3\2\2\2\u0126\u0e85\3\2"+
		"\2\2\u0128\u0e8b\3\2\2\2\u012a\u0e91\3\2\2\2\u012c\u0e9e\3\2\2\2\u012e"+
		"\u0ea7\3\2\2\2\u0130\u0eaf\3\2\2\2\u0132\u0eb7\3\2\2\2\u0134\u0ec1\3\2"+
		"\2\2\u0136\u0ec8\3\2\2\2\u0138\u0ed0\3\2\2\2\u013a\u0ee0\3\2\2\2\u013c"+
		"\u0ef0\3\2\2\2\u013e\u0ef5\3\2\2\2\u0140\u0f05\3\2\2\2\u0142\u0f0a\3\2"+
		"\2\2\u0144\u0f1a\3\2\2\2\u0146\u0f2a\3\2\2\2\u0148\u0f33\3\2\2\2\u014a"+
		"\u0f43\3\2\2\2\u014c\u0f4b\3\2\2\2\u014e\u0f54\3\2\2\2\u0150\u0f64\3\2"+
		"\2\2\u0152\u0f71\3\2\2\2\u0154\u0f75\3\2\2\2\u0156\u0f7e\3\2\2\2\u0158"+
		"\u0faa\3\2\2\2\u015a\u0fc7\3\2\2\2\u015c\u0fc9\3\2\2\2\u015e\u0fdc\3\2"+
		"\2\2\u0160\u100f\3\2\2\2\u0162\u103d\3\2\2\2\u0164\u1054\3\2\2\2\u0166"+
		"\u1079\3\2\2\2\u0168\u1097\3\2\2\2\u016a\u1099\3\2\2\2\u016c\u10a7\3\2"+
		"\2\2\u016e\u10bf\3\2\2\2\u0170\u10d9\3\2\2\2\u0172\u10f0\3\2\2\2\u0174"+
		"\u1107\3\2\2\2\u0176\u1118\3\2\2\2\u0178\u111e\3\2\2\2\u017a\u1122\3\2"+
		"\2\2\u017c\u112c\3\2\2\2\u017e\u112e\3\2\2\2\u0180\u1134\3\2\2\2\u0182"+
		"\u114e\3\2\2\2\u0184\u1150\3\2\2\2\u0186\u1191\3\2\2\2\u0188\u1193\3\2"+
		"\2\2\u018a\u1196\3\2\2\2\u018c\u11a9\3\2\2\2\u018e\u11ab\3\2\2\2\u0190"+
		"\u11c6\3\2\2\2\u0192\u11fe\3\2\2\2\u0194\u1231\3\2\2\2\u0196\u124d\3\2"+
		"\2\2\u0198\u1277\3\2\2\2\u019a\u129a\3\2\2\2\u019c\u12ad\3\2\2\2\u019e"+
		"\u12ca\3\2\2\2\u01a0\u12e9\3\2\2\2\u01a2\u1305\3\2\2\2\u01a4\u1321\3\2"+
		"\2\2\u01a6\u133d\3\2\2\2\u01a8\u1343\3\2\2\2\u01aa\u1347\3\2\2\2\u01ac"+
		"\u134e\3\2\2\2\u01ae\u1351\3\2\2\2\u01b0\u1371\3\2\2\2\u01b2\u1385\3\2"+
		"\2\2\u01b4\u1387\3\2\2\2\u01b6\u1398\3\2\2\2\u01b8\u139d\3\2\2\2\u01ba"+
		"\u13a2\3\2\2\2\u01bc\u13a7\3\2\2\2\u01be\u13c0\3\2\2\2\u01c0\u13ce\3\2"+
		"\2\2\u01c2\u13d4\3\2\2\2\u01c4\u13e5\3\2\2\2\u01c6\u13ee\3\2\2\2\u01c8"+
		"\u13f7\3\2\2\2\u01ca\u1400\3\2\2\2\u01cc\u1406\3\2\2\2\u01ce\u140e\3\2"+
		"\2\2\u01d0\u1417\3\2\2\2\u01d2\u141e\3\2\2\2\u01d4\u1423\3\2\2\2\u01d6"+
		"\u142f\3\2\2\2\u01d8\u1434\3\2\2\2\u01da\u143a\3\2\2\2\u01dc\u1441\3\2"+
		"\2\2\u01de\u1448\3\2\2\2\u01e0\u1450\3\2\2\2\u01e2\u1459\3\2\2\2\u01e4"+
		"\u145d\3\2\2\2\u01e6\u1474\3\2\2\2\u01e8\u14b4\3\2\2\2\u01ea\u14b6\3\2"+
		"\2\2\u01ec\u14b9\3\2\2\2\u01ee\u14be\3\2\2\2\u01f0\u14c7\3\2\2\2\u01f2"+
		"\u14ca\3\2\2\2\u01f4\u14cd\3\2\2\2\u01f6\u14f2\3\2\2\2\u01f8\u14f4\3\2"+
		"\2\2\u01fa\u14fc\3\2\2\2\u01fc\u150a\3\2\2\2\u01fe\u150d\3\2\2\2\u0200"+
		"\u1514\3\2\2\2\u0202\u1517\3\2\2\2\u0204\u151a\3\2\2\2\u0206\u1524\3\2"+
		"\2\2\u0208\u1562\3\2\2\2\u020a\u156c\3\2\2\2\u020c\u156f\3\2\2\2\u020e"+
		"\u1573\3\2\2\2\u0210\u1577\3\2\2\2\u0212\u157b\3\2\2\2\u0214\u158e\3\2"+
		"\2\2\u0216\u1590\3\2\2\2\u0218\u15a3\3\2\2\2\u021a\u15b4\3\2\2\2\u021c"+
		"\u15c4\3\2\2\2\u021e\u15d1\3\2\2\2\u0220\u15d3\3\2\2\2\u0222\u15d5\3\2"+
		"\2\2\u0224\u15dd\3\2\2\2\u0226\u15ea\3\2\2\2\u0228\u1607\3\2\2\2\u022a"+
		"\u1609\3\2\2\2\u022c\u161e\3\2\2\2\u022e\u1620\3\2\2\2\u0230\u1624\3\2"+
		"\2\2\u0232\u162e\3\2\2\2\u0234\u1637\3\2\2\2\u0236\u163c\3\2\2\2\u0238"+
		"\u1640\3\2\2\2\u023a\u164e\3\2\2\2\u023c\u1650\3\2\2\2\u023e\u1658\3\2"+
		"\2\2\u0240\u1661\3\2\2\2\u0242\u1677\3\2\2\2\u0244\u167b\3\2\2\2\u0246"+
		"\u1693\3\2\2\2\u0248\u1695\3\2\2\2\u024a\u16ab\3\2\2\2\u024c\u16c1\3\2"+
		"\2\2\u024e\u16c3\3\2\2\2\u0250\u16c7\3\2\2\2\u0252\u1719\3\2\2\2\u0254"+
		"\u1728\3\2\2\2\u0256\u1734\3\2\2\2\u0258\u1740\3\2\2\2\u025a\u174c\3\2"+
		"\2\2\u025c\u1758\3\2\2\2\u025e\u1764\3\2\2\2\u0260\u1775\3\2\2\2\u0262"+
		"\u1786\3\2\2\2\u0264\u178a\3\2\2\2\u0266\u1794\3\2\2\2\u0268\u17a0\3\2"+
		"\2\2\u026a\u17ac\3\2\2\2\u026c\u17b8\3\2\2\2\u026e\u17c4\3\2\2\2\u0270"+
		"\u17cb\3\2\2\2\u0272\u17cf\3\2\2\2\u0274\u17d1\3\2\2\2\u0276\u17d3\3\2"+
		"\2\2\u0278\u17d5\3\2\2\2\u027a\u17d7\3\2\2\2\u027c\u17d9\3\2\2\2\u027e"+
		"\u17db\3\2\2\2\u0280\u17dd\3\2\2\2\u0282\u17df\3\2\2\2\u0284\u17e1\3\2"+
		"\2\2\u0286\u17e3\3\2\2\2\u0288\u17e5\3\2\2\2\u028a\u17e7\3\2\2\2\u028c"+
		"\u17e9\3\2\2\2\u028e\u17ed\3\2\2\2\u0290\u17ef\3\2\2\2\u0292\u17f1\3\2"+
		"\2\2\u0294\u17f5\3\2\2\2\u0296\u17f7\3\2\2\2\u0298\u17f9\3\2\2\2\u029a"+
		"\u17fb\3\2\2\2\u029c\u1803\3\2\2\2\u029e\u1805\3\2\2\2\u02a0\u180b\3\2"+
		"\2\2\u02a2\u180d\3\2\2\2\u02a4\u180f\3\2\2\2\u02a6\u1811\3\2\2\2\u02a8"+
		"\u1813\3\2\2\2\u02aa\u1815\3\2\2\2\u02ac\u1817\3\2\2\2\u02ae\u1819\3\2"+
		"\2\2\u02b0\u181b\3\2\2\2\u02b2\u181d\3\2\2\2\u02b4\u181f\3\2\2\2\u02b6"+
		"\u1821\3\2\2\2\u02b8\u1823\3\2\2\2\u02ba\u1825\3\2\2\2\u02bc\u1827\3\2"+
		"\2\2\u02be\u1829\3\2\2\2\u02c0\u182b\3\2\2\2\u02c2\u182d\3\2\2\2\u02c4"+
		"\u182f\3\2\2\2\u02c6\u1838\3\2\2\2\u02c8\u1843\3\2\2\2\u02ca\u1845\3\2"+
		"\2\2\u02cc\u1847\3\2\2\2\u02ce\u184a\3\2\2\2\u02d0\u184e\3\2\2\2\u02d2"+
		"\u1850\3\2\2\2\u02d4\u1852\3\2\2\2\u02d6\u185a\3\2\2\2\u02d8\u185c\3\2"+
		"\2\2\u02da\u185e\3\2\2\2\u02dc\u1860\3\2\2\2\u02de\u1862\3\2\2\2\u02e0"+
		"\u1864\3\2\2\2\u02e2\u186d\3\2\2\2\u02e4\u186f\3\2\2\2\u02e6\u1873\3\2"+
		"\2\2\u02e8\u187e\3\2\2\2\u02ea\u1890\3\2\2\2\u02ec\u1892\3\2\2\2\u02ee"+
		"\u1898\3\2\2\2\u02f0\u18ae\3\2\2\2\u02f2\u18b9\3\2\2\2\u02f4\u18bb\3\2"+
		"\2\2\u02f6\u18bd\3\2\2\2\u02f8\u18bf\3\2\2\2\u02fa\u18c1\3\2\2\2\u02fc"+
		"\u18c3\3\2\2\2\u02fe\u0300\5\4\3\2\u02ff\u02fe\3\2\2\2\u02ff\u0300\3\2"+
		"\2\2\u0300\u0301\3\2\2\2\u0301\u0303\7\u029c\2\2\u0302\u02ff\3\2\2\2\u0303"+
		"\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u030b\3\2"+
		"\2\2\u0306\u0304\3\2\2\2\u0307\u0309\5\4\3\2\u0308\u030a\7\u029c\2\2\u0309"+
		"\u0308\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030c\3\2\2\2\u030b\u0307\3\2"+
		"\2\2\u030b\u030c\3\2\2\2\u030c\u030e\3\2\2\2\u030d\u030f\7\2\2\3\u030e"+
		"\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f\3\3\2\2\2\u0310\u0311\7\u0299"+
		"\2\2\u0311\u0312\5\4\3\2\u0312\u0313\7\u029a\2\2\u0313\u0316\3\2\2\2\u0314"+
		"\u0316\5\6\4\2\u0315\u0310\3\2\2\2\u0315\u0314\3\2\2\2\u0316\5\3\2\2\2"+
		"\u0317\u039f\5\b\5\2\u0318\u039f\5\n\6\2\u0319\u039f\5\f\7\2\u031a\u039f"+
		"\5\16\b\2\u031b\u039f\5\20\t\2\u031c\u039f\5\22\n\2\u031d\u039f\5\24\13"+
		"\2\u031e\u039f\5\26\f\2\u031f\u039f\5\30\r\2\u0320\u039f\5\32\16\2\u0321"+
		"\u039f\5\34\17\2\u0322\u039f\5 \21\2\u0323\u039f\5\"\22\2\u0324\u039f"+
		"\5$\23\2\u0325\u039f\5&\24\2\u0326\u039f\5*\26\2\u0327\u039f\5,\27\2\u0328"+
		"\u039f\5.\30\2\u0329\u039f\5\62\32\2\u032a\u039f\5\64\33\2\u032b\u039f"+
		"\5\66\34\2\u032c\u039f\58\35\2\u032d\u039f\5<\37\2\u032e\u039f\5@!\2\u032f"+
		"\u039f\5D#\2\u0330\u039f\5F$\2\u0331\u039f\5`\61\2\u0332\u039f\5b\62\2"+
		"\u0333\u039f\5t;\2\u0334\u039f\5v<\2\u0335\u039f\5x=\2\u0336\u039f\5z"+
		">\2\u0337\u039f\5|?\2\u0338\u039f\5~@\2\u0339\u039f\5\u0080A\2\u033a\u039f"+
		"\5\u0082B\2\u033b\u039f\5\u0084C\2\u033c\u039f\5\u0086D\2\u033d\u039f"+
		"\5\u0088E\2\u033e\u039f\5\u009cO\2\u033f\u039f\5\u00a0Q\2\u0340\u039f"+
		"\5\u00a2R\2\u0341\u039f\5\u00a4S\2\u0342\u039f\5\u00a6T\2\u0343\u039f"+
		"\5\u00a8U\2\u0344\u039f\5\u00aaV\2\u0345\u039f\5\u00acW\2\u0346\u039f"+
		"\5\u00aeX\2\u0347\u039f\5\u00b4[\2\u0348\u039f\5\u00bc_\2\u0349\u039f"+
		"\5\u00be`\2\u034a\u039f\5\u00c4c\2\u034b\u039f\5\u00ccg\2\u034c\u039f"+
		"\5\u00ceh\2\u034d\u039f\5\u00d0i\2\u034e\u039f\5\u00d2j\2\u034f\u039f"+
		"\5\u00d4k\2\u0350\u039f\5\u00d6l\2\u0351\u039f\5\u00d8m\2\u0352\u039f"+
		"\5\u00f6|\2\u0353\u039f\5\u0100\u0081\2\u0354\u039f\5\u0102\u0082\2\u0355"+
		"\u039f\5\u0104\u0083\2\u0356\u039f\5\u0106\u0084\2\u0357\u039f\5\u0108"+
		"\u0085\2\u0358\u039f\5\u0116\u008c\2\u0359\u039f\5\u0118\u008d\2\u035a"+
		"\u039f\5\u011a\u008e\2\u035b\u039f\5\u011c\u008f\2\u035c\u039f\5\u011e"+
		"\u0090\2\u035d\u039f\5\u0120\u0091\2\u035e\u039f\5\u0122\u0092\2\u035f"+
		"\u039f\5\u0124\u0093\2\u0360\u039f\5\u0126\u0094\2\u0361\u039f\5\u0128"+
		"\u0095\2\u0362\u039f\5\u012a\u0096\2\u0363\u039f\5\u012c\u0097\2\u0364"+
		"\u039f\5\u012e\u0098\2\u0365\u039f\5\u0130\u0099\2\u0366\u039f\5\u0132"+
		"\u009a\2\u0367\u039f\5\u0134\u009b\2\u0368\u039f\5\u0136\u009c\2\u0369"+
		"\u039f\5\u0138\u009d\2\u036a\u039f\5\u013a\u009e\2\u036b\u039f\5\u013c"+
		"\u009f\2\u036c\u039f\5\u013e\u00a0\2\u036d\u039f\5\u0140\u00a1\2\u036e"+
		"\u039f\5\u0142\u00a2\2\u036f\u039f\5\u0144\u00a3\2\u0370\u039f\5\u0146"+
		"\u00a4\2\u0371\u039f\5\u0148\u00a5\2\u0372\u039f\5\u014a\u00a6\2\u0373"+
		"\u039f\5\u014c\u00a7\2\u0374\u039f\5\u014e\u00a8\2\u0375\u039f\5\u0150"+
		"\u00a9\2\u0376\u039f\5\u0152\u00aa\2\u0377\u039f\5\u0154\u00ab\2\u0378"+
		"\u039f\5\u0156\u00ac\2\u0379\u039f\5\u0158\u00ad\2\u037a\u039f\5\u015a"+
		"\u00ae\2\u037b\u039f\5\u0180\u00c1\2\u037c\u039f\5\u0184\u00c3\2\u037d"+
		"\u039f\5\u0188\u00c5\2\u037e\u039f\5\u018a\u00c6\2\u037f\u039f\5\u018c"+
		"\u00c7\2\u0380\u039f\5\u01a8\u00d5\2\u0381\u039f\5\u01aa\u00d6\2\u0382"+
		"\u039f\5\u01ac\u00d7\2\u0383\u039f\5\u01ae\u00d8\2\u0384\u039f\5\u01b2"+
		"\u00da\2\u0385\u039f\5\u01b4\u00db\2\u0386\u039f\5\u01b6\u00dc\2\u0387"+
		"\u039f\5\u01b8\u00dd\2\u0388\u039f\5\u01ba\u00de\2\u0389\u039f\5\u01bc"+
		"\u00df\2\u038a\u039f\5\u01be\u00e0\2\u038b\u039f\5\u01c0\u00e1\2\u038c"+
		"\u039f\5\u01c2\u00e2\2\u038d\u039f\5\u01c4\u00e3\2\u038e\u039f\5\u01c6"+
		"\u00e4\2\u038f\u039f\5\u01c8\u00e5\2\u0390\u039f\5\u01ca\u00e6\2\u0391"+
		"\u039f\5\u01cc\u00e7\2\u0392\u039f\5\u01ce\u00e8\2\u0393\u039f\5\u01d0"+
		"\u00e9\2\u0394\u039f\5\u01d2\u00ea\2\u0395\u039f\5\u01d4\u00eb\2\u0396"+
		"\u039f\5\u01d6\u00ec\2\u0397\u039f\5\u01d8\u00ed\2\u0398\u039f\5\u01da"+
		"\u00ee\2\u0399\u039f\5\u01dc\u00ef\2\u039a\u039f\5\u01de\u00f0\2\u039b"+
		"\u039f\5\u01e0\u00f1\2\u039c\u039f\5\u01e2\u00f2\2\u039d\u039f\5\u01e4"+
		"\u00f3\2\u039e\u0317\3\2\2\2\u039e\u0318\3\2\2\2\u039e\u0319\3\2\2\2\u039e"+
		"\u031a\3\2\2\2\u039e\u031b\3\2\2\2\u039e\u031c\3\2\2\2\u039e\u031d\3\2"+
		"\2\2\u039e\u031e\3\2\2\2\u039e\u031f\3\2\2\2\u039e\u0320\3\2\2\2\u039e"+
		"\u0321\3\2\2\2\u039e\u0322\3\2\2\2\u039e\u0323\3\2\2\2\u039e\u0324\3\2"+
		"\2\2\u039e\u0325\3\2\2\2\u039e\u0326\3\2\2\2\u039e\u0327\3\2\2\2\u039e"+
		"\u0328\3\2\2\2\u039e\u0329\3\2\2\2\u039e\u032a\3\2\2\2\u039e\u032b\3\2"+
		"\2\2\u039e\u032c\3\2\2\2\u039e\u032d\3\2\2\2\u039e\u032e\3\2\2\2\u039e"+
		"\u032f\3\2\2\2\u039e\u0330\3\2\2\2\u039e\u0331\3\2\2\2\u039e\u0332\3\2"+
		"\2\2\u039e\u0333\3\2\2\2\u039e\u0334\3\2\2\2\u039e\u0335\3\2\2\2\u039e"+
		"\u0336\3\2\2\2\u039e\u0337\3\2\2\2\u039e\u0338\3\2\2\2\u039e\u0339\3\2"+
		"\2\2\u039e\u033a\3\2\2\2\u039e\u033b\3\2\2\2\u039e\u033c\3\2\2\2\u039e"+
		"\u033d\3\2\2\2\u039e\u033e\3\2\2\2\u039e\u033f\3\2\2\2\u039e\u0340\3\2"+
		"\2\2\u039e\u0341\3\2\2\2\u039e\u0342\3\2\2\2\u039e\u0343\3\2\2\2\u039e"+
		"\u0344\3\2\2\2\u039e\u0345\3\2\2\2\u039e\u0346\3\2\2\2\u039e\u0347\3\2"+
		"\2\2\u039e\u0348\3\2\2\2\u039e\u0349\3\2\2\2\u039e\u034a\3\2\2\2\u039e"+
		"\u034b\3\2\2\2\u039e\u034c\3\2\2\2\u039e\u034d\3\2\2\2\u039e\u034e\3\2"+
		"\2\2\u039e\u034f\3\2\2\2\u039e\u0350\3\2\2\2\u039e\u0351\3\2\2\2\u039e"+
		"\u0352\3\2\2\2\u039e\u0353\3\2\2\2\u039e\u0354\3\2\2\2\u039e\u0355\3\2"+
		"\2\2\u039e\u0356\3\2\2\2\u039e\u0357\3\2\2\2\u039e\u0358\3\2\2\2\u039e"+
		"\u0359\3\2\2\2\u039e\u035a\3\2\2\2\u039e\u035b\3\2\2\2\u039e\u035c\3\2"+
		"\2\2\u039e\u035d\3\2\2\2\u039e\u035e\3\2\2\2\u039e\u035f\3\2\2\2\u039e"+
		"\u0360\3\2\2\2\u039e\u0361\3\2\2\2\u039e\u0362\3\2\2\2\u039e\u0363\3\2"+
		"\2\2\u039e\u0364\3\2\2\2\u039e\u0365\3\2\2\2\u039e\u0366\3\2\2\2\u039e"+
		"\u0367\3\2\2\2\u039e\u0368\3\2\2\2\u039e\u0369\3\2\2\2\u039e\u036a\3\2"+
		"\2\2\u039e\u036b\3\2\2\2\u039e\u036c\3\2\2\2\u039e\u036d\3\2\2\2\u039e"+
		"\u036e\3\2\2\2\u039e\u036f\3\2\2\2\u039e\u0370\3\2\2\2\u039e\u0371\3\2"+
		"\2\2\u039e\u0372\3\2\2\2\u039e\u0373\3\2\2\2\u039e\u0374\3\2\2\2\u039e"+
		"\u0375\3\2\2\2\u039e\u0376\3\2\2\2\u039e\u0377\3\2\2\2\u039e\u0378\3\2"+
		"\2\2\u039e\u0379\3\2\2\2\u039e\u037a\3\2\2\2\u039e\u037b\3\2\2\2\u039e"+
		"\u037c\3\2\2\2\u039e\u037d\3\2\2\2\u039e\u037e\3\2\2\2\u039e\u037f\3\2"+
		"\2\2\u039e\u0380\3\2\2\2\u039e\u0381\3\2\2\2\u039e\u0382\3\2\2\2\u039e"+
		"\u0383\3\2\2\2\u039e\u0384\3\2\2\2\u039e\u0385\3\2\2\2\u039e\u0386\3\2"+
		"\2\2\u039e\u0387\3\2\2\2\u039e\u0388\3\2\2\2\u039e\u0389\3\2\2\2\u039e"+
		"\u038a\3\2\2\2\u039e\u038b\3\2\2\2\u039e\u038c\3\2\2\2\u039e\u038d\3\2"+
		"\2\2\u039e\u038e\3\2\2\2\u039e\u038f\3\2\2\2\u039e\u0390\3\2\2\2\u039e"+
		"\u0391\3\2\2\2\u039e\u0392\3\2\2\2\u039e\u0393\3\2\2\2\u039e\u0394\3\2"+
		"\2\2\u039e\u0395\3\2\2\2\u039e\u0396\3\2\2\2\u039e\u0397\3\2\2\2\u039e"+
		"\u0398\3\2\2\2\u039e\u0399\3\2\2\2\u039e\u039a\3\2\2\2\u039e\u039b\3\2"+
		"\2\2\u039e\u039c\3\2\2\2\u039e\u039d\3\2\2\2\u039f\7\3\2\2\2\u03a0\u03a1"+
		"\7\u00a5\2\2\u03a1\u03a2\7\u009a\2\2\u03a2\u03a3\7\u01c3\2\2\u03a3\u03a4"+
		"\7_\2\2\u03a4\u03b0\5\u0256\u012c\2\u03a5\u03a6\7\62\2\2\u03a6\u03a7\7"+
		"\27\2\2\u03a7\u03a9\5\u0254\u012b\2\u03a8\u03aa\5\u0214\u010b\2\u03a9"+
		"\u03a8\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03b1\3\2\2\2\u03ab\u03ac\7\62"+
		"\2\2\u03ac\u03ae\7\u01f6\2\2\u03ad\u03af\5\u0202\u0102\2\u03ae\u03ad\3"+
		"\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03b1\3\2\2\2\u03b0\u03a5\3\2\2\2\u03b0"+
		"\u03ab\3\2\2\2\u03b1\u03b7\3\2\2\2\u03b2\u03b8\5\u02ca\u0166\2\u03b3\u03b4"+
		"\7\u00d9\2\2\u03b4\u03b5\7\u0085\2\2\u03b5\u03b6\7y\2\2\u03b6\u03b8\5"+
		"\u0256\u012c\2\u03b7\u03b2\3\2\2\2\u03b7\u03b3\3\2\2\2\u03b7\u03b8\3\2"+
		"\2\2\u03b8\t\3\2\2\2\u03b9\u03ba\7\u00a5\2\2\u03ba\u03bb\7\u00ae\2\2\u03bb"+
		"\u03cf\5\u02be\u0160\2\u03bc\u03d0\5\u02ca\u0166\2\u03bd\u03c7\7\u016b"+
		"\2\2\u03be\u03c3\7\u0145\2\2\u03bf\u03c1\7\u0191\2\2\u03c0\u03bf\3\2\2"+
		"\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\7\u0231\2\2\u03c3"+
		"\u03c0\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7\5\u02d0"+
		"\u0169\2\u03c6\u03bd\3\2\2\2\u03c6\u03be\3\2\2\2\u03c7\u03d0\3\2\2\2\u03c8"+
		"\u03d0\5\u020e\u0108\2\u03c9\u03ca\7\u0181\2\2\u03ca\u03d0\5\u02ba\u015e"+
		"\2\u03cb\u03cc\7\u020a\2\2\u03cc\u03d0\5\u024a\u0126\2\u03cd\u03ce\7\u01cc"+
		"\2\2\u03ce\u03d0\5\u02b0\u0159\2\u03cf\u03bc\3\2\2\2\u03cf\u03c6\3\2\2"+
		"\2\u03cf\u03c8\3\2\2\2\u03cf\u03c9\3\2\2\2\u03cf\u03cb\3\2\2\2\u03cf\u03cd"+
		"\3\2\2\2\u03d0\13\3\2\2\2\u03d1\u03d2\7\u00a5\2\2\u03d2\u03d3\7\u00e6"+
		"\2\2\u03d3\u03e7\5\u0272\u013a\2\u03d4\u03d5\7\u0105\2\2\u03d5\u03d6\7"+
		"\3\2\2\u03d6\u03d7\7\u0120\2\2\u03d7\u03e8\7\67\2\2\u03d8\u03d9\7\u011d"+
		"\2\2\u03d9\u03da\7_\2\2\u03da\u03e8\5\u02b4\u015b\2\u03db\u03dc\7\u01e9"+
		"\2\2\u03dc\u03e8\7\u0219\2\2\u03dd\u03df\7\u020a\2\2\u03de\u03e0\7\u01aa"+
		"\2\2\u03df\u03de\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1"+
		"\u03e8\5\u024a\u0126\2\u03e2\u03e4\7\u00cb\2\2\u03e3\u03e5\7\u01aa\2\2"+
		"\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8"+
		"\5\u029a\u014e\2\u03e7\u03d4\3\2\2\2\u03e7\u03d8\3\2\2\2\u03e7\u03db\3"+
		"\2\2\2\u03e7\u03dd\3\2\2\2\u03e7\u03e2\3\2\2\2\u03e8\r\3\2\2\2\u03e9\u03ea"+
		"\7\u00a5\2\2\u03ea\u03eb\7\u0120\2\2\u03eb\u03ec\7\67\2\2\u03ec\u03fc"+
		"\5\u02bc\u015f\2\u03ed\u03ee\7\u00a0\2\2\u03ee\u03ef\7\u0194\2\2\u03ef"+
		"\u03fd\5\u02a4\u0153\2\u03f0\u03f1\7\u0105\2\2\u03f1\u03f2\7\u0194\2\2"+
		"\u03f2\u03fd\5\u02a4\u0153\2\u03f3\u03f4\7\u00a0\2\2\u03f4\u03f5\7\u0120"+
		"\2\2\u03f5\u03f6\7\67\2\2\u03f6\u03fd\5\u02c8\u0165\2\u03f7\u03f8\7\u0105"+
		"\2\2\u03f8\u03f9\7\u0120\2\2\u03f9\u03fa\7\67\2\2\u03fa\u03fd\5\u02c8"+
		"\u0165\2\u03fb\u03fd\5\u020e\u0108\2\u03fc\u03ed\3\2\2\2\u03fc\u03f0\3"+
		"\2\2\2\u03fc\u03f3\3\2\2\2\u03fc\u03f7\3\2\2\2\u03fc\u03fb\3\2\2\2\u03fd"+
		"\17\3\2\2\2\u03fe\u03ff\7\u00a5\2\2\u03ff\u0400\7\u012f\2\2\u0400\u0402"+
		"\5\u0266\u0134\2\u0401\u0403\5\u00b0Y\2\u0402\u0401\3\2\2\2\u0402\u0403"+
		"\3\2\2\2\u0403\u040a\3\2\2\2\u0404\u040b\5\u020c\u0107\2\u0405\u040b\5"+
		"\u020e\u0108\2\u0406\u040b\5\u0210\u0109\2\u0407\u0408\7\u020a\2\2\u0408"+
		"\u0409\7\u0121\2\2\u0409\u040b\5\u02e6\u0174\2\u040a\u0404\3\2\2\2\u040a"+
		"\u0405\3\2\2\2\u040a\u0406\3\2\2\2\u040a\u0407\3\2\2\2\u040b\21\3\2\2"+
		"\2\u040c\u040d\7\u00a5\2\2\u040d\u040e\7\u013a\2\2\u040e\u040f\7p\2\2"+
		"\u040f\u0410\5\u0294\u014b\2\u0410\u0412\7\u020a\2\2\u0411\u0413\5\u009e"+
		"P\2\u0412\u0411\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0412\3\2\2\2\u0414"+
		"\u0415\3\2\2\2\u0415\23\3\2\2\2\u0416\u0417\7\u00a5\2\2\u0417\u0418\7"+
		"\u0168\2\2\u0418\u041f\5\u0268\u0135\2\u0419\u041a\7\u00f7\2\2\u041a\u041d"+
		"\5\u02c8\u0165\2\u041b\u041c\7\u0162\2\2\u041c\u041e\5\u0290\u0149\2\u041d"+
		"\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0420\3\2\2\2\u041f\u0419\3\2"+
		"\2\2\u041f\u0420\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\5\u0242\u0122"+
		"\2\u0422\25\3\2\2\2\u0423\u0424\7\u00a5\2\2\u0424\u0425\7\u0188\2\2\u0425"+
		"\u0429\5\u026c\u0137\2\u0426\u042a\5\u020c\u0107\2\u0427\u042a\5\u020e"+
		"\u0108\2\u0428\u042a\5\u0210\u0109\2\u0429\u0426\3\2\2\2\u0429\u0427\3"+
		"\2\2\2\u0429\u0428\3\2\2\2\u042a\27\3\2\2\2\u042b\u042c\7\u00a5\2\2\u042c"+
		"\u042d\7\u018f\2\2\u042d\u042e\7\u015a\2\2\u042e\u042f\5\u02c2\u0162\2"+
		"\u042f\u0430\5\u020e\u0108\2\u0430\31\3\2\2\2\u0431\u0432\7\u00a5\2\2"+
		"\u0432\u0433\7\u0194\2\2\u0433\u044b\5\u02a4\u0153\2\u0434\u0435\7\u011d"+
		"\2\2\u0435\u0436\7_\2\2\u0436\u044c\5\u02a4\u0153\2\u0437\u0439\7E\2\2"+
		"\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u044c"+
		"\5\u02c8\u0165\2\u043b\u043e\7\u01e8\2\2\u043c\u043d\7\u0096\2\2\u043d"+
		"\u043f\5\u02c8\u0165\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u044c"+
		"\3\2\2\2\u0440\u044c\7\u01e9\2\2\u0441\u0443\7\u020a\2\2\u0442\u0444\7"+
		"\u01aa\2\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3\2\2\2"+
		"\u0445\u044c\5\u024a\u0126\2\u0446\u0448\7\u00cb\2\2\u0447\u0449\7\u01aa"+
		"\2\2\u0448\u0447\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044a\3\2\2\2\u044a"+
		"\u044c\5\u029a\u014e\2\u044b\u0434\3\2\2\2\u044b\u0438\3\2\2\2\u044b\u043b"+
		"\3\2\2\2\u044b\u0440\3\2\2\2\u044b\u0441\3\2\2\2\u044b\u0446\3\2\2\2\u044c"+
		"\33\3\2\2\2\u044d\u044e\7\u00a5\2\2\u044e\u044f\7\u0197\2\2\u044f\u0453"+
		"\5\u027c\u013f\2\u0450\u0452\5\36\20\2\u0451\u0450\3\2\2\2\u0452\u0455"+
		"\3\2\2\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\35\3\2\2\2\u0455"+
		"\u0453\3\2\2\2\u0456\u0458\7\u0191\2\2\u0457\u0456\3\2\2\2\u0457\u0458"+
		"\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\7\25\2\2\u045a\u0467\7\u00d2"+
		"\2\2\u045b\u045c\5\u02ca\u0166\2\u045c\u045d\7\u0149\2\2\u045d\u045e\7"+
		"\u00bc\2\2\u045e\u045f\5\u02c8\u0165\2\u045f\u0467\3\2\2\2\u0460\u0461"+
		"\7\u0178\2\2\u0461\u0467\5\u02c8\u0165\2\u0462\u0463\7\u0179\2\2\u0463"+
		"\u0467\5\u02c8\u0165\2\u0464\u0465\7\u01ab\2\2\u0465\u0467\5\u02c8\u0165"+
		"\2\u0466\u0457\3\2\2\2\u0466\u045b\3\2\2\2\u0466\u0460\3\2\2\2\u0466\u0462"+
		"\3\2\2\2\u0466\u0464\3\2\2\2\u0467\37\3\2\2\2\u0468\u0469\7\u00a5\2\2"+
		"\u0469\u046a\7\u01d1\2\2\u046a\u046b\5\u0260\u0131\2\u046b\u046c\5\u020e"+
		"\u0108\2\u046c!\3\2\2\2\u046d\u046e\7\u00a5\2\2\u046e\u046f\7\u01d0\2"+
		"\2\u046f\u0470\5\u02c4\u0163\2\u0470\u0472\7M\2\2\u0471\u0473\5\u02d4"+
		"\u016b\2\u0472\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0472\3\2\2\2\u0474"+
		"\u0475\3\2\2\2\u0475#\3\2\2\2\u0476\u0477\7\u00a5\2\2\u0477\u0478\7\u01d0"+
		"\2\2\u0478\u0479\5\u02c4\u0163\2\u0479\u047a\5\u020e\u0108\2\u047a%\3"+
		"\2\2\2\u047b\u047c\7\u00a5\2\2\u047c\u047d\7\u01ea\2\2\u047d\u047e\7\u01c4"+
		"\2\2\u047e\u0480\5\u0292\u014a\2\u047f\u0481\5(\25\2\u0480\u047f\3\2\2"+
		"\2\u0481\u0482\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2\u0483\'"+
		"\3\2\2\2\u0484\u0485\7\u00c3\2\2\u0485\u0486\7\u0085\2\2\u0486\u04c6\5"+
		"\u02c8\u0165\2\u0487\u0488\7\u00da\2\2\u0488\u04c6\t\2\2\2\u0489\u0494"+
		"\7\u00db\2\2\u048a\u0495\7V\2\2\u048b\u048c\5\u02c8\u0165\2\u048c\u048d"+
		"\7\u0294\2\2\u048d\u048e\5\u02c8\u0165\2\u048e\u0495\3\2\2\2\u048f\u0490"+
		"\5\u02c8\u0165\2\u0490\u0491\7\u0295\2\2\u0491\u0492\5\u02c8\u0165\2\u0492"+
		"\u0495\3\2\2\2\u0493\u0495\5\u02ae\u0158\2\u0494\u048a\3\2\2\2\u0494\u048b"+
		"\3\2\2\2\u0494\u048f\3\2\2\2\u0494\u0493\3\2\2\2\u0495\u04c6\3\2\2\2\u0496"+
		"\u0499\7\u011a\2\2\u0497\u049a\5\u02ae\u0158\2\u0498\u049a\7\u00af\2\2"+
		"\u0499\u0497\3\2\2\2\u0499\u0498\3\2\2\2\u049a\u04c6\3\2\2\2\u049b\u049e"+
		"\7\u0175\2\2\u049c\u049f\5\u02ae\u0158\2\u049d\u049f\7V\2\2\u049e\u049c"+
		"\3\2\2\2\u049e\u049d\3\2\2\2\u049f\u04c6\3\2\2\2\u04a0\u04a3\7\u0178\2"+
		"\2\u04a1\u04a4\5\u02ae\u0158\2\u04a2\u04a4\7V\2\2\u04a3\u04a1\3\2\2\2"+
		"\u04a3\u04a2\3\2\2\2\u04a4\u04c6\3\2\2\2\u04a5\u04a8\7\u017a\2\2\u04a6"+
		"\u04a9\5\u02ae\u0158\2\u04a7\u04a9\7V\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a7"+
		"\3\2\2\2\u04a9\u04c6\3\2\2\2\u04aa\u04ab\7\u017e\2\2\u04ab\u04c6\5\u02ae"+
		"\u0158\2\u04ac\u04af\7\u01c2\2\2\u04ad\u04b0\5\u02ae\u0158\2\u04ae\u04b0"+
		"\7\u00af\2\2\u04af\u04ad\3\2\2\2\u04af\u04ae\3\2\2\2\u04b0\u04c6\3\2\2"+
		"\2\u04b1\u04b4\7\u01cc\2\2\u04b2\u04b5\5\u02b0\u0159\2\u04b3\u04b5\7\u0144"+
		"\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b3\3\2\2\2\u04b5\u04c6\3\2\2\2\u04b6"+
		"\u04b9\7\u01d5\2\2\u04b7\u04ba\5\u02ae\u0158\2\u04b8\u04ba\7V\2\2\u04b9"+
		"\u04b7\3\2\2\2\u04b9\u04b8\3\2\2\2\u04ba\u04c6\3\2\2\2\u04bb\u04be\7\u01f8"+
		"\2\2\u04bc\u04bf\5\u02c8\u0165\2\u04bd\u04bf\7V\2\2\u04be\u04bc\3\2\2"+
		"\2\u04be\u04bd\3\2\2\2\u04bf\u04c6\3\2\2\2\u04c0\u04c1\7\u01f9\2\2\u04c1"+
		"\u04c6\t\3\2\2\u04c2\u04c3\7\u01fa\2\2\u04c3\u04c6\5\u02ae\u0158\2\u04c4"+
		"\u04c6\7\u0211\2\2\u04c5\u0484\3\2\2\2\u04c5\u0487\3\2\2\2\u04c5\u0489"+
		"\3\2\2\2\u04c5\u0496\3\2\2\2\u04c5\u049b\3\2\2\2\u04c5\u04a0\3\2\2\2\u04c5"+
		"\u04a5\3\2\2\2\u04c5\u04aa\3\2\2\2\u04c5\u04ac\3\2\2\2\u04c5\u04b1\3\2"+
		"\2\2\u04c5\u04b6\3\2\2\2\u04c5\u04bb\3\2\2\2\u04c5\u04c0\3\2\2\2\u04c5"+
		"\u04c2\3\2\2\2\u04c5\u04c4\3\2\2\2\u04c6)\3\2\2\2\u04c7\u04c8\7\u00a5"+
		"\2\2\u04c8\u04c9\7\u01f2\2\2\u04c9\u04ca\5\u028e\u0148\2\u04ca\u04cb\5"+
		"\u020e\u0108\2\u04cb+\3\2\2\2\u04cc\u04cd\7\u00a5\2\2\u04cd\u04e3\7p\2"+
		"\2\u04ce\u04d7\5\u0270\u0139\2\u04cf\u04d0\7&\2\2\u04d0\u04d8\5\u00da"+
		"n\2\u04d1\u04d2\7\u01a9\2\2\u04d2\u04d3\7\u0085\2\2\u04d3\u04d5\5\u02b8"+
		"\u015d\2\u04d4\u04d6\7\u00c3\2\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2"+
		"\2\u04d6\u04d8\3\2\2\2\u04d7\u04cf\3\2\2\2\u04d7\u04d1\3\2\2\2\u04d8\u04e4"+
		"\3\2\2\2\u04d9\u04de\5\u0270\u0139\2\u04da\u04db\7\u0294\2\2\u04db\u04dd"+
		"\5\u0270\u0139\2\u04dc\u04da\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de\u04dc\3"+
		"\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e1\3\2\2\2\u04e0\u04de\3\2\2\2\u04e1"+
		"\u04e2\5\u020e\u0108\2\u04e2\u04e4\3\2\2\2\u04e3\u04ce\3\2\2\2\u04e3\u04d9"+
		"\3\2\2\2\u04e4-\3\2\2\2\u04e5\u04e6\7\u00a5\2\2\u04e6\u04e7\7\u0206\2"+
		"\2\u04e7\u04ee\5\u026a\u0136\2\u04e8\u04ef\5\60\31\2\u04e9\u04ed\5\u020e"+
		"\u0108\2\u04ea\u04ed\5\u0210\u0109\2\u04eb\u04ed\5\u020c\u0107\2\u04ec"+
		"\u04e9\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04eb\3\2\2\2\u04ed\u04ef\3\2"+
		"\2\2\u04ee\u04e8\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ef/\3\2\2\2\u04f0\u04f1"+
		"\7\u0153\2\2\u04f1\u04f2\7\u00bc\2\2\u04f2\u04f4\7\u02c8\2\2\u04f3\u04f0"+
		"\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f9\3\2\2\2\u04f5\u04f6\7\u0186\2"+
		"\2\u04f6\u04fa\7\u02c8\2\2\u04f7\u04f8\7\u0191\2\2\u04f8\u04fa\7\u0186"+
		"\2\2\u04f9\u04f5\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa"+
		"\u04ff\3\2\2\2\u04fb\u04fc\7\u017b\2\2\u04fc\u0500\7\u02c8\2\2\u04fd\u04fe"+
		"\7\u0191\2\2\u04fe\u0500\7\u017b\2\2\u04ff\u04fb\3\2\2\2\u04ff\u04fd\3"+
		"\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0504\3\2\2\2\u0501\u0502\7\u01eb\2\2"+
		"\u0502\u0503\7\u0096\2\2\u0503\u0505\7\u02c8\2\2\u0504\u0501\3\2\2\2\u0504"+
		"\u0505\3\2\2\2\u0505\u0510\3\2\2\2\u0506\u0507\7\u00c1\2\2\u0507\u0511"+
		"\7\u02c8\2\2\u0508\u0509\7\u0191\2\2\u0509\u050a\7\u00c1\2\2\u050a\u050e"+
		"\3\2\2\2\u050b\u050f\7\u00e4\2\2\u050c\u050d\7\u0191\2\2\u050d\u050f\7"+
		"\u00e4\2\2\u050e\u050b\3\2\2\2\u050e\u050c\3\2\2\2\u050f\u0511\3\2\2\2"+
		"\u0510\u0506\3\2\2\2\u0510\u0508\3\2\2\2\u0510\u0511\3\2\2\2\u0511\61"+
		"\3\2\2\2\u0512\u0513\7\u00a5\2\2\u0513\u052c\7\u0209\2\2\u0514\u0516\7"+
		"\u020a\2\2\u0515\u0517\7\u01aa\2\2\u0516\u0515\3\2\2\2\u0516\u0517\3\2"+
		"\2\2\u0517\u0518\3\2\2\2\u0518\u052d\5\u024a\u0126\2\u0519\u051b\7\u00cb"+
		"\2\2\u051a\u051c\7\u01aa\2\2\u051b\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c"+
		"\u051d\3\2\2\2\u051d\u052d\5\u029a\u014e\2\u051e\u051f\7\u020a\2\2\u051f"+
		"\u0522\7\u023d\2\2\u0520\u0521\7\62\2\2\u0521\u0523\5\u029e\u0150\2\u0522"+
		"\u0520\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u052d\5\u024a"+
		"\u0126\2\u0525\u0526\7\u00cb\2\2\u0526\u0529\7\u023d\2\2\u0527\u0528\7"+
		"\62\2\2\u0528\u052a\5\u029e\u0150\2\u0529\u0527\3\2\2\2\u0529\u052a\3"+
		"\2\2\2\u052a\u052b\3\2\2\2\u052b\u052d\5\u029a\u014e\2\u052c\u0514\3\2"+
		"\2\2\u052c\u0519\3\2\2\2\u052c\u051e\3\2\2\2\u052c\u0525\3\2\2\2\u052d"+
		"\63\3\2\2\2\u052e\u052f\7\u00a5\2\2\u052f\u0530\7\u0224\2\2\u0530\u0531"+
		"\5\u02b4\u015b\2\u0531\u0532\5\u020e\u0108\2\u0532\65\3\2\2\2\u0533\u0534"+
		"\7\u00a5\2\2\u0534\u0535\7y\2\2\u0535\u053a\5\u0256\u012c\2\u0536\u0537"+
		"\7\u0294\2\2\u0537\u0539\5\u0256\u012c\2\u0538\u0536\3\2\2\2\u0539\u053c"+
		"\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2\u053c"+
		"\u053a\3\2\2\2\u053d\u053e\5\u020e\u0108\2\u053e\67\3\2\2\2\u053f\u0540"+
		"\7\u00a5\2\2\u0540\u0541\7y\2\2\u0541\u0542\5\u0256\u012c\2\u0542\u0546"+
		"\5:\36\2\u0543\u0545\5:\36\2\u0544\u0543\3\2\2\2\u0545\u0548\3\2\2\2\u0546"+
		"\u0544\3\2\2\2\u0546\u0547\3\2\2\2\u05479\3\2\2\2\u0548\u0546\3\2\2\2"+
		"\u0549\u054a\7\u00a0\2\2\u054a\u054c\7\27\2\2\u054b\u054d\5\u00ba^\2\u054c"+
		"\u054b\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u054f\5\u0254"+
		"\u012b\2\u054f\u0554\5\u02e8\u0175\2\u0550\u0552\7\30\2\2\u0551\u0553"+
		"\5\u02c6\u0164\2\u0552\u0551\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0555\3"+
		"\2\2\2\u0554\u0550\3\2\2\2\u0554\u0555\3\2\2\2\u0555\u0557\3\2\2\2\u0556"+
		"\u0558\5\u02ce\u0168\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055b"+
		"\3\2\2\2\u0559\u055a\7&\2\2\u055a\u055c\5\u0228\u0115\2\u055b\u0559\3"+
		"\2\2\2\u055b\u055c\3\2\2\2\u055c\u055e\3\2\2\2\u055d\u055f\5\u020a\u0106"+
		"\2\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u056c\3\2\2\2\u0560\u0561"+
		"\7\u01d2\2\2\u0561\u0562\7\u0299\2\2\u0562\u0567\5\u0260\u0131\2\u0563"+
		"\u0564\7\u0294\2\2\u0564\u0566\5\u0260\u0131\2\u0565\u0563\3\2\2\2\u0566"+
		"\u0569\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u0567\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056a\3\2\2\2\u0569\u0567"+
		"\3\2\2\2\u056a\u056b\7\u029a\2\2\u056b\u056d\3\2\2\2\u056c\u0560\3\2\2"+
		"\2\u056c\u056d\3\2\2\2\u056d\u05c5\3\2\2\2\u056e\u056f\7\u00a0\2\2\u056f"+
		"\u05c5\5\u00eav\2\u0570\u0571\7\u00a5\2\2\u0571\u0572\7\27\2\2\u0572\u058c"+
		"\5\u0254\u012b\2\u0573\u0574\7\u020a\2\2\u0574\u0575\7&\2\2\u0575\u058d"+
		"\5\u0228\u0115\2\u0576\u0577\7\u0105\2\2\u0577\u058d\7&\2\2\u0578\u0579"+
		"\7\u020a\2\2\u0579\u057a\7\u008e\2\2\u057a\u058d\5\u0228\u0115\2\u057b"+
		"\u057c\7\u0105\2\2\u057c\u057d\7\u020a\2\2\u057d\u058d\7\u008e\2\2\u057e"+
		"\u057f\7\u020a\2\2\u057f\u0580\7&\2\2\u0580\u0581\7\u008e\2\2\u0581\u058d"+
		"\5\u0228\u0115\2\u0582\u0583\7\u0105\2\2\u0583\u0584\7&\2\2\u0584\u0585"+
		"\7\u008e\2\2\u0585\u058d\5\u0228\u0115\2\u0586\u0587\7\u020a\2\2\u0587"+
		"\u058d\5\u02ce\u0168\2\u0588\u0589\7\u020a\2\2\u0589\u058a\7\u00e5\2\2"+
		"\u058a\u058b\7\u023c\2\2\u058b\u058d\5\u02e8\u0175\2\u058c\u0573\3\2\2"+
		"\2\u058c\u0576\3\2\2\2\u058c\u0578\3\2\2\2\u058c\u057b\3\2\2\2\u058c\u057e"+
		"\3\2\2\2\u058c\u0582\3\2\2\2\u058c\u0586\3\2\2\2\u058c\u0588\3\2\2\2\u058d"+
		"\u05c5\3\2\2\2\u058e\u058f\7\u00a5\2\2\u058f\u0590\7\30\2\2\u0590\u0591"+
		"\5\u02c0\u0161\2\u0591\u0592\5\u02cc\u0167\2\u0592\u05c5\3\2\2\2\u0593"+
		"\u0594\7\u0105\2\2\u0594\u0595\7\30\2\2\u0595\u0597\5\u02c0\u0161\2\u0596"+
		"\u0598\t\4\2\2\u0597\u0596\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u05c5\3\2"+
		"\2\2\u0599\u059b\7\u0105\2\2\u059a\u059c\7\27\2\2\u059b\u059a\3\2\2\2"+
		"\u059b\u059c\3\2\2\2\u059c\u059f\3\2\2\2\u059d\u059e\7\u014c\2\2\u059e"+
		"\u05a0\7.\2\2\u059f\u059d\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1\3\2"+
		"\2\2\u05a1\u05a3\5\u0254\u012b\2\u05a2\u05a4\t\4\2\2\u05a3\u05a2\3\2\2"+
		"\2\u05a3\u05a4\3\2\2\2\u05a4\u05c5\3\2\2\2\u05a5\u05a6\7\u012b\2\2\u05a6"+
		"\u05a7\7d\2\2\u05a7\u05c5\5\u02ae\u0158\2\u05a8\u05c5\5\u00dan\2\u05a9"+
		"\u05aa\7\u01a9\2\2\u05aa\u05ab\7\u0085\2\2\u05ab\u05c5\5\u02b8\u015d\2"+
		"\u05ac\u05ae\5\u0208\u0105\2\u05ad\u05af\7\u01e6\2\2\u05ae\u05ad\3\2\2"+
		"\2\u05ae\u05af\3\2\2\2\u05af\u05c5\3\2\2\2\u05b0\u05b1\7\u01e4\2\2\u05b1"+
		"\u05c5\7\u01b0\2\2\u05b2\u05b4\7\u01e5\2\2\u05b3\u05b5\7\27\2\2\u05b4"+
		"\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\5\u02a8"+
		"\u0155\2\u05b7\u05b8\7\u0085\2\2\u05b8\u05b9\5\u02a8\u0155\2\u05b9\u05c5"+
		"\3\2\2\2\u05ba\u05c5\7\u01e6\2\2\u05bb\u05bc\7\u020a\2\2\u05bc\u05bd\7"+
		"\u009f\2\2\u05bd\u05c5\5\u0228\u0115\2\u05be\u05bf\7\u020a\2\2\u05bf\u05c0"+
		"\7p\2\2\u05c0\u05c5\5\u0294\u014b\2\u05c1\u05c2\7\u020a\2\2\u05c2\u05c3"+
		"\7\u0220\2\2\u05c3\u05c5\5\u00f2z\2\u05c4\u0549\3\2\2\2\u05c4\u056e\3"+
		"\2\2\2\u05c4\u0570\3\2\2\2\u05c4\u058e\3\2\2\2\u05c4\u0593\3\2\2\2\u05c4"+
		"\u0599\3\2\2\2\u05c4\u05a5\3\2\2\2\u05c4\u05a8\3\2\2\2\u05c4\u05a9\3\2"+
		"\2\2\u05c4\u05ac\3\2\2\2\u05c4\u05b0\3\2\2\2\u05c4\u05b2\3\2\2\2\u05c4"+
		"\u05ba\3\2\2\2\u05c4\u05bb\3\2\2\2\u05c4\u05be\3\2\2\2\u05c4\u05c1\3\2"+
		"\2\2\u05c5;\3\2\2\2\u05c6\u05c7\7\u00a5\2\2\u05c7\u05c8\7\u008d\2\2\u05c8"+
		"\u05ca\5\u02b6\u015c\2\u05c9\u05cb\5> \2\u05ca\u05c9\3\2\2\2\u05cb\u05cc"+
		"\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd=\3\2\2\2\u05ce"+
		"\u05cf\7&\2\2\u05cf\u05e4\7\u01f2\2\2\u05d0\u05e5\7V\2\2\u05d1\u05d6\5"+
		"\u028e\u0148\2\u05d2\u05d3\7\u0294\2\2\u05d3\u05d5\5\u028e\u0148\2\u05d4"+
		"\u05d2\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2"+
		"\2\2\u05d7\u05e5\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05e5\7\3\2\2\u05da"+
		"\u05db\7\3\2\2\u05db\u05dc\7-\2\2\u05dc\u05e1\5\u028e\u0148\2\u05dd\u05de"+
		"\7\u0294\2\2\u05de\u05e0\5\u028e\u0148\2\u05df\u05dd\3\2\2\2\u05e0\u05e3"+
		"\3\2\2\2\u05e1\u05df\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e5\3\2\2\2\u05e3"+
		"\u05e1\3\2\2\2\u05e4\u05d0\3\2\2\2\u05e4\u05d1\3\2\2\2\u05e4\u05d9\3\2"+
		"\2\2\u05e4\u05da\3\2\2\2\u05e5\u05ea\3\2\2\2\u05e6\u05e7\7\u01e5\2\2\u05e7"+
		"\u05e8\7\u0085\2\2\u05e8\u05ea\5\u02c8\u0165\2\u05e9\u05ce\3\2\2\2\u05e9"+
		"\u05e6\3\2\2\2\u05ea\u0630\3\2\2\2\u05eb\u05ec\7\u009c\2\2\u05ec\u062e"+
		"\t\5\2\2\u05ed\u05f0\7\u0134\2\2\u05ee\u05f1\7V\2\2\u05ef\u05f1\5\u02c8"+
		"\u0165\2\u05f0\u05ee\3\2\2\2\u05f0\u05ef\3\2\2\2\u05f1\u062e\3\2\2\2\u05f2"+
		"\u05f3\7\u0149\2\2\u05f3\u05f4\7\u00bc\2\2\u05f4\u05f7\5\u02aa\u0156\2"+
		"\u05f5\u05f6\7\u01e8\2\2\u05f6\u05f8\5\u02aa\u0156\2\u05f7\u05f5\3\2\2"+
		"\2\u05f7\u05f8\3\2\2\2\u05f8\u062e\3\2\2\2\u05f9\u05fc\7\u014b\2\2\u05fa"+
		"\u05fd\7V\2\2\u05fb\u05fd\5\u02c8\u0165\2\u05fc\u05fa\3\2\2\2\u05fc\u05fb"+
		"\3\2\2\2\u05fd\u062e\3\2\2\2\u05fe\u0604\7\u0177\2\2\u05ff\u0605\7V\2"+
		"\2\u0600\u0601\5\u02ae\u0158\2\u0601\u0602\7_\2\2\u0602\u0603\t\6\2\2"+
		"\u0603\u0605\3\2\2\2\u0604\u05ff\3\2\2\2\u0604\u0600\3\2\2\2\u0605\u062e"+
		"\3\2\2\2\u0606\u0609\7\u017d\2\2\u0607\u060a\7V\2\2\u0608\u060a\5\u02aa"+
		"\u0156\2\u0609\u0607\3\2\2\2\u0609\u0608\3\2\2\2\u060a\u062e\3\2\2\2\u060b"+
		"\u060c\7\u01b1\2\2\u060c\u062e\7\u011b\2\2\u060d\u0610\7\u01d0\2\2\u060e"+
		"\u0611\7&\2\2\u060f\u0611\5\u02aa\u0156\2\u0610\u060e\3\2\2\2\u0610\u060f"+
		"\3\2\2\2\u0611\u062e\3\2\2\2\u0612\u0613\7\u01ea\2\2\u0613\u0614\7\u01c4"+
		"\2\2\u0614\u062e\5\u0292\u014a\2\u0615\u0618\7\u01f8\2\2\u0616\u0619\7"+
		"V\2\2\u0617\u0619\5\u02aa\u0156\2\u0618\u0616\3\2\2\2\u0618\u0617\3\2"+
		"\2\2\u0619\u062e\3\2\2\2\u061a\u0624\7\u01fe\2\2\u061b\u0625\7&\2\2\u061c"+
		"\u0621\5\u0294\u014b\2\u061d\u061e\7\u0294\2\2\u061e\u0620\5\u0294\u014b"+
		"\2\u061f\u061d\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2\u0621\u0622"+
		"\3\2\2\2\u0622\u0625\3\2\2\2\u0623\u0621\3\2\2\2\u0624\u061b\3\2\2\2\u0624"+
		"\u061c\3\2\2\2\u0625\u062e\3\2\2\2\u0626\u0627\7\u0202\2\2\u0627\u062e"+
		"\5\u02aa\u0156\2\u0628\u062b\7\u022d\2\2\u0629\u062c\7V\2\2\u062a\u062c"+
		"\5\u02c8\u0165\2\u062b\u0629\3\2\2\2\u062b\u062a\3\2\2\2\u062c\u062e\3"+
		"\2\2\2\u062d\u05eb\3\2\2\2\u062d\u05ed\3\2\2\2\u062d\u05f2\3\2\2\2\u062d"+
		"\u05f9\3\2\2\2\u062d\u05fe\3\2\2\2\u062d\u0606\3\2\2\2\u062d\u060b\3\2"+
		"\2\2\u062d\u060d\3\2\2\2\u062d\u0612\3\2\2\2\u062d\u0615\3\2\2\2\u062d"+
		"\u061a\3\2\2\2\u062d\u0626\3\2\2\2\u062d\u0628\3\2\2\2\u062e\u0630\3\2"+
		"\2\2\u062f\u05e9\3\2\2\2\u062f\u062d\3\2\2\2\u0630?\3\2\2\2\u0631\u0632"+
		"\7\u00a5\2\2\u0632\u0633\7\u0253\2\2\u0633\u063b\5\u0258\u012d\2\u0634"+
		"\u0635\7\u01a9\2\2\u0635\u0636\7\u0085\2\2\u0636\u063c\5\u02b8\u015d\2"+
		"\u0637\u0638\7\u020a\2\2\u0638\u0639\7p\2\2\u0639\u063c\5\u0294\u014b"+
		"\2\u063a\u063c\5\u00dan\2\u063b\u0634\3\2\2\2\u063b\u0637\3\2\2\2\u063b"+
		"\u063a\3\2\2\2\u063c\u0648\3\2\2\2\u063d\u063e\7\u0294\2\2\u063e\u0640"+
		"\5\u0258\u012d\2\u063f\u063d\3\2\2\2\u0640\u0643\3\2\2\2\u0641\u063f\3"+
		"\2\2\2\u0641\u0642\3\2\2\2\u0642\u0644\3\2\2\2\u0643\u0641\3\2\2\2\u0644"+
		"\u0645\7\u01e5\2\2\u0645\u0646\7\u0085\2\2\u0646\u0648\5\u024c\u0127\2"+
		"\u0647\u0631\3\2\2\2\u0647\u0641\3\2\2\2\u0648A\3\2\2\2\u0649\u064b\5"+
		"\u02c6\u0164\2\u064a\u0649\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u064a\3\2"+
		"\2\2\u064c\u064d\3\2\2\2\u064dC\3\2\2\2\u064e\u064f\7\u00b6\2\2\u064f"+
		"\u0650\t\7\2\2\u0650\u0651\7\u015d\2\2\u0651\u0652\7\u0167\2\2\u0652\u0653"+
		"\5\u02e2\u0172\2\u0653\u0654\5\u02e4\u0173\2\u0654E\3\2\2\2\u0655\u0661"+
		"\5H%\2\u0656\u0661\5J&\2\u0657\u0661\5L\'\2\u0658\u0661\5N(\2\u0659\u0661"+
		"\5P)\2\u065a\u0661\5R*\2\u065b\u0661\5T+\2\u065c\u0661\5V,\2\u065d\u0661"+
		"\5X-\2\u065e\u0661\5Z.\2\u065f\u0661\5\\/\2\u0660\u0655\3\2\2\2\u0660"+
		"\u0656\3\2\2\2\u0660\u0657\3\2\2\2\u0660\u0658\3\2\2\2\u0660\u0659\3\2"+
		"\2\2\u0660\u065a\3\2\2\2\u0660\u065b\3\2\2\2\u0660\u065c\3\2\2\2\u0660"+
		"\u065d\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u065f\3\2\2\2\u0661G\3\2\2\2"+
		"\u0662\u0663\7\u00d0\2\2\u0663\u0664\7_\2\2\u0664\u0665\7\27\2\2\u0665"+
		"\u0666\5\u0260\u0131\2\u0666\u0667\7\u029b\2\2\u0667\u0668\5\u02a8\u0155"+
		"\2\u0668\u0669\5^\60\2\u0669I\3\2\2\2\u066a\u066b\7\u00d0\2\2\u066b\u066c"+
		"\7_\2\2\u066c\u066d\7\30\2\2\u066d\u066e\5\u02c0\u0161\2\u066e\u066f\7"+
		"_\2\2\u066f\u0670\5\u0256\u012c\2\u0670\u0671\5^\60\2\u0671K\3\2\2\2\u0672"+
		"\u0673\7\u00d0\2\2\u0673\u0674\7_\2\2\u0674\u0675\7\u012f\2\2\u0675\u0676"+
		"\5\u0266\u0134\2\u0676\u0677\5\u00b0Y\2\u0677\u0678\5^\60\2\u0678M\3\2"+
		"\2\2\u0679\u067a\7\u00d0\2\2\u067a\u067b\7_\2\2\u067b\u067c\7\u0236\2"+
		"\2\u067c\u067d\7\u012f\2\2\u067d\u067e\5\u0266\u0134\2\u067e\u067f\5\u00b0"+
		"Y\2\u067f\u0680\5^\60\2\u0680O\3\2\2\2\u0681\u0682\7\u00d0\2\2\u0682\u0683"+
		"\7_\2\2\u0683\u0684\7\u012f\2\2\u0684\u0685\5\u0268\u0135\2\u0685\u0686"+
		"\5^\60\2\u0686Q\3\2\2\2\u0687\u0688\7\u00d0\2\2\u0688\u0689\7_\2\2\u0689"+
		"\u068a\7\u0194\2\2\u068a\u068b\5\u02a4\u0153\2\u068b\u068c\5^\60\2\u068c"+
		"S\3\2\2\2\u068d\u068e\7\u00d0\2\2\u068e\u068f\7_\2\2\u068f\u0690\7p\2"+
		"\2\u0690\u0691\5\u0270\u0139\2\u0691\u0692\5^\60\2\u0692U\3\2\2\2\u0693"+
		"\u0694\7\u00d0\2\2\u0694\u0695\7_\2\2\u0695\u0696\7\u0206\2\2\u0696\u0697"+
		"\5\u026a\u0136\2\u0697\u0698\5^\60\2\u0698W\3\2\2\2\u0699\u069a\7\u00d0"+
		"\2\2\u069a\u069b\7_\2\2\u069b\u069c\7y\2\2\u069c\u069d\5\u0256\u012c\2"+
		"\u069d\u069e\5^\60\2\u069eY\3\2\2\2\u069f\u06a0\7\u00d0\2\2\u06a0\u06a1"+
		"\7_\2\2\u06a1\u06a2\7\u0253\2\2\u06a2\u06a3\5\u0258\u012d\2\u06a3\u06a4"+
		"\5^\60\2\u06a4[\3\2\2\2\u06a5\u06a6\7\u00d0\2\2\u06a6\u06a7\7_\2\2\u06a7"+
		"\u06a8\7\u01d1\2\2\u06a8\u06a9\5\u0260\u0131\2\u06a9\u06aa\5^\60\2\u06aa"+
		"]\3\2\2\2\u06ab\u06ae\7E\2\2\u06ac\u06af\5\u02c8\u0165\2\u06ad\u06af\7"+
		"Y\2\2\u06ae\u06ac\3\2\2\2\u06ae\u06ad\3\2\2\2\u06af_\3\2\2\2\u06b0\u06b2"+
		"\7\u00d1\2\2\u06b1\u06b3\t\7\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2"+
		"\2\u06b3a\3\2\2\2\u06b4\u06b5\7\u00d6\2\2\u06b5\u06b6\7\u0085\2\2\u06b6"+
		"\u06b7\7\u0252\2\2\u06b7\u06b8\5\u0272\u013a\2\u06b8\u06b9\7\u008d\2\2"+
		"\u06b9\u06ba\5\u02b6\u015c\2\u06ba\u06bb\7\u01b1\2\2\u06bb\u06bc\5\u02c8"+
		"\u0165\2\u06bc\u06bd\7_\2\2\u06bd\u06be\5\u0276\u013c\2\u06be\u06bf\7"+
		"\u0294\2\2\u06bf\u06c2\5\u0278\u013d\2\u06c0\u06c1\7\u027a\2\2\u06c1\u06c3"+
		"\7\u027b\2\2\u06c2\u06c0\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3c\3\2\2\2\u06c4"+
		"\u06c7\5\u02a8\u0155\2\u06c5\u06c6\7\7\2\2\u06c6\u06c8\5\u0228\u0115\2"+
		"\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06ce\3\2\2\2\u06c9\u06cb"+
		"\7\u00f2\2\2\u06ca\u06cc\7\7\2\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2"+
		"\2\u06cc\u06cd\3\2\2\2\u06cd\u06cf\5\u02c8\u0165\2\u06ce\u06c9\3\2\2\2"+
		"\u06ce\u06cf\3\2\2\2\u06cf\u06d5\3\2\2\2\u06d0\u06d2\7\u010a\2\2\u06d1"+
		"\u06d3\7\u00bc\2\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4"+
		"\3\2\2\2\u06d4\u06d6\5\u02c8\u0165\2\u06d5\u06d0\3\2\2\2\u06d5\u06d6\3"+
		"\2\2\2\u06d6\u06d8\3\2\2\2\u06d7\u06d9\7\u010d\2\2\u06d8\u06d7\3\2\2\2"+
		"\u06d8\u06d9\3\2\2\2\u06d9\u06e1\3\2\2\2\u06da\u06dc\7\u0111\2\2\u06db"+
		"\u06dd\7\7\2\2\u06dc\u06db\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\3\2"+
		"\2\2\u06de\u06e2\5\u02c8\u0165\2\u06df\u06e0\7\u0191\2\2\u06e0\u06e2\7"+
		"\u0111\2\2\u06e1\u06da\3\2\2\2\u06e1\u06df\3\2\2\2\u06e1\u06e2\3\2\2\2"+
		"\u06e2\u06e5\3\2\2\2\u06e3\u06e4\7\u0124\2\2\u06e4\u06e6\5\u02e8\u0175"+
		"\2\u06e5\u06e3\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06e9\3\2\2\2\u06e7\u06e8"+
		"\7\u012c\2\2\u06e8\u06ea\5\u02c8\u0165\2\u06e9\u06e7\3\2\2\2\u06e9\u06ea"+
		"\3\2\2\2\u06ea\u06f0\3\2\2\2\u06eb\u06ed\7Y\2\2\u06ec\u06ee\7\7\2\2\u06ed"+
		"\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1\5\u02c8"+
		"\u0165\2\u06f0\u06eb\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2"+
		"\u06f3\7\u0088\2\2\u06f3\u06f5\5\u02c8\u0165\2\u06f4\u06f2\3\2\2\2\u06f4"+
		"\u06f5\3\2\2\2\u06f5e\3\2\2\2\u06f6\u06fc\5\u02a8\u0155\2\u06f7\u06f9"+
		"\7\u00f2\2\2\u06f8\u06fa\7\7\2\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2"+
		"\2\u06fa\u06fb\3\2\2\2\u06fb\u06fd\5\u02c8\u0165\2\u06fc\u06f7\3\2\2\2"+
		"\u06fc\u06fd\3\2\2\2\u06fd\u0703\3\2\2\2\u06fe\u0700\7\u010a\2\2\u06ff"+
		"\u0701\7\u00bc\2\2\u0700\u06ff\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0702"+
		"\3\2\2\2\u0702\u0704\5\u02c8\u0165\2\u0703\u06fe\3\2\2\2\u0703\u0704\3"+
		"\2\2\2\u0704\u0706\3\2\2\2\u0705\u0707\7\u010d\2\2\u0706\u0705\3\2\2\2"+
		"\u0706\u0707\3\2\2\2\u0707\u070f\3\2\2\2\u0708\u070a\7\u0111\2\2\u0709"+
		"\u070b\7\7\2\2\u070a\u0709\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070c\3\2"+
		"\2\2\u070c\u0710\5\u02c8\u0165\2\u070d\u070e\7\u0191\2\2\u070e\u0710\7"+
		"\u0111\2\2\u070f\u0708\3\2\2\2\u070f\u070d\3\2\2\2\u070f\u0710\3\2\2\2"+
		"\u0710\u0713\3\2\2\2\u0711\u0712\7\u0124\2\2\u0712\u0714\5\u02e8\u0175"+
		"\2\u0713\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u0717\3\2\2\2\u0715\u0716"+
		"\7\u012c\2\2\u0716\u0718\5\u02c8\u0165\2\u0717\u0715\3\2\2\2\u0717\u0718"+
		"\3\2\2\2\u0718\u071e\3\2\2\2\u0719\u071b\7Y\2\2\u071a\u071c\7\7\2\2\u071b"+
		"\u071a\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u071f\5\u02c8"+
		"\u0165\2\u071e\u0719\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0722\3\2\2\2\u0720"+
		"\u0721\7\u0088\2\2\u0721\u0723\5\u02c8\u0165\2\u0722\u0720\3\2\2\2\u0722"+
		"\u0723\3\2\2\2\u0723g\3\2\2\2\u0724\u0729\5\u02c6\u0164\2\u0725\u0726"+
		"\7\u0294\2\2\u0726\u0728\5\u02c6\u0164\2\u0727\u0725\3\2\2\2\u0728\u072b"+
		"\3\2\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u073d\3\2\2\2\u072b"+
		"\u0729\3\2\2\2\u072c\u073b\7_\2\2\u072d\u073c\5\u02a4\u0153\2\u072e\u072f"+
		"\7\u0299\2\2\u072f\u0734\5\u02a4\u0153\2\u0730\u0731\7\u0294\2\2\u0731"+
		"\u0733\5\u02a4\u0153\2\u0732\u0730\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732"+
		"\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0737\3\2\2\2\u0736\u0734\3\2\2\2\u0737"+
		"\u0738\7\u029a\2\2\u0738\u073c\3\2\2\2\u0739\u073a\7\5\2\2\u073a\u073c"+
		"\7\u0194\2\2\u073b\u072d\3\2\2\2\u073b\u072e\3\2\2\2\u073b\u0739\3\2\2"+
		"\2\u073c\u073e\3\2\2\2\u073d\u072c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0740"+
		"\3\2\2\2\u073f\u0741\5l\67\2\u0740\u073f\3\2\2\2\u0740\u0741\3\2\2\2\u0741"+
		"i\3\2\2\2\u0742\u0745\7\u016b\2\2\u0743\u0746\7\u021d\2\2\u0744\u0746"+
		"\5\u02c6\u0164\2\u0745\u0743\3\2\2\2\u0745\u0744\3\2\2\2\u0746\u0748\3"+
		"\2\2\2\u0747\u0749\5l\67\2\u0748\u0747\3\2\2\2\u0748\u0749\3\2\2\2\u0749"+
		"k\3\2\2\2\u074a\u074b\t\b\2\2\u074bm\3\2\2\2\u074c\u074d\7\u0252\2\2\u074d"+
		"\u074e\5\u0256\u012c\2\u074e\u074f\5\u00c6d\2\u074fo\3\2\2\2\u0750\u0751"+
		"\7\u0215\2\2\u0751\u0752\5\u025a\u012e\2\u0752\u0754\7\u0299\2\2\u0753"+
		"\u0755\5\u024a\u0126\2\u0754\u0753\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756"+
		"\3\2\2\2\u0756\u0757\7\u029a\2\2\u0757\u0769\3\2\2\2\u0758\u0759\7\u0125"+
		"\2\2\u0759\u075a\5\u025c\u012f\2\u075a\u075c\7\u0299\2\2\u075b\u075d\5"+
		"\u024a\u0126\2\u075c\u075b\3\2\2\2\u075c\u075d\3\2\2\2\u075d\u075e\3\2"+
		"\2\2\u075e\u075f\7\u029a\2\2\u075f\u0769\3\2\2\2\u0760\u0761\7\u01ad\2"+
		"\2\u0761\u0762\5\u025e\u0130\2\u0762\u0764\7\u0299\2\2\u0763\u0765\5\u024a"+
		"\u0126\2\u0764\u0763\3\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766"+
		"\u0767\7\u029a\2\2\u0767\u0769\3\2\2\2\u0768\u0750\3\2\2\2\u0768\u0758"+
		"\3\2\2\2\u0768\u0760\3\2\2\2\u0769q\3\2\2\2\u076a\u076c\7\u00f2\2\2\u076b"+
		"\u076d\7\7\2\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076e\3\2"+
		"\2\2\u076e\u07b8\5\u02aa\u0156\2\u076f\u0770\7\u0086\2\2\u0770\u07b8\7"+
		"\u019b\2\2\u0771\u0773\7Y\2\2\u0772\u0774\7\7\2\2\u0773\u0772\3\2\2\2"+
		"\u0773\u0774\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u07b8\5\u02aa\u0156\2\u0776"+
		"\u0778\7\u0111\2\2\u0777\u0779\7\7\2\2\u0778\u0777\3\2\2\2\u0778\u0779"+
		"\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077e\5\u02aa\u0156\2\u077b\u077c\7"+
		"\u0191\2\2\u077c\u077e\7\u0111\2\2\u077d\u0776\3\2\2\2\u077d\u077b\3\2"+
		"\2\2\u077e\u07b8\3\2\2\2\u077f\u0781\7\u010a\2\2\u0780\u0782\7\u00bc\2"+
		"\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0783\3\2\2\2\u0783\u07b8"+
		"\5\u02aa\u0156\2\u0784\u0785\7\u01db\2\2\u0785\u0786\7\u022e\2\2\u0786"+
		"\u07b8\5\u02aa\u0156\2\u0787\u0788\7\u0214\2\2\u0788\u07b8\5\u02ae\u0158"+
		"\2\u0789\u078a\7\u0214\2\2\u078a\u078b\7\u00be\2\2\u078b\u07b8\5\u02ae"+
		"\u0158\2\u078c\u078d\7\u0088\2\2\u078d\u07b8\5\u02c8\u0165\2\u078e\u078f"+
		"\7\u01e1\2\2\u078f\u07b8\5\u02ae\u0158\2\u0790\u0791\7\u01e0\2\2\u0791"+
		"\u079d\7\u00e5\2\2\u0792\u0797\5\u02aa\u0156\2\u0793\u0794\7_\2\2\u0794"+
		"\u0796\5\u02a4\u0153\2\u0795\u0793\3\2\2\2\u0796\u0799\3\2\2\2\u0797\u0795"+
		"\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u079e\3\2\2\2\u0799\u0797\3\2\2\2\u079a"+
		"\u079b\7\7\2\2\u079b\u079c\7y\2\2\u079c\u079e\5\u02c6\u0164\2\u079d\u0792"+
		"\3\2\2\2\u079d\u079a\3\2\2\2\u079e\u07b8\3\2\2\2\u079f\u07a0\7\u0115\2"+
		"\2\u07a0\u07a5\5\u02aa\u0156\2\u07a1\u07a2\7_\2\2\u07a2\u07a4\5\u02a4"+
		"\u0153\2\u07a3\u07a1\3\2\2\2\u07a4\u07a7\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a5"+
		"\u07a6\3\2\2\2\u07a6\u07b8\3\2\2\2\u07a7\u07a5\3\2\2\2\u07a8\u07b8\7\u010d"+
		"\2\2\u07a9\u07aa\7\u0110\2\2\u07aa\u07b8\7\u0234\2\2\u07ab\u07ac\7\u0098"+
		"\2\2\u07ac\u07ad\7_\2\2\u07ad\u07b8\7\u0110\2\2\u07ae\u07b0\7\u0220\2"+
		"\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b8"+
		"\5\u00f2z\2\u07b2\u07b3\7\u0221\2\2\u07b3\u07b4\7\u018c\2\2\u07b4\u07b8"+
		"\5\u02c8\u0165\2\u07b5\u07b6\7\u0191\2\2\u07b6\u07b8\7\u00d1\2\2\u07b7"+
		"\u076a\3\2\2\2\u07b7\u076f\3\2\2\2\u07b7\u0771\3\2\2\2\u07b7\u077d\3\2"+
		"\2\2\u07b7\u077f\3\2\2\2\u07b7\u0784\3\2\2\2\u07b7\u0787\3\2\2\2\u07b7"+
		"\u0789\3\2\2\2\u07b7\u078c\3\2\2\2\u07b7\u078e\3\2\2\2\u07b7\u0790\3\2"+
		"\2\2\u07b7\u079f\3\2\2\2\u07b7\u07a8\3\2\2\2\u07b7\u07a9\3\2\2\2\u07b7"+
		"\u07ab\3\2\2\2\u07b7\u07af\3\2\2\2\u07b7\u07b2\3\2\2\2\u07b7\u07b5\3\2"+
		"\2\2\u07b8s\3\2\2\2\u07b9\u07ba\7\u00d9\2\2\u07ba\u07c6\5\u0256\u012c"+
		"\2\u07bb\u07bc\7\u0299\2\2\u07bc\u07c1\5d\63\2\u07bd\u07be\7\u0294\2\2"+
		"\u07be\u07c0\5d\63\2\u07bf\u07bd\3\2\2\2\u07c0\u07c3\3\2\2\2\u07c1\u07bf"+
		"\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c4\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c4"+
		"\u07c5\7\u029a\2\2\u07c5\u07c7\3\2\2\2\u07c6\u07bb\3\2\2\2\u07c6\u07c7"+
		"\3\2\2\2\u07c7\u07d5\3\2\2\2\u07c8\u07c9\7\27\2\2\u07c9\u07ca\7\u01a5"+
		"\2\2\u07ca\u07cb\7\u0299\2\2\u07cb\u07d0\5f\64\2\u07cc\u07cd\7\u0294\2"+
		"\2\u07cd\u07cf\5f\64\2\u07ce\u07cc\3\2\2\2\u07cf\u07d2\3\2\2\2\u07d0\u07ce"+
		"\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d3\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d3"+
		"\u07d4\7\u029a\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07c8\3\2\2\2\u07d5\u07d6"+
		"\3\2\2\2\u07d6\u07f0\3\2\2\2\u07d7\u07ee\7\64\2\2\u07d8\u07da\7\u021d"+
		"\2\2\u07d9\u07db\5\u02c8\u0165\2\u07da\u07d9\3\2\2\2\u07da\u07db\3\2\2"+
		"\2\u07db\u07ef\3\2\2\2\u07dc\u07e1\5h\65\2\u07dd\u07de\7\u0294\2\2\u07de"+
		"\u07e0\5h\65\2\u07df\u07dd\3\2\2\2\u07e0\u07e3\3\2\2\2\u07e1\u07df\3\2"+
		"\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07ef\3\2\2\2\u07e3\u07e1\3\2\2\2\u07e4"+
		"\u07e9\5j\66\2\u07e5\u07e6\7\u0294\2\2\u07e6\u07e8\5j\66\2\u07e7\u07e5"+
		"\3\2\2\2\u07e8\u07eb\3\2\2\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea"+
		"\u07ef\3\2\2\2\u07eb\u07e9\3\2\2\2\u07ec\u07ef\5n8\2\u07ed\u07ef\5\u0256"+
		"\u012c\2\u07ee\u07d8\3\2\2\2\u07ee\u07dc\3\2\2\2\u07ee\u07e4\3\2\2\2\u07ee"+
		"\u07ec\3\2\2\2\u07ee\u07ed\3\2\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07d7\3\2"+
		"\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07fa\3\2\2\2\u07f2\u07f4\7\u0096\2\2\u07f3"+
		"\u07f2\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6\3\2\2\2\u07f5\u07f7\5p"+
		"9\2\u07f6\u07f5\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f8"+
		"\u07f9\3\2\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07f3\3\2\2\2\u07fa\u07fb\3\2"+
		"\2\2\u07fb\u07ff\3\2\2\2\u07fc\u07fe\5r:\2\u07fd\u07fc\3\2\2\2\u07fe\u0801"+
		"\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2\2\u0800u\3\2\2\2\u0801"+
		"\u07ff\3\2\2\2\u0802\u0803\5t;\2\u0803w\3\2\2\2\u0804\u0805\7\u00d9\2"+
		"\2\u0805\u0807\5\u0256\u012c\2\u0806\u0808\5\u00c6d\2\u0807\u0806\3\2"+
		"\2\2\u0807\u0808\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\7\64\2\2\u080a"+
		"\u080b\7\u0252\2\2\u080b\u080d\5\u0256\u012c\2\u080c\u080e\5\u00c6d\2"+
		"\u080d\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810\3\2\2\2\u080f\u0811"+
		"\5\u00f2z\2\u0810\u080f\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u0815\3\2\2"+
		"\2\u0812\u0813\7\u0221\2\2\u0813\u0814\7\u018c\2\2\u0814\u0816\5\u02c6"+
		"\u0164\2\u0815\u0812\3\2\2\2\u0815\u0816\3\2\2\2\u0816\u0819\3\2\2\2\u0817"+
		"\u0818\7\u0191\2\2\u0818\u081a\7\u00d1\2\2\u0819\u0817\3\2\2\2\u0819\u081a"+
		"\3\2\2\2\u081ay\3\2\2\2\u081b\u081c\7\32\2\2\u081c\u081d\7\u009a\2\2\u081d"+
		"\u081e\7\u01c3\2\2\u081e\u081f\7_\2\2\u081f\u0829\5\u0256\u012c\2\u0820"+
		"\u0821\7\62\2\2\u0821\u0822\7\27\2\2\u0822\u0823\5\u02a8\u0155\2\u0823"+
		"\u0824\5\u0222\u0112\2\u0824\u082a\3\2\2\2\u0825\u0826\7\62\2\2\u0826"+
		"\u0827\7\u01f6\2\2\u0827\u0828\7\u0094\2\2\u0828\u082a\5\u0222\u0112\2"+
		"\u0829\u0820\3\2\2\2\u0829\u0825\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082c"+
		"\t\t\2\2\u082c{\3\2\2\2\u082d\u082e\7\32\2\2\u082e\u082f\7\u00ae\2\2\u082f"+
		"\u0830\5\u02be\u0160\2\u0830\u0831\7\u0181\2\2\u0831\u083b\5\u02be\u0160"+
		"\2\u0832\u083c\7\u016b\2\2\u0833\u0838\7\u0145\2\2\u0834\u0836\7\u0191"+
		"\2\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\3\2\2\2\u0837"+
		"\u0839\7\u0231\2\2\u0838\u0835\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083a"+
		"\3\2\2\2\u083a\u083c\5\u02d0\u0169\2\u083b\u0832\3\2\2\2\u083b\u0833\3"+
		"\2\2\2\u083c}\3\2\2\2\u083d\u083e\7\32\2\2\u083e\u083f\7\u00e5\2\2\u083f"+
		"\u0840\7\u014f\2\2\u0840\u0841\7\u028b\2\2\u0841\u0846\5\u028c\u0147\2"+
		"\u0842\u0843\7\u0294\2\2\u0843\u0845\5\u028c\u0147\2\u0844\u0842\3\2\2"+
		"\2\u0845\u0848\3\2\2\2\u0846\u0844\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u084b"+
		"\3\2\2\2\u0848\u0846\3\2\2\2\u0849\u084a\7K\2\2\u084a\u084c\5\u02c8\u0165"+
		"\2\u084b\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\177\3\2\2\2\u084d\u084e"+
		"\7\32\2\2\u084e\u084f\7\u011e\2\2\u084f\u0853\7y\2\2\u0850\u0851\7\u014c"+
		"\2\2\u0851\u0852\7W\2\2\u0852\u0854\7.\2\2\u0853\u0850\3\2\2\2\u0853\u0854"+
		"\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0856\5\u0256\u012c\2\u0856\u0858\5"+
		"\u00ecw\2\u0857\u0859\5\u00dan\2\u0858\u0857\3\2\2\2\u0858\u0859\3\2\2"+
		"\2\u0859\u085a\3\2\2\2\u085a\u085b\7\7\2\2\u085b\u0867\7\u00d9\2\2\u085c"+
		"\u085d\7\u0299\2\2\u085d\u0862\5d\63\2\u085e\u085f\7\u0294\2\2\u085f\u0861"+
		"\5d\63\2\u0860\u085e\3\2\2\2\u0861\u0864\3\2\2\2\u0862\u0860\3\2\2\2\u0862"+
		"\u0863\3\2\2\2\u0863\u0865\3\2\2\2\u0864\u0862\3\2\2\2\u0865\u0866\7\u029a"+
		"\2\2\u0866\u0868\3\2\2\2\u0867\u085c\3\2\2\2\u0867\u0868\3\2\2\2\u0868"+
		"\u0876\3\2\2\2\u0869\u086a\7\27\2\2\u086a\u086b\7\u01a5\2\2\u086b\u086c"+
		"\7\u0299\2\2\u086c\u0871\5f\64\2\u086d\u086e\7\u0294\2\2\u086e\u0870\5"+
		"f\64\2\u086f\u086d\3\2\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871"+
		"\u0872\3\2\2\2\u0872\u0874\3\2\2\2\u0873\u0871\3\2\2\2\u0874\u0875\7\u029a"+
		"\2\2\u0875\u0877\3\2\2\2\u0876\u0869\3\2\2\2\u0876\u0877\3\2\2\2\u0877"+
		"\u0878\3\2\2\2\u0878\u0886\7\64\2\2\u0879\u0887\5h\65\2\u087a\u0887\3"+
		"\2\2\2\u087b\u087d\7\u0096\2\2\u087c\u087b\3\2\2\2\u087c\u087d\3\2\2\2"+
		"\u087d\u087e\3\2\2\2\u087e\u087f\7\u0215\2\2\u087f\u0884\5\u027a\u013e"+
		"\2\u0880\u0881\7\u0299\2\2\u0881\u0882\5\u024a\u0126\2\u0882\u0883\7\u029a"+
		"\2\2\u0883\u0885\3\2\2\2\u0884\u0880\3\2\2\2\u0884\u0885\3\2\2\2\u0885"+
		"\u0887\3\2\2\2\u0886\u0879\3\2\2\2\u0886\u087a\3\2\2\2\u0886\u087c\3\2"+
		"\2\2\u0887\u0889\3\2\2\2\u0888\u088a\5l\67\2\u0889\u0888\3\2\2\2\u0889"+
		"\u088a\3\2\2\2\u088a\u089f\3\2\2\2\u088b\u08a0\7\u018e\2\2\u088c\u088d"+
		"\7\u0127\2\2\u088d\u088e\7\u00ce\2\2\u088e\u088f\7\u0299\2\2\u088f\u0890"+
		"\5\u02b0\u0159\2\u0890\u0898\7\u029a\2\2\u0891\u0892\7\u0294\2\2\u0892"+
		"\u0893\7\u0299\2\2\u0893\u0894\5\u02b0\u0159\2\u0894\u0895\7\u029a\2\2"+
		"\u0895\u0897\3\2\2\2\u0896\u0891\3\2\2\2\u0897\u089a\3\2\2\2\u0898\u0896"+
		"\3\2\2\2\u0898\u0899\3\2\2\2\u0899\u08a0\3\2\2\2\u089a\u0898\3\2\2\2\u089b"+
		"\u089c\7\u018e\2\2\u089c\u08a0\7\u0091\2\2\u089d\u08a0\7\u01a7\2\2\u089e"+
		"\u08a0\7\u01ac\2\2\u089f\u088b\3\2\2\2\u089f\u088c\3\2\2\2\u089f\u089b"+
		"\3\2\2\2\u089f\u089d\3\2\2\2\u089f\u089e\3\2\2\2\u089f\u08a0\3\2\2\2\u08a0"+
		"\u08a4\3\2\2\2\u08a1\u08a2\7\u0098\2\2\u08a2\u08a3\7_\2\2\u08a3\u08a5"+
		"\7\u0110\2\2\u08a4\u08a1\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a6\3\2\2"+
		"\2\u08a6\u08a8\7\u00f2\2\2\u08a7\u08a9\7\7\2\2\u08a8\u08a7\3\2\2\2\u08a8"+
		"\u08a9\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u08ab\5\u02ac\u0157\2\u08ab\u08b2"+
		"\3\2\2\2\u08ac\u08ad\7\u010a\2\2\u08ad\u08ae\7\u00bc\2\2\u08ae\u08af\5"+
		"\u02ac\u0157\2\u08af\u08b0\7\4\2\2\u08b0\u08b1\5\u02ac\u0157\2\u08b1\u08b3"+
		"\3\2\2\2\u08b2\u08ac\3\2\2\2\u08b2\u08b3\3\2\2\2\u08b3\u08b5\3\2\2\2\u08b4"+
		"\u08b6\7\u010d\2\2\u08b5\u08b4\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b9"+
		"\3\2\2\2\u08b7\u08b8\7\u0110\2\2\u08b8\u08ba\7\u0234\2\2\u08b9\u08b7\3"+
		"\2\2\2\u08b9\u08ba\3\2\2\2\u08ba\u08c0\3\2\2\2\u08bb\u08bc\7\u0111\2\2"+
		"\u08bc\u08bd\7\7\2\2\u08bd\u08c1\5\u02ac\u0157\2\u08be\u08bf\7\u0191\2"+
		"\2\u08bf\u08c1\7\u0111\2\2\u08c0\u08bb\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0"+
		"\u08c1\3\2\2\2\u08c1\u08d0\3\2\2\2\u08c2\u08c3\7\u0115\2\2\u08c3\u08c6"+
		"\5h\65\2\u08c4\u08c5\7_\2\2\u08c5\u08c7\5\u02a4\u0153\2\u08c6\u08c4\3"+
		"\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08cd\3\2\2\2\u08c8\u08c9\7\u0294\2\2"+
		"\u08c9\u08ca\7_\2\2\u08ca\u08cc\5\u02a4\u0153\2\u08cb\u08c8\3\2\2\2\u08cc"+
		"\u08cf\3\2\2\2\u08cd\u08cb\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d1\3\2"+
		"\2\2\u08cf\u08cd\3\2\2\2\u08d0\u08c2\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1"+
		"\u08dd\3\2\2\2\u08d2\u08d4\7\u0096\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4"+
		"\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6\7\u0125\2\2\u08d6\u08d7\5\u025c"+
		"\u012f\2\u08d7\u08d9\7\u0299\2\2\u08d8\u08da\5\u024a\u0126\2\u08d9\u08d8"+
		"\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dc\7\u029a\2"+
		"\2\u08dc\u08de\3\2\2\2\u08dd\u08d3\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e4"+
		"\3\2\2\2\u08df\u08e1\7Y\2\2\u08e0\u08e2\7\7\2\2\u08e1\u08e0\3\2\2\2\u08e1"+
		"\u08e2\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e5\5\u02aa\u0156\2\u08e4\u08df"+
		"\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08f1\3\2\2\2\u08e6\u08e8\7\u0096\2"+
		"\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08e9\3\2\2\2\u08e9\u08ea"+
		"\7\u01ad\2\2\u08ea\u08eb\5\u025e\u0130\2\u08eb\u08ed\7\u0299\2\2\u08ec"+
		"\u08ee\5\u024a\u0126\2\u08ed\u08ec\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08ef"+
		"\3\2\2\2\u08ef\u08f0\7\u029a\2\2\u08f0\u08f2\3\2\2\2\u08f1\u08e7\3\2\2"+
		"\2\u08f1\u08f2\3\2\2\2\u08f2\u08f6\3\2\2\2\u08f3\u08f4\7\u01db\2\2\u08f4"+
		"\u08f5\7\u022e\2\2\u08f5\u08f7\5\u02aa\u0156\2\u08f6\u08f3\3\2\2\2\u08f6"+
		"\u08f7\3\2\2\2\u08f7\u0907\3\2\2\2\u08f8\u08f9\7\u01e0\2\2\u08f9\u08fa"+
		"\7\u00e5\2\2\u08fa\u08fd\5h\65\2\u08fb\u08fc\7_\2\2\u08fc\u08fe\5\u02a4"+
		"\u0153\2\u08fd\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0904\3\2\2\2\u08ff"+
		"\u0900\7\u0294\2\2\u0900\u0901\7_\2\2\u0901\u0903\5\u02a4\u0153\2\u0902"+
		"\u08ff\3\2\2\2\u0903\u0906\3\2\2\2\u0904\u0902\3\2\2\2\u0904\u0905\3\2"+
		"\2\2\u0905\u0908\3\2\2\2\u0906\u0904\3\2\2\2\u0907\u08f8\3\2\2\2\u0907"+
		"\u0908\3\2\2\2\u0908\u090b\3\2\2\2\u0909\u090a\7\u01e1\2\2\u090a\u090c"+
		"\5\u02b0\u0159\2\u090b\u0909\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u090f\3"+
		"\2\2\2\u090d\u090e\7\u0214\2\2\u090e\u0910\5\u02b0\u0159\2\u090f\u090d"+
		"\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0914\3\2\2\2\u0911\u0912\7\u0214\2"+
		"\2\u0912\u0913\7\u00be\2\2\u0913\u0915\5\u02b0\u0159\2\u0914\u0911\3\2"+
		"\2\2\u0914\u0915\3\2\2\2\u0915\u0918\3\2\2\2\u0916\u0917\7\u0086\2\2\u0917"+
		"\u0919\7\u019b\2\2\u0918\u0916\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091c"+
		"\3\2\2\2\u091a\u091b\7\u0088\2\2\u091b\u091d\5\u02ac\u0157\2\u091c\u091a"+
		"\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u0081\3\2\2\2\u091e\u091f\7\32\2\2"+
		"\u091f\u0920\7\u0120\2\2\u0920\u0921\7\67\2\2\u0921\u0922\5\u02c6\u0164"+
		"\2\u0922\u0083\3\2\2\2\u0923\u0924\7\32\2\2\u0924\u0925\t\n\2\2\u0925"+
		"\u0929\7y\2\2\u0926\u0927\7\u014c\2\2\u0927\u0928\7W\2\2\u0928\u092a\7"+
		".\2\2\u0929\u0926\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092b\3\2\2\2\u092b"+
		"\u092e\5\u0256\u012c\2\u092c\u092f\5\u00ecw\2\u092d\u092f\5\u00dep\2\u092e"+
		"\u092c\3\2\2\2\u092e\u092d\3\2\2\2\u092f\u0931\3\2\2\2\u0930\u0932\5\u00da"+
		"n\2\u0931\u0930\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0934\3\2\2\2\u0933"+
		"\u0935\5\u0204\u0103\2\u0934\u0933\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u0937"+
		"\3\2\2\2\u0936\u0938\5\u00fc\177\2\u0937\u0936\3\2\2\2\u0937\u0938\3\2"+
		"\2\2\u0938\u093a\3\2\2\2\u0939\u093b\5\u00f4{\2\u093a\u0939\3\2\2\2\u093a"+
		"\u093b\3\2\2\2\u093b\u093d\3\2\2\2\u093c\u093e\5\u00b8]\2\u093d\u093c"+
		"\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0940\3\2\2\2\u093f\u0941\5\u0208\u0105"+
		"\2\u0940\u093f\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0944\3\2\2\2\u0942\u0943"+
		"\7\7\2\2\u0943\u0945\5\u01b2\u00da\2\u0944\u0942\3\2\2\2\u0944\u0945\3"+
		"\2\2\2\u0945\u0085\3\2\2\2\u0946\u0947\7\32\2\2\u0947\u0948\t\n\2\2\u0948"+
		"\u0949\7\u011e\2\2\u0949\u094b\7y\2\2\u094a\u094c\5\u00ba^\2\u094b\u094a"+
		"\3\2\2\2\u094b\u094c\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094e\5\u0256\u012c"+
		"\2\u094e\u0950\5\u00ecw\2\u094f\u0951\5\u00dan\2\u0950\u094f\3\2\2\2\u0950"+
		"\u0951\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0953\7\7\2\2\u0953\u095f\7\u00d9"+
		"\2\2\u0954\u0955\7\u0299\2\2\u0955\u095a\5d\63\2\u0956\u0957\7\u0294\2"+
		"\2\u0957\u0959\5d\63\2\u0958\u0956\3\2\2\2\u0959\u095c\3\2\2\2\u095a\u0958"+
		"\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095d\3\2\2\2\u095c\u095a\3\2\2\2\u095d"+
		"\u095e\7\u029a\2\2\u095e\u0960\3\2\2\2\u095f\u0954\3\2\2\2\u095f\u0960"+
		"\3\2\2\2\u0960\u09ec\3\2\2\2\u0961\u0962\7\64\2\2\u0962\u096b\5h\65\2"+
		"\u0963\u0968\5\u02d2\u016a\2\u0964\u0965\7\u0294\2\2\u0965\u0967\5\u02d2"+
		"\u016a\2\u0966\u0964\3\2\2\2\u0967\u096a\3\2\2\2\u0968\u0966\3\2\2\2\u0968"+
		"\u0969\3\2\2\2\u0969\u096c\3\2\2\2\u096a\u0968\3\2\2\2\u096b\u0963\3\2"+
		"\2\2\u096b\u096c\3\2\2\2\u096c\u096e\3\2\2\2\u096d\u096f\7\u0096\2\2\u096e"+
		"\u096d\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u0976\3\2\2\2\u0970\u0971\7\u0215"+
		"\2\2\u0971\u0972\5\u027a\u013e\2\u0972\u0973\7\u0299\2\2\u0973\u0974\5"+
		"\u024a\u0126\2\u0974\u0975\7\u029a\2\2\u0975\u0977\3\2\2\2\u0976\u0970"+
		"\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u097e\3\2\2\2\u0978\u0979\7\u0125\2"+
		"\2\u0979\u097a\5\u0280\u0141\2\u097a\u097b\7\u0299\2\2\u097b\u097c\5\u024a"+
		"\u0126\2\u097c\u097d\7\u029a\2\2\u097d\u097f\3\2\2\2\u097e\u0978\3\2\2"+
		"\2\u097e\u097f\3\2\2\2\u097f\u0984\3\2\2\2\u0980\u0981\7\u01ad\2\2\u0981"+
		"\u0982\5\u0282\u0142\2\u0982\u0983\5\u024a\u0126\2\u0983\u0985\3\2\2\2"+
		"\u0984\u0980\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u098b\3\2\2\2\u0986\u0988"+
		"\7\u00f2\2\2\u0987\u0989\7\7\2\2\u0988\u0987\3\2\2\2\u0988\u0989\3\2\2"+
		"\2\u0989\u098a\3\2\2\2\u098a\u098c\5\u02ac\u0157\2\u098b\u0986\3\2\2\2"+
		"\u098b\u098c\3\2\2\2\u098c\u098f\3\2\2\2\u098d\u098e\7\u0086\2\2\u098e"+
		"\u0990\7\u019b\2\2\u098f\u098d\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0996"+
		"\3\2\2\2\u0991\u0993\7Y\2\2\u0992\u0994\7\7\2\2\u0993\u0992\3\2\2\2\u0993"+
		"\u0994\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0997\5\u02aa\u0156\2\u0996\u0991"+
		"\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u099f\3\2\2\2\u0998\u099a\7\u0111\2"+
		"\2\u0999\u099b\7\7\2\2\u099a\u0999\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099c"+
		"\3\2\2\2\u099c\u09a0\5\u02ac\u0157\2\u099d\u099e\7\u0191\2\2\u099e\u09a0"+
		"\7\u0111\2\2\u099f\u0998\3\2\2\2\u099f\u099d\3\2\2\2\u099f\u09a0\3\2\2"+
		"\2\u09a0\u09a6\3\2\2\2\u09a1\u09a3\7\u010a\2\2\u09a2\u09a4\7\u00bc\2\2"+
		"\u09a3\u09a2\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a7"+
		"\5\u02ac\u0157\2\u09a6\u09a1\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09ab\3"+
		"\2\2\2\u09a8\u09a9\7\u01db\2\2\u09a9\u09aa\7\u022e\2\2\u09aa\u09ac\5\u02aa"+
		"\u0156\2\u09ab\u09a8\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac\u09af\3\2\2\2\u09ad"+
		"\u09ae\7\u0214\2\2\u09ae\u09b0\5\u02b0\u0159\2\u09af\u09ad\3\2\2\2\u09af"+
		"\u09b0\3\2\2\2\u09b0\u09b4\3\2\2\2\u09b1\u09b2\7\u0214\2\2\u09b2\u09b3"+
		"\7\u00be\2\2\u09b3\u09b5\5\u02b0\u0159\2\u09b4\u09b1\3\2\2\2\u09b4\u09b5"+
		"\3\2\2\2\u09b5\u09b8\3\2\2\2\u09b6\u09b7\7\u0088\2\2\u09b7\u09b9\5\u02ac"+
		"\u0157\2\u09b8\u09b6\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09bc\3\2\2\2\u09ba"+
		"\u09bb\7\u01e1\2\2\u09bb\u09bd\5\u02b0\u0159\2\u09bc\u09ba\3\2\2\2\u09bc"+
		"\u09bd\3\2\2\2\u09bd\u09ce\3\2\2\2\u09be\u09bf\7\u0115\2\2\u09bf\u09c0"+
		"\5\u02aa\u0156\2\u09c0\u09c1\7_\2\2\u09c1\u09c2\5\u02a4\u0153\2\u09c2"+
		"\u09c3\3\2\2\2\u09c3\u09cb\7\u0294\2\2\u09c4\u09c5\7\u0115\2\2\u09c5\u09c6"+
		"\5\u02aa\u0156\2\u09c6\u09c7\7_\2\2\u09c7\u09c8\5\u02a4\u0153\2\u09c8"+
		"\u09ca\3\2\2\2\u09c9\u09c4\3\2\2\2\u09ca\u09cd\3\2\2\2\u09cb\u09c9\3\2"+
		"\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09cf\3\2\2\2\u09cd\u09cb\3\2\2\2\u09ce"+
		"\u09be\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09e2\3\2\2\2\u09d0\u09d1\7\u01e0"+
		"\2\2\u09d1\u09d2\7\u00e5\2\2\u09d2\u09d3\5\u02aa\u0156\2\u09d3\u09d4\7"+
		"_\2\2\u09d4\u09d5\5\u02a4\u0153\2\u09d5\u09d6\3\2\2\2\u09d6\u09df\7\u0294"+
		"\2\2\u09d7\u09d8\7\u01e0\2\2\u09d8\u09d9\7\u00e5\2\2\u09d9\u09da\5\u02aa"+
		"\u0156\2\u09da\u09db\7_\2\2\u09db\u09dc\5\u02a4\u0153\2\u09dc\u09de\3"+
		"\2\2\2\u09dd\u09d7\3\2\2\2\u09de\u09e1\3\2\2\2\u09df\u09dd\3\2\2\2\u09df"+
		"\u09e0\3\2\2\2\u09e0\u09e3\3\2\2\2\u09e1\u09df\3\2\2\2\u09e2\u09d0\3\2"+
		"\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e5\3\2\2\2\u09e4\u09e6\7\u010d\2\2\u09e5"+
		"\u09e4\3\2\2\2\u09e5\u09e6\3\2\2\2\u09e6\u09ea\3\2\2\2\u09e7\u09e8\7\u0098"+
		"\2\2\u09e8\u09e9\7_\2\2\u09e9\u09eb\7\u0110\2\2\u09ea\u09e7\3\2\2\2\u09ea"+
		"\u09eb\3\2\2\2\u09eb\u09ed\3\2\2\2\u09ec\u0961\3\2\2\2\u09ec\u09ed\3\2"+
		"\2\2\u09ed\u0087\3\2\2\2\u09ee\u09f7\5\u009aN\2\u09ef\u09f7\5\u0098M\2"+
		"\u09f0\u09f7\5\u0096L\2\u09f1\u09f7\5\u0092J\2\u09f2\u09f7\5\u0090I\2"+
		"\u09f3\u09f7\5\u008eH\2\u09f4\u09f7\5\u008cG\2\u09f5\u09f7\5\u008aF\2"+
		"\u09f6\u09ee\3\2\2\2\u09f6\u09ef\3\2\2\2\u09f6\u09f0\3\2\2\2\u09f6\u09f1"+
		"\3\2\2\2\u09f6\u09f2\3\2\2\2\u09f6\u09f3\3\2\2\2\u09f6\u09f4\3\2\2\2\u09f6"+
		"\u09f5\3\2\2\2\u09f7\u0089\3\2\2\2\u09f8\u09fb\7\32\2\2\u09f9\u09fa\7"+
		"a\2\2\u09fa\u09fc\7\u01e8\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2"+
		"\u09fc\u09fd\3\2\2\2\u09fd\u09fe\7\u0236\2\2\u09fe\u09ff\7\u012f\2\2\u09ff"+
		"\u0a00\5\u02a0\u0151\2\u0a00\u0a03\7\7\2\2\u0a01\u0a02\7\u0162\2\2\u0a02"+
		"\u0a04\5\u0290\u0149\2\u0a03\u0a01\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05"+
		"\3\2\2\2\u0a05\u0a06\7\u018c\2\2\u0a06\u0a07\5\u02c6\u0164\2\u0a07\u0a08"+
		"\7\u0168\2\2\u0a08\u0a0c\5\u029e\u0150\2\u0a09\u0a0d\7\u0121\2\2\u0a0a"+
		"\u0a0b\7W\2\2\u0a0b\u0a0d\7\u0121\2\2\u0a0c\u0a09\3\2\2\2\u0a0c\u0a0a"+
		"\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u008b\3\2\2\2\u0a0e\u0a11\7\32\2\2"+
		"\u0a0f\u0a10\7a\2\2\u0a10\u0a12\7\u01e8\2\2\u0a11\u0a0f\3\2\2\2\u0a11"+
		"\u0a12\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a14\7\u0215\2\2\u0a14\u0a15"+
		"\5\u0266\u0134\2\u0a15\u0a16\7\7\2\2\u0a16\u0a17\7\u0162\2\2\u0a17\u0a18"+
		"\5\u0290\u0149\2\u0a18\u0a19\7\u018c\2\2\u0a19\u0a1a\5\u02c6\u0164\2\u0a1a"+
		"\u0a1b\7\u0168\2\2\u0a1b\u0a1f\5\u029e\u0150\2\u0a1c\u0a20\7\u0121\2\2"+
		"\u0a1d\u0a1e\7W\2\2\u0a1e\u0a20\7\u0121\2\2\u0a1f\u0a1c\3\2\2\2\u0a1f"+
		"\u0a1d\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u008d\3\2\2\2\u0a21\u0a24\7\32"+
		"\2\2\u0a22\u0a23\7a\2\2\u0a23\u0a25\7\u01e8\2\2\u0a24\u0a22\3\2\2\2\u0a24"+
		"\u0a25\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a27\7\u01ad\2\2\u0a27\u0a28"+
		"\5\u0266\u0134\2\u0a28\u0a2b\7\7\2\2\u0a29\u0a2a\7\u0162\2\2\u0a2a\u0a2c"+
		"\5\u0290\u0149\2\u0a2b\u0a29\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2d\3"+
		"\2\2\2\u0a2d\u0a2e\7\u018c\2\2\u0a2e\u0a2f\5\u02c6\u0164\2\u0a2f\u0a30"+
		"\7\u0168\2\2\u0a30\u0a34\5\u029e\u0150\2\u0a31\u0a35\7\u0121\2\2\u0a32"+
		"\u0a33\7W\2\2\u0a33\u0a35\7\u0121\2\2\u0a34\u0a31\3\2\2\2\u0a34\u0a32"+
		"\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u008f\3\2\2\2\u0a36\u0a39\7\32\2\2"+
		"\u0a37\u0a38\7a\2\2\u0a38\u0a3a\7\u01e8\2\2\u0a39\u0a37\3\2\2\2\u0a39"+
		"\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\7\u012f\2\2\u0a3c\u0a3d"+
		"\5\u0266\u0134\2\u0a3d\u0a40\7\7\2\2\u0a3e\u0a3f\7\u0162\2\2\u0a3f\u0a41"+
		"\5\u0290\u0149\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a42\3"+
		"\2\2\2\u0a42\u0a43\7\u018c\2\2\u0a43\u0a44\5\u02c6\u0164\2\u0a44\u0a45"+
		"\7\u0168\2\2\u0a45\u0a49\5\u029e\u0150\2\u0a46\u0a4a\7\u0121\2\2\u0a47"+
		"\u0a48\7W\2\2\u0a48\u0a4a\7\u0121\2\2\u0a49\u0a46\3\2\2\2\u0a49\u0a47"+
		"\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0091\3\2\2\2\u0a4b\u0a4e\7\32\2\2"+
		"\u0a4c\u0a4d\7a\2\2\u0a4d\u0a4f\7\u01e8\2\2\u0a4e\u0a4c\3\2\2\2\u0a4e"+
		"\u0a4f\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51\7\u012f\2\2\u0a51\u0a52"+
		"\5\u0266\u0134\2\u0a52\u0a53\5\u00b0Y\2\u0a53\u0a54\7\u01ee\2\2\u0a54"+
		"\u0a55\5\u02e8\u0175\2\u0a55\u0a56\7\7\2\2\u0a56\u0a57\5\u0094K\2\u0a57"+
		"\u0093\3\2\2\2\u0a58\u0a59\7\u00b6\2\2\u0a59\u0a5a\7\u01ee\2\2\u0a5a\u0a5c"+
		"\5\u0228\u0115\2\u0a5b\u0a5d\7\u029c\2\2\u0a5c\u0a5b\3\2\2\2\u0a5c\u0a5d"+
		"\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0a5f\7,\2\2\u0a5f\u0095\3\2\2\2\u0a60"+
		"\u0a63\7\32\2\2\u0a61\u0a62\7a\2\2\u0a62\u0a64\7\u01e8\2\2\u0a63\u0a61"+
		"\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\7\u0125\2"+
		"\2\u0a66\u0a67\5\u0266\u0134\2\u0a67\u0a6a\7\7\2\2\u0a68\u0a69\7\u0162"+
		"\2\2\u0a69\u0a6b\5\u0290\u0149\2\u0a6a\u0a68\3\2\2\2\u0a6a\u0a6b\3\2\2"+
		"\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u0a6d\7\u018c\2\2\u0a6d\u0a6e\5\u02c6\u0164"+
		"\2\u0a6e\u0a6f\7\u0168\2\2\u0a6f\u0a74\5\u029e\u0150\2\u0a70\u0a72\7W"+
		"\2\2\u0a71\u0a70\3\2\2\2\u0a71\u0a72\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73"+
		"\u0a75\7\u0121\2\2\u0a74\u0a71\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0097"+
		"\3\2\2\2\u0a76\u0a79\7\32\2\2\u0a77\u0a78\7a\2\2\u0a78\u0a7a\7\u01e8\2"+
		"\2\u0a79\u0a77\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u0a7c"+
		"\7\u00a7\2\2\u0a7c\u0a7d\7\u012f\2\2\u0a7d\u0a7e\5\u02a0\u0151\2\u0a7e"+
		"\u0a81\7\7\2\2\u0a7f\u0a80\7\u0162\2\2\u0a80\u0a82\5\u0290\u0149\2\u0a81"+
		"\u0a7f\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a84\7\u018c"+
		"\2\2\u0a84\u0a85\5\u02c6\u0164\2\u0a85\u0a86\7\u0168\2\2\u0a86\u0a8a\5"+
		"\u029e\u0150\2\u0a87\u0a8b\7\u0121\2\2\u0a88\u0a89\7W\2\2\u0a89\u0a8b"+
		"\7\u0121\2\2\u0a8a\u0a87\3\2\2\2\u0a8a\u0a88\3\2\2\2\u0a8a\u0a8b\3\2\2"+
		"\2\u0a8b\u0099\3\2\2\2\u0a8c\u0a8f\7\32\2\2\u0a8d\u0a8e\7a\2\2\u0a8e\u0a90"+
		"\7\u01e8\2\2\u0a8f\u0a8d\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\3\2\2"+
		"\2\u0a91\u0a92\7\u00a3\2\2\u0a92\u0a93\7\u012f\2\2\u0a93\u0a94\5\u0266"+
		"\u0134\2\u0a94\u0a97\7\7\2\2\u0a95\u0a96\7\u0162\2\2\u0a96\u0a98\5\u0290"+
		"\u0149\2\u0a97\u0a95\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99"+
		"\u0a9a\7\u018c\2\2\u0a9a\u0a9b\5\u02c6\u0164\2\u0a9b\u0a9c\7\u0168\2\2"+
		"\u0a9c\u0a9d\5\u029e\u0150\2\u0a9d\u009b\3\2\2\2\u0a9e\u0a9f\7\32\2\2"+
		"\u0a9f\u0aa0\7\u013a\2\2\u0aa0\u0aa2\7p\2\2\u0aa1\u0aa3\5\u00ba^\2\u0aa2"+
		"\u0aa1\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa7\5\u0294"+
		"\u014b\2\u0aa5\u0aa6\7\t\2\2\u0aa6\u0aa8\5\u02c6\u0164\2\u0aa7\u0aa5\3"+
		"\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaf\3\2\2\2\u0aa9\u0aab\7\u0096\2\2"+
		"\u0aaa\u0aac\5\u009eP\2\u0aab\u0aaa\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad"+
		"\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0\3\2\2\2\u0aaf\u0aa9\3\2"+
		"\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u009d\3\2\2\2\u0ab1\u0ab2\t\13\2\2\u0ab2"+
		"\u0ab3\7\u02a4\2\2\u0ab3\u0ab4\5\u02c8\u0165\2\u0ab4\u009f\3\2\2\2\u0ab5"+
		"\u0ab8\7\32\2\2\u0ab6\u0ab7\7a\2\2\u0ab7\u0ab9\7\u01e8\2\2\u0ab8\u0ab6"+
		"\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba\u0abb\7\u0168\2"+
		"\2\u0abb\u0abc\5\u0268\u0135\2\u0abc\u0abf\5\u0242\u0122\2\u0abd\u0abe"+
		"\7\u00f7\2\2\u0abe\u0ac0\5\u02c6\u0164\2\u0abf\u0abd\3\2\2\2\u0abf\u0ac0"+
		"\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0ac2\7\u0162\2\2\u0ac2\u0ac4\5\u0290"+
		"\u0149\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u00a1\3\2\2\2\u0ac5"+
		"\u0ac6\7\32\2\2\u0ac6\u0ac7\7\u016a\2\2\u0ac7\u0ac8\7\u0282\2\2\u0ac8"+
		"\u0ac9\7\67\2\2\u0ac9\u0aca\5\u0286\u0144\2\u0aca\u0ae1\7\u0096\2\2\u0acb"+
		"\u0acc\7\u0281\2\2\u0acc\u0ad1\5\u0288\u0145\2\u0acd\u0ace\7\u0294\2\2"+
		"\u0ace\u0ad0\5\u0288\u0145\2\u0acf\u0acd\3\2\2\2\u0ad0\u0ad3\3\2\2\2\u0ad1"+
		"\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ae2\3\2\2\2\u0ad3\u0ad1\3\2"+
		"\2\2\u0ad4\u0ad5\7\u0120\2\2\u0ad5\u0ad6\7\67\2\2\u0ad6\u0adb\5\u02bc"+
		"\u015f\2\u0ad7\u0ad8\7\u0294\2\2\u0ad8\u0ada\5\u02bc\u015f\2\u0ad9\u0ad7"+
		"\3\2\2\2\u0ada\u0add\3\2\2\2\u0adb\u0ad9\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc"+
		"\u0ade\3\2\2\2\u0add\u0adb\3\2\2\2\u0ade\u0adf\7\u0125\2\2\u0adf\u0ae0"+
		"\5\u02d0\u0169\2\u0ae0\u0ae2\3\2\2\2\u0ae1\u0acb\3\2\2\2\u0ae1\u0ad4\3"+
		"\2\2\2\u0ae2\u0ae5\3\2\2\2\u0ae3\u0ae4\7\u01c3\2\2\u0ae4\u0ae6\5\u02c8"+
		"\u0165\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u00a3\3\2\2\2\u0ae7"+
		"\u0ae8\7\32\2\2\u0ae8\u0ae9\7a\2\2\u0ae9\u0aea\7\u01e8\2\2\u0aea\u0aeb"+
		"\3\2\2\2\u0aeb\u0aec\7\u016b\2\2\u0aec\u0aed\t\f\2\2\u0aed\u0aee\7\u0253"+
		"\2\2\u0aee\u0af0\5\u0258\u012d\2\u0aef\u0af1\5\u00c6d\2\u0af0\u0aef\3"+
		"\2\2\2\u0af0\u0af1\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0af3\7\7\2\2\u0af3"+
		"\u0af4\5\u01e8\u00f5\2\u0af4\u00a5\3\2\2\2\u0af5\u0af6\7\32\2\2\u0af6"+
		"\u0af7\7\u016c\2\2\u0af7\u0afc\5\u02aa\u0156\2\u0af8\u0af9\7\u0194\2\2"+
		"\u0af9\u0afd\5\u02a4\u0153\2\u0afa\u0afb\7\3\2\2\u0afb\u0afd\7\u0195\2"+
		"\2\u0afc\u0af8\3\2\2\2\u0afc\u0afa\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0aff"+
		"\3\2\2\2\u0afe\u0b00\7\u020e\2\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00\3\2\2"+
		"\2\u0b00\u0b03\3\2\2\2\u0b01\u0b02\7\u0249\2\2\u0b02\u0b04\5\u02aa\u0156"+
		"\2\u0b03\u0b01\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b07\3\2\2\2\u0b05\u0b06"+
		"\7\u0160\2\2\u0b06\u0b08\5\u02aa\u0156\2\u0b07\u0b05\3\2\2\2\u0b07\u0b08"+
		"\3\2\2\2\u0b08\u0b0b\3\2\2\2\u0b09\u0b0a\7M\2\2\u0b0a\u0b0c\5\u02aa\u0156"+
		"\2\u0b0b\u0b09\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u00a7\3\2\2\2\u0b0d\u0b0e"+
		"\7\32\2\2\u0b0e\u0b0f\7\u018f\2\2\u0b0f\u0b10\7\u0281\2\2\u0b10\u0b11"+
		"\5\u0288\u0145\2\u0b11\u0b12\7_\2\2\u0b12\u0b13\5\u02a4\u0153\2\u0b13"+
		"\u0b14\7\u0096\2\2\u0b14\u0b15\5\u02d0\u0169\2\u0b15\u00a9\3\2\2\2\u0b16"+
		"\u0b17\7\32\2\2\u0b17\u0b18\7\u018f\2\2\u0b18\u0b19\7\u015a\2\2\u0b19"+
		"\u0b1a\5\u02c2\u0162\2\u0b1a\u0b1b\7_\2\2\u0b1b\u0b1c\5\u02a4\u0153\2"+
		"\u0b1c\u0b1d\7\u0096\2\2\u0b1d\u0b1e\5\u02d0\u0169\2\u0b1e\u00ab\3\2\2"+
		"\2\u0b1f\u0b20\7\32\2\2\u0b20\u0b21\7\u0197\2\2\u0b21\u0b22\5\u027c\u013f"+
		"\2\u0b22\u0b23\7\u009d\2\2\u0b23\u0b27\5\u02c8\u0165\2\u0b24\u0b26\5\36"+
		"\20\2\u0b25\u0b24\3\2\2\2\u0b26\u0b29\3\2\2\2\u0b27\u0b25\3\2\2\2\u0b27"+
		"\u0b28\3\2\2\2\u0b28\u00ad\3\2\2\2\u0b29\u0b27\3\2\2\2\u0b2a\u0b2b\7\32"+
		"\2\2\u0b2b\u0b2c\7\u01cf\2\2\u0b2c\u0b2d\5\u0262\u0132\2\u0b2d\u0b2e\5"+
		"\u00b0Y\2\u0b2e\u0b2f\7\7\2\2\u0b2f\u0b30\5\u02c8\u0165\2\u0b30\u0b31"+
		"\7\u0162\2\2\u0b31\u0b32\5\u0290\u0149\2\u0b32\u0b33\7\u008d\2\2\u0b33"+
		"\u0b34\5\u02b6\u015c\2\u0b34\u00af\3\2\2\2\u0b35\u0b3e\7\u0299\2\2\u0b36"+
		"\u0b3b\5\u00b2Z\2\u0b37\u0b38\7\u0294\2\2\u0b38\u0b3a\5\u00b2Z\2\u0b39"+
		"\u0b37\3\2\2\2\u0b3a\u0b3d\3\2\2\2\u0b3b\u0b39\3\2\2\2\u0b3b\u0b3c\3\2"+
		"\2\2\u0b3c\u0b3f\3\2\2\2\u0b3d\u0b3b\3\2\2\2\u0b3e\u0b36\3\2\2\2\u0b3e"+
		"\u0b3f\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b41\7\u029a\2\2\u0b41\u00b1"+
		"\3\2\2\2\u0b42\u0b44\5\u02c6\u0164\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3"+
		"\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46\5\u02e8\u0175\2\u0b46\u00b3\3\2"+
		"\2\2\u0b47\u0b48\7\32\2\2\u0b48\u0b49\7\u01d0\2\2\u0b49\u0b4a\5\u02c4"+
		"\u0163\2\u0b4a\u0b4c\7M\2\2\u0b4b\u0b4d\5\u02d4\u016b\2\u0b4c\u0b4b\3"+
		"\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f"+
		"\u00b5\3\2\2\2\u0b50\u0b53\5\u0254\u012b\2\u0b51\u0b53\5\u00e4s\2\u0b52"+
		"\u0b50\3\2\2\2\u0b52\u0b51\3\2\2\2\u0b53\u0b55\3\2\2\2\u0b54\u0b56\5\u020a"+
		"\u0106\2\u0b55\u0b54\3\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b58\3\2\2\2\u0b57"+
		"\u0b59\5\u00e2r\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u00b7"+
		"\3\2\2\2\u0b5a\u0b5c\7H\2\2\u0b5b\u0b5d\5\u02b0\u0159\2\u0b5c\u0b5b\3"+
		"\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u00b9\3\2\2\2\u0b5e\u0b60\7\u014c\2\2"+
		"\u0b5f\u0b61\7W\2\2\u0b60\u0b5f\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b62"+
		"\3\2\2\2\u0b62\u0b63\7.\2\2\u0b63\u00bb\3\2\2\2\u0b64\u0b65\7\32\2\2\u0b65"+
		"\u0b67\7\u01d1\2\2\u0b66\u0b68\5\u00ba^\2\u0b67\u0b66\3\2\2\2\u0b67\u0b68"+
		"\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b6b\5\u0260\u0131\2\u0b6a\u0b6c\5"+
		"\u0250\u0129\2\u0b6b\u0b6a\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b78\3\2"+
		"\2\2\u0b6d\u0b6e\7\u0299\2\2\u0b6e\u0b73\5\u00b6\\\2\u0b6f\u0b70\7\u0294"+
		"\2\2\u0b70\u0b72\5\u00b6\\\2\u0b71\u0b6f\3\2\2\2\u0b72\u0b75\3\2\2\2\u0b73"+
		"\u0b71\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b76\3\2\2\2\u0b75\u0b73\3\2"+
		"\2\2\u0b76\u0b77\7\u029a\2\2\u0b77\u0b79\3\2\2\2\u0b78\u0b6d\3\2\2\2\u0b78"+
		"\u0b79\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\7\7\2\2\u0b7b\u0b7d\5\u01e6"+
		"\u00f4\2\u0b7c\u0b7e\5\u0242\u0122\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e\3"+
		"\2\2\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b81\5\u0204\u0103\2\u0b80\u0b7f\3\2"+
		"\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b84\5\u00f4{\2\u0b83"+
		"\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86\3\2\2\2\u0b85\u0b87\5\u00b8"+
		"]\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u00bd\3\2\2\2\u0b88"+
		"\u0b8b\5\u00c0a\2\u0b89\u0b8b\5\u00c2b\2\u0b8a\u0b88\3\2\2\2\u0b8a\u0b89"+
		"\3\2\2\2\u0b8b\u00bf\3\2\2\2\u0b8c\u0b8d\7\32\2\2\u0b8d\u0b8f\7\u01d1"+
		"\2\2\u0b8e\u0b90\5\u00ba^\2\u0b8f\u0b8e\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90"+
		"\u0b91\3\2\2\2\u0b91\u0b9d\5\u0260\u0131\2\u0b92\u0b93\7\u0299\2\2\u0b93"+
		"\u0b98\5\u00b6\\\2\u0b94\u0b95\7\u0294\2\2\u0b95\u0b97\5\u00b6\\\2\u0b96"+
		"\u0b94\3\2\2\2\u0b97\u0b9a\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b98\u0b99\3\2"+
		"\2\2\u0b99\u0b9b\3\2\2\2\u0b9a\u0b98\3\2\2\2\u0b9b\u0b9c\7\u029a\2\2\u0b9c"+
		"\u0b9e\3\2\2\2\u0b9d\u0b92\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0b9f\3\2"+
		"\2\2\u0b9f\u0ba0\7\7\2\2\u0ba0\u0ba2\5\u01e6\u00f4\2\u0ba1\u0ba3\5\u0242"+
		"\u0122\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4"+
		"\u0ba6\5\u01fe\u0100\2\u0ba5\u0ba7\5\u00b8]\2\u0ba6\u0ba5\3\2\2\2\u0ba6"+
		"\u0ba7\3\2\2\2\u0ba7\u00c1\3\2\2\2\u0ba8\u0ba9\7\32\2\2\u0ba9\u0bab\7"+
		"\u01d1\2\2\u0baa\u0bac\5\u00ba^\2\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2"+
		"\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0bb9\5\u0260\u0131\2\u0bae\u0baf\7\u0299"+
		"\2\2\u0baf\u0bb4\5\u00b6\\\2\u0bb0\u0bb1\7\u0294\2\2\u0bb1\u0bb3\5\u00b6"+
		"\\\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb4"+
		"\u0bb5\3\2\2\2\u0bb5\u0bb7\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb7\u0bb8\7\u029a"+
		"\2\2\u0bb8\u0bba\3\2\2\2\u0bb9\u0bae\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba"+
		"\u0bbb\3\2\2\2\u0bbb\u0bbc\7\7\2\2\u0bbc\u0bbe\5\u01e6\u00f4\2\u0bbd\u0bbf"+
		"\5\u0242\u0122\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc0\3"+
		"\2\2\2\u0bc0\u0bc1\5\u01ec\u00f7\2\u0bc1\u0bc3\5\u01fa\u00fe\2\u0bc2\u0bc4"+
		"\5\u00b8]\2\u0bc3\u0bc2\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u00c3\3\2\2"+
		"\2\u0bc5\u0bc6\7\32\2\2\u0bc6\u0bc8\7\u01d1\2\2\u0bc7\u0bc9\5\u00ba^\2"+
		"\u0bc8\u0bc7\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bca\3\2\2\2\u0bca\u0bd6"+
		"\5\u0260\u0131\2\u0bcb\u0bcc\7\u0299\2\2\u0bcc\u0bd1\5\u00b6\\\2\u0bcd"+
		"\u0bce\7\u0294\2\2\u0bce\u0bd0\5\u00b6\\\2\u0bcf\u0bcd\3\2\2\2\u0bd0\u0bd3"+
		"\3\2\2\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd4\3\2\2\2\u0bd3"+
		"\u0bd1\3\2\2\2\u0bd4\u0bd5\7\u029a\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bcb"+
		"\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0be3\7\7\2\2\u0bd9"+
		"\u0bda\5\u00c8e\2\u0bda\u0be0\7\64\2\2\u0bdb\u0be1\5\u00caf\2\u0bdc\u0bde"+
		"\5\u0256\u012c\2\u0bdd\u0bdf\5\u0242\u0122\2\u0bde\u0bdd\3\2\2\2\u0bde"+
		"\u0bdf\3\2\2\2\u0bdf\u0be1\3\2\2\2\u0be0\u0bdb\3\2\2\2\u0be0\u0bdc\3\2"+
		"\2\2\u0be1\u0be4\3\2\2\2\u0be2\u0be4\5\u00caf\2\u0be3\u0bd9\3\2\2\2\u0be3"+
		"\u0be2\3\2\2\2\u0be4\u00c5\3\2\2\2\u0be5\u0be7\7\u0299\2\2\u0be6\u0be8"+
		"\5\u0254\u012b\2\u0be7\u0be6\3\2\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0bed\3"+
		"\2\2\2\u0be9\u0bea\7\u0294\2\2\u0bea\u0bec\5\u0254\u012b\2\u0beb\u0be9"+
		"\3\2\2\2\u0bec\u0bef\3\2\2\2\u0bed\u0beb\3\2\2\2\u0bed\u0bee\3\2\2\2\u0bee"+
		"\u0bf0\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bf0\u0bfa\7\u029a\2\2\u0bf1\u0bf6"+
		"\5\u0254\u012b\2\u0bf2\u0bf3\7\u0294\2\2\u0bf3\u0bf5\5\u0254\u012b\2\u0bf4"+
		"\u0bf2\3\2\2\2\u0bf5\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf7\3\2"+
		"\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf9\u0be5\3\2\2\2\u0bf9"+
		"\u0bf1\3\2\2\2\u0bfa\u00c7\3\2\2\2\u0bfb\u0bfc\7q\2\2\u0bfc\u0bfd\5\u021c"+
		"\u010f\2\u0bfd\u0bfe\7\u0294\2\2\u0bfe\u0bff\5\u0244\u0123\2\u0bff\u0c00"+
		"\7e\2\2\u0c00\u0c01\7\u0299\2\2\u0c01\u0c02\7\u01af\2\2\u0c02\u0c03\7"+
		"\u00b4\2\2\u0c03\u0c04\7\u00bc\2\2\u0c04\u0c05\5\u021c\u010f\2\u0c05\u0c08"+
		"\7\u029a\2\2\u0c06\u0c07\7\7\2\2\u0c07\u0c09\5\u00c6d\2\u0c08\u0c06\3"+
		"\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u00c9\3\2\2\2\u0c0a\u0c0b\7q\2\2\u0c0b"+
		"\u0c0c\5\u021c\u010f\2\u0c0c\u0c0d\7\u0294\2\2\u0c0d\u0c0e\5\u0244\u0123"+
		"\2\u0c0e\u0c0f\7e\2\2\u0c0f\u0c10\7\u0299\2\2\u0c10\u0c11\7\u01af\2\2"+
		"\u0c11\u0c12\7\u00b4\2\2\u0c12\u0c13\7\u00bc\2\2\u0c13\u0c14\5\u021c\u010f"+
		"\2\u0c14\u0c17\7\u029a\2\2\u0c15\u0c16\7\7\2\2\u0c16\u0c18\5\u00c6d\2"+
		"\u0c17\u0c15\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1a"+
		"\7\64\2\2\u0c1a\u0c1b\5\u0256\u012c\2\u0c1b\u00cb\3\2\2\2\u0c1c\u0c1d"+
		"\7\32\2\2\u0c1d\u0c1e\7\u01ea\2\2\u0c1e\u0c1f\7\u01c4\2\2\u0c1f\u0c21"+
		"\5\u0292\u014a\2\u0c20\u0c22\5(\25\2\u0c21\u0c20\3\2\2\2\u0c22\u0c23\3"+
		"\2\2\2\u0c23\u0c21\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u00cd\3\2\2\2\u0c25"+
		"\u0c26\7\32\2\2\u0c26\u0c27\7\u01f2\2\2\u0c27\u0c28\5\u028e\u0148\2\u0c28"+
		"\u00cf\3\2\2\2\u0c29\u0c2a\7\32\2\2\u0c2a\u0c2b\7\u0269\2\2\u0c2b\u0c2c"+
		"\7\u01f7\2\2\u0c2c\u0c2d\5\u028a\u0146\2\u0c2d\u0c2e\7\u0268\2\2\u0c2e"+
		"\u0c2f\5\u02d0\u0169\2\u0c2f\u0c30\7\u0085\2\2\u0c30\u0c31\5\u02c8\u0165"+
		"\2\u0c31\u00d1\3\2\2\2\u0c32\u0c33\7\32\2\2\u0c33\u0c35\7p\2\2\u0c34\u0c36"+
		"\5\u00ba^\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c37\3\2\2"+
		"\2\u0c37\u0c3a\5\u0270\u0139\2\u0c38\u0c39\7\t\2\2\u0c39\u0c3b\5\u02aa"+
		"\u0156\2\u0c3a\u0c38\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3e\3\2\2\2\u0c3c"+
		"\u0c3d\7&\2\2\u0c3d\u0c3f\5\u00dan\2\u0c3e\u0c3c\3\2\2\2\u0c3e\u0c3f\3"+
		"\2\2\2\u0c3f\u00d3\3\2\2\2\u0c40\u0c41\7\32\2\2\u0c41\u0c43\7\u0206\2"+
		"\2\u0c42\u0c44\5\u00ba^\2\u0c43\u0c42\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44"+
		"\u0c45\3\2\2\2\u0c45\u0c49\5\u026a\u0136\2\u0c46\u0c47\7\u0153\2\2\u0c47"+
		"\u0c48\7\u00bc\2\2\u0c48\u0c4a\7\u02c8\2\2\u0c49\u0c46\3\2\2\2\u0c49\u0c4a"+
		"\3\2\2\2\u0c4a\u0c4f\3\2\2\2\u0c4b\u0c4c\7\u0186\2\2\u0c4c\u0c50\7\u02c8"+
		"\2\2\u0c4d\u0c4e\7\u0191\2\2\u0c4e\u0c50\7\u0186\2\2\u0c4f\u0c4b\3\2\2"+
		"\2\u0c4f\u0c4d\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c55\3\2\2\2\u0c51\u0c52"+
		"\7\u017b\2\2\u0c52\u0c56\7\u02c8\2\2\u0c53\u0c54\7\u0191\2\2\u0c54\u0c56"+
		"\7\u017b\2\2\u0c55\u0c51\3\2\2\2\u0c55\u0c53\3\2\2\2\u0c55\u0c56\3\2\2"+
		"\2\u0c56\u0c5a\3\2\2\2\u0c57\u0c58\7\u01eb\2\2\u0c58\u0c59\7\u0096\2\2"+
		"\u0c59\u0c5b\7\u02c8\2\2\u0c5a\u0c57\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b"+
		"\u0c66\3\2\2\2\u0c5c\u0c5d\7\u00c1\2\2\u0c5d\u0c67\7\u02c8\2\2\u0c5e\u0c5f"+
		"\7\u0191\2\2\u0c5f\u0c60\7\u00c1\2\2\u0c60\u0c64\3\2\2\2\u0c61\u0c65\7"+
		"\u00e4\2\2\u0c62\u0c63\7\u0191\2\2\u0c63\u0c65\7\u00e4\2\2\u0c64\u0c61"+
		"\3\2\2\2\u0c64\u0c62\3\2\2\2\u0c65\u0c67\3\2\2\2\u0c66\u0c5c\3\2\2\2\u0c66"+
		"\u0c5e\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u00d5\3\2\2\2\u0c68\u0c69\7\32"+
		"\2\2\u0c69\u0c6a\7\u0224\2\2\u0c6a\u0c6b\5\u02b4\u015b\2\u0c6b\u0c6c\7"+
		"\u0096\2\2\u0c6c\u0c6d\5\u02aa\u0156\2\u0c6d\u00d7\3\2\2\2\u0c6e\u0c72"+
		"\5\u00e8u\2\u0c6f\u0c72\5\u00dco\2\u0c70\u0c72\5\u00e6t\2\u0c71\u0c6e"+
		"\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c71\u0c70\3\2\2\2\u0c72\u00d9\3\2\2\2\u0c73"+
		"\u0c75\t\r\2\2\u0c74\u0c76\7p\2\2\u0c75\u0c74\3\2\2\2\u0c75\u0c76\3\2"+
		"\2\2\u0c76\u0c78\3\2\2\2\u0c77\u0c79\7W\2\2\u0c78\u0c77\3\2\2\2\u0c78"+
		"\u0c79\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7b\7\u01cd\2\2\u0c7b\u00db"+
		"\3\2\2\2\u0c7c\u0c7d\7\32\2\2\u0c7d\u0c7f\7y\2\2\u0c7e\u0c80\5\u00ba^"+
		"\2\u0c7f\u0c7e\3\2\2\2\u0c7f\u0c80\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0c83"+
		"\5\u0256\u012c\2\u0c82\u0c84\5\u00dep\2\u0c83\u0c82\3\2\2\2\u0c83\u0c84"+
		"\3\2\2\2\u0c84\u0c86\3\2\2\2\u0c85\u0c87\5\u00dan\2\u0c86\u0c85\3\2\2"+
		"\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a\7\7\2\2\u0c89\u0c8b"+
		"\5\u0250\u0129\2\u0c8a\u0c89\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b\u0c8c\3"+
		"\2\2\2\u0c8c\u0c8e\5\u01b2\u00da\2\u0c8d\u0c8f\5\u00fc\177\2\u0c8e\u0c8d"+
		"\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u00dd\3\2\2\2\u0c90\u0c99\7\u0299\2"+
		"\2\u0c91\u0c96\5\u00e0q\2\u0c92\u0c93\7\u0294\2\2\u0c93\u0c95\5\u00e0"+
		"q\2\u0c94\u0c92\3\2\2\2\u0c95\u0c98\3\2\2\2\u0c96\u0c94\3\2\2\2\u0c96"+
		"\u0c97\3\2\2\2\u0c97\u0c9a\3\2\2\2\u0c98\u0c96\3\2\2\2\u0c99\u0c91\3\2"+
		"\2\2\u0c99\u0c9a\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9c\7\u029a\2\2\u0c9c"+
		"\u00df\3\2\2\2\u0c9d\u0c9f\5\u02a8\u0155\2\u0c9e\u0ca0\5\u020a\u0106\2"+
		"\u0c9f\u0c9e\3\2\2\2\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0ca3"+
		"\5\u00e2r\2\u0ca2\u0ca1\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2"+
		"\2\u0ca4\u0ca6\5\u00e4s\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6"+
		"\u00e1\3\2\2\2\u0ca7\u0ca8\7\u009b\2\2\u0ca8\u0ca9\5\u02ae\u0158\2\u0ca9"+
		"\u00e3\3\2\2\2\u0caa\u0cab\7\u0135\2\2\u0cab\u0cac\5\u00c6d\2\u0cac\u00e5"+
		"\3\2\2\2\u0cad\u0cae\7\32\2\2\u0cae\u0cb0\7y\2\2\u0caf\u0cb1\5\u00ba^"+
		"\2\u0cb0\u0caf\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2\u0cb3"+
		"\5\u0256\u012c\2\u0cb3\u0cb4\7K\2\2\u0cb4\u0cb7\5\u0256\u012c\2\u0cb5"+
		"\u0cb6\t\16\2\2\u0cb6\u0cb8\7\u01d2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7\u0cb8"+
		"\3\2\2\2\u0cb8\u0cba\3\2\2\2\u0cb9\u0cbb\5\u00f2z\2\u0cba\u0cb9\3\2\2"+
		"\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbd\3\2\2\2\u0cbc\u0cbe\5\u00dan\2\u0cbd"+
		"\u0cbe\3\2\2\2\u0cbd\u0cbc\3\2\2\2\u0cbe\u00e7\3\2\2\2\u0cbf\u0cc0\7\32"+
		"\2\2\u0cc0\u0cc2\7y\2\2\u0cc1\u0cc3\5\u00ba^\2\u0cc2\u0cc1\3\2\2\2\u0cc2"+
		"\u0cc3\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc5\5\u0256\u012c\2\u0cc5\u0ccf"+
		"\5\u00ecw\2\u0cc6\u0cc7\7\u0294\2\2\u0cc7\u0ccc\5\u00eav\2\u0cc8\u0cc9"+
		"\7\u0294\2\2\u0cc9\u0ccb\5\u00eav\2\u0cca\u0cc8\3\2\2\2\u0ccb\u0cce\3"+
		"\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0cd0\3\2\2\2\u0cce"+
		"\u0ccc\3\2\2\2\u0ccf\u0cc6\3\2\2\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd2\3\2"+
		"\2\2\u0cd1\u0cd3\5\u00f2z\2\u0cd2\u0cd1\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3"+
		"\u0cd5\3\2\2\2\u0cd4\u0cd6\5\u0204\u0103\2\u0cd5\u0cd4\3\2\2\2\u0cd5\u0cd6"+
		"\3\2\2\2\u0cd6\u0cd8\3\2\2\2\u0cd7\u0cd9\5\u00f4{\2\u0cd8\u0cd7\3\2\2"+
		"\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cdb\3\2\2\2\u0cda\u0cdc\5\u00b8]\2\u0cdb"+
		"\u0cda\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cde\3\2\2\2\u0cdd\u0cdf\5\u0208"+
		"\u0105\2\u0cde\u0cdd\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce1\3\2\2\2\u0ce0"+
		"\u0ce2\5\u00dan\2\u0ce1\u0ce0\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u00e9"+
		"\3\2\2\2\u0ce3\u0ce4\7\30\2\2\u0ce4\u0cff\5\u02c0\u0161\2\u0ce5\u0ce6"+
		"\7k\2\2\u0ce6\u0ce7\7\u015f\2\2\u0ce7\u0ce9\5\u00c6d\2\u0ce8\u0cea\5\u02cc"+
		"\u0167\2\u0ce9\u0ce8\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0d00\3\2\2\2\u0ceb"+
		"\u0cec\7\63\2\2\u0cec\u0ced\7\u015f\2\2\u0ced\u0cee\5\u00c6d\2\u0cee\u0cef"+
		"\7m\2\2\u0cef\u0cf1\5\u0256\u012c\2\u0cf0\u0cf2\5\u00c6d\2\u0cf1\u0cf0"+
		"\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0d00\3\2\2\2\u0cf3\u0cf4\7\u008c\2"+
		"\2\u0cf4\u0cf6\5\u00c6d\2\u0cf5\u0cf7\5\u02cc\u0167\2\u0cf6\u0cf5\3\2"+
		"\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0d00\3\2\2\2\u0cf8\u0cf9\7\25\2\2\u0cf9"+
		"\u0cfa\7\u0299\2\2\u0cfa\u0cfb\5\u0228\u0115\2\u0cfb\u0cfd\7\u029a\2\2"+
		"\u0cfc\u0cfe\5\u02cc\u0167\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe"+
		"\u0d00\3\2\2\2\u0cff\u0ce5\3\2\2\2\u0cff\u0ceb\3\2\2\2\u0cff\u0cf3\3\2"+
		"\2\2\u0cff\u0cf8\3\2\2\2\u0d00\u00eb\3\2\2\2\u0d01\u0d0a\7\u0299\2\2\u0d02"+
		"\u0d07\5\u00eex\2\u0d03\u0d04\7\u0294\2\2\u0d04\u0d06\5\u00eex\2\u0d05"+
		"\u0d03\3\2\2\2\u0d06\u0d09\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d07\u0d08\3\2"+
		"\2\2\u0d08\u0d0b\3\2\2\2\u0d09\u0d07\3\2\2\2\u0d0a\u0d02\3\2\2\2\u0d0a"+
		"\u0d0b\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d0d\7\u029a\2\2\u0d0d\u00ed"+
		"\3\2\2\2\u0d0e\u0d10\5\u02a8\u0155\2\u0d0f\u0d11\5\u02e8\u0175\2\u0d10"+
		"\u0d0f\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d15\3\2\2\2\u0d12\u0d14\5\u00f0"+
		"y\2\u0d13\u0d12\3\2\2\2\u0d14\u0d17\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15"+
		"\u0d16\3\2\2\2\u0d16\u0d19\3\2\2\2\u0d17\u0d15\3\2\2\2\u0d18\u0d1a\5\u020a"+
		"\u0106\2\u0d19\u0d18\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1c\3\2\2\2\u0d1b"+
		"\u0d1d\5\u00e2r\2\u0d1c\u0d1b\3\2\2\2\u0d1c\u0d1d\3\2\2\2\u0d1d\u00ef"+
		"\3\2\2\2\u0d1e\u0d2a\t\17\2\2\u0d1f\u0d20\7\u0299\2\2\u0d20\u0d25\5\u02c8"+
		"\u0165\2\u0d21\u0d22\7\u0294\2\2\u0d22\u0d24\5\u02c8\u0165\2\u0d23\u0d21"+
		"\3\2\2\2\u0d24\u0d27\3\2\2\2\u0d25\u0d23\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26"+
		"\u0d28\3\2\2\2\u0d27\u0d25\3\2\2\2\u0d28\u0d29\7\u029a\2\2\u0d29\u0d2b"+
		"\3\2\2\2\u0d2a\u0d1f\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d53\3\2\2\2\u0d2c"+
		"\u0d2d\7\30\2\2\u0d2d\u0d53\5\u02c0\u0161\2\u0d2e\u0d2f\7\25\2\2\u0d2f"+
		"\u0d30\7\u0299\2\2\u0d30\u0d31\5\u0228\u0115\2\u0d31\u0d33\7\u029a\2\2"+
		"\u0d32\u0d34\5\u02cc\u0167\2\u0d33\u0d32\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34"+
		"\u0d53\3\2\2\2\u0d35\u0d36\7&\2\2\u0d36\u0d37\7\u008e\2\2\u0d37\u0d3f"+
		"\5\u0228\u0115\2\u0d38\u0d39\7\u020a\2\2\u0d39\u0d3a\7\u008e\2\2\u0d3a"+
		"\u0d3f\5\u0228\u0115\2\u0d3b\u0d3c\7&\2\2\u0d3c\u0d3d\7\u008e\2\2\u0d3d"+
		"\u0d3f\5\u0228\u0115\2\u0d3e\u0d35\3\2\2\2\u0d3e\u0d38\3\2\2\2\u0d3e\u0d3b"+
		"\3\2\2\2\u0d3f\u0d53\3\2\2\2\u0d40\u0d53\5\u02ce\u0168\2\u0d41\u0d42\7"+
		"k\2\2\u0d42\u0d44\7\u015f\2\2\u0d43\u0d45\5\u02cc\u0167\2\u0d44\u0d43"+
		"\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0d4b\3\2\2\2\u0d46\u0d47\7m\2\2\u0d47"+
		"\u0d48\5\u0256\u012c\2\u0d48\u0d49\5\u00c6d\2\u0d49\u0d4b\3\2\2\2\u0d4a"+
		"\u0d41\3\2\2\2\u0d4a\u0d46\3\2\2\2\u0d4b\u0d53\3\2\2\2\u0d4c\u0d4e\7\u008c"+
		"\2\2\u0d4d\u0d4f\5\u02cc\u0167\2\u0d4e\u0d4d\3\2\2\2\u0d4e\u0d4f\3\2\2"+
		"\2\u0d4f\u0d53\3\2\2\2\u0d50\u0d51\7&\2\2\u0d51\u0d53\5\u0228\u0115\2"+
		"\u0d52\u0d1e\3\2\2\2\u0d52\u0d2c\3\2\2\2\u0d52\u0d2e\3\2\2\2\u0d52\u0d3e"+
		"\3\2\2\2\u0d52\u0d40\3\2\2\2\u0d52\u0d4a\3\2\2\2\u0d52\u0d4c\3\2\2\2\u0d52"+
		"\u0d50\3\2\2\2\u0d53\u00f1\3\2\2\2\u0d54\u0d55\t\20\2\2\u0d55\u00f3\3"+
		"\2\2\2\u0d56\u0d5b\7\u0247\2\2\u0d57\u0d58\7\u0194\2\2\u0d58\u0d5c\5\u02a4"+
		"\u0153\2\u0d59\u0d5a\7\3\2\2\u0d5a\u0d5c\7\u0195\2\2\u0d5b\u0d57\3\2\2"+
		"\2\u0d5b\u0d59\3\2\2\2\u0d5c\u0d71\3\2\2\2\u0d5d\u0d5e\7\u0203\2\2\u0d5e"+
		"\u0d5f\7\u00bc\2\2\u0d5f\u0d6e\5\u0228\u0115\2\u0d60\u0d61\7\3\2\2\u0d61"+
		"\u0d63\7\u0195\2\2\u0d62\u0d64\5\u01ea\u00f6\2\u0d63\u0d62\3\2\2\2\u0d63"+
		"\u0d64\3\2\2\2\u0d64\u0d6f\3\2\2\2\u0d65\u0d66\7\u0195\2\2\u0d66\u0d6b"+
		"\5\u02a4\u0153\2\u0d67\u0d68\7\u0294\2\2\u0d68\u0d6a\5\u02a4\u0153\2\u0d69"+
		"\u0d67\3\2\2\2\u0d6a\u0d6d\3\2\2\2\u0d6b\u0d69\3\2\2\2\u0d6b\u0d6c\3\2"+
		"\2\2\u0d6c\u0d6f\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6e\u0d60\3\2\2\2\u0d6e"+
		"\u0d65\3\2\2\2\u0d6f\u0d71\3\2\2\2\u0d70\u0d56\3\2\2\2\u0d70\u0d5d\3\2"+
		"\2\2\u0d71\u00f5\3\2\2\2\u0d72\u0d75\5\u00f8}\2\u0d73\u0d75\5\u00fa~\2"+
		"\u0d74\u0d72\3\2\2\2\u0d74\u0d73\3\2\2\2\u0d75\u00f7\3\2\2\2\u0d76\u0d78"+
		"\7\32\2\2\u0d77\u0d79\t\21\2\2\u0d78\u0d77\3\2\2\2\u0d78\u0d79\3\2\2\2"+
		"\u0d79\u0d7a\3\2\2\2\u0d7a\u0d7b\t\f\2\2\u0d7b\u0d7d\7y\2\2\u0d7c\u0d7e"+
		"\5\u00ba^\2\u0d7d\u0d7c\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d7f\3\2\2"+
		"\2\u0d7f\u0d80\5\u0256\u012c\2\u0d80\u0d82\5\u00ecw\2\u0d81\u0d83\5\u00ea"+
		"v\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d88\3\2\2\2\u0d84"+
		"\u0d85\7_\2\2\u0d85\u0d86\7\u00d1\2\2\u0d86\u0d87\t\22\2\2\u0d87\u0d89"+
		"\7\u01f6\2\2\u0d88\u0d84\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8b\3\2\2"+
		"\2\u0d8a\u0d8c\5\u00f2z\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c"+
		"\u0d8f\3\2\2\2\u0d8d\u0d8e\7\u0191\2\2\u0d8e\u0d90\7\u01d1\2\2\u0d8f\u0d8d"+
		"\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d93\5\u0204\u0103"+
		"\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d95\3\2\2\2\u0d94\u0d96"+
		"\5\u00f4{\2\u0d95\u0d94\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d98\3\2\2"+
		"\2\u0d97\u0d99\5\u00b8]\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9b\3\2\2\2\u0d9a\u0d9c\5\u00dan\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c"+
		"\3\2\2\2\u0d9c\u00f9\3\2\2\2\u0d9d\u0d9e\7\32\2\2\u0d9e\u0d9f\t\f\2\2"+
		"\u0d9f\u0da1\7y\2\2\u0da0\u0da2\5\u00ba^\2\u0da1\u0da0\3\2\2\2\u0da1\u0da2"+
		"\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da5\5\u0256\u012c\2\u0da4\u0da6\5"+
		"\u00dep\2\u0da5\u0da4\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0dab\3\2\2\2"+
		"\u0da7\u0da8\7_\2\2\u0da8\u0da9\7\u00d1\2\2\u0da9\u0daa\t\22\2\2\u0daa"+
		"\u0dac\7\u01f6\2\2\u0dab\u0da7\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac\u0dae"+
		"\3\2\2\2\u0dad\u0daf\5\u00f2z\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf\3\2\2"+
		"\2\u0daf\u0db0\3\2\2\2\u0db0\u0db2\7\7\2\2\u0db1\u0db3\5\u0250\u0129\2"+
		"\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db5\3\2\2\2\u0db4\u0db6"+
		"\5\u01b0\u00d9\2\u0db5\u0db4\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u0db7\3"+
		"\2\2\2\u0db7\u0db9\5\u01e8\u00f5\2\u0db8\u0dba\5\u00fc\177\2\u0db9\u0db8"+
		"\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u00fb\3\2\2\2\u0dbb\u0dbc\7+\2\2\u0dbc"+
		"\u0dbd\7\u00bc\2\2\u0dbd\u0dc2\5\u00fe\u0080\2\u0dbe\u0dbf\7\u0294\2\2"+
		"\u0dbf\u0dc1\5\u00fe\u0080\2\u0dc0\u0dbe\3\2\2\2\u0dc1\u0dc4\3\2\2\2\u0dc2"+
		"\u0dc0\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u00fd\3\2\2\2\u0dc4\u0dc2\3\2"+
		"\2\2\u0dc5\u0dc7\5\u0254\u012b\2\u0dc6\u0dc8\5\u00e2r\2\u0dc7\u0dc6\3"+
		"\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dca\3\2\2\2\u0dc9\u0dcb\5\u020a\u0106"+
		"\2\u0dca\u0dc9\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u00ff\3\2\2\2\u0dcc\u0dcd"+
		"\7\32\2\2\u0dcd\u0dce\7z\2\2\u0dce\u0dcf\7\u0154\2\2\u0dcf\u0dd0\5\u026e"+
		"\u0138\2\u0dd0\u0dd1\7_\2\2\u0dd1\u0dd2\5\u0256\u012c\2\u0dd2\u0dd3\7"+
		"\u0299\2\2\u0dd3\u0dd4\5\u02c6\u0164\2\u0dd4\u0dd5\7\u0294\2\2\u0dd5\u0dd8"+
		"\5\u02e8\u0175\2\u0dd6\u0dd7\7\u0294\2\2\u0dd7\u0dd9\5\u00c6d\2\u0dd8"+
		"\u0dd6\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0de4\7\u029a"+
		"\2\2\u0ddb\u0de2\7\u021f\2\2\u0ddc\u0ddd\5\u02c6\u0164\2\u0ddd\u0dde\7"+
		"\u0299\2\2\u0dde\u0ddf\5\u02e8\u0175\2\u0ddf\u0de0\7\u029a\2\2\u0de0\u0de3"+
		"\3\2\2\2\u0de1\u0de3\7V\2\2\u0de2\u0ddc\3\2\2\2\u0de2\u0de1\3\2\2\2\u0de3"+
		"\u0de5\3\2\2\2\u0de4\u0ddb\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0dec\3\2"+
		"\2\2\u0de6\u0de7\7\u0233\2\2\u0de7\u0de8\5\u02c6\u0164\2\u0de8\u0de9\7"+
		"\u0299\2\2\u0de9\u0dea\5\u02e8\u0175\2\u0dea\u0deb\7\u029a\2\2\u0deb\u0ded"+
		"\3\2\2\2\u0dec\u0de6\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded\u0101\3\2\2\2\u0dee"+
		"\u0def\7\32\2\2\u0def\u0df0\7\u008d\2\2\u0df0\u0df4\5\u02b6\u015c\2\u0df1"+
		"\u0df3\5> \2\u0df2\u0df1\3\2\2\2\u0df3\u0df6\3\2\2\2\u0df4\u0df2\3\2\2"+
		"\2\u0df4\u0df5\3\2\2\2\u0df5\u0103\3\2\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0dfa"+
		"\7\32\2\2\u0df8\u0df9\7a\2\2\u0df9\u0dfb\7\u01e8\2\2\u0dfa\u0df8\3\2\2"+
		"\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfd\7\u0253\2\2\u0dfd"+
		"\u0dff\5\u0258\u012d\2\u0dfe\u0e00\5\u00c6d\2\u0dff\u0dfe\3\2\2\2\u0dff"+
		"\u0e00\3\2\2\2\u0e00\u0e02\3\2\2\2\u0e01\u0e03\5\u00dan\2\u0e02\u0e01"+
		"\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04\u0e05\7\7\2\2\u0e05"+
		"\u0e07\5\u01b2\u00da\2\u0e06\u0e08\5\u0242\u0122\2\u0e07\u0e06\3\2\2\2"+
		"\u0e07\u0e08\3\2\2\2\u0e08\u0105\3\2\2\2\u0e09\u0e0b\7\u00f1\2\2\u0e0a"+
		"\u0e0c\5\u0250\u0129\2\u0e0b\u0e0a\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e0d"+
		"\3\2\2\2\u0e0d\u0e0e\7\64\2\2\u0e0e\u0e10\5\u0256\u012c\2\u0e0f\u0e11"+
		"\5\u0202\u0102\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0107\3"+
		"\2\2\2\u0e12\u0e19\5\u010a\u0086\2\u0e13\u0e19\5\u010a\u0086\2\u0e14\u0e19"+
		"\5\u010e\u0088\2\u0e15\u0e19\5\u0110\u0089\2\u0e16\u0e19\5\u0112\u008a"+
		"\2\u0e17\u0e19\5\u0114\u008b\2\u0e18\u0e12\3\2\2\2\u0e18\u0e13\3\2\2\2"+
		"\u0e18\u0e14\3\2\2\2\u0e18\u0e15\3\2\2\2\u0e18\u0e16\3\2\2\2\u0e18\u0e17"+
		"\3\2\2\2\u0e19\u0109\3\2\2\2\u0e1a\u0e1b\7\u009e\2\2\u0e1b\u0e1c\7\u00fb"+
		"\2\2\u0e1c\u0e1d\7\u01d4\2\2\u0e1d\u0e1e\5\u02c6\u0164\2\u0e1e\u010b\3"+
		"\2\2\2\u0e1f\u0e20\7\32\2\2\u0e20\u0e21\7\u00fb\2\2\u0e21\u0e22\7\u01d4"+
		"\2\2\u0e22\u0e23\t\23\2\2\u0e23\u0e26\5\u02c6\u0164\2\u0e24\u0e25\7\u00d0"+
		"\2\2\u0e25\u0e27\5\u02aa\u0156\2\u0e26\u0e24\3\2\2\2\u0e26\u0e27\3\2\2"+
		"\2\u0e27\u0e28\3\2\2\2\u0e28\u0e29\5\4\3\2\u0e29\u010d\3\2\2\2\u0e2a\u0e2b"+
		"\7\u00e9\2\2\u0e2b\u0e2c\7\u00fb\2\2\u0e2c\u0e2f\7\u01d4\2\2\u0e2d\u0e30"+
		"\5\u02c6\u0164\2\u0e2e\u0e30\5\4\3\2\u0e2f\u0e2d\3\2\2\2\u0e2f\u0e2e\3"+
		"\2\2\2\u0e30\u010f\3\2\2\2\u0e31\u0e32\7\u0105\2\2\u0e32\u0e33\7\u00fb"+
		"\2\2\u0e33\u0e34\7\u01d4\2\2\u0e34\u0e35\5\u02c6\u0164\2\u0e35\u0111\3"+
		"\2\2\2\u0e36\u0e37\7\u0132\2\2\u0e37\u0e38\7\u00fb\2\2\u0e38\u0e39\7\u01d4"+
		"\2\2\u0e39\u0e3a\5\4\3\2\u0e3a\u0113\3\2\2\2\u0e3b\u0e3c\7\u01fb\2\2\u0e3c"+
		"\u0e3d\7\u01d4\2\2\u0e3d\u0e3e\5\4\3\2\u0e3e\u0115\3\2\2\2\u0e3f\u0e40"+
		"\7\u0100\2\2\u0e40\u0e41\5\u0272\u013a\2\u0e41\u0117\3\2\2\2\u0e42\u0e43"+
		"\7\u0105\2\2\u0e43\u0e44\7\u009a\2\2\u0e44\u0e45\7\u01c3\2\2\u0e45\u0e46"+
		"\7_\2\2\u0e46\u0e47\5\u0256\u012c\2\u0e47\u0e4b\7\62\2\2\u0e48\u0e49\7"+
		"\27\2\2\u0e49\u0e4c\5\u02a8\u0155\2\u0e4a\u0e4c\7\u01f6\2\2\u0e4b\u0e48"+
		"\3\2\2\2\u0e4b\u0e4a\3\2\2\2\u0e4c\u0119\3\2\2\2\u0e4d\u0e4e\7\u0105\2"+
		"\2\u0e4e\u0e4f\7\u00a3\2\2\u0e4f\u0e51\7\u012f\2\2\u0e50\u0e52\5\u00ba"+
		"^\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53"+
		"\u0e54\5\u0266\u0134\2\u0e54\u0e55\5\u00b0Y\2\u0e55\u011b\3\2\2\2\u0e56"+
		"\u0e57\7\u0105\2\2\u0e57\u0e59\7\u00ae\2\2\u0e58\u0e5a\5\u00ba^\2\u0e59"+
		"\u0e58\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5d\5\u02be"+
		"\u0160\2\u0e5c\u0e5e\7\u00c3\2\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2"+
		"\2\u0e5e\u011d\3\2\2\2\u0e5f\u0e60\7\u0105\2\2\u0e60\u0e62\7\u028b\2\2"+
		"\u0e61\u0e63\5\u00ba^\2\u0e62\u0e61\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63"+
		"\u0e64\3\2\2\2\u0e64\u0e69\5\u028c\u0147\2\u0e65\u0e66\7\u0294\2\2\u0e66"+
		"\u0e68\5\u028c\u0147\2\u0e67\u0e65\3\2\2\2\u0e68\u0e6b\3\2\2\2\u0e69\u0e67"+
		"\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6d\3\2\2\2\u0e6b\u0e69\3\2\2\2\u0e6c"+
		"\u0e6e\7\u00c3\2\2\u0e6d\u0e6c\3\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u011f"+
		"\3\2\2\2\u0e6f\u0e70\7\u0105\2\2\u0e70\u0e71\7\u0120\2\2\u0e71\u0e73\7"+
		"\67\2\2\u0e72\u0e74\5\u00ba^\2\u0e73\u0e72\3\2\2\2\u0e73\u0e74\3\2\2\2"+
		"\u0e74\u0e75\3\2\2\2\u0e75\u0e76\5\u02bc\u015f\2\u0e76\u0121\3\2\2\2\u0e77"+
		"\u0e78\7\u0105\2\2\u0e78\u0e7a\7\u012f\2\2\u0e79\u0e7b\5\u00ba^\2\u0e7a"+
		"\u0e79\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e7d\5\u0266"+
		"\u0134\2\u0e7d\u0e7e\5\u00b0Y\2\u0e7e\u0123\3\2\2\2\u0e7f\u0e80\7\u0105"+
		"\2\2\u0e80\u0e81\7\u0215\2\2\u0e81\u0e82\5\u025a\u012e\2\u0e82\u0e83\7"+
		"\u0299\2\2\u0e83\u0e84\7\u029a\2\2\u0e84\u0125\3\2\2\2\u0e85\u0e86\7\u0105"+
		"\2\2\u0e86\u0e87\7\u0125\2\2\u0e87\u0e88\5\u025c\u012f\2\u0e88\u0e89\7"+
		"\u0299\2\2\u0e89\u0e8a\7\u029a\2\2\u0e8a\u0127\3\2\2\2\u0e8b\u0e8c\7\u0105"+
		"\2\2\u0e8c\u0e8d\7\u01ad\2\2\u0e8d\u0e8e\5\u025e\u0130\2\u0e8e\u0e8f\7"+
		"\u0299\2\2\u0e8f\u0e90\7\u029a\2\2\u0e90\u0129\3\2\2\2\u0e91\u0e92\7\u0105"+
		"\2\2\u0e92\u0e94\7\u0188\2\2\u0e93\u0e95\5\u00ba^\2\u0e94\u0e93\3\2\2"+
		"\2\u0e94\u0e95\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e9b\5\u026c\u0137\2"+
		"\u0e97\u0e98\7\u0294\2\2\u0e98\u0e9a\5\u026c\u0137\2\u0e99\u0e97\3\2\2"+
		"\2\u0e9a\u0e9d\3\2\2\2\u0e9b\u0e99\3\2\2\2\u0e9b\u0e9c\3\2\2\2\u0e9c\u012b"+
		"\3\2\2\2\u0e9d\u0e9b\3\2\2\2\u0e9e\u0e9f\7\u0105\2\2\u0e9f\u0ea1\7\u0168"+
		"\2\2\u0ea0\u0ea2\5\u00ba^\2\u0ea1\u0ea0\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2"+
		"\u0ea3\3\2\2\2\u0ea3\u0ea5\5\u0268\u0135\2\u0ea4\u0ea6\7\u00c3\2\2\u0ea5"+
		"\u0ea4\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u012d\3\2\2\2\u0ea7\u0ea8\7\u0105"+
		"\2\2\u0ea8\u0ea9\7\u016a\2\2\u0ea9\u0eaa\7\u0282\2\2\u0eaa\u0eab\7\67"+
		"\2\2\u0eab\u0ead\5\u0286\u0144\2\u0eac\u0eae\7\u00c3\2\2\u0ead\u0eac\3"+
		"\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u012f\3\2\2\2\u0eaf\u0eb0\7\u0105\2\2"+
		"\u0eb0\u0eb1\7\u016a\2\2\u0eb1\u0eb2\7\u018f\2\2\u0eb2\u0eb3\7\u0281\2"+
		"\2\u0eb3\u0eb5\5\u0288\u0145\2\u0eb4\u0eb6\7\u00c3\2\2\u0eb5\u0eb4\3\2"+
		"\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0131\3\2\2\2\u0eb7\u0eb8\7\u0105\2\2\u0eb8"+
		"\u0eb9\7\u018f\2\2\u0eb9\u0ebb\7\u015a\2\2\u0eba\u0ebc\5\u00ba^\2\u0ebb"+
		"\u0eba\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ebf\5\u02c2"+
		"\u0162\2\u0ebe\u0ec0\7\u00c3\2\2\u0ebf\u0ebe\3\2\2\2\u0ebf\u0ec0\3\2\2"+
		"\2\u0ec0\u0133\3\2\2\2\u0ec1\u0ec2\7\u0105\2\2\u0ec2\u0ec4\7\u0197\2\2"+
		"\u0ec3\u0ec5\5\u00ba^\2\u0ec4\u0ec3\3\2\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5"+
		"\u0ec6\3\2\2\2\u0ec6\u0ec7\5\u027c\u013f\2\u0ec7\u0135\3\2\2\2\u0ec8\u0ec9"+
		"\7\u0105\2\2\u0ec9\u0ecb\7\u01cf\2\2\u0eca\u0ecc\5\u00ba^\2\u0ecb\u0eca"+
		"\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd\u0ece\5\u0262\u0132"+
		"\2\u0ece\u0ecf\5\u00b0Y\2\u0ecf\u0137\3\2\2\2\u0ed0\u0ed1\7\u0105\2\2"+
		"\u0ed1\u0ed3\7\u01d0\2\2\u0ed2\u0ed4\5\u00ba^\2\u0ed3\u0ed2\3\2\2\2\u0ed3"+
		"\u0ed4\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0eda\5\u02c4\u0163\2\u0ed6\u0ed7"+
		"\7\u0294\2\2\u0ed7\u0ed9\5\u02c4\u0163\2\u0ed8\u0ed6\3\2\2\2\u0ed9\u0edc"+
		"\3\2\2\2\u0eda\u0ed8\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ede\3\2\2\2\u0edc"+
		"\u0eda\3\2\2\2\u0edd\u0edf\7\u00c3\2\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf"+
		"\3\2\2\2\u0edf\u0139\3\2\2\2\u0ee0\u0ee1\7\u0105\2\2\u0ee1\u0ee3\7\u01d1"+
		"\2\2\u0ee2\u0ee4\5\u00ba^\2\u0ee3\u0ee2\3\2\2\2\u0ee3\u0ee4\3\2\2\2\u0ee4"+
		"\u0ee5\3\2\2\2\u0ee5\u0eea\5\u0260\u0131\2\u0ee6\u0ee7\7\u0294\2\2\u0ee7"+
		"\u0ee9\5\u0260\u0131\2\u0ee8\u0ee6\3\2\2\2\u0ee9\u0eec\3\2\2\2\u0eea\u0ee8"+
		"\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0eee\3\2\2\2\u0eec\u0eea\3\2\2\2\u0eed"+
		"\u0eef\t\4\2\2\u0eee\u0eed\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef\u013b\3\2"+
		"\2\2\u0ef0\u0ef1\7\u0105\2\2\u0ef1\u0ef2\7\u01ea\2\2\u0ef2\u0ef3\7\u01c4"+
		"\2\2\u0ef3\u0ef4\5\u0292\u014a\2\u0ef4\u013d\3\2\2\2\u0ef5\u0ef6\7\u0105"+
		"\2\2\u0ef6\u0ef8\7\u01f2\2\2\u0ef7\u0ef9\5\u00ba^\2\u0ef8\u0ef7\3\2\2"+
		"\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa\u0eff\5\u028e\u0148\2"+
		"\u0efb\u0efc\7\u0294\2\2\u0efc\u0efe\5\u028e\u0148\2\u0efd\u0efb\3\2\2"+
		"\2\u0efe\u0f01\3\2\2\2\u0eff\u0efd\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f03"+
		"\3\2\2\2\u0f01\u0eff\3\2\2\2\u0f02\u0f04\7\u00c3\2\2\u0f03\u0f02\3\2\2"+
		"\2\u0f03\u0f04\3\2\2\2\u0f04\u013f\3\2\2\2\u0f05\u0f06\7\u0105\2\2\u0f06"+
		"\u0f07\7\u0269\2\2\u0f07\u0f08\7\u01f7\2\2\u0f08\u0f09\5\u028a\u0146\2"+
		"\u0f09\u0141\3\2\2\2\u0f0a\u0f0b\7\u0105\2\2\u0f0b\u0f0d\7p\2\2\u0f0c"+
		"\u0f0e\5\u00ba^\2\u0f0d\u0f0c\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f0f"+
		"\3\2\2\2\u0f0f\u0f14\5\u0270\u0139\2\u0f10\u0f11\7\u0294\2\2\u0f11\u0f13"+
		"\5\u0270\u0139\2\u0f12\u0f10\3\2\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f12\3"+
		"\2\2\2\u0f14\u0f15\3\2\2\2\u0f15\u0f18\3\2\2\2\u0f16\u0f14\3\2\2\2\u0f17"+
		"\u0f19\7\u00c3\2\2\u0f18\u0f17\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0143"+
		"\3\2\2\2\u0f1a\u0f1b\7\u0105\2\2\u0f1b\u0f1d\7\u0206\2\2\u0f1c\u0f1e\5"+
		"\u00ba^\2\u0f1d\u0f1c\3\2\2\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f1f\3\2\2\2"+
		"\u0f1f\u0f24\5\u026a\u0136\2\u0f20\u0f21\7\u0294\2\2\u0f21\u0f23\5\u026a"+
		"\u0136\2\u0f22\u0f20\3\2\2\2\u0f23\u0f26\3\2\2\2\u0f24\u0f22\3\2\2\2\u0f24"+
		"\u0f25\3\2\2\2\u0f25\u0f28\3\2\2\2\u0f26\u0f24\3\2\2\2\u0f27\u0f29\t\4"+
		"\2\2\u0f28\u0f27\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0145\3\2\2\2\u0f2a"+
		"\u0f2b\7\u0105\2\2\u0f2b\u0f2d\7\u0224\2\2\u0f2c\u0f2e\5\u00ba^\2\u0f2d"+
		"\u0f2c\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f31\5\u02b4"+
		"\u015b\2\u0f30\u0f32\7\u00c3\2\2\u0f31\u0f30\3\2\2\2\u0f31\u0f32\3\2\2"+
		"\2\u0f32\u0147\3\2\2\2\u0f33\u0f34\7\u0105\2\2\u0f34\u0f36\7y\2\2\u0f35"+
		"\u0f37\5\u00ba^\2\u0f36\u0f35\3\2\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0f38"+
		"\3\2\2\2\u0f38\u0f3d\5\u0256\u012c\2\u0f39\u0f3a\7\u0294\2\2\u0f3a\u0f3c"+
		"\5\u0256\u012c\2\u0f3b\u0f39\3\2\2\2\u0f3c\u0f3f\3\2\2\2\u0f3d\u0f3b\3"+
		"\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f41\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f40"+
		"\u0f42\7\u00c3\2\2\u0f41\u0f40\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0149"+
		"\3\2\2\2\u0f43\u0f44\7\u0105\2\2\u0f44\u0f45\7z\2\2\u0f45\u0f47\7\u0154"+
		"\2\2\u0f46\u0f48\5\u00ba^\2\u0f47\u0f46\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48"+
		"\u0f49\3\2\2\2\u0f49\u0f4a\5\u026e\u0138\2\u0f4a\u014b\3\2\2\2\u0f4b\u0f4c"+
		"\7\u0105\2\2\u0f4c\u0f4d\7\u0236\2\2\u0f4d\u0f4f\7\u012f\2\2\u0f4e\u0f50"+
		"\5\u00ba^\2\u0f4f\u0f4e\3\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50\u0f51\3\2\2"+
		"\2\u0f51\u0f52\5\u0266\u0134\2\u0f52\u0f53\5\u00b0Y\2\u0f53\u014d\3\2"+
		"\2\2\u0f54\u0f55\7\u0105\2\2\u0f55\u0f57\7\u008d\2\2\u0f56\u0f58\5\u00ba"+
		"^\2\u0f57\u0f56\3\2\2\2\u0f57\u0f58\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59"+
		"\u0f5e\5\u02b6\u015c\2\u0f5a\u0f5b\7\u0294\2\2\u0f5b\u0f5d\5\u02b6\u015c"+
		"\2\u0f5c\u0f5a\3\2\2\2\u0f5d\u0f60\3\2\2\2\u0f5e\u0f5c\3\2\2\2\u0f5e\u0f5f"+
		"\3\2\2\2\u0f5f\u0f62\3\2\2\2\u0f60\u0f5e\3\2\2\2\u0f61\u0f63\7\u00c3\2"+
		"\2\u0f62\u0f61\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u014f\3\2\2\2\u0f64\u0f65"+
		"\7\u0105\2\2\u0f65\u0f67\7\u0253\2\2\u0f66\u0f68\5\u00ba^\2\u0f67\u0f66"+
		"\3\2\2\2\u0f67\u0f68\3\2\2\2\u0f68\u0f69\3\2\2\2\u0f69\u0f6e\5\u0258\u012d"+
		"\2\u0f6a\u0f6b\7\u0294\2\2\u0f6b\u0f6d\5\u0258\u012d\2\u0f6c\u0f6a\3\2"+
		"\2\2\u0f6d\u0f70\3\2\2\2\u0f6e\u0f6c\3\2\2\2\u0f6e\u0f6f\3\2\2\2\u0f6f"+
		"\u0151\3\2\2\2\u0f70\u0f6e\3\2\2\2\u0f71\u0f73\7,\2\2\u0f72\u0f74\t\7"+
		"\2\2\u0f73\u0f72\3\2\2\2\u0f73\u0f74\3\2\2\2\u0f74\u0153\3\2\2\2\u0f75"+
		"\u0f77\7\u011c\2\2\u0f76\u0f78\5\u0250\u0129\2\u0f77\u0f76\3\2\2\2\u0f77"+
		"\u0f78\3\2\2\2\u0f78\u0f7a\3\2\2\2\u0f79\u0f7b\t\24\2\2\u0f7a\u0f79\3"+
		"\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7c\3\2\2\2\u0f7c\u0f7d\5\4\3\2\u0f7d"+
		"\u0155\3\2\2\2\u0f7e\u0f7f\7\u011d\2\2\u0f7f\u0f80\7\u0085\2\2\u0f80\u0f81"+
		"\7\u01ac\2\2\u0f81\u0f82\7\u0299\2\2\u0f82\u0f83\7\u0261\2\2\u0f83\u0f84"+
		"\7\u02a4\2\2\u0f84\u0f89\5h\65\2\u0f85\u0f86\7\u0294\2\2\u0f86\u0f87\7"+
		"\u0263\2\2\u0f87\u0f88\7\u02a4\2\2\u0f88\u0f8a\5\u02aa\u0156\2\u0f89\u0f85"+
		"\3\2\2\2\u0f89\u0f8a\3\2\2\2\u0f8a\u0f8f\3\2\2\2\u0f8b\u0f8c\7\u0294\2"+
		"\2\u0f8c\u0f8d\7\u0262\2\2\u0f8d\u0f8e\7\u02a4\2\2\u0f8e\u0f90\5\u02aa"+
		"\u0156\2\u0f8f\u0f8b\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90\u0f95\3\2\2\2\u0f91"+
		"\u0f92\7\u0294\2\2\u0f92\u0f93\7\u0264\2\2\u0f93\u0f94\7\u02a4\2\2\u0f94"+
		"\u0f96\5\u02aa\u0156\2\u0f95\u0f91\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f9b"+
		"\3\2\2\2\u0f97\u0f98\7\u0294\2\2\u0f98\u0f99\7\u0265\2\2\u0f99\u0f9a\7"+
		"\u02a4\2\2\u0f9a\u0f9c\5\u02aa\u0156\2\u0f9b\u0f97\3\2\2\2\u0f9b\u0f9c"+
		"\3\2\2\2\u0f9c\u0fa1\3\2\2\2\u0f9d\u0f9e\7\u0294\2\2\u0f9e\u0f9f\7\u0266"+
		"\2\2\u0f9f\u0fa0\7\u02a4\2\2\u0fa0\u0fa2\5\u02aa\u0156\2\u0fa1\u0f9d\3"+
		"\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fa3\3\2\2\2\u0fa3\u0fa5\7\u029a\2\2"+
		"\u0fa4\u0fa6\5\u01fa\u00fe\2\u0fa5\u0fa4\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6"+
		"\u0fa7\3\2\2\2\u0fa7\u0fa8\7\7\2\2\u0fa8\u0fa9\5\u01b2\u00da\2\u0fa9\u0157"+
		"\3\2\2\2\u0faa\u0fab\7\u011d\2\2\u0fab\u0fac\7\u0085\2\2\u0fac\u0fad\7"+
		"\u0252\2\2\u0fad\u0faf\5\u0256\u012c\2\u0fae\u0fb0\5\u00c6d\2\u0faf\u0fae"+
		"\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb8\3\2\2\2\u0fb1\u0fb2\7\7\2\2\u0fb2"+
		"\u0fb9\5\u01b2\u00da\2\u0fb3\u0fb4\7\64\2\2\u0fb4\u0fb6\5\u0256\u012c"+
		"\2\u0fb5\u0fb7\5\u00c6d\2\u0fb6\u0fb5\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7"+
		"\u0fb9\3\2\2\2\u0fb8\u0fb1\3\2\2\2\u0fb8\u0fb3\3\2\2\2\u0fb9\u0159\3\2"+
		"\2\2\u0fba\u0fc8\5\u0176\u00bc\2\u0fbb\u0fc8\5\u0174\u00bb\2\u0fbc\u0fc8"+
		"\5\u0172\u00ba\2\u0fbd\u0fc8\5\u0170\u00b9\2\u0fbe\u0fc8\5\u016e\u00b8"+
		"\2\u0fbf\u0fc8\5\u016c\u00b7\2\u0fc0\u0fc8\5\u0166\u00b4\2\u0fc1\u0fc8"+
		"\5\u0164\u00b3\2\u0fc2\u0fc8\5\u0162\u00b2\2\u0fc3\u0fc8\5\u0160\u00b1"+
		"\2\u0fc4\u0fc8\5\u015e\u00b0\2\u0fc5\u0fc8\5\u015c\u00af\2\u0fc6\u0fc8"+
		"\5\u016a\u00b6\2\u0fc7\u0fba\3\2\2\2\u0fc7\u0fbb\3\2\2\2\u0fc7\u0fbc\3"+
		"\2\2\2\u0fc7\u0fbd\3\2\2\2\u0fc7\u0fbe\3\2\2\2\u0fc7\u0fbf\3\2\2\2\u0fc7"+
		"\u0fc0\3\2\2\2\u0fc7\u0fc1\3\2\2\2\u0fc7\u0fc2\3\2\2\2\u0fc7\u0fc3\3\2"+
		"\2\2\u0fc7\u0fc4\3\2\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc6\3\2\2\2\u0fc8"+
		"\u015b\3\2\2\2\u0fc9\u0fcc\7\66\2\2\u0fca\u0fcd\7q\2\2\u0fcb\u0fcd\5\u00da"+
		"n\2\u0fcc\u0fca\3\2\2\2\u0fcc\u0fcb\3\2\2\2\u0fcd\u0fce\3\2\2\2\u0fce"+
		"\u0fcf\7_\2\2\u0fcf\u0fd4\5\u0256\u012c\2\u0fd0\u0fd1\7\u0294\2\2\u0fd1"+
		"\u0fd3\5\u0256\u012c\2\u0fd2\u0fd0\3\2\2\2\u0fd3\u0fd6\3\2\2\2\u0fd4\u0fd2"+
		"\3\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5\u0fd7\3\2\2\2\u0fd6\u0fd4\3\2\2\2\u0fd7"+
		"\u0fd8\7\u0085\2\2\u0fd8\u0fda\5\u017a\u00be\2\u0fd9\u0fdb\5\u0178\u00bd"+
		"\2\u0fda\u0fd9\3\2\2\2\u0fda\u0fdb\3\2\2\2\u0fdb\u015d\3\2\2\2\u0fdc\u0fe2"+
		"\7\66\2\2\u0fdd\u0fe3\7\u0119\2\2\u0fde\u0fe0\7\3\2\2\u0fdf\u0fe1\7\u01cd"+
		"\2\2\u0fe0\u0fdf\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2"+
		"\u0fdd\3\2\2\2\u0fe2\u0fde\3\2\2\2\u0fe3\u1008\3\2\2\2\u0fe4\u0fef\7_"+
		"\2\2\u0fe5\u0ff0\7\u012f\2\2\u0fe6\u0fe7\7\u00a3\2\2\u0fe7\u0ff0\7\u012f"+
		"\2\2\u0fe8\u0fe9\7\u00a7\2\2\u0fe9\u0ff0\7\u012f\2\2\u0fea\u0feb\7\u0236"+
		"\2\2\u0feb\u0ff0\7\u012f\2\2\u0fec\u0ff0\7\u0125\2\2\u0fed\u0ff0\7\u01ad"+
		"\2\2\u0fee\u0ff0\7\u0215\2\2\u0fef\u0fe5\3\2\2\2\u0fef\u0fe6\3\2\2\2\u0fef"+
		"\u0fe8\3\2\2\2\u0fef\u0fea\3\2\2\2\u0fef\u0fec\3\2\2\2\u0fef\u0fed\3\2"+
		"\2\2\u0fef\u0fee\3\2\2\2\u0ff0\u0ff1\3\2\2\2\u0ff1\u0ff2\5\u0266\u0134"+
		"\2\u0ff2\u0ff9\5\u00b0Y\2\u0ff3\u0ff4\7\u0294\2\2\u0ff4\u0ff5\5\u0266"+
		"\u0134\2\u0ff5\u0ff6\5\u00b0Y\2\u0ff6\u0ff8\3\2\2\2\u0ff7\u0ff3\3\2\2"+
		"\2\u0ff8\u0ffb\3\2\2\2\u0ff9\u0ff7\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u1009"+
		"\3\2\2\2\u0ffb\u0ff9\3\2\2\2\u0ffc\u0ffd\7\3\2\2\u0ffd\u0ffe\7\u0130\2"+
		"\2\u0ffe\u0fff\7;\2\2\u0fff\u1000\7p\2\2\u1000\u1005\5\u0270\u0139\2\u1001"+
		"\u1002\7\u0294\2\2\u1002\u1004\5\u0270\u0139\2\u1003\u1001\3\2\2\2\u1004"+
		"\u1007\3\2\2\2\u1005\u1003\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u1009\3\2"+
		"\2\2\u1007\u1005\3\2\2\2\u1008\u0fe4\3\2\2\2\u1008\u0ffc\3\2\2\2\u1009"+
		"\u100a\3\2\2\2\u100a\u100b\7\u0085\2\2\u100b\u100d\5\u017a\u00be\2\u100c"+
		"\u100e\5\u0178\u00bd\2\u100d\u100c\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u015f"+
		"\3\2\2\2\u100f\u101c\7\66\2\2\u1010\u1015\5\u0168\u00b5\2\u1011\u1012"+
		"\7\u0294\2\2\u1012\u1014\5\u0168\u00b5\2\u1013\u1011\3\2\2\2\u1014\u1017"+
		"\3\2\2\2\u1015\u1013\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u101d\3\2\2\2\u1017"+
		"\u1015\3\2\2\2\u1018\u101a\7\3\2\2\u1019\u101b\7\u01cd\2\2\u101a\u1019"+
		"\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u101d\3\2\2\2\u101c\u1010\3\2\2\2\u101c"+
		"\u1018\3\2\2\2\u101d\u101e\3\2\2\2\u101e\u1036\7_\2\2\u101f\u1021\7y\2"+
		"\2\u1020\u101f\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1027"+
		"\5\u0256\u012c\2\u1023\u1024\7\u0294\2\2\u1024\u1026\5\u0256\u012c\2\u1025"+
		"\u1023\3\2\2\2\u1026\u1029\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1028\3\2"+
		"\2\2\u1028\u1037\3\2\2\2\u1029\u1027\3\2\2\2\u102a\u102b\7\3\2\2\u102b"+
		"\u102c\7\u0227\2\2\u102c\u102d\7;\2\2\u102d\u102e\7p\2\2\u102e\u1033\5"+
		"\u0270\u0139\2\u102f\u1030\7\u0294\2\2\u1030\u1032\5\u0270\u0139\2\u1031"+
		"\u102f\3\2\2\2\u1032\u1035\3\2\2\2\u1033\u1031\3\2\2\2\u1033\u1034\3\2"+
		"\2\2\u1034\u1037\3\2\2\2\u1035\u1033\3\2\2\2\u1036\u1020\3\2\2\2\u1036"+
		"\u102a\3\2\2\2\u1037\u1038\3\2\2\2\u1038\u1039\7\u0085\2\2\u1039\u103b"+
		"\5\u017a\u00be\2\u103a\u103c\5\u0178\u00bd\2\u103b\u103a\3\2\2\2\u103b"+
		"\u103c\3\2\2\2\u103c\u0161\3\2\2\2\u103d\u104a\7\66\2\2\u103e\u1043\t"+
		"\25\2\2\u103f\u1040\7\u0294\2\2\u1040\u1042\t\25\2\2\u1041\u103f\3\2\2"+
		"\2\u1042\u1045\3\2\2\2\u1043\u1041\3\2\2\2\u1043\u1044\3\2\2\2\u1044\u104b"+
		"\3\2\2\2\u1045\u1043\3\2\2\2\u1046\u1048\7\3\2\2\u1047\u1049\7\u01cd\2"+
		"\2\u1048\u1047\3\2\2\2\u1048\u1049\3\2\2\2\u1049\u104b\3\2\2\2\u104a\u103e"+
		"\3\2\2\2\u104a\u1046\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104d\7_\2\2\u104d"+
		"\u104e\7\u016c\2\2\u104e\u104f\5h\65\2\u104f\u1050\7\u0085\2\2\u1050\u1052"+
		"\5\u017a\u00be\2\u1051\u1053\5\u0178\u00bd\2\u1052\u1051\3\2\2\2\u1052"+
		"\u1053\3\2\2\2\u1053\u0163\3\2\2\2\u1054\u105a\7\66\2\2\u1055\u105b\7"+
		"q\2\2\u1056\u1058\7\3\2\2\u1057\u1059\7\u01cd\2\2\u1058\u1057\3\2\2\2"+
		"\u1058\u1059\3\2\2\2\u1059\u105b\3\2\2\2\u105a\u1055\3\2\2\2\u105a\u1056"+
		"\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u1072\7_\2\2\u105d\u105e\7\u0206\2"+
		"\2\u105e\u1063\5\u026a\u0136\2\u105f\u1060\7\u0294\2\2\u1060\u1062\5\u026a"+
		"\u0136\2\u1061\u105f\3\2\2\2\u1062\u1065\3\2\2\2\u1063\u1061\3\2\2\2\u1063"+
		"\u1064\3\2\2\2\u1064\u1073\3\2\2\2\u1065\u1063\3\2\2\2\u1066\u1067\7\3"+
		"\2\2\u1067\u1068\7\u0207\2\2\u1068\u1069\7;\2\2\u1069\u106a\7p\2\2\u106a"+
		"\u106f\5\u0270\u0139\2\u106b\u106c\7\u0294\2\2\u106c\u106e\5\u0270\u0139"+
		"\2\u106d\u106b\3\2\2\2\u106e\u1071\3\2\2\2\u106f\u106d\3\2\2\2\u106f\u1070"+
		"\3\2\2\2\u1070\u1073\3\2\2\2\u1071\u106f\3\2\2\2\u1072\u105d\3\2\2\2\u1072"+
		"\u1066\3\2\2\2\u1073\u1074\3\2\2\2\u1074\u1075\7\u0085\2\2\u1075\u1077"+
		"\5\u017a\u00be\2\u1076\u1078\5\u0178\u00bd\2\u1077\u1076\3\2\2\2\u1077"+
		"\u1078\3\2\2\2\u1078\u0165\3\2\2\2\u1079\u1086\7\66\2\2\u107a\u107f\5"+
		"\u0168\u00b5\2\u107b\u107c\7\u0294\2\2\u107c\u107e\5\u0168\u00b5\2\u107d"+
		"\u107b\3\2\2\2\u107e\u1081\3\2\2\2\u107f\u107d\3\2\2\2\u107f\u1080\3\2"+
		"\2\2\u1080\u1087\3\2\2\2\u1081\u107f\3\2\2\2\u1082\u1084\7\3\2\2\u1083"+
		"\u1085\7\u01cd\2\2\u1084\u1083\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u1087"+
		"\3\2\2\2\u1086\u107a\3\2\2\2\u1086\u1082\3\2\2\2\u1087\u1088\3\2\2\2\u1088"+
		"\u1089\7_\2\2\u1089\u108a\7p\2\2\u108a\u108f\5\u0270\u0139\2\u108b\u108c"+
		"\7\u0294\2\2\u108c\u108e\5\u0270\u0139\2\u108d\u108b\3\2\2\2\u108e\u1091"+
		"\3\2\2\2\u108f\u108d\3\2\2\2\u108f\u1090\3\2\2\2\u1090\u1092\3\2\2\2\u1091"+
		"\u108f\3\2\2\2\u1092\u1093\7\u0085\2\2\u1093\u1095\5\u017a\u00be\2\u1094"+
		"\u1096\5\u0178\u00bd\2\u1095\u1094\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u0167"+
		"\3\2\2\2\u1097\u1098\t\26\2\2\u1098\u0169\3\2\2\2\u1099\u109a\7\66\2\2"+
		"\u109a\u109f\5\u028e\u0148\2\u109b\u109c\7\u0294\2\2\u109c\u109e\5\u028e"+
		"\u0148\2\u109d\u109b\3\2\2\2\u109e\u10a1\3\2\2\2\u109f\u109d\3\2\2\2\u109f"+
		"\u10a0\3\2\2\2\u10a0\u10a2\3\2\2\2\u10a1\u109f\3\2\2\2\u10a2\u10a3\7\u0085"+
		"\2\2\u10a3\u10a5\5\u017a\u00be\2\u10a4\u10a6\5\u0178\u00bd\2\u10a5\u10a4"+
		"\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6\u016b\3\2\2\2\u10a7\u10ad\7\66\2\2"+
		"\u10a8\u10ae\7\u0249\2\2\u10a9\u10ab\7\3\2\2\u10aa\u10ac\7\u01cd\2\2\u10ab"+
		"\u10aa\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10ae\3\2\2\2\u10ad\u10a8\3\2"+
		"\2\2\u10ad\u10a9\3\2\2\2\u10ae\u10af\3\2\2\2\u10af\u10b0\7_\2\2\u10b0"+
		"\u10b1\7\u01ea\2\2\u10b1\u10b2\7\u01c4\2\2\u10b2\u10b7\5\u0292\u014a\2"+
		"\u10b3\u10b4\7\u0294\2\2\u10b4\u10b6\5\u0292\u014a\2\u10b5\u10b3\3\2\2"+
		"\2\u10b6\u10b9\3\2\2\2\u10b7\u10b5\3\2\2\2\u10b7\u10b8\3\2\2\2\u10b8\u10ba"+
		"\3\2\2\2\u10b9\u10b7\3\2\2\2\u10ba\u10bb\7\u0085\2\2\u10bb\u10bd\5\u017a"+
		"\u00be\2\u10bc\u10be\5\u0178\u00bd\2\u10bd\u10bc\3\2\2\2\u10bd\u10be\3"+
		"\2\2\2\u10be\u016d\3\2\2\2\u10bf\u10c5\7\66\2\2\u10c0\u10c6\7\u0119\2"+
		"\2\u10c1\u10c3\7\3\2\2\u10c2\u10c4\7\u01cd\2\2\u10c3\u10c2\3\2\2\2\u10c3"+
		"\u10c4\3\2\2\2\u10c4\u10c6\3\2\2\2\u10c5\u10c0\3\2\2\2\u10c5\u10c1\3\2"+
		"\2\2\u10c6\u10c7\3\2\2\2\u10c7\u10c8\7_\2\2\u10c8\u10c9\7\u01cf\2\2\u10c9"+
		"\u10ca\5\u0262\u0132\2\u10ca\u10d1\5\u00b0Y\2\u10cb\u10cc\7\u0294\2\2"+
		"\u10cc\u10cd\5\u0262\u0132\2\u10cd\u10ce\5\u00b0Y\2\u10ce\u10d0\3\2\2"+
		"\2\u10cf\u10cb\3\2\2\2\u10d0\u10d3\3\2\2\2\u10d1\u10cf\3\2\2\2\u10d1\u10d2"+
		"\3\2\2\2\u10d2\u10d4\3\2\2\2\u10d3\u10d1\3\2\2\2\u10d4\u10d5\7\u0085\2"+
		"\2\u10d5\u10d7\5\u017a\u00be\2\u10d6\u10d8\5\u0178\u00bd\2\u10d7\u10d6"+
		"\3\2\2\2\u10d7\u10d8\3\2\2\2\u10d8\u016f\3\2\2\2\u10d9\u10df\7\66\2\2"+
		"\u10da\u10e0\7\u0249\2\2\u10db\u10dd\7\3\2\2\u10dc\u10de\7\u01cd\2\2\u10dd"+
		"\u10dc\3\2\2\2\u10dd\u10de\3\2\2\2\u10de\u10e0\3\2\2\2\u10df\u10da\3\2"+
		"\2\2\u10df\u10db\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u10e2\7_\2\2\u10e2"+
		"\u10e3\7\u0188\2\2\u10e3\u10e8\5\u026c\u0137\2\u10e4\u10e5\7\u0294\2\2"+
		"\u10e5\u10e7\5\u026c\u0137\2\u10e6\u10e4\3\2\2\2\u10e7\u10ea\3\2\2\2\u10e8"+
		"\u10e6\3\2\2\2\u10e8\u10e9\3\2\2\2\u10e9\u10eb\3\2\2\2\u10ea\u10e8\3\2"+
		"\2\2\u10eb\u10ec\7\u0085\2\2\u10ec\u10ee\5\u017a\u00be\2\u10ed\u10ef\5"+
		"\u0178\u00bd\2\u10ee\u10ed\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u0171\3\2"+
		"\2\2\u10f0\u10f6\7\66\2\2\u10f1\u10f7\7\u0249\2\2\u10f2\u10f4\7\3\2\2"+
		"\u10f3\u10f5\7\u01cd\2\2\u10f4\u10f3\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5"+
		"\u10f7\3\2\2\2\u10f6\u10f1\3\2\2\2\u10f6\u10f2\3\2\2\2\u10f7\u10f8\3\2"+
		"\2\2\u10f8\u10f9\7_\2\2\u10f9\u10fa\7\u0168\2\2\u10fa\u10ff\5\u0268\u0135"+
		"\2\u10fb\u10fc\7\u0294\2\2\u10fc\u10fe\5\u0268\u0135\2\u10fd\u10fb\3\2"+
		"\2\2\u10fe\u1101\3\2\2\2\u10ff\u10fd\3\2\2\2\u10ff\u1100\3\2\2\2\u1100"+
		"\u1102\3\2\2\2\u1101\u10ff\3\2\2\2\u1102\u1103\7\u0085\2\2\u1103\u1105"+
		"\5\u017a\u00be\2\u1104\u1106\5\u0178\u00bd\2\u1105\u1104\3\2\2\2\u1105"+
		"\u1106\3\2\2\2\u1106\u0173\3\2\2\2\u1107\u110e\7\66\2\2\u1108\u110f\7"+
		"\32\2\2\u1109\u110f\7\u022a\2\2\u110a\u110c\7\3\2\2\u110b\u110d\7\u01cd"+
		"\2\2\u110c\u110b\3\2\2\2\u110c\u110d\3\2\2\2\u110d\u110f\3\2\2\2\u110e"+
		"\u1108\3\2\2\2\u110e\u1109\3\2\2\2\u110e\u110a\3\2\2\2\u110f\u1110\3\2"+
		"\2\2\u1110\u1111\7_\2\2\u1111\u1112\7\u00e6\2\2\u1112\u1113\5\u0272\u013a"+
		"\2\u1113\u1114\7\u0085\2\2\u1114\u1116\5\u017a\u00be\2\u1115\u1117\5\u0178"+
		"\u00bd\2\u1116\u1115\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u0175\3\2\2\2\u1118"+
		"\u1119\7\66\2\2\u1119\u111a\7\u00ae\2\2\u111a\u111b\5\u02ba\u015e\2\u111b"+
		"\u111c\7\u0085\2\2\u111c\u111d\5\u017a\u00be\2\u111d\u0177\3\2\2\2\u111e"+
		"\u111f\7\u0096\2\2\u111f\u1120\7\66\2\2\u1120\u1121\7\u01a5\2\2\u1121"+
		"\u0179\3\2\2\2\u1122\u1127\5\u017c\u00bf\2\u1123\u1124\7\u0294\2\2\u1124"+
		"\u1126\5\u017c\u00bf\2\u1125\u1123\3\2\2\2\u1126\u1129\3\2\2\2\u1127\u1125"+
		"\3\2\2\2\u1127\u1128\3\2\2\2\u1128\u017b\3\2\2\2\u1129\u1127\3\2\2\2\u112a"+
		"\u112d\5\u02b6\u015c\2\u112b\u112d\7\u0260\2\2\u112c\u112a\3\2\2\2\u112c"+
		"\u112b\3\2\2\2\u112d\u017d\3\2\2\2\u112e\u112f\7\66\2\2\u112f\u1130\7"+
		"\u00ae\2\2\u1130\u1131\5\u02be\u0160\2\u1131\u1132\7\u0085\2\2\u1132\u1133"+
		"\5\u017a\u00be\2\u1133\u017f\3\2\2\2\u1134\u1136\7\u0158\2\2\u1135\u1137"+
		"\5\u0250\u0129\2\u1136\u1135\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u1138\3"+
		"\2\2\2\u1138\u1139\7D\2\2\u1139\u113b\5\u0256\u012c\2\u113a\u113c\5\u00c6"+
		"d\2\u113b\u113a\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u113d\3\2\2\2\u113d"+
		"\u113e\5\u0182\u00c2\2\u113e\u0181\3\2\2\2\u113f\u1140\7\u0299\2\2\u1140"+
		"\u1141\5\u0182\u00c2\2\u1141\u1142\7\u029a\2\2\u1142\u114f\3\2\2\2\u1143"+
		"\u1144\7&\2\2\u1144\u114d\7\u024f\2\2\u1145\u1146\7\u024f\2\2\u1146\u1147"+
		"\7\u0299\2\2\u1147\u1148\5\u0222\u0112\2\u1148\u1149\7\u029a\2\2\u1149"+
		"\u114d\3\2\2\2\u114a\u114d\5\u01ae\u00d8\2\u114b\u114d\5\u01b2\u00da";
	private static final String _serializedATNSegment2 =
		"\2\u114c\u1143\3\2\2\2\u114c\u1145\3\2\2\2\u114c\u114a\3\2\2\2\u114c\u114b"+
		"\3\2\2\2\u114d\u114f\3\2\2\2\u114e\u113f\3\2\2\2\u114e\u114c\3\2\2\2\u114f"+
		"\u0183\3\2\2\2\u1150\u1152\7\u017f\2\2\u1151\u1153\5\u0250\u0129\2\u1152"+
		"\u1151\3\2\2\2\u1152\u1153\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1155\7D"+
		"\2\2\u1155\u1157\5\u0256\u012c\2\u1156\u1158\5\u0242\u0122\2\u1157\u1156"+
		"\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u1159\3\2\2\2\u1159\u115c\7\u008e\2"+
		"\2\u115a\u115d\5\u0256\u012c\2\u115b\u115d\5\u01b2\u00da\2\u115c\u115a"+
		"\3\2\2\2\u115c\u115b\3\2\2\2\u115d\u115f\3\2\2\2\u115e\u1160\5\u0242\u0122"+
		"\2\u115f\u115e\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u1163"+
		"\5\u0232\u011a\2\u1162\u1164\5\u0186\u00c4\2\u1163\u1162\3\2\2\2\u1164"+
		"\u1165\3\2\2\2\u1165\u1163\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u0185\3\2"+
		"\2\2\u1167\u1168\7\u0093\2\2\u1168\u1169\7\u0173\2\2\u1169\u116a\7{\2"+
		"\2\u116a\u116d\7\u0248\2\2\u116b\u116c\7\4\2\2\u116c\u116e\5\u0214\u010b"+
		"\2\u116d\u116b\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u1170"+
		"\7{\2\2\u1170\u1171\7\u0248\2\2\u1171\u1172\7\u020a\2\2\u1172\u1173\5"+
		"\u02a8\u0155\2\u1173\u1174\7\u02a4\2\2\u1174\u1175\5\u02c8\u0165\2\u1175"+
		"\u117c\3\2\2\2\u1176\u1177\5\u02a8\u0155\2\u1177\u1178\7\u02a4\2\2\u1178"+
		"\u1179\5\u02c8\u0165\2\u1179\u117b\3\2\2\2\u117a\u1176\3\2\2\2\u117b\u117e"+
		"\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u1180\3\2\2\2\u117e"+
		"\u117c\3\2\2\2\u117f\u1181\5\u0202\u0102\2\u1180\u117f\3\2\2\2\u1180\u1181"+
		"\3\2\2\2\u1181\u1192\3\2\2\2\u1182\u1183\7\u0093\2\2\u1183\u1184\7W\2"+
		"\2\u1184\u1187\7\u0173\2\2\u1185\u1186\7\4\2\2\u1186\u1188\5\u0214\u010b"+
		"\2\u1187\u1185\3\2\2\2\u1187\u1188\3\2\2\2\u1188\u1189\3\2\2\2\u1189\u118a"+
		"\7{\2\2\u118a\u118b\7\u0158\2\2\u118b\u118c\5\u00c6d\2\u118c\u118d\7\u024f"+
		"\2\2\u118d\u118e\7\u0299\2\2\u118e\u118f\5\u024c\u0127\2\u118f\u1190\7"+
		"\u029a\2\2\u1190\u1192\3\2\2\2\u1191\u1167\3\2\2\2\u1191\u1182\3\2\2\2"+
		"\u1192\u0187\3\2\2\2\u1193\u1194\7\u01d0\2\2\u1194\u1195\5\4\3\2\u1195"+
		"\u0189\3\2\2\2\u1196\u1198\7\u01e3\2\2\u1197\u1199\7\u01fc\2\2\u1198\u1197"+
		"\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b\5\u02c6\u0164"+
		"\2\u119b\u018b\3\2\2\2\u119c\u11aa\5\u01a6\u00d4\2\u119d\u11aa\5\u01a4"+
		"\u00d3\2\u119e\u11aa\5\u01a2\u00d2\2\u119f\u11aa\5\u01a0\u00d1\2\u11a0"+
		"\u11aa\5\u019e\u00d0\2\u11a1\u11aa\5\u019c\u00cf\2\u11a2\u11aa\5\u019a"+
		"\u00ce\2\u11a3\u11aa\5\u0198\u00cd\2\u11a4\u11aa\5\u0196\u00cc\2\u11a5"+
		"\u11aa\5\u0194\u00cb\2\u11a6\u11aa\5\u0192\u00ca\2\u11a7\u11aa\5\u0190"+
		"\u00c9\2\u11a8\u11aa\5\u018e\u00c8\2\u11a9\u119c\3\2\2\2\u11a9\u119d\3"+
		"\2\2\2\u11a9\u119e\3\2\2\2\u11a9\u119f\3\2\2\2\u11a9\u11a0\3\2\2\2\u11a9"+
		"\u11a1\3\2\2\2\u11a9\u11a2\3\2\2\2\u11a9\u11a3\3\2\2\2\u11a9\u11a4\3\2"+
		"\2\2\u11a9\u11a5\3\2\2\2\u11a9\u11a6\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9"+
		"\u11a8\3\2\2\2\u11aa\u018d\3\2\2\2\u11ab\u11af\7\u01f0\2\2\u11ac\u11ad"+
		"\7\66\2\2\u11ad\u11ae\7\u01a5\2\2\u11ae\u11b0\7\62\2\2\u11af\u11ac\3\2"+
		"\2\2\u11af\u11b0\3\2\2\2\u11b0\u11b6\3\2\2\2\u11b1\u11b7\7q\2\2\u11b2"+
		"\u11b4\7\3\2\2\u11b3\u11b5\7\u01cd\2\2\u11b4\u11b3\3\2\2\2\u11b4\u11b5"+
		"\3\2\2\2\u11b5\u11b7\3\2\2\2\u11b6\u11b1\3\2\2\2\u11b6\u11b2\3\2\2\2\u11b7"+
		"\u11b8\3\2\2\2\u11b8\u11b9\7_\2\2\u11b9\u11be\5\u0256\u012c\2\u11ba\u11bb"+
		"\7\u0294\2\2\u11bb\u11bd\5\u0256\u012c\2\u11bc\u11ba\3\2\2\2\u11bd\u11c0"+
		"\3\2\2\2\u11be\u11bc\3\2\2\2\u11be\u11bf\3\2\2\2\u11bf\u11c1\3\2\2\2\u11c0"+
		"\u11be\3\2\2\2\u11c1\u11c2\7\64\2\2\u11c2\u11c4\5\u017a\u00be\2\u11c3"+
		"\u11c5\7\u00c3\2\2\u11c4\u11c3\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5\u018f"+
		"\3\2\2\2\u11c6\u11ca\7\u01f0\2\2\u11c7\u11c8\7\66\2\2\u11c8\u11c9\7\u01a5"+
		"\2\2\u11c9\u11cb\7\62\2\2\u11ca\u11c7\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb"+
		"\u11d1\3\2\2\2\u11cc\u11d2\7\u0119\2\2\u11cd\u11cf\7\3\2\2\u11ce\u11d0"+
		"\7\u01cd\2\2\u11cf\u11ce\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0\u11d2\3\2\2"+
		"\2\u11d1\u11cc\3\2\2\2\u11d1\u11cd\3\2\2\2\u11d2\u11f7\3\2\2\2\u11d3\u11de"+
		"\7_\2\2\u11d4\u11df\7\u012f\2\2\u11d5\u11d6\7\u00a3\2\2\u11d6\u11df\7"+
		"\u012f\2\2\u11d7\u11d8\7\u00a7\2\2\u11d8\u11df\7\u012f\2\2\u11d9\u11da"+
		"\7\u0236\2\2\u11da\u11df\7\u012f\2\2\u11db\u11df\7\u0125\2\2\u11dc\u11df"+
		"\7\u01ad\2\2\u11dd\u11df\7\u0215\2\2\u11de\u11d4\3\2\2\2\u11de\u11d5\3"+
		"\2\2\2\u11de\u11d7\3\2\2\2\u11de\u11d9\3\2\2\2\u11de\u11db\3\2\2\2\u11de"+
		"\u11dc\3\2\2\2\u11de\u11dd\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u11e1\5\u0266"+
		"\u0134\2\u11e1\u11e8\5\u00b0Y\2\u11e2\u11e3\7\u0294\2\2\u11e3\u11e4\5"+
		"\u0266\u0134\2\u11e4\u11e5\5\u00b0Y\2\u11e5\u11e7\3\2\2\2\u11e6\u11e2"+
		"\3\2\2\2\u11e7\u11ea\3\2\2\2\u11e8\u11e6\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9"+
		"\u11f8\3\2\2\2\u11ea\u11e8\3\2\2\2\u11eb\u11ec\7\3\2\2\u11ec\u11ed\7\u0130"+
		"\2\2\u11ed\u11ee\7;\2\2\u11ee\u11ef\7p\2\2\u11ef\u11f4\5\u0270\u0139\2"+
		"\u11f0\u11f1\7\u0294\2\2\u11f1\u11f3\5\u0270\u0139\2\u11f2\u11f0\3\2\2"+
		"\2\u11f3\u11f6\3\2\2\2\u11f4\u11f2\3\2\2\2\u11f4\u11f5\3\2\2\2\u11f5\u11f8"+
		"\3\2\2\2\u11f6\u11f4\3\2\2\2\u11f7\u11d3\3\2\2\2\u11f7\u11eb\3\2\2\2\u11f8"+
		"\u11f9\3\2\2\2\u11f9\u11fa\7\64\2\2\u11fa\u11fc\5\u017a\u00be\2\u11fb"+
		"\u11fd\7\u00c3\2\2\u11fc\u11fb\3\2\2\2\u11fc\u11fd\3\2\2\2\u11fd\u0191"+
		"\3\2\2\2\u11fe\u1202\7\u01f0\2\2\u11ff\u1200\7\66\2\2\u1200\u1201\7\u01a5"+
		"\2\2\u1201\u1203\7\62\2\2\u1202\u11ff\3\2\2\2\u1202\u1203\3\2\2\2\u1203"+
		"\u1210\3\2\2\2\u1204\u1209\t\27\2\2\u1205\u1206\7\u0294\2\2\u1206\u1208"+
		"\t\27\2\2\u1207\u1205\3\2\2\2\u1208\u120b\3\2\2\2\u1209\u1207\3\2\2\2"+
		"\u1209\u120a\3\2\2\2\u120a\u1211\3\2\2\2\u120b\u1209\3\2\2\2\u120c\u120e"+
		"\7\3\2\2\u120d\u120f\7\u01cd\2\2\u120e\u120d\3\2\2\2\u120e\u120f\3\2\2"+
		"\2\u120f\u1211\3\2\2\2\u1210\u1204\3\2\2\2\u1210\u120c\3\2\2\2\u1211\u1212"+
		"\3\2\2\2\u1212\u122a\7_\2\2\u1213\u1215\7y\2\2\u1214\u1213\3\2\2\2\u1214"+
		"\u1215\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u121b\5\u0256\u012c\2\u1217\u1218"+
		"\7\u0294\2\2\u1218\u121a\5\u0256\u012c\2\u1219\u1217\3\2\2\2\u121a\u121d"+
		"\3\2\2\2\u121b\u1219\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u122b\3\2\2\2\u121d"+
		"\u121b\3\2\2\2\u121e\u121f\7\3\2\2\u121f\u1220\7\u0227\2\2\u1220\u1221"+
		"\7;\2\2\u1221\u1222\7p\2\2\u1222\u1227\5\u0270\u0139\2\u1223\u1224\7\u0294"+
		"\2\2\u1224\u1226\5\u0270\u0139\2\u1225\u1223\3\2\2\2\u1226\u1229\3\2\2"+
		"\2\u1227\u1225\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u122b\3\2\2\2\u1229\u1227"+
		"\3\2\2\2\u122a\u1214\3\2\2\2\u122a\u121e\3\2\2\2\u122b\u122c\3\2\2\2\u122c"+
		"\u122d\7\64\2\2\u122d\u122f\5\u017a\u00be\2\u122e\u1230\7\u00c3\2\2\u122f"+
		"\u122e\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u0193\3\2\2\2\u1231\u1235\7\u01f0"+
		"\2\2\u1232\u1233\7\66\2\2\u1233\u1234\7\u01a5\2\2\u1234\u1236\7\62\2\2"+
		"\u1235\u1232\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u1243\3\2\2\2\u1237\u123c"+
		"\t\25\2\2\u1238\u1239\7\u0294\2\2\u1239\u123b\t\25\2\2\u123a\u1238\3\2"+
		"\2\2\u123b\u123e\3\2\2\2\u123c\u123a\3\2\2\2\u123c\u123d\3\2\2\2\u123d"+
		"\u1244\3\2\2\2\u123e\u123c\3\2\2\2\u123f\u1241\7\3\2\2\u1240\u1242\7\u01cd"+
		"\2\2\u1241\u1240\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u1244\3\2\2\2\u1243"+
		"\u1237\3\2\2\2\u1243\u123f\3\2\2\2\u1244\u1245\3\2\2\2\u1245\u1246\7_"+
		"\2\2\u1246\u1247\7\u016c\2\2\u1247\u1248\5h\65\2\u1248\u1249\7\64\2\2"+
		"\u1249\u124b\5\u017a\u00be\2\u124a\u124c\7\u00c3\2\2\u124b\u124a\3\2\2"+
		"\2\u124b\u124c\3\2\2\2\u124c\u0195\3\2\2\2\u124d\u1251\7\u01f0\2\2\u124e"+
		"\u124f\7\66\2\2\u124f\u1250\7\u01a5\2\2\u1250\u1252\7\62\2\2\u1251\u124e"+
		"\3\2\2\2\u1251\u1252\3\2\2\2\u1252\u1258\3\2\2\2\u1253\u1259\7q\2\2\u1254"+
		"\u1256\7\3\2\2\u1255\u1257\7\u01cd\2\2\u1256\u1255\3\2\2\2\u1256\u1257"+
		"\3\2\2\2\u1257\u1259\3\2\2\2\u1258\u1253\3\2\2\2\u1258\u1254\3\2\2\2\u1259"+
		"\u125a\3\2\2\2\u125a\u1270\7_\2\2\u125b\u125c\7\u0206\2\2\u125c\u1261"+
		"\5\u026a\u0136\2\u125d\u125e\7\u0294\2\2\u125e\u1260\5\u026a\u0136\2\u125f"+
		"\u125d\3\2\2\2\u1260\u1263\3\2\2\2\u1261\u125f\3\2\2\2\u1261\u1262\3\2"+
		"\2\2\u1262\u1271\3\2\2\2\u1263\u1261\3\2\2\2\u1264\u1265\7\3\2\2\u1265"+
		"\u1266\7\u0207\2\2\u1266\u1267\7;\2\2\u1267\u1268\7p\2\2\u1268\u126d\5"+
		"\u0270\u0139\2\u1269\u126a\7\u0294\2\2\u126a\u126c\5\u0270\u0139\2\u126b"+
		"\u1269\3\2\2\2\u126c\u126f\3\2\2\2\u126d\u126b\3\2\2\2\u126d\u126e\3\2"+
		"\2\2\u126e\u1271\3\2\2\2\u126f\u126d\3\2\2\2\u1270\u125b\3\2\2\2\u1270"+
		"\u1264\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u1273\7\64\2\2\u1273\u1275\5"+
		"\u017a\u00be\2\u1274\u1276\7\u00c3\2\2\u1275\u1274\3\2\2\2\u1275\u1276"+
		"\3\2\2\2\u1276\u0197\3\2\2\2\u1277\u127b\7\u01f0\2\2\u1278\u1279\7\66"+
		"\2\2\u1279\u127a\7\u01a5\2\2\u127a\u127c\7\62\2\2\u127b\u1278\3\2\2\2"+
		"\u127b\u127c\3\2\2\2\u127c\u1289\3\2\2\2\u127d\u1282\5\u0168\u00b5\2\u127e"+
		"\u127f\7\u0294\2\2\u127f\u1281\5\u0168\u00b5\2\u1280\u127e\3\2\2\2\u1281"+
		"\u1284\3\2\2\2\u1282\u1280\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u128a\3\2"+
		"\2\2\u1284\u1282\3\2\2\2\u1285\u1287\7\3\2\2\u1286\u1288\7\u01cd\2\2\u1287"+
		"\u1286\3\2\2\2\u1287\u1288\3\2\2\2\u1288\u128a\3\2\2\2\u1289\u127d\3\2"+
		"\2\2\u1289\u1285\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u128c\7_\2\2\u128c"+
		"\u128d\7p\2\2\u128d\u1292\5\u0270\u0139\2\u128e\u128f\7\u0294\2\2\u128f"+
		"\u1291\5\u0270\u0139\2\u1290\u128e\3\2\2\2\u1291\u1294\3\2\2\2\u1292\u1290"+
		"\3\2\2\2\u1292\u1293\3\2\2\2\u1293\u1295\3\2\2\2\u1294\u1292\3\2\2\2\u1295"+
		"\u1296\7\64\2\2\u1296\u1298\5\u017a\u00be\2\u1297\u1299\7\u00c3\2\2\u1298"+
		"\u1297\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u0199\3\2\2\2\u129a\u129e\7\u01f0"+
		"\2\2\u129b\u129c\7\u00a1\2\2\u129c\u129d\7\u01a5\2\2\u129d\u129f\7\62"+
		"\2\2\u129e\u129b\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0"+
		"\u12a5\5\u028e\u0148\2\u12a1\u12a2\7\u0294\2\2\u12a2\u12a4\5\u028e\u0148"+
		"\2\u12a3\u12a1\3\2\2\2\u12a4\u12a7\3\2\2\2\u12a5\u12a3\3\2\2\2\u12a5\u12a6"+
		"\3\2\2\2\u12a6\u12a8\3\2\2\2\u12a7\u12a5\3\2\2\2\u12a8\u12a9\7\64\2\2"+
		"\u12a9\u12ab\5\u017a\u00be\2\u12aa\u12ac\7\u00c3\2\2\u12ab\u12aa\3\2\2"+
		"\2\u12ab\u12ac\3\2\2\2\u12ac\u019b\3\2\2\2\u12ad\u12b1\7\u01f0\2\2\u12ae"+
		"\u12af\7\66\2\2\u12af\u12b0\7\u01a5\2\2\u12b0\u12b2\7\62\2\2\u12b1\u12ae"+
		"\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u12b8\3\2\2\2\u12b3\u12b9\7\u0249\2"+
		"\2\u12b4\u12b6\7\3\2\2\u12b5\u12b7\7\u01cd\2\2\u12b6\u12b5\3\2\2\2\u12b6"+
		"\u12b7\3\2\2\2\u12b7\u12b9\3\2\2\2\u12b8\u12b3\3\2\2\2\u12b8\u12b4\3\2"+
		"\2\2\u12b9\u12ba\3\2\2\2\u12ba\u12bb\7_\2\2\u12bb\u12bc\7\u01ea\2\2\u12bc"+
		"\u12bd\7\u01c4\2\2\u12bd\u12c2\5\u0292\u014a\2\u12be\u12bf\7\u0294\2\2"+
		"\u12bf\u12c1\5\u0292\u014a\2\u12c0\u12be\3\2\2\2\u12c1\u12c4\3\2\2\2\u12c2"+
		"\u12c0\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c5\3\2\2\2\u12c4\u12c2\3\2"+
		"\2\2\u12c5\u12c6\7\64\2\2\u12c6\u12c8\5\u017a\u00be\2\u12c7\u12c9\7\u00c3"+
		"\2\2\u12c8\u12c7\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u019d\3\2\2\2\u12ca"+
		"\u12ce\7\u01f0\2\2\u12cb\u12cc\7\66\2\2\u12cc\u12cd\7\u01a5\2\2\u12cd"+
		"\u12cf\7\62\2\2\u12ce\u12cb\3\2\2\2\u12ce\u12cf\3\2\2\2\u12cf\u12d5\3"+
		"\2\2\2\u12d0\u12d6\7\u0119\2\2\u12d1\u12d3\7\3\2\2\u12d2\u12d4\7\u01cd"+
		"\2\2\u12d3\u12d2\3\2\2\2\u12d3\u12d4\3\2\2\2\u12d4\u12d6\3\2\2\2\u12d5"+
		"\u12d0\3\2\2\2\u12d5\u12d1\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d8\7_"+
		"\2\2\u12d8\u12d9\7\u01cf\2\2\u12d9\u12da\5\u0262\u0132\2\u12da\u12e1\5"+
		"\u00b0Y\2\u12db\u12dc\7\u0294\2\2\u12dc\u12dd\5\u0262\u0132\2\u12dd\u12de"+
		"\5\u00b0Y\2\u12de\u12e0\3\2\2\2\u12df\u12db\3\2\2\2\u12e0\u12e3\3\2\2"+
		"\2\u12e1\u12df\3\2\2\2\u12e1\u12e2\3\2\2\2\u12e2\u12e4\3\2\2\2\u12e3\u12e1"+
		"\3\2\2\2\u12e4\u12e5\7\64\2\2\u12e5\u12e7\5\u017a\u00be\2\u12e6\u12e8"+
		"\7\u00c3\2\2\u12e7\u12e6\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u019f\3\2\2"+
		"\2\u12e9\u12ed\7\u01f0\2\2\u12ea\u12eb\7\66\2\2\u12eb\u12ec\7\u01a5\2"+
		"\2\u12ec\u12ee\7\62\2\2\u12ed\u12ea\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee"+
		"\u12f4\3\2\2\2\u12ef\u12f5\7\u0249\2\2\u12f0\u12f2\7\3\2\2\u12f1\u12f3"+
		"\7\u01cd\2\2\u12f2\u12f1\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3\u12f5\3\2\2"+
		"\2\u12f4\u12ef\3\2\2\2\u12f4\u12f0\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6\u12f7"+
		"\7_\2\2\u12f7\u12f8\7\u0188\2\2\u12f8\u12fd\5\u026c\u0137\2\u12f9\u12fa"+
		"\7\u0294\2\2\u12fa\u12fc\5\u026c\u0137\2\u12fb\u12f9\3\2\2\2\u12fc\u12ff"+
		"\3\2\2\2\u12fd\u12fb\3\2\2\2\u12fd\u12fe\3\2\2\2\u12fe\u1300\3\2\2\2\u12ff"+
		"\u12fd\3\2\2\2\u1300\u1301\7\64\2\2\u1301\u1303\5\u017a\u00be\2\u1302"+
		"\u1304\7\u00c3\2\2\u1303\u1302\3\2\2\2\u1303\u1304\3\2\2\2\u1304\u01a1"+
		"\3\2\2\2\u1305\u1309\7\u01f0\2\2\u1306\u1307\7\66\2\2\u1307\u1308\7\u01a5"+
		"\2\2\u1308\u130a\7\62\2\2\u1309\u1306\3\2\2\2\u1309\u130a\3\2\2\2\u130a"+
		"\u1310\3\2\2\2\u130b\u1311\7\u0249\2\2\u130c\u130e\7\3\2\2\u130d\u130f"+
		"\7\u01cd\2\2\u130e\u130d\3\2\2\2\u130e\u130f\3\2\2\2\u130f\u1311\3\2\2"+
		"\2\u1310\u130b\3\2\2\2\u1310\u130c\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u1313"+
		"\7_\2\2\u1313\u1314\7\u0168\2\2\u1314\u1319\5\u0268\u0135\2\u1315\u1316"+
		"\7\u0294\2\2\u1316\u1318\5\u0268\u0135\2\u1317\u1315\3\2\2\2\u1318\u131b"+
		"\3\2\2\2\u1319\u1317\3\2\2\2\u1319\u131a\3\2\2\2\u131a\u131c\3\2\2\2\u131b"+
		"\u1319\3\2\2\2\u131c\u131d\7\64\2\2\u131d\u131f\5\u017a\u00be\2\u131e"+
		"\u1320\7\u00c3\2\2\u131f\u131e\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u01a3"+
		"\3\2\2\2\u1321\u1325\7\u01f0\2\2\u1322\u1323\7\66\2\2\u1323\u1324\7\u01a5"+
		"\2\2\u1324\u1326\7\62\2\2\u1325\u1322\3\2\2\2\u1325\u1326\3\2\2\2\u1326"+
		"\u1333\3\2\2\2\u1327\u132c\t\30\2\2\u1328\u1329\7\u0294\2\2\u1329\u132b"+
		"\t\30\2\2\u132a\u1328\3\2\2\2\u132b\u132e\3\2\2\2\u132c\u132a\3\2\2\2"+
		"\u132c\u132d\3\2\2\2\u132d\u1334\3\2\2\2\u132e\u132c\3\2\2\2\u132f\u1331"+
		"\7\3\2\2\u1330\u1332\7\u01cd\2\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2"+
		"\2\u1332\u1334\3\2\2\2\u1333\u1327\3\2\2\2\u1333\u132f\3\2\2\2\u1334\u1335"+
		"\3\2\2\2\u1335\u1336\7_\2\2\u1336\u1337\7\u00e6\2\2\u1337\u1338\5\u0272"+
		"\u013a\2\u1338\u1339\7\64\2\2\u1339\u133b\5\u017a\u00be\2\u133a\u133c"+
		"\7\u00c3\2\2\u133b\u133a\3\2\2\2\u133b\u133c\3\2\2\2\u133c\u01a5\3\2\2"+
		"\2\u133d\u133e\7\u01f0\2\2\u133e\u133f\7\u00ae\2\2\u133f\u1340\5\u02be"+
		"\u0160\2\u1340\u1341\7\64\2\2\u1341\u1342\5\u017a\u00be\2\u1342\u01a7"+
		"\3\2\2\2\u1343\u1345\7\u01f4\2\2\u1344\u1346\t\7\2\2\u1345\u1344\3\2\2"+
		"\2\u1345\u1346\3\2\2\2\u1346\u01a9\3\2\2\2\u1347\u1348\7\u01f4\2\2\u1348"+
		"\u134a\7\u0085\2\2\u1349\u134b\7\u01fc\2\2\u134a\u1349\3\2\2\2\u134a\u134b"+
		"\3\2\2\2\u134b\u134c\3\2\2\2\u134c\u134d\5\u02c6\u0164\2\u134d\u01ab\3"+
		"\2\2\2\u134e\u134f\7\u01fc\2\2\u134f\u1350\5\u02c6\u0164\2\u1350\u01ad"+
		"\3\2\2\2\u1351\u1353\7\u0096\2\2\u1352\u1354\5\u0250\u0129\2\u1353\u1352"+
		"\3\2\2\2\u1353\u1354\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u1356\5\u0256\u012c"+
		"\2\u1356\u1357\7\7\2\2\u1357\u1358\7\u0299\2\2\u1358\u1359\5\u01b2\u00da"+
		"\2\u1359\u1363\7\u029a\2\2\u135a\u135b\7\u0294\2\2\u135b\u135c\5\u0256"+
		"\u012c\2\u135c\u135d\7\7\2\2\u135d\u135e\7\u0299\2\2\u135e\u135f\5\u01b2"+
		"\u00da\2\u135f\u1360\7\u029a\2\2\u1360\u1362\3\2\2\2\u1361\u135a\3\2\2"+
		"\2\u1362\u1365\3\2\2\2\u1363\u1361\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1366"+
		"\3\2\2\2\u1365\u1363\3\2\2\2\u1366\u1367\5\u01b2\u00da\2\u1367\u01af\3"+
		"\2\2\2\u1368\u1369\7\u00ad\2\2\u1369\u136c\7\u010f\2\2\u136a\u136d\7\u0165"+
		"\2\2\u136b\u136d\5\u02ae\u0158\2\u136c\u136a\3\2\2\2\u136c\u136b\3\2\2"+
		"\2\u136d\u1372\3\2\2\2\u136e\u136f\7\u00ad\2\2\u136f\u1370\7|\2\2\u1370"+
		"\u1372\5\u02aa\u0156\2\u1371\u1368\3\2\2\2\u1371\u136e\3\2\2\2\u1372\u01b1"+
		"\3\2\2\2\u1373\u1374\7\u0299\2\2\u1374\u1375\5\u01b2\u00da\2\u1375\u1376"+
		"\7\u029a\2\2\u1376\u1386\3\2\2\2\u1377\u1379\5\u01b0\u00d9\2\u1378\u1377"+
		"\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u1382\5\u01e8\u00f5"+
		"\2\u137b\u137d\7\u008b\2\2\u137c\u137e\t\31\2\2\u137d\u137c\3\2\2\2\u137d"+
		"\u137e\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1381\5\u01e8\u00f5\2\u1380\u137b"+
		"\3\2\2\2\u1381\u1384\3\2\2\2\u1382\u1380\3\2\2\2\u1382\u1383\3\2\2\2\u1383"+
		"\u1386\3\2\2\2\u1384\u1382\3\2\2\2\u1385\u1373\3\2\2\2\u1385\u1378\3\2"+
		"\2\2\u1386\u01b3\3\2\2\2\u1387\u1388\7\u020a\2\2\u1388\u1389\7\u0273\2"+
		"\2\u1389\u1396\7\u0085\2\2\u138a\u1397\7\u0274\2\2\u138b\u1397\7\u0278"+
		"\2\2\u138c\u138f\7\u0277\2\2\u138d\u138e\7\u0294\2\2\u138e\u1390\t\32"+
		"\2\2\u138f\u138d\3\2\2\2\u138f\u1390\3\2\2\2\u1390\u1397\3\2\2\2\u1391"+
		"\u1394\7\u0276\2\2\u1392\u1393\7\u0294\2\2\u1393\u1395\t\32\2\2\u1394"+
		"\u1392\3\2\2\2\u1394\u1395\3\2\2\2\u1395\u1397\3\2\2\2\u1396\u138a\3\2"+
		"\2\2\u1396\u138b\3\2\2\2\u1396\u138c\3\2\2\2\u1396\u1391\3\2\2\2\u1397"+
		"\u01b5\3\2\2\2\u1398\u1399\7\u020a\2\2\u1399\u139a\7\u026a\2\2\u139a\u139b"+
		"\7\u0085\2\2\u139b\u139c\t\33\2\2\u139c\u01b7\3\2\2\2\u139d\u139e\7\u020a"+
		"\2\2\u139e\u139f\7\u0270\2\2\u139f\u13a0\7\u0085\2\2\u13a0\u13a1\t\34"+
		"\2\2\u13a1\u01b9\3\2\2\2\u13a2\u13a3\7\u020a\2\2\u13a3\u13a4\7\u026d\2"+
		"\2\u13a4\u13a5\7\u0085\2\2\u13a5\u13a6\5\u02c8\u0165\2\u13a6\u01bb\3\2"+
		"\2\2\u13a7\u13a8\7\u020a\2\2\u13a8\u13be\7\u01f2\2\2\u13a9\u13ae\5\u028e"+
		"\u0148\2\u13aa\u13ab\7\u0294\2\2\u13ab\u13ad\5\u028e\u0148\2\u13ac\u13aa"+
		"\3\2\2\2\u13ad\u13b0\3\2\2\2\u13ae\u13ac\3\2\2\2\u13ae\u13af\3\2\2\2\u13af"+
		"\u13bf\3\2\2\2\u13b0\u13ae\3\2\2\2\u13b1\u13bf\7V\2\2\u13b2\u13bf\7\3"+
		"\2\2\u13b3\u13b4\7\3\2\2\u13b4\u13b5\7-\2\2\u13b5\u13ba\5\u028e\u0148"+
		"\2\u13b6\u13b7\7\u0294\2\2\u13b7\u13b9\5\u028e\u0148\2\u13b8\u13b6\3\2"+
		"\2\2\u13b9\u13bc\3\2\2\2\u13ba\u13b8\3\2\2\2\u13ba\u13bb\3\2\2\2\u13bb"+
		"\u13bf\3\2\2\2\u13bc\u13ba\3\2\2\2\u13bd\u13bf\7&\2\2\u13be\u13a9\3\2"+
		"\2\2\u13be\u13b1\3\2\2\2\u13be\u13b2\3\2\2\2\u13be\u13b3\3\2\2\2\u13be"+
		"\u13bd\3\2\2\2\u13bf\u01bd\3\2\2\2\u13c0\u13c1\7\u020a\2\2\u13c1\u13c2"+
		"\7\u01fe\2\2\u13c2\u13cc\t\35\2\2\u13c3\u13c8\5\u0294\u014b\2\u13c4\u13c5"+
		"\7\u0294\2\2\u13c5\u13c7\5\u0294\u014b\2\u13c6\u13c4\3\2\2\2\u13c7\u13ca"+
		"\3\2\2\2\u13c8\u13c6\3\2\2\2\u13c8\u13c9\3\2\2\2\u13c9\u13cd\3\2\2\2\u13ca"+
		"\u13c8\3\2\2\2\u13cb\u13cd\7&\2\2\u13cc\u13c3\3\2\2\2\u13cc\u13cb\3\2"+
		"\2\2\u13cd\u01bf\3\2\2\2\u13ce\u13cf\7\u020a\2\2\u13cf\u13d0\7\u0209\2"+
		"\2\u13d0\u13d1\7\u026c\2\2\u13d1\u13d2\7\u0085\2\2\u13d2\u13d3\t\33\2"+
		"\2\u13d3\u01c1\3\2\2\2\u13d4\u13d5\7\u020a\2\2\u13d5\u13d6\7\u0209\2\2"+
		"\u13d6\u13d7\7\u00c7\2\2\u13d7\u13d8\7\7\2\2\u13d8\u13e1\7\u0235\2\2\u13d9"+
		"\u13db\7\u0294\2\2\u13da\u13d9\3\2\2\2\u13da\u13db\3\2\2\2\u13db\u13dc"+
		"\3\2\2\2\u13dc\u13e2\5\u02e2\u0172\2\u13dd\u13df\7\u0294\2\2\u13de\u13dd"+
		"\3\2\2\2\u13de\u13df\3\2\2\2\u13df\u13e0\3\2\2\2\u13e0\u13e2\5\u02e4\u0173"+
		"\2\u13e1\u13da\3\2\2\2\u13e1\u13de\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3\u13e1"+
		"\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u01c3\3\2\2\2\u13e5\u13e6\7\u020a\2"+
		"\2\u13e6\u13e7\7\u0209\2\2\u13e7\u13ec\7\u0134\2\2\u13e8\u13ed\5\u02c8"+
		"\u0165\2\u13e9\u13ed\7V\2\2\u13ea\u13eb\7\u02a4\2\2\u13eb\u13ed\7&\2\2"+
		"\u13ec\u13e8\3\2\2\2\u13ec\u13e9\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ed\u01c5"+
		"\3\2\2\2\u13ee\u13ef\7\u020a\2\2\u13ef\u13f0\7\u0209\2\2\u13f0\u13f5\7"+
		"\u014b\2\2\u13f1\u13f6\5\u02c8\u0165\2\u13f2\u13f6\7V\2\2\u13f3\u13f4"+
		"\7\u02a4\2\2\u13f4\u13f6\7&\2\2\u13f5\u13f1\3\2\2\2\u13f5\u13f2\3\2\2"+
		"\2\u13f5\u13f3\3\2\2\2\u13f6\u01c7\3\2\2\2\u13f7\u13f8\7\u020a\2\2\u13f8"+
		"\u13f9\7\u0209\2\2\u13f9\u13fe\7\u017d\2\2\u13fa\u13ff\5\u02c8\u0165\2"+
		"\u13fb\u13ff\7V\2\2\u13fc\u13fd\7\u02a4\2\2\u13fd\u13ff\7&\2\2\u13fe\u13fa"+
		"\3\2\2\2\u13fe\u13fb\3\2\2\2\u13fe\u13fc\3\2\2\2\u13ff\u01c9\3\2\2\2\u1400"+
		"\u1401\7\u020a\2\2\u1401\u1402\7\u0209\2\2\u1402\u1403\7\u026e\2\2\u1403"+
		"\u1404\7\u0085\2\2\u1404\u1405\t\33\2\2\u1405\u01cb\3\2\2\2\u1406\u1407"+
		"\7\u020a\2\2\u1407\u1408\7\u0209\2\2\u1408\u1409\7\u026f\2\2\u1409\u140c"+
		"\7\u02a4\2\2\u140a\u140d\5\u02c8\u0165\2\u140b\u140d\7&\2\2\u140c\u140a"+
		"\3\2\2\2\u140c\u140b\3\2\2\2\u140d\u01cd\3\2\2\2\u140e\u140f\7\u020a\2"+
		"\2\u140f\u1410\7\u0209\2\2\u1410\u1415\7\u01f8\2\2\u1411\u1416\5\u02c8"+
		"\u0165\2\u1412\u1416\7V\2\2\u1413\u1414\7\u02a4\2\2\u1414\u1416\7&\2\2"+
		"\u1415\u1411\3\2\2\2\u1415\u1412\3\2\2\2\u1415\u1413\3\2\2\2\u1416\u01cf"+
		"\3\2\2\2\u1417\u1418\7\u020a\2\2\u1418\u1419\7\u0209\2\2\u1419\u141c\7"+
		"\u022d\2\2\u141a\u141d\5\u02c8\u0165\2\u141b\u141d\7V\2\2\u141c\u141a"+
		"\3\2\2\2\u141c\u141b\3\2\2\2\u141d\u01d1\3\2\2\2\u141e\u141f\7\u020a\2"+
		"\2\u141f\u1420\7\u026b\2\2\u1420\u1421\7\u0085\2\2\u1421\u1422\t\33\2"+
		"\2\u1422\u01d3\3\2\2\2\u1423\u1427\7\u020a\2\2\u1424\u1425\7|\2\2\u1425"+
		"\u1428\7\u025d\2\2\u1426\u1428\7\u0083\2\2\u1427\u1424\3\2\2\2\u1427\u1426"+
		"\3\2\2\2\u1428\u1429\3\2\2\2\u1429\u142b\7\u0085\2\2\u142a\u142c\7B\2"+
		"\2\u142b\u142a\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142d\3\2\2\2\u142d\u142e"+
		"\5\u02c8\u0165\2\u142e\u01d5\3\2\2\2\u142f\u1432\7\u020f\2\2\u1430\u1433"+
		"\7\3\2\2\u1431\u1433\5\u02a2\u0152\2\u1432\u1430\3\2\2\2\u1432\u1431\3"+
		"\2\2\2\u1433\u01d7\3\2\2\2\u1434\u1435\7\u020f\2\2\u1435\u1438\7\u00e0"+
		"\2\2\u1436\u1439\7\3\2\2\u1437\u1439\5\u029a\u014e\2\u1438\u1436\3\2\2"+
		"\2\u1438\u1437\3\2\2\2\u1439\u01d9\3\2\2\2\u143a\u143b\7\u020f\2\2\u143b"+
		"\u143c\7\u00e6\2\2\u143c\u143f\5\u0272\u013a\2\u143d\u1440\7\3\2\2\u143e"+
		"\u1440\5\u029a\u014e\2\u143f\u143d\3\2\2\2\u143f\u143e\3\2\2\2\u1440\u01db"+
		"\3\2\2\2\u1441\u1442\7\u020f\2\2\u1442\u1443\7\u0194\2\2\u1443\u1446\5"+
		"\u02a4\u0153\2\u1444\u1447\7\3\2\2\u1445\u1447\5\u029a\u014e\2\u1446\u1444"+
		"\3\2\2\2\u1446\u1445\3\2\2\2\u1447\u01dd\3\2\2\2\u1448\u1449\7\u020f\2"+
		"\2\u1449\u144e\7\u0209\2\2\u144a\u144f\7\3\2\2\u144b\u144c\7\u025e\2\2"+
		"\u144c\u144f\7\3\2\2\u144d\u144f\5\u029a\u014e\2\u144e\u144a\3\2\2\2\u144e"+
		"\u144b\3\2\2\2\u144e\u144d\3\2\2\2\u144f\u01df\3\2\2\2\u1450\u1451\7\u021a"+
		"\2\2\u1451\u1457\7\u0235\2\2\u1452\u1453\7\u015d\2\2\u1453\u1454\7\u0167"+
		"\2\2\u1454\u1455\5\u02e2\u0172\2\u1455\u1456\5\u02e4\u0173\2\u1456\u1458"+
		"\3\2\2\2\u1457\u1452\3\2\2\2\u1457\u1458\3\2\2\2\u1458\u01e1\3\2\2\2\u1459"+
		"\u145a\7\u0239\2\2\u145a\u145b\7y\2\2\u145b\u145c\5\u0256\u012c\2\u145c"+
		"\u01e3\3\2\2\2\u145d\u145f\7\u0248\2\2\u145e\u1460\5\u0250\u0129\2\u145f"+
		"\u145e\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1463\5\u0256"+
		"\u012c\2\u1462\u1464\5\u0242\u0122\2\u1463\u1462\3\2\2\2\u1463\u1464\3"+
		"\2\2\2\u1464\u1465\3\2\2\2\u1465\u1466\7\u020a\2\2\u1466\u1468\5\u0222"+
		"\u0112\2\u1467\u1469\5\u01f4\u00fb\2\u1468\u1467\3\2\2\2\u1468\u1469\3"+
		"\2\2\2\u1469\u146b\3\2\2\2\u146a\u146c\5\u0202\u0102\2\u146b\u146a\3\2"+
		"\2\2\u146b\u146c\3\2\2\2\u146c\u01e5\3\2\2\2\u146d\u146e\7\u0299\2\2\u146e"+
		"\u146f\5\u01e6\u00f4\2\u146f\u1470\7\u029a\2\2\u1470\u1475\3\2\2\2\u1471"+
		"\u1472\5\u01ee\u00f8\2\u1472\u1473\5\u01f4\u00fb\2\u1473\u1475\3\2\2\2"+
		"\u1474\u146d\3\2\2\2\u1474\u1471\3\2\2\2\u1475\u01e7\3\2\2\2\u1476\u1477"+
		"\7\u0299\2\2\u1477\u1478\5\u01e8\u00f5\2\u1478\u1479\7\u029a\2\2\u1479"+
		"\u14b5\3\2\2\2\u147a\u147c\5\u01ee\u00f8\2\u147b\u147d\5\u01f6\u00fc\2"+
		"\u147c\u147b\3\2\2\2\u147c\u147d\3\2\2\2\u147d\u147f\3\2\2\2\u147e\u1480"+
		"\5\u01f4\u00fb\2\u147f\u147e\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1482\3"+
		"\2\2\2\u1481\u1483\5\u0202\u0102\2\u1482\u1481\3\2\2\2\u1482\u1483\3\2"+
		"\2\2\u1483\u1485\3\2\2\2\u1484\u1486\5\u01f8\u00fd\2\u1485\u1484\3\2\2"+
		"\2\u1485\u1486\3\2\2\2\u1486\u1488\3\2\2\2\u1487\u1489\5\u01fe\u0100\2"+
		"\u1488\u1487\3\2\2\2\u1488\u1489\3\2\2\2\u1489\u148b\3\2\2\2\u148a\u148c"+
		"\5\u0200\u0101\2\u148b\u148a\3\2\2\2\u148b\u148c\3\2\2\2\u148c\u148e\3"+
		"\2\2\2\u148d\u148f\5\u0206\u0104\2\u148e\u148d\3\2\2\2\u148e\u148f\3\2"+
		"\2\2\u148f\u1494\3\2\2\2\u1490\u1492\7\u008b\2\2\u1491\u1493\t\31\2\2"+
		"\u1492\u1491\3\2\2\2\u1492\u1493\3\2\2\2\u1493\u1495\3\2\2\2\u1494\u1490"+
		"\3\2\2\2\u1494\u1495\3\2\2\2\u1495\u1497\3\2\2\2\u1496\u1498\5\u01f2\u00fa"+
		"\2\u1497\u1496\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u149a\3\2\2\2\u1499\u149b"+
		"\5\u01f0\u00f9\2\u149a\u1499\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u149d\3"+
		"\2\2\2\u149c\u149e\5\u0204\u0103\2\u149d\u149c\3\2\2\2\u149d\u149e\3\2"+
		"\2\2\u149e\u14a0\3\2\2\2\u149f\u14a1\5\u01ec\u00f7\2\u14a0\u149f\3\2\2"+
		"\2\u14a0\u14a1\3\2\2\2\u14a1\u14a3\3\2\2\2\u14a2\u14a4\5\u01ea\u00f6\2"+
		"\u14a3\u14a2\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14b2\3\2\2\2\u14a5\u14a6"+
		"\7\62\2\2\u14a6\u14b0\7\u0248\2\2\u14a7\u14a8\7\u019f\2\2\u14a8\u14ad"+
		"\5\u0256\u012c\2\u14a9\u14aa\7\u0294\2\2\u14aa\u14ac\5\u0256\u012c\2\u14ab"+
		"\u14a9\3\2\2\2\u14ac\u14af\3\2\2\2\u14ad\u14ab\3\2\2\2\u14ad\u14ae\3\2"+
		"\2\2\u14ae\u14b1\3\2\2\2\u14af\u14ad\3\2\2\2\u14b0\u14a7\3\2\2\2\u14b0"+
		"\u14b1\3\2\2\2\u14b1\u14b3\3\2\2\2\u14b2\u14a5\3\2\2\2\u14b2\u14b3\3\2"+
		"\2\2\u14b3\u14b5\3\2\2\2\u14b4\u1476\3\2\2\2\u14b4\u147a\3\2\2\2\u14b5"+
		"\u01e9\3\2\2\2\u14b6\u14b7\7]\2\2\u14b7\u14b8\5\u02b0\u0159\2\u14b8\u01eb"+
		"\3\2\2\2\u14b9\u14bc\7M\2\2\u14ba\u14bd\5\u02b0\u0159\2\u14bb\u14bd\7"+
		"\3\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bb\3\2\2\2\u14bd\u01ed\3\2\2\2\u14be"+
		"\u14c0\7q\2\2\u14bf\u14c1\5\u0250\u0129\2\u14c0\u14bf\3\2\2\2\u14c0\u14c1"+
		"\3\2\2\2\u14c1\u14c3\3\2\2\2\u14c2\u14c4\t\31\2\2\u14c3\u14c2\3\2\2\2"+
		"\u14c3\u14c4\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14c6\5\u021c\u010f\2\u14c6"+
		"\u01ef\3\2\2\2\u14c7\u14c8\7A\2\2\u14c8\u14c9\5\u01e8\u00f5\2\u14c9\u01f1"+
		"\3\2\2\2\u14ca\u14cb\7-\2\2\u14cb\u14cc\5\u01e8\u00f5\2\u14cc\u01f3\3"+
		"\2\2\2\u14cd\u14ce\7\64\2\2\u14ce\u14d5\5\u0218\u010d\2\u14cf\u14d1\7"+
		"\u0294\2\2\u14d0\u14cf\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u14d2\3\2\2\2"+
		"\u14d2\u14d4\5\u0218\u010d\2\u14d3\u14d0\3\2\2\2\u14d4\u14d7\3\2\2\2\u14d5"+
		"\u14d3\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d9\3\2\2\2\u14d7\u14d5\3\2"+
		"\2\2\u14d8\u14da\5\u0216\u010c\2\u14d9\u14d8\3\2\2\2\u14d9\u14da\3\2\2"+
		"\2\u14da\u01f5\3\2\2\2\u14db\u14dd\7D\2\2\u14dc\u14de\7y\2\2\u14dd\u14dc"+
		"\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14df\3\2\2\2\u14df\u14e1\5\u0256\u012c"+
		"\2\u14e0\u14e2\5\u0242\u0122\2\u14e1\u14e0\3\2\2\2\u14e1\u14e2\3\2\2\2"+
		"\u14e2\u14f3\3\2\2\2\u14e3\u14e5\7D\2\2\u14e4\u14e6\t\21\2\2\u14e5\u14e4"+
		"\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u14e7\3\2\2\2\u14e7\u14e9\t\f\2\2\u14e8"+
		"\u14ea\7y\2\2\u14e9\u14e8\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14eb\3\2"+
		"\2\2\u14eb\u14f0\5\u0256\u012c\2\u14ec\u14ed\7_\2\2\u14ed\u14ee\7\u00d1"+
		"\2\2\u14ee\u14ef\t\22\2\2\u14ef\u14f1\7\u01f6\2\2\u14f0\u14ec\3\2\2\2"+
		"\u14f0\u14f1\3\2\2\2\u14f1\u14f3\3\2\2\2\u14f2\u14db\3\2\2\2\u14f2\u14e3"+
		"\3\2\2\2\u14f3\u01f7\3\2\2\2\u14f4\u14f5\7}\2\2\u14f5\u14f6\5\u0254\u012b"+
		"\2\u14f6\u14f7\5\u0242\u0122\2\u14f7\u14f8\5\u01fa\u00fe\2\u14f8\u14f9"+
		"\7b\2\2\u14f9\u14fa\7\u00bc\2\2\u14fa\u14fb\5\u00c6d\2\u14fb\u01f9\3\2"+
		"\2\2\u14fc\u14fd\7e\2\2\u14fd\u1501\7\u0299\2\2\u14fe\u14ff\7\u01af\2"+
		"\2\u14ff\u1500\7\u00bc\2\2\u1500\u1502\5\u00c6d\2\u1501\u14fe\3\2\2\2"+
		"\u1501\u1502\3\2\2\2\u1502\u1504\3\2\2\2\u1503\u1505\5\u0204\u0103\2\u1504"+
		"\u1503\3\2\2\2\u1504\u1505\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1508\7\u029a"+
		"\2\2\u1507\u1509\5\u01fc\u00ff\2\u1508\u1507\3\2\2\2\u1508\u1509\3\2\2"+
		"\2\u1509\u01fb\3\2\2\2\u150a\u150b\7\7\2\2\u150b\u150c\5\u00c6d\2\u150c"+
		"\u01fd\3\2\2\2\u150d\u150e\7\67\2\2\u150e\u1510\7\u00bc\2\2\u150f\u1511"+
		"\5\u0250\u0129\2\u1510\u150f\3\2\2\2\u1510\u1511\3\2\2\2\u1511\u1512\3"+
		"\2\2\2\u1512\u1513\5\u0222\u0112\2\u1513\u01ff\3\2\2\2\u1514\u1515\78"+
		"\2\2\u1515\u1516\5\u0222\u0112\2\u1516\u0201\3\2\2\2\u1517\u1518\7\u0094"+
		"\2\2\u1518\u1519\5\u0214\u010b\2\u1519\u0203\3\2\2\2\u151a\u151b\7b\2"+
		"\2\u151b\u151c\7\u00bc\2\2\u151c\u1521\5\u0212\u010a\2\u151d\u151e\7\u0294"+
		"\2\2\u151e\u1520\5\u0212\u010a\2\u151f\u151d\3\2\2\2\u1520\u1523\3\2\2"+
		"\2\u1521\u151f\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u0205\3\2\2\2\u1523\u1521"+
		"\3\2\2\2\u1524\u1525\7P\2\2\u1525\u1530\7\u0299\2\2\u1526\u1527\7\u01af"+
		"\2\2\u1527\u1528\7\u00bc\2\2\u1528\u152d\5\u0254\u012b\2\u1529\u152a\7"+
		"\u0294\2\2\u152a\u152c\5\u0254\u012b\2\u152b\u1529\3\2\2\2\u152c\u152f"+
		"\3\2\2\2\u152d\u152b\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u1531\3\2\2\2\u152f"+
		"\u152d\3\2\2\2\u1530\u1526\3\2\2\2\u1530\u1531\3\2\2\2\u1531\u1532\3\2"+
		"\2\2\u1532\u1533\7b\2\2\u1533\u1534\7\u00bc\2\2\u1534\u1539\5\u0254\u012b"+
		"\2\u1535\u1536\7\u0294\2\2\u1536\u1538\5\u0254\u012b\2\u1537\u1535\3\2"+
		"\2\2\u1538\u153b\3\2\2\2\u1539\u1537\3\2\2\2\u1539\u153a\3\2\2\2\u153a"+
		"\u153c\3\2\2\2\u153b\u1539\3\2\2\2\u153c\u153d\7\u00ef\2\2\u153d\u153e"+
		"\5\u02c6\u0164\2\u153e\u1541\7\7\2\2\u153f\u1542\5\u0228\u0115\2\u1540"+
		"\u1542\5\u0214\u010b\2\u1541\u153f\3\2\2\2\u1541\u1540\3\2\2\2\u1542\u154c"+
		"\3\2\2\2\u1543\u1544\7\u0294\2\2\u1544\u1545\5\u02c6\u0164\2\u1545\u1548"+
		"\7\7\2\2\u1546\u1549\5\u0228\u0115\2\u1547\u1549\5\u0214\u010b\2\u1548"+
		"\u1546\3\2\2\2\u1548\u1547\3\2\2\2\u1549\u154b\3\2\2\2\u154a\u1543\3\2"+
		"\2\2\u154b\u154e\3\2\2\2\u154c\u154a\3\2\2\2\u154c\u154d\3\2\2\2\u154d"+
		"\u154f\3\2\2\2\u154e\u154c\3\2\2\2\u154f\u1550\7\u01be\2\2\u1550\u1551"+
		"\5\u02c6\u0164\2\u1551\u1552\7\7\2\2\u1552\u1553\7\u0299\2\2\u1553\u1554"+
		"\5\u02c6\u0164\2\u1554\u155e\7\u029a\2\2\u1555\u1556\7\u01f6\2\2\u1556"+
		"\u1557\7P\2\2\u1557\u155c\3\2\2\2\u1558\u1559\7\3\2\2\u1559\u155d\7\u0113"+
		"\2\2\u155a\u155b\7\u0126\2\2\u155b\u155d\7\u0112\2\2\u155c\u1558\3\2\2"+
		"\2\u155c\u155a\3\2\2\2\u155d\u155f\3\2\2\2\u155e\u1555\3\2\2\2\u155e\u155f"+
		"\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1561\7\u029a\2\2\u1561\u0207\3\2\2"+
		"\2\u1562\u1563\7\u01af\2\2\u1563\u1564\7\u00bc\2\2\u1564\u1566\5\u0228"+
		"\u0115\2\u1565\u1567\5\u01fe\u0100\2\u1566\u1565\3\2\2\2\u1566\u1567\3"+
		"\2\2\2\u1567\u156a\3\2\2\2\u1568\u1569\7\u009f\2\2\u1569\u156b\5\u02ae"+
		"\u0158\2\u156a\u1568\3\2\2\2\u156a\u156b\3\2\2\2\u156b\u0209\3\2\2\2\u156c"+
		"\u156d\7\u010b\2\2\u156d\u156e\t\36\2\2\u156e\u020b\3\2\2\2\u156f\u1570"+
		"\7\u01a9\2\2\u1570\u1571\7\u0085\2\2\u1571\u1572\5\u02b8\u015d\2\u1572"+
		"\u020d\3\2\2\2\u1573\u1574\7\u01e5\2\2\u1574\u1575\7\u0085\2\2\u1575\u1576"+
		"\5\u024c\u0127\2\u1576\u020f\3\2\2\2\u1577\u1578\7\u020a\2\2\u1578\u1579"+
		"\7p\2\2\u1579\u157a\5\u0294\u014b\2\u157a\u0211\3\2\2\2\u157b\u157d\5"+
		"\u0228\u0115\2\u157c\u157e\t\37\2\2\u157d\u157c\3\2\2\2\u157d\u157e\3"+
		"\2\2\2\u157e\u0213\3\2\2\2\u157f\u1580\7\u0299\2\2\u1580\u1581\5\u0214"+
		"\u010b\2\u1581\u1582\7\u029a\2\2\u1582\u158f\3\2\2\2\u1583\u1586\5\u0228"+
		"\u0115\2\u1584\u1586\5\u022c\u0117\2\u1585\u1583\3\2\2\2\u1585\u1584\3"+
		"\2\2\2\u1586\u158b\3\2\2\2\u1587\u1588\t \2\2\u1588\u158a\5\u0214\u010b"+
		"\2\u1589\u1587\3\2\2\2\u158a\u158d\3\2\2\2\u158b\u1589\3\2\2\2\u158b\u158c"+
		"\3\2\2\2\u158c\u158f\3\2\2\2\u158d\u158b\3\2\2\2\u158e\u157f\3\2\2\2\u158e"+
		"\u1585\3\2\2\2\u158f\u0215\3\2\2\2\u1590\u1591\7\u0228\2\2\u1591\u1592"+
		"\7\u0299\2\2\u1592\u1593\7\u02c6\2\2\u1593\u1594\7\u029a\2\2\u1594\u0217"+
		"\3\2\2\2\u1595\u1596\7\u0299\2\2\u1596\u1597\5\u0218\u010d\2\u1597\u1599"+
		"\7\u029a\2\2\u1598\u159a\5\u0242\u0122\2\u1599\u1598\3\2\2\2\u1599\u159a"+
		"\3\2\2\2\u159a\u15a4\3\2\2\2\u159b\u159f\5\u01b2\u00da\2\u159c\u159f\5"+
		"\u021a\u010e\2\u159d\u159f\5\u0256\u012c\2\u159e\u159b\3\2\2\2\u159e\u159c"+
		"\3\2\2\2\u159e\u159d\3\2\2\2\u159f\u15a1\3\2\2\2\u15a0\u15a2\5\u0242\u0122"+
		"\2\u15a1\u15a0\3\2\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15a4\3\2\2\2\u15a3\u1595"+
		"\3\2\2\2\u15a3\u159e\3\2\2\2\u15a4\u0219\3\2\2\2\u15a5\u15b5\7=\2\2\u15a6"+
		"\u15a8\7J\2\2\u15a7\u15a9\7d\2\2\u15a8\u15a7\3\2\2\2\u15a8\u15a9\3\2\2"+
		"\2\u15a9\u15b5\3\2\2\2\u15aa\u15ac\7n\2\2\u15ab\u15ad\7d\2\2\u15ac\u15ab"+
		"\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15b5\3\2\2\2\u15ae\u15b0\7\65\2\2"+
		"\u15af\u15b1\7d\2\2\u15b0\u15af\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b5"+
		"\3\2\2\2\u15b2\u15b5\7S\2\2\u15b3\u15b5\7\33\2\2\u15b4\u15a5\3\2\2\2\u15b4"+
		"\u15a6\3\2\2\2\u15b4\u15aa\3\2\2\2\u15b4\u15ae\3\2\2\2\u15b4\u15b2\3\2"+
		"\2\2\u15b4\u15b3\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6"+
		"\u15b7\7G\2\2\u15b7\u15b9\5\u0256\u012c\2\u15b8\u15ba\5\u0242\u0122\2"+
		"\u15b9\u15b8\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bc\3\2\2\2\u15bb\u15bd"+
		"\5\u0250\u0129\2\u15bc\u15bb\3\2\2\2\u15bc\u15bd\3\2\2\2\u15bd\u15bf\3"+
		"\2\2\2\u15be\u15c0\5\u0216\u010c\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3\2"+
		"\2\2\u15c0\u15c2\3\2\2\2\u15c1\u15c3\5\u0232\u011a\2\u15c2\u15c1\3\2\2"+
		"\2\u15c2\u15c3\3\2\2\2\u15c3\u021b\3\2\2\2\u15c4\u15c9\5\u021e\u0110\2"+
		"\u15c5\u15c6\7\u0294\2\2\u15c6\u15c8\5\u021e\u0110\2\u15c7\u15c5\3\2\2"+
		"\2\u15c8\u15cb\3\2\2\2\u15c9\u15c7\3\2\2\2\u15c9\u15ca\3\2\2\2\u15ca\u021d"+
		"\3\2\2\2\u15cb\u15c9\3\2\2\2\u15cc\u15d2\5\u02b2\u015a\2\u15cd\u15cf\5"+
		"\u0228\u0115\2\u15ce\u15d0\5\u0242\u0122\2\u15cf\u15ce\3\2\2\2\u15cf\u15d0"+
		"\3\2\2\2\u15d0\u15d2\3\2\2\2\u15d1\u15cc\3\2\2\2\u15d1\u15cd\3\2\2\2\u15d2"+
		"\u021f\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4\u0221\3\2\2\2\u15d5\u15da\5\u0228"+
		"\u0115\2\u15d6\u15d7\7\u0294\2\2\u15d7\u15d9\5\u0228\u0115\2\u15d8\u15d6"+
		"\3\2\2\2\u15d9\u15dc\3\2\2\2\u15da\u15d8\3\2\2\2\u15da\u15db\3\2\2\2\u15db"+
		"\u0223\3\2\2\2\u15dc\u15da\3\2\2\2\u15dd\u15de\7\u0298\2\2\u15de\u15df"+
		"\5\u02e8\u0175\2\u15df\u0225\3\2\2\2\u15e0\u15e1\7\21\2\2\u15e1\u15e2"+
		"\7\u0299\2\2\u15e2\u15e3\5\u0228\u0115\2\u15e3\u15e4\7\7\2\2\u15e4\u15e5"+
		"\5\u02e8\u0175\2\u15e5\u15e6\7\u029a\2\2\u15e6\u15eb\3\2\2\2\u15e7\u15e8"+
		"\5\u02e8\u0175\2\u15e8\u15e9\5\u02aa\u0156\2\u15e9\u15eb\3\2\2\2\u15ea"+
		"\u15e0\3\2\2\2\u15ea\u15e7\3\2\2\2\u15eb\u0227\3\2\2\2\u15ec\u15ed\7\u0299"+
		"\2\2\u15ed\u15ee\5\u0228\u0115\2\u15ee\u15f0\7\u029a\2\2\u15ef\u15f1\5"+
		"\u0224\u0113\2\u15f0\u15ef\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u1608\3\2"+
		"\2\2\u15f2\u15fb\5\u0226\u0114\2\u15f3\u15fb\5\u0244\u0123\2\u15f4\u15fb"+
		"\5\u022a\u0116\2\u15f5\u15fb\5\u02ae\u0158\2\u15f6\u15fb\5\u0254\u012b"+
		"\2\u15f7\u15fb\5\u0240\u0121\2\u15f8\u15fb\5\u01e8\u00f5\2\u15f9\u15fb"+
		"\5\u02c8\u0165\2\u15fa\u15f2\3\2\2\2\u15fa\u15f3\3\2\2\2\u15fa\u15f4\3"+
		"\2\2\2\u15fa\u15f5\3\2\2\2\u15fa\u15f6\3\2\2\2\u15fa\u15f7\3\2\2\2\u15fa"+
		"\u15f8\3\2\2\2\u15fa\u15f9\3\2\2\2\u15fb\u15fd\3\2\2\2\u15fc\u15fe\5\u0224"+
		"\u0113\2\u15fd\u15fc\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u1604\3\2\2\2\u15ff"+
		"\u1600\5\u02d6\u016c\2\u1600\u1601\5\u0228\u0115\2\u1601\u1603\3\2\2\2"+
		"\u1602\u15ff\3\2\2\2\u1603\u1606\3\2\2\2\u1604\u1602\3\2\2\2\u1604\u1605"+
		"\3\2\2\2\u1605\u1608\3\2\2\2\u1606\u1604\3\2\2\2\u1607\u15ec\3\2\2\2\u1607"+
		"\u15fa\3\2\2\2\u1608\u0229\3\2\2\2\u1609\u160a\7\6\2\2\u160a\u1613\7\u02b2"+
		"\2\2\u160b\u1610\5\u0228\u0115\2\u160c\u160d\7\u0294\2\2\u160d\u160f\5"+
		"\u0228\u0115\2\u160e\u160c\3\2\2\2\u160f\u1612\3\2\2\2\u1610\u160e\3\2"+
		"\2\2\u1610\u1611\3\2\2\2\u1611\u1614\3\2\2\2\u1612\u1610\3\2\2\2\u1613"+
		"\u160b\3\2\2\2\u1613\u1614\3\2\2\2\u1614\u1615\3\2\2\2\u1615\u1616\7\u02b3"+
		"\2\2\u1616\u022b\3\2\2\2\u1617\u161f\5\u023c\u011f\2\u1618\u161f\5\u023e"+
		"\u0120\2\u1619\u161f\5\u0236\u011c\2\u161a\u161f\5\u0238\u011d\2\u161b"+
		"\u161f\5\u0234\u011b\2\u161c\u161f\5\u0230\u0119\2\u161d\u161f\5\u022e"+
		"\u0118\2\u161e\u1617\3\2\2\2\u161e\u1618\3\2\2\2\u161e\u1619\3\2\2\2\u161e"+
		"\u161a\3\2\2\2\u161e\u161b\3\2\2\2\u161e\u161c\3\2\2\2\u161e\u161d\3\2"+
		"\2\2\u161f\u022d\3\2\2\2\u1620\u1621\5\u0228\u0115\2\u1621\u1622\7E\2"+
		"\2\u1622\u1623\5\u02ce\u0168\2\u1623\u022f\3\2\2\2\u1624\u1626\5\u0228"+
		"\u0115\2\u1625\u1627\7W\2\2\u1626\u1625\3\2\2\2\u1626\u1627\3\2\2\2\u1627"+
		"\u1628\3\2\2\2\u1628\u1629\t!\2\2\u1629\u162c\5\u0228\u0115\2\u162a\u162b"+
		"\7\u0111\2\2\u162b\u162d\5\u02c8\u0165\2\u162c\u162a\3\2\2\2\u162c\u162d"+
		"\3\2\2\2\u162d\u0231\3\2\2\2\u162e\u162f\7_\2\2\u162f\u1634\5\u0228\u0115"+
		"\2\u1630\u1631\t \2\2\u1631\u1633\5\u0228\u0115\2\u1632\u1630\3\2\2\2"+
		"\u1633\u1636\3\2\2\2\u1634\u1632\3\2\2\2\u1634\u1635\3\2\2\2\u1635\u0233"+
		"\3\2\2\2\u1636\u1634\3\2\2\2\u1637\u1638\5\u0254\u012b\2\u1638\u1639\7"+
		"\u01ca\2\2\u1639\u163a\7\u024e\2\2\u163a\u163b\5\u0254\u012b\2\u163b\u0235"+
		"\3\2\2\2\u163c\u163d\5\u0228\u0115\2\u163d\u163e\5\u02d6\u016c\2\u163e"+
		"\u163f\5\u0228\u0115\2\u163f\u0237\3\2\2\2\u1640\u1641\5\u00c6d\2\u1641"+
		"\u1643\7;\2\2\u1642\u1644\7W\2\2\u1643\u1642\3\2\2\2\u1643\u1644\3\2\2"+
		"\2\u1644\u1645\3\2\2\2\u1645\u1646\7\u0299\2\2\u1646\u1647\5\u0222\u0112"+
		"\2\u1647\u1648\7\u029a\2\2\u1648\u0239\3\2\2\2\u1649\u164f\5\u02ae\u0158"+
		"\2\u164a\u164b\5\u02aa\u0156\2\u164b\u164c\7E\2\2\u164c\u164d\5\u02ce"+
		"\u0168\2\u164d\u164f\3\2\2\2\u164e\u1649\3\2\2\2\u164e\u164a\3\2\2\2\u164f"+
		"\u023b\3\2\2\2\u1650\u1652\5\u0228\u0115\2\u1651\u1653\7\n\2\2\u1652\u1651"+
		"\3\2\2\2\u1652\u1653\3\2\2\2\u1653\u1654\3\2\2\2\u1654\u1655\5\u0228\u0115"+
		"\2\u1655\u1656\7\4\2\2\u1656\u1657\5\u0228\u0115\2\u1657\u023d\3\2\2\2"+
		"\u1658\u1659\5\u0228\u0115\2\u1659\u165b\7E\2\2\u165a\u165c\7W\2\2\u165b"+
		"\u165a\3\2\2\2\u165b\u165c\3\2\2\2\u165c\u165f\3\2\2\2\u165d\u1660\5\u02e6"+
		"\u0174\2\u165e\u1660\7\u0242\2\2\u165f\u165d\3\2\2\2\u165f\u165e\3\2\2"+
		"\2\u1660\u023f\3\2\2\2\u1661\u1662\7\20\2\2\u1662\u1663\7\u0093\2\2\u1663"+
		"\u1664\5\u0214\u010b\2\u1664\u1665\7{\2\2\u1665\u166d\5\u0228\u0115\2"+
		"\u1666\u1667\7\u0093\2\2\u1667\u1668\5\u0214\u010b\2\u1668\u1669\7{\2"+
		"\2\u1669\u166a\5\u0228\u0115\2\u166a\u166c\3\2\2\2\u166b\u1666\3\2\2\2"+
		"\u166c\u166f\3\2\2\2\u166d\u166b\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u1672"+
		"\3\2\2\2\u166f\u166d\3\2\2\2\u1670\u1671\7*\2\2\u1671\u1673\5\u0228\u0115"+
		"\2\u1672\u1670\3\2\2\2\u1672\u1673\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1675"+
		"\7,\2\2\u1675\u0241\3\2\2\2\u1676\u1678\7\7\2\2\u1677\u1676\3\2\2\2\u1677"+
		"\u1678\3\2\2\2\u1678\u1679\3\2\2\2\u1679\u167a\5\u02c6\u0164\2\u167a\u0243"+
		"\3\2\2\2\u167b\u167c\5\u0266\u0134\2\u167c\u1688\7\u0299\2\2\u167d\u167f"+
		"\t\31\2\2\u167e\u167d\3\2\2\2\u167e\u167f\3\2\2\2\u167f\u1680\3\2\2\2"+
		"\u1680\u1685\5\u0246\u0124\2\u1681\u1682\7\u0294\2\2\u1682\u1684\5\u0246"+
		"\u0124\2\u1683\u1681\3\2\2\2\u1684\u1687\3\2\2\2\u1685\u1683\3\2\2\2\u1685"+
		"\u1686\3\2\2\2\u1686\u1689\3\2\2\2\u1687\u1685\3\2\2\2\u1688\u167e\3\2"+
		"\2\2\u1688\u1689\3\2\2\2\u1689\u168a\3\2\2\2\u168a\u168c\7\u029a\2\2\u168b"+
		"\u168d\5\u01fa\u00fe\2\u168c\u168b\3\2\2\2\u168c\u168d\3\2\2\2\u168d\u0245"+
		"\3\2\2\2\u168e\u1694\5\u0248\u0125\2\u168f\u1691\5\u021e\u0110\2\u1690"+
		"\u1692\5\u0248\u0125\2\u1691\u1690\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u1694"+
		"\3\2\2\2\u1693\u168e\3\2\2\2\u1693\u168f\3\2\2\2\u1694\u0247\3\2\2\2\u1695"+
		"\u1697\7\u008e\2\2\u1696\u1698\7\u01ab\2\2\u1697\u1696\3\2\2\2\u1697\u1698"+
		"\3\2\2\2\u1698\u169c\3\2\2\2\u1699\u169d\7\u019e\2\2\u169a\u169d\7\u00c8"+
		"\2\2\u169b\u169d\5\u024a\u0126\2\u169c\u1699\3\2\2\2\u169c\u169a\3\2\2"+
		"\2\u169c\u169b\3\2\2\2\u169d\u0249\3\2\2\2\u169e\u16a0\7\u0299\2\2\u169f"+
		"\u16a1\5\u024a\u0126\2\u16a0\u169f\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1\u16a2"+
		"\3\2\2\2\u16a2\u16ac\7\u029a\2\2\u16a3\u16a8\5\u024e\u0128\2\u16a4\u16a5"+
		"\7\u0294\2\2\u16a5\u16a7\5\u024e\u0128\2\u16a6\u16a4\3\2\2\2\u16a7\u16aa"+
		"\3\2\2\2\u16a8\u16a6\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u16ac\3\2\2\2\u16aa"+
		"\u16a8\3\2\2\2\u16ab\u169e\3\2\2\2\u16ab\u16a3\3\2\2\2\u16ac\u024b\3\2"+
		"\2\2\u16ad\u16b2\5\u02c8\u0165\2\u16ae\u16af\7\u0294\2\2\u16af\u16b1\5"+
		"\u02c8\u0165\2\u16b0\u16ae\3\2\2\2\u16b1\u16b4\3\2\2\2\u16b2\u16b0\3\2"+
		"\2\2\u16b2\u16b3\3\2\2\2\u16b3\u16c2\3\2\2\2\u16b4\u16b2\3\2\2\2\u16b5"+
		"\u16b7\7\u0299\2\2\u16b6\u16b8\5\u02c8\u0165\2\u16b7\u16b6\3\2\2\2\u16b7"+
		"\u16b8\3\2\2\2\u16b8\u16bd\3\2\2\2\u16b9\u16ba\7\u0294\2\2\u16ba\u16bc"+
		"\5\u02c8\u0165\2\u16bb\u16b9\3\2\2\2\u16bc\u16bf\3\2\2\2\u16bd\u16bb\3"+
		"\2\2\2\u16bd\u16be\3\2\2\2\u16be\u16c0\3\2\2\2\u16bf\u16bd\3\2\2\2\u16c0"+
		"\u16c2\7\u029a\2\2\u16c1\u16ad\3\2\2\2\u16c1\u16b5\3\2\2\2\u16c2\u024d"+
		"\3\2\2\2\u16c3\u16c4\5\u02a2\u0152\2\u16c4\u16c5\5\u02d6\u016c\2\u16c5"+
		"\u16c6\5\u02c8\u0165\2\u16c6\u024f\3\2\2\2\u16c7\u16c8\7\u02c0\2\2\u16c8"+
		"\u16cd\5\u0252\u012a\2\u16c9\u16ca\7\u0294\2\2\u16ca\u16cc\5\u0252\u012a"+
		"\2\u16cb\u16c9\3\2\2\2\u16cc\u16cf\3\2\2\2\u16cd\u16cb\3\2\2\2\u16cd\u16ce"+
		"\3\2\2\2\u16ce\u16d0\3\2\2\2\u16cf\u16cd\3\2\2\2\u16d0\u16d1\7\u02c1\2"+
		"\2\u16d1\u0251\3\2\2\2\u16d2\u171a\7\u025f\2\2\u16d3\u16d4\7\u0283\2\2"+
		"\u16d4\u171a\t\"\2\2\u16d5\u171a\7\u0287\2\2\u16d6\u16d7\7\u0289\2\2\u16d7"+
		"\u16d8\7\u0299\2\2\u16d8\u16d9\5\u02c8\u0165\2\u16d9\u16da\7\u029a\2\2"+
		"\u16da\u171a\3\2\2\2\u16db\u171a\7\u0288\2\2\u16dc\u171a\7\u00f9\2\2\u16dd"+
		"\u16de\7\u0160\2\2\u16de\u16df\7\u0299\2\2\u16df\u16e0\5\u02c8\u0165\2"+
		"\u16e0\u16e1\7\u029a\2\2\u16e1\u16e2\3\2\2\2\u16e2\u16e3\7\u0286\2\2\u16e3"+
		"\u171a\3\2\2\2\u16e4\u171a\7\u028a\2\2\u16e5\u16e6\7\u0291\2\2\u16e6\u16e7"+
		"\7\u0299\2\2\u16e7\u16ec\5\u02c8\u0165\2\u16e8\u16e9\7\u0294\2\2\u16e9"+
		"\u16eb\5\u02c8\u0165\2\u16ea\u16e8\3\2\2\2\u16eb\u16ee\3\2\2\2\u16ec\u16ea"+
		"\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed\u16ef\3\2\2\2\u16ee\u16ec\3\2\2\2\u16ef"+
		"\u16f0\7\u029a\2\2\u16f0\u171a\3\2\2\2\u16f1\u16f2\7\u0290\2\2\u16f2\u16f3"+
		"\7\u0299\2\2\u16f3\u16f4\5\u02c8\u0165\2\u16f4\u16f5\7\u029a\2\2\u16f5"+
		"\u171a\3\2\2\2\u16f6\u16f7\7\u028f\2\2\u16f7\u16f8\7\u0299\2\2\u16f8\u16f9"+
		"\5\u02c8\u0165\2\u16f9\u16fa\7\u029a\2\2\u16fa\u171a\3\2\2\2\u16fb\u16fc"+
		"\7\u0292\2\2\u16fc\u16fd\7\u0299\2\2\u16fd\u1702\5\u0260\u0131\2\u16fe"+
		"\u16ff\7\u0294\2\2\u16ff\u1701\5\u0260\u0131\2\u1700\u16fe\3\2\2\2\u1701"+
		"\u1704\3\2\2\2\u1702\u1700\3\2\2\2\u1702\u1703\3\2\2\2\u1703\u1705\3\2"+
		"\2\2\u1704\u1702\3\2\2\2\u1705\u1706\7\u029a\2\2\u1706\u171a\3\2\2\2\u1707"+
		"\u1708\7\u0293\2\2\u1708\u1709\7\u0299\2\2\u1709\u170e\5\u0260\u0131\2"+
		"\u170a\u170b\7\u0294\2\2\u170b\u170d\5\u0260\u0131\2\u170c\u170a\3\2\2"+
		"\2\u170d\u1710\3\2\2\2\u170e\u170c\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u1711"+
		"\3\2\2\2\u1710\u170e\3\2\2\2\u1711\u1712\7\u029a\2\2\u1712\u171a\3\2\2"+
		"\2\u1713\u1714\7\u028e\2\2\u1714\u1715\7\u0299\2\2\u1715\u1716\5\u02b0"+
		"\u0159\2\u1716\u1717\7\u029a\2\2\u1717\u171a\3\2\2\2\u1718\u171a\7\u028d"+
		"\2\2\u1719\u16d2\3\2\2\2\u1719\u16d3\3\2\2\2\u1719\u16d5\3\2\2\2\u1719"+
		"\u16d6\3\2\2\2\u1719\u16db\3\2\2\2\u1719\u16dc\3\2\2\2\u1719\u16dd\3\2"+
		"\2\2\u1719\u16e4\3\2\2\2\u1719\u16e5\3\2\2\2\u1719\u16f1\3\2\2\2\u1719"+
		"\u16f6\3\2\2\2\u1719\u16fb\3\2\2\2\u1719\u1707\3\2\2\2\u1719\u1713\3\2"+
		"\2\2\u1719\u1718\3\2\2\2\u171a\u0253\3\2\2\2\u171b\u171c\5\u0272\u013a"+
		"\2\u171c\u171d\7\u029b\2\2\u171d\u171f\3\2\2\2\u171e\u171b\3\2\2\2\u171e"+
		"\u171f\3\2\2\2\u171f\u1720\3\2\2\2\u1720\u1721\5\u0294\u014b\2\u1721\u1722"+
		"\7\u029b\2\2\u1722\u1724\3\2\2\2\u1723\u171e\3\2\2\2\u1723\u1724\3\2\2"+
		"\2\u1724\u1725\3\2\2\2\u1725\u1726\5\u0298\u014d\2\u1726\u1727\7\u029b"+
		"\2\2\u1727\u1729\3\2\2\2\u1728\u1723\3\2\2\2\u1728\u1729\3\2\2\2\u1729"+
		"\u172a\3\2\2\2\u172a\u172b\5\u02a8\u0155\2\u172b\u0255\3\2\2\2\u172c\u172d"+
		"\5\u0272\u013a\2\u172d\u172e\7\u029b\2\2\u172e\u1730\3\2\2\2\u172f\u172c"+
		"\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1731\3\2\2\2\u1731\u1732\5\u0294\u014b"+
		"\2\u1732\u1733\7\u029b\2\2\u1733\u1735\3\2\2\2\u1734\u172f\3\2\2\2\u1734"+
		"\u1735\3\2\2\2\u1735\u1736\3\2\2\2\u1736\u1737\5\u0298\u014d\2\u1737\u0257"+
		"\3\2\2\2\u1738\u1739\5\u0272\u013a\2\u1739\u173a\7\u029b\2\2\u173a\u173c"+
		"\3\2\2\2\u173b\u1738\3\2\2\2\u173b\u173c\3\2\2\2\u173c\u173d\3\2\2\2\u173d"+
		"\u173e\5\u0294\u014b\2\u173e\u173f\7\u029b\2\2\u173f\u1741\3\2\2\2\u1740"+
		"\u173b\3\2\2\2\u1740\u1741\3\2\2\2\u1741\u1742\3\2\2\2\u1742\u1743\5\u0284"+
		"\u0143\2\u1743\u0259\3\2\2\2\u1744\u1745\5\u0272\u013a\2\u1745\u1746\7"+
		"\u029b\2\2\u1746\u1748\3\2\2\2\u1747\u1744\3\2\2\2\u1747\u1748\3\2\2\2"+
		"\u1748\u1749\3\2\2\2\u1749\u174a\5\u0294\u014b\2\u174a\u174b\7\u029b\2"+
		"\2\u174b\u174d\3\2\2\2\u174c\u1747\3\2\2\2\u174c\u174d\3\2\2\2\u174d\u174e"+
		"\3\2\2\2\u174e\u174f\5\u027a\u013e\2\u174f\u025b\3\2\2\2\u1750\u1751\5"+
		"\u0272\u013a\2\u1751\u1752\7\u029b\2\2\u1752\u1754\3\2\2\2\u1753\u1750"+
		"\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1755\3\2\2\2\u1755\u1756\5\u0294\u014b"+
		"\2\u1756\u1757\7\u029b\2\2\u1757\u1759\3\2\2\2\u1758\u1753\3\2\2\2\u1758"+
		"\u1759\3\2\2\2\u1759\u175a\3\2\2\2\u175a\u175b\5\u0280\u0141\2\u175b\u025d"+
		"\3\2\2\2\u175c\u175d\5\u0272\u013a\2\u175d\u175e\7\u029b\2\2\u175e\u1760"+
		"\3\2\2\2\u175f\u175c\3\2\2\2\u175f\u1760\3\2\2\2\u1760\u1761\3\2\2\2\u1761"+
		"\u1762\5\u0294\u014b\2\u1762\u1763\7\u029b\2\2\u1763\u1765\3\2\2\2\u1764"+
		"\u175f\3\2\2\2\u1764\u1765\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u1767\5\u0282"+
		"\u0142\2\u1767\u025f\3\2\2\2\u1768\u1769\5\u0272\u013a\2\u1769\u176a\7"+
		"\u029b\2\2\u176a\u176c\3\2\2\2\u176b\u1768\3\2\2\2\u176b\u176c\3\2\2\2"+
		"\u176c\u176d\3\2\2\2\u176d\u176e\5\u0294\u014b\2\u176e\u176f\7\u029b\2"+
		"\2\u176f\u1771\3\2\2\2\u1770\u176b\3\2\2\2\u1770\u1771\3\2\2\2\u1771\u1772"+
		"\3\2\2\2\u1772\u1773\5\u0298\u014d\2\u1773\u1774\7\u029b\2\2\u1774\u1776"+
		"\3\2\2\2\u1775\u1770\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1777\3\2\2\2\u1777"+
		"\u1778\5\u029c\u014f\2\u1778\u0261\3\2\2\2\u1779\u177a\5\u0272\u013a\2"+
		"\u177a\u177b\7\u029b\2\2\u177b\u177d\3\2\2\2\u177c\u1779\3\2\2\2\u177c"+
		"\u177d\3\2\2\2\u177d\u177e\3\2\2\2\u177e\u177f\5\u0294\u014b\2\u177f\u1780"+
		"\7\u029b\2\2\u1780\u1782\3\2\2\2\u1781\u177c\3\2\2\2\u1781\u1782\3\2\2"+
		"\2\u1782\u1783\3\2\2\2\u1783\u1784\5\u0298\u014d\2\u1784\u1785\7\u029b"+
		"\2\2\u1785\u1787\3\2\2\2\u1786\u1781\3\2\2\2\u1786\u1787\3\2\2\2\u1787"+
		"\u1788\3\2\2\2\u1788\u1789\5\u0264\u0133\2\u1789\u0263\3\2\2\2\u178a\u178b"+
		"\5\u02c6\u0164\2\u178b\u0265\3\2\2\2\u178c\u178d\5\u0272\u013a\2\u178d"+
		"\u178e\7\u029b\2\2\u178e\u1790\3\2\2\2\u178f\u178c\3\2\2\2\u178f\u1790"+
		"\3\2\2\2\u1790\u1791\3\2\2\2\u1791\u1792\5\u0294\u014b\2\u1792\u1793\7"+
		"\u029b\2\2\u1793\u1795\3\2\2\2\u1794\u178f\3\2\2\2\u1794\u1795\3\2\2\2"+
		"\u1795\u1796\3\2\2\2\u1796\u1797\5\u02a0\u0151\2\u1797\u0267\3\2\2\2\u1798"+
		"\u1799\5\u0272\u013a\2\u1799\u179a\7\u029b\2\2\u179a\u179c\3\2\2\2\u179b"+
		"\u1798\3\2\2\2\u179b\u179c\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u179e\5\u0294"+
		"\u014b\2\u179e\u179f\7\u029b\2\2\u179f\u17a1\3\2\2\2\u17a0\u179b\3\2\2"+
		"\2\u17a0\u17a1\3\2\2\2\u17a1\u17a2\3\2\2\2\u17a2\u17a3\5\u029e\u0150\2"+
		"\u17a3\u0269\3\2\2\2\u17a4\u17a5\5\u0272\u013a\2\u17a5\u17a6\7\u029b\2"+
		"\2\u17a6\u17a8\3\2\2\2\u17a7\u17a4\3\2\2\2\u17a7\u17a8\3\2\2\2\u17a8\u17a9"+
		"\3\2\2\2\u17a9\u17aa\5\u0294\u014b\2\u17aa\u17ab\7\u029b\2\2\u17ab\u17ad"+
		"\3\2\2\2\u17ac\u17a7\3\2\2\2\u17ac\u17ad\3\2\2\2\u17ad\u17ae\3\2\2\2\u17ae"+
		"\u17af\5\u02a6\u0154\2\u17af\u026b\3\2\2\2\u17b0\u17b1\5\u0272\u013a\2"+
		"\u17b1\u17b2\7\u029b\2\2\u17b2\u17b4\3\2\2\2\u17b3\u17b0\3\2\2\2\u17b3"+
		"\u17b4\3\2\2\2\u17b4\u17b5\3\2\2\2\u17b5\u17b6\5\u0294\u014b\2\u17b6\u17b7"+
		"\7\u029b\2\2\u17b7\u17b9\3\2\2\2\u17b8\u17b3\3\2\2\2\u17b8\u17b9\3\2\2"+
		"\2\u17b9\u17ba\3\2\2\2\u17ba\u17bb\5\u027e\u0140\2\u17bb\u026d\3\2\2\2"+
		"\u17bc\u17bd\5\u0272\u013a\2\u17bd\u17be\7\u029b\2\2\u17be\u17c0\3\2\2"+
		"\2\u17bf\u17bc\3\2\2\2\u17bf\u17c0\3\2\2\2\u17c0\u17c1\3\2\2\2\u17c1\u17c2"+
		"\5\u0294\u014b\2\u17c2\u17c3\7\u029b\2\2\u17c3\u17c5\3\2\2\2\u17c4\u17bf"+
		"\3\2\2\2\u17c4\u17c5\3\2\2\2\u17c5\u17c6\3\2\2\2\u17c6\u17c7\5\u0274\u013b"+
		"\2\u17c7\u026f\3\2\2\2\u17c8\u17c9\5\u0272\u013a\2\u17c9\u17ca\7\u029b"+
		"\2\2\u17ca\u17cc\3\2\2\2\u17cb\u17c8\3\2\2\2\u17cb\u17cc\3\2\2\2\u17cc"+
		"\u17cd\3\2\2\2\u17cd\u17ce\5\u0294\u014b\2\u17ce\u0271\3\2\2\2\u17cf\u17d0"+
		"\5\u02c6\u0164\2\u17d0\u0273\3\2\2\2\u17d1\u17d2\5\u02c6\u0164\2\u17d2"+
		"\u0275\3\2\2\2\u17d3\u17d4\5\u02c6\u0164\2\u17d4\u0277\3\2\2\2\u17d5\u17d6"+
		"\7\u02c8\2\2\u17d6\u0279\3\2\2\2\u17d7\u17d8\5\u02c6\u0164\2\u17d8\u027b"+
		"\3\2\2\2\u17d9\u17da\5\u02c6\u0164\2\u17da\u027d\3\2\2\2\u17db\u17dc\5"+
		"\u02c6\u0164\2\u17dc\u027f\3\2\2\2\u17dd\u17de\5\u02c6\u0164\2\u17de\u0281"+
		"\3\2\2\2\u17df\u17e0\5\u02c6\u0164\2\u17e0\u0283\3\2\2\2\u17e1\u17e2\5"+
		"\u02c6\u0164\2\u17e2\u0285\3\2\2\2\u17e3\u17e4\5\u02c6\u0164\2\u17e4\u0287"+
		"\3\2\2\2\u17e5\u17e6\5\u02c6\u0164\2\u17e6\u0289\3\2\2\2\u17e7\u17e8\5"+
		"\u02c6\u0164\2\u17e8\u028b\3\2\2\2\u17e9\u17eb\5\u02c6\u0164\2\u17ea\u17ec"+
		"\5\u02ae\u0158\2\u17eb\u17ea\3\2\2\2\u17eb\u17ec\3\2\2\2\u17ec\u028d\3"+
		"\2\2\2\u17ed\u17ee\5\u02c6\u0164\2\u17ee\u028f\3\2\2\2\u17ef\u17f0\5\u02aa"+
		"\u0156\2\u17f0\u0291\3\2\2\2\u17f1\u17f2\5\u02c6\u0164\2\u17f2\u0293\3"+
		"\2\2\2\u17f3\u17f6\5\u02c6\u0164\2\u17f4\u17f6\7\u0260\2\2\u17f5\u17f3"+
		"\3\2\2\2\u17f5\u17f4\3\2\2\2\u17f6\u0295\3\2\2\2\u17f7\u17f8\7\u02c3\2"+
		"\2\u17f8\u0297\3\2\2\2\u17f9\u17fa\5\u02c6\u0164\2\u17fa\u0299\3\2\2\2"+
		"\u17fb\u1800\5\u02a2\u0152\2\u17fc\u17fd\7\u0294\2\2\u17fd\u17ff\5\u02a2"+
		"\u0152\2\u17fe\u17fc\3\2\2\2\u17ff\u1802\3\2\2\2\u1800\u17fe\3\2\2\2\u1800"+
		"\u1801\3\2\2\2\u1801\u029b\3\2\2\2\u1802\u1800\3\2\2\2\u1803\u1804\5\u02c6"+
		"\u0164\2\u1804\u029d\3\2\2\2\u1805\u1806\5\u02c6\u0164\2\u1806\u029f\3"+
		"\2\2\2\u1807\u180c\7\u0284\2\2\u1808\u180c\7\u01f5\2\2\u1809\u180c\7\5"+
		"\2\2\u180a\u180c\5\u02c6\u0164\2\u180b\u1807\3\2\2\2\u180b\u1808\3\2\2"+
		"\2\u180b\u1809\3\2\2\2\u180b\u180a\3\2\2\2\u180c\u02a1\3\2\2\2\u180d\u180e"+
		"\5\u02c6\u0164\2\u180e\u02a3\3\2\2\2\u180f\u1810\5\u02c6\u0164\2\u1810"+
		"\u02a5\3\2\2\2\u1811\u1812\5\u02c6\u0164\2\u1812\u02a7\3\2\2\2\u1813\u1814"+
		"\5\u02c6\u0164\2\u1814\u02a9\3\2\2\2\u1815\u1816\t#\2\2\u1816\u02ab\3"+
		"\2\2\2\u1817\u1818\7\u02c5\2\2\u1818\u02ad\3\2\2\2\u1819\u181a\t$\2\2"+
		"\u181a\u02af\3\2\2\2\u181b\u181c\7\u02c8\2\2\u181c\u02b1\3\2\2\2\u181d"+
		"\u181e\7\u0296\2\2\u181e\u02b3\3\2\2\2\u181f\u1820\5\u02c6\u0164\2\u1820"+
		"\u02b5\3\2\2\2\u1821\u1822\5\u02c6\u0164\2\u1822\u02b7\3\2\2\2\u1823\u1824"+
		"\5\u02c6\u0164\2\u1824\u02b9\3\2\2\2\u1825\u1826\5\u02c6\u0164\2\u1826"+
		"\u02bb\3\2\2\2\u1827\u1828\5\u02c6\u0164\2\u1828\u02bd\3\2\2\2\u1829\u182a"+
		"\5\u02c6\u0164\2\u182a\u02bf\3\2\2\2\u182b\u182c\5\u02c6\u0164\2\u182c"+
		"\u02c1\3\2\2\2\u182d\u182e\5\u02c6\u0164\2\u182e\u02c3\3\2\2\2\u182f\u1830"+
		"\5\u02c6\u0164\2\u1830\u02c5\3\2\2\2\u1831\u1839\7\u02c2\2\2\u1832\u1839"+
		"\7\u02c5\2\2\u1833\u1839\7\u02c4\2\2\u1834\u1839\7&\2\2\u1835\u1839\7"+
		"\u02c3\2\2\u1836\u1839\7\u02c9\2\2\u1837\u1839\5\u02fc\u017f\2\u1838\u1831"+
		"\3\2\2\2\u1838\u1832\3\2\2\2\u1838\u1833\3\2\2\2\u1838\u1834\3\2\2\2\u1838"+
		"\u1835\3\2\2\2\u1838\u1836\3\2\2\2\u1838\u1837\3\2\2\2\u1839\u02c7\3\2"+
		"\2\2\u183a\u1844\7\u02c8\2\2\u183b\u1844\7\u02c6\2\2\u183c\u1844\7\u02c7"+
		"\2\2\u183d\u1844\7\u02c4\2\2\u183e\u1844\7\u02c2\2\2\u183f\u1844\7\u02c5"+
		"\2\2\u1840\u1844\7\u02c9\2\2\u1841\u1844\7\u02c3\2\2\u1842\u1844\5\u02fc"+
		"\u017f\2\u1843\u183a\3\2\2\2\u1843\u183b\3\2\2\2\u1843\u183c\3\2\2\2\u1843"+
		"\u183d\3\2\2\2\u1843\u183e\3\2\2\2\u1843\u183f\3\2\2\2\u1843\u1840\3\2"+
		"\2\2\u1843\u1841\3\2\2\2\u1843\u1842\3\2\2\2\u1844\u02c9\3\2\2\2\u1845"+
		"\u1846\t\t\2\2\u1846\u02cb\3\2\2\2\u1847\u1848\t%\2\2\u1848\u02cd\3\2"+
		"\2\2\u1849\u184b\7W\2\2\u184a\u1849\3\2\2\2\u184a\u184b\3\2\2\2\u184b"+
		"\u184c\3\2\2\2\u184c\u184d\7Y\2\2\u184d\u02cf\3\2\2\2\u184e\u184f\t&\2"+
		"\2\u184f\u02d1\3\2\2\2\u1850\u1851\t\'\2\2\u1851\u02d3\3\2\2\2\u1852\u1853"+
		"\t(\2\2\u1853\u1854\5\u02c8\u0165\2\u1854\u02d5\3\2\2\2\u1855\u185b\5"+
		"\u02dc\u016f\2\u1856\u185b\5\u02e0\u0171\2\u1857\u185b\5\u02de\u0170\2"+
		"\u1858\u185b\5\u02d8\u016d\2\u1859\u185b\5\u02da\u016e\2\u185a\u1855\3"+
		"\2\2\2\u185a\u1856\3\2\2\2\u185a\u1857\3\2\2\2\u185a\u1858\3\2\2\2\u185a"+
		"\u1859\3\2\2\2\u185b\u02d7\3\2\2\2\u185c\u185d\t)\2\2\u185d\u02d9\3\2"+
		"\2\2\u185e\u185f\t \2\2\u185f\u02db\3\2\2\2\u1860\u1861\7\u02b1\2\2\u1861"+
		"\u02dd\3\2\2\2\u1862\u1863\t*\2\2\u1863\u02df\3\2\2\2\u1864\u1865\t+\2"+
		"\2\u1865\u02e1\3\2\2\2\u1866\u1867\7\u01d9\2\2\u1867\u186e\7\u00d2\2\2"+
		"\u1868\u186e\7\u0208\2\2\u1869\u186a\7\u01e7\2\2\u186a\u186e\7\u01d9\2"+
		"\2\u186b\u186c\7\u01d9\2\2\u186c\u186e\7\u023e\2\2\u186d\u1866\3\2\2\2"+
		"\u186d\u1868\3\2\2\2\u186d\u1869\3\2\2\2\u186d\u186b\3\2\2\2\u186e\u02e3"+
		"\3\2\2\2\u186f\u1871\7\u01d9\2\2\u1870\u1872\t,\2\2\u1871\u1870\3\2\2"+
		"\2\u1871\u1872\3\2\2\2\u1872\u02e5\3\2\2\2\u1873\u1874\t-\2\2\u1874\u02e7"+
		"\3\2\2\2\u1875\u187f\5\u02ea\u0176\2\u1876\u187f\5\u02ec\u0177\2\u1877"+
		"\u187f\5\u02ee\u0178\2\u1878\u187f\5\u02f0\u0179\2\u1879\u187f\5\u02f2"+
		"\u017a\2\u187a\u187f\5\u02f4\u017b\2\u187b\u187f\5\u02f6\u017c\2\u187c"+
		"\u187f\5\u02f8\u017d\2\u187d\u187f\5\u02fa\u017e\2\u187e\u1875\3\2\2\2"+
		"\u187e\u1876\3\2\2\2\u187e\u1877\3\2\2\2\u187e\u1878\3\2\2\2\u187e\u1879"+
		"\3\2\2\2\u187e\u187a\3\2\2\2\u187e\u187b\3\2\2\2\u187e\u187c\3\2\2\2\u187e"+
		"\u187d\3\2\2\2\u187f\u1888\3\2\2\2\u1880\u1881\7\u0299\2\2\u1881\u1884"+
		"\5\u02c8\u0165\2\u1882\u1883\7\u0294\2\2\u1883\u1885\5\u02c8\u0165\2\u1884"+
		"\u1882\3\2\2\2\u1884\u1885\3\2\2\2\u1885\u1886\3\2\2\2\u1886\u1887\7\u029a"+
		"\2\2\u1887\u1889\3\2\2\2\u1888\u1880\3\2\2\2\u1888\u1889\3\2\2\2\u1889"+
		"\u02e9\3\2\2\2\u188a\u1891\7\f\2\2\u188b\u188c\7\u016e\2\2\u188c\u1891"+
		"\7\u0090\2\2\u188d\u1891\7\u0090\2\2\u188e\u1891\7\u00bd\2\2\u188f\u1891"+
		"\7\u01d8\2\2\u1890\u188a\3\2\2\2\u1890\u188b\3\2\2\2\u1890\u188d\3\2\2"+
		"\2\u1890\u188e\3\2\2\2\u1890\u188f\3\2\2\2\u1891\u02eb\3\2\2\2\u1892\u1893"+
		"\7\16\2\2\u1893\u02ed\3\2\2\2\u1894\u1895\7\u016e\2\2\u1895\u1899\7\u0091"+
		"\2\2\u1896\u1899\7\22\2\2\u1897\u1899\7\u0091\2\2\u1898\u1894\3\2\2\2"+
		"\u1898\u1896\3\2\2\2\u1898\u1897\3\2\2\2\u1899\u02ef\3\2\2\2\u189a\u189b"+
		"\7|\2\2\u189b\u189c\7\u0096\2\2\u189c\u18af\7\u0083\2\2\u189d\u18af\7"+
		"\u0081\2\2\u189e\u18af\7\u0280\2\2\u189f\u18af\7|\2\2\u18a0\u18af\7t\2"+
		"\2\u18a1\u18a2\7~\2\2\u18a2\u18a3\7\u0096\2\2\u18a3\u18af\7\u0083\2\2"+
		"\u18a4\u18a5\7B\2\2\u18a5\u18a6\7\u00e8\2\2\u18a6\u18a7\7\u0085\2\2\u18a7"+
		"\u18af\7\u01ff\2\2\u18a8\u18a9\7B\2\2\u18a9\u18aa\7\u025c\2\2\u18aa\u18ab"+
		"\7\u0085\2\2\u18ab\u18af\7\u0189\2\2\u18ac\u18af\7~\2\2\u18ad\u18af\7"+
		"B\2\2\u18ae\u189a\3\2\2\2\u18ae\u189d\3\2\2\2\u18ae\u189e\3\2\2\2\u18ae"+
		"\u189f\3\2\2\2\u18ae\u18a0\3\2\2\2\u18ae\u18a1\3\2\2\2\u18ae\u18a4\3\2"+
		"\2\2\u18ae\u18a8\3\2\2\2\u18ae\u18ac\3\2\2\2\u18ae\u18ad\3\2\2\2\u18af"+
		"\u02f1\3\2\2\2\u18b0\u18b1\7\u0104\2\2\u18b1\u18ba\7j\2\2\u18b2\u18b3"+
		"\7\61\2\2\u18b3\u18b4\7\u0299\2\2\u18b4\u18b5\7\u02c8\2\2\u18b5\u18ba"+
		"\7\u029a\2\2\u18b6\u18ba\7\u027d\2\2\u18b7\u18ba\7\61\2\2\u18b8\u18ba"+
		"\7l\2\2\u18b9\u18b0\3\2\2\2\u18b9\u18b2\3\2\2\2\u18b9\u18b6\3\2\2\2\u18b9"+
		"\u18b7\3\2\2\2\u18b9\u18b8\3\2\2\2\u18ba\u02f3\3\2\2\2\u18bb\u18bc\t."+
		"\2\2\u18bc\u02f5\3\2\2\2\u18bd\u18be\t/\2\2\u18be\u02f7\3\2\2\2\u18bf"+
		"\u18c0\7\u008f\2\2\u18c0\u02f9\3\2\2\2\u18c1\u18c2\7\u014a\2\2\u18c2\u02fb"+
		"\3\2\2\2\u18c3\u18c4\t\60\2\2\u18c4\u02fd\3\2\2\2\u0338\u02ff\u0304\u0309"+
		"\u030b\u030e\u0315\u039e\u03a9\u03ae\u03b0\u03b7\u03c0\u03c3\u03c6\u03cf"+
		"\u03df\u03e4\u03e7\u03fc\u0402\u040a\u0414\u041d\u041f\u0429\u0438\u043e"+
		"\u0443\u0448\u044b\u0453\u0457\u0466\u0474\u0482\u0494\u0499\u049e\u04a3"+
		"\u04a8\u04af\u04b4\u04b9\u04be\u04c5\u04d5\u04d7\u04de\u04e3\u04ec\u04ee"+
		"\u04f3\u04f9\u04ff\u0504\u050e\u0510\u0516\u051b\u0522\u0529\u052c\u053a"+
		"\u0546\u054c\u0552\u0554\u0557\u055b\u055e\u0567\u056c\u058c\u0597\u059b"+
		"\u059f\u05a3\u05ae\u05b4\u05c4\u05cc\u05d6\u05e1\u05e4\u05e9\u05f0\u05f7"+
		"\u05fc\u0604\u0609\u0610\u0618\u0621\u0624\u062b\u062d\u062f\u063b\u0641"+
		"\u0647\u064c\u0660\u06ae\u06b2\u06c2\u06c7\u06cb\u06ce\u06d2\u06d5\u06d8"+
		"\u06dc\u06e1\u06e5\u06e9\u06ed\u06f0\u06f4\u06f9\u06fc\u0700\u0703\u0706"+
		"\u070a\u070f\u0713\u0717\u071b\u071e\u0722\u0729\u0734\u073b\u073d\u0740"+
		"\u0745\u0748\u0754\u075c\u0764\u0768\u076c\u0773\u0778\u077d\u0781\u0797"+
		"\u079d\u07a5\u07af\u07b7\u07c1\u07c6\u07d0\u07d5\u07da\u07e1\u07e9\u07ee"+
		"\u07f0\u07f3\u07f8\u07fa\u07ff\u0807\u080d\u0810\u0815\u0819\u0829\u0835"+
		"\u0838\u083b\u0846\u084b\u0853\u0858\u0862\u0867\u0871\u0876\u087c\u0884"+
		"\u0886\u0889\u0898\u089f\u08a4\u08a8\u08b2\u08b5\u08b9\u08c0\u08c6\u08cd"+
		"\u08d0\u08d3\u08d9\u08dd\u08e1\u08e4\u08e7\u08ed\u08f1\u08f6\u08fd\u0904"+
		"\u0907\u090b\u090f\u0914\u0918\u091c\u0929\u092e\u0931\u0934\u0937\u093a"+
		"\u093d\u0940\u0944\u094b\u0950\u095a\u095f\u0968\u096b\u096e\u0976\u097e"+
		"\u0984\u0988\u098b\u098f\u0993\u0996\u099a\u099f\u09a3\u09a6\u09ab\u09af"+
		"\u09b4\u09b8\u09bc\u09cb\u09ce\u09df\u09e2\u09e5\u09ea\u09ec\u09f6\u09fb"+
		"\u0a03\u0a0c\u0a11\u0a1f\u0a24\u0a2b\u0a34\u0a39\u0a40\u0a49\u0a4e\u0a5c"+
		"\u0a63\u0a6a\u0a71\u0a74\u0a79\u0a81\u0a8a\u0a8f\u0a97\u0aa2\u0aa7\u0aad"+
		"\u0aaf\u0ab8\u0abf\u0ac3\u0ad1\u0adb\u0ae1\u0ae5\u0af0\u0afc\u0aff\u0b03"+
		"\u0b07\u0b0b\u0b27\u0b3b\u0b3e\u0b43\u0b4e\u0b52\u0b55\u0b58\u0b5c\u0b60"+
		"\u0b67\u0b6b\u0b73\u0b78\u0b7d\u0b80\u0b83\u0b86\u0b8a\u0b8f\u0b98\u0b9d"+
		"\u0ba2\u0ba6\u0bab\u0bb4\u0bb9\u0bbe\u0bc3\u0bc8\u0bd1\u0bd6\u0bde\u0be0"+
		"\u0be3\u0be7\u0bed\u0bf6\u0bf9\u0c08\u0c17\u0c23\u0c35\u0c3a\u0c3e\u0c43"+
		"\u0c49\u0c4f\u0c55\u0c5a\u0c64\u0c66\u0c71\u0c75\u0c78\u0c7f\u0c83\u0c86"+
		"\u0c8a\u0c8e\u0c96\u0c99\u0c9f\u0ca2\u0ca5\u0cb0\u0cb7\u0cba\u0cbd\u0cc2"+
		"\u0ccc\u0ccf\u0cd2\u0cd5\u0cd8\u0cdb\u0cde\u0ce1\u0ce9\u0cf1\u0cf6\u0cfd"+
		"\u0cff\u0d07\u0d0a\u0d10\u0d15\u0d19\u0d1c\u0d25\u0d2a\u0d33\u0d3e\u0d44"+
		"\u0d4a\u0d4e\u0d52\u0d5b\u0d63\u0d6b\u0d6e\u0d70\u0d74\u0d78\u0d7d\u0d82"+
		"\u0d88\u0d8b\u0d8f\u0d92\u0d95\u0d98\u0d9b\u0da1\u0da5\u0dab\u0dae\u0db2"+
		"\u0db5\u0db9\u0dc2\u0dc7\u0dca\u0dd8\u0de2\u0de4\u0dec\u0df4\u0dfa\u0dff"+
		"\u0e02\u0e07\u0e0b\u0e10\u0e18\u0e26\u0e2f\u0e4b\u0e51\u0e59\u0e5d\u0e62"+
		"\u0e69\u0e6d\u0e73\u0e7a\u0e94\u0e9b\u0ea1\u0ea5\u0ead\u0eb5\u0ebb\u0ebf"+
		"\u0ec4\u0ecb\u0ed3\u0eda\u0ede\u0ee3\u0eea\u0eee\u0ef8\u0eff\u0f03\u0f0d"+
		"\u0f14\u0f18\u0f1d\u0f24\u0f28\u0f2d\u0f31\u0f36\u0f3d\u0f41\u0f47\u0f4f"+
		"\u0f57\u0f5e\u0f62\u0f67\u0f6e\u0f73\u0f77\u0f7a\u0f89\u0f8f\u0f95\u0f9b"+
		"\u0fa1\u0fa5\u0faf\u0fb6\u0fb8\u0fc7\u0fcc\u0fd4\u0fda\u0fe0\u0fe2\u0fef"+
		"\u0ff9\u1005\u1008\u100d\u1015\u101a\u101c\u1020\u1027\u1033\u1036\u103b"+
		"\u1043\u1048\u104a\u1052\u1058\u105a\u1063\u106f\u1072\u1077\u107f\u1084"+
		"\u1086\u108f\u1095\u109f\u10a5\u10ab\u10ad\u10b7\u10bd\u10c3\u10c5\u10d1"+
		"\u10d7\u10dd\u10df\u10e8\u10ee\u10f4\u10f6\u10ff\u1105\u110c\u110e\u1116"+
		"\u1127\u112c\u1136\u113b\u114c\u114e\u1152\u1157\u115c\u115f\u1165\u116d"+
		"\u117c\u1180\u1187\u1191\u1198\u11a9\u11af\u11b4\u11b6\u11be\u11c4\u11ca"+
		"\u11cf\u11d1\u11de\u11e8\u11f4\u11f7\u11fc\u1202\u1209\u120e\u1210\u1214"+
		"\u121b\u1227\u122a\u122f\u1235\u123c\u1241\u1243\u124b\u1251\u1256\u1258"+
		"\u1261\u126d\u1270\u1275\u127b\u1282\u1287\u1289\u1292\u1298\u129e\u12a5"+
		"\u12ab\u12b1\u12b6\u12b8\u12c2\u12c8\u12ce\u12d3\u12d5\u12e1\u12e7\u12ed"+
		"\u12f2\u12f4\u12fd\u1303\u1309\u130e\u1310\u1319\u131f\u1325\u132c\u1331"+
		"\u1333\u133b\u1345\u134a\u1353\u1363\u136c\u1371\u1378\u137d\u1382\u1385"+
		"\u138f\u1394\u1396\u13ae\u13ba\u13be\u13c8\u13cc\u13da\u13de\u13e1\u13e3"+
		"\u13ec\u13f5\u13fe\u140c\u1415\u141c\u1427\u142b\u1432\u1438\u143f\u1446"+
		"\u144e\u1457\u145f\u1463\u1468\u146b\u1474\u147c\u147f\u1482\u1485\u1488"+
		"\u148b\u148e\u1492\u1494\u1497\u149a\u149d\u14a0\u14a3\u14ad\u14b0\u14b2"+
		"\u14b4\u14bc\u14c0\u14c3\u14d0\u14d5\u14d9\u14dd\u14e1\u14e5\u14e9\u14f0"+
		"\u14f2\u1501\u1504\u1508\u1510\u1521\u152d\u1530\u1539\u1541\u1548\u154c"+
		"\u155c\u155e\u1566\u156a\u157d\u1585\u158b\u158e\u1599\u159e\u15a1\u15a3"+
		"\u15a8\u15ac\u15b0\u15b4\u15b9\u15bc\u15bf\u15c2\u15c9\u15cf\u15d1\u15da"+
		"\u15ea\u15f0\u15fa\u15fd\u1604\u1607\u1610\u1613\u161e\u1626\u162c\u1634"+
		"\u1643\u164e\u1652\u165b\u165f\u166d\u1672\u1677\u167e\u1685\u1688\u168c"+
		"\u1691\u1693\u1697\u169c\u16a0\u16a8\u16ab\u16b2\u16b7\u16bd\u16c1\u16cd"+
		"\u16ec\u1702\u170e\u1719\u171e\u1723\u1728\u172f\u1734\u173b\u1740\u1747"+
		"\u174c\u1753\u1758\u175f\u1764\u176b\u1770\u1775\u177c\u1781\u1786\u178f"+
		"\u1794\u179b\u17a0\u17a7\u17ac\u17b3\u17b8\u17bf\u17c4\u17cb\u17eb\u17f5"+
		"\u1800\u180b\u1838\u1843\u184a\u185a\u186d\u1871\u187e\u1884\u1888\u1890"+
		"\u1898\u18ae\u18b9";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}